GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#377	

DATE:		November 7, 2012

TITLE:		Listener Feedback #154

SPEAKERS:	Steve Gibson & Tom Merritt

SOURCE FILE:	http://media.GRC.com/sn/SN-377.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Tom discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  Hey, I'm Tom Merritt, filling in for Leo, who's off on a cruise.  And I get to hang out with Steve Gibson and talk all about security.  We're going to go over the new browser updates, both in Firefox and Chrome.  There's some Do Not Track stuff to keep an eye on.  But there's some cool stuff in that Chrome revision, as well.  And we're still going to be talking about OAuth.  Just because Leo's gone doesn't mean there's not more to discuss.  We've got some great questions from folks in our Q&A section, coming up next. 



TOM MERRITT:  This is Security Now! with Steve Gibson, Episode 377, recorded November 7th, 2012:  Your questions, Steve's answers, #154.



It's time for Security Now! with the man who tries to keep you as safe as you possibly can online, Mr. GRC.com himself, Steve Gibson.  How's it going, Steve?



STEVE GIBSON:  It's going great.  And everyone is probably realizing you're not Leo.



TOM:  I am obviously not Leo.  Leo's off on his cruise.  So I get the pleasure, I get the perk of filling in on Security Now! for three weeks.  And this is going to be fun, man.  I can't wait.



STEVE:  Well, you have a familiar voice to everyone who listens to you and your gang over on Tech News Tonight.  Or I guess it's Today, isn't it, Tech News Today?



TOM:  Yeah, I guess it's sort of Tech News This Morning because we do it in the morning now.  But yes, I'm Tom Merritt, host of Tech News Today.  And this is Security Now!.  All right.  Well, let's get into the security news, starting with the updates.  We've got some Adobe updates to talk about.



STEVE:  Finally, Adobe is on schedule.  We've had some famous emergency updates which they've reluctantly released outside of their quarterly normal update schedule.  But this is back on their planned schedule for actually yesterday, which was also Election Day in the U.S.  So this is November 6th was they made available updates to Flash and Air, both of those runtimes.  The updates pertain to Windows, Mac, Linux, and Android releases, so across the board.  They fixed seven troublesome critical vulnerabilities, so these are worth doing.



I went to check my version under Firefox, wondering if Firefox would be alerting me to the fact that this version of Flash was out of date because there's been some plans to do that.  And I know that in some cases it takes responsibility.  In this case it didn't.  Maybe I need to shut it down and start it up again or something.  But you can go to www.adobe.com/software/flash/about.  And that will run a little Flash app which shows you a bouncing red cube, given that you permit Flash to run in your browser, and it will show you your current version and also list the latest versions that are available.  And in the case that I did this today, I was seeing that I was not running what they have just released.  Now, on that page they do give you a "Download the latest" button.  If you go there, you want to be careful to turn off the "Get your free McAfee virus scan."



TOM:  Oh, man.  Did they opt you in?  Do you have to uncheck it?



STEVE:  Oh, yeah.  That's so annoying.  You can also go to www.adobe.com/products/flashplayer/distribution3 - that is, the numeral 3 - dot html.  That just takes you directly to a clean page where you just get the download that you need for whatever platform you're running and no upsell nonsense installing things you didn't ask for.



TOM:  Now, Chrome has its own Adobe Flash built into it.  But a lot of Chrome users still need to do this; right?



STEVE:  I'm not sure where Chrome is.  I haven't seen, I didn't see an announcement from Chrome in the last day or two.  But they're now taking responsibility for keeping that up to date.  So they ought to be doing it for you.



TOM:  Yeah.  So you might want to check on that.  I know there are some features in Flash that I actually have to have the Adobe Flash plugin running to get them to work in Chrome because the Chrome Flash is incompatible for some reason.  Every once in a while there's a page that'll do an auto-detect.  So that's just a little extra thing to keep in mind.



STEVE:  And it is annoying that we cannot get away from it.  I mean, I know that when I, I mean, I really love my iPad, and I use it all the time when I'm out and about.  And you run across sites where it's like, okay, wait, I'll just have to go, you know, wait till I get home in order to do this because it's still - it provides enough extra, if you'll pardon the term, "flash" to the site that there are a lot of sites that still just assume that you're going to have it or be able to make it available.



TOM:  Wordsworth in the chatroom points us to the Chrome blogspot, claims that their Chrome 23 stable release did include a Flash update.



STEVE:  Ah, good.  And in fact we're about to talk about Chrome 23 stable, which is just out.  But I wanted to mention Firefox first.  We've got a new Firefox beta which is - they're continuing to move their click-to-play forward, which click-to-play is the technology which prevents vulnerable plugins from running without the user's permission.  Now, I didn't have to click it just now when I was playing with Flash, and it was vulnerable and obsolete.  So it must not be in...



TOM:  Not perfect.



STEVE:  Well, or not in the version that I've got yet.  What's nice is that they're doing something else in this latest release that'll be out, for some reason I have the number "17" in my head.  We're all running in crazy version numbers these days, instead of - we were on Firefox 3 forever, and then 4 forever, and suddenly Firefox version numbers took off, incrementing at the same rate as the national debt.  So it's just gone crazy.



But they've added something which the Chromium Project has been talking about in their blogs, which is enforcement of strict transport security.  So we did an episode on strict transport security.  The idea is that what we really want is we want to us the web with SSL as much as possible.  So if sites support ubiquitous secure socket connections, that is, HTTPS, then the way to make that even stronger is for the site to be able to declare to the browser that it supports strict transport security.



And what the browser will then do is, if any URLs are in the page which are not HTTPS, this permits the browser to upgrade them to SSL connections, knowing that the site is okay with that.  So the benefit is that it prevents various types of man-in-the-middle and JavaScripting attacks where, by filtering the page coming in and removing the S's from the HTTPs, it would be possible, for example, to get cookies that are supposed to be protected by SSL security if they were not properly flagged as secure-only cookies, you could get them to leak out in the clear.  And of course this is famously important for things like using laptops in open WiFi networks like Starbucks uses where there's no wireless security at the hotspot.  And...



TOM:  Should you use something like HTTPS Everywhere in addition to this?



STEVE:  Well, the two interact.  What you want is, if the site says that it supports this, then the browser is able to itself update the security.  Now, the problem has been, though, that if there was initially a man in the middle that prevented the server from making this declaration, that is, the way this is done is, when you initially connect, the server sends back a response header set, as it normally does in answering every browser request, but it adds a header that is "strict-transport-security:" and then an age for that to be enforced and some additional parameters, like whether that includes subdomains from the root domain of the site.  So there has still been a problem with this, which is, if that initial declaration is filtered, then the user agent, or the browser, never gets the news that the site supports strict transport security.



So what Firefox is now experimenting with, and this is part of the Chromium Project, is automatically bringing up strict transport security preemptively for a large and growing list of previously known, built-in domains which support it.  And this is a list which is large already and growing.  So for all the servers that are known to support strict transport security, the browser itself would have knowledge of that and would never initiate a non-SSL connection to that domain or subdomain.



So this is really nice.  This is, I mean, what we're seeing over the last couple years as sort of this awareness has been growing that the future is cloud and connected and more of our experience is through the browser, we're seeing real maturation of browser security and technology in really useful ways.  So this is just neat, the idea that Firefox and Chrome will preemptively know which sites are able to support SSL, even if you've never visited them.



So this max age, the Max Age header allows the browser to be taught that a site supports strict transport security, but you still need to get it the first time.  And so there's that little bit of a wedge that malware could exploit if the browser wasn't told, or if you were using a new machine, and you had never visited that site.  So the browser, again, wouldn't have the information that that site is able to support STS.  So this is just, you know, it's a small thing, but it's one fewer ways of malware getting into, getting hold of our browsers.  And of course browsers are becoming increasingly important.



TOM:  And who updates that whitelist of the servers?  Is that administered by Mozilla?



STEVE:  It's just built in.  It's built into the core browser code.  So now we're seeing much more smooth and continuous updates in the background.  So, I mean, Chrome is updating itself.  Every time you launch it, it verifies that it's got the latest and greatest.  And what we've seen in the last few iterations of Firefox is that they've been making their own update process increasingly transparent so that they're following that Chrome model of taking responsibility for keeping the browser current all the time.



TOM:  And is it Mozilla that's making the list in the first place?



STEVE:  I don't know.  I went to - I have the link in the show notes, src.chromium.org.  And it's a JSON file:  transport_security_state_static.  And so that's built into the browser code base.  And it's a pretty comprehensive list.  It's down toward the end of the list.



TOM:  It's probably the project, the Chromium Project, then, that's keeping it up to date.



STEVE:  Yes.



TOM:  So you have a little HSTS guacamole and a little HTTPS Everywhere rice, and then you wrap it up in a VPN burrito, and you've got delicious security.



STEVE:  Right.  Although speaking...



TOM:  Yeah, let's talk about Chrome v23.  We mentioned that briefly earlier.



STEVE:  Yup.  Yeah.  So Chrome with v23 has been the last browser, the last major browser to finally add support for the Do Not Track header, the DNT:.  Microsoft, Mozilla, Apple, and even Opera have enabled it some time ago.  Of course we've spoken about how Microsoft's enabling, well, I should say those have supported it some time ago.  And they've all played by the official W3C rules of having it off by default, with the single exception of Microsoft, which in IE10 has enabled that header unless the user turns it off, which has created some controversy.  Apparently the Apache web server group have stated that they're going to just ignore the Do Not Track header when it is expressed from IE10 because it breaks the rules.



Now, Google has done it in the standards-compliant fashion, as has Firefox and Apple and Opera, where it's off by default.  But not only is it off by default, but it's quite well hidden by default.  So I went looking for it.  And you go to Settings in Chrome, and if you look there, it's not present.  So you need to click the Show Advanced Settings at the bottom of that page.  Then that expands another block of things, which then exposes the Privacy option.  And under Privacy, under the Privacy section, the last item there is "Send a 'Do Not Track'," it has in quotes, "request with your browsing traffic."  And if you click that, it pops up a notice that sort of explains it.  And it's interesting because you have to then say Okay to that.  The first time I just hit Cancel because I thought, okay, I'm just kind of canceling this notification.  But it disabled the checkbox.  So it's like, okay, it's there, but they're not really encouraging you to click this.



So when you do click it, what pops up says "Enabling 'Do Not Track' means that a request will be included with your browsing traffic.  Any effect depends on whether a website responds to the request and how the request is interpreted.  For example, some websites may respond to this request by showing you ads that are not based on other websites you've visited.  Many websites will still collect and use your browsing data, for example, to improve security, to provide content, services, ads and recommendations on their websites, and to generate reporting statistics."  Then they have a "Learn more" at the end.  And if you click that, then it takes you to a page that asks the question, "Does Chrome provide details of which websites and web services respect Do Not Track requests and how they interpret them?"



TOM:  It's kind of a funny answer, too, isn't it.



STEVE:  Uh-huh.  So they answer their own question, saying, "No.  At this time most web services, including Google's, do not alter their behavior or change their services upon receiving Do Not Track requests."



TOM:  So nobody uses it.  But just so you know.



STEVE:  Well, and this is why lots of people just think it's nonsense.  My position has always been it's better than nothing.  And that once upon a time the web was regarded as nonsense.  And there was this whole chicken-and-egg problem.  People who were arguing against the Internet were saying, well, no one's going to go there if there aren't sites there.  And no one's going to do sites because no one's going to go.  And it's like, okay, well, that all worked out.



TOM:  Yeah.



STEVE:  So I'm convinced that this is progress.  And this is the way, this is exactly the way I've said it was going to happen.  I've said...



TOM:  If Microsoft doesn't ruin it, though; right?  Because the idea is that you need to get most of the legitimate websites onboard to respect the Do Not Track, and then it's useful.  But a bunch of them are now getting upset because Microsoft turned it on by default, as you mentioned, breaking the rules.  That's starting to muddy the waters of whether it's going to catch on or not.



STEVE:  Well, this isn't going to be an easy path.



TOM:  Yeah, yeah.



STEVE:  I mean, the big problem is that everyone argues against this, saying, well, it's voluntary.  It's like, today it's voluntary.  That's fine.  Users are expressing their opinions, and so we'll get some sense for that.  Now, you're right about Microsoft.  But of course it's only in IE10 of that particular browser version, which they have said they're going to make available under Windows 7, as well.  So sites know which user agent, which browser you're using, and which version.  So, for example, Apache can ignore the Do Not Track header on IE10, but choose to make it available for other sites running on their services for other browsers, or even other versions of Internet Explorer.



TOM:  But the sites have to get to critical mass.  And if they don't have IE, then it starts to be a harder argument to get them to bother respecting it.  That's what I worry about, anyway.



STEVE:  What I expect we will see during Obama's presidency...



TOM:  During the next four years.



STEVE:  ...so that gives us four years, we will see some legislation eventually.  It'll be soft, and it'll get stronger, and ultimately it will end up being legally enforceable.  And I don't think that's a bad thing.  I think that this is the way we're going to get there, and I'm happy that I'm talking to you, Tom, and not Leo as we discuss this.



TOM:  Well, let's talk about something fun:  GPU accelerated video in Windows.



STEVE:  Well, yeah.  That's another thing that's in Chrome v23, is in their experiments, what Chrome v23 adds is video playback in the browser now uses the graphics processing unit to essentially lower the power consumption.  Since the GPU has got hardware specifically designed for rendering video, it's able to do that with a built-in hardware rather than lots of software.  So you end up, they're saying, getting about a 25 percent increase in battery life playing video in Chrome 23 on a laptop versus Chrome 22 and presumably other non-GPU-accelerated video browsers.  So that's just, again, this is all good because we're just sort of seeing browsers moving forward.  And Google is paving some of these roads.  Firefox is paving others.  They're having to be cross-compatible and do the good things that the other one does.  And so it's - and then Microsoft is sort of coming along, too, trying to keep up with the various standards that the other guys are pioneering.



TOM:  Anything that gets me more battery life, I am very much in favor of, wherever I can get it.  Now, this next thing, the per-site permissions, reminds me a little of NoScript.



STEVE:  Well, I'm very excited.  That's one of the huge movements forward.  In fact, NotScript was the extension that I have been running in Google, in Chrome so far.



TOM:  In Chrome, yeah.  I run that one, too, on Chrome.



STEVE:  And so I'm happy that now what we have is we have added, also with v23, is per-site permissions are built into Chrome.



TOM:  That's fantastic.



STEVE:  Once again, they're buried.  So they are essentially nonexistent in the same way that the DNT header option is nonexistent for non-expert users.  But it's there.  So once again you go into Settings and then Show Advanced Settings.  And then under Privacy, oh, well, first I should say the way you see this is when you're looking at any site's page, you click on the little site icon to the left of the URL.



TOM:  So where the lock goes?



STEVE:  Exactly, the little lock guy.  That now pops open a dropdown showing you, for that site, a very comprehensive set of settings are in place for cookies, images, JavaScript, handlers, plugins, pop-ups, locations, notifications, full screen, mouse lock, and what they call "media."  And so normally a site will default to the default settings for the browser, and then you're able to override either always-on or always-off for all of those things individually for that site.  So I thought, okay, well, to make this work the way, like, for real safety, we need somehow to turn JavaScript off, disable JavaScript by default.



So then I went digging around, how do I change the defaults globally so that then I enable it for specific sites.  And so that's where you go into Settings, Show Advanced Settings under Privacy, and then click the Content Settings button.  And that pops up a dialogue with where all of these features can have their defaults changed, and it also explains what they are to some degree.  For example, it has an item for handlers which allows sites to ask to become default handlers.  And you can say no, don't bother me with that.  Or plugins, you can choose "Run the plugins," "Click-to-play," or "Block" them.  And there's something called "Mouse lock."  And I thought, what the hell is mouse lock?  Well, it allows sites to disable the mouse cursor.



TOM:  Oh.



STEVE:  And you can either allow that; you can have, if the site requests it, you can have Chrome prompt you for whether you want to allow that or not; or you can block it outright.  And then there's also two different options at the bottom which are nice to see, which is for Flash camera & microphone control, where sites can request it or sites can require it.  And then you're able to either have Chrome ask you or block you.  So, oh, and right there, all of those support per-site overrides.  And there's management buttons that allow you to pop up and see what overrides you have in place on a per-site basis.



TOM:  Well, that's great because something like Google Hangout I might say, I want it to have access to my camera and mic because I trust it.  But I don't want anything else to access that thing.



STEVE:  Right.  So what we're getting, and this is really nice, the only thing we don't yet have is side tabs, and so I can't use Chrome yet because I've got 75 tabs open over in Firefox right now.  But we know that Google understands that some people organize their lives around tabs, and so they didn't like having the tabs on the side.  But there has been blogging from Google saying, yes, we understand, we're going to come up with something, some sort of really cool tab management.  Which reminds me that right now I'm using an add-on over on Firefox to move the tabs onto the side.  Firefox will be getting native side column tabs.  And of course this is all as a consequence of the fact that screens are becoming wider than they are tall.  And so it's making more sense to get the tabs off from the top and move them over to the side.  In which case you can just have so many of them.  It's wonderful.



TOM:  I like being able to move them around a lot, too, which is the one thing that Chrome has been nice to.  But any of the extensions for Chrome that I've tried make that buggy for some reason.  So having it native I think would be desirable for that reason, too.



STEVE:  And I want to see what they come up with.  I'm really happy with the UI, with the Chrome UI.  I'm still a Firefox user because I've got my tabs on the side and the add-ins that I like.  But, boy, Chrome is maturing as a power user's browser with this v23 release, where we can change the global defaults to lock it down the way we want to; and then, on a site-by-site basis, just as with NoScript, we can flip these things back on again.  It's getting close.



TOM:  The only thing that bugs me about the per-site permissions is that I didn't have it up till now.  It's like I spent so much time with NotScript, customizing it, teaching it.  It's like, wah, why didn't you have this before?  But it's great.  I think that's awesome.



STEVE:  Yeah.



TOM:  So tell me about this TNO cloud backup solution.  What is this?



STEVE:  Well, I teased everyone about it last week because I received email from its author, telling me that the news was embargoed until yesterday.  Well, I'm not sure what that meant because everybody else was tweeting me about it.  And I thought, well, okay, wait a minute.  How does everyone else know about this, and I do, too, but I'm not supposed to talk about it?  Anyway, so back on May 2nd I famously tweeted, and this is @SGgrc, I said, quote, "'ARQ'  Cloud backup for Mac to Amazon S3 w/TNO Crypto & iOS viewer.  The deeper I dig, the more I wish I was a Mac user."



TOM:  Wow.



STEVE:  And then I did a little shortened shortcut to HaystackSoftware.com.  Now, what the news is, is that with v3 that was released, I guess yesterday, ARQ for the Mac now supports the Amazon Glacier service.  Glacier is the - and we discussed it on the podcast a few weeks ago - is an interesting and very appealing long-term storage solution from Amazon.  The idea is that, if you don't need rapid access to your cloud data, they will make it available to you eventually, but at a much lower cost.  In fact, it's one penny per gigabyte per month.  So, okay, let's do a little math.



TOM:  Yeah, that's...



STEVE:  That's 100GB, that's $1 a month for 100GB, or 10 bucks a month for a terabyte.  So that's really nice.  ARQ, one of the reasons I like ARQ is that it is a flat fee purchase, $29.  You buy it per computer, one time, and then you own it.  You can upgrade from ARQ 2 for 15 bucks to ARQ 3.  And I did look at the crypto.  Anyone who's interested who is a Mac user, I know that Leo switched to it.  The UI is very Mac-ish, and that is to say it's not super techie.  It's very friendly, easy to use.  So it's HaystackSoftware.com.  And this, I mean, to me, the fit with S3 Glacier is perfect for long-term archival storage.



TOM:  Yes, absolutely.



STEVE:  People might say, oh, well, but I've got 10TB of data, so that would be $100 a month.  It's like, whoa, wait a minute.  What have you got, 10TB?  Sure, of, like, crap that you ripped from DVDs or downloaded from torrents or who knows what.  My point is that that stuff isn't original content.  Anybody who's, like, creating anything original, even photo collections are not going to be that massive.  So, and this is a great deal.  So I just think it makes a lot of sense.



TOM:  Oh, yeah.  This reminds me of the old Jungle Disk service, which did S3 for its backend.  You paid for the -  same sort of thing.  You paid for the software, and then you just subscribed to S3.  I stopped using that, I don't know, four or five years ago because the S3 fees were getting too big for what I had.



STEVE:  Right.  And Jungle Disk...



TOM:  So Glacier makes this work well again.



STEVE:  Yeah, Jungle Disk was our choice as a high-quality TNO, Trust No One, crypto.  They did it right.  And ARQ has done it right, too, so that your system knows the password.  It's symmetric crypto.  It never leaves your machine.  All that's being sent up there is pseudorandom noise.  And Amazon is doing nothing but just storing your random numbers, as far as they can tell.  As far as we know, no force on Earth is able to decrypt that stuff.  It's really good crypto.  So I did vet it completely and looked at it carefully, and that's why I recommended, for Mac users, HaystackSoftware.com was a great solution.  So I really like the fact that you can put that much data up at Amazon.  And, hey, for things like archival backup, you don't need instant access to it.  So Glacier is a really nice tradeoff, I think.



TOM:  That's one of the reasons I'm using this little ZaReason laptop now, even though it's only got a 64GB flash drive, is I get to use a flash drive.  And I've got encrypted backups of the stuff I don't need every day, and I've got a Dropbox with the stuff that I go back and forth and I do need access all the time, if I need a little more space than what this thing has.



STEVE:  Yeah.



TOM:  So it's perfect that way.  So tell me, how do you pronounce this next thing [PortQry]?  Is it "port query"?



STEVE:  I think so.  I mean, I know that's what it's short for.  It's nice, too, because Google only produces the proper results for it.  It's not a new utility, but someone who tweets to me often, his Twitter handle is Captn_Caveman...



TOM:  It does make me want to yell like the cartoon.



STEVE:  His real name is Joachim.  I think he's over in Germany somewhere.  He's been a follower and a frequent contributor to a Twitter stream for me for years.  Anyway,  he sent me a link to a page of free Microsoft security stuff.  And in browsing through it, I mean, I saw the EMET stuff and random things that we know about.  But there was this PortQry that I thought our users would get a kick out of.  And it's free.  It's old.  It's back from 2003, so nine years ago.  But it's small and lightweight.



So if you just Google "PortQry," what it is, and the reason I wanted to bring it up to our users' attention, or our listeners' attention, is that it is a local port scanner.  So there's always been interest in, within a local area network, scanning your own machines.  And this is very small and lightweight.  It's a few hundred K and runs on anything post NT, so all the way back to Windows 2000 and on.  So I just wanted to bring it to people's attention.  It's a simple command line-oriented scanner and shows the status of ports on machines and supports a number of protocols, so it's able to check them for different protocols, and written by a Microsoftie some time ago.



TOM:  Very cool.  Captn_Caveman is good with that stuff.



STEVE:  Yeah.



TOM:  There's a security movie up on Kickstarter that apparently is your fault.



STEVE:  I guess that's the case.  I wanted to give a little shout-out and let our users know, there's a guy who's actually in my neck of the woods, in Costa Mesa, California, Jonathan Schiefer, who tweets @jschiefer.  But he has the more memorable - and I was surprised he was able to get this domain.  TheRootKit.com is the domain.



TOM:  I'm surprised Sony didn't have it, yeah.



STEVE:  Yeah.  If you go to TheRootKit.com, it bounces you over to his Kickstarter page.  And so what he tweeted me is he says, "@SGgrc, I'm doing a Kickstarter for my movie TheRootKit.com about computer hackers.  Most of my research came from Security Now!.  Thanks."  So I went over to the page.  And under his "Who Are You," he describes himself.  He says, "My name is Jonathan Schiefer.  I'm the writer, director, editor, and one of the producers on 'The Root Kit.'  I've been writing scripts for 10 years.  I've been making movies, short films, commercials, music videos, and industrial videos for the past three years.  But that's what I do.  Who am I?  I'm a person like you, trying to make my dreams come true, trying to make a difference.  'The Root Kit' is my best attempt to date."  So as of course is the case with Kickstarter, he's hoping to generate some critical mass of contributions in order to help produce this movie.  Anyone who's interested, I encourage you to go to TheRootKit.com, check it out, and maybe consider supporting him.  I am certainly going to do so.



TOM:  Yeah.  I'm going to maybe take a look at this.  We could talk about it on Frame Rate, as well.



STEVE:  Yeah, that'd be great.  So I did find a nice testimonial for SpinRite that I wanted to share with our listeners.  This guy is rather formal.  He said, "Dear Mr. Gibson."  And then he says, in parentheses, (Steve).  It's like, okay.  He says...



TOM:  Is that your father?  Do you do that thing, "Mr. Gibson is my father"?



STEVE:  He says, "I just got off the phone with your helpful, knowledgeable, and nice sales/customer service lady.  I had my SpinRite moment, a major catastrophic hard drive failure caused by power outages and surges from the fast-moving storm system here in the East."  Whoops.  So he says, "The surge protector did not work."



TOM:  Ohhh.



STEVE:  "The drive was caught in an endless loop, and I knew there were disk errors from using other lame third-party utilities," he says, "three different ones.  My OS files were there, but my efforts to repair did not work.  One tool said I had, quote, 'disk errors,' unquote, and the restore points, of course, would not work, either.  The drive's controller chip was possibly fried, and my drive seemed toasted, as well.  Of course I had an image that was about three weeks old.  But the drive had the image on it in a different partition, and both were now unreadable.



"So I purchased SpinRite 6 after hearing about it frequently on the Security Now! podcast.  After figuring that it was my only option, as the malfunctioning disk could not be restored from my save image or backup, and the reinstallation was also inaccessible, I needed to get it working again so I could image or do a repair installation of the OS.  I used your well-designed program to create a bootable SpinRite CD.  I started it after following the easy-to-follow instructions and waited and watched.  SpinRite automatically recovered and repaired 12 sectors, and I was then able to boot and had the disk detected in another machine as my motherboard was RMA'd to Intel."  I guess it really did fry him.



TOM:  Wow, yeah.



STEVE:  "After a repair installation, the machine is back to normal with no files lost.  It boots fine, and SpinRite saved the day.  It was well worth the cost and time saved, easy to use, and, after nearly 20 years of making systems, this was the first I needed to use it.  But I know it will not be the last.  Thanks for a great and easy-to-use product.  David G. Speigner in Marlborough, Connecticut."  So, David, thanks for sharing your happy story.



TOM:  When I saw it was from Connecticut, I wondered if that was going to be a hurricane or storm-related story.  So, yeah.  I'm sure there's a lot of people in similar situations out there with all of the havoc that that caused.



All right.  It's one of my favorite things to do.  It's time for a little listener feedback.  This is #155.  I was talking to Steve before the show.  It's been almost a year since I filled in on Security Now!, and the last one I did was a Q&A.



STEVE:  Yup.



TOM:  So let's start off with Sean O'Brien in Texas, tweeting you the following question:  @SGgrc, please don't say it's hard to factor large primes.  It's impossible to factor any prime.



STEVE:  Yeah, so, okay.  To everyone who sent this - I ran across a number of similar people groaning at me in the mailbag.  And, okay.  So I guess I had been misspeaking.  This is, okay, first of all, I would argue that it's not impossible to factor any prime.  It's trivially easy.



TOM:  Exactly.  I was just thinking the same thing.  I'm like, you can do it once.



STEVE:  Right.  So, and we all know that what I have been meaning to say every time I say "It's hard to factor large primes" is that it's hard to factor the product of large primes.  So I've been taking a shortcut.  I apologize to all of our pedantic listeners.  I want to, I mean, I can't say that they're wrong because I'm a perfectionist, as well.  I mean, we know I am.  And so I have been misspeaking.  So I stand corrected.  To all of you who said, Steve, you know, you keep talking about factoring primes, it's like, okay, factoring the product of large primes.  So if I make the mistake again, we all know that we all know what I mean.  I'm going to try not to make that mistake.  Now I'm sure I'll be so self-conscious about it that I will say it correctly from now on.



TOM:  No, you're absolutely - you're a good man, Steve, for owning up to it and doing that because I've done exactly what you're doing right now.  It really does help you not make the mistake again, for sure.



Andrew in Arizona wonders about decrypting files.  He says:  Steve, I have a question about cracking an encrypted file or block of text.  I understand how it's possible to use a dictionary attack to figure out a string of text, for example a password, that has been hashed.  Hash the text.  If the hashes match, viola [sic].  But I am wondering how the process works for encrypted files.  Where would you start, and how would you know when you've guessed the right key?



STEVE:  Okay.  So that's really a good question.  There are two approaches for - so the idea being you've got a blob of what looks like just pseudorandom noise.  And we assume that the reverse-engineering information is available to tell you what crypto algorithm was used to encrypt it.  So you know what crypto algorithm you would use to decrypt it.  Meaning that the only missing piece of information is the key, which is, what, 128 bits, 256 bits, whatever.



So the question is, how do you know, how do you go about doing a brute-force attack, essentially?  Well, there's two solutions or two approaches.  One of the things that normally comes along with encryption is authentication.  That is, not only are you going to decrypt something, but the algorithm which is used or a secondary algorithm also authenticates that it has not been modified.  So it's not enough just to apply the key and get something that appears good.  How do you know it wasn't cleverly tampered with so that it looks fine, but it's actually different data than was originally encrypted?



And so normally most encrypted modes either authenticate at the same time, or there's an authentication pass that can be made.  So you could apply keys and then, I mean, like, brute-force different keys and apply the authentication portion to see whether the block authenticates and, if it does, then perform the decryption.  In some cases the authentication process is faster than decrypting it.  So that works.  But what you can normally do is only decrypt the beginning of the file, which is going to be faster than either of those two approaches.



For example, you might have a TrueCrypt volume which has a well-documented, publicly well-known format and header.  And so the idea would be you successively guess what the key might be and apply that key to the beginning of the TrueCrypt volume and see if you get something that makes sense.  See that the result of maybe the first 1K looks like a valid TrueCrypt header.  It's extremely unlikely that you would guess a key which makes the beginning of the volume decrypt perfectly, but it's actually the wrong key, and the rest of the volume decrypts incorrectly.  I mean, it's possible, but really unlikely.  But if nothing else, only do the beginning till you get something that looks like it's good, and then apply the key to the balance and see if the whole thing makes sense.



But so anyway, the point is the way to try it is just guess.  Begin the decryption of the file and go only far enough in till you get enough, till you can see enough of what might be the decrypted content to decide, oh, look, it's English.  I mean, it's no longer gibberish.  This looks like a document.



TOM:  I'm seeing header stuff, sort of, yeah.



STEVE:  Exactly.  Exactly.  No need to go through the entire thing.  It'll just take you several lifetimes.  Just get enough to see if it makes sense.  And in fact you could actually apply a clever decryption scheme which really does very minimal decryption, only goes in a few blocks' worth of deciphering and immediately backs out and rejects a guess if it's clearly not correct.  And if it looks like, ooh, it might be correct, go a little bit further.  So anyway, that's the approach to use if you're trying to just tackle something like that and don't have any idea where to start, but you just have to brute-force a file.



TOM:  The header is like that little nub that you can start scratching away at, so to speak, and get in there and erode the rest of that encryption.



STEVE:  Right, well, yeah, it provides a structured, sort of a structured metadata for the file.  And you can normally quickly see whether it's, I mean, most decryptions are going to just produce complete noise as opposed to something that, oh, look, that might be a header.



TOM:  Yeah.  By the way, he wrote "viola."  Everyone in the chatroom was on me, and even Jammerbabe was like, "Viola, not voila?"  No, that's what he wrote.



STEVE:  He did write - he did, you're right.



TOM:  Matt in London shares a useful tip of Microsoft email users:  Hey, Steve.  I use Outlook Express always set to open email in plaintext.  However, if I see something that looks odd, I point to the unread email, click and drag onto the desktop, where it becomes a little .eml envelope.  I then open Notepad and drag the envelope onto the Notepad window.  There I can see the headers and read in plaintext, just in case someone has a clever zero-day Outlook hack.



STEVE:  That's a great tip, and so I wanted to share it with our listeners.  And it's simple to do.  I often do the same thing myself.  I've got a little hex editor that I ran across decades ago that I've carried with me from one Windows update to another.  It's called Hex Edit.  And at any time something just looks a little suspicious, it's an attachment that I really want to open but I'm just scared to open it, I just say open in my little hex editor.  And that allows me to browse around and kind of see what's in there without committing to opening it in one of the typical proper format handlers.  And so this is something very similar, but using tools that everyone has.  So I think Matt's got a great little tip.



TOM:  That's great.



STEVE:  Just drag the file to the desktop and then drop it on Notepad, and then you're viewing it in something that is just text, and Outlook has no chance to touch it.



TOM:  Yeah, everybody's sharing their editors now in the chatroom.  This is great.  Tamahome says Emax.  Web7157, Notepad+.  Strength says MadEdit.  I'd probably say Gedit.  There's lots of different approaches to that, but it's a useable tip no matter what kind of software you've got.  That's pretty cool.  I just usually delete the email.  I'm like, eh, don't want anything to do with it.



Student 17 in New Zealand shares an OAuth observation:  Something I noticed when logging into a site using OAuth to authenticate with Twitter was that, when my browser jumped to Twitter, LastPass recognized the site and auto-filled my login details.  Since LastPass would not auto-fill on a domain that looks like Twitter but is not Twitter, wouldn't this be a way to protect yourself from spoofing?



STEVE:  That's a great thought.  And the answer is yes.  One of the things that I have noticed is, since I'm an avid LastPass user, sometimes I'll go to a page, and I'm expecting LastPass to see fields that it ought to populate.  And it's like, okay, wait a minute.  Why is LastPass not engaging and working?  So I've seen myself that, once you get used to having LastPass around to fill in the fields for you, if something happens and it doesn't, you say, okay, wait a minute, what's wrong?  Now, what I've noticed is sometimes I just have to kind of click in a field to wake up LastPass's observing stuff.  I have to give focus to one of the form's fields, and then LastPass will say, oh, you want me to fill this in.



But we've been talking about the problem of - and here we are, predicting the future again.  There is going to be an exploit where people get used to using OAuth, the so-called login using your Twitter account, login using your Facebook account, which we're seeing more and more because it's a low-friction way of acquiring credentials from someone on a site where you aren't known, using a site where you are known.  And it's very convenient.  But the problem is spoofing.  We are going to see instances of OAuth spoofing as this becomes increasingly popular.  There's just - there's no other way about it.



TOM:  And it's so dead simple to make a page that looks like it's OAuth.



STEVE:  Oh, yes.  And once people get used to doing it, they'll just say, oh, yeah, of course, and won't notice that the URL is Faceb00k.com instead.  But again, as Student 17 in New Zealand observes, LastPass would not engage.  And so it's sort of nice to have it there and to have you say, wait a minute, why didn't LastPass log me in?



TOM:  My favorite is when they use the Cyrillic O's instead, so you can't even tell by looking.



STEVE:  Yup.



TOM:  [Ricardo] J., Toronto, Ontario, Canada wonders about hardware made in China:  I have been listening to your podcast for about two years now.  And while I don't necessarily understand the propeller hat episodes, he calls them, I do learn a lot from the show.  I own SpinRite; and, though I have not had to use it for a catastrophic HD failure, it did fix a mysterious random slowness issue with my mother's laptop.



With the recent congressional warnings about Chinese telecoms being allowed to enter the U.S. and possibly spy on the communications they are helping to deliver, has anyone given thought to the hardware made in China?  Even if Chinese companies are kept out, I would have to guess that most of the hardware that is used is either entirely or some part is made in China.  Do companies that sell networking equipment tear down random samples of retail products to see if the components have been modified?  For that matter, does a consumer electronics company like Apple perform tests like this?  I would think that putting compromised equipment into your network would be just as bad as allowing a person to walk in off the street and sit at a terminal.



STEVE:  Well, I'm uncomfortable picking on China or any one nation.  And we do know that apparently a lot of hacking is coming from Chinese IPs.  The government officially denies any state sponsorship of that, and I want to take them at their word.  But it is the case that there exists some international tensions between major global competitors.



TOM:  There's a lack of trust.



STEVE:  Yes.  And Richard's point, or Ricardo's point, sorry, is dead-on right.  I mean, we've seen instances where microcode on products has been mistakenly, you know, already contained malware.  Flash drives were shipped with malware on them.  I mean, little mistakes like that have happened.  And if a state sponsor like China really wanted to infiltrate this country, or any company that was importing their exports, they could certainly produce a modified network chip, that it would be, I mean, you'd have to really go to some lengths to see that there was something unusual about it.



I mean, state-level sponsorship can produce a microprocessor with a whole chunk of private microcode that you only access if you put specific data into certain registers and execute a certain instruction, and that takes you off into a different area of microcode.  I mean, this sounds like science fiction, but it's absolutely possible.



TOM:  And the U.S. does this to other countries.  I mean, the U.S. was behind the Stuxnet attack on Iran.  So it's not just China or Russia or - all the governments are in this race to spy on each other, for lack of a better word.



STEVE:  Well, yes, and...



TOM:  And I was going to ask you about that detection because the U.K. I know has a partnership with Huawei, Chinese company, where they will tear down Huawei equipment at random, so Huawei doesn't know what equipment's going to get checked, and look for vulnerabilities.  But what we're saying is there might be vulnerabilities that they just can't catch.



STEVE:  Oh, I mean, yes.  For example, it would be necessary to, in the case of a processor, to completely reverse engineer from the silicon the die itself and all of the microcode and understand what every bit of it does.  I mean, it's exactly like taking a huge piece of software and trying to find something that was deliberately done, a backdoor put in a large software product.  The only way to do that would be to reverse engineer, and you wouldn't have the source.  You would have only the binary.  You'd have to disassemble it, decompile it, turn it back into source, and then understand what every single line does and be looking at it from the standpoint of how can this be abused.



The problem is, this has all become so complicated that it is absolutely possible for non-intentional, non-designed-in features, if you're going to call them that, to hide, almost in plain sight.  I mean, even simple network switches now are managed and have - you're able to log into them, give them passwords.  I just bought a little five-port gigabit switch, and I couldn't - I was amazed at the technology that is in this thing.  And it's like, well, do we know that it doesn't respond to some secret sequence of packets that come along and allows it to bypass the passwords that the user has installed?  We don't know.



TOM:  So what do we do?  Because you could say, well, I'm just going to only buy if the chips are assembled and made in the U.S.  But it could be that somebody in the U.S. is spying.  It could be anybody that puts the stuff in there.



STEVE:  Well, yes.  And even if the chips, even, for example, if China was building iPhone 5s using Apple's A6 chips, which Apple supplied, again, if you've got state-level sponsorship, nothing prevents a truck from making a left turn and a replacement truck takes its place and has chips that look exactly like the Apple A6 processor.  I mean, I don't know how - you ask, what do we do about it?  It's like, well, you just don't worry about it.



TOM:  [Laughing] You just live; right?  And I guess you look for the effects of the sort of thing; right?  You try to keep secure.  You keep encrypted.  And you try to make sure that you're not opening yourself up to as many vulnerabilities as possible.



STEVE:  Well, yes.  One thing somehow we've never really discussed on this podcast in all of the podcasts we've done is the conclusion that the best security people have come to, which is that monitoring is the only way to know.  That is, you can have firewalls, you can have antivirus, you can have all of these sort of static defense systems.  But actively watching the traffic, monitoring what comes in and out of your network and asking questions about, whoa, what's that connection over to there?  I mean, it requires the right balance of a chill pill and knowing when to worry because, if I ever do a netstat/an, I think that's what it is, or maybe it's /abn, that shows you all the connections, I've got stuff connecting out all over the place.  It's like, wait, you know.  And so if you sit there and try to explain every single one of those, it's like, okay, well, I've got so much software now, we all do, running on our machines, it's busy talking out to the Internet.  It's very difficult to really audit that.



TOM:  You've just got to do spot checks.



STEVE:  But it's really the only solution is to really, really closely monitor what's going on.



TOM:  Or get a backscatter scanner for all your - no, never mind.  That's it.  John Lockman in Ottawa says that UPEK's security cannot be fixed.  Is it UPEK?  Is that how you pronounce that?



STEVE:  Yeah.



TOM:  Okay.  The entire problem with the UPEK model of using the fingerprint as a sole authentication factor is that Windows requires the password for other purposes, encrypted files on NTFS, for example, and thus they must store the password in some way.  Even if they used the most secure algorithm in the most secure way, the password must, at some point, be decrypted into plaintext before it can be used to tell Windows to log in as a specific user.  AuthenTec can increase the security all they want, but anyone who reverse-engineers the encryption on the password will be able to decrypt the password simply by definition.  The only reasonable approach is to only use fingerprints as a second factor for authentication, the "something you have," obviously, because you've got it with you.



STEVE:  Right, yeah, your finger.  So I agree with John in principle.  First of all, I love his conclusion:  The only reasonable approach is to only use fingerprint as a second factor for authentication.  I absolutely agree that that makes sense.  That's not as convenient as the whole, like James Bond, oh, cool, this thing just scanned my finger, and now I can log into my computer using nothing else.



That said, there are two approaches which do solve this problem.  One is the use of the so-called "trusted platform module," the TPM, which exists in many laptops.  And it's sort of having a hard time achieving critical mass.  But the idea being, and we have done a podcast on it in the past, is that it absolutely will not export the things that it contains, and that it is potentially possible to design a system where features of a fingerprint are used in order to unlock it, and without those features it will not produce the password.  So you keep it from Windows.  Now, it is the case that, if you've got malware watching what goes on, well, then, you've already got malware in your system upfront.



The second possibility is to actually use features of the user's finger as the password.  The problem is, those are rather soft.  The fingerprint changes angle; they swipe it differently; there's a different level of grease on the person's finger today as opposed to yesterday.  And so it's easier to match a fingerprint against the learned template than it is to actually use features of the fingerprint as the password.  In which case, if you did that, you would actually need that fingerprint in order to decrypt the stored password; and, once again, it would be safe.



I would argue it's probably possible to make that second approach work, though certainly UPEK hasn't done that.  They've said, oh, yeah, look, this matches the template, and then they perform a rather weak decryption of their weak encryption in order to provide the password.  So in principle I agree with John.  I think he makes a good point, that there's a fundamental problem with using a fingerprint as the sole authentication, and using it in a multifactor setting really does make the most sense.



TOM:  Yeah.  That makes sense to me.  I mean, anything is going to be turned into digital information at some point, and that digital information then is no longer the thing itself, so that kind of is what John's pointing out, I guess.



STEVE:  Well, yeah.  I guess the distinction, the reason I chose the question and wanted to discuss it a little bit, is that there's a difference between deciding that there's a match and then unlocking the encrypted password because then all you have to do is you find the where-is-the-match decision, and you tell the software, oh, there was a match.  And then it unlocks the password.  So that's the less secure way to do it.  The alternative is to actually use the information in the fingerprint as the decryption key.  And the problem with doing that is if you don't make it a weak enough set of features that they're not going to vary from one swipe to the next, you'll never get the same key twice, and you'll never be able to properly decrypt it.  So there's a little bit of a Catch-22 there, as well.



TOM:  Yeah, you need to limit the number of times it has to be turned into something else, and then it becomes more secure.  But I guess we need technology to catch up with being able to have that be valid every time.  Do you use - have you ever used CLEAR, the transportation security line jumper thing?  A lot of people don't like the idea of CLEAR because they're like, oh, somebody's got a database of all of my information.  But I kind of figure somebody already has all that information in a database.



So what CLEAR does is they do a fingerprint scan, and then you get to skip the line at TSA.  Now, you still have to go through whatever security screening.  You don't get to skip the security screening.  But you do get to skip the line.  And they have a very forgiving fingerprint scanner.  But it makes me wonder, now that we're having this conversation, just how secure it actually is.



STEVE:  Yeah, well, we could all skip the security line, and we'd just be fine, too, so...



TOM:  Yeah, I know.  Well, that's kind of what we were just talking about your network security applying to people, too, doesn't it.



STEVE:  [Laughing] Yes.



TOM:  Jeroen van den Berg (or to Leo, John of the Mountain) in Waddinxveen, which I'm sure I didn't pronounce right, near Gouda, The Netherlands, says that, Steve and Leo, you guys are criminals.  He says:  I was just listening to Episode 375 at which you talk about having removed DRM from a Kindle book that you owned, and that there are tools available to do so.  That sir, as crazy as it sounds, is illegal.  I was shocked, shocked to hear that you did not know this, as legitimately as you may feel about it.



According to Section 103 of the DMCA, quote, "No person shall circumvent a technological measure that effectively controls access to a work protected under this title," end quote.  The Act also prohibits the distribution of tools that enable a user to circumvent access controls or controls that protect a right of copyright holder.  And you cannot claim that it's "fair use" because the DMCA does not contain any explicit exception.  That's what got the DeCSS guys in trouble.  He also points to a Wikipedia article about anti-circumvention and says:  Just wanted to point that out.  Personally I'm against any form of DRM on any media because it prevents making a backup, lending, or selling something you legally own.  So if you want a DRM-free eBook, pirate it.  Better not to pay and be a criminal than pay and still be a criminal.  According to John of the Mountain, that is.



STEVE:  So, okay.  I didn't intend to imply that Leo and I did not know that that was illegal.  I understood.  Just to fill you in, Tom, I had a Kindle book with a low number of installs on its counter, and I was using it on my stair climber, which is a PC-based Kindle software.  And I reformatted that drive and set it up and forgot, and didn't remove it and increase my count.  And so when I wanted to put it back on the rebuilt machine, it said, oh, you've exceeded your install limit.  It's like, what?  So...



TOM:  Happens with print books all the time.  No, wait. 



STEVE:  Yes.



TOM:  No, it doesn't.



STEVE:  [Laughing] So anyway, so I thought, okay, well, I've been wanting to play around with Calibre, which I was pronouncing Calibre [ca-lee-bray], but Elaine informed me that she did the research, and it really was Calibre [cal-i-ber].



TOM:  Calibre, yeah.  I have Calibre, too.  It's a good program.



STEVE:  And I just wanted to see if it worked.  And so, sure enough, I was able to remove the DRM and read the book that I already purchased and I legally owned.  And I know that Leo and I both know that that's a breach of the DMCA.  Now, it's not a breach of my own ethics because I didn't give it to anybody else.  I'm not intending to.  I would argue about some aspects of the DMCA.  I will take responsibility for having done that.  At the same time, I don't think that I'm the target of the DMCA.  It is more the DeCSS guys and people who are doing mass decryptions of Blu-ray DVDs and producing them at low cost and so forth.



TOM:  Also the Library of Congress issues exemptions to the DMCA for certain things, like unlocking a phone that you own.  Even though that technically would violate the DMCA because you're breaking copyright encryption, the Library of Congress has said, no, we're going to allow that.  We're going to give exemptions.  And those exemptions just changed recently.  So it's worth checking, if you're concerned about this sort of thing, to find out if the behavior you want to do is in fact an exemption.  I know that removing DRM from eBooks to make them accessible to text readers for blind people is an exemption that's allowed under the DMCA.  Now, that's not what you're doing, I know, but...



STEVE:  Yeah, and the conclusion of better to pirate it and not pay and be a criminal than to pay and still be a criminal, I'm on the other side of that.



TOM:  Yeah.



STEVE:  I mean, I'm proud to have purchased the books that I spend many hours enjoying.  And if the DRM gets in my way for my personal use, then I'm going to remove it and not feel bad about it.



TOM:  DRM-free eBooks are starting to gain some traction.  Baen Books has been doing it for a long time.  Tor, the sci-fi publisher, just announced that all its eBooks are now DRM-free.  So you can find really good stuff, without even having to come close to breaking the law, that doesn't have DRM on it.  I was just going to say I have been in the situation where someone very close to me had illegally acquired a copy of a movie that I watched with her.  And what I did to make myself feel better about it is I bought a ticket.  I didn't go to the movie.  I just went online, Fandango, bought a ticket.



STEVE:  Nice.



TOM:  So I'm on the other side of that, too, Steve, which is I want people to do the right thing, and I want the system to work so that it encourages you to do the right thing, so that John here doesn't feel like pirating is the best option.



STEVE:  Yeah, well, and I wanted to mention, you mentioned Baen, and they're the publisher of all the Honor Harrington novels, and all very available at very low cost and DRM free.



TOM:  Dave Kodama in Cerritos, California also comments on Amazon books and DRM.  He says:  Steve, Amazon's DRM has always bothered me.  So when I found out that O'Reilly books come DRM-free and include multiple formats such as PDF, I have made an effort to always purchase the books directly from O'Reilly.  I have noticed that they often a little more than the same book on Amazon, but I try and support O'Reilly's business decision by voting with my wallet.  Perhaps some of your listeners may be unaware of that option.  For the most part, I buy only "throwaway" books from Amazon.  If Amazon disappeared, I would not be happy, as I like doing business with them, but I won't be losing anything I really want to keep around.  SpinRite user since version 3, or maybe 2, he says.



STEVE:  So I thought this was a very good point.  I follow exactly the same policy with O'Reilly's books.  I mean, I've got them all over the place.  And now that they're offering them both in soft cover and eBook format, what I'll do is normally I'll buy both because they offer a discount.  And on the electronic side, they make them available in every format, so EPUB, Mobi, PDF and a couple others.  And, for example, when I was learning how to use the HTML5 canvas features on web browsers to do the magnetic recording waveform animation that I did a while ago, I had the PDF version of the book up in a PDF viewer where the table of contents column was there.  I was able to do a search through the whole thing.  I was able to jump around.  It was just fantastic to have the book in PDF format.



So it's really convenient.  And I'm the same way.  Sometimes I'll be over on Amazon and almost click that I want to purchase it.  And I go, oh, wait a minute, this is an O'Reilly book.  And I go over to O'Reilly and buy it there.  And then I download, like, all the versions that I could think I might want, EPUB and Mobi and PDF, and then sometimes have the softbound book sent to me physically so that I have it to flip through the pages, as well.  So, yeah, I'm a 100 percent supporter of O'Reilly stuff for the books, the typically techie books that they offer.



TOM:  I just published my "Chronology of Tech History" on Amazon Kindle Direct.  I swear there was an option where I could say no, don't put DRM on it.  Maybe I'm confusing that.  But I wouldn't see why O'Reilly wouldn't have that option, too, when they're selling their books.  So you might want to check and see.  They may not have DRM on the Kindle books.  I think Amazon says you can choose as the publisher.



STEVE:  For me, it's the fact that I can have it as a PDF. 



TOM:  Yeah, you get all the formats, I know.  That's the best thing ever.



STEVE:  Yup.



TOM:  Christopher Ursich in Lyndhurst, Ohio comments on OAuth with Facebook and Google, suggesting that we just look for HTTPS:  In the past two shows you've discussed the problem with OAuth where the user is tricked into entering their credentials into a phony Facebook or Google authentication page.  I think it's worth mentioning or reminding people that this situation is no different than entering credentials on any web page.  You simply need to look for HTTPS, and that the domain listed is what you expect.  This is always my careful practice.  What burns my butt is how some sites will try to make the authentication window pretty by eliminating the address bar.  In those cases, I just don't proceed.  I find another way to log in, or I just decide that I don't need whatever the site is offering.  Displaying the HTTPS and domain should be part of the OAuth spec.  Fortunately, sites that use Mozilla BrowserID don't seem to misbehave this way.



Thanks so much to you and Leo for Security Now.  Your coverage always prompts me to dig even deeper into the topics on my own.  Listener since The Onion Router Episode 70, SpinRite owner, and aspiring ketosis-izer.



STEVE:  [Laughing] Well, I don't mean to belabor the OAuth issue endlessly, although we're going to do it on our final question, the next one coming up, as well.  I do think that it's important.  And I want to focus our listeners on it because, like I said, we're predicting the future.  I know this is going to bite us.  And Christopher's approach, while it sounds good, I think probably our listeners are far less likely to be caught out by it than the world at large.  It's not our relatively small, compared to the global, listener base that I'm worried about because we understand these things, and we're cautious.



But there is no way my mom is ever going to understand HTTPS and whether it's an extended validation site and what it means that the address bar turned green, I mean, or even that she would look to say that it didn't say Facebonk instead of Facebook.  She just would assume.  I mean, she just - she wouldn't even look there.  So this is a case where convenience and security are colliding.  And I've got a bad feeling about that.



TOM:  Well, and even educated listeners and viewers of this show will occasionally forget.  You're human, you know?  You make mistakes.



STEVE:  You're in a hurry.  You're like, you know, your spouse is waiting for you, and it's like, okay, well, just one second.



TOM:  Yup, yup.  And you just click that Okay button without thinking one time, and all of a sudden you've lost all your data.



STEVE:  All it takes.



TOM:  And you're Mat Honaned.  I mean, that's a horrible cautionary tale, what happened to Mat Honan at Wired.



STEVE:  Yes.



TOM:  A very sophisticated user.  Not a dummy, by any stretch.  And Blake Waud in Troy, Michigan does suggest an OAuth spoofing solution using security pictures and phrases:  Hey, Steve.  Started listening just before Christmas of last year and have fallen in love with this podcast, bought SpinRite, et cetera, et cetera, blah blah blah, as Leo would say.



I was listening to Listener Feedback #153 and the discussion about OAuth.  The problem you were having was how do we ensure the users can authenticate Facebook's page so they know they are entering their credentials into the right site and not a spoofed OAuth Facebook portal.  Well, I am an IT Auditor in the financial institution sector and instantly knew of an answer that is a natural progression from the idea that we use pictures of our Facebook friends:  a predetermined security picture and security phrase.



Almost every financial institution I audit now has this simple security feature installed as part of the initial online banking setup phase, where the user selects their image and writes up their own unique phrase to go along with it.  In the case of OAuth, the real Facebook page would be able to display the image you selected when you set up your security settings in Facebook, since you would have navigated to Facebook yourself to set up the images before Facebook would allow OAuth to work.  But the important part is that the bad guys wouldn't know what the security image or phrase you chose was and wouldn't be able to display it to you.  



The only problem I can see is that it might be possible for the bad guys to scrape the image or phrase off of Facebook's actual login page, if they know the email you used for Facebook, and then be able to display it to you as part of a spoofed site.  But I would imagine that attack might be more complicated and only be part of a spear phishing attack.  Can you think of a solution to that point, since such a vulnerability would exist for financial institutions as well, and the only protection being a somewhat hard to guess username.



STEVE:  So, okay.  I promise this is the last time we're going to talk about this.  But it still confuses people.  So I thought it was worth saying it once again.  I'm sure we could sit down and logically demonstrate a proof for the fact that this is a Catch-22.  If you go to an OAuth login site like Facebook, and you do something to identify yourself, and then they show you something to attempt to do mutual authentication - that's what we're talking about is mutual authentication.  It's not just we want to authenticate with them, we need them to authenticate with us.  And that's why, as Blake has suggested, we ask them to provide us something that only they know.



The problem is, and this has already been done, so this is not theoretical, a theoretical attack, it's exactly the same as if we are bounced to a spoofed site that looks exactly like Facebook's, who are you claiming to be?  We provide that information on the web page and submit it.  We think we're submitting it to Facebook.  We're submitting it to the spoofed server.  The spoofed server immediately goes to Facebook, provides that information, gets the reply page, and that's what it sends us in reply to our submission.  So it has inserted itself as a man in the middle, in a classic man-in-the-middle attack.  And we see the information we're expecting from Facebook.



So what's actually happened is this is worse than if we weren't expecting mutual authentication because now we have affirmative proof, we think, that this really is Facebook.  But in fact it's still Facebonk, and Facebonk just queried Facebook behind the scenes to provide us with what Facebook would have provided us directly.  So now we're really sure that we're in the right place, and we provide the balance of our authentication information, and it's stolen by Facebonk as part of this OAuth spoofed login.



TOM:  And there's no way around that because...



STEVE:  There is not.



TOM:  ...whatever you would give Facebook to get that image, Facebonk can take, too.  You can come up with a million different scenarios, but they all have that particular weakness; right?



STEVE:  Yes.  And that's what I meant when I said I'm sure we could rigorously demonstrate that there is no solution to this because of the possibility of a man in the middle, or in this case a website in the middle, that is grabbing our submission, then on the fly getting it from the real Facebook and then providing us what Facebook sent to it.  And so then it receives the second phase of our authentication.  There just isn't a way around this.



TOM:  Well, so in other words, we're still stuck with the usual problem of security, which is you have to teach people to be better at security.  Which works for some, but not for everyone.



STEVE:  Well, and we keep coming back to this.  It is the tension that exists between convenience and security.  Is it convenient to use a third-party site to authenticate?  Yes.  Oh, my goodness.  I mean, I see that option increasingly.  It's like, oh, here, rather than filling out these forms and telling us all about who you are, no one wants to do that, and especially for, like, you just want to make a posting on a blog somewhere.



TOM:  No, that's why LastPass and 1Password and all those companies have a business; right?



STEVE:  Yeah.  Yeah.



TOM:  By the way, Facebonk.com is available for sale.



STEVE:  [Laughing]



TOM:  That's what I was doing just then when you saw me, when you caught me looking at my laptop.  Well, that's it.  That's the last of our questions.  Steve, this has been really fun, as usual.  And I'm so glad I get to do this a couple more times, selfishly, before Leo comes back from Australia.



STEVE:  Yup.  Looking forward to it next week.  I'm not sure what we'll talk about, but I'm sure I'll have an interesting main topic for us, and whatever interesting news has happened in the meantime.



TOM:  Well, I cannot wait to find out.  Of course, folks, don't forget, if you haven't figured it out already, GRC.com for SpinRite, for ShieldsUP!, for all kinds of cool projects.  Is there anything new going on over there?  What's the most recent thing that you've put up, because you've always got something cool cooking.



STEVE:  Yeah, I've got a few things in the works.  So I think I'll just keep them close to the vest for the moment.



TOM:  All right.  Well, I'm looking forward to finding out what those are.  Show notes are always at TWiT.tv/sn.  That's it for Security Now!, folks.  Stay secure.  We'll see you next time.



Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.










GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#378	

DATE:		November 14, 2012

TITLE:		Microsoft:  Security, Privacy & DNT

SPEAKERS:	Steve Gibson & Tom Merritt

SOURCE FILE:	http://media.GRC.com/sn/SN-378.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with an interesting and varied grab-bag of security news and paraphernalia, Steve and Tom further examine the controversy surrounding Microsoft's decision to enable the Do Not Track (DNT) "signal" header in IE10 and share some insights gained from a recent Microsoft Executive VP Keynote presentation about exactly this issue.



SHOW TEASE:  Coming up on Security Now!, I'm getting to fill in for Leo for another week.  And Steve Gibson and I have got some great stuff to talk about, including Microsoft's Do Not Track.  They have it on by default.  Why is that?  We'll get into that, plus a look at the interesting story of John McAfee and a Skype vulnerability.  All that and more coming up.



TOM MERRITT:  This is Security Now! with Steve Gibson, Episode 378, recorded November 14th, 2012 - Microsoft:  Secrecy, Privacy and DNT.



It's time for Security Now!, the show that helps you learn about all the dangers online and take some action and maybe keep yourself a little safer, at least as safe as you can try to be.  I'm Tom Merritt, filling in for Leo Laporte for a couple weeks while he's off on a cruise.  Which is fun for me because I get to talk to this man right here, the brains behind GRC.com, Mr. Steve Gibson.  How's it going, Steve?



STEVE GIBSON:  Hey, Tom.  It's great to be with you again, for the second week in a row.  And we've got one more next Wednesday, the Wednesday before Thanksgiving.



TOM:  And we've got some good stuff to talk about today.  We're going to get deep into Microsoft and Do Not Track.



STEVE:  Yeah.  What happened is a couple things came together for me.  They released, and I tweeted yesterday on my Twitter feed, the link to their preview of IE10 for Windows 7.  So we had heard that they were going to make IE10 available for Windows 7.  It's now in preview.  I wanted to experience this, what does the user see when they install IE10, because we heard that there's, like, some opportunity to turn off the default-on DNT header.  So that was one aspect, and we'll talk about that, and where the setting is, and how well buried it is.  It's sort of a compromise between Chrome, where you just cannot find it, and Firefox, where it's really where it should be.  My hat's off to Firefox.



But then the other thing that happened was, in digging in, I found a couple weeks' old transcript of a relatively short, it's probably about 10 minutes, keynote which was given at the recent 34th International Conference of Data Protection & Privacy Commissioners by Microsoft's general counsel and exec VP who's in charge of all this, Brad Smith.  So, and what I loved about it is it gives us a rare insight into what Microsoft is really thinking, that is, why they've done this, what they think about it, and why.  So I want to share that with our listeners and discuss it, and then also some of the other things which have come up, like the fact that Apache's decision to strip this from client queries was anything but smooth.  It was very controversial.  And of course we have all of our news of the week.  So all kinds of good stuff.



TOM:  Yeah, I'm looking forward to that.  Some interesting news.  We've got a Skype vulnerability to talk about that's kind of come and gone this morning, or how gone it is, we'll talk about that.  And also the strange adventures of Mr. McAfee to talk about, as well.  So let's start off with Patch Tuesday stuff.  What should we know about this Patch Tuesday, Steve?



STEVE:  Well, it's your generic second Tuesday of the month.  We do seem, I don't remember now, somebody observed that we seem to see an alternating pattern, and it's holding up now many months.  This is another month where we're seeing an alternating pattern of large and small Patch Tuesdays, this month being a big one.  So I guess it's the odd months that have the large Patch Tuesdays.  And so far, for like the last running six or seven months, the even months have not had very much going on.  So this is one of the big ones.  Everything requires that you reboot.  So sometimes you can get some things like the .NET v4 stuff can update without requiring a reboot in some cases.  No chance this time.



TOM:  Yeah, I know.  Those are rare pleasant moments when that happens; right?



STEVE:  Yeah.  So four of their updates are rated critical.  And in this case that means they all provide for the attacker who exploits these vulnerabilities, the ability to remotely execute code in your machine.  So one of the updates fixes three privately reported vulnerabilities in IE.  Which, being in IE, it's your standard "visit a page and get pwned."  Another update repairs two privately reported vulnerabilities in Windows Explorer.  And this is kind of weird.  This one is, if Windows Explorer browses a specially malformed Windows Briefcase file...



TOM:  I'd almost forgotten about Briefcase.  Do people still use that?



STEVE:  Microsoft is slow, or I would say never, except they don't support 16-bit code anymore, to my annoyance, in Windows 7.  But they're slow to ever stop doing anything they used to do.  And since they used to have Briefcases, they still have Briefcases.  And here's a perfect example of old code which is biting us on the butt because, as you said, who does that anymore?  Yet it's there because they want to be backward compatible.  And in fact all of these updates affect every supported version of Microsoft operating system, and even those that are no longer supported, but we don't care about those because that's what "no longer supported" means.



TOM:  Yeah, right.



STEVE:  So the second of these critical ones was, if someone sent you a malformed Briefcase, and you browsed it in Windows Explorer, not Internet Explorer, the standard Windows Explorer, the Windows drive browser...



TOM:  Yeah, file Explorer...



STEVE:  Yeah, that could take over your machine.  Then there were five privately reported vulnerabilities in the .NET framework.  And the most severe of those is another one of these weird things.  If your system encounters a malicious proxy autoconfig file, then someone, some clever person found a way of taking over your computer by planting a malicious proxy autoconfig file.  So that is able to then inject code into the currently running application and take over your machine.  So that's not good.



TOM:  No, not at all.



STEVE:  And then - although it is kind of obscure.  And then finally, the last of the four critical updates fixes three privately reported vulnerabilities in the kernel's handling of TrueType files.  And this is another one of these where it's like, okay, the kernel, no OS kernel should be involved in rendering fonts.  But that was a decision Microsoft made, back when we didn't have enough performance, to move the GDI, the graphics device interface, down into the kernel for the sake of performance so that you didn't have as many user space to kernel space transitions of code crossings, each of which requires some substantial overhead.  So they decided to do that.  And now they're paying the price of a very high level of complexity, which is what TrueType rendering involves, where little mistakes get found and can be leveraged.  And if it were in user space, it would be, like, your app would crash.  In kernel, you get to have your OS taken over.



TOM:  Just because you weren't using Arial.



STEVE:  Exactly.  So anyway, so they fixed those big four things.  Then there was what they call an "important" update, even though - that is to say, not critical, just important in this criticality rating system that they have now.  Even though it's a remote code execution, for whatever reason, it didn't rate critical.  However, it seems bad to me because there's four privately reported vulnerabilities which this important update fixes in Excel, where your standard opening a specially crafted Excel file, the attacker is able to obtain the same rights as a currently logged-in user.  Maybe that's why, because you don't get system privileges.  You just get current user privileges.



TOM:  That would make sense, yeah.



STEVE:  So you don't have that much power.  So it's like, yeah, it can execute code, but so it pops up Notepad.  Okay, who cares?  And so, and finally, the least significant one was just a so-called "information disclosure" vulnerability which they rated as moderate.  However, one of them was public, and one was supported privately.  And this is, interestingly enough, in Microsoft's web server, IIS.



The more severe of the two, and it wasn't clear to me whether that was the publicly reported one or the privately reported one, but it could allow what Microsoft calls "information disclosure," and that's not disclosed any further, if an attacker sends a series of specially crafted FTP commands to the server.  So you first of all have to be running the file transfer protocol, FTP, of IIS, not just web, HTTP and HTTPS.  You have to have it as an FTP server.  And apparently someone figured out how there's a way you can ask it some things through FTP and gain information which you're not supposed to be able to gain.  So that's our Patch Tuesday.  Basically just do it.  Find a good time to do it.  Probably sooner would be better than not.



TOM:  Usually.



STEVE:  This all came out yesterday.  When I turned on my  Win7 box, which I'm using here, where I have, for example, IE10 now installed, I was told that there were seven things that needed updating.  So that was the intersection of those updates and my particular system characteristics.  Various people will have different numbers that need to be updated.



TOM:  Right.  If you don't have Excel, they're not going to patch Excel.



STEVE:  Exactly, exactly.



TOM:  Okay.  So I'm really interested in this Skype password reset issue.  The Next Web is where I saw it this morning.  They said they had alerted Skype about it a few hours before they posted it.  But essentially it was dead simple.  All you needed to know was an email address.



STEVE:  Well, okay.  This is, first of all, what's troubling is that it had been posted two months ago in a Russian online forum.  So for two months some subset of Russians, Russian speakers, knew about this.  And that information didn't get to Microsoft, that of course as we know famously purchased Skype a couple years ago.  And this is a classic mistake.  This is not buffer overrun.  This is the sort of mistake - and by the way, I agreed with your CNET reporter who you had on just before this podcast.  He was sort of musing about asking the question, how much other stuff like this exists?  But I'm getting ahead of myself.



TOM:  Yeah, makes you wonder, for sure.  How does it work?



STEVE:  The hack was not a coding error.  It was a design error.



TOM:  It almost makes you want to hesitate to call it a hack because it's a design issue that people just figured out how to take advantage of.



STEVE:  Right.  So if you know - okay.  I should say "knew."  If you knew.  I'm using the past tense because this no longer works.  Microsoft shut down the vulnerability, the aspect of vulnerability, which was password recovery.  They took that part offline immediately, then looked at the problem, understood it, fixed it, and then brought password recovery back.  So that's what I mean by this being a design problem.  As soon as someone told them, they're like, oh, my god.  And so it was easy to fix.  So here's what it was.  All you had to know was somebody - and so my point is, nobody is at risk now.  So this is informational.



TOM:  Right.



STEVE:  This is not anything anyone needs to run around and change anything or do anything.  And Microsoft's logs did notify them of where this may have happened, and so Microsoft is proactively notifying Skype users who may have had this happen to them.  So if you don't get email from Microsoft, then you're okay.  And probably apparently most people are okay.  I mean, this - somehow this existed for a couple months and didn't cause a huge problem.



So knowing some Skype user's email address - and so here we have the instance, again, of unfortunately an email address being less easy to just make up at random than a username and password.  Those we can make up at random.  And any savvy Internet user knows you don't want to reuse passwords.  But email addresses, there are some services that let you create them.  And we've talked about, for example, in Google Mail you can put dots in them, and the dots aren't lexically important for the parsing of the name in front of the "@" sign.  So you can kind of come up with different hacks for inventing email addresses for yourself.  But typically people who register for Skype will use their main email address.



TOM:  The email address is not supposed to be something you need to defend against.



STEVE:  Precisely.  So it turns out that Microsoft was allowing somebody to create a new account with an existing email address.



TOM:  First mistake, right there; right?



STEVE:  Yes.  And it would notify you.  So you create a brand new Skype account with an email address of your target victim.  And Microsoft says, oh, this email address is already in use...



TOM:  So they knew.



STEVE:  ...by somebody else.  Are you sure you want to proceed?  And so the hacker says, absolutely.



TOM:  Of course.



STEVE:  Yes, please.  And so it creates your account.  Then you log into the Skype client with your new account that you just created with this other person's email address.  And then you say, oh, I need to reset my password, and I don't remember what it is.  So the password reset response, because it's more than email, there is an email sent to that user's email address.



TOM:  So unless you've hacked into the email address at this point, you shouldn't get a reset token.  Right?



STEVE:  Well, no.  Because what happens is...



TOM:  Uh-huh.



STEVE:  It also, being helpful, it also sends a reset link and reset token to the client, to your currently logged-in Skype client.



TOM:  Now, I guess the thinking there is, if you're already logged in and authenticated, it's guessing that you are the actual user.  But because of this earlier problem where they said, hey, we see it's the same address, so but we'll                                                    let you make an account anyway, that's not secure anymore.



STEVE:  Yes.  Exactly.  So what happens is you then get a link to reset your email address.  Click the link, provide - you're forgiven for not knowing the old password.  You provide the new password.  And you have now taken over that user's Skype account and locked them out, since they no longer know the new password you've just set.  Whoopsie.



TOM:  Yes.  I mean, at least it was easy to fix; right?



STEVE:  Yeah.  And again, it was, I mean, this is a mistake, in trying to be helpful and friendly.  And this problem probably has always existed.  I don't know - I don't remember ever having done this.  I've never forgotten my Skype password, so I haven't done a Skype password reset.  But I wouldn't be surprised if, 10 years ago, this functionality was there, and this same thing probably happened.  This is one of those problems, and this is the point that your CNET reporter guest made in the prior podcast, was these sorts of things are around.  I mean, you might argue, for example, that some of the way Mat Honan got hacked was this sort of exploit, where it's a series of decisions which, when put together in a particular way, allow the hacker to obtain rights that they were not meant to have.



TOM:  Well, exactly.  It's found.  It's fixed.  Everything's okay now.  But it does raise that little niggling worry that there may be other things like that.



STEVE:  Well, and it's a perfect, I mean, for this podcast it's a perfect case in point.  We talk about these sorts of things all the time.  Here's a clever hack around some features that took advantage of that.



TOM:  Now, this next story gives me the heebie-jeebies.  Scanning a CAB file with Symantec Antivirus actually leads to a system compromise?



STEVE:  Yeah, this is the danger, of course.  It's not as if the A/V software is immune from coding errors.  I mean, why would we think it would be?  Writing software...



TOM:  Why couldn't it have a coding error, yeah.



STEVE:  Writing software that is flawless is really, really, really hard and really, really, really expensive.  So almost no one does.  Everyone would like to.  But it's not cost-effective, frankly.  So it doesn't happen.  So here was a case where a hacker discovered that an earlier version, which apparently is still widely deployed, this is the Symantec Endpoint Protection 11, is using an older scan engine than their current release, which is 12.1.  They are not going to fix 11.



So there is action required on the part of any individual or corporation who may still be using the v11 of the Symantec Endpoint Protection System because a deliberately malformed CAB file - which is sort of Microsoft's format for ZIP files.  It's a large-buffer, high-compression packing of executables and other files.  CAB is short for cabinet.  It's sort of like their equivalent of a ZIP file, their own format.  And so naturally A/V needs to look into this compressed archive in order to see if there's bad stuff in there.  Well, some small detail of the way they're doing that, it was exploitable in this v11 of the Symantec Endpoint Protection such that, when the antivirus scanned a virus, it got owned.



TOM:  So it's like opening the can of peanuts and then it just comes right out at you.



STEVE:  And the gotcha here is that the attack would be specific for this particular problem, meaning that, if you weren't scanning the CAB, or if you didn't have Symantec Antivirus, this Endpoint Protection v11, this bad thing couldn't hurt you.  It's only if you were looking for it, would it then say, aha, I got you, and take over your system.  So a little reverse on that one.



TOM:  So what do you do to fix it?



STEVE:  You just need to update to 12.1.



TOM:  Okay.  That's easy.



STEVE:  So anyone using 11 - and it wasn't clear about 12.  There was some - let me see.  Oh.  Symantec also reports that Symantec Endpoint Protection 12.0 is affected.  So that was later on in the news.  So 11 and 12 are a problem.  You need 12.1 in order to be safe.



TOM:  Got it.  All the way up to 12.1.



STEVE:  Yeah.  And there is a US-Cert note about this for anyone who wants to pursue that further   [kb.cert.org/vuls/id/985625].  I'm sure Symantec has some stuff, too.



Now, a bunch of our listeners have been asking me about a cloud-based Amazon - and actually Amazon is just one of many cloud providers that a Windows-based archiving tool known as CloudBerry supports.  The reason this has come up is that I've talked about several times now ARQ, which is Mac-specific, only runs on the Mac.  And the author of ARQ has on his home page that, if you're a Windows user, you might want to go look at CloudBerry.  So a bunch of people have tweeted, and I've seen email, people saying, hey, Steve, can you tell us, did they do it right?  It apparently supports encryption.  Is it secure?



The other event is that it supports the newer Amazon S3 super-inexpensive, long-term archiving system.  Remember we talked about it.  We talked about it actually with regards to ARQ because ARQ added support.  And that's only a penny per gigabyte per month.  So it's super nice if you want to stuff things away in the cloud that you do not need real-time access to.  The way you do it is you submit a request to the Amazon S3 system, and they say between three and five hours later they then make it available for you to download.  So that's great for, like, long-term archiving.



TOM:  For stuff that's not time sensitive, it's perfect.



STEVE:  They had reached out to me back in May, that is, the CloudBerry folks had, and then again last month.  And I had just - it's one of those things where I've got so much going on.  I had intended to get back to them.  But the recent pressure from Twitter followers saying, hey, Steve, what about CloudBerry, I finally replied, apologized for not getting back to them sooner.  And I said, okay, so I need to know what's going on with your crypto.  How have you done it?  Because, I mean, it's all very pretty-looking user interface.  It's got the checkboxes with all the bells and whistles.  But all they say anywhere is "We do encryption."  Okay, yeah.



TOM:  Is it ADS?  Are you hashing, or is there salt...



STEVE:  Oh, I got it.  I mean, very much like everything else, there's one way to do it right, and every other way is wrong in some way.  So it's just not easy.  So just late last night - I had this dialogue, I guess, at the beginning of the week.  So they were pretty quick in responding.  Late last night I got a note from my contact there and also the name and address of their crypto guy.  And so it's a good sign that they even have a crypto guy.



TOM:  Yeah, that's true.



STEVE:  It's almost like, here's our crypto guy.



TOM:  That would be very worrying, if you're like, what's your encryption like?  None of us really know.



STEVE:  Yeah, we just turned the checkbox on when we built the app.  Anyway, I did a quick glance over what they're doing.  And so this is not my endorsement yet.  You get that next week.  But the good news is I think I'm going to be able to give it next week because everything I saw and everything they said, though I literally just scanned this document, looks exactly right.  So all the buzzwords were there.  PBKDF2 and hashing and separate initialization vectors and all the right things.  So I will spend time with it this week, make sure that it - and I've got a good guy now to ask questions of.



And so I expect next week to be able to give a solid security-facing endorsement about CloudBerry.  Which does meet my other criteria.  You buy it once.  You're not renting it.  You buy it once, and then you - with nice terms and conditions, there's a trial period.  It's $29.95, and it gives you access to a huge array of cloud-based services, not just Amazon's S3 service.  So I'm very pleased by what I saw.  So I wanted to close the loop for our listeners, that I saw your tweets, and I'm on it.



TOM:  Good.  I can't wait to find out about it.  I'm always interested in more of these things.  I want them, ideally, to be cross-platform because I work in so many different operating systems.  But I understand that's not necessarily typical.  So I usually have to wait a little while.  Tell you what, the one nightmare, though, is authentication, and I use things like LastPass.  They're a great, sophisticated Band-Aid over the problem of authentication.  But I want to heal the wound.  I want OneID.  Do we have an update?  Do we have another contender here?



STEVE:  Well, okay.  So I've been aware of the service known as OneID for a while.  I've met its founder, and he describes himself as a "serial entrepreneur," Steve Kirsch, who's well known up in Silicon Valley.



TOM:  Heard the name before, definitely.



STEVE:  I met him at a privacy conference a year or two ago.  He's born in L.A., actually on Christmas Eve.  He's one of those poor guys whose birthday is the 24th, so their birthday and Christmas were always stuck together.



TOM:  Saved money on presents for some people, yeah.



STEVE:  Yeah.  And went to MIT.  I remember his name first from a company he founded called Mouse Systems.  And Tom, you were probably still running around having birthdays with single digits at the time.



TOM:  Mouse Systems, huh?  Yeah, I don't remember that one.



STEVE:  Mouse Systems.  It was a very nice, the very first optical mouse.  It was a square device with - I think it was a three-button mouse.  And it needed, unlike current optical mice, it had its own optically encoded mouse pad.



TOM:  I was 12.  I'm looking it up.  In 1982, when it came out, I was using my TI-99/4A.



STEVE:  Anyway, it was my favorite mouse.  It's the mouse I used.  It was state of the art.  It had a higher resolution than other devices at the time.  It had sort of a two-tone grid that it used.  But anyway, he was the first.  And he has a patent on that technology, the first optical mouse.  Mouse Systems were the people who did it.  He was also behind FrameMaker with Frame Technology Corp., another successful company. 



TOM:  Oh, yeah, I used FrameMaker, definitely.



STEVE:  He was a founder of Infoseek.



TOM:  Oh.  I used Infoseek, too, yeah.



STEVE:  Yup.  And also two companies, Propel and Abaca.  And so now he's on to the question of identity.  Now, hope springs eternal.  I mean, how many times, I mean, identity is probably the No. 1 big topic on this podcast because I recognize it's a problem we have to solve.  The advantage that LastPass has is that it works now on everything.  It does so by running in the browser, leveraging JavaScript to cryptographically store and safely fill in the fields prompting you for data on websites.  What Steve and his gang have done is they've decided to try to obsolete user logons and passwords.



TOM:  All right.  Sounds like OpenID so far.



STEVE:  Well, the challenge is - and I would just blow it off if this wasn't Steve Kirsch because he tends to succeed at these things.  I don't know if he can succeed at this.  Which is why all I can say is I'm hopeful.  Because it requires that every site that you use it with modify itself for OneID.  So this is not a solution that you can get and start using all over the Internet.  Instead it will be a matter of, like, Amazon being convinced to do this, and then they will say we support OneID.  And Facebook, and MSNBC, and CNET, and CNN, and...



TOM:  Well, then, if Facebook would get onboard, conceivably that could take a bunch of sites who use Facebook as their login credential with it.  So that could be good.



STEVE:  Well, yeah.  So if you replace, if you completely replace the existing authentication model, such as it is, which really amounts to who are you and what's your password, if you just say, well, we're going to ignore all that and come up with a better system, well, then, frankly, it's not hard to fix this problem.  And they're offering a solution.



So this comes up because I've had a lot of people asking me about it.  And the technology looks solid.  They've got crypto guys.  They've got a cute little animated presentation on YouTube.  It's got arrows pointing in each direction, and there's, like, nine of them, and it bounces around between things.  And I'm not even, I mean, it's like, okay, that sounds good.



I've asked them for formal crypto documentation and never received any.  I think there isn't any, or they just haven't had to do it yet.  I don't know how they could exist without that, but apparently it doesn't exist, or they don't want to share it with me.  I don't know.  But it doesn't really matter because, unless it achieves critical mass, then it will be another proprietary attempt at doing this.  And then there's the - at no point does it cost the user anything.  And Steve's been a little cagey about that, where it was like, well, in the beginning it doesn't, until you start really using it a lot or something.  It's like, okay, well...



TOM:  That's interesting.



STEVE:  Well, so this isn't - they're sort of like, oh, don't worry about the man behind the curtain.  So it's like - so I'm hopeful.  We'll keep our eye on it.  We'll watch it.  We'll see how it does.  If it starts to gain traction, then that would be a good thing.  The problem is it is a recentralization of authentication.  And that's my only real objection.  We have a problem.  But the idea is, do we want some one company to own authentication for the Internet?  We all know the answer is no.



TOM:  Yeah.



STEVE:  Of course not.  We want a solution which is not a proprietary service of one company.  So that's a concern.  Steve would like to own authentication for the entire Internet.



TOM:  I suppose anyone might, yeah.



STEVE:  Yeah.  So I understand that.  But that, to me, it's like, okay, that's going to be a heavy lift.  But we'll see.



TOM:  As soon as we're done with Security Now! today, I have to rush right across the hall to Pixel Corps and shoot the latest Sword and Laser, which is my sci-fi and fantasy show I do with Veronica Belmont.  But I get a little taste of sci-fi right now.  You've got some sci-fi stuff in the lineup today.



STEVE:  Well, it was just - yeah.  It was a tweet I got from Joe Kelley, who tweets as @sandpvrr from the Great State of Maine, as he puts it.  And I just saw this come by, and I wanted to share it with our listeners.  He said:  "@SGgrc Audible has the 'The Lost Fleet' series in their 50% off sale.  I got all six," he tweeted.  And that started six years ago, in 2006, was "Dauntless."  Then two novels the following year, "Fearless" and "Courageous."  Then one, "Valiant," in '08; "Relentless" in '09; and "Victorious" in 2010.  And I have spoken of this series many times before.  I really enjoyed it.  And what was fun was that, although it maybe got a little tedious, I think I'm only saying that after the fact because I had to have more.



And this doesn't give away anything of the plot to say that somebody who was in cryo sleep for a hundred years is brought back to consciousness and a little more slowly to full health.  And it turns out that the war he participated in the beginning of is still raging, a hundred years later.  Yet everyone has forgotten how to fight space battles where you have acceleration and inertia and speed-of-light delays because all the people who used to know how to do that got killed.  And junior officers replaced them, and they've ended up with this dumb strategy of just charging head-on into your opponent and firing all phasers.



And so this guy comes along at an inflection point and says - and, oh, oh.  Because he's a hundred years old, he's got seniority, even though he's been out of the game for a hundred years.  So he doesn't know what button to push on the console because that's all changed.  But what he understands, he has sort of classic space combat training.  And let me just tell you.  None of this disappoints.  It is really good because he sets up situations and strategies and puzzles and solutions which all involve thinking ahead and dealing with the fact that we just can't beam ourselves from Point A to Point B.  We don't have science fiction technology.  We have actual, you've got to start accelerating and slowly increase your speed.  Now you're going fast, and you can't stop instantly, so what are you going to do?  So anyway, really interesting stuff.  So I wanted to share the fact and thank Joey for sharing that with us.  And for anyone who likes to listen rather than read visually, Audible has all six of these half-off right now.



TOM:  Buy six for the price of three, essentially.  We've still got a little bit of news to get to.  I want to get to the John McAfee stuff.  But we do have some IE10 news we need to talk about first?



STEVE:  Well, this really bears on today's topic.  I encountered a couple days ago the fact that there was a prerelease preview of IE10.  I have installed it this morning because I wanted to get the install experience, as I mentioned at the top of the show, to see what it was that Microsoft showed us about the Do Not Track header, which is the main focus of this podcast, once we catch up with all of this week's interesting news.  And actually we have gossip here in a minute.



But so I did tweet the link.  It's a little hard to find, actually.  I should have just looked at my own Twitter feed to get the link because I tweeted it a day or two ago.  So you can easily find it if you just go to Twitter.com/SGgrc.  And it's one of the top, most recent tweets from me, anyone who wants to play with IE10.  It looks exactly like IE9.  But I am in Windows 7.  I'm not in Windows 8.  So I'm not having any Metro experience, although the scroll bars went flat on me.



TOM:  Does it update both IE10s, the Metro and the desktop version in Windows 8?  I assume so.



STEVE:  Well, I don't know because I'm still using Windows 7 on this machine.  And in fact one of the links I went to when I was looking for the IE10 prerelease preview tried to upsell me to Windows 8.  And I was surprised.  I think it was, like, $29 or $39 or something.  It was like, oh, that's not that bad.  So they're certainly trying to move people forward.  So I just wanted to let people know IE10 exists now in prerelease form for Windows 7.



TOM:  I just asked a stupid question earlier, by the way, because Windows 8 ships with IE10.  So, exactly.



STEVE:  So the other bit of confusion, when I tweeted this, I got some tweetback saying, what?  IE, come on.  Now, it's like, hold on, listeners.  We all know I'm using Firefox.  And if Chrome ever gives me fabulous tabs like I have with Firefox, then I'll be probably switching to Chrome because Chrome's feature set is moving along nicely.  Although I did mention last week how Chrome is now offering per-site settings for, like, script management, for taming JavaScript.  And we talked about how you can change the defaults to not run JavaScript unless I permit it for a particular site.



And I did see feedback, it was either a tweet or mailbag, from someone saying, ah, but, Steve - I think it must have been a tweet because it was since then.  He said, "Ah, but don't you wish it also had 'Enable it for this session only'?"  And it's like, oh, I do wish that because that's one of the things I love about NoScript over on Firefox.  I use that all the time, where I'm never going to come back to this site, but it's doing something annoying.  It's broken without JavaScript.  So let me turn on JavaScript just for now, but I don't want to clutter up my list of persistent permissions with endless domain names of places I'm probably never going to come back to.  So I use the "Yes, enable it just for this session" all the time in Firefox.



So anyway, I'm telling people about IE10 because it still has 54 percent of the market share.  I mean, it's an important browser.  It's what everyone who doesn't know better uses.



TOM:  Yeah, and everyone on a Microsoft Surface is using it, too, because they don't have any choice.  That's the only thing they can use.



STEVE:  Right.



TOM:  This story of John McAfee down in Belize, I don't know whether to be entertained, amused, horrified, sad.  He's on the run.  His neighbor was shot and killed.  He fears that he's going to be accused of the murder.  The Belize police say no, he's just a person of interest, they want to bring him in for questioning.  What do you make of this?



STEVE:  Well, I actually encountered John before the world knew him.  It's a strange story.  I was writing the TechTalk column for InfoWorld magazine, and now we're talking 25 years ago.  And this was a time before we knew that viruses existed.  That is, there wasn't even the name had been coined, "virus."  What I remember was that on CompuServe, which there was like The Source and CompuServe were the two major "use your modem to dial into a big BBS in the sky" systems.  On CompuServe, which was the more sort of, much more techie of the two services, there was sort of - there were rumors of software that you might download, and it would, like, do something to your computer.  Which was, at the time, science fiction.  It was like, wait a minute.



TOM:  How could that happen?



STEVE:  Yeah.  I mean, it's like, huh?  What?  Huh?  And, now, the sysops, as we called them, on CompuServe were adamant about this being untrue, that absolutely that was the most ridiculous thing they had ever heard.  Now, they had a vested interest in it not being true because the last thing they wanted to imagine was that software they were encouraging people to download and that they were responsible for would hurt people.  So they were just the great deniers of this.  And I took some umbrage to that because I knew it was possible.  I mean, I'd never seen a virus.  I didn't know that they existed.  But as a developer myself of assembly language code, and at the time you pretty much needed to be down at that level to do these things, I knew I could create one if I had any incentive to, if I wanted to.  It's like, I mean, I knew how a virus would work, if it existed.  But I didn't know that it did.



So at sort of this inflection point in the industry, I had my weekly column.  I decided to write a series of three columns in InfoWorld about the anatomy of a computer virus.  And I never said whether I had seen one or not.  I just wrote sort of factually, this is how computer viruses work.  And I did it, as the column did at the time, and very much like this podcast, with lots of detail, everything explained and filled in and fleshed out, so that a reader came away thinking, whoa, holy crap, that's scary stuff.



And after the second of the series of three columns ran, the office got a phone call from someone I had never heard of.  He was asking for me.  They transferred him to me.  This person said - he identified himself as John McAfee.  And I said, okay.  And he said...



TOM:  Weird to think that name wouldn't mean anything at any point in time; right?



STEVE:  No one had ever heard of him before.  And I said, okay.  And he said, "Steve, I had no idea you were down there."  And I'm thinking, what?  What?  Who is this?  And he said, "Well, we've got to compare notes.  This is fantastic."  And I said, "What are you talking about?"  And he said, "Your columns, the last two columns you've written in InfoWorld about viruses."  He said, "Based on what you've written, it's clear that you've been capturing these, too, and analyzing them."  And I said, "Oh."



TOM:  You're like, what, huh?



STEVE:  And he said, "You've got everything exactly right.  So maybe we have some that you don't, and you've got some that we haven't found.  So let's collaborate and share our information."  And I said, "Oh.  John, I've never seen a virus."  And I could tell he didn't believe me.  First of all, he didn't want to believe me.



TOM:  Now, were you calling them "viruses" by that point?  Do you recall?  I'm just curious.



STEVE:  God, you know, that's a very good point, and I don't know whether that term had been coined.  Mal- things, that all came later.  Malware was meant to be more of an umbrella.



TOM:  Len Adleman apparently coined the term in 1983, from what I've read.  He was talking to Fred Cohen at University of Southern California.



STEVE:  You know, I've got the columns.  I'll see if I can - that was early on, in the first five years of - and I think that they would have been in the Passion for Technology book set that I did.



TOM:  I'd be interested to know that.  But anyway...



STEVE:  Yeah, now I am, too.  Anyway, so I could tell, I mean, first of all, he was just crestfallen.  I mean, he really sounded disappointed.  And I think he thought I wanted to keep them to myself.  Like I don't think he believed that I could just make up something that was as accurate as apparently the columns were.  I was delighted that I got it right because I was just writing fiction; but it was based on the engineering of software, so it was software engineering-driven fiction.



TOM:  How crazy.



STEVE:  And so, yeah, so that was my introduction to John McAfee.  And of course we all know him famously after that.  Now, I do remember, and I was thinking about this and Leo because, Leo being more my contemporary, and with the memory that he has, which is amazing, there was some strange stuff about McAfee back then.  And it's funny because I was talking to some friends of mine about how you cannot do research that predates the Internet because this was pre-Internet.  And if anything happened after the Internet, then it would all be online.  You could find it.



But anyway, McAfee was involved in some - I don't know what they were.  I sort of remember maybe it having to do with HIV and AIDS and Bulletin Board Systems, BBSes, because as like I guess I was saying, that was the technology at the time.  There was no global network or even local networks.  It was all modems dialing in to central points.  But I'll bet you that Leo would remember this.  And there's no way to find out because it was pre-Internet.  And it's sort of an interesting phenomenon of our life that things that predate the Internet, unless someone goes and puts literature or old copies of magazines on...



TOM:  There's a lot more out there than you think.  When I was researching "Chronology of Tech History," you could find stuff pre-Internet.  But it's at one point more difficult, but also more reliable than what you find post-Internet.  It's kind of amazing some of the things that have disappeared from the Internet post-Internet, that websites just purge and get rid of pages.



STEVE:  Yeah.  So anyway, a listener of ours and a friend of mine, an online friend of mine who both participates in GRC's newsgroups and tweets a lot, Simon Zerafa, I've mentioned on the podcast often because he sends interesting stuff.  I got a kick out of what he said.  He said, and I guess he was quoting seeing it somewhere else, but he tweeted, "If McAfee is truly innocent as he claims, he now feels our pain over false positives."



TOM:  Oh, yeah.  You knew that had to come.



STEVE:  Uh, yeah.



TOM:  So Cyberdog in the chatroom was making a joke about the judge giving him a 30-day trial.



STEVE:  Okay, yeah, I guess there's going to be lots of that.  Anyway, there is a really interesting interview from this morning of John McAfee speaking to a reporter with Wired magazine, Joshua Davis.  Apparently John called Joshua at 4:30 our time, 6:30 in Belize, where John is currently hiding from the Belize police.  And apparently John had 11 dogs, in his backyard or at his house, and there had been a problem with his neighbor historically over the dogs barking and really upsetting his neighbor.  And then I read something about five of the dogs being shot, no one knows by whom.  But the presumption would be the neighbor had finally gotten fed up.  And what we do know is that the neighbor of John McAfee was found dead with a 9mm Luger slug in the back top of his head.



TOM:  Yeah, face down in a pool, apparently, yeah.



STEVE:  Yeah.  So John is on the lam, as they say.  And his position is that the justice system there is brutal, and he would be subjected to torture and interrogation and heinous treatment were he to allow himself to be apprehended.  He's claiming his innocence.  We don't know anything one way or the other, or at least I don't.  If anyone's interested, it's about a 28-minute audio interview.  And Joshua explains himself at the beginning.  He knows John rather well.  He's traveled to Belize over many months and met with John in person.  And so John trusted him and contacted him to sort of give him his side of the story.  And they talk about all kinds of stuff.  So if anyone's curious, it's sort of interesting:  wired.com/threatlevel/2012/11/john-mcafee-audio-interview.



TOM:  Yeah, Wired's going to do a magazine story in the print version of Wired in January, all about John McAfee's history and how he ended up in Belize and all that sort of stuff.  It'll be interesting reading.  Before we get to our SpinRite testimonial, we have a PDK update.  People's Democratic Republic of Korea?



STEVE:  Well, or Portable Dog Killer.



TOM:  Oh, Portable - actually this bears on our previous story a little bit.



STEVE:  It strangely does, the dogs barking incessantly and driving the neighbor crazy.  Behind me on a tripod is, you can see in the video, a device.



TOM:  I was wondering what that was.  I was thinking it was awfully boxy to be a camera.



STEVE:  Yeah, it's not a camera.  It is a just-finished new implementation of a high-frequency canine training device, for lack of a better term.  I think I called it the Portable Sound Blaster in the Google Group that I created by that name.  And you can see an antenna sticking up from it because it responds to a small remote control.  This one I built because my best friend's problem with his neighbor's dog has returned.  When we were initially looking at the idea of bringing the doggie trainer back to life last summer, the problem got resolved.  The neighbor was doing a better job of keeping control of the dog, not letting it out in the backyard, or scolding it and bringing it in if it was barking.



But I was over there a few weeks ago, helping Mark with a media center, setting up a Windows 7 Media Center-based four-channel media recording system.  And the dog was barking all afternoon.  And I said, "What is this about?"  And he says, "Oh, yeah, this is back.  The dog is back.  And they leave it in the backyard and drive off and don't know that it's barking, and it just sits there yapping all day."  And I said, "Okay, well, we've got to deal with this."  So I built one.  I wanted to give our listeners a heads-up because there had been a great deal of interest in it before.  And I'll go into greater detail once Leo is back.



But I wanted to make a mention of it and give people a heads-up.  I did tweet some photos.  I tweeted links to some photos of this device on my Twitter feed in the last day or two.  So again, if you just go to Twitter.com/SGgrc, you can find the links.  And there's also a link to an update that I posted which talks about this, why it's tripod-mounted as opposed to handheld.  It's more of an installation-oriented device than a gun.  Many people have since said, "Hey, Steve, I was hoping it would be smaller."  I'm looking at doing a small one because I learned a lot building this thing, and I have some ideas for how one can be made very small, yet still loud enough to get the job done.



TOM:  And it uses sound.  If anybody's wondering, it doesn't...



STEVE:  Yes.  Oh, and no dogs are hurt at all.  It just startles them.



TOM:  "Training device" is a perfect way to refer to it.



STEVE:  Yes.  And I do have a nice story, another story of SpinRite's success with solid-state drives, which I'm pleased about.  I'm really pleased that SpinRite is showing so much success repairing solid-state drives.  Tim Green sent a note on November 12th with the subject of "SpinRite Heals Stupidity."  And he said, "Hi, Steve and team.  After several years of using SpinRite for protective maintenance without incident, it's now my turn to send in a 'SpinRite Saved the Day' story.  I just bought my girlfriend a new Lenovo laptop, and yesterday I spent the morning setting it up for her.  I had purchased a 256GB mSATA SSD drive so that the laptop would have both the SSD for speed plus the large spinning hard drive for lots of data storage.  So I had to install the mSATA and clone the system from the hard drive to the mSATA."



And just to take a break for a moment, for anyone who doesn't know, mSATA is a cool little technology.  It stands for micro or mini SATA.  And it's sort of part of the PCIE spec.  But it is a very small little card with an edge connector, and they come in two different sizes, sort of like a half size and a full size.  And many motherboards now have one or two of these mSATA connectors on them.  And so they're like over in the memory and processor area of the motherboard, sometimes even on the underside of the motherboard, where there's room underneath the standoffs against the case.  I have one motherboard, in fact, that has an mSATA drive option on the underside of the motherboard, just because it was otherwise unused territory.  So that's what he's talking about here.  So this Lenovo laptop, in the same way that you might open up a little door to put memory in, you can open up a different little door, and there's a little connector that you can stick an SSD drive into, which is what he did.



So he said, "Unfortunately, Crucial" - which is the name of the memory supplier - "forgot to pack the teeny-tiny little screw that holds the mSATA drive in place by its top left corner.  After searching through all my drawers, I found I didn't have one in the house.  So I thought, eh, it's nicely seated in the slot.  All I need is to tape it into place with the sticky tape from the two little antenna cables and position them so that the cover exerts a little pressure on the SSD drive to keep it in place.  Not smart.  In fact, very dumb.  Because, as it turns out, the screw in the corner provides the ground connection for the entire SSD.



"Everything seemed fine.  But the first time my girlfriend moved the laptop while it was running, everything froze.  The movement had been enough, and probably the little bit of torquing of the case, to interrupt the tenuous ground connection of my jury-rigged installation.  And on booting into the BIOS, the mSATA SSD drive was no longer visible at all.  I realized immediately what had happened; and, if I could have, I would have kicked myself.  I was afraid that the drive and everything on it might be completely hosed.



"Luckily, I'm also a Security Now! listener, every week from the very start.  So I already knew that it's possible to repair SSDs with SpinRite running on Level 2.  I found a screw, reseated and firmly screwed the drive into place, and managed to make it visible again in the BIOS.  But indeed it was hosed.  But half an hour later, SpinRite had repaired everything on Level 2, and the computer was as good as new again.  So as you see, SpinRite can even heal the results of gross stupidity.  Thanks for your great product and my ongoing security education.  Tim Green, originally British, but located now in Kln, Germany."



TOM:  All right.



STEVE:  And thanks for sharing.



TOM:  If only it would work in every case of gross stupidity.  But I guess that's asking too much.



STEVE:  That would be StupidNot instead of SpinRite.



TOM:  Exactly.  Work on that.



STEVE:  Okay.



TOM:  Get that working.  All right.  I'm excited to talk about this.  I've been very interested in the whole Do Not Track project since it began, and its sort of allegory to Do Not Call.  And I was stunned, as a lot of us were, when Microsoft made the decision to turn it on by default.



STEVE:  Yes.



TOM:  Because the whole deal with the advertising agency was, okay, well, as browser makers, we'll put it in, but we'll require a user to turn it on so that your advertisements can still be set for most people.



STEVE:  As is the case with every other browser currently.  Every browser has it now, at varying levels of visibility. 



TOM:  Which I was surprised that that even happened, alone.



STEVE:  Yes.



TOM:  But so what is Microsoft's reasoning here?  How did this policy come about?



STEVE:  Okay.  So what I want to do, this won't take much time, and feel free to interject or interrupt any time, Tom, if something - if this triggers a thought.  You can stand in as a proxy for our listening audience.



TOM:  Okay, I'll try, yeah.



STEVE:  They're unable to interrupt.  I want to share a relatively short, about 10-minute keynote address which was given by the guy who understands exactly where Microsoft stands, who is Brad Smith, the general counsel for Microsoft and their executive VP.  He gave the keynote presentation at the 34th International Conference of Data Protection and Privacy Commissioners, which was recently, on October 23rd, just a few weeks ago, held in Uruguay.



So he says, "Thank you so much for the opportunity to be here this morning.  I've made many trips to Latin America before, but I suspect like most of you I've never had the opportunity to experience a cyclone firsthand."  To which he got some laughter.  I guess they had some weather down there, a little bit later than we got Sandy here in the U.S.  He says, "I suspect that a year from now you may not remember a word that I utter this morning, but I guarantee you that every one of us in this room will remember the weather when we got up.  It's been that kind of day.



"We come together to talk about an important topic, privacy.  But despite the evident importance to all of us, I think it makes sense to start by asking a question:  Does privacy still matter?  It seems obvious to us that it matters.  After all, we came all the way to Uruguay to have this conversation about privacy.  Clearly it must matter.



"But as you may know, I work in an industry where one frequently encounters people who actually want to debate whether it matters.  They want to talk about how it matters, they want to talk about why it matters, and they want to talk about whether the way it matters has, in fact, changed over time.  They point out, for example, that if you look at big data, privacy must not matter as much as it used to."  And by that, well, he uses the term "big data" several times in this keynote.  So he's referring to huge archives of data collected by organizations about their customers or clients or Internet users.



He says, "So they point out, for example, that if you look at big data, privacy must not matter as much as it used to.  After all, look at all the information that people are sharing.  Look at all the good ways in which it's being used.  Or sometimes I meet people who say, look, privacy must not matter, at least not the way it used to.  After all, look at Facebook.  There are a billion people in the world who are sharing all kinds of personal information about themselves.  How can Facebook be such a success if privacy still matters?



"Well, the first thing I have to say is this:  Let's look at Facebook, and let's look at the Facebook story.  I'm not here to be an expert on Facebook's privacy policies, but I can speak as someone who was involved in the decision at Microsoft exactly five years ago today to invest a quarter of a billion dollars in Facebook."  Microsoft invested $240 million in Facebook.



"Now, at the time, it was not necessarily obvious that Facebook would ever have a billion users.  At the time, Facebook was not even the most popular social network on the planet.  It wasn't the first.  The first was probably a service called Friendster.  It wasn't the second.  The second was a social network that became very popular called MySpace.  In fact, five years ago, MySpace had 100 million users; Facebook had only 24 million.  In our industry it is very unusual for one company to be the first to reach 100 million users and to have four times the market share of its next closest competitor, and then not go on to be the prevalent and most popular service by far."



So of course he's noting there that, for whatever reason, MySpace has gone into decline, whereas Facebook of course now has many, many times the number of users it had at the time.  And he has a slide in his presentation that shows sort of an exponential growth curve in green for Facebook and a flatline dropping..."



TOM:  Sagging flatline, yeah.



STEVE:  Sagging, yes.  And he says, "But of course the real question here is, what happened?  What happened over the last five years?  Well, at a certain level I think we all know what happened.  MySpace didn't do so well.  It has fewer users today than it had five years ago.  Facebook has exploded.  In five years it has gone from 24 million users to a billion.  We've done pretty well with our $240 million investment," he says.



"But I think the most important question for us is not what happened, but why.  Why did these two curves take off the way they did in such different trajectories?  There are a number of different reasons, but there is one that personally I think probably matters the most.  It's certainly one that we thought about when we put $240 million into the company.  It's a facet that was captured very well by one of the leading books about what happened, David Kirkpatrick's book, when he addressed why this happened."  And Kirkpatrick's book is titled "The Facebook Effect."



Anyway, he says, "And what he said was on MySpace, for people who remember it from five years ago, the default setting was that you could see anybody's MySpace profile.  Or, to put it another way, the default setting was anybody could see your profile, as well.  But on TheFacebook, and initially it was called TheFacebook, the default setting allowed you only to see profiles of others at your own school or those that had explicitly accepted you as a friend.  A degree of privacy was built in at Facebook by default in a way that was simply not the case at MySpace."



TOM:  Really interesting to hear Facebook lauded for their privacy in this instance.



STEVE:  Well, now, okay.  I mean, let me just pause for a minute here because I reacted, when I read this the first time, thinking, wait a minute, okay, eh, I guess I can see that.  But I know why I was forced to create a Facebook account, and that it's that no one without a Facebook account could see anything inside.  It was the classic "walled garden," as it's called, where you had to have an account in order to participate at all.  You couldn't be a voyeur without one.  And so I would argue that a substantial amount of Facebook's growth was built by the pressure of its early success and then sort of the desire to see what was going on, but you had to join in order to see anything at all.



TOM:  So is that where he's going with this, is to say that's behind the justification for Microsoft's default privacy?



STEVE:  Well, sort of.  He says, "So in effect, at MySpace you could change the settings, but by default you shared your information with the world.  And at Facebook by default you shared information only with people in your network and the people that you decided to make your friend."



Now, I can see - this is me speaking, again.  I can see the power of that, the notion that somebody who is posting personal stuff absolutely wants control.  And I coined the term that I've used many times in the last eight years.  I call it "the tyranny of the default," which is my way of stating the observation that, whatever the default settings are, most of the time that's what they end up being forever.  The tyranny of the default.  I have a page on GRC, if you go to GRC.com/cookies/cookies.htm, my site has been for years looking at the cookie-handling habits of everybody who visits.  So as a consequence of that, I've been able to develop some statistics.  And relative to the issue of third-party cookies that has been known far longer than this issue of the Do Not Track header, you can see there that I look at the number of users.



For example, right now, 85.6 percent of the 57,529 unique visitors to GRC just last week - that's not a running average, that's the total.  I update it every Sunday night so that I'm always seeing with no older history a snapshot of what is current.  So 85.6 percent of the many users who visited GRC last week had third-party cookies enabled.  But if you scroll down to the bottom, I show Apple's Safari visitors separately, and only 30 percent of them have third-party cookies enabled.  Why?  Because Safari is unique in the industry of having third-party cookies turned off by default.  And so this is a perfect example of the fact that the default matters.  The default is what people end up leaving their system set to.



Anyway, continuing, he says, "It's not just the votes of consumers in their adoption of Facebook that tells us, in my opinion, that privacy matters to people; that privacy matters to consumers.  Consider this:  Recently the Pew Research firm did some research in the United States, and what they found was that 56 percent of consumers had decided not to complete an online purchase because of concerns about sharing personal information with the seller that they were going to do business with.  They also found that 30 percent of consumers had uninstalled an app from their smartphone because of concerns about the way that app dealt with their personal information.  If you put these things together, I think they tell an important story.  They tell us that people care about privacy.  



"But that's not the whole story, because I think they also tell us that people are thinking about privacy in new ways.  And if we're going to do our jobs well, whether we come to this meeting from industry or from an NGO or, most importantly, from a government and as a regulator, we need to really think about the new ways that people are thinking about privacy."



He says, "To start with, I would say in many ways this is not a new phenomenon."  It's funny, in his slide presentation he shows an old-style bellows camera.



TOM:  Yeah, looks like a tintype-taking kind of machine.



STEVE:  Exactly.  And he says, "The history of technology is a history of societal change.  Typically, one sees a pattern.  The pattern starts with the invention and then the increasing adoption of new technology.  That is then followed by a second step in the process.  That second step involves new consumer needs and new consumer views about what to do with respect to the technology.  And then, finally, there's a third step.  The third step is about what all of this means for laws and for regulation and public policy.  And indeed, the story is well documented. 



"The truth is, as many of you are aware I appreciate, the whole global discussion about privacy really began with this invention on the screen, the camera, in the 1800s.  And interestingly, as the camera became more popular, as it was found throughout society, we saw this pattern take place.  By 1890 there was a famous law review article in the Harvard Law Review written by Professor Louis Brandeis, who would go on eventually to become a justice on the U.S. Supreme Court.  And it was in this article that Professor Brandeis coined the famous phrase, 'the right to be let alone,' a phrase that many people who work in the privacy field every day are familiar with.  But interestingly, that phrase is at the end of a sentence that starts by talking about technology.



"What Professor Brandeis recognized was that the camera had changed society.  And because the camera had changed society, people could no longer walk out of their front door without the risk of being photographed.  And, of course, this was before there were lenses that could see someone a kilometer away.  And he recognized that, because of this invention, there was a new legal right that needed to emerge to protect people the way they had always been protected in the past before this technology had entered the scene.



"And we see, 122 years later, the leaders of our day in the United States and around the world grappling with similar phenomena.  It was in the State of the Union address this year and in other reports at the start of the year that President Obama started to address these issues.  I think he captured part of this issue for us very clearly, because what he said is that we live in an era where people are sharing more information, but that does not mean that privacy is an outmoded value. 



"What we really need to focus on, in my opinion, is how to reconcile these two aspects.  And indeed, we meet in the year 2012, when people around the world are doing just that.  Personally," he says, "I think that perhaps the single most important statement in the United States this year came in a case from one of our current Supreme Court justices, Sonia Sotomayor.  The case involved Jones v. the United States and the question of whether the police needed a warrant to put a GPS tracker on a car.  



"As many of you may know, there is a constitutional right to privacy under the Fourth Amendment to the U.S. Constitution, and that protection always turns on whether people have a reasonable expectation of privacy in a particular situation."  So that's this notion of a reasonable expectation of privacy.  "But Sonia Sotomayor, Justice Sotomayor, had something very interesting to say.  She said that, for over a century, people in the United States had always looked at the Constitution and, in fact, said that there was a reasonable expectation of privacy only if there was a reasonable expectation that people could keep certain information secret. 



"And, in fact, I think, if you read much of what had been written about privacy over the last 50 years, in many, many instances, perhaps most, if you substitute the word 'secrecy' for the word 'privacy,' the meaning of a sentence or the meaning of a paragraph is unchanged."  This is the sort of test attorneys use and learn.  "When people were talking about whether they could keep something private, they were, in fact, talking about whether they could keep something secret.  Certainly in the United States that has been at the core of our legal evolution.  But I think the question that Justice Sonya Sotomayor posed, while focused on the Constitution, was in fact far broader than that:  Is secrecy still a prerequisite for privacy?  



"I think if you look at the world today, if you look at the story of Facebook, if you look at the story of people using the Internet, one thing is clear:  People are less focused on secrecy.  Consumers want to share more personal information than ever before.  They don't care as much about keeping things secret.  But that doesn't mean they don't care about keeping things private because there's a big 'but' involved.  The fact is people want to decide who they share information with.  People of all generations want to make that decision themselves.  And not only that, they also want to determine how their information will be used by the people with whom they choose to share it.  That's the new model of privacy, not a model focused on secrecy, but a model focused on what people are saying:  They, in fact, want and need the ability to decide who they share information with and how that information will be used."



TOM:  In other words, it's not a secret because I might tell a lot of people.  It's not just in my house.  But I want the right to keep it private so that I decide who I share that secret with.  It's not a secret.



STEVE:  Yes.  Yes.  You want control.



TOM:  It's not binary.



STEVE:  Yes.  Exactly.  You want management.  It's very much like what websites do I trust to run scripting, to run JavaScript.  I want to say, by default, sites cannot run scripting.  If I decide that I want to share that privilege of a site giving me script, meaning that I trust what it's going to do with that power, then I make that decision.  I want control.  And managing cookies is the same way.



So he says, "When you step back and think about this, I believe these are reasonable needs.  They are laudable goals."  And it's important to understand, I mean, this is a - you can tell by the way he's pitched this, these are global leaders in policy, setting privacy policy at the nation-state level.  I mean, this is the audience to whom he's bringing this.  And he specifically discusses DNT in a second, as we'll see.



So he says, "From every vantage point, our preeminent obligation should be to help people meet these needs in a world of new technology.  Now, life would be simple if that were the only goal we had to meet.  But as we know, it's not very simple at all.  The reality is we need a balanced approach to address privacy.  We need a balanced approach because more is at stake than solely the protection of privacy, as important as that goal and need, in fact, is.  There are other goals that need to be addressed and balanced with it.



"For one, it is important to ensure that innovation flourishes.  It's important to ensure that innovation flourishes because innovation does so much in the technology space to help people around the world.  Certainly in the technology sector this is something we see every day.  It's why many of us have chosen to spend our careers in technology.  We see it today in the benefits of big data.  We see it in ways that are profound.  We see it in stories that people in the technology field bring to life every day.



"One recent example, in fact, involves the use of search terms in Bing.  It turns out that when the Food & Drug Administration in the United States, like most authorities around the world, approves a drug, it focuses on that one drug in isolation.  But it also turns out that millions of people every day, in every country, in fact use more than one prescription drug during the course of 24 hours.  No drug authority can possibly test the combination of every drug with every other."



TOM:  Too many combinations.



STEVE:  Oh, my god.  "But last year, a researcher at Stanford started looking at the potential side effects of what might happen if people took two drugs together.  One was a drug that is an antidepressant.  It is an antidepressant that is taken by millions of people in North America and tens of millions of people around the world.  The second was a drug that reduces cholesterol levels.  In fact, these are two of the most common drugs that doctors prescribe.  But this researcher began to become concerned about the possible side effects of what might happen if people took both of these drugs together, side effects that no one had ever diagnosed.



"He began to review certain data that was in the possession of the Food & Drug Administration in the United States, and then asked us at Microsoft if we could share with them, in a de-identified manner, certain search terms that had been entered in Bing.  And specifically what they wanted to search for is search terms where people were entering in the name of one or both of these drugs and some of the symptoms associated with diabetes, such as fatigue and headaches.  And what they found is that, when people searched for only one of these two drugs, it was unusual for them to include in their search request one of those other symptom words.  But when they entered a search request that had both drugs named together, a full 25 percent of the time they were also looking for information about how to deal with a headache or how to address fatigue or other symptoms associated with diabetes.



"And this helped the Stanford researchers along the path to a conclusion that, if you take these two drugs together, you do face a potential side effect of diabetes.  There are a million Americans in our country alone that happen to take both of these drugs; and for them, this kind of insight, when shared with doctors and applied with their patients, is something that can save lives.  In fact, it's something that can save many lives.  And it's made possible in part because of the insights that come from our use of big data and information.



"It's not just innovation and big data, though, that's at stake.  There are other things as well.  We find every day the use of information is of fundamental importance in our ability to make technology stronger."  And this is taking longer than I expected, so I'm going to skip down to where he...



TOM:  Yeah, let's get to the DNT part.



STEVE:  Exactly, where he begins to look at this.  Okay.  So he says - let me back up a little bit to get some context.  Okay.  He says, "Even though I represent a technology company, I believe in the importance of privacy regulation.  I believe we need clear and fair rules of the road.  We need rules of the road that increasingly apply consistently in country after country and continent after continent.  We need clarity so that everybody knows what they need to do, and companies that act responsibly are not going to find themselves suffering at the hands of companies who do not, and regulation creates that floor that provides that level playing field.  But we don't need regulation alone.  We also need self-regulation."  And I'll talk about this after we're done because there is some - the FTC has, as I have been predicting, begun rattling their saber a little bit about this.



So he says, "We need self-regulation, especially in the form of industry standards.  We need self-regulation that can move technology forward, and we need self-regulation that can move faster and more globally than regulation alone is able to.  But even these two things together, in my opinion, are not sufficient.  At a time when everyone is talking about standards, it is important, I believe, to remember that we need market-based innovation, as well.  With market-based innovation, there's an opportunity for companies to experiment, to try new things, to see what consumers want.  And if consumers do in fact want what companies are offering, there's an opportunity for those companies to grow.  Market-based innovation is every bit as important, in my opinion, as these two other ingredients, as well.



"All of this makes for a sometimes complicated conversation.  And it certainly, in my role at Microsoft, is one of the things that I've come to conclude that we need to come together on.  We need to come together to work through the complicated conversations we must have.  And there's probably no topic" - now, remember who this guy is.  I mean, this is god of, you know, he's the executive VP and general counsel.  "There's probably no topic that I've been involved in that has involved more complicated conversations over the last couple of years than three little letters that I've come to know by heart:  DNT.  And so I'd like to conclude by offering a few thoughts on DNT, or Do Not Track.



"As a company, we have taken a stand, if you will, when we decided earlier this year to turn on the Do Not Track signal in the new version of our browser and the new version of our operating system that starts to ship this Friday.  We've had to think a lot about DNT.  Whenever you have to think a lot about a topic, I think it helps first to define the questions.  And if you're in a business, there is always one question that you had better think about very long and hard.  It's this:  What do our customers want?  



"Well, as a company we, of course, have many customers.  There are times when PC manufacturers are our customers.  There are times when advertisers are our customers.  And we value those relationships with these companies as our customers."



TOM:  I think a lot of people in our audience forget that the end user isn't always considered the customer.  That's a good point.



STEVE:  Right.  He says, "But at the end of the day, one thing remains very clear:  Our customers, more than any other group, are the one billion consumers around the world who pay us money to provide them with cutting-edge technology."  That $29 or $39 I was hit up for when I was looking for IE10, and it wanted to give me instead Windows 8, for example.



TOM:  Windows 8 upgrade, right.



STEVE:  He says, "What we need to focus on is this:  What do consumers want around the world?  So after the DNT issue became a little more dramatic earlier this year, we thought it made sense to go back and see if we could learn a bit more about what customers want.  We commissioned some research, and we asked people what they thought about these issues.  And what we found in four countries where the research was conducted - the United States, the U.K., France, and Germany - is that most people today believe that online tracking goes too far, and they want an easier way to block it.  In fact, in all four of these countries, roughly 80 percent of consumers came down strongly on the side of wanting new steps to block the tracking of their personal information.



"We also talked to people about DNT itself, and we asked them the question that we were asking ourselves:  Should this feature be enabled or not when they get a new browser or operating system?  And what we found in all four of these countries was that 75 percent or more of the public, in fact, want this feature to be turned on.  They want their privacy to be protected.  They want it enabled.  They want it on by default.  The votes are in because these are the people whose needs we have to serve.



"Now of course, again, we recognize that this cannot be only about one thing.  We need to balance the protection of privacy with the other interests that I spoke about before.  And so we've tried to give a lot of thought about where we go, and we've decided on two things.  First, we want to innovate.  We want to innovate and deliver new privacy benefits to consumers.  We want to build on regulation and self-regulation, and we want to use our research and engineering capacity to build better privacy protection into our products.  That's why we believe we made the right decision when we made the decision to enable the DNT signal in the new versions of our products.



"But we also recognize that we need to do more than that.  If we're going to move DNT forward, let's face it:  We all have a pretty steep ladder to climb.  And that's going to take, in our view, four things, not one, to get where we all want to go.  First, we need a final and effective DNT standard that is adopted by the W3C."  And I'll just mention we don't have that.  That is, the DNT standard has not been agreed upon yet.  So it doesn't exist.  And in fact, at the beginning of this year the working standard did not specify whether a user agent, a browser or operating system, should or should not have DNT enabled by default.  That was added, I think it was in April.  It was later in the year.  So that's a data point.  But even so, this hasn't been ratified yet.



Continuing, he says, "We need a standard that provides real privacy protection to consumers, and we need a standard that recognizes the legitimate and reasonable needs of all participants in the ecosystem.  Second, we believe that the world of privacy will be a better place if we all recognize that browser vendors should have the ability to turn the DNT signal on or off when they ship a product."  Okay.  So here he's arguing against the notion that this standard should specify that DNT should either be on or off.  He's suggesting this ought to be something that can be used for market differentiation.



TOM:  And the advertisers have argued the opposite.  They said no, the only way we'll agree to abide by this and play by these rules is if it's off by default.



STEVE:  Well, and that's the - yes, exactly.  And that's the wink-wink is because they know of the tyranny of the default; they know, I mean, you can't find it in Chrome.  I mean, it is buried.  It's hidden under Advanced Settings and Settings and, I mean, you know, and it's off by default.  So, yes, you're exactly right, Tom.



So he says, "If you look at standards around the world, they specify the technology, but they don't tell companies whether they have to turn it on or keep it off.  That's a decision that is left to companies in the marketplace based on their assessment of the needs of their customers.  And we believe that the right approach is an approach that allows vendors like Microsoft and everyone else to make this decision for themselves.  But even that's not the end of the story.



"Third, we believe that browser vendors should clearly communicate to consumers whether the DNT signal is turned on or off and make it easy for them to change the setting.  We recognize that you cannot have privacy without transparency, and we recognize that we have an obligation to ensure that it is clear to consumers how our product is configured."  And I'll just say that nobody does that yet.  "And there is room for an ongoing conversation across the industry and more broadly about the best ways for vendors to communicate this information to consumers and the best ways to enable them to change this setting as they use the product themselves.



"And there's a fourth and final piece as well, a piece that has gotten too little attention, in our view.  There needs to be an easy and effective way for responsible advertisers and advertising networks to inform consumers to obtain persistent consent for their services, even if the DNT signal is turned on.  Just because the signal is turned on does not mean that a consumer wants no services that involve tracking.  What it means is that consumers need to be empowered to make their own choices, and advertisers and ad networks need to be able to inform consumers in a well-understood and broadly established manner so that those ad networks that are acting responsibly can inform people and get a user's consent, even while a consumer might choose to withhold that consent from another service."



TOM:  Like NoScript; right?  I don't want to run NoScript and say no script can ever run ever, and that's my only choice.  I want to be able to say, okay, I want to make an exception in that case since I trust that site.



STEVE:  Right.  And one can imagine that a site - say that you had DNT turned on.  You might go to a site that receives the DNT signal, but they generate revenue by encouraging or at least allowing tracking.  So they might say, hey, sorry for the inconvenience, but you've got DNT turned on.  We need you to disable it in order to use the site because we'll generate revenue from the ads, and the advertisers have said we need to track you.



TOM:  And that's perfectly legitimate, and you as a consumer get to choose whether that's worth the transaction or not.



STEVE:  Exactly.  Exactly.  And it creates a lot of transparency, and that's what he's been talking about.  When we've talked about things like Ghostery that, like, shows you this list of all the tracking that's going on on a site.  It's like, whoa.  I mean, that was a real eye-opener for many people.



So he concludes, saying, "But fundamentally, what the DNT signal does is empower people.  It empowers people so that they're able to make that decision themselves.  When you put all of this together, whether you're talking about DNT in the narrow sense or privacy more broadly, we're reaching an important moment.  We're reaching the kind of time when we can look back and say, yes, technology has changed.  It's continuing to change as we meet today.  But because technology has changed, we can now say the needs of consumers have changed, as well.  The views of consumers have changed, as well.  The views of voters and the public at large have changed, as well.



"We need to come together.  We need to grapple with those changes.  We need to ensure that innovation flourishes, that the ecosystem is healthy, that technology protection is addressed.  But more than anything else, we need to address the privacy needs of people around the world.  We need to address the privacy needs of people and move privacy forward.  That is the opportunity we have in the years ahead."  And he says, "Thank you very much."



TOM:  Now, I hate to say it, Steve, but we're almost out of time here.  So how best should we wrap this up?  I know we've covered a lot of the points as we've gone along here.



STEVE:  Yes, we have.  I wanted to mention that the European Commission, the EU, sent a letter from their location in Brussels to the World Wide Web Consortium, that's the W3C, Tracking Protection Working Group.  That's the DNT group.  And it's a short letter.  I highlighted two paragraphs that I wanted to share.  And that is, they say, "It is not the Commission's understanding that user agents' factory or default setting necessarily determine or distort owner choice.  The specification need not therefore seek to determine the factory setting and should not do so because to intervene on this point could distort the market.  Crucially, and as a different matter, the standard should foresee that, at the install or first use of the browser, the owner should be informed of the importance of their DNT choice, told of the default setting, and prompted or allowed to change that setting."



So this is, I mean, the EU matters on the global scene.  And their formal position is, essentially, what IE10 represents.  When I installed IE10, the very first item in the upper left said "New privacy setting" in blue.  And it said, "Websites you visit receive a Do Not Track request when you use Internet Explorer 10.  To learn more about this setting, including how to turn it off, see more info about Do Not Track," which you can click, and it takes you to more information.  And the location of that setting is where they have that grab bag.  I'm sure IE users or ex-users will remember on the Standard Internet Settings dialog, that the last tab is Advanced.  And it's this huge potpourri grab bag of checkboxes, a list that scrolls.  And down under Security it says simply, "Always send Do Not Track header," and it is checked by default, unless you choose to turn it off.



TOM:  Isn't the solution to this to say, with any browser, the first time you run it or install it, it just asks you do you want to have it on or off?  In other words, forced opt.  You're not opted in; you're not opted out.  It just lets you set it from the beginning.



STEVE:  I think that's perfect.  I think that's perfect.  And the problem is the advertisers know that people, I mean, if we take Microsoft survey stats at face value, 80 percent of people will say, "No, I don't want to be tracked.  Thank you for asking.  No."  And that upsets the advertisers.



Now, the FTC, the Federal Trade Commission in the U.S., the chairman, Jon Leibowitz, is on record saying, "If by the end of the year" - that is, this year, 2012, and we're approaching that.  "If by the end of the year or early next year we have not seen a real Do Not Track option for consumers, I suspect the commission" - meaning the FTC - "will go back and think about whether we want to endorse legislation."



Leibowitz also attacked as delusional the owners of third-party advertising networks who claim that opt-out functionality could damage their businesses, as well as thousands of small businesses who rely on targeted web ads, noting that the same companies continue to operate in Europe, where data collection rules are much stricter.  He says, quote, "The notion that they can say, 'The sky is going to fall if you allow a modest opt-out' is just not credible."  So that's where we are.



TOM:  All right.



STEVE:  Yeah.  So IE10 has happened, and it looks like Microsoft is planting a stake in the ground.  I bet you that Yahoo! and Apache are going to lose this one.



TOM:  Yeah.  It looks like Microsoft's trying to force the debate into an entirely new direction by taking this unpopular stand with the advertisers, saying, look, we don't want this either.  We actually don't want Do Not Track on by default.  We want an entirely different way of doing things.



STEVE:  Well, and Microsoft also, I mean, this is a bet.  They're waging a bet here because they also, what we heard sort of reading between the lines is they see it as a market advantage for their browser over those other browsers that do have DNT off by default.  They believe that their promotion of the fact that Do Not Track is on will, over time, give IE the reputation that you are less tracked if you use IE than if you use any other browser, which will be true to the degree that the Do Not Track header is honored by advertisers who track.



TOM:  Well, I'm sorry we don't have more time to talk about this.  But I'm glad I'll have more time to talk with you next week, Steve.



STEVE:  We'll do it.  And I imagine that we'll have lots of feedback on the topic.  Love to hear from our listeners on this topic.  Just go to GRC.com/feedback between now and next week.  I'll go through the mailbag and pull a bunch of stuff, interesting, I'm sure, about this topic and no doubt others.



TOM:  I know there are folks in the chatroom wanting to hear more about Apache.  So great place to ask your questions about that.



STEVE:  Ah, good, yes, because I do have information about where that stands.  And I got a kick out of remembering that the way that web server was named was that it had become so full of patches.  It was "a patchy" web server.



TOM:  That's funny.  I didn't realize.  I don't think I ever knew that.  That's really great.



STEVE:  Yup.



TOM:  All right.  That's it for this episode of Security Now!.  Don't forget to visit GRC.com to find out all of the great stuff that Steve's always working on, including SpinRite, including ShieldsUP!, and tons of other projects going on over there.  And you can find our episodes at TWiT.tv/sn and live on Wednesdays at 11:00 a.m. Pacific time, right after Tech News Today.  Thanks again, Steve.



STEVE:  Thanks very much, Tom.  Talk to you next week.



TOM:  Bye now.



Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.






GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#379	

DATE:		November 21, 2012

TITLE:		Listener Feedback #155

SPEAKERS:	Steve Gibson & Tom Merritt

SOURCE FILE:	http://media.GRC.com/sn/SN-379.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Tom discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  Coming up on Security Now!, I'm Tom Merritt filling in one last time for Leo Laporte after a couple of weeks of absence.  But we've got some great stuff to talk about.  We're going to be following the continuing saga of John McAfee.  Also, NASA may be providing a good example to the rest of government.  And, how to keep your nuclear facility safer.  All that and more coming up.



TOM MERRITT:  This is Security Now! with Steve Gibson, Episode 379, recorded November 21st, 2012:  Your questions, Steve's answers, #155.



It's time for Security Now!, the show that tries to keep you safe online.  I'm a little sad because it's my last week filling in for Leo Laporte.  I'm Tom Merritt, and of course joined by Mr. Steve Gibson of GRC.com.  Steve, it's great to have one last shot at hosting Security Now! with you this week.



STEVE GIBSON:  Well, now, after you move down closer to me, but really still not close enough that it's practical for us to get together for a show, and Leo's gone in the future, would it still work for us to be connected together up at central headquarters?



TOM:  I don't see why not, yeah.



STEVE:  Yeah, okay, cool.  In that case...



TOM:  All right.  There's hope for the future.



STEVE:  Right.



TOM:  We've got some great stuff to talk about today.  Of course it's a question-and-answer show, so we've got lots of good questions.  We'll also - we're going to dig deep into Mozilla Firefox v17.  Got a lot of stuff to talk about there.  I guess not dig deep, but there's a lot of updates there.



STEVE:  And somehow, coming to you direct from Belize, John McAfee is still managing to post a blog.  And I tweeted a link to what he posted two days ago.  But we have an audio podcast, and people are commuting and jogging and gardening and doing whatever they're doing.  So I'm going to share, two days ago, the increasingly bizarre story of John McAfee, who everyone knows as the antivirus person, now not so much.



TOM:  Yeah, it's a movie, maybe a made-for-TV movie, but it's a moving in the making, what's going on with that guy.  It's kind of ridiculous.  All right, Steve.  Let's start off.  What's good to know about in the latest of the faster and faster releases of Firefox? 



STEVE:  It's funny, too, because it just was not that long ago that we were at v3 and v4.  And now we have v17.  So, I mean, and there were complaints from the industry, that is, the users of Firefox, that they seemed to have a much too slow release cycle.  And so they changed that.  And I think that's a good thing.  We are getting improvements out faster.  We know that having competition is good.  And I think they probably now see Chrome from Google as their primary competition, rather than IE, even though IE technically still has greater than 50 percent of the overall market share.  Firefox is the alternative, as is Chrome, of course; Chrome is continuing to come on very strong.  One of the things that happened in v17, which was released, I think, like yesterday...



TOM:  Yeah, I think I saw the alert pop up to get it.  I haven't actually updated it yet.



STEVE:  Yeah, it just did.  And when I went over, under Help, to check, like, Help About, it said, oh, we have a new update.  It was 9.9MB, I think.  And so it sucked it down.  It was compatible with all of my add-ons, so it was a painless transfer.  For me, at least, it wasn't happening automatically.  That's promised.  And I had to do a full restart, which meant that all of my 80 tabs - yes, eight zero tabs - needed to get flushed and reloaded.  And I also saved a bunch of memory because it still seems to sort of accumulate memory over time.  But that problem is way better than it used to be, like back in v4.  They really have spent some time on memory.



In this case, they've moved their so-called "Click-to-Play" feature, which we have talked about before, which has been in beta.  It's now at release.  So it appeared finally in this current main release stream of Firefox.  And what that does is it's their newest solution for dealing with vulnerable or outdated plugins.  So plugins that the browser recognizes as no longer the most recent and/or vulnerable, the browser will block their execution, so that they don't just automatically run, until the user clicks on it.  So the idea is just - it's not to shut them down completely.  The Mozilla folks feel that would be a little overreaching.  But not to have, for example, them just automatically take off and run.



They posted back on October 11th, when this was in beta, they said, "Plugins that are blocked with the click-to-play flag will not load" - that is, onto the page - "by default, but can be easily activated by users.  This gives us a more user-friendly way to warn about plugins that should be updated, that give users better control over their browsing experience.  The large-scale plugin update notification we deployed last week" - so this would have been earlier in October that they're referring to - "used the old update notification mechanism for Firefox 16 and prior, and the new click-to-play mechanism for Firefox 17 and above."  So this is where they were beginning to roll this out and test this for about a month and a half.  And they said, "If you have old versions of Flash, Adobe Reader or Silverlight, and you're on v17, you will now see the click-to-play block next time you visit a page that uses one of these plugins."



Now, again, I haven't been to Silverlight, and I'm not using Adobe Reader any longer.  I moved away from that.  So I have not seen this behavior in 17.  And I don't know when the browser will update itself for people who don't go and get it.  But if you're curious, by all means, just go to the Help About box, and that'll sort of wake it up and say, oh, look, there's something new here for you.



TOM:  I just tried that, actually, on this machine.  And it didn't do it.  This is on Ubuntu, though.  So that may be a different kind of behavior.  But I couldn't make it tell me...



STEVE:  Well, yeah.  And also, if you go to the add-ons tab in Firefox, it'll list all of the add-ons that you've got.  Oh, I'm sorry, plug-ins.  The plug-ins tab.  There's a link at the top that you can click to check to see if any of your plug-ins are old.  I did that, and it gives you a - it does a very nice test, gives you a nice list sorted from vulnerable and bad to okay, and then unknown sort of are grayed out.  The problem is, it was showing me that Adobe's Flash needed to be updated.  So then I went over to Adobe.com/flash, where you can check the version, and the Flash player ran with a little bouncing red square or cube.  So it's like, okay, well, this doesn't really seem to be working yet.  Or maybe it needs to be turned on or something.



TOM:  My Shockwave Flash says it's up to date when I'm looking at it right now.  But again, that's under Linux.  So that may be true.  In fact, I think it is true.



STEVE:  So another new feature that I looked around to try to explain what this was to myself and to our audience, but they're saying that their first revision of the, quote, "Social API" and support for Facebook Messenger is now in Firefox 17.  There's no sign of it in any of the user interface.  So it's unclear exactly what it is.  But it appears to be about allowing the browser to post links to the user's previously configured social media accounts.



TOM:  Okay.



STEVE:  So you would somehow register yourself, like your Facebook page or your Facebook account, with Firefox.  And then what they're trying to do is to create some sort of a more seamless, lower friction interconnection to make it, like, you right-click on a link and then say, like, "Post to my Facebook page," and it just does it through some sort of API of some sort.



TOM:  Anytime Facebook comes up, though, I have a hundred questions about how it works.  I'm interested to see that, too.



STEVE:  And then they have a handful of sort of just updates.  The Awesome Bar gets larger icons.  They dropped support for Mac OS X v10.5.  They are now supporting an important attribute that's defined in the HTML5 spec, and it's a formal W3C spec.  I think it's Chrome and Safari have already been supporting it, and Opera and Firefox and IE don't.  But now Firefox does.  And the page that I went to see where the support stood hadn't yet been updated because it was just yesterday.  But that's a new attribute in the infamous iFrame tag in HTML.



To remind our listeners, iFrame is a widely exploited problem in HTML, only because it's so powerful.  Essentially, an iFrame - "I" stands for inline.  And so it essentially allows you to embed another web page inside of the current web page.  You can create a region on the web page and load that with a URL using the iFrame tag.  And the problem is it's powerful, but it's dangerous.  There have been all kinds of ways that have been found to exploit this power.  And so the new spec, or Firefox's new support of the so-called "sandbox" attribute, allows the browser to essentially sandbox the iFrame tag.  If you simply put the phrase "sandbox=" and then a null string, open quote/closed quote with nothing in it [sandbox=""], then that enables a new set of extra restrictions for the content of the inline frame.  And then if you wish to deliberately, as the author of the page, if you wish to relax those protections, the sandboxing restrictions, you can then add some "allow" verbs in that double-quoted expression.



So, for example, if it's empty, then all restrictions are applied.  And those restrictions are, for example, if you had "allow-same-origin" inside the double quotes, then that would allow the iFrame content to be treated as being from the same origin as the containing document.  And of course that's risky because it's same-origin protection which protects us from all of the cross-site hacks which people have come up with over time.  Or you can say "allow-top-navigation," which allows the iFrame content to load content from the containing document.  So that sort of gives it visibility outside of its own frame, which, again, could be useful, but use that with caution.  Then you can also say "allow-forms," another dangerous thing to do.  So the point is, if you don't put "allow-forms" in, then forms will not function in the iFrame, and that's been another source of real exploitation in the past.  And, finally, "allow-scripts," where you have to explicitly allow scripting.  If you use the sandbox tag, then it will turn scripting interpretation on within that frame.



So this is a nice move forward.  And now we just need to get Opera and IE to support it.  And then, of course, since it doesn't just happen automatically, you don't get any of that protection unless you add the sandbox tag with a null string.  So then we need everybody who's using iFrames to update their own code to put that in, and we'll get more safe pages.



TOM:  So this is not a browser user protection.  This is a page-creator protection, to say, look, you don't want your pages to get hacked through an iFrame.



STEVE:  Yes.  So, yeah, exactly.  This is an authoring protection.  And there are so many pages now which are based on templates.  Like, for example, most of the online forums have a very common, standardized look.  It's very easy, then, to modify the templates wherever they use an iFrame, just to add the sandbox tag.  And suddenly, throughout the entire forum site, that sandbox tag will appear.  And you want to be careful how you use it because you don't want to break things that rely on iFrame features.  But you also want to always restrict everything that you're not actually using.  So this is just a good move forward.  And as you say, it'll take some while for it to get adopted.  But ultimately I expect it will be.  So that's a nice thing.



And then they also, with v17, they've made it faster.  And they say more than 20 performance improvements.  And then there were apparently some problems they were having with page scrolling on sites with fixed headers, which v17 in Firefox fixes.  So, all around, nice solid update from our friends...



TOM:  These are exciting updates, but they are not nearly as exciting as the saga of John McAfee, which we've sort of been following now.



STEVE:  Okay.  Now, if this were a podcast on April 1st, we might be accused of making this whole thing up.



TOM:  Nobody'd believe us, you're right.



STEVE:  Yeah.  So get a load of this, listeners.  This is two days ago, posted on November 19, on John McAfee's blog.  And, by the way, anyone can check it for prior and subsequent postings.  Earlier ones exist and later ones exist.  The site is www.whoismcafee.com.  And if you just do www.whoismcafee.com, that takes you to sort of the main page of the blog, which will show everything current.  If you scroll down, you will find the posting that I'm going to share now, which John put up two days ago, on the 19th.  



He wrote:  "The first two days, Sam and I were on the run."  And if you're curious, you can find all about Sam and who she is and where she came from and pictures of her and so forth.  "The first two days Sam and I were on the run were far from our house.  I felt helpless, especially given the fact that so many of our friends and workers were being arrested.  I realized that, unless I knew moment by moment what was happening, my chances of coming out of this intact, both emotionally and physically, were slim.  I needed to be close to area where" - I'm just going to read this with his typos in there.  "I realized that, unless I knew moment by moment what was happening, my chances of coming out of this intact ... were slim.  I needed to be close to area" - I guess he meant "the" area - "where the events occurred and needed to watch and hear the actions of the authorities.  I also needed to do my own investigation, since the police only seem to be interested in my whereabouts.  My safety is contingent on the truth being discovered.  I today announced on NBC Television that I am offering a $25,000 reward for the capture of the person or persons responsible for Mr. Faul's murder."  And that's the event that we shared when we opened this topic last week.  "After two days we returned to the house in disguise, and I began my watch."



TOM:  Now, wait a minute.  He's posting to a blog.  He's talking to a Wired reporter on the phone.  He's on NBC TV, and he went back to his house?



STEVE:  Yeah.  Get a load of the disguise.  "The first day I colored my full beard and my hair light grey, almost white.  I darkened the skin of my face, neck, and hands carefully with shoe polish and put on an LA Saints baseball cap with the brim facing backwards..."



TOM:  Who are the LA Saints?  Oh, Louisiana, okay, thank you.



STEVE:  Oh, good, yes, right, Louisiana, "and tufts of the front of my hair sticking out unkempt through the band.  I stuffed my cheeks with chewed bubblegum stuck to the outside of my upper and lower molars, making my face appear much fatter.  I darkened and browned my front teeth.  I stuffed a shaved-down tampon deep into my right nostril and dyed the tip dark brown, giving my nose an awkward, lopsided, disgusting appearance."



TOM:  This is like movie makeup.



STEVE:  "I put on a pair of ragged brown pants with holes patched and darned.  I wore an old, ragged, long-sleeved shirt.  I donned an old Guatemalan-style serape and toted a bag containing a variety of Guatemalan woven goods.  I adjusted my posture so that I appeared a good six inches shorter than my actual height and slowly walked up and down the beach with a pronounced limp, pushing an old single-speed bicycle and peddling my wares to tourists and reporters using a broken English with a heavy Spanish accent."



TOM:  Hey, he made some money.



STEVE:  "On my second day, while peddling small wooden carvings, I nearly sold a dolphin carving to an Associated Press reporter standing at the edge of my dock.  He was pulled away from the enticement" - of, you know, John's sales pitch...



TOM:  Of his amazing dolphins.



STEVE:  "...by an urgent phone call.  Among the people I spoke with that day was the caretaker at Mr. Faul's house."  And Mr. Faul is John McAfee's next-door neighbor, and Mr. Faul is the person who was found...



TOM:  Who was found dead; right?



STEVE:  ...shot in the head with a 9mm Luger pistol.  "The police had stated that Mr. Faul's housekeeper discovered the body.  His caretaker told me that Faul did not have a housekeeper.  He himself discovered the body, he said.  I found this interesting and filed it away as a piece of data that might help at some point.  Why would the police lie about this?  Lies always have a reason."



TOM:  Yeah.  Are you going to read the whole piece here?



STEVE:  Nah, I think you're right, we're done.  Anybody who's interested, you know where to find the rest.  It goes on like this, talking about disguises and watching the police and their machinations and so forth.



TOM:  He has other disguises, too, when you get down farther.



STEVE:  Oh, yes.



TOM:  Yeah, it's - I don't want to say "insane," but...



STEVE:  So anyone who's curious about...



TOM:  It's good reading.  Entertaining.



STEVE:  ...about John McAfee, the antivirus pioneer of the PC industry who is now on the lam, can find it at whoismcafee.com.



TOM:  I like the one where he's got a Hawaiian shirt speaking German.  I think that may be...



STEVE:  Yes, yeah.  And there was something about his pants, and then he said like a disgusting Hawaiian shirt, as he put it.  And I was chatting with Mark Thompson, a friend of mine, of AnalogX.com...



TOM:  Oh, yeah.



STEVE:  ...just yesterday, and he was like, "Did you see the McAfee blog?"  I said, "Yes, I know."  And he's like, "He's out in front of his house on the beach, and he's wanted for murder.  Like what is he thinking?"  It's like, well, he apparently has confidence in his disguise.



TOM:  I guess so.



STEVE:  So we have some Yubico news.



TOM:  Oh, yeah.  What's up with Yubico?



STEVE:  And this actually relates to - this is one of the things that I knew was coming, which is why I did a few weeks ago a podcast focusing on near field communications, NFC, because I wanted to lay some groundwork for what NFC is, exactly how it works, how it relates to WiFi and RFID and so forth.  There is a new YubiKey from Yubico that they call NEO.  And I don't know if they've actually started to use NEO the character from "The Matrix" or not.  But that's the NEO...



TOM:  Mr. Anderson.



STEVE:  Right.  That's the character that they sort of refer to.  And I chatted with Stina Ehrensvrd, who's the founder and original inspiration for the YubiKey, a few months back when she was down here in Southern California.  We got together at Starbucks and had some coffee, and she put me under NDA for a number of things happening.  This is one of them.



TOM:  Okay.  So now it can be told, finally.



STEVE:  Yes, now I can talk about this.  What they've done is they've added a next generation to the YubiKey, which supports NFC, which allows you to do things, for example, with all smartphones except, of course, the iPhone 5, which curiously doesn't support NFC.  But my BlackBerry does, and the Galaxies and all these...



TOM:  A lot of different Android phones do, definitely, right.



STEVE:  Yeah.  And so this allows you to use, for example, you could use LastPass Mobile on your smartphone with the NEO YubiKey in order to authenticate, to verify to LastPass on an instance-by-instance basis, that you are in physical possession of this YubiKey NEO.  And so it gives you the same one-time password.  It's got the two slots.  Now, it does include something that they call NXP.  NXP is the renamed Philips Corporation, Philips Semiconductor, something called SmartMX security technology, which is some public key crypto.  They say that it supports CCID compliant USB token behavior.  And CCID is the chip or smartcard interface device, which is a standard that's been established that does use some public key/private key stuff.



TOM:  Is that like chip-and-PIN?  Or is it different?



STEVE:  I don't know.  I know that it's CCID.  And also there's something called Mifare.  Mifare Classic is a standard technology for physical access control systems, where you wave something near a reader, and that unlocks the door, access control.  And so this supports that standard, too.  So I'm really pleased because all along the hope has been that we wouldn't have the so-called keychain or key ring full of individual tokens where it's like, okay, sort of looking like a janitor key ring of different active devices.  And so they're really sticking to a standards-based approach, which means that, if you were to upgrade your YubiKey to this one - and I don't actually know if there's an upgrade planned.  You have to check.  I do know that this is not cheap.  This little sucker is 50 bucks.



TOM:  Just for the device.



STEVE:  Just for the new YubiKey NEO.  And I imagine there are, if you did a corporate deal, there's no doubt quantity discounts and so forth.  But I'm glad to see this.  And there's more news coming.  But probably not till - actually, it's going to be a while, probably not till next summer.  So other things are in the works and being tested and so forth.



TOM:  Does this let me then just tap the YubiKey against the phone?



STEVE:  Yes.



TOM:  And that unlocks my LastPass, and I'm on my way?



STEVE:  Yes.



TOM:  Wow.  I know 50 bucks is not chicken change, but that's pretty compelling.  That's pretty cool.



STEVE:  It's pretty cool, the fact that every phone except, conspicuously, the Apples, would - that supports NFC.  What this does is it uses, again, one of the NFC standards that will send your phone a browser link and then launch the browser and provide the browser - the URL contains the one-time password over a secure connection.  So SSL protects it, and then you're able to perform the whole transaction securely.  So it's very cool.



TOM:  Lepton is taking me to task for saying "chicken change."  And I think he would have preferred "chump change."  I mixed "chicken feed" and "chump change" to form a new - it's an evolving language, Lepton.  All right.  Let's talk about Facebook.



STEVE:  Speaking of evolving.



TOM:  Yeah, I was happy to hear this news.



STEVE:  Yes.  Facebook announced on their blog, maybe it was just yesterday, it just happened, that they were going to be rolling out, first for all North American users, and then following that for the rest of the world, HTTPS is on by default.  So we've talked about the evolution of this, that some time ago, maybe it was - feels like it was maybe as much as a year ago, it was some time ago that Facebook responded to the threat which we talked about a lot which is, for example, represented by - boy, I'm blanking.  It was that crazy little gizmo, the add-on for Firefox.  Firesheep.



TOM:  Oh, right, right, right, right.  The one that stopped you from getting your Facebook spied on when you're at the WiFi...



STEVE:  Oh, and, I mean, it was horrifying.  When Firesheep first came out, as an experiment, I took a laptop over to Starbucks, and the entire column populated with the Facebook pictures of all of the people sitting around me at Starbucks.  And the reason being that Facebook, when you log into your Facebook account, you have to authenticate.  But then to stay active in your Facebook account, it would then drop you back out of SSL, so no more encryption.  And the cookie being sent with every query was in the clear.  So Firesheep just sniffed the air because Starbucks is famously an open WiFi hotspot like any open WiFi hotspot, where everything is available in the air.  So this thing just saw these transactions, grabbed the profiles, and by double-clicking on the person's listing in Firesheep, you could impersonate them.  You were logged in as them.



TOM:  And that was the big thing.  Because some people were like, oh, well, I don't post anything on Facebook that I don't care if people see.  That wasn't really the point, although Facebook does give you a presumption that you're restricting who can see your stuff.  It was that they could then be you.  They had your authentication.  It was awful.



STEVE:  Full impersonation, yes.  So the fix to this is, especially in a wireless network environment, where there is no encryption, is to maintain an SSL connection persistently.  So Facebook initially made it an option so that security-aware users like all of our listeners could go into their Facebook profile and turn on "always use secure."  And there's really no reason not to, except that all of those SSL negotiations, that connection setup, does represent some overhead.  So in Facebook's blog they were boasting about that they've done really cool things on the technology side to minimize the impact.  They're a little concerned that users may notice some slowdown.  So you can turn this off, if you're crazy.



TOM:  Yeah, right.



STEVE:  I wouldn't turn it off.  I'm sure everybody who's listening and using Facebook already has it turned on.  But the significant piece here is that, if you had never specified it either way, it will start being on by default.  So Facebook is taking proactive responsibility to bring up the cone of silence for their entire billion users, ultimately across the world.  So that's really good news.  And in bizarre timing, just today, the HTTP transport security standard has been ratified and formalized by the IETF.



TOM:  Oh, good news.



STEVE:  So that is now, again, we're moving forward continuously to increase the security across the board.  Google, of course, has been supporting persistent security on their site and searches now for a while.  Facebook joins them.  And this, of course, just adds pressure for everyone to do this.  So it's just 100 percent good news.



TOM:  And honestly, the performance hit is not that bad, I don't think.  It's almost a psychological thing.  I've gotten into arguments with some developers about this before.  And if everybody just did HTTPS from the beginning, and nobody did everything else, nobody would notice because it isn't so bad that people are like, wow, these websites just don't work.



STEVE:  Well, yes.



TOM:  It's all a relative thing, I guess is what I'm saying.



STEVE:  And also that there's so much streamlining and caching.  We have covered SSL, or TLS as it's now referred to, transport layer security, the exact protocol, carefully in the past.  And the negotiation that the client and the server go through, and the more time-expensive SSL portion, the whole public key stuff, that only really has to happen once within a long period of time because the client and server will agree on credentials, which are cached and then reused.



So I think probably the only concern is that, if you have an SSL page, then you want all of the assets which the page loads also to be over SSL.  Otherwise you get that scary sort of mixed security warning.  And so, if there were other servers supplying assets with which you had not negotiated SSL connections, then those subsidiary assets could, like, slow down the page load.  And they may not be as readily prone to caching as the main page and all of its content.  But as you say, it's just like this is something that's only going to get faster as our machines get faster, as the servers improve their performance, as hardware accelerate of public key stuff improves.



And remember that we can move to ECC encryption.  The elliptic curve crypto is much faster than traditional crypto.  And as clients support it and servers support it, they will automatically notice that each other supports it, and they will choose that preferentially over the slower, older, and even maybe less secure traditional factor the product of primes - I said it right this time - problem that is used to create the security in traditional public key crypto.  So I just think we're going to see this drop away as being a problem before long.  And this just represents - this is just good, to have all of our connections being secured for us.



TOM:  Now, our next story is a problem that I did not expect to ever see.  Did the Naval Observatory go back in time?



STEVE:  Well, something weird happened.  Simon Zerafa, who often sends me interesting tweets and observations - he must spend his entire life just scraping the Internet, looking for interesting things, because he comes up with a lot of interesting stuff.  He found a note that that the SANS Internet Storm Center Diary had posted, explaining why people were reporting that the year on their computer clocks was wrong.  And what SANS posted on their Internet Storm Center Diary was, "A few people have written in within the past 18 hours about their NTP servers and clients getting set back to the year 2000.  The cause of this behavior is that an NTP server at the U.S. Naval Observatory" - which is pretty much the authoritative time source throughout the U.S. - "was rebooted, and somehow its clock reverted to the year 2000."



And then, because of the way NTP protocol works, it's very much like DNS, where you have a hierarchy of time servers.  The idea is they don't want to load down the central time server, so there's a whole bunch of second-level time servers that synchronize themselves to the master NTP time server, and then they serve time and so forth down the hierarchy.  And so they said, so this mistake of being 12 years in the past then propagated out for a limited time to downstream time sources that also obtained this wrong value.  They said it's a transient problem and should already be rectified.  "Not much really to report except an error at the top of the food chain," as they put it, "causing problems to the layers below.  If you have a problem, just fix the year or resync your NTP server."  So that was bizarre.



TOM:  So we had the Y2K problem after all.  It just wasn't what we expected, and it was 12 years late.



STEVE:  Exactly.



TOM:  I heard about this NASA issue where they lost another laptop.  It's not the first time that they've lost laptops, but they're finally taking some definitive action, it sounds like.  What's going on there?



STEVE:  Well, yeah.  And I thought I would report it today because today is the deadline, November 21st.  And I had meant to talk about it last week.  And again, it's one of those things where I had pulled these notes together, and somehow it didn't make the final cut.  But on Halloween, October 31st, an unencrypted NASA laptop was stolen from an employee's locked vehicle which contained unencrypted personal data, so-called "PII," Personally Identifiable Information, on a large number of people.  It was password-protected, but not encrypted.  And it's funny because that was the actual line that was used.  And I thought I would note to people that password-protecting the laptop prevents the OS from booting.  But all you have to do is attach the drive, put it in a USB case or attach it as an external drive to an already booted system, and it'll go, oh, look, a new drive, and you have full access to the file system.



TOM:  Yes.  Here's what's on the drive.  Would you like to look through it?



STEVE:  Yeah.  Look at all these names and addresses.  So this turns out to have been the second time this year - not even in history, but just this year, I mean, historical, NASA's had a bigger problem, but just this year - that a NASA laptop containing sensitive, in-the-clear information was stolen.  About six months ago, in March, a laptop containing names, Social Security numbers, phone numbers, email addresses, dates of birth, college GPAs and other sensitive personal data of NASA employees at NASA's Kennedy Space Center was stolen from the car of a worker at the facility.



And you've got to wonder why NASA seems to be having these problems.  Maybe there's a little bit of foreign intrigue going on here because you never know what you might find on a NASA laptop.  So what finally happened after this is that NASA said, okay, enough of this.  They issued a directive prohibiting the removal of computers from any NASA facility unless whole disk encryption is enabled or all sensitive files are individually encrypted.



TOM:  Now, why wouldn't they just say, "All of our hard drives have to be whole-disk encrypted?"  Why leave any exceptions?



STEVE:  That's where they're headed.  But bureaucracy, and who knows what logistical problems they might encounter.  So CIOs, the chief information officers at all NASA facilities have been instructed to complete disk encryption on the maximum possible number of laptops.  Again, that's your typical sort of soft bureaucratic-ese speak.



TOM:  Little CYA there, yeah.



STEVE:  Yes, by November 21st, today, and to add encryption capabilities to all laptops by December 21st.  So who knows.  Maybe laptops are in employees' homes.  Maybe they're in shipment, or they're traveling, so you can't get to them.



TOM:  And it's a large enterprise, so it may take a while to make sure you've got everything covered.  I get that, yeah.



STEVE:  And to give you a sense for how creepy this can be, the NASA Inspector General, whose name is Paul Martin, giving testimony before the U.S. House of Representatives, the Committee on Science, Space and Technology, the Subcommittee on Investigations and Oversight, noted...



TOM:  Snappy name.



STEVE:  Yes, oh, yeah.  Well, it's, yeah, yeah - noted that in March of 2011 the theft of an unencrypted notebook computer resulted in the exposure of algorithms used to command and control the International Space Station.  So if you see anything falling out of the sky...



TOM:  Oh, man.



STEVE:  Oh, goodness.



TOM:  Don't even joke.  That's horrible.



STEVE:  And then in another incident, sensitive data regarding NASA's Constellation and Orion programs were similarly compromised when a laptop containing the data was stolen.  So hopefully we'll still have a space organization by the time they get this locked down.  But they're doing it now.  And this has made the news.  And this is just - this ends up being good because soon it will be, well, other CEOs will say to their CIOs, "Hey, NASA has all of their laptops encrypted.  Why don't we?"  So that's good.



TOM:  That's a good way of looking at it.  They hopefully will set a good trend.  Pretty much every laptop should have whole-disk encryption.  Every laptop in existence, used by anybody, should have - I'm sure that's the way all of the people in the audience think, too.



The cloud is always a good topic for a security discussion, and there's some news about Google Docs not just being for documents anymore.



STEVE:  That's right.  Now Google Documents can also be used by trojans as their command-and-control server.



TOM:  How convenient.



STEVE:  [Laughing] Hey, it's free.  Researchers at Symantec have detected trojan horse malware named Backdoor.Makadocs that is using Google Docs to communicate with its command-and-control infrastructure.  The malware appears to be targeting users in Brazil, harvesting and collecting specific data, including the infected computers' host names and operating system types.  The malware uses Google Drive's viewer as a proxy to receive instructions from a master command-and-control server.  And apparently this trick disguises, well, naturally this trick disguises the communication as encrypted connections within a trusted service.  So it's like, hey, well, we trust Google.  And we have an SSL secure encrypted communication using Google Drive to Google Docs.  And so not surprisingly, a Google representative was quoted saying that the company is investigating because "using any Google product to conduct this kind of activity is a violation of our product policies."



TOM:  So this is isn't infecting somebody who's using Google Drive.  It's using Google Drive to mask how it's sending command-and-control?



STEVE:  Well, yeah.  The idea is, of course, Google Docs is in the cloud.  And so you would set up a Google Docs account and give that account public access.  And then anybody who wants to can see that.  And so the idea would be that the trojan itself would incorporate a copy of Google Drive, or maybe download it once it infects a new computer.  Essentially it would set up a local instance of Google Drive, mapping the drive to that Google Docs folder.



TOM:  Gotcha.



STEVE:  And so all the trojans would be watching that folder.  And then the trojan master, the bot master, would then post instructions about what they wanted the trojan fleet to do to that folder.  All of the connections, all of the trojans monitoring the folder would see the update, get the instructions, and then go about doing whatever they've been told to do.



TOM:  I know Google probably doesn't feel this way, but it's actually a fairly good recommendation for using Google Docs as a convenient way to share information.



STEVE:  Well, and of course traditionally we were using IRC Chat.  But IRC Chat didn't have the reputation that Google has and didn't just come with free SSL connectivity in order to protect and make secret and thus non-packet-sniffable the transactions going on.  And so here you just bootstrap yourself and use all of this nice, well-working, high-availability Google infrastructure in order to communicate to all your trojans.  How convenient.



TOM:  How very convenient.  Finally, this is somewhat upsetting, especially to fans of FreeBSD.  They had a pretty severe server compromise a couple months back.



STEVE:  Yup.  Well, and they didn't discover it until nearly two months later.  What they found on November 11th, so that's 10 days ago, was that back on September 19th, so nearly two months ago, actually a little more than two months ago, but after nearly two months of the breach, back on September 19th, two of their servers had been breached.  What the security team believes is that the intruders gained access to the servers using an SSH authentication key that was stolen from a developer.



So this is a problem.  You've got secure access to servers, but not just one person has that.  Your whole development team needs to be able to post to that central repository.  So every single one of those developers has highly privileged access to the server; and, if they lose their credentials that authenticate them, then this sort of thing can happen.



So the consequence is, and this is what FreeBSD has formally stated, is that users who've installed FreeBSD since September 19th are being advised to completely reinstall their systems because third-party application software packages - and there's been no enumeration of them.  Maybe we'll get that in the future.  From what I've heard, just as of this podcast time, they're still looking into this to figure out exactly what happened.  But they know it's not the kernel, not the system libraries, the compiler, or the command-line tools.  So it's just the FreeBSD application repository.  They think that may be where some mischief occurred.



So they're saying, if you did a recent, since September 19th, install of FreeBSD - and normally the FreeBSD install is a network install that sucks everything down from the repository on the fly - that you are advised, and they apologize, of course, but you're advised to do it again.  So it happens that FreeBSD is my UNIX of choice.  It's the one I have gotten to know and like a lot, so...



TOM:  It's a good one.  Am I remember this correctly?  That's the one that Darwin is based on for OS X?



STEVE:  Yes.  It was FreeBSD.  And actually it was Brett Glass who recommended it to me a long time ago.  And that was a good recommendation.



TOM:  Well, what's going on in the Twitterverse?  You got any good twitters to talk about this week?



STEVE:  Oh, just - I've mentioned this before, and I keep having people thank me for this recommendation, so I just thought I would share the fact that people are liking this.  And this was Mark Grennan, who tweeted, he says, "I'm a MySQL database administrator, and I love the outdoors," he said.  Oh, actually, that was in his profile on Twitter.  So he said, "@SGgrc Just a thanks for the tip on the show 'Homeland,' the most well-written dramatic show I've ever seen.  Thanks."



TOM:  Man, she can be hard to watch sometimes.  She's so freaking nervous all the time.



STEVE:  She's a little twitchy.



TOM:  She's so good at that.



STEVE:  Yes.  And but she's acting.  Claire Danes is a serious actress, and...



TOM:  No, Claire Danes is not like that in normal life.  I've seen interviews of her.



STEVE:  Yes.  Yeah.  She is doing a great job.  It's in its second season now.  And you really need to, if you're going to get onto it - and I keep hearing people talk about it.  I mean, it is wonderful.  It's on Showtime Network.  And you can get, like, the first season.  You can - I'm sure the various archives and repositories, I don't know where Showtime officially has theirs, probably just on the 'Net you could watch it from them.



TOM:  I think you can get it from iTunes.  And I hope I'm not misremembering this, but I thought Netflix may have had them, or at least did have them for a while.  Stuff sort of comes and goes there.



STEVE:  Yeah.  Anyway, I do recommend it.  I'm enjoying the second season as much as the first, which was terrific.  And I have two quick little notes about SpinRite.  Greg Kurts, he also tweeted because I have "@gkurts," he said, in Cleveland.  He described himself as a "software developer who works from home, family tech support guy, dad, husband, and giver of treats to dogs."



TOM:  Good man.



STEVE:  And he said, "@SGgrc This is twice that SpinRite has helped me salvage a drive that was 'gone.'  I can't brag about it enough.  Money well spent."  So thank you, Greg, for publicly tweeting that.



And then Ray McGill, who's a listener in New Hampshire, said, "I want to buy SpinRite for USB drives.  A long-time SN listener.  I want to use" - okay, now, he said SN, but he meant SP or, oh, no, SR, SpinRite.  "I want to use SpinRite to scan two USB external drives.  The only answer I've seen is that there's no support for USB, and some people have gotten it to work through magic.  Can I use SpinRite for USB?"  So I just thought I would answer Ray's question, and to anybody else who's wondering, the answer is yes.



TOM:  Do you need to be a wizard, though?



STEVE:  You do not need to be.



TOM:  Oh, good, all right.



STEVE:  But you need to have a more recent motherboard.  But "more recent," of course, is relative.  What you need is a motherboard that understands USB.  And all motherboards today do.  They let you boot from USB.  They see USB.  You've got USB drives in boot options and so forth.  So as long as the motherboard that you're running it on does recognize a USB drive plugged into it - and that's easy to do.  Plug the USB drive in, reboot, go into the BIOS, and see if it's listed there.  If the motherboard sees it, SpinRite will see it, and then it will run on your external USB drive with no problems at all.



TOM:  I'd forgotten about having to install drivers to be able to see USB drives.  But the very first time I ever used a thumb drive, Robert Heron at COMDEX, I want to say 2002, 2003...



STEVE:  Yeah, probably 10 years ago.



TOM:  ...one of the last COMDEXes, brought his stories for Fresh Gear to me to post on the web.  And he's like, hey, you've got to try out this cool thing.  It's a thumb drive.  And I had to install the drivers in Windows '98 to be able to read the files.



STEVE:  Yup.



TOM:  But you don't have to do that anymore.



STEVE:  Nope.  As long as the BIOS knows about it, SpinRite will be able to see it.



TOM:  Excellent.  Well, let's move on into our Listener Feedback #155, shall we?



STEVE:  Wow.  Yup.



TOM:  All right.  Paul White in Portland kicks this off with some good news about Verizon.  He says:  Longtime Security Now! listener, I have heard/watched them all, and a SpinRite user, blah blah blah.  He wrote "blah blah blah."  I just wanted to pass this along to you.  Changed my email address for my online My Verizon web account and got this message upon completing validating the new email:  "Your new email address has been validated.  Once the new email address has been in our records for 30 days, you can use it to reset your password."  Am I wrong, or is a major player doing something right?  Thanks to you and Leo.  Keep up the fine work.  Paul.



STEVE:  Yeah.  He is exactly right.  This is the first I had heard of that.  I'm also a My Verizon account user.



TOM:  As am I.



STEVE:  And it's like, wow, that's really good.  Because of course this prevents a number of potential exploits where somebody might somehow get onto your web account.  For example, like if there was a - I don't know that Verizon doesn't use SSL, but we were just talking about the problems that you have of having your session sniffed and impersonating someone.  So you might be impersonated, but what you want to prevent is them being able to then leverage that into getting your password.  Or not getting it, but being able to reset it, claiming to be you and to have forgotten it.  So putting up a 30-day waiting period, essentially, that represents a really nice step forward in security.



TOM:  I think Mat Honan would have liked this sort of policy to have been in place.



STEVE:  Precisely.  Precisely.



TOM:  Second one comes from Daniel in Colorado, posing a question regarding cascading ciphers.  He says:  Hoyo, Steve and Leo.  TrueCrypt offers the ability to use more than one type of encryption when building a file container or when encrypting a hard drive.  Say we are using a paired AES-Twofish configuration.  TrueCrypt will encrypt each block with Twofish and then encrypt that intermediate result with AES.  Each cipher gets its own 256-bit key, which are mutually independent.  I am wondering if this merely doubles the encryption, like adding a second lock to a door, or if it somehow creates a stronger encryption by reencrypting the first cipher text with a second, different key and algorithm.



STEVE:  Great question.  Okay.  So the idea is, the reason this multi, what did he call it, paired or cascade, he used the word "cascading ciphers," the reason that's there is, I mean, this is really belt-and-suspenders stuff.  This is the TrueCrypt guys saying there's a non-zero probability, but probably vanishingly small, but still maybe not absolutely zero, that a flaw could be found in a cipher.  And if a flaw were found in the cipher that you had chosen to use for encrypting your volume or whatever in TrueCrypt, then that would be a problem.  So the reason they allow you to use multiple ciphers is that the chance of all of those multiple ciphers being simultaneously found wanting, I mean, that probably really is about as close to zero as you need to get.



So it actually isn't for greater security, like from the standpoint of making it harder to crack your drive, although we'll address that in one second.  The main reason was just, again, belt and suspenders.  If you encrypt under one cipher and then reencrypt the encrypted results from the first cipher with a second different cipher, then you get the encryption goodness of both.  So that, if one were completely destroyed cryptographically, like overnight, you're fine.



TOM:  So it is like two locks on a door in that sense because you have to - even if you break through the first lock, there's another lock you'd still have to break through?



STEVE:  Yes.  Maybe it's like two doors in succession.



TOM:  Okay, yeah, sure.  I got the first door.  Oh, crap, there's another door.



STEVE:  Like "Get Smart" when he was trying to get into his base.  So it doesn't double the encryption because, now, if we switch from why they did this, his question is, does it double it, or is it stronger?  And the fact is it is stronger in the sense that you have two 256-bit keys, both of which you would have to brute-force in order to crack each of the ciphers in order to decrypt the drive.  Now, I would argue that one 256-bit key is already all the suspenders anyone needs.  And so, yes, this could give you the equivalent of a 512-bit key because they are independent of each other, and you'd need to brute-force both in order to decrypt the drive.



Now, it's not double the strength because that would be a 257-bit key, rather than a 256-bit key.  You'd be adding one bit to the key.  That doubles the strength.  This is 2^256 times stronger.  So it's just ridiculous.  Which is why it's like, okay, TrueCrypt does a good job at generating a very high-quality, extremely pseudorandom 256-bit key.  The danger in TrueCrypt is that you don't choose a strong enough password; that as far as we know, the only known problem comes from the user using a weak password and then somebody brute-force guessing passwords, looking at the header on the TrueCrypt volume and decrypting it.  So the double cipher doesn't protect you from the actual probable means of attacking a TrueCrypt volume.  It protects you from either of the ciphers being found to be insecure suddenly through some breakthrough that we're not expecting to have happen.



TOM:  Well, this is similar to what we were talking about with quantum key distribution before the show, which is, yeah, it's more secure, but it doesn't actually address the likely security vulnerability.



STEVE:  Well, and we've talked about this often.  The perfect model is the chain, with security being the strength of the chain, which depends upon the strength of every link in the chain.  So the weakest link is the problem.  That determines how strong the entire chain is.  And so you may have one quantum crypto key exchange link that just, I mean, is made out of titanium.  But if the other one is a plastic straw, that's going to be the one that gives.  So you still have a problem with your chain.



TOM:  We've encased the titanium link in another case of titanium.  We still have a plastic straw link, though, so...



STEVE:  Yeah.



TOM:  Steven Metz in Highland, New York responds about secure nuclear site data monitoring.  He says:  Hi, Steve and Leo, or in this case Tom.  Did you write that in, or did he write that?



STEVE:  No, no, I did because I kept seeing Leo referred to.  I thought we've got to give Tom some.  Now, this is a long post, but I want you to share it with our listeners, Tom, because it is cool.  And we'll talk about it afterwards.  But it's just nice to know that somebody's thinking about this, and there actually is a solution.



TOM:  All right.  He says:  I love the show and listen to it on my daily commute to work.  I was just listening to Episode 375 and wanted you and the listeners to know that there is a solution to the issue of securely monitoring nuclear power plants remotely.  I'm referring to this portion of the episode where Leo said, "Do not manage nuclear plants remotely, please."  Steve, you said yeah.  Leo said, "If you don't want to be onsite, then don't do the plant at all, just don't.  If you don't feel safe enough to sit next to the core, don't build it in the first place."  Steve, you said, "Yeah, so what's done is pure convenience and absolute sheer stupidity."  Leo said, "I have some files which I would not wish anyone to tamper with.  I store them on a computer never connected to the 'Net, never had been.  If I can take such precautions, why is it that infrastructure computers are connected to the Internet?  For the sake of convenience?  As an example, nuclear power stations have been around since the '60s, and they weren't connected to the Internet then.  They worked.  Why connect them now?"



So here's what Steven Metz says.  Disclaimer:  I work at a company that sells the solution I'm speaking of, Owl Computing Technologies.  As you said, it would be convenient to be able to monitor the status of our infrastructure with pieces of it geographically distributed from a central place in real time.  Also, many facilities have databases that archive real-time data from all sensors and devices.  Many industries have regulatory requirements for such databases and must replicate them offsite.  So the issue is, can data be exported in real time without providing a path that hackers can use to probe and attack the source of that data?  As your listeners know, firewalls and antivirus programs are no guarantee for home PCs, much less nuclear facilities.



The company I work for has solutions in place at more than half of the nuclear facilities in the United States.  These solutions consist of a pair of machines.  One is connected to a secure internal network or device, while the other is on a separate, less secure network, perhaps with Internet connectivity.  A pair of fiber optic cards connects these two servers, but one card only has the optical hardware to send data through the fiber, while the other only has hardware to receive data from the fiber.  Thus it is physically impossible for a signal to be sent or received in the opposite direction.  We call this a "DualDiode" configuration.



If you wish to know more details, we refer to the machines as the "send-only" and "receive-only" servers.  These names are based on how information is sent relative to the fiber optic connection between them.  The send-only server is on an internal protected network, while the receive-only server is on a less secure network, perhaps with Internet connectivity.  There is a protocol break between the servers, meaning that you cannot specify the final IP destination address for data from the send-only side.  A computer on the protected network can only specify the IP address and a port number on the send-only server and has no knowledge where the data goes after the DualDiode.



If we're dealing with files, then the whole file is received on the send-only server.  The file is then sent over the one-way fiber optic link through a protocol similar to ATM.  No TCP header information is retained or passed to the receive-only server.  Instead, the send-only server assigns the file a channel ID based on the port number the file came in on.  This channel ID goes with the file to the receive-only server and is then mapped to a destination IP address/port.  This is like a TNO double-blind setup that you speak of, Steve, in that the send-only side has no knowledge of the destination IP or port number, and the receive-only side has no knowledge of the source computer IP address.



Also, files sent through the DualDiode can be scanned for viruses and/or filtered on file type, whitelist and/or blacklist keywords, XML schemas, or any other criteria.  With the protocol break in scanning, even if malware were already inside a customer network, it could not dial home through this one-way outgoing connection.  Similarly, streams of data can be sent.  They are subject to the same protocol break, where all TCP/UDP header information is stripped.  The streams can also be scanned in real time to verify conformance to different formats - MPEG-2, RTP, et cetera.



With this DualDiode type of solution, a company can share information from one network to another, while maintaining network separation.  And the DualDiode can be installed in the opposite direction to only allow data to go into a private network.  This is common in government use cases such as feeding live surveillance video streams into top-secret networks with assurance that no data can leak out of the top secret network through that connection.  If more information is needed, feel free to visit our website, and he gives the website owlcti.com.  Thanks, Steven Metz.



STEVE:  Isn't that neat?



TOM:  Does that work?



STEVE:  Yeah.  So the idea is you create a hardware-enforced one-way connection.  You need a protocol which inherently doesn't require acknowledgment.  So we're used to, for example, TCP or even UDP protocols where the consequences of our sending is acknowledged in order to verify that the data was received.  But that's not secure.  There's no way to do that safely.  So what they do is they use a fiber optic link, and there's a transmitting laser diode at one end, but no receiver.  And at the other end is a receiving photo diode and no transmitter.  So it's hardware-enforced that the sender is just blindly sending data out, and the receiver is receiving it.  And the trick is it has to be a protocol that will work without acknowledgement because there can be no acknowledgement of the data being received.



TOM:  It's all SYN, no ACK?



STEVE:  Yes [laughing].  Exactly.  And so it's going out, just assuming that the other end is connected and listening.  And in that way, as he says, I guess they called it a DualDiode.  I was thinking, when I first read this, I thought, well, why just not one diode?  And I guess it's that they visually see it as one at each end.  There's a diode, the electrical component diode, only allows currently to flow through it in one direction.  And so each card, each interface card, is like that.  One is a transmitter only; one is a receiver only.



And so their whole company, at least this aspect of what they're offering, is built around one-way connections.  And then they've developed a protocol, a carrier protocol which doesn't require acknowledgment.  So essentially the emitter, the sender, is sort of like it's broadcasting blindly into this fiber optic; and the receiver captures it and figures out what's been sent.  Maybe there's error correction stuff so that...



TOM:  Yeah, I was going to say, what do you do about packet loss or stuff like that?  It all has to happen on one end.



STEVE:  Right.  So they've added the technology to make that work robustly.  And I thought it was just nice that such a thing exists.  That's great.



TOM:  Yeah, very interesting.  Thanks, Steven, for that.  Question #4, Gary McCleery in Oamaru, New Zealand - kia ora, Gary - says rubbish, rubbish, rubbish.  Uh-oh.  Hi, Steve.  I just don't understand why you're so excited about  Microsoft turning DNT on.  That's Do Not Track.  It's simply a request not to be tracked.  It doesn't stop these people tracking us.  It's not as if, when we set this setting, people can't track us.  They make too much money from tracking us for them to stop.  I admit it is an extremely small step in the right direction, but it is meaningless in respect to any actual benefit to the user.  So please, please explain why you are so excited about what Microsoft has done.  Cheers, Gary McCleery.



STEVE:  So I picked this out of the mailbag because it's something that a number of users have been confused by.  And I said it before, but this is a perfect time to just say, okay.  I get that.  I mean, I'm Mr. Turn-Off-Your-Third-Party-Cookies, which arguably is a proactive step that a user can use to configure their browser to actually change the behavior of the browser.  And I get it.  In fact, Microsoft, as we discussed last week, just calls this a "signal," the Do Not Track signal.  So it's just a signal that the browser is sending out expressing user intent.



And so many of these things take time.  The keynote that we shared from the Microsoft executive last week understood that we're at the beginning of a discussion; that the world has changed.  The issue of privacy and secrecy has changed as a function of the technology which we've generated, and this is creating new problems.  And one of the things that Microsoft recognized is that users want control.  They don't necessarily need the secrecy of their data because, for example, they're posting all kinds of stuff on their Facebook pages.  But they want control over who has access to it.



And so I recognize we've got a long way to go.  I absolutely get it that this doesn't change anything.  But this represents a step forward.  And this is the way it's going to happen is that this will happen; users will understand it.  Microsoft, reading between the lines, it has to be that Microsoft sees a marketing advantage for them to have this signal turned on by default.  Which I hope works.  Where Microsoft, you know, the idea would be that IE would get the reputation of requesting not to be tracked more than the competing browsers.  And the case is, it's easy to turn this on in Firefox.  It's almost impossible to turn it on, I mean, you can, you can find it in Chrome, but you've got to dig.



So Microsoft surveyed their users.  Three quarters of them said I would rather not be tracked.  So Microsoft set the default that way and explains what they've done when you install IE10, which either comes with Windows 8, or you're able to install it on Windows 7.  So, yeah, Gary and everyone else who, like, thinks I'm crazy, just be patient.  I'm patient.  There's no - it's just going to take time.  And ultimately I'm sure, if the industry does not regulate itself, it will be regulated.  And that's the tension that exists here.  There is tension between what users want and what the tracking companies want.  And if users' desires not to be tracked are not voluntarily honored, then they will be honored by law, and companies that break the law will suffer the consequences in reputation and treasure.  So we're just at the beginning.  This is not the end.  This is just the beginning.



TOM:  It's always easy to criticize a voluntary system like this; to say, well, people don't have to follow it.  And especially in the early times, people aren't following it.  The idea of any kind of system like this is that, if you get enough big companies to follow it, most of the reputable companies will follow it.  And if only the reputable companies are following it, it's the disreputable companies that people will avoid anyway because they won't want to use that stuff.



Now, things are a little different on the Internet because it's so easy to go from one place to another.  But I think about the rating system for movies.  There's no law that says you are restricted to being younger than 17 to see movies.  The movie studios and the movie theaters agreed to self-regulate, and it's as if it were a law.  And you could say, well, the theaters don't have to follow that, and they don't.  But that is an example of it working.  Now, it doesn't always work.  You can find examples of this sort of thing not working, and that's where it gets to what you were saying, Steve, which is the government will often step in in those cases if the voluntary regulation doesn't work.



STEVE:  Yeah.  I think that the other thing, also, is there's a real question, which has never been answered, about what's the true value of this tracking.  My feeling is they track because they can.  And this is where Leo and I have gone around and around because it's not at all clear that anything bad will happen if this data aggregation stopped.  It's not necessary for actually Google, now that they own a major advertising supplier, it's not clear that it's necessary for them to aggregate all of the locations that I go to and try to figure out who I am.  People feel that it's a little creepy if they are, like, shopping for some things on one website and then go somewhere else and ads sort of follow them around the Internet.  It's like, oh, that's a little creepy for them.  So when people see evidence of tracking, it's not something that they think is inuring to their benefit. 



So it's not at all clear that, if all of this aggregation was just outlawed, that anything would change.  I think the advertising industry would go right along.  Ads would be on websites.  Everything would be fine.  I believe they track and aggregate only because they can.  And if they couldn't, if this had never happened, we would still have a rich, ad-based ecosystem.  And I'll bet that's where we're headed.



TOM:  Yeah.  And in fact the increase in tracking has not made Internet advertising more valuable than television advertising yet, and television advertising is notoriously badly tracked, as far as who's watching it.  So it's not as simple as what you've got out there.  There's a lot of complex factors, a lot of moving parts.



STEVE:  It is funny, too, because you know that dollars spent on TV are being spent as wisely as possible.  So when you're looking at the commercials of a given show or a given time, you can tell, like, oh, this is the market segment that these guys are going after because of the nature of the commercials that occur on that channel at that time or during that show.  So you can sort of see the effect of that in aggregate.



TOM:  And there's an argument to be made, not to carry this on too long, but there's an argument to be made that you can persuade people to want to be tracked because, if you're watching a video, and it's got a bunch of advertisements for men's cologne, and you're a woman, you'd rather, you know what, I don't want to see that.  That's not relevant to me.  I want to see ads that are relevant to me.  So I'm not saying that everyone will go for that, but there's an element of that in Do Not Track, too, to say I would like to be tracked.  As long as you're the one in control of that, I'm fine with that.



STEVE:  I think one of the things we may get to, and it will be interesting to see how this experiment plays out, is the notion of opt-in tracking, where you go to a site with a browser that is saying Do Not Track.  The site you go to sees that, and they get enough more revenue if they allow their advertisers to track us who visit there than if they don't, that they say, hey, we're ad-supported.  We need you to enable tracking of you while you're here because it makes that big a difference to our revenue.  And that's the experiment I'd like to see.



TOM:  Yeah.



STEVE:  What will people do?  Will they go, hey, no, it's not worth it to me to be tracked, that's creepy, I'm going to go somewhere else where I'm not being asked?  But that kind of informed consent is - that would be a nice thing to see.



TOM:  Yeah.  Question #5 comes from Tali Sherman-Hall in Seattle, Washington, wanting to know if we can help her get the word out.  Tali writes:  I recently started getting unsolicited and unexpected email from Digital Lifeboat, an online PC backup service.  It appears that somebody set up an account using my email address by mistake, so Digital Lifeboat have been sending me updates about the PC being backed up on the account, with links to their website.  If I wanted to access this person's account, with all of their personal information and all of the data in their backup files, I simply have to go to the Digital Lifeboat website and request a password reset using my email address.  It is just the customer's dumb luck that I am too scrupulous to do so.  Even if I don't do anything, though, they are still not getting any notification emails - I am - and they will never be able to reset their own password because everything goes to my email address.



I tried unsuccessfully to contact Digital Lifeboat by email and their webpage so I could warn them about the risks they are taking by not verifying customers' email addresses during account creation, and possibly to find a way to contact the customer without invading their privacy.  But none of that worked.  So today I finally posted on their Facebook page and did receive a response from a man who initially did not understand the issue and then proceeded to tell me about an even bigger problem.



He wrote, quote, "I forgot that our two-factor cell phone authentication is currently disabled.  When we disabled it, we left this gaping hole in our security.  Wow, that's our screw-up.  Thanks for bringing it to our attention.  I'd like to delete this thread so as not to advertise this issue, and we'll address it internally."  That thread was deleted, but not before I took a screenshot of it.



It worries me to think of all the people trusting this company with their personal information and backup data because they're not being told the truth.  Digital Lifeboat touts "256-bit AES encryption to insure complete privacy and security of your data," but what good is that encryption when they don't bother to protect the customer's account?  It's the same thing we were talking about earlier.  They clearly have awful security practices, and I'm still not sure they even understand the initial problem I brought to their attention.  At least now all Security Now! listeners will know what's going on with this worrisome PC backup solution company.  Thanks for allowing me to vent.  So that's Tali Sherman-Hall saying this about Digital Lifeboat.



STEVE:  Isn't that something?  So if Tali is right, and from everything she said it sure sounds like it is, this particular backup solution company doesn't have an email verification loop.  So when you set up an account with them, a typo in your email address goes unnoticed by the person setting up the account or them.  And of course, as we know, email is sort of the one common denominator that all Internet users have.  And we're assumed that we have exclusive access to our own email account.  So that's used as sort of a universal password recovery, prove-that-you-are-who-you-say-you-are solution.



So in this instance, what Tali is having is the person who set up the account had a typo.  Who knows what his email address is that could have been wrong.  So that the company believes Tali is this other guy.  And thanks to the fact that email control is so important, she has control over this person's, unwitting and undesired control over this person's backup solution.  So anyway, I thought this was a great little case study in the importance of setting things up right when you do PC backup.



TOM:  256-bit AES encryption doesn't mean anything in that case.



STEVE:  Exactly.  The weakest link again.



TOM:  It's that plastic straw that got you.  It does sound like they actually had a two-factor authentication system, and it sounds like they at least have the idea of what should be done.  They just had it off.



STEVE:  Well, and I'm not sure actually...



TOM:  Didn't have any kind of backup.



STEVE:  Yeah, I'm not sure how their cell phone authentication being disabled factors into this because I don't know why that would have...



TOM:  Depends on how they implemented it, yeah.



STEVE:  Yeah, why that would have fixed a lack of email verification.  But certainly here's a good reason why email verification is really important.



TOM:  Absolutely.  You know, Nintendo Wii U, couple of good things about that yesterday.  One, when they asked if I wanted to be opted into a mailing list, it was not an opt-in or an opt-out.  It said, "We have a mailing list.  Opt-in, opt-out."  Forced opt situation.  Ideal for everybody.



STEVE:  Nice.



TOM:  And the second thing is they did email verification when I set up a new account.  They said we're not going to do anything with your Wii account until you go to your email, and we make sure that that's really you.  So, good...



STEVE:  Yeah, and then you click a link that verifies that you have control of that, yup.



TOM:  Question #6 from Vincent in Pittsburgh updates us about Hamachi's private network IP allocation.  He writes:  Steve, I thought this was interesting.  Hamachi must have retired their use of the 5.0.0.0/8 IP allocation.  I recently deployed a new Hamachi installation, and it grabbed an IP from 25.0.0.0/8, which is IP space registered to Great Britain's Ministry of Defence.  I guess they assume most users would have no legitimate reason for accessing this IP space.  Thanks.



STEVE:  Okay.  So this bears on a number of things from different directions that we've talked about in the past.  First of all, we discovered, our podcast listeners discovered Hamachi in its infancy, and people just went wild.  And in fact it wasn't very well known at the time, and this podcast is probably responsible for putting it on the map.  We've had a great dialogue with the original designer of Hamachi.  And so it's been a resource that a lot of our listeners have used.



Now, the problem was that Hamachi cleverly - the way Hamachi works is, when you installed the client in different machines, it was using the 5-dot network which was a chunk of IP space, Internet allocation space that had never been allocated.  It was dark.  But it wasn't dead.  It was just not used yet.  So we have private networks.  Everyone is used to, who uses a little home router, will see 192.168.something.something, typically .0.something or 1.something.  So the 192.168 is formally reserved for private networking.  Then the larger one, of course, the biggest one, is the 10-dot network, which is formally reserved for private networking.  Five wasn't reserved; it just wasn't used.



But as the Internet, as we've discussed recently, famously began to run out of IPv4 space, the 5-dot network got allocated.  So the idea was that Hamachi was very cleverly, five years ago or more, using the 5-dot network because it was, A, not in use publicly, meaning that there was never an IP address of 5-dot anything out in the world.  Nor was it a private network, that is, it wasn't 192.168 or 10-dot anything.  So the idea was it could safely coexist in your system.  It wouldn't be public.  There would never be a chance of it colliding with a public IP.  But neither was it private.  It couldn't collide with a 10-dot IP or a 192.168.  It was, like, just completely off on its own.  Until we began to run out of IP space, at which time the central authority said, okay, we're going to start chopping up the No. 5 space.



Well, that immediately raised a question, uh-oh, what's Hamachi going to do, because they couldn't keep using five any longer.  Five-dot addresses started to appear out on the Internet, and that would be a problem.  So then, in another related issue, there's this bizarre 25-dot space which we have talked about on this podcast in the past because this entire huge chunk of space, this is 16 million IPs, every IP beginning with 25.  So from 25.0.0.0 to 25.255.255.25, technically 254, that entire block, huge block, was originally given, back when, oh, my god, we'll never run out of IPs, back in the old days to Great Britain's Ministry of Defence.



And get this.  It just uses it like a private network.  That is, it isn't routed publicly.  It uses it just like a 10-dot network for its own internal communications.  Meaning that in the same way that 5-dot used to be non-publicly routed because it had never been allocated, 25 is not publicly routed because the Great Britain Ministry of Defence owns it and doesn't have machines on the public Internet.  They just use it for talking to each other privately.  But it's not a 10-dot, which is really what they should be using.



So anyway, this is clever.  This is Hamachi figuring out, or now it's LogMeIn because they're the people who purchased Hamachi, they figured out another Class A block of IP space that wasn't publicly routed, wasn't subject to being allocated because apparently the Ministry of Defence is not in any hurry to give up their 25-dot allocation of 16 million IPs, and it's sort of an interesting compromise.  Now, apparently this switchover did cause people problems.  People who were using Hamachi who weren't dynamically allocating the Hamachi IP, suddenly all of the 5s turned into 25s, and so people have scrambled around because their Hamachi links broke.



TOM:  And they had to go manually change them?



STEVE:  Right.  Also Hamachi does support already IPv6, and Hamachi has their own IPv6 allocation that can never be taken away from them.  So all of this 5-to-25 switchover is just for the sake of maintaining compatibility with IPv4 addresses for those people who need that.  But right now OSes have IPv6 stacks and have had those protocol stacks for a number of years.  So you probably can just go ahead and switch over to using IPv6 and disable IPv4 completely.  But this was an interesting hack.  And as long as the Ministry of Defence holds onto their 25-dot allocation and does not route it publicly, I don't see any problem.



TOM:  Does this mean, though, that you can't use Hamachi if you're inside the Ministry of Defence's network?



STEVE:  That's correct.  And in fact, in their blog posting, LogMeIn said we do not have a single customer of Hamachi in Great Britain's Ministry of Defence.  That would cause a problem.  But not only isn't it a problem now, but as you said, that would cause a problem; and so nobody in Great Britain's Ministry of Defence will be able to use Hamachi and a 25-dot address because it would foul up their network.



TOM:  This makes me wonder if - CNET was, like, notoriously against allowing LogMeIn on their internal network.  I had to get special permission.  The IT guy had to whitelist the exact Ethernet port I was going to use when I went live and wanted to show LogMeIn.  And I wonder if they weren't using 5-dot internally for something, now that I've been thinking about it.  I'd never thought about that before.  But it sounds like we need to go from MI6 to MIPv6.



STEVE:  There we go.



TOM:  Question #7, Robin's kids in the U.K. must have Java.  Why is that?  My kid's laptop has just spectacularly failed MS Offline Defender with a dozen or more Java exploits.  Java?  Why is he allowing them Java, I hear you cry?  Well, Minecraft.  If they didn't have Minecraft, then life would be unbearable (for all of us).  I have allowed MS Offline Defender to clean the PC, and I'm just rescanning it.  Last time I restored a clean image, but there seems little point in doing this again as it will only get infected again.  So my questions are, should I trust it if it comes up clean?  What can I do to reduce the chances of it happening again?  And should I remove Java and buy iPads for all three of my kids in the hope that this is immune to infection?  And there's a Minecraft app for iPad.  He says:  Thanks for the invaluable resource and a tip of the hat to Leo for his impressive knowledge of the world and culture outside the USA, a major part of the reason that Security Now! is an international giant.



STEVE:  Okay.  So if you have to have Java, and, for example, your kids need it for, like, one purpose, to run Minecraft, I did see in the mailbag this week somebody who was promoting the idea of using Sandboxie to sandbox Java.  And the problem is I don't think that's probably secure enough.  Sandboxie essentially filters the API, the application programming interface calls between applications and the operating system to prevent them from writing files to the OS and so forth.  But the nature of Java exploits allows the user's own code to run in the app.  And I just - to me it feels like maybe Sandboxie isn't enough isolation to really give you security.



A great solution for Robin's kids and the Robin household would be to use a true virtual machine.  Free virtual machine technology exists now, so that won't cost anything.  And the idea would be all you have to do is train the kids to launch the VM; and, in that, nothing is installed except Java.  I mean, you could put other things in there if you wanted to, but you probably don't want to have too huge a virtual hard drive established.  So just put Java in the VM.  Then the external system won't have it.  You won't have to worry about it getting infected.  And then you just have a contained environment, a virtual machine that shouldn't cost anything, that's got Java installed, and that's where you play Minecraft.  And I think that's probably a robust enough solution.



TOM:  Now, Chad Johnson, who hosts our Minecraft show, or his own Minecraft show, it's not even ours, and obviously was interested in the answer to this question, came running over and says, "Well, if I just disable Java in the browsers, is that not enough?"



STEVE:  I really think it probably is.  And that's what I would - the way I've got - there are a couple things that I'm using Java for.  And I have my browsers set up so that they will not run Java by default.  So, yes, just disabling it in the browser, and we've discussed exactly this point before, I thought I would explore a little more of a containment solution.  But, yeah, as long as your browser won't launch it.  That's where the exploits are is from going to a page that invokes Java and takes advantage of unpatched problems.  And clearly, if it had a dozen or more exploits in the case of Robin's kid's laptop, then that had happened in the past.



TOM:  So Box.net, Ubuntu, or Mint, and Minecraft for Linux, you're golden.  All free.



STEVE:  Yeah, nice.



TOM:  Nice.  All right.  Question #8, and leading us apparently into next week's cool topic, we have Craig Lewis in Wales of the United Kingdom asking:  DTLS?  What is it?  Hi, Steve.  I've been a long-time listener, from the very start.  I've emailed before a few times.  I've just run Windows Update, even though it isn't the second Tuesday yet, and there's an optional update.  It adds support for something called "Datagram Transport Layer Security" in Windows 7.  What exactly is it?  Something to do with SSL?  I wonder if this is something new and worth adding to  Windows?  Microsoft, as always, are very vague in their help and describing things.  Maybe it warrants a topic?  I have no idea.  Thanks for your time, and all the best.  Thanks to you and Leo for years of what is a great and well-valued show.  Craig in Wales.  P.S.:  SpinRite is pure genius; and, yes, I have purchased it.



STEVE:  Well, that's a great question.  And I think it's a great topic for a show.  So next week we will talk about DTLS, which essentially is transport layer security for UDP datagrams rather than TCP connections.  And it was designed specifically to be a very secure but more lightweight solution.  It looks like it's going to take hold.  So that'll be what we talk about next week.



TOM:  What's an example of somebody who would use this?



STEVE:  Well, for example, DNS is famously very lightweight, but very insecure, inasmuch as, even though you may have SSL connections for your data, your browser's queries to a DNS server are in the clear.  There is no encryption for DNS.  And of course we've talked about DNSCurve, which adds encryption to DNS.  OpenDNS has a secure DNS.  But using something like Datagram Transport Layer Security, DTLS, would sort of give you the best of both worlds.  You'd be able to use a low-level, lightweight standard where you don't have to establish a connection first, yet still get privacy protection of the data passing in both directions, and the other advantages that SSL brings, like authentication.



TOM:  Right.  Best of both worlds.  I can't wait to hear more about it next week.



STEVE:  Next week.



TOM:  Leo will be back then.  Steve, it's been great doing these shows with you the past three weeks.  Thanks for letting me fill in.



STEVE:  Has been.  And it's been a pleasure for me, too.  I'm glad we were able to continue cruising forward, even when His Nibs is off...



TOM:  Cruising the ocean.



STEVE:  ...cruising in Australia.



TOM:  Yeah, exactly.  GRC.com, of course, the place to go.  Any new things people can look for?  Anything you want to point them to in particular this week?



STEVE:  Just our regular, you know, remember GRC.com/feedback allows you to send stuff like we were just reading.  And otherwise I've got some stuff in the pipeline that I'll be talking about.



TOM:  All right.  We'll keep an ear out, keep an eye out, and keep listening.  Security Now! of course on TWiT.tv/sn.  It's live on Wednesdays.  11:00 a.m. Pacific is when they start to settle down in the chairs and talk some security.  Like I said, Leo Laporte will be back next week.  I'm Tom Merritt.  See you later, folks.



STEVE:  Thanks, Tom.



Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#380	

DATE:		November 28, 2012

TITLE:		DTLS - Datagram Transport Layer Security

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-380.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with lots of interesting security news, updates on Steve's Acoustic Dog Training project, and lots of other miscellany, Steve and Leo examine a recently developed and increasingly popular Internet security protocol, DTLS, which combines the advantages of UDP with SSL security.



SHOW TEASE:  It's time for Security Now!.  I'm back, baby.  So is Steve Gibson.  We're going to talk about a new, well, not that new, but an interesting encryption and security protocol for the web, DTLS, in just a little bit.  All the security news, too.  It's all next on Security Now!.



LEO LAPORTE:  It's time for Security Now! with Steve Gibson, Episode 380, recorded November 28th, 2012:  Datagram Transport Layer Security.



It's time for Security Now!, the show that protects you and your privacy online, with our Explainer in Chief, he's here right now, Mr. Steve Gibson, the man - that's him.  "That's me," he says.



STEVE GIBSON:  Welcome back from Australia, Leo.



LEO:  Well, thank you.  I've missed you.  I really did.



STEVE:  Likewise.  Only Tom, I have to say...



LEO:  This morning I was thinking, oh, goody, it's Security Now!.  I get to see Steve.



STEVE:  Oh, goody.  I've got to wake up and take a shower and get my butt in to work, yeah.



LEO:  No, I was excited.  But I do thank - go ahead.



STEVE:  You've already been here.  You've already been back for a week.  You just barely missed being able to do it.



LEO:  Oh, yeah.  I've been back for a week.  I'm acclimated.  But I got back, yeah, later on Wednesday.  And I decided to just skip Wednesday because of jet lag and so forth.



STEVE:  I was going to say, that time zone switchover is like that, I know.



LEO:  You know, it was much better than it had been before.  The last time I went to Australia, a couple years ago, was in the spring here, fall there.  And that's the maximum difference because we are in summertime and they are in wintertime.  And this is the minimum difference.  It's only - we're only five hours earlier than Sydney.  So it's not, I mean, Sydney's only five hours earlier than us.  So, for instance, right now it's 5:18 a.m. in Sydney.  Five hours is not - that doesn't phase me.  Twelve hours phases me.



STEVE:  Yeah.



LEO:  Five hours I can handle.  So I'm fine, you know, I'm good.  I was waking up a little early, going to bed a little early, that's about it.  Or, I'm sorry, waking up a little late.  So you today are going to be talking about the Datagram Transport Layer Security, whatever the heck that is.



STEVE:  Well, the last question that we entertained last week was from a listener who said, hey, I just got the option under optional upgrades on Windows 7 to install something called DTLS, Datagram Transport Layer Security.  Should I do that or not?  What is that?  And I thought, well, that's a perfect topic for next week.  So we...



LEO:  Do that, do that.



STEVE:  Basically that's how I answered the question, and now we'll do a full episode to talk about it.  Turns out it is very cool.  It's been well done, implemented just right by people who knew what they were doing.  It's had a couple RFCs.  It's made its way into the security packages, so it's real.  And you know if Windows, Microsoft are saying, oh, let's add this to the OS, then it's made some sort of cut.  I mean, Microsoft must have some plans for it, for some reason.  And so we're going to talk all about what that is.  There's all kinds of news and paraphernalia and updates and miscellanea and fun stuff.  So I think we've got a great podcast for your return to Security Now!, Leo.



LEO:  Thank you.  And by the way, hearty thanks to Tom Merritt, who made my trip possible.  Everybody pitched in here, you know, Sarah and Tom and Iyaz and everybody.  But Tom took three Security Nows.  So that was quite a few.  Thank you, Tom.



STEVE:  It was very comfortable.  And what are his moving plans?  Is he moving down at the beginning of the year, or some time next year?



LEO:  Yeah, I think what he told us, you know, Eileen, his wife, my former producer, got a great job as a senior producer for YouTube in L.A.



STEVE:  Wow, neat.



LEO:  So I think she's already started.  I think she's moved down there.



STEVE:  I think he said that last week, yeah.



LEO:  And so he is going to wrap things up here.  They've got a house and so forth.  And I think he plans to be down there early next year.  But we're going to, I mean, we'll figure this out.  He probably won't be able to fill in for me on Security Now! anymore, but I think he's still going to be able to do TNT and all of that stuff.



STEVE:  Good.



LEO:  We're hoping, anyway, because it's his show.  I can't - no one else can do TNT.  So, yeah.  So anyway, thank you, Tom, for doing that.  But I'm glad to be back.  I missed - some shows I missed more than others.  But I missed this show a lot.  I'm sorry.  Didn't mean to distract.  Steve Gibson, let's start with the security news.  I know there's something.



STEVE:  So we got, yeah, a number of things, sort of observations, and a few events.  Brian Krebs had an interesting note on his site that I just thought was sort of interesting as some background about what's going on.  And that's one of the things that Brian really does well, is he's, like, I guess he's infiltrated, would be the right word, many of the hacker underground where he keeps an understandably low profile.  But it allows him to have a finger on the pulse of what's going on in that world, which, unless you really made an effort to be part of that community, it wouldn't be easy to have.  He picked up, essentially, an ad from a hacker who was offering a new zero-day flaw.  Yes, a new zero-day flaw, which actually sounds redundant.  And I was wondering, why did I write the word "new"?  It's because it's a new...



LEO:  And there've been many before this.



STEVE:  Well, it's because it's a newly introduced flaw that doesn't exist in earlier versions of Java, meaning that they just created this flaw...



LEO:  Oh, lord.



STEVE:  ...in the most - I know - in the most recent update.  So, and the hacker is expecting to get a five-figure sum.  Brian wrote, "According to the" - I love this.  He used the word "vendor."  This is a zero-day vendor.  He said, "According to the vendor, the weakness resides within the Java class Midi" - as in, you know, M-I-D-I, music - "MidiDevice.Info, a component of Java that handled audio input and output.  'Code execution is very reliable.'"  This is the hacker speaking.  "'Code execution is very reliable, worked on all 7 version I tested with Firefox and MSIE on Windows 7.'"  So he meant Java v7, which is the current one.  And Brian says, "...the seller explained in a sales thread on his exploit."  It's not clear whether Chrome also is affected.  He said the hacker said, "I will only sell this one time, and I leave no guarantee that it will not be patched, so use it quickly."



LEO:  Oh, wow.



STEVE:  And Brian said, "The seller was not terribly specific on the price he is asking for this exploit, but set the expected offer at, quote, 'five digits,' unquote.  The price of any exploit is ultimately whatever the market will bear, but this is roughly in line with the last Java zero-day exploit that was being traded and sold on the underground.  In August, I wrote about a newly discovered Java exploit being folded into the Blackhole exploit kit, quoting the author of that crimeware tool as saying that, quote, 'the price of such an exploit, if it were sold privately, would be about $100,000.'"



LEO:  Hmm.  Wow.  That's six figures.



STEVE:  So think about it.  There are entities on the 'Net that have a use for vulnerabilities such that it will generate a profit if they pay $100,000 for this knowledge.  So there's the question of how quickly the window will be closed, how quickly it'll be discovered, how quickly it'll be patched, how quickly it will no longer be useful.  But obviously they're not going to buy it if they're not going to make money.  So, I mean, it gives you some sense for the economy which is now operating on the Internet in this world, where Java, as Oracle keeps bragging about three billion devices have it, but many of them that are being - here in this case, this is the most recently updated patched versions have this problem.



Now, I just tweeted another nice piece that Brian put together titled "How to unplug Java from your browser."  If you just put that phrase into Google, "How to unplug Java from the browser," actually, that'll take you right to his blog posting.  Or you can just go to Twitter.com/SGgrc, my Twitter stream, and you'll find the link that I tweeted because he does go through what we've talked about before, sort of an oh, yes, yeah, just go do this, specifically for all the various browsers.  And a couple people tweeted back saying, well, that must not be very recent because Brian refers to the wrench icon on Chrome, and apparently Chrome has now changed it to the more standard three lines to represent a menu.  And I'm thinking, well, okay.  But Chrome is about as dynamic as anything has ever been, and last time I looked at Chrome it had a wrench.  So I presume if I open it up today it'll have three lines.  But that was only a few days ago that I saw the wrench.  So it doesn't mean that this is old information, it's just that Chrome is ridiculously fluid.



LEO:  One of the things that's kind of interesting about this is how hard it is to take Java out of Internet Explorer.



STEVE:  I know.



LEO:  It actually doesn't need an article for most browsers.  But for IE, there's registry keys.



STEVE:  Most of the posting is, like, 90 percent is getting it out of IE.  And of course the takeaway is just get yourself out of IE.



LEO:  Yeah, no kidding.



STEVE:  Don't use it.



LEO:  Although there's a good article, I just read an article by our friend Peter Bright, who's a Windows expert, writes for Ars Technica, about Mozilla and why they've abandoned the 64-bit version for Windows, and they're sticking with 32-bit, and there's real security flaws with that, including an inability to do good ASLR.  And it was just - it was very interesting.  It really sounds like the most secure browser in Windows, frankly, is Internet Explorer 10, if you're a Windows 8 user.  So it's a mix; right?  It'd be nice to be able to just check a box, as you can in Safari and Chrome and Firefox, that says disable, you know, don't enable Java.  But on the other hand there's other security benefits to IE.  So...



STEVE:  Yeah.  Microsoft is moving forward.  I mean, I'm happy with the changes that they're making.  The podcast two weeks ago, that is, the non-Q&A podcast that I did with Tom, we covered in detail a keynote offered by an executive VP of Microsoft explaining the nature of the browser and privacy ecosystem and why it was that they chose to turn the Do Not Track on by default.



LEO:  Oh, how interesting.  I want to listen to that one, yeah.



STEVE:  So it was an interesting take.  And the bottom line, if you want to really shorten it, it's they asked people, and three quarters of their customers said yes, I want that on by default.  And so Microsoft said okay.



I ran across an interesting CAPTCHA.  CAPTCHAs are always - we talk about it whenever something comes along that seems fun.  This one is a JavaScript jigsaw puzzle.  It's called a "Key CAPTCHA," so KeyCAPTCHA.com.  Now, the problem is, even tweeting it, as I did to put the link out there so that people could grab the link from my Twitter feed, brought the site down an hour or two ago.



LEO:  Oh, dear.



STEVE:  So it's gone right now because I just said it for our live audience, who all tried to go there.  And even this morning, when I was playing with it, it was dog slow.  So Lord knows what they're running it on.  But for anyone to take this seriously, they're going to have to get a stronger site.  But it's kind of a cool idea.  It shows you a picture with some chunks missing, and then a little graphic of what it's supposed to look like, and the pieces over on the upper left.  And your job is to drag - is to, like, recognize how the diagram should look when it's complete.  And then there's a demo...



LEO:  It's kind of hard to do, actually.  It wasn't easy.



STEVE:  Yeah, yeah.  And then drag the pieces over to fill in the diagram.  So I was like, okay, well, there's yet another CAPTCHA.  Prove that you are not a bot.



LEO:  Yeah.  I'm sure somebody could do this algorithmically.  But the point really should be made that most of the time what people now do is just copy this CAPTCHA to a porn site and get humans to do it.  If they really wanted to get in.



STEVE:  Right.  Well, and I would argue that the more different kinds of CAPTCHAs there are, the better, because this is one area where, if everyone used the same one, then it would make much more sense - it's very much like if we were all using only one OS, that would be less secure than if everyone wrote their own because then none of them would be identical.  And it's the fact that so many people are using Java, for example, that creates the problem that Java introduces.  Otherwise people would have to start from scratch on every single machine they wanted to infect.  But that's not the way the world works.  Still, the more CAPTCHAs we have, the better.



Now, Kaspersky has a very nice five-minute video about securing Facebook.  I also sent the link, I put the link in my Twitter feed, so anyone can go to Twitter.com/SGgrc to find it.  Or, again, you can Google "how video securing Facebook" is the text in the blog.  That'll probably bring you to it.  It's the kind of thing that our listeners ought to watch, but mostly just to preview it before sending it to everyone they know who uses  Facebook.  It's a little high end, that is, it's only five minutes, so it goes through a lot.  But it is really, really good how-to for the settings you can change in Facebook to lock it down, for example, to require a higher level of authentication if you ever log in from a machine you haven't before; how to set up a text loop to your phone; and turning on secure.



One of the bits of news that you missed, Leo, is that Facebook is now rolling out HTTPS by default globally.  They're doing the U.S. first and then worldwide.  So first they gave us a setting we could turn on for that.  Soon it will just be on by default.  So that's a really good move forward.  But this has lots of - because it's a video, it's pretty easy to follow.  Someone could stop it and, like, follow along with it, and of course backspace to watch it again.  But I would like to commend it to our listeners to send to their Facebook friends who think they might be able to take advantage of some better security.  It's a nice little five minutes.



LEO:  I'm watching it right now.  Problem is it changes from minute to minute.  So Brian Donohue, who did this for  Threatpost on Kaspersky, will have to redo it every five minutes.



STEVE:  Yeah, you're right.  There are details.  For example, he mentions there when he's talking about turning on HTTPS security, he says, "Soon this is supposed to be on by default."



LEO:  Right, right.



STEVE:  Well, that's now the case.  Still, I think lots of good tips are in there.  The other thing that I saw that caught my attention was just the problems with SCADA, S-C-A-D-A, which is the acronym for Supervisory Control and Data Acquisition.  You and I talked about, on the last podcast we did together before your trip, we were bemoaning that, like, nuclear reactors were, like, connected to the Internet,, and what a horrible problem that was.  That prompted one of our listeners, who works for a company that have solved that problem, to tell us about it.  And so Tom read that.  Might have just been last week.  It was really interesting.  They had what they called a DualDiode is their term for this.



The idea is they have two machines, one inside the security perimeter, one outside.  They're connected only by a fiber optic cable, and the interface on the protected one can only transmit.  It only has a fiber optic emitter.  There is no receiver.  And similarly, the one on the outside can only receive.  It's unable to transmit.  So that the hardware itself is only one direction.  There's no way to send data in the other direction over that link.  So I thought that was interesting.



But we've often talked about how, fundamentally, how difficult security is; and that, unless it's always been written from the beginning to be secure, coming back and looking at it from a security standpoint retroactively is almost guaranteed to be a disaster.  And I saw several places in the last week were comments about the problems with SCADA.  And once again, this is something that has been in place for a long time, and it really wasn't until the Stuxnet worm event that people realized, whoa, you can do bad things with this.



And so Kaspersky picked up on the story and wrote:  "It's open season on SCADA software right now.  Last week, researchers at ReVuln, an Italian security firm, released a video showing off a number of zero-day vulnerabilities in SCADA applications from manufacturers such as Siemens, GE, Schneider Electric, and others.  And now a researcher at Exodus Intelligence says he's discovered more than 20 flaws in SCADA packages from the same vendors and other manufacturers, after just a few hours' work."



So this is the problem is that all of this software was written sort of pre-security concern.  Much of it was written before networking happened.  And in the same way that Windows got stuck on the Internet when it was not secure, and we all know how well that turned out, similarly, this SCADA software has been, you know, it's like, oh, well, wouldn't it be nice if we hooked this up to a network.  And it's like, no, it wouldn't, because it'll never be secure.  And so what's happening is software that was written when network security wasn't even on anyone's radar is now being examined, and it's just being found to be Swiss cheese of security.  So I am glad that there are solutions like hardware-enforced optical one-way connections between secure systems and insecure systems, as one means of allowing monitoring of a facility, but no reverse direction control for the sake of security.  It's like, whoa, I mean, we do, we need something in order to keep these things safe.



And I also, just for the sake of people who tweeted this and were wondering about it, GoDaddy has had more problems.  They reported, I think it was either yesterday or today, they acknowledged some strange problems that people were having who were getting infected by malware when they were visiting the websites of GoDaddy's customers.  So it took a while to figure out what had gone on.  What it was, was that GoDaddy's customers were spear phished.  Using what they know of GoDaddy, some spear phishers pretending to be GoDaddy management phished those customers.  Those customers, as a consequence, got their accounts hijacked.



Those accounts then allowed the hijackers to modify the DNS records that GoDaddy was hosting for them, which meant that people, unwitting regular visitors who visited the sites of those GoDaddy customers, were redirected to servers that were hosting the Cool Exploit Kit, which was dropping the Reveton ransomware onto their machines.  So here's another instance where running with your shields up, running with NoScript on, blocking scripting by default is just really the only way you can fly if you want to poke around.  Or maybe wrap yourself up in a virtual machine so that you're in an environment that you don't care about if it gets infected.  You really do need some sort of protection because this stuff is out there.  And so GoDaddy is apologizing and saying that they're changing the passwords on the accounts that have been hijacked and restoring the records the way they were before.  It's like, okay, well, good.



And I saw another little note that ties into this.  Symantec did a study where they were wondering, again, sort of like, what's the economic incentive here?  Turns out that this ransomware, which is sort of one of the newer phenomena of malware that we're seeing, is netting its authors as much as, in Symantec's computations, about $33,000 a day.  So again...



LEO:  I'm not sure that they should publicize this.  That's kind of like, hmm.



STEVE:  I think, boy, that's more than I'm making on SpinRite.



LEO:  Maybe I should do that.  Hmm.



STEVE:  Whoa, yeah.  So there's definitely some incentive for the bad guys to find zero-day exploits, to spear phish.  I mean, and the overall thing we see is that we now understand, our systems have gotten so complicated, that security is not black and white.  You could argue that in the same way that no software is bug-free, no really complex software is bug-free, similarly, no really complex system has perfect security.  And we keep seeing people being able to pry up the corners and find little glitches and weak spots and so forth.  And so if there's strong economic motive behind doing that, people will be incented to do it and leverage it in every way that they can.  So, yikes.



LEO:  Yikes.



STEVE:  Now, a couple weeks ago I promised my analysis of CloudBerry.  CloudBerry is sort of the alternative cloud storage, CloudBerry Backup, which now supports the Amazon Glacier storage, which is so cost effective for any instance where you just want to stuff things up into the cloud, and you don't need real-time immediate access to it, which is the case for most backup.  There wasn't - we already have a solution for the Mac that we've talked about.  We didn't have one for Windows-based machines.  I got in contact with the CloudBerry guys and got email back from their crypto guy and had a chance to look at it.



Now, there's one thing they didn't specify that I have asked about and have not yet received an answer.  Everything else, though, they did right.  And the question I have, and it's not crucial, but I wouldn't - and so I wouldn't be surprised if they did it right.  But the bottom line is, from everything I've seen, they did everything right.  They have a suite of ciphers that the user can choose among:  AES, 3DES, single DES, or RC2.  Now - so just choose AES.  I'm not sure why anyone - I guess maybe export reasons, or if there was some reason you had to soften it, then you might just use, I mean, no.  No one wants to use one DES.  Maybe triple.  But so you have a choice of ciphers.



Every single file or portion of a file, if you use the block level option, gets its own initialization vector.  Now, that's important because remember that the way you encrypt a block of data is not just to encipher each block, each cipher size, like 128 bits for AES, by itself.  If you did that, then any time you enciphered the same 128 bits, you get the same cipher out, and so patterns could be seen.  So they solved this problem with something called a "cryptographic mode" where you chain these together.  And we'll actually be talking about this a little bit later with regard to the DTLS protocol because this comes into play there.



But similarly, if you're going to encrypt multiple blocks with the same key, then the problem is, if you encrypt the same data, you'll get the same result in terms of the whole block.  So to solve that problem we use a so-called initialization vector, which can be provided.  It doesn't have to be kept secret.  It just has to be pseudorandomly derived and different.  So they do that correctly.



They also use - they take the user's provided password, which never leaves the user's machine.  And so what I haven't used yet is the acronym, TNO.  And they pass.  This is fully TNO safe.  Trust No One.  So they take the user's password.  They run it through a thousand iterations of an HMAC SHA-1 hash in order to slow down the process of turning the password into the hash.  And they use an 8-byte random salt per file.  So every file which is hashed under the same password ends up with a different and unique encryption key because it starts with a random salt, which is mixed in with the password key derivation function.  So that was done correct.  And then with every file they store the algorithm that was used, the encryption mode that was used, the length of the key that was chosen, which also by the way is user settable and configurable, the initialization vector, and then the password-based key derivation function used, and the iteration count, and the salt.



So, I mean, this is everything you want in what should be done before the data leaves your machine so that everything that's being stored in the cloud is just irreversible pseudorandom noise to any authority and any entity, bad guys, good guys, anything looking at it.  And the only way to make sense of it is to bring it back as it is and then do the reverse process that you did on your machine.



So I've not switched to it, but I think I'm about to.  So I will give a little more of a user-interface features sort of look once I've had a chance to do that.  But a number of people have been saying that their 15-day evaluation period, or whatever the evaluation period is, is running out, and what should they do?  And my advice is this looks like the real deal.  I think these guys did it right.



The one thing that I mentioned they didn't talk about is something which we're beginning to understand in the security crypto industry is more important than we originally thought.  And that is the idea of a message authentication code, or so-called MAC.  The idea is that you want to prevent tampering.  And so it's one thing to have privacy, but you also want to know that what you get back is exactly what you originally stored.  And based on everything I've said so far, somebody could tamper with the data.



Now, it'd be very difficult for them to do anything useful in terms of tampering.  But you would like to know when it comes back that it's exactly what it was that you sent.  And that requires message authentication to sort of wrap this entire thing.  And that's one thing they didn't mention when they gave me their technical readout, but neither did they say they don't have it.  So I sent back a note saying, hey, what about that?  And maybe they don't, which is not a huge problem, but I imagine that it's something that they ought to add if they haven't.  So I'll update our listeners as soon as I know.  But I'm impressed with it.  I think they did a good job.



LEO:  Neat.



STEVE:  For what it's worth, I just thought I would - I tweeted this a few days ago when I saw it, but I thought I'd let all of our listeners know.  People are always asking about the blinky lights running behind me.



LEO:  Yeah.  Every five days, every five episodes we should explain what those are.



STEVE:  And those are our PDP-8 mini computer replicas, which I built from a kit, very nicely done, using a chip that was produced by Harris Semiconductor, I don't know, back in the '80s.  It is a silicon version of - that is, it's a single-chip PDP-8 mini computer.  I talk about the PDP-8 on my site.  It's under one of the menus somewhere, under probably Miscellaneous, or GRC.com/pdp-8 will get you there.  The PDP-8 had a very minimal instruction set.  It was a 12-bit mini computer.  Anyway, it's sort of a blast from the past.  The point is there is one of these on sale from somebody who knows me because he has a video of it running my blinking lights program, which is what those things are running behind me.



LEO:  You don't know who it is?



STEVE:  His name was familiar from - there was a forum that we were all participating in a few years ago.



LEO:  Right, right.



STEVE:  But I posted the link on my Twitter feed, and the link is here in the show notes.  You can probably search SBC6120.  SBC is Single Board Computer.  6120 was the number of the chip which was used.  Currently there's only been one bidder.  The price is $399, which was probably the starting price - well, it would have been the starting price - and the auction has four days to go.  It closes in the late morning Pacific time, at 11:35 in the morning this coming Sunday, December 2nd.  So I know that at the time there was a huge demand for these.  People were always upset because the kit's not continuously available.  The whole thing was prepaid.  The kits were built in batches, and then people would come along later and say, hey, I want one.  It's like, well, sorry.



LEO:  Right.  Too late.



STEVE:  Not available anymore.  So there is a working one with all the bells and whistles.  It's got battery backed-up RAM and virtual disk drives and the OS/8 operating system that was the operating system for the PDP-8.  You can compile...



LEO:  Is that open source or public domain now?



STEVE:  It went from DEC to Compaq to HP.  And so it's sort of got a muddled past.  There is a software version, a software emulation of the PDP-8, where DEC apparently, DEC or one of the derivative chained owners, did allow the operating system to be put into the public domain for hobby use.  And then I think when Compaq had it, there was a hobby use exclusion.  So people can certainly use it without feeling any concern.



LEO:  Cool.



STEVE:  Now, also when you were gone, Leo, I had at one point, on one of our podcasts, mounted on a tripod behind me, an experimental, one-of-a-kind, return of the infamous Portable Dog Killer.



LEO:  [Laughing] You mentioned you were working on this.



STEVE:  Well, what happened was, the way my life works is I sort of run based on demand.  And it was last summer that I was lounging with my best friend, who has owned a home in Aliso Viejo for three years.  We were on the patio, sipping on some Cabernet, and this dog next door was just yapping nonstop.  And so, oh, and, I mean, it just - it ruined the afternoon.  It was difficult to talk.  It wasn't like a yap or two.  It was just yap yap yap yap yap yap.  And that's why I then said, okay, we've got to deal with this.  Now, Mark has tried to talk to the owner.  She's a nice lady.  She's a pilot for American Airlines, so she's gone a lot.  Her child has a babysitter.  Apparently she, like, leaves the house with the dog in the back, and it just yaps up a storm.  I mean, and so if Mark complains, the problem is solved for a while, and then they forget.  So anyway...



LEO:  We should explain, for those who don't know, this is a nonlethal, despite its name, a nonlethal solution.



STEVE:  Yes.  It was named when I was 15.  And I thought it was kind of a fun name.



LEO:  Seemed like a good idea.



STEVE:  Never killed anything.  But it was designed originally, a variation on this was designed to tame a virtually rabid dog in the neighborhood that was attacking people through a fence and causing all kinds of havoc.  So we have an episode which we've aired twice which is probably the No. 1 favorite episode of all time, called The Portable Dog Killer, where we explain what all this is.  Last summer I launched a Google Group and started in on the design of a development platform for looking at this.  But then the problem went away.  I don't remember what it was.  They, like, apologized, or the next-door neighbor got a new boyfriend or something, I don't know what it was, but it just stopped being a problem.  And so it's like, okay, well, boy, if I don't - and then there was also the problem of the blackbirds or crows that were incredibly loud.



LEO:  Oh, those things are so annoying, yeah.



STEVE:  And there was a tree - I was sitting out on the patio at Starbucks in the mornings.  And at one point this tree would just be blackened with crows, all competing to see who could be louder than the other.  And it was crazy. So I thought, okay.  I remembered, of course, as we know from the adventure of the Portable Dog Killer when I was 15, that birds are affected by this also.  So I thought, if I could just sweep the trees free, just tell the crows, give the crows the idea, because they're smart birds, to go choose some other tree, further away from Starbucks.  But then that problem went away, too.  So I sort of lost steam on the project.  But it wasn't before many people registered their needs for this product or a solution to this problem, too.  So the pictures that I showed, you have links to them, you can put them up.  I also tweeted them, and it's not far back in my Twitter stream, if people haven't seen it.



LEO:  Okay.  This is the speaker system.  It's on a tripod.  Is that four tweeters?  What is...



STEVE:  It's four piezo tweeters.  They're very efficient.



LEO:  Because you're doing a high-frequency sound here.  This is not human audible; right?



STEVE:  Well, barely.  While I was working on it, I had it pitched at about 10KHz, which is audible.  And in order to stand it, I had to take the lid of that box, which mounts the four tweeters, and I put them in two laptop bags stuffed inside each other and zippered it closed.  Just, I mean, it was so loud.  And it is really loud.  Now, in Mark's setup, he's got an upstairs bedroom window that looks down into sort of the run along the side of his neighbor's house.  And the dog stands there and just yaps.  And you can see an antenna on the top.  Mark now has three remote controls.  One has a belt hook, so he can wear it if he wants to.



LEO:  This is really interesting.



STEVE:  And so when you press the button, it gives either a one-second or four-second blast.  I had it for a while where you'd press it once, and it's marked "toggle" on the front panel, you can see.  But I changed that to one second or four seconds because it turns out four seconds is a long time.  Anyway, this got its first use last Tuesday.  I dropped it off on Monday.  And he called in the afternoon...



LEO:  And he's using it on crows, not dogs.



STEVE:  No, this was this neighbor's dog.



LEO:  This is for the dog, okay.



STEVE:  The problem was back.



LEO:  Okay.



STEVE:  And I had to wait for him to stop giggling because - and I realized what this was.  This was a giggle of relief because this has been a - he owns the home.  This has been a problem off and on for three years that he's been there.  And finally he has a solution.  It's like everything he's done, pleading, imploring, I mean, what can he do?  And so many people have this problem, Leo.



Anyway, the reason he was giggling was that he gave the dog from the second floor window down to the alley along the side of the house just a short little blip, just, I mean, nothing.  And the dog jumped about three feet in the air and has never been seen since.



LEO:  I shouldn't laugh.  But it's probably not painful.  It's just shocking.



STEVE:  Oh, no, no, it just startled the dog.  It's just outside of its experience.



LEO:  It's no different really than yelling at a dog.



STEVE:  Right.  If you - yeah.  But yelling, you know, your throat gets hoarse, and it's much less high-tech and fun.  Anyway, so the problem is, in response to these pictures, a number of our listeners tweeted, well, that doesn't look like something I can go jogging with.  And the other thing is that it really is overkill.  I didn't want to do underkill.



I should also mention that I have purchased for Mark, I have said this before on the podcast, about 20 different commercial things that exist.  I mean, the problem is big enough that other people have tried to solve it.  None of them work.  And that's been the reports that I've seen in the Google groups and in feedback mail and so forth, is people have bought things, and they don't work.



Well, so I went a little overboard with this first thing.  So, I mean, it is so loud.  But so I have a new design.  And it looks like this.  And I don't have a picture of it yet to show, but people who are seeing the video can get a sense for it.  So it's just one of those piezo tweeters mounted on a nice little sort of easy-to-hold hand-size box.  I learned a lot building that first one, which is - well, okay, the first one from when I was 15, and then this latest overkill one.  I have an amplifier which is only five components.  Technically it's called a Class E amplifier.  It's a digital switching amplifier that uses two inductors and two capacitors.  But it turns 4 volts into 60 volts, peak to peak, which drives the tweeter strong and, in doing so, only consumes about 200 milliamps.  So it's easily battery powered.  Probably three AA cells will just run it.



I've chosen a frequency of 15KHz because that's pitched so high that it doesn't disturb people, but it will definitely be audible to a dog.  And remember, Leo, I'm sure you do because I know you've got good hearing, when we were growing up, televisions, you could tell when they were on even if, like, the volume was turned down.



LEO:  Yeah, there'd be a flyback transformer whine.



STEVE:  Yes.  That flyback was - that generated the horizontal sweep for the CRT.  And that was 15750, so 15750KHz.  So this sounds like that.  It's 15KHz.  So it's that same barely audible, I mean...



LEO:  Have you heard of the Mosquito?



STEVE:  No.



LEO:  This is an electronic device that is used on young people to deter loitering.



STEVE:  Oh, yup.



LEO:  And it is at 17.4KHz and 108dB and typically can only be heard by people under 25 years of age.  You have to have acute hearing.  And I know this because you can also get this Mosquito tone for your cell phone as an alert tone.  And kids are using it in class for their text alerts because the teacher can't hear it, but they can.  And we actually played with it a little bit, and it drove the younger people in our live audience crazy, and I couldn't hear a thing.



STEVE:  No kidding.



LEO:  Yeah.



STEVE:  Interesting.



LEO:  You have to have acute hearing.  And of course as you get older, the high end drops off.



STEVE:  Drops off, yes.  And there were two reasons I chose 15KHz.  One is that canine hearing also drops off as you go higher.  And of course the speaker efficiency drops off quickly.  It's rated out to 20KHz, but that isn't - it's not flat all the way out to 20, so it's beginning to drop off.



LEO:  Now, in France this was ruled illegal.



STEVE:  Really.



LEO:  And a private individual was fined 2,000 euros after operating the device outside their house.  Now, that's France.  In Belgium they've been trying to prevent it.  In the Republic of Ireland, under The Non-Fatal Offences Against the Person Act, it is illegal.  So the legality is kind of interesting.  I don't see anything in the U.S.



STEVE:  Well, and I would never suggest that this thing ever be...



LEO:  Not used on humans.



STEVE:  Well, A, not used on humans, and not ever used in more than just a very short blast.  I mean, no more than that is necessary.  I guess one of our listeners is a jogger who has something ferocious chasing him if he, like, jogs in the wrong direction.  And so he'd like to be able to use it to deter an animal from chasing him.  And I can't tell you what a problem barking is, Leo.  It's just amazing.  My mom got new neighbors up in San Mateo, and they were both a young couple working during the day.  They'd leave their dog out in the backyard, and off they would go to work.  My mom and her husband were at home, retired, reading, and this dog was just barking because it was bored.  It had nothing else to do.  It just barked.  And so, I mean, it is just such a problem for so many people.



LEO:  Now, how loud?  How many decibels? 



STEVE:  I don't - we're north of a hundred.



LEO:  Okay.  That's pretty loud.



STEVE:  I mean, it really is loud.



LEO:  This Mosquito that you leave on all the time, right, it just keeps kids away because they can't...



STEVE:  Yes, it's supposed to be an irritant for dispersing crowds, as if you were, like, spraying a foul smell in the air, that sort of thing.  I chose...



LEO:  By the way, it won an Ig Nobel Prize in 2006.



STEVE:  Ig Nobel?



LEO:  Do you know about the Ig Nobel prizes?



STEVE:  Unh-unh.



LEO:  They reward the quirkier side of scientific endeavor, achievements that first make people laugh, then make them think.  So you should keep this up.  You might win an Ig Nobel Prize.



STEVE:  Well, this is...



LEO:  Oh, look at that.



STEVE:  This is 15KHz, a 15KHz square wave.  It's also not exactly 50 percent duty cycle.  It's about 60-40, which is optimal for driving this incredibly efficient - I should also mention the amplifier is about 97 percent efficient.  Nothing generates any heat.  All of the battery power is turned into audio energy.  In order to generate the square wave, I chose an extremely cool little microprocessor.  It's the MSP430, which is made by Texas Instruments.  Back when I was looking at this a year ago, everyone may remember that I'd found something, the Espresso, was an inexpensive development board based on the ARM processor.  And I was thinking, oh, it'd be fun to - that had so much power that you could program it in C and so forth.  Well, there my goal was to have sort of an R&D platform, and I was looking at a full range power amplifier and a much fancier but inherently much more expensive solution.  This is really - this is sort of the next generation, solve the problem with something lightweight, easy to carry, handheld and so forth.



LEO:  Now, how directional is it?  I know your original Portable Dog Killer was supposed to be very directional; right?



STEVE:  Yes.  And this is.  When I was testing it on myself, as I rotated the speaker in front of me...



LEO:  You can tell.



STEVE:  ...it absolutely peaked when it was aimed at me.  So you get some off axis, but not nearly, I mean, but it's very directional.



LEO:  Should I play this 17.4Hz tone for people?



STEVE:  There's no way it could get out through compression.



LEO:  I'll play it and see if - you're right, I mean, I would think it would be rolled off.



STEVE:  Yeah.  I would be almost sure.



LEO:  I'm playing it now.  I don't know, does anybody hear that?  I don't hear anything.



STEVE:  Yeah.  And if anyone has any tinnitus at all, then that's also going to be - it's like, wait.  Is that a tone, or am I...



LEO:  Is that me or my ears?  Yeah, yeah.



STEVE:  Exactly. 



LEO:  Wow.  People in the chatroom saying they can hear it.  No.



STEVE:  Eh.



LEO:  All right.  I'll tell you what.  I'm going to play it sometime in the next 30 seconds.  But I won't tell you when.  And if you can hear it, then raise your hand.  I don't know.  No, it's not - this is silly.  I think there's a psychological impact.



STEVE:  So I needed to generate a stable 15KHz square wave with a specific duty cycle, and I wanted to do it with very few components.  This MSP430 is really cool.  I actually first discovered it in March when I was considering automating my coffee pot.  Because you may remember that I went through the whole drip coffee phase, finding the right grinder and the right beans and all that.



LEO:  They heard it.  They can heard it.



STEVE:  No kidding.



LEO:  They heard it.  I snuck it in there when you said "drip coffee," and everybody went, "I hear it."  We've got some young listeners with some good ears.



STEVE:  Wow.



LEO:  I'm surprised that the compression doesn't roll it off.



STEVE:  I really am, too.



LEO:  It's 17.4KHz, yeah.  Isn't that interesting.



STEVE:  I really am.



LEO:  I'm sorry.



STEVE:  So this microprocessor is very cool.  This is the development board which is available for it.  It costs $4.30.



LEO:  Is that the Espresso?



STEVE:  No.



LEO:  This is something different.



STEVE:  Yes, this is the chip that I'm using for this next-generation, very efficient, very lightweight, very effective, I believe, dog trainer.  The chip, since the chip is the MSP430, TI sells this complete development kit for $4.30 with free shipping.  So you can just, anyone who wants to start playing, it's $4.30.  I went through the whole purchasing process to verify that the shipping was free.  It's got a socket.  It comes with two chips.  And my plan is to - I'll end up with a bill of materials with the parts everyone needs to get if they want to build one for themselves, and the software for the chip, which you just saw running there, generating that square wave, and I'm just going to put it all up on my website so people can solve this problem for themselves.  And we'll sort of play it by ear.  If there are people who can't build it, I'm sort of thinking maybe I'll generate, I'll, like, build 20 and let people experiment with them.  I'd like to have some beta testers...



LEO:  That's so cool.



STEVE:  ...who can relate what their experiences are.  And actually one of my Starbucks buddies said, hey, it's too bad we don't have a video of when Mark gave the annoying dog next door a little blast.



LEO:  Yeah.



STEVE:  And I thought, oh, that would be perfect.  So what I'm thinking is the...



LEO:  You going to build a camera in?



STEVE:  Well, no.  Everybody's got camera phones now.



LEO:  That's true, yeah.



STEVE:  And so if our listeners who borrow one of these from me could make a video of their problem being solved, that would really be wonderful.  So anyway, I will update people as this moves along.  I just wanted to let everyone know that there have been people who have this problem, have continued to have the problem, and it looks like I'll have a solution with a complete kit that's very easy to build and will also be very inexpensive.



And you and I mentioned, I think before we began recording, Leo, that we had recently donated to Wikipedia.  I did tweet that.  And I wanted to thank people for buying SpinRite because it's because of people buying SpinRite that I am able to donate some of that money back to Wikipedia.  I gave them a hundred dollars the other day because it popped up.



Oh, and by the way, speaking of Wikipedia, Wikipedia has a beautiful article on this microprocessor, on the MSP430.  So if you just Google "MSP430" - by the way, it stands for Mixed Signal Processor.  If you Google "MSP430," I think the third link down is the Wikipedia article on it which is a really nice comprehensive overview of the chip.  And there's lots of things I didn't say about it.  It's 16 bits.  It's a beautiful architecture.  Very few instructions, I think 27 instructions.  A von Neumann architecture, not a Harvard architecture, so it's mixed data and code in a unified address space.  It's little endian byte ordering, which I prefer, the way the Intel chips are.  Sixteen 16-bit registers, just a joy to program in assembler, which is what I'm doing, but also in C.  There are free - the GNU tool chain supports it.  Eclipse-based GUI supports it.  So there are multiple free development systems.  And I should also mention that it uses less power when it's idle, but still alive, than the battery's own self-discharge rate.



LEO:  Microamp.  It's amazing.



STEVE:  It's just a super, super, yes, it uses a microamp of power.



LEO:  That's amazing.



STEVE:  Which is less than the battery's own chemistry loses in energy sitting on the shelf.



LEO:  But it wakes up pretty quick, too.



STEVE:  Yes.  It's able to come up to speed in a microsecond.  I ought to say that where I'm thinking of heading is, and the reason I also have chosen this, is I'm considering going further and doing what I would call a "dog sitter," so that you can put this thing on a fence or on a tree or in your backyard or wherever, and it will hear the bark, recognize it, realize that it's not a motorcycle driving down the street or a car backfiring or someone piling wood on the side of the house, I mean, it will really be a bark recognizer, and then give a little toot of the horn in order to respond to a dog's bark and hopefully train it quickly not to bark.



LEO:  I love this.  I love this.  This is great.



STEVE:  So we'll be following along.



LEO:  Love it.  Good.  You've got it all because I think the ad is done.  So it's all yours from here on end.



STEVE:  I talked a few weeks ago about a Kickstarter movie that a listener of ours was trying to get launched called "The Root Kit."  And his site is TheRootKit.com.  And it doesn't look like it's going to make it.  He's got 192 backers who have, as of this point, this morning when I wrote this down, he'd raised $13,652 out of his goal of $50,000, and he's got nine days remaining.  Now, I don't know, I've not looked to see what the profile of dollars and days remaining is.  It's not like eBay, where a lot of people bid at the last second in order to not have people outbid them.  So I would imagine the dynamics are different here.



But for what it's worth, Jonathan Schiefer is our listener.  He's trying to get this "Root Kit" movie going.  He says, "Rogue computer hackers discover a plot to monitor everyone on the Internet.  They fight back."  So he is a movie maker, a commercial maker.  He's been interviewing lots of people in the industry.  I've been getting links to him.  I think I've got 10 so far because I am a supporter, a backer.  And anyway, it doesn't look like it's going to happen, but it was a cool idea.  So I just thought I would mention it again to help him make the cut, if he can.



And I did have a nice note, an anonymous note from a listener who said, "I must be honest and tell you I borrowed a copy of SpinRite, which a friend of mine let me use to recover 120GB of data on a drive which had suddenly quit.  As a systems admin by trade, I should know better, and back up regularly.  But you know how it is.  Backups are always on a backburner, not something we think of until problems occur.  Needless to say, SpinRite saved my bacon.  I was able to recover all of my data to a secondary hard drive.  I was so thankful and happy, I just bought my own licensed version of SpinRite.  Thank you so much for an amazing product.  $89 U.S. for 120GB of data recovered is cheap.  That's $0.74 per gig.  I would say that falls in the bargain bin."  So thank you for that.  And as a consequence of people who buy SpinRite, I'm able to do everything else that I do.  And I'm glad to.



LEO:  Yeah.  And I pledge to give a hundred bucks this year, as I did last year and the year before, to Wikipedia, as well, because I think that that's a very good cause.



STEVE:  Cool.  So, DTLS:  Datagram Transport Layer Security.  We've talked about the way the Internet moves data, how the brilliance, the genius of the 'Net was the idea that data did not have - that data could be turned into packets.  Packets could be sort of blindly sent out onto this network.  And each packet, aided by routers along the way, would sort of bounce from one router to the next from its originating location to its destination.  And that was the way data would flow.



Prior to that we had a, you know, you called somebody, and you had a phone with modems at each end, an actual almost switched connection between the two endpoints.  This was a whole re-conceiving of the notion of how data moves.  And one of the brilliant parts was that they were relaxed about recognizing there would be problems.  You might have routers that were congested, where all the data was, like, too much data was coming in for it to go out.  And so that would be a problem.  And so packets might get lost.  Routers might be offline, so packets would have to route themselves around some other path.  They solved the problems with a set of protocols, which were layered on top of the underlying technology.  And "layer" is a term we're going to use a few times here in the next half-hour because it is the concept of layering of sort of a hierarchy of protocols that's another one of the fundamental right ways that these guys did that.



So one of the sort of lowest level protocols is one which simply tries to send data from, that is, a packet of data from one point to another.  And that's the so-called UDP, which is a "datagram" is the term used for a packet.  So there's that sort of send the packet onto the 'Net, hope that it gets there.  The benefit of UDP protocol is that it's very lightweight.  That is, you simply launch the packet at its destination and hope for the best.  If you don't get a confirmation back that it's been received, then you, at your option, if it's important that it get there, could send it again.  For example, this is the way DNS, the domain name system, operates, where you make a query, and if you don't get a response, you make it again because maybe the packet got lost to the server that you were querying, or its reply got lost back to you.  One way or the other, you're not satisfied, so you ask again.



Another place where UDP, this kind of simple datagram traffic is nice, is we're using it right now.  This is the way I'm connected to Leo and vice versa, VoIP, Voice over IP.  The idea here is that we're not so concerned with the absolute perfection of the transmission of data as we are that it stays timely.  That is, if a packet gets lost, it represents some few milliseconds of sound, and we're just going to skip it.  We'll just ignore it.  There'll be a little bit of a blurch or maybe a little perturbation in the audio, but the message still gets through.



The TCP protocol was designed for things like file transfers, like email, when we're sending a file between two points, or the web.  HTTP is a protocol that runs on top of TCP, the transmission control protocol, which guarantees delivery of the data as it was sent.  And that's the difference is TCP is a guaranteed delivery system, which means that a certain sequence of data is sent, and exactly that sequence of data will be received.



Now, we've already talked about all the things that can go wrong.  You can have packets disappear.  It's also possible, since the network sort of lets every packet fend for itself, one packet might go off on a slower route and end up coming in after a packet that was sent after it.  That is to say that the packet ordering is not guaranteed on the Internet.  So the TCP protocol solves all those problems.  It, at the protocol level, takes responsibility for holding onto the data which has been launched out onto the Internet until the far end acknowledges that it's been received, at which point the sender can let go of it.  The point is, at the application level above TCP, the application just says "send this," and the other side receives it, and all of the troubles that might occur along the way get resolved and handled by TCP.  That's its brilliance.



But there's some problems with that.  And that is, if a packet gets dropped, then what the protocol does is stop until that packet gets received again.  That is, because TCP is guaranteed, packets need to be retransmitted.  And so the sender will stop sending at some point until it gets acknowledgment that the packets have been received.  So there can be a stall.  You can also retransmit.



We also know that TCP always operates trying to find the maximum rate at which it can send packets.  And the way it does that is it keeps sending them faster and faster, until they actually are lost somewhere.  That is, it finds the problem, it finds the maximum speed that the network between its two points can accept data, by going past it.  When you go past that speed, some router along the way gets overflowed and starts dropping packets.  And so when that happens, TCP the protocol recognizes packet loss and backs off its speed.  But then, because it might be a transient bandwidth problem on the network, it again creeps back up again.  So you sort of have a sawtooth shape where it goes up and then drops and then up and then drops and then up and then drops.  The point is, it's deliberately pushing the limits and stalling all the time.



So that's the reason, for example, that Voice over IP, like we're using right now, does not use the TCP protocol.  It's because the TCP protocol doesn't fit the application.  So this is the brilliance of the Internet is that we have a collection of protocols that we can choose among, depending upon what kind of service we want from the 'Net.  Do we care about real-time service, like with gaming, where if one particular move got dropped between you and the gaming server, it might not be critical, but if a byte got dropped in a file that was being transferred, that would be critical.  So we have different kinds of services.



Okay.  So we already know that websites can be connected to securely using what's known as SSL or, more recently, TLS.  SSL was Secure Sockets Layer, the original name of this protocol.  More recently it's been named TLS, Transport Layer Security.  SSL runs on top of TCP.  So again, here we have sort of this stack, as it's called, a protocol stack, or layers in a hierarchy, where we have the packets at the lowest level, the IP protocol, then the TCP protocol that provides guaranteed delivery of packets in order.  And then on top of that is SSL, which is a protocol that runs above TCP.  That is to say that the entire SSL protocol assumes reliable, in-order delivery of packets.  The SSL protocol or TLS protocol running on TCP is oblivious to packet loss and retransmission and out-of-order delivery and all of the problems that can happen because it relies on the TCP protocol layer below it to deal with that, to solve all those problems.



So what happened was, back about six years ago, in '06, a couple security researchers, and this is a tough name to pronounce, Nagendra Modadugu, who at the time was at Stanford, today he's at Google, and Eric Rescorla.  Eric Rescorla we've run across before.  He's a long-term security researcher, and I do get a kick out of the name that he set up for his company, it's RTFM, Inc., and at RTFM.com.  And we all know that RTFM is an acronym for Read the F***ing Manual.  Anyway, they decided to address the problem of needing security for UDP protocol in the same way that we need security for TCP.



Now, you might say, okay, wait a minute, why do we care about security on UDP?  Well, we care about security for TCP, for example, because we want both authentication, and we want privacy.  We want to know that we're talking to BankofAmerica.com, and we've endlessly discussed the problems of certificates and certificate authorities and signing and all that, which are all services that TLS, or SSL, provides the users of that protocol.  So that gives us authentication, that we know who we're talking to.  And we also want privacy for whatever reason.  It may be between two anonymous parties.  We use SSL just because we don't want to be eavesdropped on.



Well, there are a growing number of applications where authentication would be useful, and privacy would be useful, even though we don't need TCP.  The problem with TCP, for example, is not only is there the startup handshaking, the SYN packet, the SYN ACK and the ACK and so forth, that establishes the TCP connection, you get that set up first.  Then you establish the SSL connection within the TCP connection.  But mostly it's the issue of real-time.  TCP, for the reasons we just looked at, is just no good for real-time communications.  By its nature, that's not what it does.  It guarantees all of the data gets to the destination exactly as it was sent.  It also tries to do it as fast as possible, but in doing so it's inherently going to be stalling and having problems, in addition to just the inherent problems that the Internet provides or creates. 



So what these guys did was they said, okay, UDP is seeing increasing use.  The SIP protocol, SIP, Session Initiation Protocol, is what VoIP uses.  It's one of the standards that VoIP uses for initiating Internet-based audio connections.  And what's happened is, because there has not been a standard traditionally, other providers, like Skype for example, we know that our Skype communication is encrypted.  It's not encrypted using any standard protocol, so it's difficult to extend.  It's difficult to create proxies and basically to interact with it in a number of ways that might give us more freedom.



And now that I have said it, I was saying earlier it wasn't clear to me why Microsoft had added this to Windows 7.  Well, maybe I've answered my own question since they're now also the owners of Skype.  And it's always nice to be able to build these, to extend standards rather than have to just create some ad hoc solution.



So these guys were saying, look, there's voice communications, and also increasingly gaming.  It would be very nice to use UDP, which is what gaming protocols typically use because they need real-time response.  They can tolerate losing some detail, but they need to keep tied in real-time, and TCP doesn't do it.  UDP does that beautifully.  So they said, okay, how do we add good security, like TLS-type security, which was designed to run on top of a secure underlying protocol of TCP, how do we do that on UDP?



Well, the result was done right.  These guys have a depth of understanding and experience and knowledge with security.  So they said, look, one of the things we know is we do not want to reinvent anything we don't have to.  And it wasn't at all that they were lazy.  It was that, because they understand security, they understand that anything that they would do that would be new, good as they are, as thoroughly as they could imagine thinking it through, would be inherently troublesome.  Even SSL and TLS has, years after it's been deployed, they're still finding little edge cases in it.  And we've talked about those as they have come to light, where it's like, whoops, here's something we never thought of before.  And it's a subtle little problem, but we always know that these things start small, and they get bigger.  As Bruce Schneier has famously said, "Security problems never get smaller, they only get bigger."



So what these guys decided they would do is they would start with the existing SSL/TLS library from the OpenSSL project.  And they would reuse as much of that as they could, so that they would get the benefit of everything that's been learned about how TLS operates on top of TCP.  The OpenSSL project is, believe it or not, just short of a quarter million lines of code, about 240,000 lines of code.  They were able to add UDP support.  It's now part of OpenSSL.



And in fact I should mention that this DTLS protocol is now in OpenSSL.  It's in another package, CyaSSL.  It's in GnuTLS and SChannel, which is Microsoft's library in Windows.  So it's there and also in libsystools.  So this now exists in all of the commonly used packages and is available to anyone using those packages who would like to get the benefits of authentication and privacy a la TLS, but also have the real-time connectivity that UDP perfectly uses.



So what these guys did was they looked at what UDP limitations were and essentially made the smallest possible changes they could to a variant of TLS to allow it to operate over an insecure channel.  The trickiest part was the SSL handshake, which occurs at the beginning.  And we did a whole podcast on how SSL works some time ago.  If anyone hasn't heard it or wants to refresh, it's available from us [SN-195], both Leo's and the archives at GRC.com.  The idea is, quickly, that the client that wants to connect to a server sends a so-called "client hello" message containing a list of all the protocols that it knows about that it's able to support.  The server receives that; and from its own list of the things that it supports, it chooses the best of those that are supported by the client and responds with its own hello message which returns to the client the one protocol that the server has chosen from among those that the client offered, essentially.  So that allows them to negotiate the best connection possible.



The client has also sent a pseudorandom number, a nonce, which the server signs using its private key.  That gets returned to the client.  It's able to verify that using the server's certificate public key.  So they're able to establish some secret data and verify that they each are each other, or at least that the server is who it says it is.  So this handshake goes back and forth a few times.



Well, this was a problem to do over UDP because packets might get lost.  Also, some of these messages being sent are much larger than a UDP packet.  This is not a problem when you're on top of TCP because TCP doesn't have the concept of packets.  Packets are at a level, and here again we're talking about a hierarchy, at a layer underneath TCP.  TCP just sees a stream of data that's guaranteed to go in each direction and get to where it's going; whereas the UDP protocol is all about individual packets.  There's no notion of a connection.  There is just, oh, I sent a packet at that direction.  Oh, and I just sent another one.  Oh, and I got one back.  But there's nothing else, there's no sort of overriding semantics on top of packets.



So what these guys decided was, again, they just did not want to reinvent the wheel.  TLS was solid.  It's been made really, really bulletproof.  So they added a couple fields to the normal TLS records which is used just during the handshaking phase in order to handle the problem of essentially fragmentation.  That is, if a large message needed to be carried within several smaller UDP packets, then technically that message would be fragmented into pieces, each in its own UDP packet.  Those are serialized in order to handle out-of-order arrival and also missing packets.  And so there's like a little tiny sort of a mini TCP which doesn't - it's not fancy.  They kept it as simple as possible.



And in fact, to give you some sense of this, whereas the OpenSSL library is 240,000 lines of code, they were able to implement this DTLS protocol only adding an additional 7,000 lines of code, so 7,000 versus 240,000.  And of that 7,000, about 60 percent of that was code they copied and pasted out of OpenSSL into their own region and then edited that a little bit for their own purposes.  So even 60 percent of that was mostly from OpenSSL, but they couldn't change OpenSSL.  They created their own little subset of it.  So their code addition was very small in order to add essentially UDP compatibility to the existing SSL protocol.



So there's a need to negotiate between the endpoints in order to exchange certificates, verify in the same way that we do with a website, verify the identity of one side or the other, and in some cases both, it certainly supports that, and to establish the cryptographic keying under which all subsequent packets will be encrypted.  And then they just made a few other little tweaks to the protocol, essentially taking up a little bit of space in each UDP packet for some context maintenance so that, once the endpoints agreed, they would be able to maintain some context for the connection so that they're able to disambiguate other similar streams running between the endpoints.  And that's it.



So essentially the story is a couple guys who really understood security, with a broad, deep background in how to do this right, made minimal changes to the existing OpenSSL package which is used, for example, Apache runs on top of OpenSSL for all of its HTTPS security connections.  And it is regarded as the open standard expression of how to do transport layer security correctly.  These guys took that.  They understood that they did not want to recreate the wheel.  No reinvention here.  They carefully held back from adding features.  And in their paper where they talk about the design of this, they say, look, there were things we could have added that would have been kind of fun.  But all of our experience is that it'll just get us into trouble.  All we want to do is take a little bit of space from each packet in a UDP packet for the overhead needed.  Once we establish a connection, we will use the existing TLS handshake, adding to it only enough to sort of create a little bit of a mini TCP because the handshake has to have in-sequence and guarantee, otherwise we leave this alone.



And that's the DTLS protocol.  It exists.  It started off as an RFC 4347.  And that was in '06.  And it was replaced at the beginning of this year when TLS went to v1.2 in order to deal with a problem that we discussed at the time, which was a problem with the CBC mode in which packets were being encrypted.  The context from one packet was being carried over into the next, and some clever attackers realized they could use that as a wedge to get in.  So v1.2 of TLS fixes that.  So at the beginning of this year the RFC covering DTLS was updated to RFC 6347, specifically to - and actually they haven't.  They call it DTLS v1.2, not because there were any - there was never any 1.1, but they wanted to keep it in sync with TLS v1.2.



And we now have another protocol that I wouldn't be surprised if we're hearing about more in the future.  It's one of the reasons I wanted to give this a podcast was so that our listeners had some foundation and understanding about this because my sense is we'll be hearing that World of Warcraft is now running over DTLS, and it's like, whoa, you know, what's that?  Well, now we know.  It is datagram-based transport layer security, which is a variation of the existing transport layer security that was originally designed to run over TCP.  This one runs over datagrams and doesn't care if some get lost, doesn't care if they arrive out of order.  It still gives you privacy from encryption and authentication thanks to that startup handshake.  And that's the story.



LEO:  That's the story, morning glory.  DTLS.  Cool, very cool.



STEVE:  Yup.  Another protocol in the bag.



LEO:  [Laughing] Eventually you have to do a whole series of Schoolhouse Rock episodes explaining all of this so that people like me can understand it.  Thank you, Steve Gibson.  Steve's notes are available online at this website, GRC.com.  That's also, by the way, where you'll find 16Kb versions of this show for the bandwidth-challenged.  You'll also find transcripts, for those who like to read as they listen.  And all of the great stuff Steve offers, including SpinRite, the world's best hard drive maintenance and recovery utility.  Lots of freebies there, too.  GRC.com.  Steve's on Twitter, @SGgrc.



STEVE:  And before long, Leo, you're going to be able to say, and you'll be able to pick up plans for Steve's acoustic dog training project.



LEO:  There are a number of people in the chatroom who say, "I could really use that."



STEVE:  Leo, the problem is amazing.  I mean, it's one of the reasons I feel glad that I'm getting back to this.  I felt a little badly that I dropped it.  There were people saying, hey, you know, I want one of those.  And so one way or another I want to make that possible, make that happen.



LEO:  Excellent.  Well, you can watch this show 11:00 a.m. Pacific, 2:00 p.m. Eastern time.  That would be 1900 UTC on TWiT.tv.  That's when we do it live.  But you can also get on-demand audio and video after the fact from us.  So you get the small audio from Steve, the larger high-quality audio or video from us at TWiT.tv.



STEVE:  And transcripts from me, too, thanks to Elaine.



LEO:  Yeah, nice job.  All right.  Thank you, Steve.



STEVE:  Okay, my friend.  Thank you, and we'll talk next week.



LEO:  On Security Now!.



Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.








GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#381	

DATE:		December 5, 2012

TITLE:		Listener Feedback #156

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-381.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here.  He's going to explain that new, that breaking story about how it's easier than ever to crack passwords.  Oh, my goodness.  We'll also answer questions from our viewers and talk a little bit about an update on the Portable Bark Killer, or the Hush Puppy, as it is now known.  It's all ahead with Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 381, recorded December 5th, 2012:  Your questions, Steve's answers, #156.



It's time for Security Now!, the show that explains, helps you understand, and in fact helps you preserve your privacy and security online.  And there has never been a better time to do that than right now, in fact.  Fortunately, we've got our Explainer in Chief right here, Mr. Steve Gibson.



STEVE GIBSON:  Hey, Leo.  Great to be with you again, as always.



LEO:  Good to have you.  Here we are, another Wednesday.  And, yes, yet another security flaw.  It just never ends, does it.



STEVE:  Yes, we never run out of material.  And I have to say that I'm getting feedback from our listeners who are, I would say, overwhelmingly, not without exception, but overwhelmingly do enjoy our divergences from the topic.  We're not going to turn this into the Portable Dog Whistle Show or the TV Sci-Fi Review Show or anything.  But I think people enjoy hearing what you and I think about things, sometimes when it's not about security.  So I'm seeing the feedback from people.  The response to the dog whistle project being brought back to life has been phenomenal.  So we'll give it a little bit of time.  We'll keep the show focused on what it is.  But I wanted to recognize that our listeners are enjoying us.



LEO:  Well, of course.  But of course, Mr. G.  All right.  Steve, I guess we should start with this.  I saw it in Ars Technica.  It was kind of the headline in Ars Technica today.



STEVE:  Yeah, it got a lot of attention.  There has been for the last couple days in Oslo, Norway, a conference called Passwords^12.  And during that conference there were a couple presentations from researchers that have upped the ante on brute-force password-cracking technology once again.  One researcher, Jeremy Gosney - and if his name's familiar, it's because we've talked about him before.  He's the guy who processed the 6.4 million LinkedIn password hashes that had leaked.  He ran them against the most common password list.  And, for example, that's where "monkey" was No. 14 or something.



LEO:  It's my password.  Ohhhhh.



STEVE:  It's bizarre that everyone was using "monkey."   So, and I can't remember, there was some strange number that was also...



LEO:  123456789 is very popular because...



STEVE:  Yeah, this was a little odd that so many people would have independently chosen it.  But very much like "monkey."  But anyway, he demonstrated a "rig," as he called it, which leverages the Open Computing Language, which is OpenCL, framework.  And a technology that he found after VMware disappointed him because he wasn't able to do sort of cloud-based sort of community computing with VMware, but an older project that had been around for a long time called Virtual OpenCL.  It allowed him to essentially associate multiple 4U servers, equipped each with 25 AMD Radeon GPUs, which were communicating at 10Gb across an Infiniband switched fabric.  Which is to say that he needed a large number of GPUs, graphics processing units, custom programmed for hashing.  But the key, aside from having that many, was getting them to communicate, that is, bringing down the communication barrier so that they could coordinate their work.  So he was able to do that using this Virtual OpenCL fabric.  As a consequence, he was able to demonstrate far more potent brute-force password cracking than we've seen before.



So, for example, the maximum character length Windows XP password - he chose Windows XP as an example because it uses the older LanMan-style hash, where it has a 14-character maximum.  And it's not very secure.  That's the point of this.  It converts lowercase to uppercase to at most 14 characters.  And it actually, for some weird reason, splits them into two seven-character strings before hashing.  So that reduces the amount of work that needs to be done.  So only 69^7 hashes need to be performed.  As a consequence of that, knowing what the algorithm is, it is now possible for this system and things of that scale to brute-force crack any Windows XP password in six minutes.



LEO:  Any Windows XP password in six minutes.  Do they have to have physical access, I guess they would, to the machine...



STEVE:  Yes, so again, this is - to be clear, this is a so-called "offline" attack.  So, for example...



LEO:  You have to have a database or something.



STEVE:  Exactly.  So if someone got your machine and got the hash, this reverses the hash, by doing a brute-force forward-going simulation of the weak LM, the LanMan, which is old, algorithm.  So it turns out that, as a consequence,  he's able to do the algorithm at 20 gigahashes, that is, giga attempts per second, and so it takes six minutes to try all of them.  So, for example, if there was ever a database of LanMan hashes that got loose, in the same way that we see other hashes getting loose all the time, they're just toast.  So there's one benchmark.



Another is the more recent NTLM, and that's an update on the algorithm.  That's able to run at 348 giga attempts per second.  So an NTLM hash takes about 5.5 hours to crack an eight-character password.  So this really moves things forward.  And SHA-1, he can crack those at 63 giga attempts per second.  And MD5 at 180 giga attempts per second.  So what we're seeing here, now, okay, these are old, weak algorithms.  And so, for example, when we apply state-of-the-art password-based key derivation that we've talked about, for example, a thousand iterations of even something like SHA-1, well, now, we go from 5.5 hours to 5.5 thousand hours.  So state-of-the-art approaches, if they're used, still provide us with substantial strength.  So what we're seeing is we're seeing the core level of speed jump forward, almost sort of following Moore's Law, which is the famous law talking about the rate at which chips get small and processing power increases and so forth that Intel put forth years ago, and it's bizarre how well we've been following this curve of performance increase.  Even when we keep thinking that we're hitting a dead end, we find a way around it.  So anyway, that was one of the presentations.



The second one was from the developer of HashCat, which we've talked about before.  That's the software that does very, very fast brute-force password cracking.  The developer, who's Jens Steube, maybe it's Steube, he also demonstrated yesterday in Oslo a very clever optimization that he had designed for brute-forcing SHA-1 hashing.  He's been staring at this, as the developer of HashCat he's looking at this, how can we make this faster?  So what he realized was, looking carefully at the way SHA-1 works, in any situation where you are going to be running many closely related inputs through SHA-1, there's a lot of it, if you were to do them independently, which is being duplicated in the algorithm.



So he realized that, by taking sets of input brute-force tests and looking at the way they run the hash the same, he could do a precalculation one time to cover that group en masse and produce a 21 percent improvement in performance.  So he shaves 21 percent off the time required to crack large numbers of passwords, essentially.  So this is just - this is, again, this reminds us of Bruce Schneier's comment that attacks never get worse, they only get better.  Or maybe that is worse.  Anyway, they only get faster.



LEO:  They only get better faster, yeah. 



STEVE:  So, yeah.  So again, this is nothing to run around and worry about except for any sites that are still using old strategies.  For example, the Windows XP operating system itself is by definition using a very old strategy since it's so old.  But websites that are just doing, for example, one SHA-1 hash, and also allowing those hashes to leak out onto the 'Net, well, they're just toast now.  I mean, that's just like not - it's a no-brainer.  If anybody who wants to grabs a database of SHA-1 hashes, they can be brute-forced so that, I mean, it's just like cutting through air.  It's not a problem.  So it really does take - now, this does say it's increasingly important for people to do password-based key derivation, that is, thousands of iterations on this.  And we know that iOS does now.  We know that LastPass has been now for some time.  Although, if you're an older LastPass user, they haven't changed that for you.  So you do need to go in and turn that on, which is a transparent change, and that's, again, for this sort of reason, definitely worth doing.



And you and I mentioned briefly this note that you had encountered before we began recording.  But I thought this was important for our listeners to hear.  An Australian man, William Weber, was recently arrested for running a TOR - that is, TOR is the acronym for The Onion Router - a TOR exit node.  The police raided his home, where he had seven TOR exit node servers running that were piping terabytes of data back and forth daily.  They were seized, and he was arrested for trafficking in child pornography.  So what had happened was that users of TOR were leveraging the anonymity which TOR, by design, creates.  And remember that TOR was designed by the U.S. military.  It was a U.S. Naval Research... 



LEO:  Oh, I didn't know that.



STEVE:  Yeah.  It was the U.S. Naval Research Lab that designed this.  And for listeners who don't know about TOR, that is, people who have come in in the last few years, we have a podcast where we very carefully explain the technology, and it is way cool.  It's called an "onion router" because it was named after onions that are made of layers of, you know, onion.  And we've all heard the expression "peeling the onion," "peeling the layers off the onion."



So the idea is that, as traffic moves through a cloud of TOR nodes, from one TOR node to another, as the traffic - you plot the path that you're going to take before you send traffic into the TOR cloud.  So you say, we're going to go to this server, this server, this server, this server, this server.  You then get the public keys of each of those servers, and you prepare a packet by successively encrypting your data in the sequence, actually in the reverse sequence that you're going to be traversing.  And each layer only knows about the next jump it's going to make.



You then put this packet into the first TOR node.  That server has - it's only able to decrypt its layer of the onion because it has its private key that matches the public key which it advertises.  So it takes that layer off, and then it looks at the next layer, which instructs it where to send this somewhat smaller onion module, and it sends it to that node.  That node - oh, and by the way, this server cannot decrypt what's in the onion because it doesn't have the next node's private key.  All it can do is forward it.  Anyway, if you want more, check out the podcast we did on TOR, on The Onion Router [SN-070].



LEO:  But I guess the point is it's designed to preserve anonymity, not security.  It doesn't replace a VPN.  But it anonymizes incoming and outgoing traffic.



STEVE:  No, it replaces a VPN even better than a VPN does.



LEO:  Okay, okay.  But it's encrypted traffic.



STEVE:  Yes.  And so the point is that people...



LEO:  Is it encrypted to the TOR?



STEVE:  It's encrypted, and its path is encrypted.  And so the whole idea is that there is no way to find out who's at the other end.  So what happened in this case is that authorities saw child porn images going through the Internet, and they saw where they were headed.  They were headed to William Weber's living room, or wherever he has his seven TOR nodes.  And so they said, oh, this guy is trafficking in child pornography.  Well, he's not.  The so-called "exit node" is, at the end of all this jumping around inside the TOR network, at some point it needs to emerge onto the Internet, after having jumped around enough to confuse everybody so they can't figure out where it actually came from.  And that's the point.  This really, really does work in hiding who is actually behind the requests which emerge from the exit node.  So somewhere back at the beginning of that traffic was somebody who actually was trafficking in child pornography, or going to servers that made the stuff available, but they were using TOR to hide behind, to hide their identify.  And it works.  It does that.



But the point is that at some point it needs to emerge onto the Internet in order to go, I mean, whatever.  It's certainly useful for many other things.  I mean, you know, for free speech advocates.  This was designed by our government, the U.S. government, because they wanted to hide their own footprints and be able to poke around on the Internet, and having there be no way for it to be traced back to them.  So, I mean, this is - it is world-class strength anonymity.  But as always is the case, it can also be abused.



And so there were criminal abusers using TOR to hide.  But the authorities didn't understand what was going on.  In fact, Mr. Weber said he was - he said after the raid he was interviewed by police who, he said, became, quote, "more friendly," unquote, after he explained how TOR worked, and that he was not responsible for what people did via the TOR anonymizing system.  And he said he had kept no log files.  Well, frankly, log files don't help.  I mean, nothing helps.  This system really does work for hiding the identity of the people making the requests.  This is interesting, of course, for us because it does demonstrate something that I've always been concerned about, which is exit nodes are potentially vulnerable to, if nothing else, to misunderstanding of this sort, but also to this kind of unfortunate exploitation of the anonymity.  I mean, because the anonymity TOR provides is, I mean, absolute.  It really does work.



LEO:  So is he off the hook?



STEVE:  No.  In fact, he's appealing now for donations to help fund his legal defense and establish a legal precedent which would help protect other operators of TOR exit nodes from similar police attention.  And he faces a lengthy prison sentence if found guilty of distributing images of child sex abuse.



LEO:  Hmm, interesting.



STEVE:  So, I mean, he's in trouble.



LEO:  Yeah.



STEVE:  Yeah, this sounds like the kind of thing where the EFF will step up and say, okay, we agree, you're not a bad guy, and we'll help explain this to the judge.



LEO:  Well, if not, nobody will ever want to run a TOR node again.



STEVE:  Well, and, now, you mentioned VPNs.  Because, as you know, they're similar.  This has been a concern, I mean, this should be a concern of anyone who offers a VPN service because a VPN does, it's much less exotic, but very much the same thing.  When you use a VPN, your traffic is encrypted.  It goes to the VPN server, that is, the other endpoint of the VPN, which then decrypts the traffic traveling through that tunnel and typically releases it onto the Internet.  So you would use a VPN, for example, at a Starbucks that has unencrypted WiFi in order to prevent your traffic from being sniffable until it got to wherever the VPN server was.  Then it would decrypt it, and off it goes.



So again, if you were doing something illegal or questionable, or if you were thinking this was giving you anonymity, a VPN actually doesn't give you much anonymity because it's very easy to watch the VPN server and get the IP of where the encrypted traffic is going.  That's specifically why TOR was created, and this so-called onion approach of multiple hops through the network, which, by the way, does slow the traffic down a lot.  I mean, it's not for real-time sorts of things.  It's just way slow.  But what you get in return is anonymity.  But again, a VPN server runs the same kind of risk because it's the IP that the authorities would see on the public Internet for all of its customers that are using it.



So again, at this point it's a problem for the law to understand the kind of things that William Weber is trying now to explain to the police, in that he's offering a service.  And you can imagine, I mean, they're saying, well, why?  Are you making money?  And he says no, I believe in freedom of speech on the Internet.  And they think, yeah, uh-huh, and child porn is moving through your living room as a consequence.  And he says, well, freedom of speech can be abused, but it's also a power for good.



Meanwhile, following our interesting trail of John McAfee, something that - I just love the irony of this.  John's location leaked a couple days ago.  And I saw some people commenting that it was just due to pure ego.  But a magazine called Vice.com, their headline was "We are with John McAfee right now, suckers."  Meaning they were, like, poking at the authorities that were unable to find John.  And they're saying, "We're with him right now."



LEO:  Yeah, because he granted them an interview.



STEVE:  Yes, he granted them an interview.  So they take a picture of John standing next to the reporter in a setting where his location is not obvious.  So from the image in the photo, you can't tell where he is.  Then they post this photo on their website with great fanfare.  And a hacker says, huh.



LEO:  This is so stupid.  I can't even believe how stupid this is.  Okay.



STEVE:  I know.  Grabs the photo file off the server and takes a look at the metadata containing the GPS time and position...



LEO:  How stupid.



STEVE:  ...of exactly where and when the photo was taken.



LEO:  Stupid.



STEVE:  So, I mean, you would imagine John, who's tech savvy...



LEO:  I think he's moved by now.



STEVE:  Well, yeah.



LEO:  He's in Guatemala now, is the latest.



STEVE:  He initially obfuscated when this first arose, the idea that he had been outed by the photo which was taken of him.  Then the next day, after I'm sure he had relocated, he said, well, yes, that did happen.  And it wasn't his camera phone, it was the photographer, who had "track me and post my location into the metadata of everything I do."  It's like, whoopsie.  So, yeah.  I thought that was sort of interesting.



And, wow.  Really interesting news about flash memory.  A Taiwanese company appears to, I mean, seriously appears to have solved the "where" problem of flash memory.  We've talked about this often, that, I mean, it is what's been holding flash back, so to speak, is that it only can be written to about 10,000 times.  Now, that's fine for a little thumb drive that you carry around with your files on it, if you actually do the math, how many days that would last for 10,000 rewrites.  And when you also then consider that the flash memory, as a consequence of the fact that it tends to wear out, has all this so-called "wear leveling logic."  That is to say that the problem of flash wearing out has been dogging it forever.



It turns out that it's been known that the process of so-called "annealing" - that is, annealing is heating up the memory - annealing cures the wear problem, but that requires hearing it up.  It's been believed that that would prevent it from being used practically.  But it turns out that these guys at Macronix, which is the Taiwanese company, they took some tricks from a different type of technology which has not yet made it to the world called "phase change" technology, where phase change actually changes the structure of a type of glass.  It does that by producing spot heating, essentially.  They took that concept, and they designed an architecture of a flash memory that allows milliseconds of local heating to about 800 degrees C.  Now, this is not the whole chip.  This is a microscopic little region of the chip is resistively heated in order to remove any problem with memory.



And we've talked before that the problem is essentially the way flash works is you have an insulator, and you use high voltage to drive electrons through the insulation.  Essentially you break down the insulation by using a voltage.  And we know that voltage is pressure.  Essentially you just pressure the electrons to squirt through the insulator, and you strand them out on a little island.  And then the way field effect transistors work, that's the field that they're being affected by is the charge on this little stranded island.  And that's how the memory works.



So the problem is, in the process of squirting these electrons through an insulator whose job is to resist that, the insulation begins to break down.  And after about 10,000 - and that's why there's a problem with write endurance.  There's no problem reading because reading is nondestructive.  No electrons have to pass through the insulator.  It's when you are charging or discharging that little floating gate that you're doing so by deliberately breaking down the insulation.  Well, it turns out that briefly reheating it fixes it.  And, I mean, fixes it completely.  So whereas a normal flash cell has about a 10,000-cycle life, they haven't found any deterioration after 100 million cycles.



LEO:  Wow.  So, what, do you have to put a little heater coil in the NAND?



STEVE:  No, it's actually - you distribute these little heaters, you actually integrate them right onto the chip.



LEO:  How weird.



STEVE:  So there's millions of those spread around the chip.  And the idea is, while it does take energy, this would be done, for example, while our smartphones are plugged in and with energy available charging the battery, or when our laptops are plugged in and having their battery recharged.



LEO:  Is it destructive to the content of the cell?



STEVE:  I don't know.  But they can certainly copy that region...



LEO:  Oh, they can copy - just what you do with SpinRite, in a way, yeah.  Yeah.



STEVE:  So it goes from 10^4 to 10^8.  So 10,000 10,000, essentially.  And that's not like where it ends.  They're saying that they've gone a hundred million cycles, and they have found no change.  So this thing, this may be a revolution in non-volatile, non-spinning memory technology.  So it's very exciting.  It's funny...



LEO:  That's exciting.  That's great.



STEVE:  ...because I tweeted the link to the story this morning, and one of our listeners, or at least a follower of mine, @barsteward - his description on Twitter says "lapsed physicist, coder, dad, standup comedy junkie, inappropriate sense of humor (according to my boss)," he says.  So he wrote:  "@SGgrc Heating redistributes the imperfections that allow stress-induced leakage current through Fowler-Nordheim quantum tunneling."



LEO:  There you go.



STEVE:  And I thought, well, obviously.



LEO:  You're sealing off the tunnel.  Wow.



STEVE:  Yeah.



LEO:  So it's re-chaosing the substrate.



STEVE:  Yeah.  And, I mean, it makes absolute sense.



LEO:  That's what I'm going to call it.



STEVE:  Leo refers to it as "re-chaosing."  That's good.  Yeah.  But, I mean, this is huge.  It'll take a few years, probably, for this thing to hit.  Maybe not even that because, I mean, the flash memory technology is mature.  They have to then print a layer of heater on top.  But this is good news.



LEO:  That's really interesting.  Wow.



STEVE:  Yeah.  Also a listener of ours, Andrew, who has the site AndrewTechHelp.com, he posted a nice - or sent me a tweet about a page he had put together about how much easier it can be to disable Java in IE8, 9, and 10.  And that's just by using the built-in add-ons panel.  Remember that I think it was Brian who posted - we referred to Brian Krebs' page where he had instructions, and we commented that, oh, my god, almost the entire page was taken up in registry changes...



LEO:  All for Windows.



STEVE:  Yes.  And so it's obvious in retrospect that you can just change the add-on settings in IE to turn off Java.  So anyone who's interested can find - you can probably look at AndrewTechHelp.com, and I imagine you'll find his blog post.  Or look at my Twitter feed because I just tweeted it for everyone who's interested, which of course is Twitter.com/SGgrc.  And I got a kick - I got a piece of feedback from Kyle Cronin, who said:  "@SGgrc Best method of securing Java:  Control Panel > Uninstall Programs > Java > Uninstall."  It's like, okay, yeah, right.



LEO:  So that is true.



STEVE:  But then someone said, hey, how do I know if it worked?  And I realized, I have at GRC an absolutely safe Java applet that anyone could try.  I have a Big Number Calculator which I use for doing work on big crypto numbers.  It's just under "Other," I think, off the main menu at GRC, and then you'll see Big Number Calculator, or it's also GRC.com/big-number-calculator.htm.  And that's a little, I mean, that's a nice, well-behaved Java, not JavaScript, Java applet.  And if it doesn't work, that's good because that means you don't have Java available to your browser, which is the problem.  It's fine to have it installed in your computer.  It's just you don't want web pages to be able to get to it unless you know that they need to.  And of course NoScript prevents this from happening unless you give web pages permission, as well.  So that's also a solution. 



LEO:  Great.  Great, great, great.



STEVE:  A couple bits of miscellanea.  I tweeted a really neat link to a YouTube video.  This was a recent production by BBC News.  The WITCH computer from Bletchley Park, which was one of the very early sort of electromechanical computers, was found in a warehouse, and it has been - all the pieces put back together.  It's been restored and is now working.  And so there's...



LEO:  Now, explain what this computer did.  Bletchley Park was where Enigma was solved; right?



STEVE:  Yes.  And this was apparently around atom bomb R&D time.



LEO:  Ah, interesting.



STEVE:  So there was code breaking.  And that's what Alan Turing was so involved in, was machines for automating the process of breaking German codes.  But so I'm not sure which aspect of what Bletchley Park was doing the WITCH computer was used for.  But anyway, it's fascinating.  They have these bizarre things called "dekatron tubes."  This was a decimal computer rather than a binary computer.  So these dekatron tubes - and you can look up "dekatron" on Wikipedia - they're actually decade, that is, 10 counting units.  And so you could feed pulses in, and they would move, like, a neon glow around the tube and then send a pulse out when it went back to zero.  So it's just like a decade counter.  And so this thing operated by very rapidly shooting thousands of pulses in, and this would accumulate them and allow them to be read out and function as memory.  Anyway, this YouTube video, I also tweeted that, or you can, I imagine, find it on YouTube.  And I ran across this thanks to Nathan Ramsey, who had this in our feedback email that I saw.



And I just did want to mention, Leo, I had here a note to tell you, yet again, how amazed I am by "Homeland," the series on Showtime.



LEO:  I told you first.



STEVE:  You told me first, yes.



LEO:  I am really - now, I've finished the first season.  I know the second season is already almost done, actually.



STEVE:  We have two episodes left in the second season.



LEO:  So it's a Showtime series.  So if you don't get Showtime, you're out of luck.  But it is - Claire Danes is fantastic in it.  And what's the other guy, Damian...



STEVE:  I don't know, but he's equally good.



LEO:  Is it Williams?  What is his name now?



STEVE:  Oh, wait.  You would have seen the interrogation scene.



LEO:  Now, don't - no spoilers.



STEVE:  No, no, I won't.  But you did; right?



LEO:  Yeah.  Yeah.  Damian Lewis, that's his name.  Thank you, Punchy.  Yeah.  Very good.  Very good, yeah.  And you know who actually doesn't get as much credit as I think he deserves is Mandy Patinkin, who is in it, as well.  He's the guy who has said, "My name is Inigo Montoya.  You killed my father.  Now prepare to die."  Not in that show.  In another show.  Another movie.  Another movie.  But he's a - what's funny, he's a - "Princess Bride."  He's a Broadway singer, you know, performer, who is really best known as a singer, who's just a great dramatic role.  He's playing Saul.



STEVE:  Oh, Saul.  Oh, my god, yes.



LEO:  Saul's great.



STEVE:  Yes, fantastic role.



LEO:  Yeah, yeah, love that.



STEVE:  And I also did want to mention that I saw the news that another series I've been enjoying, and I know that our listeners have a strong following there, and that's "Fringe" on Fox.  It's had a really interesting run.  But they're not going to let it go forever.  And in fact the last episode is rapidly approaching.  On January 18th of next year, so not many more, will be Episode 100, and the end.



LEO:  A hundred episodes.  Wow.



STEVE:  Yeah.



LEO:  So that's been going on for some time.  That's, like, eight years.



STEVE:  Yeah.  Oh, and, god, Walter and, I mean, just - it's, again, I've really, really enjoyed the series.  It's strongly character driven.  And of course we know that Leonard Nimoy is one of the sometimes-seen characters.  They kind of brought him back, dusted him off, in order to show him.  Oh, and speaking of which, there's a trailer for the next Star Trek movie is apparently going to be out, I think Thursday it comes out.  So...



LEO:  Is he in it?



STEVE:  No.  I don't - oh, I don't know.



LEO:  But is this going to be another...



STEVE:  It's following from the new cast...



LEO:  The reboot.



STEVE:  ...that we, exactly, that we just...



LEO:  I really enjoyed the reboot.



STEVE:  It was great.



LEO:  Yeah.



STEVE:  Yeah.  And, finally, the dog whistle project, also know as the PDK, although I cringe every time I think...



LEO:  No, no dogs are killed.  You know, we decided you should call it the Portable Bark Killer because that's really the point of it, is not to hurt the dog, but just to stop the barking.



STEVE:  Yeah, I mean, even the original device was - it was meant to be a trainer so that this rabid creature in the neighborhood when I was 15 would stop attacking people who were walking past.



LEO:  Bothers the dog less than a swat with a newspaper or a yank on the choke chain.  In fact, it's really no different than yelling at the dog in a surprising way.



STEVE:  Yes, exactly.  So I did want to mention that the project is moving forward rapidly.  I've posted the schematic for the amplifier on the 'Net.  This is actually the entire electronics package I'm holding up to the camera.  But for those who don't have video, I've got links in the Google Group, which is just, if you Google "Portable Sound Blaster," which is what I named the group a year ago last summer, you'll find the group.  I'm really unhappy with Google Groups, by the way, Leo.  It just is - you can't edit posts.



LEO:  It's abandoned, I think.  I don't think they're using it anymore.



STEVE:  I'm very disappointed.  We need to organize a community somewhere else because it's just not - it's just annoying.  But so I've got the amplifier built.  The schematic is done.  I will have one in hand, like, almost, I'm just, like, hours away from the first handheld prototype.  An amazing number of people have expressed an interest.  So I want for everyone to rest assured that as soon as I can...



LEO:  I like this.  Now, the bottom of the schematic there's a name that I really like.



STEVE:  Yeah, I do, too.



LEO:  Have you trademarked that yet?  Well, I guess somebody else has the trademark.



STEVE:  It's not - actually it's Hush Puppies is trademarked.  The singular have all expired.



LEO:  Hush Puppy.  Wouldn't that be a good name for it?



STEVE:  It's a great name for it.  So I'm just calling it...



LEO:  The Hush Puppy.



STEVE:  The Hush Puppy Electronic Dog Whistle.  So I wanted everyone to know, one way or another, your needs will be met.  I will do it.  Everything's going to be open for the project - the software, the schematic, the parts list.  It looks like it costs about $10, so it's not an expensive thing.  The design...



LEO:  That's not including speakers, though.  That's just the board.



STEVE:  Nope.  Speakers $2.



LEO:  Really.  Doesn't take much to hush that puppy.



STEVE:  They're $2.  You can a pair of them for four bucks with free shipping on Amazon.



LEO:  Oh, man.



STEVE:  Yeah.  So it's...



LEO:  Maybe we should do a know-how on this, and you could be our special guest.  I'm going to talk to Iyaz.  Because,  you know, we do a show, half-hour show on exactly this kind of stuff, building stuff and...



STEVE:  Well, you know, and I heard him mention the Arduino.



LEO:  Yeah, we just did an Arduino.



STEVE:  And anything that produces a square wave can drive the little power amplifier that I designed.  This power amplifier, it turned out to be sort of amazing.  It's five components.  It takes a 6v DC from four AA cells or AAA cells and turns it into an 80v near sine wave across the tweeter.  And it's almost a hundred percent efficient.  So it's turned out really well.  But what I wanted to say was, for people who can build things, everything will be provided for you to be able to build one.  I expect that there will be enough people who really have a need who are not construction people that they'll say, I've got a barking dog, my neighbor has a barking dog, I really, really want to try this.  What I want is feedback about how well it works so we can see if it's useful.  And so I'm willing to build some number of these and provide them for free in return for feedback.  So...



LEO:  And pictures of dogs with their tails between their legs.



STEVE:  Videos, I would love videos of dogs' reactions.  So anyway, so I'm just - I'm doing this as quickly as I can.  I'll get the pages up.  There will be one of our standard sort of feedback-style pages where everybody can explain who they are and what they want.  I'll get a sense for the size of the audience, and we'll move accordingly.  So anyway, it's all happening.  And, oh, I should also mention that - I mentioned that this was based on the Texas Instruments MSP430.  There's a development kit called the LaunchPad which TI sells for $4.30.  Several of the people have posted over in the Google Group that they ordered a couple, and they came, like, the next day.  One guy said he ordered it on November 30th, and it came on December 1st.  So that would be next day; right?  Because November only has 30 days?



LEO:  Yeah.  30 days, yeah.



STEVE:  And it came FedEx Express.  So, like, the shipping clearly cost more than he even paid.  So they really are $4.30.



LEO:  That's great.



STEVE:  And I'll have a design using those chips that are included in the LaunchPad to drive this amplifier.  So anyway, right now everything is over on this Google Group, which I am not liking.  I will be moving all - I'll have the whole deal laid out on GRC.com as soon as I can get there.



LEO:  Good.  Good, good, good.



STEVE:  Oh, and I almost forgot, while I was going through the mailbag I found a note from November 26th from a Shawn Milochik, who's a listener of ours.  He's in Reading, Pennsylvania.



LEO:  Reading.



STEVE:  Reading, oh.  And the subject line caught my attention.  He said, "SpinRite fixed my drive, and nobody cares."



LEO:  That's true.



STEVE:  And I thought, well, I care.



LEO:  Oh, yeah.  Steve cares.



STEVE:  I care.  So I thought, okay, what?  And I opened the note, and he says, "I came back from my Thanksgiving vacation to find a boot desk error on my work computer.  The computer booted properly from my old hard drive, and the bad drive mounted fine as a secondary drive.  So I ran SpinRite on Level 2.  I canceled it 10 percent of the way through, assuming that something causing a boot error would be near the beginning of the drive.  Sure enough, now I'm back to work, and nobody really noticed or cared.  That's how recovery should be.  Thanks for SpinRite.  Licensee since 2006 and Security Now! listener since the beginning."



LEO:  Aw, that's great.



STEVE:  So Shawn, thank you very much for sharing your story.  And we all care.



LEO:  So, let's do a Q&A.  What do you say?



STEVE:  Oh, what - is that why we're here?  Oh.



LEO:  Well, it's not why we're here.  No one knows why we're here.  But...



STEVE:  All of our listeners keep telling me, don't ever stop.  No matter what you do, do not stop.



LEO:  It's fun.  Oh, no.  In fact, I was talking to Iyaz yesterday.  He was a little toasted, so I don't know if he meant it.  But he said that...



STEVE:  Merry Christmas.  Must be the company Christmas...



LEO:  He said, "Leo, I love doing Security Now!.  I love it."  He enjoys it.  He says sometimes, though, it's a little hard to understand.  I said, oh, don't think I understand everything Steve's saying.  You've got to listen carefully and do your best.



STEVE:  Well, now we have Tom moving to L.A.,  I have a feeling that Iyaz will be inheriting the role.



LEO:  More of Iyaz, yes.



STEVE:  Hanging out when you're off in - where are you going, to Greece for half a year or something?



LEO:  That's not till September.  And I wish it were for half a year.  I wouldn't mind that.



STEVE:  You'd be here no time.



LEO:  I'll be there three weeks.  September, I think, 17th we leave, and we come back in October.  But I decided to start planning early this time because this way...



STEVE:  Planning is good.



LEO:  Yeah, this way everybody will know why we're not here.  All right.  I'm looking for your questions.  I think you sent me two copies of the notes.



STEVE:  Uh-oh.  I don't think so.  The title is very similar-looking.



LEO:  They are.  I got it.  I got it.  I got it.  I got it.  Eight great questions and answers, starting with Sao Paulo, Brazil.



STEVE:  Oh, actually it's 10, but I forgot to change the number at the top. 



LEO:  Eight, 10, whatever.



STEVE:  Okay.  We'll go until we run out of time.



LEO:  Michael wants to know:  First of all, I'd like to thank you for the amazing show.  I've been listening for over four years.  I've learned a lot.  Do you have any updates on Cloudberry?  This was a new cloud service that you mentioned a couple of episodes ago.  Should I keep using Jungle Disk?  Or is it time to move to Cloudberry?



STEVE:  So my feeling is that, if you're a Jungle Disk user, and it works for you, then why not keep using it?  Cloudberry has additional advantages.  My vetting of the security came out as full TNO, so it passes all of the Trust No One tests.  They are encrypting things absolutely correctly.  I mean, maybe a little overkill, but that's, as we know in security, that's a good thing.  I was a Jungle Disk user so long ago that I got, like, the lifetime for free deal.  And I remember that they then terminated that.  And so Cloudberry is a pay only once, and it does also support the super inexpensive Amazon archival bury-it-in-ice technology, Glacier.



So I could see a switch making sense and, like, leaving Jungle Disk behind if Jungle Disk are themselves charging you periodically for the privilege.  Cloudberry charges you one time, which is, I think, the right model for this.  And then using Glacier you can really, really save on your data storage.  And Cloudberry is also multi-cloud.  Glacier is only one of a huge number of cloud services that it supports.  So I haven't yet switched myself over.  But I'm going to do that, just for what it's worth.  I think it's the right solution.  So, yes, Michael, it probably does make sense.



LEO:  Cloudberry.  I love the name.  Tom Callahan, Cincinnati, Ohio, settled the issue once and for all, darn it:  Steve, I know you have a problem - I don't know if it's you.  A lot of people have a problem with using the term "reading" when listening to an audiobook.  I get messages all the time because I always say "reading" when I'm doing the Audible ad because I feel like it's reading a book.  And I had one guy say in the chatroom, "You know, those of us who are neuroscientists really are irritated."  And I thought, you're not a neuroscientist.  But anyway.



STEVE:  Well, Tom, I think for everybody listening to this, Tom may have...



LEO:  He's going to flatten it?



STEVE:  I think he is.



LEO:  All right.  But if reading is only something you do when looking at a book, then what is it blind people are doing when they "read" a book in Braille?



STEVE:  Hmm.



LEO:  Hmm.  They're feeling the book.  Touching the book.



STEVE:  Well, the point is, what we're saying, clearly somebody using Braille...



LEO:  Is reading.



STEVE:  I would agree they are reading the book with touch.  Which says that it's not which sense you use for input that matters.



LEO:  Right.  Exactly.



STEVE:  You use your eyes for input when you are reading visually.  You use your fingers for input when you are reading Braille.  And you use your ears for input when you are reading an audiobook.  So I can't argue that.



LEO:  Now, if I look to Wikipedia - and as you know, I always do - it says, "Reading is a complex cognitive process of decoding symbols" - so this would apply both to reading with your eyes and your fingers - "in order to construct or derive meaning."



STEVE:  But audio symbols, those are symbols, too.



LEO:  Are those symbols?



STEVE:  Yeah, they really are.



LEO:  I think it's like pre-chewed food.



STEVE:  Well, here's the problem.  Somebody read the book in order to read it to you.



LEO:  Yes.



STEVE:  So somehow it's been read twice.



LEO:  That's what I'm saying, it's pre-chewed.  This is interesting.  This actually is a good article.  It's clearly about kind of the neuroscience of reading.  "Other types of reading are not speech-based writing systems such as music notation or pictograms."  Yeah.  I don't know.  I mean, I think the Braille example is a good example.



STEVE:  Yeah.  I just thought, oh...



LEO:  Depends on how you define "reading," obviously.



STEVE:  Well, yeah.



LEO:  See, I don't define "reading" as a "complex cognitive process of decoding symbols in order to construct a derived meaning."  I say it's the process of ingesting writing.  And you ingest writing.  You can ingest it...



STEVE:  And under that definition, Leo, I think we all agree.



LEO:  Yeah.  I'm ingesting a book somehow.  Adi Khajuria...



STEVE:  And more importantly, Henry is, too.  And so that's...



LEO:  Yeah, he likes audio books because he has ADD, as I think all of us now in the tech industry have acquired ADD, or AADD.



STEVE:  Wait a minute, something just came in my Twitter feed.  Hold on.



LEO:  Acquired attention deficit disorder.  But he says after a page I lose interest and start staring out the window.  But audio books I can absorb.  And he listens intently.



STEVE:  Well, he can stare out the window and read the audio book.



LEO:  Well, and it's obviously some mechanical thing in the brain where the process of reading is hard to hold his attention, but he can listen to something.  He's like me.  I'm an auditory learner, as well.



STEVE:  Well, and I have to say also, there was a server at a restaurant where I was having breakfast a year ago who attempted to read out loud something which I was reading, but then it was time to eat my breakfast.  And so he picked it up and continued to read it.  And it was clear that I read effortlessly something that is written, and he was not an effortless reader.  It was still work for him to turn that printed word into something that meant something.  Whereas listening to it really drops the barrier.  Obviously, you're a good reader.  But you use audible reading for convenience.  You can do it while you drive, and they won't arrest you.



LEO:  Right.  And, you know, somebody said, what about music?  If you read music and play it, and then the person listens to it, you're not both reading the music.  There's somebody reading it, and there's somebody listening.  I guess that's true with an audio book.  There's somebody reading the book.  And I am an audio book listener.  So I don't know.  I understand the issue.  I do.



STEVE:  And now we've completely done nothing with the topic.



LEO:  It's way too much, yeah, way too much.  Way too much.



STEVE:  We've made no progress.



LEO:  There's no point of so much effort on this simple topic.  But, you know, that's why we're geeks.  Geeks obsess.  Adi Khajuria in London, U.K., wonders about TNO web browsing:  Steve and Leo, I've decided enough is enough, and I want to go TNO - trust no one - with my web browsing by using a VPN.  I'm going to - we got acronym crazy here - virtual private network.  With that being said, are there any free VPNs that are reputable and TNO?  I know that TOR is TNO.  TOR is the onion router we talked about earlier, is trust no one.  I know it's not a VPN, but it is TNO nonetheless.  I was wondering if there are any others out there.  I'm on a Mac running Mountain Lion.  RAWR.  He actually writes RAWR.



STEVE:  He did.



LEO:  Yeah.  I also have a Windows laptop which I use on rare occasions using XP.  [Indistinguishable sound]  I put that in there.  Kind regards, Adi.  Hmm.



STEVE:  So, okay.  I'm not sure from what he wrote what he wants.  He says, "I've decided that enough is enough and wanted to go TNO with my web browsing by using a VPN."  Now, okay.  A VPN, as we did discuss earlier, it encrypts your link from Point A, where you are, to Point B, where the VPN server is.  So it's the transit between those two endpoints which is encrypted.  But once it arrives at the other end, it is decrypted coming out of the so-called "tunnel," the encrypted tunnel, and then it either comes to you, or it goes out to the Internet.  So a VPN can be used to hide your location, that is, people out on the Internet will see the IP of the traffic as that of the VPN server, where it goes into the server to be encrypted, and then come to you.  But as we just saw by talking in depth about the onion router, that really doesn't provide identity or location protection, whereas the onion router does because it's easy to see.  It's easy, once you get to the VPN server, to see where its incoming traffic is being routed to.



And so he says "enough is enough" and wants to "go TNO with my web browsing."  So I'm also thinking maybe what he's really thinking is identity being tracked and followed and so forth.  And of course that's about the storage of information, of state information, typically about his computer or about his browser so that, when he appears at other websites, he can be reidentified as somebody who was also somewhere else earlier.  So that's generically called "tracking," where as he bounces around the 'Net his location is tracked because there's some sort of identifying tag on him, on the events that he puts out onto the Internet, that allow him to be tracked down.



So neither - I don't know.  I'm sure the onion router must do anonymizing of your traffic, although it's mostly meant for making you untraceable.  It probably does header stripping and things.  Frankly, it's been so long since I looked at it.  But I'm sure that we discussed it in our onion router podcast that we did previously in detail.  So anyway, I just wanted to sort of explain what Adi was asking from the context of, well, I'm not quite sure what it is he's trying to achieve, but simply VPN doesn't do it.  And I don't think there are free ones.  There are free trials.



LEO:  Oh, there are free VPNs, yeah.  They're not very good.



STEVE:  Yeah, I was just going to say, that's the problem is that you get what you pay for.



LEO:  Yeah.  They don't put any bandwidth behind it or hardware behind it.



STEVE:  Yeah.  And normally they're like, here, try this for free.  And if you want better service, then pay us.  There's one, like, HotSpotVPN...



LEO:  That's the one I use, and I love that.  Now, for a hundred bucks, you get Hotspot, a year of HotSpotVPN, and they give you a free little device, it's really awesome, that's a WiFi receiver firewall that has HotSpotVPN built into it.  So you put it on the Velcro on the back of your laptop.  It goes by Ethernet into your laptop.  It picks up the WiFi signal.



STEVE:  Wherever you are.



LEO:  Wherever you are.  Blocks, does the firewalling, but also then connects you, without any - you don't have to do any configuration or software on your computer - connects you to your account at HotSpotVPN.  So I really like that little - it's not too big, either.



STEVE:  Not free, but I think it's $8.88 a month is what they quote.



LEO:  Yeah, right.  But I would highly recommend doing the $99 a year deal, if you think you're going to do this, because you get the hardware and HotSpotVPN, makes it very, very easy.



STEVE:  Right.



LEO:  What was the one everybody was using during the Olympics?  The chatroom will remember.  Because I think that one was free.  I want to say, like, something like Torrent Buffalo or...



STEVE:  You mean they were, like, using it over in China in order to...



LEO:  No, they were using it in the U.S. so that they could watch the BBC for the Olympics because NBC was so terrible.  TunnelBear.  I knew it was something like that.  Now, is TunnelBear free?



STEVE:  That's cute.  Never heard of it.



LEO:  Yeah, TunnelBear.  But you're right, it depends on what he wants, doesn't it.



STEVE:  Yeah.



LEO:  Yeah.  Single, yeah, this looks pretty good.  This says, "Simple, private, free access to the global Internet you 'heart.'"  Now, they do - I see "free," and then there's "pricing."  So I would guess that the free gives you a hearty helping of 550MB every month.  If you want more, then it's five bucks a month for unlimited tunneling, and then you can buy $50 for a year.  So TunnelBear, that's actually smart of them.  You can get your first 500MB for free, so that's not too bad.  Anyway, enough of that.  Moving on.



Ian Smith, near Grenoble, France - speaking of the Olympics, Winter Olympics were there some years ago - wonders about a six-digit password:  [Accent] Steve, my French bank has just changed their online banking, so I am now...



STEVE:  I think that's kind of an Irish accent.



LEO:  I don't know.  It's Steve Martin doing a bad French - so I am now limited to my six digits for password.  Six digits?  Six digits?  I need to enter it in an onscreen widget thingy.  Previously the limit on password length was longer.  Mine was 12 characters, and I could have letters and digits.  They move the order of the 09 buttons each time to make things more interesting, but I still believe this is a backward step, security-wise.  So my podcast question is whether the onscreen keyboard is more or less secure than a standard password entry field, and why.  For info, Citibank used to do this, but they switched back to standard keyboard entry, which allows me to use LastPass.  That's the other problem with this little PIN thing is LastPass won't support it.  Thanks for the podcast and for Vitamin D.  Ian Smith, a SpinRite user for many years.



STEVE:  So this is not as bad as it sounds on the surface.



LEO:  Oh.  It sounds horrible.



STEVE:  It does.  But consider that our one-time passwords, like our little famous football for eBay and PayPal and VIP and so forth, those are all six characters.  And the idea is that obviously they change constantly.  Well, rather than the password changing constantly, the position of the numerals is changing every time.  So you use the same fixed six-digit password, which you remember.  But the location of those is different every time and provided by the website.



LEO:  Ah.  So the password is actually where you're touching.  Ah.



STEVE:  Yes.  Yes.  And that changes every time.  So...



LEO:  Oh, that's a one-time password, in other words.



STEVE:  Effectively it is.  What they're trying to do is they're trying to prevent something which is scraping the screen, watching where you're clicking...



LEO:  Or a keystroke logger.



STEVE:  Or a keystroke logger.  So it thwarts keystroke logging.



LEO:  Interesting.



STEVE:  Notice that it thwarts LastPass.



LEO:  Yeah, which is not good.



STEVE:  Which is not what you want.  On the other hand, the fact that it does gives you some sense for some of the benefit.  And by rearranging things every time, even if you wrote something custom for noting the coordinates where you clicked, they mean something different each time.  So if we also assume that there is good security behind this, that is, for example, you can't just sit there and guess and guess and guess, that is, you get three strikes, and then you've got to talk to customer service, presumably there is also some retry limit, and then you're elevated to some other level of needing to authenticate.  I think this is pretty good.



LEO:  You know, it's funny.  Now that you explain it, it sounds good.  I just didn't understand it.  Now, do you want me to do Question 5 as a video question?  Or should I read the question, then play the video?



STEVE:  Read the question.  I'll talk and explain, and then...



LEO:  And then you can tell me when...



STEVE:  ...I think it would be fun to play the video, yeah.



LEO:  So this comes from Juan Cabrio in the U.K.  He shares a revelation and a question.  Why?  Why, Steve, why?  As you are the world-renowned super guru, Mr. Gibson, of a great many things including spinning disks and especially those that don't "SpinRite," I thought I'd tell you a tale of great calamity.



We had our gas fire suppression released over the weekend in our data center.  Our gas fire suppression released over the weekend.  Oh, that's like - I don't know what that is.  What we've found is an alarming number of disk failures at the second the gas was released.  Some entire arrays have been wiped out.  What I believe at this point is that the noise, the noise from the 2200PSI gas release is what killed the drives.  That sounds crazy.  How could noise kill the drives?  I read the link below which has me maybe convinced this is the issue.  I don't see the link here, but we'll let you explain that.



STEVE:  Oh, yeah.



LEO:  The fire suppression vendor has advised the dBs from the release in a relatively confined space is extreme.



STEVE:  Oh, so the sound, as in decibels.



LEO:  The sound decibel level.  Extreme.  Well, I'm glad you weren't in there.  You'd be deaf.  The gas we use is completely inert, not harmful to anything - human, hardware, or otherwise.  Can a man of your great wisdom advise one way or the other?  I should note there wasn't actually a fire.  There was a fault in the system.  Thanks from a long-term listener.  So they had a fire suppression system which triggered.



STEVE:  Yes.  Remember, like, halon gas is released.  And apparently, because data centers are large, it is necessary to release the gas fast.  That is, you want to get it out into, you want to fill the air very quickly.  So the releasing - the gas is under tremendous pressure.  It is released through nozzles that are doing their best.  But apparently the releasing is loud, and it's accompanied with alarm bells that are somewhere north of about 120dB in strength.  So you want to get people out of there because you're about to fill this with a gas that's not oxygen.  So there's a YouTube video which is really fun.  And you might play the beginning of it, at least.  I tweeted the link in my Twitter feed for anyone who's interested.  And it shows the reduction in hard drive throughput when you shout at a drive.



LEO:  What?



STEVE:  Yes.



LEO:  So drives are sensitive to sound.



STEVE:  Yes.  And it's funny because I had two instances.  A buddy of mine who I worked with years ago asked for a copy of SpinRite to see whether he could detect - he could use it to measure data transfer rate because they were having some problems with servers.  And they'd noticed that, like, just doing something like pushing their hand down on the case made the thing perform better.  And it turned out that the vibration from the fans in the server case was enough that it was throwing the drives' heads off track, and so they were - the data throughput dropped because they were going off track and having to go around another revolution in order to try to get back on track and find the data.



LEO:  Oh, that makes sense.



STEVE:  And so in this YouTube video, which is just funny, it's a guy who's got some data throughput measuring instrumentation and shows the graphs.  And he goes over and screams at an array, he calls them JBODs, Just a Bunch of Disks, or Just a Bunch of Drives.  He screams at them, and then you can - you see graphically the drop in throughput just from him yelling at his drives.



LEO:  Let's take a look at the video.



[Video clip:  www.youtube.com/watch?v=tDacjrSCeq4]



LEO:  He's shouting at it.  And look, look at the latency spike.  Another latency spike.  Well, I think that, unless it's a hoax, I think that's pretty convincing.  I mean, it could be a hoax, I guess, but...



STEVE:  No.  Well, see, this is what's happened is that hard drives have become incredibly sensitive to vibration as a side effect of the insane densities that we are demanding from drive manufacturers, or they're demanding from themselves and their own engineers to be competitive.



LEO:  The packing of the bits is so tight that you can't have any variation or you won't be able to read it.



STEVE:  Right.  The good news is you have inertia that keeps the drive spinning at a close enough speed.  So that's one dimension.  But the off-track problem, that is, vibration of the drive, the head is trying to maintain itself exactly over the track, which has year after year after year become thinner and thinner and thinner.  The track density has gone up so high that staying on track almost requires a zero vibration environment.  So much so that anything that disturbs the environment, like that guy yelling at his drives, I mean, it creates a demonstratable problem.



Now, if you're just reading, that's not a huge problem because the drive will realize it could not read the sector.  It just waits for it to come around again.  If you happen to be writing, though, that's a problem.  In fact, that's one of the things that SpinRite is about fixing because, if you're writing during vibration, you're actually going off the trail, and you can't tell that you're not on track because the head is busy writing.  And it's written then permanently off track.  So you've got to essentially go back to where it wasn't supposed to be in order to get the data, which is something that SpinRite does.  But this demonstrates something; I just loved how graphical it was.  I mean, it's very clear.  So anyone who wants to see that, look at Twitter.com/SGgrc.  I recently tweeted "Do not shout at your drives" and the link.  So it's amazing.



LEO:  Wild.  By the way, do not point your Portable Dog Killer at the drives, either, I would imagine; right?  Even if those are inaudible, still that's high-frequency vibrations.



STEVE:  Yup.



LEO:  That's really great.  It makes sense.  John Pfaff in Pittsburgh, PA shares his thoughts about "Daemon."  That's our favorite, one of our favorite novels by Daniel Suarez.  I heard you talking about "Daemon" and "FreedomTM" by Daniel Suarez for some time, and I've always wanted to pick it up but just didn't get around to it.  Then I was walking through the airport, and I saw it there in hardcover for $7.99.  I couldn't pass up that deal.  So I bought it.  I couldn't put it down.  Usually when I read I all asleep within an hour or so.  Not with this.  I had to force myself to stop so I wouldn't stay up all night.  This book scared the crap out of me more than any psycho thriller I could find.  I don't see a black sedan or silver BMW without looking to see if there's a driver.  I want to go live with the Amish.  Wow.



When I came back through the airport, I looked for "FreedomTM," but they didn't have it.  They were out of "Daemon," too.  I'm buying "FreedomTM" today for the Kindle - you have to because it's a second part, basically, it's a two-parter - so I can read it on my iPad and smartphone, as well.  Thanks for a great podcast.  I swear I get as much out of the ancillary stuff as I do out of the computer security stuff.  I've been a SpinRite user for a couple of years, and it did save me once, but not in a story-worthy way.  Security Now! and TWiT are the only two netcasts I listen to religiously.  Keep up the great work.



STEVE:  So I loved his writing.  I just wanted to remind our listeners that that's another great book.  I really did enjoy it.



LEO:  Love it.



STEVE:  It's really well done.



LEO:  And, you know, as we get more and more deeper into the weeds with these drones, "Kill Decision," which is Daniel Suarez's latest, and it's all about unmanned drones and the illicit use thereof, sounds more and more like fact, not fiction.



STEVE:  Yup, especially those new little quadricopter gizmos that actually exist.



LEO:  [Humming]



STEVE:  Uh-huh.



LEO:  [Humming] It's part of the story in "Homeland" Season 1, as a matter of fact.  Jon Engle, Fredericksburg, Virginia wonders about one-way Ethernet transfer.  Steve and Leo, thanks for providing such an interesting podcast. I find both your products and services to be extremely useful, especially SpinRite.  I use SpinRite about once every six to eight months or so on my home server in order to prevent any disk failures.  So far, so good.



STEVE:  Cool.



LEO:  Anyway, in your recent podcast 379 you spoke about a company called Owl Computing Technologies.  They specialize in one-way transfer-type hardware.  Did a little research online and found some resources that discuss how to create a transmit-only Ethernet cable.  Could one use something like this in conjunction with a protocol like UDP for purposes of enforcing a hardware solution?  Would this be a practical home solution to make sure an attacker could not modify logs, files, notifications, et cetera?  If this is possible, why would Owl Computing need to create a new protocol?  Well, yeah, you just take out the receive pin; right?



STEVE:  Well, the way Ethernet 10Base-T and 100Base-T works, not 1000Base-T, but up to 100Gb, I mean 100Mb per second, is that even though the cables are always RJ-45 connectors, which means eight pins, Ethernet actually only uses four wires.  That is, they use them as two twisted pairs, one in each direction.  So one pair of wires is always transmitting, and the other pair is always receiving.  And in fact that's why you have to have - sometimes you had to have, like, a null cable or sometimes a crossover coupler or a crossover cable.  It was because in some topologies you'd try to - you'd be plugging a cable in where it was confused about who was receiving and who was transmitting.  Newer switches that you plug into, they have automatic recognition of that.  But some of the older ones didn't.



LEO:  Yeah.  Most new computers do, too, yeah.



STEVE:  Right.  So if you were to cut the two wires in one particular direction, you would get an Ethernet cable that could only receive or only transmit.  Or actually, better stated, it would only transfer data in one direction between two endpoints.  Now, why does that not work?  That doesn't work because Ethernet is not just about UDP.  It's true that UDP is a, as we've discussed often, is a one-direction protocol.  That is, you simply send a packet off, and with no handshake required.  TCP, by definition, requires a multiple packet interchange to get going.  Not so with UDP.



But UDP is layered on top of other underlying protocols, like IP.  IP has things like ICMP, Internet Control Message Protocol, where things like traceroute and ping and things that manage the IP layer live.  And then below that is the Ethernet protocol itself.  And, for example, Ethernet has protocols like ARP that we've discussed, Address Resolution Protocol, which must be two-direction.  They're bidirectional protocols.  When an endpoint is getting on the 'Net, it sends out an ARP broadcast to the gateway, but it doesn't know the IP of the gateway.  So it sends it out - that's why it's called a "broadcast" - to every device on that local link and says, hey, I'm looking for who's got IP whatever.  And then the endpoint with that IP responds, saying, hey, heard your request.  Here's my MAC address and my IP.  And then this thing knows how to address traffic to that IP by using its Ethernet MAC address.



The point is that, even though the higher level protocol like UDP may work in only one direction, none of the other protocols that UDP relies on are unidirectional protocols just because it's, like, never been a need.  So it would take more than just cutting a couple wires in an Ethernet cable to get a working architecture.  You could do things like hardwire the ARP table.  There are ways to do that.  So you pre-train your system that this IP is in that direction.  But my sense is it's not as easy as just cutting the two wires.  You could probably shoehorn a one-directional operation.  But it would be a little - there's a little more to it than just cutting a couple wires and saying, hey, why does this not work?  It's because the underlying protocols all assume bidirectional traffic.  It's probably easier just to use a firewall.  Although then you don't have hardware enforcement of that.



LEO:  Somebody in the chatroom says that ATM, which is a media transport, high-speed media transport, can be configured for one way.  The point of this is what?  So that, like if you had a secure power plant, to have...



STEVE:  Yeah.  And in fact you and I talked about it last week.  This Owl Computing Company, they actually use optical fiber where there is only a transmitter on one fiber and only a receiver at the other end of that.  So by physics the information can only go in one direction.  And so to do that, they have to sort of like terminate the protocol at each end.  So they satisfy everybody on the transmitting end themselves that their message has been received.  Then they blindly transmit it through the fiber optic cable to the other end, and without any acknowledgment that the other end has received it because they can't, by definition, they can't get any acknowledgment back.  So this was a neat technology for, like, protecting nuclear power plants from intrusion where they wanted to extrude information for monitoring purposes but not allow that to be hacked in some way to get control.



LEO:  Question 8 from John Bell in Northern Virginia, or NOVA.  He's been made curious about full disk encryption:  Steve, in the last episode of Security Now!, you and Tom - I guess more than the last couple episodes back - you and Tom were discussing full disk encryption, and specifically the use of cascading encryption.  I have a comment and a question.



Comment:  I think you might have missed a big advantage of cascading encryption.  In a previous episode you talked about how a brute-force attack can know that it has found the key because it checks the decrypted data against a dictionary to see if the text produces recognizable words.  In cascade encryption, the brute-force application may get the outer key correctly, but it won't know because the resulting decryption is still random data and not recognizable words.  Thus the only way for the brute-force app to produce results is to create a nested loop of outer key and inner key decryptions until it hits recognizable words.  The amount of time needed for that, as you might imagine, is pretty big.



So, question:  At the end of that segment, Tom boldly stated that all hard drives should have full disk encryption.  I don't have a lot of personal data on my hard drive, just some account passwords.  I don't see too much that I need to protect.  Aside from protecting personal information, is there a compelling reason to encrypt my hard drive that would be worth the performance hit?  He's using OS X.



STEVE:  So, okay.  First of all, about his comment.  Essentially, chaining encryption like that, using a cascade of encryption, it's exactly identical to increasing the key length.  So if you had a cipher like AES, which has a 256-bit key, and a different cipher like Twofish, and I forget how large the key is or can be on Twofish, but say that it was 256.  Well, so what you have essentially is a composite 512-bit key.  So this is really no different than using a very strong cipher with a 512-bit key.  The question is, does that buy you anything?  Because it's going to be slower.



So we've already seen, I mean, it's easy for us to underappreciate what key length means.  128 bits in reality is really all you need.  We're talking 256 for new applications just because why not?  As we talked about at the top of the podcast, cracking is always getting faster.  Let's stay way ahead of it.  And 256-bits is way ahead of it because every single bit we add doubles the difficulty.  So we start at 128 bits.  And now we're going to double the difficulty 128 more times.  Double it 128 times.  It's ridiculous.  So that really the only advantage for cascading is, as I said originally, if either of the ciphers turned out to be vulnerable, you would still have the protection of the other one.  That's why it's useful.



But really it doesn't help you from a brute-force attack except that it does give you a longer effective key than a single cipher would.  AES maximum key size is 256 bits.  If for some reason you want more key than that, well, yeah, you could cascade a cipher, and then you'd be concatenating the keys, effectively.  But, as I said, whoa, 256 bits is really enough.  The weakness would be in your choosing a password that was as good as your key length.



LEO:  Oh, that's a good point.  Excellent point.



STEVE:  And Tom's comment about whole disk encryption?  Here's the test.  He mentioned, okay, I only have some account and passwords.  Well, do you mind if those are public?  I mean, because that's the test is, yes, it's a tradeoff.  So you're saying, apparently there's some resistance to encrypting your whole drive.  Okay.  There really isn't a performance hit that we've been able to measure.  When I was testing the performance of the latest  TrueCrypt, I couldn't see anything being slower using TrueCrypt.  There's a little bit of overhead of having to manually put in a password every single time you turn on your computer.  But that's necessary because the bad guys have to also.  If you don't have to, they don't have to.



And so you just need to say, okay, if somebody got my computer - and say that it was password protected, but they can briefly remove your drive and mount it as a secondary drive on a computer that did boot up.  Well, then they would have access to your drive.  There's zero protection.  So that's the thing to keep in mind.  Ask yourself what if, and see how the answer comes back.



LEO:  Question 9, Rob Alexander in Boston.  He's wondering about SSL Interception and LastPass:  Steve, great podcast.  Been a listener for a while.  I'll skip to the chase and give you my question so I don't have to say "blah blah blah."



STEVE:  But he did anyway.



LEO:  Blah blah blah.  I am at a company that was recently acquired and have been forced to migrate to a new IT infrastructure.  They are forcing us to use Windows 7 and have installed various monitoring and controlling pieces of software.  One of the things they claim they can do is intercept SSL traffic so they can decrypt it and inspect what's inside.  The claim for this is they have to prevent malware or filter outbound connections to malicious websites.



First, how can I tell if SSL interception is occurring?  Will the Firefox plug-in Cert Patrol reveal this if my company is installing a new root CA in Windows that is used by their SSL proxy to generate new certificates for real websites?  Secondly, will LastPass's encryption of my vault still prevent them from seeing my passwords contained in the vault, even if the SSL transport can't protect the download of the vault from LastPass's servers?  My suspicion is yes, but I was curious if there are any other considerations for data leakage or exposure of sensitive data that I have.



STEVE:  So we've covered the first part many times.  I do realize, though, that we're continually getting new listeners.  And this is an often-asked question, that is, how do I know if my company or my school or my organization or whatever can be seeing my encrypted traffic?  And the answer is pretty simple:  Go to a site that uses SSL.  For example, go to just Google, https://www.google.com, and verify that the browser says you've established an SSL connection.  That's important because your organization could be removing your attempt to bring up an SSL connection.  That would be a horrible thing for them to do.  But it's possible.



So make sure the address bar turns green or blue or whatever color it's supposed to when you've got a secure connection.  Then right-click on the page and choose "View Certificate," which is what most browsers allow you to do, and inspect the so-called certificate chain.  It's typically a sort of a hierarchy of links up to some final authority which is typically VeriSign or maybe GoDaddy, some certificate provider who provided the authority for the certificate to Google.  And I guess we could look and see who Google's CA is.  But the point is you need that chain to terminate there at that authority, not at something like it's got your company name in it or, like, anything that looks fishy.  If it looks fishy, then it probably is.



LEO:  And it can't say the name of the actual website, like Google.com, unless it's legitimately Google.com; right?  They can't have a certificate that spoofs the actual name.



STEVE:  Yeah, right.  And it would be that...



LEO:  Even if it's self-signed.



STEVE:  Yes, because your browser would then not accept that.  Your browser needs to get a certificate from Google saying I am Google, and here's my credentials.  So but the problem is, if your company were intercepting, they would be building fake Google certificates on the fly so that you'd still have a certificate that looked like it was coming from Google, but it would not be signed by Google's certificate authority.  It would be signed by your company acting as a certificate authority, which your browser would have been fooled into trusting because a certificate would have been installed on it.  So you want to make sure that the highest level of authority in that chain is a legitimate certificate authority, a public authority, not something local and private to your company. 



LEO:  And you could tell that.



STEVE:  Yeah.



LEO:  I mean, it's pretty obvious.



STEVE:  And so the second part of the question was a little bit more interesting, and that is, if the company was completely violating the security of your secure connections, what about LastPass's vault?  And that's the beauty is LastPass never relies on any link-level encryption.  None.  That is, so it is secure if SSL didn't exist at all.  And that's the beauty of what LastPass has done is they use, as Rob expected, they use local encryption in the browser so that when the user's LastPass database, their vault, is being sent up to LastPass, it is preencrypted.  It's full TNO, Trust No One.  It is preencrypted in the browser and sent as an opaque blob.  So not only can your company not decrypt it, neither can LastPass.  And that's what's so elegant about their solution is nobody can see into that blob except you, you who have the master key that never leaves your control, even if your company is watching you.



LEO:  Yes.



STEVE:  So Rob, you're safe.



LEO:  Right on.  Right on, right on.  Last question from "Morthawt" in the U.K.  Actually it's a comment, really, about the Hush Puppy, the Portable Bark Killer.  He says - and you wanted to set that, you were planning on setting it at 15KHz.  He says that's not high enough.  Children and adults that have good hearing can hear it.  Dog devices like your PDK are way higher at 1820KHz.  And I would hope you increase the frequency to at least 19.  By the way, I'm 28 years old, and I still hear frequencies up to 16K easily.



STEVE:  Okay.  So I have set it at 15.  And the components that I have chosen pretty much lock it at 15.  That is, one of the ways I reduce the component count and the cost to a few dollars, which is truly what this thing ends up costing, is that the amplifier is tuned, the amplifier itself is tuned to resonate at 15KHz.  So if you try to use 14 or 16, you get a much lower amplitude output.  It peaks at 15.  And in fact even that will be tunable a little bit shortly, just so you can actually find the exact center of that tuned spot.  Since component tolerances vary, it may be that the actual sweet spot, well, you could guarantee that a sweet spot is going to be slightly different from one to another.  Although I've arranged for it not to be too peaky.



I chose 15 for a reason.  I, too, can hear it.  And I decided, first of all, canine hearing is acute at 15.  But it, too, begins to fall off at higher frequencies.  So even though dog hearing is very good, at 20KHz it's beginning to be less sensitive.  And we definitely want, the whole point is for something that is loud and startling to a dog that's barking and is completely unfamiliar in its experience of life.  It's like, I've never had that happen before.  So we want something that gets its attention.  So consequently we want it to perceive it as loud.  But the other problem is the mechanics, the tweeters.  Tweeters have a difficult time going a lot higher.  They say, oh, they go to 20KHz.  But they're already beginning to fall off before that.  So I also didn't want, again for the goal of getting the maximum output power, I didn't want to go too high.



But lastly, I want people to be able to hear this.  I don't want something which makes no perceptible sound because people might be inclined to aim this thing in their ear and pull the trigger.  And this thing generates substantial acoustic energy.  That's the point.  But we need to think of it, I mean, this is not a toy.  A knife is obviously not a toy.  We intuitively understand that it's pointy and sharp.  And a gun is not a toy.  We understand from our real-world experience, you don't aim, you don't point that at anybody, any person.  So I wanted something where you could perceive that this thing was not something you wanted to aim at anybody, like, put it right up to them, anyone that you care about.



And also, I mean, you'll need to use it judiciously.  In fact, if you try to use it for too long, the sound volume decreases because we're putting so much power into this tweeter that the piezo electric ceramic heats up and becomes less efficient.  So for the first second it's the loudest, and then it begins to get quieter, which is - I think that's fine, design-wise, because this is meant to be used in short bursts to get a dog's attention and cause it to react, rather than to do harm to anybody.



So I'm happy.  I absolutely hear it.  I mean, I keep this thing pointed down at the table when I'm using it because I don't want it aimed at me.  And I think it's important that this thing be treated with respect.  And I'm going to print up and do the design for some warning labels which I would advise people to put on these things when they make them because it's not a toy.  So that's why I set it at 15.



LEO:  I think that's a really good point.  You don't want it to be completely invisible. 



STEVE:  No.  It's like an X-ray machine.  There's a reason that your dental tech leaves the room every time you're getting X-rays, and why your gonads are draped with a lead apron, is that this stuff is dangerous.  But if we don't perceive it, it's very difficult to act responsibly.  It's a little bit like getting a sunburn at the beach.  It's like, well, one good sunburn, and that teaches you a lesson, that even though you can't see something happening, it is.  So I didn't want to have this be completely imperceptible.  And believe me, it's not.  I'd be surprised if anyone can't hear it because it really pumps out some power.  So I thought, let's just help people to treat this thing with respect.



LEO:  Steve, you know what, you have my respect.  That's who's got respect.  Steve Gibson is the man behind this show; GRC.com; SpinRite, the world's best hard drive maintenance utility.  Lots of freebies at GRC.com.  If you want a 16Kb version of the show, we've got it, or Steve's got it at GRC.com.  He also has text transcriptions done by human beings, so they're accurate.



STEVE:  One human being in particular.



LEO:  Elaine.



STEVE:  And actually Elaine wants one because she's got a problem when she's riding her horse of dogs want to nip at the heels of the horse.  So she's going to make sure first that it doesn't spook the horse.  I imagine the horse could probably get used to it.  But she would like to see if it would allow her to zap the dogs and convince them that chasing this horse is not a good thing to do.



LEO:  That's interesting.



STEVE:  All kinds of uses.



LEO:  Yeah.  Wow.  We do the show Wednesdays at 11:00 a.m. Pacific, 2:00 p.m. Eastern time.  That's 1800 - 1900? - UTC.



STEVE:  It keeps jumping around.



LEO:  If you want to watch live.  Yeah, because it's this stupid Ben Franklin.  I blame Ben Franklin.  But we do have audio and video after the fact.  Steve's got the bandwidth-constrained version, and we have the video and the audio at TWiT.tv and wherever better podcasts are offered.  Just look for Security Now!.



STEVE:  Hey, they're all here.  They're all at TWiT.tv, Leo, where all the best podcasts are to be found.



LEO:  They're all here.  Yeah, we won last night.  I have an award from Stitcher, which is a great little podcast app, for the best tech show.  And that was audience voted, so thank you, everybody in the audience.  It wasn't for Security Now!, it was for TWiT.  But next year, now that I know they do these awards, we're going to make sure that Security Now! gets a nomination.



STEVE:  All we have to do is tell our faithful listeners, and they will do the rest.



LEO:  Absolutely.



STEVE:  They've done so in the past.



LEO:  When it comes down to an audience-voted award, I think there's nothing we can't win.  But that's a nice award.  That's a prestigious award.  We're also nominated, and I will be at the awards show in Vegas for the - there's two big award shows.  There's the Podcast Awards.  I don't know if we're nominated in those or not.  I'm hosting that, though.



STEVE:  Ah, cool.



LEO:  And there's the International Academy for Web Television that has an award every - actually this is the second annual at CES.  And we are nominated for several awards at that.



STEVE:  Very cool.  And you are pumping out video, so that would explain it.



LEO:  Yeah.  We are web television.  So I'm excited about that.  And people, if they want to go, if you're a member, you can vote.  Vote for us.  And if you want to go, you can go to IAWTVAwards.org.  If you're going to be in Vegas for CES, go a day early, I think it's Tuesday night, and you can see the awards.  And I will be there, so it'll be a lot of fun.



STEVE:  Is it in February this year?  Or next year?



LEO:  January...



STEVE:  Oh, January.



LEO:  ...8th, something like that.  I think the awards are January 7th, I guess.



STEVE:  Cool.



LEO:  Yeah.  It'll be fun.  Steve, thanks so much.



STEVE:  Thanks, Leo.



LEO:  See you next week on Security Now!.



Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#382	

DATE:		December 12, 2012

TITLE:		QR Codes

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-382.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with the week's news, Steve and Leo take a deep dive into the technology of the ever-more-ubiquitous "QR Codes" which are popping up everywhere and are increasingly being used, not only for good, but with malicious intent.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here with the latest security news, including an update on Microsoft's updates and a look at QR Codes - how they work, what they mean, and what the implications are for security.  It's all coming up next on Security Now!.	



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 382, recorded December 12, 2012:  QR Codes.



It's time for Security Now!, the show that protects you and your loved ones online.  It's starting to sound like you're some, you know, Commander Gibson is here from the United States Mounted Police with a tip about online hoaxes.  No.



STEVE GIBSON:  Actually, I think GRC is an acronym for, like, the Canadian...



LEO:  Is it really?  Oh, that's funny.



STEVE:  ...Mounted Police.  Yeah, there's a GRC acronym for Canada that's something about police and horses or something.  I'm not sure.  I used to get that a lot.



LEO:  Well, he's not mounted on a horse.  He's not wearing a red wool uniform.  He's not wearing a Smokey the Bear hat.  But in his Atari T-shirt, he does represent our last best hope for safety online, Mr. Steve Gibson.



STEVE:  If that's the case, you might as well get under your desk.



LEO:  We're in trouble.  It's getting worse.  It's getting bad out there, Steve.



STEVE:  Well, we're going to talk this week about something that's been on my list of things to talk about for quite a while, and that's QR codes.  They are increasingly ubiquitous.  Everyone probably even knows what they are.  They're those little square barcodes containing we don't know what.  And therein lies the problem.  If you Google "QR," as in quick response - that's what QR stands for, quick response - "codes danger" or "malware" or anything like that, you get pages of people beginning to recognize that this is the latest route of exploit.  And in fact I was reading one article when I was just getting myself full of backgrounder stuff.  This reporter saw a little QR code sticker on the seat in a subway train.  And without any, didn't say what it was, it was just there was that little grid, matrix, and it's like, ooh, I really want to scan that.



LEO:  Oh, oh, oh.



STEVE:  Find out what it is.



LEO:  Danger, danger.



STEVE:  So I want to talk about, sort of cover the whole spectrum.  One of the cool things that I have learned, and it'll be fun to share, is there's much more obvious structure to it.  I mean, obviously it's structured.  We can look at it, and our brain is very good about it.  But there are a couple details which, after I tell you about them, you will never not be able to see them, and you do not see them now.  And as with anything, if you don't know anything about something, like imagine you couldn't read, and you looked at a page, it would just look like nothing.  I mean, you wouldn't see any meaning there.  But once you understand the shape of alphabet characters, then you look at it, and it's like, oh.  Suddenly you will lock onto it.  And similarly, by explaining the structure of the QR code, just because it's fun, everyone will be changed.



LEO:  Wow.



STEVE:  They will then - you'll be familiar with it.  You'll look at it, and it'll mean some - people won't be able to read it, but you'll understand much more about it than you do now.  And so that's sort of one part of the fun.  And then, of course, we'll talk about what's happening because it is becoming a problem.  There is this - it's the typical tension that exists between convenience and security.  And it's a little bit related to the problem that we discussed over on the near field communications side with NFC tags because, although these won't jump out and bite you the way radio can, we can't read them.  Our machines read them.  And often, by the time they do, it's too late.  So there are some things that can be done to protect ourselves.  So we'll have fun catching up on this week's news and then looking into these wacky little square tags.  I mean, I've got one, I just looked, here on the back of my Starbucks espresso...



LEO:  They're everywhere.  You can't get away from them.



STEVE:  Oh, yeah, exactly.  They're cool.  And they were invented by a car company in Japan, like 18 years ago.  So they've been around for a long time.  But, boy, have they, well, now, and of course the enabling technology was cameras, camera phones.



LEO:  Right, camera phones, yeah.



STEVE:  Because the famous comment is "The best camera is the one you have with you."  And now with cameras and phones - and has anyone figured out why Philippe Kahn thinks he invented that, by the way?



LEO:  He did, by the way.



STEVE:  That thing just sticks in my brain.



LEO:  He did.



STEVE:  How did he invent the camera phone?



LEO:  He was, many years ago, he had his baby.  His baby was born probably 10, 15 years ago.  I actually talked to Philippe about this.  And he said he was taking pictures, thought, boy, really be nice if there was some way to quickly send this to family and friends



STEVE:  Ah.



LEO:  And he invented - Philippe, now, Steve and I are of a vintage where we think of Philippe Kahn as the founder of Borland International, which was a great company which made a Pascal called Turbo Pascal that kind of transformed high-level programming.



STEVE:  Oh, and he really upset Bill Gates by destroying Microsoft's language model.



LEO:  Yeah.



STEVE:  Remember Microsoft was charging $800 for a C compiler.  And Philippe said...



LEO:  And what was - Turbo Pascal was, like, 50 bucks; right?



STEVE:  It was $49.  And it just blew the socks off the...



LEO:  Oh, it was super fast.



STEVE:  And Bill never forgave Philippe.  It just completely uprooted his whole plan.



LEO:  He's also a musician, as I think people know.  Plays, I think, the saxophone.



STEVE:  Yup, and a pilot.



LEO:  And a pilot.  And a very, these days, avid sailor.  So he invented this technology called LightSurf in 1998.  So this gives you an idea of how he could be there.  In fact, this is an image that he took of his daughter's birth in 1997.  I remember we interviewed him on I think it was probably The Screen Savers about this.  And this was one of the first images taken and sent by camera phone. 



STEVE:  Very cool.



LEO:  What's neat is LightSurf Technologies, I think, had its bit of code in every single camera phone for many, many years.



STEVE:  No kidding.  Wow.



LEO:  Everybody licensed it from him.  VeriSign bought them in 2005, according to Wikipedia.  He then started something called Fullpower.  Philippe is actually, you know what, we've got to get him on the show.



STEVE:  He's a great guy.  He and I used to have breakfast every year at COMDEX.  That's when I was doing the column for InfoWorld, and so there was always a "have breakfast with the reporter and tell him all the wonderful new things your company is doing."



LEO:  So get ready for this.  So, okay.  Starfish.  Remember it was Turbo Pascal.



STEVE:  Remember Starfish, yup.



LEO:  Then Starfish, which I think was an early synchronization.  I mean, this guy's been always thinking ahead and has been disruptive every time.  He created TrueSync, which was the first over-the-air synchronization system, in 1994, sold it to Motorola for 325 million in '98.  Now there's LightSurf, which he sold to VeriSign for an unknown amount of money.



But I would say he's probably on his second billion now because his new company, his current company, created something called MotionX.  And if you use a Nike+, if you use a FuelBand from Nike, if you use the UP band from Jawbone, if you use a Fitbit, they all contain MotionX, which is the hardware that senses your motion and ties it to GPS.  And also he has software, the best GPS software on the iPhone and iPad, which I recommend all the time, which is MotionX GPS.  That's Philippe Kahn.  So this guy, he's got to be on his second billion by now.  I mean, this guy is brilliant.  And it couldn't happen to a nicer guy.



STEVE:  No, it couldn't.  And it's nice also to see that he wasn't just a one-shot deal.  I mean, he...



LEO:  Oh, boy.  He should get more credit, frankly.  I don't know why he doesn't get more credit.  He's had four companies, each of whom have disrupted, transformed technology.  He, by the way, is an avid sailor.  The reason I know that, we had a company sail a few years ago on a beautiful boat, Humphrey Bogart's old yacht.



STEVE:  Oh, he's a competitive sailor, too.



LEO:  Yeah.  So this team goes by, vroom, and they're all hanging out on the side, and they're wearing rubber suits.  And the skipper says, "Yeah, there goes Philippe Kahn's boat."  And he says, "You know, he's really serious.  He's out here every day with his paid team of sailors.  He's very serious."  And I'm not talking America's Cup sailing.  It's like really smaller boats and hardcore like you are.  This is, like, they were hanging out.  Their heads were hitting the water.  And they're hanging out, and the boat is at least 30 degrees.  Unbelievable.



STEVE:  Well, and Philippe was always a big guy.  So if he leans off the side of the boat, he's going to be some serious ballast.



LEO:  I didn't see Philippe, but anyway.  Go ahead, Steve.



STEVE:  Your team nudged me gently last week, saying, you know, Steve, we need some content from you for the Security Now! Christmas Special podcast.



LEO:  Yeah, 'cause I ain't working on Boxing Day.



STEVE:  Uh-huh.  And I thought that I had something that I thought would be really fun.



LEO:  Cool.



STEVE:  Back in 1990, 22 years ago, SpinWhite - SpinWhite.



LEO:  SpinWhite, ha ha ha ha ha.



STEVE:  SpinRite was relatively new.  We had a relationship with the largest software distributor in the world.  This is before the Internet, and so software was sold across the counter in boxes by Egghead and Fry's and...



LEO:  Yeah.  I wonder what happened to Ingram and all of those big developers, distributors.



STEVE:  Well, and my relationship was with the largest distributor, called SofSel.



LEO:  SofSel, yeah.



STEVE:  And they bought Ingram Micro and - or, wait, Micro-D.  Anyway, there was a period of coalescing.  Anyway, SofSel did a multicity tour that they called "The SofSel SofTeach," where they took some of their selected vendors.  And, I mean, it wasn't free.  We paid for the privilege.  But it was a privilege to go to, essentially, little mini tech conferences and explain our products to all of the retailers in the area.  And I don't know what moved us to do this.  But we taped them.  And...



LEO:  Oh.



STEVE:  And we taped me explaining how and why hard drives die and how SpinRite interacts with that.  And I had all of the tapes from Chicago's, it was a Saturday and Sunday.  I think they were labeled Sunday No. 7 and Sunday No. 9.  And I remember I was exhausted by the end of the day.  Anyone who sees them will know why I was exhausted because I'm quite animated.  Anyway, I found the tapes.  The camcorder that recorded them would no longer play them because I had it, too.  It was Hi8 format, back predigital.  This is truly 1990.  I had a Hi8 deck.  It refused to load the tape.  But good old Amazon came to the rescue.  I found a used Hi8 camcorder for $199. 



LEO:  Wow.  I want to borrow that from you because I have a bunch of Hi8 tapes.



STEVE:  I got it and ran it through my analog-to-DV converter, trimmed it, fixed it up, compressed it, and shot it up to you guys Monday.



LEO:  That's awesome, Steve.



STEVE:  So what I want to do is maybe get with you Saturday or Sunday after your Tech Guy, and we'll just do a little 10-minute intro.



LEO:  Good.



STEVE:  And then we've got something very fun.



LEO:  We could do it after SpinRite this week or next week, too, would be another thing.  Or before SpinRite.  That might be better because I think we're doing some Giz Wiz stuff on Saturday.  So...



STEVE:  Okay, perfect.



LEO:  Yeah, we'll just do it during the regular.



STEVE:  And the only thing I want to say is that it really - normally I really try to focus, as our listeners know, on conveying information that works just with audio because I recognize that we're still hugely oriented toward people who are, just as you were saying with the Audible technology, who are listening to the podcast.  Unfortunately, I have a blackboard, and I am using my body a lot, like when I explain about the lifecycle of a screw which is trying to hold the stepper motor in place, or explaining how tracks drift.  My arms are flying around.  So this particular holiday special really needs to be seen to be appreciated.  You might listen to it first and then, like, okay, I've got to see what he was doing because there's also a lot of laughter from the crowd, and you may not know why they were laughing at me if you weren't seeing it.



LEO:  That's great.  Oh, I'm so thrilled, Steve, thank you.



STEVE:  So I think it'll be fun.  And, my god, my hair was black.  Oh.  I had as much as I wanted of it.  Just incredible.



LEO:  Ah, yes.



STEVE:  So it was a little blast from the past, quite fun.  Oh.  And no matter how techie anyone is, how much they think they know about hard drives, I'd forgotten some of the detail that I went into that explains things that I'll bet you there isn't a single person listening to this who doesn't actually learn something that they didn't know.  So it's got something there, too, in addition to being me making, well, not an idiot of myself, but...



LEO:  I can't wait.  I can't wait.  This is exciting.  What a great idea, Steve.



STEVE:  So we are just past - this is Wednesday - the second Tuesday of the month, which of course we know is Microsoft's day to drop their monthly packet of updates on us for Christmas.  They had seven updates fixing 10 security holes, most rated critical, in Windows and Word and Exchange Server.  And there was even a crazy one.  There was a file system folder naming parsing vulnerability that affected XP, Vista, and Windows 7 so that, if you browsed in Windows Explorer to a specially named folder, you could have your machine taken over.  So you don't see those often.



And there was something interesting that fits my theory of new is not always better, which was a critical patch for IE9 and 10, but which is not a problem in any earlier versions of IE.  So Microsoft added some things.  Some of the new stuff they added in IE9, which carried over into 10, has a problem, and so they're fixing that.  I mean, that's just, as we've said many times, code that has been pounded on more has been more pounded on.  And that's a good thing.



At the same time, Adobe is updating both Flash and Air, their essentially synchronized technologies for rendering Flash content either in a browser or in a standalone app.  And you can check - it's across the board.  Windows, Mac, Linux, and Android all need to be updated, although the Flash players in IE10 and in Chrome should be auto-updating.  So those you don't need to worry about.  And typically Flash is notifying you, or Firefox is telling you you've got an obsolete version.  And so in general we're getting this to happen more often.  But Adobe.com/software/flash/about will verify, if you go there, that the Flash Player version you're using in your browser is current.  And then for Air it's Adobe.com/air will do the same thing.



And I noted something, and this is the "If it can be done, it will be done" department, which is we now have a relatively sophisticated botnet whose command-and-control servers cannot be found because they're using TOR.  So it turns out that the TOR Project implemented reverse anonymity.  They implemented something called TOR Hidden Services, which provides for servers the same kind of protection that TOR has traditionally provided for clients.  That is, normally it's a client who uses the TOR system to hide themselves from their activities out on the public Internet.



And at some point it occurred to the people who now manage the TOR network that, hey, how about people who want to offer services that they want to hide?  So the reverse process.  So that exists now in the TOR system.  And I made a note to myself that, ooh, that sounds like a fun podcast, to look into how it does that, because we understand how the client gets hidden, but it's a whole different problem to hide a service, yet still be able to find it.  I mean, when you think about it.



So there is a botnet called Skynet which has been found.  It's about 15MB of stuff.  But hidden among the files that lead people to believe it's not bad are a conventional Zeus bot.  And even the fact that we're now using phrases like "conventional Zeus bot" is a little troublesome.  Oh, yeah, just you run with the conventional Zeus bot.  There's also a TOR client for Windows in there.  And then the CGMiner bitcoin mining tool with the OpenCL.dll which the CGMiner uses to interact with the CPU and GPU for high-performance bitcoin hashing.  So apparently this is a botnet which, among other things, is a distributed bitcoin mining technology so that people are stealing cycles from unwitting users' CPUs and GPUs to use them in the background for minting bitcoins, all being hidden and unable to find thanks to this new service, TOR Hidden Services.  So I thought that was interesting.



And we talked about, several times, the iOS universal, I'm sorry, Unique Device ID, the UDID, which it became clear, first to Apple and then to the industry, was being abused.  It was a per-device tag which all iOS apps were able to get.  And they just used it.  Even though Apple said you really shouldn't, the apps said, yeah, but there it is, and you're giving it to me.  So as we mentioned before, back in March, Apple began, after saying don't use it, they began refusing submissions to the store for apps that were using it, and they made it very clear it was going to go away at the end of iOS 5.



Well, it did.  And so app authors had plenty of notice and time to stop using it.  And the problem with it was not only that it did tag to your device, but what happened was all the apps running in a given device received that same UDID.  It was the device ID.  So there was a problem with apps and tracking systems comparing notes and being able to cross-associate apps to a single device.  So in iOS 6, Apple formally removed the API, the Application Programming Interface that allowed access by the app running on iOS to that device's ID.  They replaced it with something called the IDFA, which stands for Identifier For Advertisers.  So very explicit, IDFA, the Identifier For Advertisers.  And what's different about this is that each app now receives a unique per-device IDFA, but every app running in the same device gets a different one, and there is no way to associate them.  So the apps still get tracking information, inasmuch as it's a unique ID for the device.  But the problem of apps recognizing that they're on the same device from the tag is solved because each app gets a unique one, and there's no way to interconnect them.



Now, this can be turned off, for anyone who wants to.  But once again you've got to dig down a little bit.  And it's not obvious where it is.  I found it after realizing that it was there.  And in fact it was some listener of ours who kindly tweeted me, "Hey, Steve, look what I found," and he sent me two pictures.  It's like, whoa, where is that?  And so I found it.  You go to, of course, in the Settings icon in any iOS device, phone or pad, under Settings in the General tab or the General category.  Then you've got to go to About, which has a whole bunch of stuff.  Scroll all the way down to About, and near the bottom you'll see a new word:  "Advertising."  It's like, huh?



So if you select Advertising, then that takes you to an otherwise blank page that just has one thing on it.  And I was looking at it, thinking, well, Apple, normally you're kind of helpful.  You put some text in there to say this is what this does if it's on or if it's off or what it means and so forth.  There's nothing there.  All it says is "Limit ad tracking," and it's normally off by default.  Meaning not that ad tracking is off, but the limiting of the ad tracking is off.  So in other words, you want to turn it on if you want ad tracking to be limited.



And so what this cleanly and globally does is it denies this IDFA new feature to the apps running on your device for the purpose of tracking.  And so there is no longer any way for them to lock onto, for apps in your device to lock onto your device directly.  And I thought that was a cool feature, so I wanted everyone to know about that.  Otherwise it's not easy to find.



Also in the news this week, a group calling themselves "Team Ghostshell" did what they sort of called "end of year housecleaning."  They had all these pesky accounts and record details that they had accumulated from a breathtaking range of networks - NASA, the European Space Agency, Japan's Aerospace Exploration Agency, Interpol, the Pentagon, the Federal Reserve in the U.S., the FBI, a defense contractor known as L-3 Communications, and more.  There's a Pastebin link which I've got in my notes here.  You can probably find it if you just Google "Team Ghostshell WhiteFox."  They are calling their project Project WhiteFox.  The Pastebin page is rather stunning.  It scrolls on and on and on with an enumeration of the networks that they have penetrated and pulled account and record details from, totaling 1.6 million accounts and records, which they have then sprayed all over the Internet, and they've got links to them all with mirror sites and backups and things.  So it's just becoming sort of sad that our networks are as porous as they are.



And I saw a little bit of news that I wouldn't have normally brought up, but because it's something that we talked about years ago, Leo - and I was stunned this thing is still going on.  Remember, I think she was 24 at the time, there was a young mom with a couple kids, her name was Jammie Thomas-Rasset.  And she was that woman who somehow got Kazaa - remember Kazaa?  This is how old this is.



LEO:  Oh, yeah, yeah, yeah, I remember.



STEVE:  She got Kazaa on her laptop or her computer, whatever, and there were 24 songs that were there that she didn't download, she wasn't intending to pirate, I mean, she was, like, completely innocent.  And the RIAA...



LEO:  Well, I'm not sure she was completely innocent.



STEVE:  Okay.  Well, they stomped on her and...



LEO:  Yeah.  There's no question about that.  But we don't know if she was...



STEVE:  ...[indiscernible] of $222,000 is what they want as compensation for her having these 24 songs.  The point is that the Supreme Court of the United States has been asked now to review the jury's decision that she needs to pay the RIAA $222,000.



LEO:  I wouldn't expect any change, but go ahead.



STEVE:  No, no.  And the Supreme Court has...



LEO:  Not from them.



STEVE:  Yeah, and the Supreme - not the current court.



LEO:  No.



STEVE:  And the current court has declined to hear two other RIAA-related filesharing cases in the past which they've been asked to review.  And the petition that her attorneys have provided to the court seems a little odd.  It takes the argument that the damages are unconstitutional.



LEO:  Yeah.  Well, no, I think that's the only argument they can make with the Supreme Court.



STEVE:  Yeah, okay.



LEO:  And I don't think she's - I think that they stopped contesting her guilt.  I think it's more like the damages are out of control here, Your Honor.



STEVE:  Yeah, how is this fair?



LEO:  But I don't suspect that'll be changed.



STEVE:  No.  So I saw this, and again sort of smiled.  I put the headline as "IPv6... Anyone???"



LEO:  Hello?



STEVE:  There was sort of a helper body, for lack of a better term, set up in the U.K.  The BBC reported this.  The body was set up to get the U.K. moving over to the 'Net's new addressing system.  That group has been shut down in protest at the complete indifference to its work by the U.K.  The group was called 6UK, which was set up to advise ISPs and firms about the move from v4 of our IP addressing scheme over to v6.  But it's been wound down after its board realized that its work was futile without official backing which was never forthcoming.  And the director, a Mr. Sheldrake, was quoted as saying, well, the fact that no government website sits on an IPv6 address might be part of the problem.  So the U.K. doesn't have what we have had over here in the U.S., which is our government famously mandating that people that work with them must support IPv6.  And so that's one way to get this to move, I suppose.



Under the category of "Looney Tunes," we have the continuing adventures of John McAfee, who, since we last spoke of him last week, has been arrested.  You'll remember that last week some pictures that were taken of him by Vice magazine - who are now being referred to as his "ex-friends" at Vice magazine - they contained metadata which had the GPS coordinates of his location at the time the photo was taken.  He's now accusing them of orchestrating his arrest so that they could be there to report on it.  Who knows.  I'm not taking a position on that one way or the other.  I don't know.  So he was arrested.  And the first judgment from the judge was that he had entered Guatemala illegally and was going to be expelled as a consequence back to Belize, here John was concerned that he would be "found having accidentally hung himself," unquote.



LEO:  Oh, geez.



STEVE:  But he did actually say that.  But it turns out that John suddenly started having small heart attacks.



LEO:  Oh, wow.



STEVE:  Or so we are led to believe.  There's been some question as to whether they may have been asymptomatic heart attacks.  But the claim was that it was over the stress of all of this.  The heart attacks which may have occurred were at least enough to get him hospitalized, which were also long enough to get his attorney to find another judge to overturn the original declaration because it turns out that entering Guatemala as John did is not illegal.  And so he's now been released.  He's apparently also feeling a lot better, and he's on his way home to the U.S.  So his blog is a continuing adventure, for anyone who has some time to kill.



LEO:  He says he's flying to Miami.  So if you're in Miami, watch out, here he comes.  It's always something.



STEVE:  And a quick little update on what I am calling "The Quiet Canine Project."  I just didn't like Hush Puppy.  I mean, I loved Hush Puppy, but it was just too generic.



LEO:  It's like, what is it, yeah.



STEVE:  Yeah.  And so the Quiet Canine sort of talks...



LEO:  That's good.  It says what it is.



STEVE:  I like it.  It talks about the benefits.  



LEO:  Yeah.



STEVE:  Yeah.  Many people are building them.  I wanted to let people know that, even internationally, I've heard from people in the U.K. who ordered the so-called "LaunchPad," which is the little development platform that I'm using, for $4.30, with free shipping.  It comes the next day, or maybe in two days, even if you're in the U.K.  Someone in Australia got it overnight.



LEO:  Wow.



STEVE:  So even internationally it's still $4.30, and they pay the shipping.  So a super bargain.  The Portable Sound Blaster Group, as it is still called over on Google, is going strong.  I've got source code posted.  People are assembling the source.  They've got the chips programmed and generating square waves to drive the amplifier.  They're building the amplifier.  Some people are using Arduinos to generate the signal, some just using CMOS.  So there's a lot happening.



I've heard from many people who have dog barking problems, either their own dogs, they would like a training device that is more humane than whatever they're using currently, or maybe more effective, and people with neighbors.  And I'm now working on the pages to get them up on GRC so that there'll be a permanent place to have the documentation for the project.  And once I get a sense for the size of the beta test group, I plan to build a bunch of these myself and provide them so that I can get some feedback about how they work.  So we're moving forward on that.



LEO:  You mentioned last week that you were not crazy about Google Groups, that it changed a bit.  Do you know that Google+ has now added Communities?  Which is probably why Google Groups was kind of left on the side of the road.



STEVE:  Ah.  And does it give us - I looked at Communities, but I couldn't see any sort of structure to it.  I guess I like being able to have threads and subjects and threaded discussions and...



LEO:  Yeah, it's got all of that.  So when you create a Community - you can have multiple moderators, by the way, which I'm sure will be nice for you.  We have one for TWiT and The Tech Guy.  It's called This Is TWiT and Team Tech Guy, if you want to look at them.  And you can create - it's more like a forum.  You can create subheadings.  So, like, I have on Team Tech Guy "Help Me."  And so you can create something within that category.  But when you post, it also can be post-wide.  Threading is only by question; right?  So you say something, and then people respond to that; say something, people respond to that.  Which is kind of like a forum, basically.



STEVE:  Yeah.  Okay, good.



LEO:  So I think they've done a good job with Communities.  And anyway, I know it's too late for this one, but just for future reference.



STEVE:  I'll go check it out, yeah.  And in totally randomness, I just got a note from 23andMe.com, noting that their price has dropped to $99.  So, yes.  They're dropping the price down as quantity increases.  They recognize that you and I paid a lot more than that.  And to make us feel okay...



LEO:  How are they going to do that?



STEVE:  ...they're explaining that the reason they're doing this is, to get the benefit of this for everyone, they need to increase the sample size.  They need the largest database of DNA they can get.  And I will say that the people I've turned on to it have just had a ball.  You get a little test tube that you drool into for a few minutes, and then you snap the cap closed, which releases a suspension agent.  You shake it up and stick it in a postage-paid box, and it goes away, and a few weeks later you have access to a really compelling, interesting breakdown of what's known about your DNA based on all of the feedback that they've received.  So anyway, it's only $99 now, so making it increasingly affordable.



LEO:  Cool.



STEVE:  Speaking of increasingly affordable.



LEO:  Yes.



STEVE:  I have a little SpinRite story from a Dan Spengeman, I think, S-p-e-n-g-e-m-a-n, Spengeman.  He's in Shrewsbury, New Jersey.  I'm sure he knows who he is.  And the subject line he used caught my attention, said "SpinRite Equals Cookies."  And I was like, what?



LEO:  Uh-oh.



STEVE:  "Hey, Steve and Leo."  You're Leo.  "Longtime listener, LastPass user," and now we have the increasingly common term "blah blah blah" to fill in for all the other how much they love us.



LEO:  Ditto.  Ditto, ditto, ditto, yeah.



STEVE:  Yeah.  "I work for an IT consulting firm in Central New Jersey, dealing almost exclusively with business computers on a contractual basis.  We are not a break/fix shop, but as is sometimes the case, we agreed to take in a laptop that was outside of our agreement contract.  The laptop was for a good client that had several critical crucial pictures, the only copy, I might add, of damage left by Hurricane Sandy to their home that needed" - so you can imagine why they absolutely had to have them - "that needed to be sent to the appropriate insurance company.  If these could not be recovered, there'd be a lot more tears shed over this horrific natural disaster.



"Upon receiving the personal laptop, we attempted to boot, only to have the Vista progress bar continually scroll across without ever loading the Windows environment.  Having seen this before, I promptly loaded a copy of SpinRite and ran a Level 2 scan.  It came across one unrecoverable sector, recovered others, and then got stuck at about 4.22 percent.  I waited a while, then rebooted the laptop and left the room for a bit.  I came back to see the computer running through a Windows Chkdsk, encountering several orphan files, and finding some unrecoverable data.  However, it continued to run, rebooted on its own, ran another Chkdsk on its own; and, much to my surprise and delight, the laptop is back up and running perfectly."



LEO:  Wow.



STEVE:  "I ran another Chkdsk as a precaution, which came back totally clean.  But I plan on rerunning SpinRite to ensure it gets the GRC seal of approval.  I called the client, and they were elated, so much so that we're getting some homemade baked goods as a token of their appreciation."  Oh, that's the cookies.  "So when I get fat off of sugar-coated goodies, I have you to thank and blame."  And he has a little tongue-sticking-out :P.  He says, "Thanks for a great product and a great podcast.  Dan."



LEO:  Awesome.  Awesome, awesome.



STEVE:  So thank you, Dan.



LEO:  QR codes, Mr. G.



STEVE:  So, okay.  I'm very impressed with the design of these.  Not everything I can say that of.  And I'm impressed that this was done 18 years ago.  I mean, that's a long time ago to have the kind of foresight that the designers of these codes had.  They were originally done, they were created for rapid tracking of automotive parts during automobile assembly in Japan.  And they're just - they were done right.  So if people listening have access to one, if there's one around you, maybe your phone, like for example Starbucks, the Starbucks app for scanning their loyalty program uses a QR code barcode, so you could look at that.  If there's one around that you can look at when I'm discussing them, you'll have a better time visualizing what I'm talking about.  If not, you can remember some of this stuff and then check one out when you see it.



The codes are designed - they're square.  They always have an island, what they refer to as a "quiet zone" around them.  So they're designed to stand by themselves.  If they're a sticker, then they're in the middle of a sticker that's got some white margin so that there's a so-called "quiet zone."  The cool thing about them is that they are orientation neutral so that you can - you don't have to be exactly face on.  You don't have to have them exactly upright.  They provide all of the information necessary from their image to allow software to essentially spin them around and orient them and flatten them, even if you take a picture of them at an angle.



So the most prominent features on the QR code are three large targets that are out at the very - at three out of the four far corners of the QR code.  And of course it's not two targets or four because you want to get a quick rotational orientation.  So they chose three, to use three rather than one because three gives you an immediate sense of size and angular orientation at the same time.  There's a smaller target in the remaining fourth corner.  In the way QR codes are normally oriented, if the three big targets are both at the top and then also over on the left, then it's the lower right corner that is missing the big one, which is an instant cue for rotational orientation.  There is a target there, however.  It's four bits in to the left and four bits up from the bottom is the smaller target.



The coolest feature that you would not notice until you know about it, and you're about to know about it, and you can check for it on every QR code you ever see, and it will always be there, and you'll know something no one else knows because it's not obvious, but it's just, I love this, is that linking the inner corners of the three big targets is a clock track, essentially.  If you look between the upper left and the upper right inner corners, you will see on/off, on/off, on/off, on/off, on/off, on/off.  That is, it is a 50 percent duty cycle.  It always looks exactly like that.  And the same thing from the upper left to the lower left target has the same on/off, on/off, on/off, on/off.  So that provides the referenced clocking information for the size and additional position orientation of the code.



The actual code itself has a format number and a version number which are stored in the bits immediately surrounding the three large targets.  So sort of the closest surrounding bits of the three targets contains - which is also obviously always easy to find and at a known location, given that you know where the targets are - tells the software what the version number and format of this particular QR code is.  The densities range from one to 40, so you have a huge range of storage.  And you can store an amazing number of characters, on the order of I think it's 2,000 characters.  They're not quite eight bits because of the way they encode them.  They use a strange, like a 45-character set.  So it's all uppercase and then a bunch of special characters.  Enough, though, that you are able to encode non-case-sensitive URLs, and then there are - there's a binary mode where you do store full eight-bit bytes.



So the actual encoding starts at the lower right corner, in the very far corner.  And the codes are stored in blocks of 2x4.  The reason they're done in 2x4 is that they would like them to be as square as possible so that the bits in a byte occupy a smaller surface area.  A lot of attention has been given to error correction because it's recognized that, for these to be robust in the environment, they might get torn, they might have a black mark through them, or they could even have a chunk missing.  And in fact the error correction technology can also have - it can range, like there's low, medium, and then the third one they call "quartile," or high.  So low, medium, quartile, and high.



At the highest level of error correction, fully two thirds of the surface area of the QR code is involved with error correction.  But that means that, in return for committing to having that much redundancy, in return for that, you're able to lose as much as a third of the QR code tag.  And, in fact, Wikipedia has a sample that I ran across where they've written the word "Wikipedia" right across the center body of the QR code, yet you can still read Wikipedia's URL, despite the fact that you just obliterated a chunk of the QR code, because error correction makes up for what's missing.



And this is the same Reed-Solomon style error correction code that hard drives use, and for very much the same reason, in the same way that you might have a little defect on the surface that causes you to miss a physical region on the drive, you similarly could have a physical defect in the QR code tag printing or, as I said, a smudge or something dropped on top of it, or a part of it got torn off.  So this technology allows for robust recovery of any missing data.  As a consequence, they don't want to string the bits out in a long string because that doesn't model as well the kind of defects that they expect that the tag might suffer.  Well, so they'd like them to be like a 3x3 square, but that doesn't work for eight-bit bytes.  So they compromised to a 2x4 tile.



So essentially there are 2x4 tiles that run along one edge and then turn - it's not in a raster scan, where it jumps back to where it began and moves over.  Instead it turns around and heads back the way it came, two bits over.  And then it turns around again and heads back.  And if you find yourself at all curious about this, the way they handled the details are a little bizarre because the tiles will interact with these targets and these other fixed aspects of the code which represent barriers.  Sometimes they skip over them, or sometimes they slide around them.  Yet they've come up with a disciplined, clear way of handling every instance, which ends up in some cases creating these weird sort of pentomino-shaped things that all fit together.  But the spec handles it, and the software knows how to deal with it.



Now, one problem that they encountered - again, I'm impressed by how clever they were - was that it would be possible, when you think about it, for the data to emulate the fixed features of the QR code.  And so you would call that "in-band signaling."  There would be an in-band signaling problem which is the information theory term for the problem that you're trying to have formatting data that tells us about, not the actual content, what you want to have separate from the content, yet you're just printing this all with ink.  So how do we know what's data and what's formatting?



So the designers of this said, okay, well, we're going to lay out this information, but what if the information we lay out looks like a target, for example?  For one thing, what if there's a big white space in the middle?  That would be a problem because all of these technologies, even back to hard disk drives, the hard disk drives are what's known as self-clocking technologies, meaning that rather than wasting space by having a clock signal or clock track in addition to the data, they arrange for the data to be self-clocking, for the data to provide its own timing information.



The way you do that is you deliberately make sure there are not, for example, in the case of a hard drive, a whole bunch of zeroes.  If you had a whole bunch of zeroes where zeroes meant nothing is happening, then the problem is, when something finally does happen, you need to know exactly how many things didn't happen.  And that can be dicey if the hard drive is not spinning at a constant pace.  Similarly, here, if there was, for example, some stretching or a wrinkle in the QR code, that could cause a local change in the frequency of the pattern that's laid out in the visual field.  So you wouldn't want to have a big, solid, black blob because you might have a problem knowing exactly how long it was or what size it was, and that's crucial, especially on a high-density code taken from far away, crucial for knowing how many bits are there.



So what these guys do is one of the formatting controls actually lays down a mask which is used to XOR the entire dataset.  And we've talked about XORing before.  We discuss it often in crypto.  We know that, when you XOR something, you are selectively inverting bits.  And if you re-XOR it and selectively reinvert the same bits, you get back to the original thing you had.  So the XOR process is perfect because it's very simple to do.  And depending upon the nature of the data which the QR code contains, they have a library of, I think it's eight different XOR patterns which are mathematically derived from the X and Y coordinate of a little 8x8 patch.



So it's an 8x8 pattern that, for example, one of them is a checkerboard.  One of them is vertical stripes.  Another one is horizontal stripes, separated by two areas of white, and so forth.  So what the QR encoder does is first it lays out a non-masked, non-XORed, that is, QR code.  And then it's got criteria for things that would be a problem, like long runs of ones or zeroes, or just a coincidental formation of a blob somewhere because of the way the zig-zagging pattern happened to have the bytes fall.



So what it does is it then applies each one of the eight different masks to get eight different candidate QR codes.  And then, using the algorithms for its criteria for judging the quality of them, it picks the one which it likes the best.  Which is which best meets whatever criteria it has.  Basically, there aren't any confusing structures.  It's broken all the data up, there are no blobs, and so forth.  So it ends up choosing one of those masks, and that's part of the encoding information which goes into it.



And then, finally, starting as I said at the lower right corner, there is an encoding type which is four bits, then a length which is eight bits, followed by that much data.  And at the end of that, there can be another encoding and another length and more data.  So you're able to have multiple formats of data in a single QR code.  You're about to have variable density.  You're able to have a variable amount of error correction.  And understand that error correction means redundancy.  So the more error correction you have, the larger percentage of the whole area is not data.  So there's a natural tension between how much area are we going to commit for error correction versus how much data are we trying to store.



However, all of the QR tags are square, and the original designers recognized that there might be a situation where they wanted a lot of data, but the square aspect ratio was a problem.  So rather than confuse the code by allowing non-square QR codes, they instead created a way of appending codes.  So it's possible, for example, to have eight little ones in a row to essentially give you a very rectangular, stretched-out, single QR code.  A properly equipped reader that scans all eight of the little guys will recognize essentially where they are and how to concatenate the data in the individual codes into one single large one.



So anyway, it's an old, yet well-designed technology.  It's not clear how you would improve it, even today, 18 years after it was created.  It was patented at the time.  Of course by now the patents have expired.  But it was formally placed in - it was released to the public.  The patents were expressly there to keep control of it from a standardization standpoint.  Even the word "QR Code" is trademarked.  But anyone is free to use it.  So this was done in a very open intellectual property fashion, just like you would expect.  And of course that's one of the reasons that it has been such a success, that and the fact that because, very much like the Internet, because it was really done right.  It was designed with an amazing amount of foresight.  It's a technology that we can use today for quickly transmitting data.  And of course that's also the problem because it's something that our smartphones can read and interpret that looks just like dust to us, just like, okay, I mean, we all know what they are now.



As I was saying at the beginning of the show, I was looking around.  I bought some Starbucks espresso roast, and there's a little QR code on the bag that I don't know if my smartphone is supposed to read it, but it's got all of the characteristics that I mentioned.  I see the little alternating pattern between the inner corners of the three big targets and the little target four bits up and four bits over from the lower right and so forth.  I mean, now it's very possible to sit down, if I needed to, and figure out what this thing says.



LEO:  The real question is why anybody would take the time to take a picture of it when you could just, I mean, probably just sends you to Starbucks.com; right?



STEVE:  Yeah, I mean, it might be used for their own manufacturing process.  It might be the...



LEO:  Is it better than a barcode from that point of view?  It's more data?



STEVE:  Yeah.  It is more data.  And that's really the only difference.  Essentially you can think of it as a two-dimensional barcode.  And barcodes, one-dimensional barcodes that we still see on the backs of books and things are stripes.  And so they're meant to be read by a one-dimensional reader.  Normally that's a laser beam spun by a mirror.  And we always see that at the checkout stand at Barnes & Noble or in...



LEO:  Grocery stores.



STEVE:  ...supermarkets, yeah.  So there's a beam that sort of opportunistically scans across it.  And there's certainly a protocol there also.  But it's only able to represent something like a UPC, like a Universal Product Code, and nothing much more complex.



LEO:  As I remembered, there are a number of barcode protocols.



STEVE:  Yes, yes, exactly.  Here these things can be used to represent anything you want.  And what has happened, the reason, if you were to Google "QR Code Danger," for example, I mean, it is all over the place.  The bad guys have figured out that people like these, and people are taking pictures of them.  I mean, and the advertisers are leveraging it.  You'll see a poster with one, and it's like, here, take a picture of this, go to our website.  Well, what's happening now is that popular QR codes are being covered up with stickers to take people places other than where the poster which you would tend to trust would take you.  And as I mentioned before, I read some articles where people just, like, see a barcode in a bathroom, a QR code...



LEO:  For a good time...



STEVE:  It's like - I know, for a good time.



LEO:  QR this.



STEVE:  Exactly.



LEO:  But, now, that's an implementation issue because the camera can take a picture and say, hey, I'm about to send you to...



STEVE:  Yes.



LEO:  Do they automatically go to that site currently?



STEVE:  There are two problems.  One is that we're depending upon the implementation to be, well, the implementation of the interpreter to be correct.  Notice that the implementation of the Flash interpreter has been a problem since it was born.  As a consequence, we have all these problems called "buffer overflows."  Well, it's entirely possible to have a buffer overflow in the QR code interpreter.  I don't know that any exist.  I hope that one never does because what that would do is essentially override the best intentions of the software that was interpreting the QR code.  In the same way, for example, that a buffer overflow down in our TCP/IP stack used to cause problems before the packet even got to the firewall.



So even a firewall wouldn't protect us if just the act of receiving the packet allowed a bad guy to take over the operating system.  If the act of viewing, it would be literally the act of seeing this particular pattern could cause data to be overwritten on the stack and take over your smartphone.  So there's that problem.  And then, exactly as you say, Leo, the question is, what does the phone do?  And what is unfortunately the case now is that there are hundreds of QR code readers, and they're also being built-in natively into the platforms.  And we have the tension between convenience and security because there's something a little extra sexy about just taking a picture of it and, whoop, you're automatically there at the website.



This has been enough of a problem that, for example, Symantec has a free product now in beta which I would recommend to anybody who thinks QR codes are interesting.  It's called "Norton Snap."  And it's available for free for iOS and Android.  And it does just what you said, Leo, but one more thing.  It also does reputation checking.  So you take a picture of a QR code that you believe leads you to a website.  And Norton Snap will intercept it, check the reputation of that site, give you a big okay green ball or warn you off with a red, who knows what, skull and crossbones.  And it also de-obfuscates the QR code.



I mean, that's the least you would want, I think, is to have the QR code interpreted for you by the QR code scanner in your phone, be able to just eyeball the domain.  I mean, if it's like weregoingtogetyou.cn or .ru or something, it's like, okay, I don't think I'm going to click that link.  So it'd be really nice if it was a two-step process.  The code was converted to a URL.  You then had to manually click, like acknowledge that this is where you want to go, giving you a chance to see what's there.  At the moment, many of these don't.  They like the whole magic carpet ride, just wave your phone and off you go.



It's important for our listeners to know, not surprisingly, I mean, once again, if it can be done, it will.  The bad guys have figured out that this is a way to get people to execute URLs under a false pretext, like by putting stickers over existing codes and replacing them.  You might think, oh, that's probably - there's a new code from what they had before.  No, someone with malicious intent came by and covered up the real one.



LEO:  Another use for QR codes is both LastPass and Google use a QR code to add to Google Authenticator.  I guess it's probably Google Authenticator that's doing it, and LastPass is supporting it.  But when you want to set up Google Authenticator on your smartphone to use with LastPass or Google's two-step authentication, they put a QR code on the screen, which you click.



STEVE:  Nice.  It's a beautiful way to send information from...



LEO:  And then it links to them, yeah.



STEVE:  Yes.



LEO:  No data entry.  You don't have to enter a magic code or anything like that.  And it is very instantaneous.  Google, of course, has Google Goggles, which is a QR code reader.  I would imagine they keep an eye on that.



STEVE:  I'm sure.



LEO:  And then there's another one that's very widely used on Android, that almost everybody has.  I think it's just called Barcode Reader or something like that.  It's kind of a generic name.



STEVE:  And it does bring up a URL so that you're able to look at...



LEO:  You know, I was trying to find a QR code in here so I could take a picture of it.  I guess I may just go to Wikipedia and do that.  Because I'm curious.  I don't know.  So let me - I'll tell you what.  Let's go to the Wikipedia QR code.



STEVE:  There's even, by the way, a QR code website from the original innovators, the Japanese guys.  It is sort of a rough translation to English, but it's much better than my Japanese.



LEO:  So you can just take a picture of that, or show that.  How do you get a QR code to it?  You upload it?



STEVE:  Oh, that one is just a site for, like, where the spec lives and so forth.



LEO:  Ah, I see.



STEVE:  But, yeah, Wikipedia, or just put in - just Google "QR code," and you get all kinds of stuff.



LEO:  There's plenty, yeah.  I don't know why I was having such a hard time.



STEVE:  There's images for QR code.  And there is a - I ran across a site, too, I think it was that one...



LEO:  Let me just try.  I have Google Goggles on here.  Let me try that one.  Okay.  And we'll just scan a QR code.  And it's good, actually, it's done exactly what you would want it to do.  It's interpreted what it saw in the camera.  It says "Wikipedia, the free encyclopedia," and it gives you the URL.  And then I can tap a button...



STEVE:  Nice.



LEO:  ...if I would like to do something with it, including, I presume, go to the web page, yeah.  So that's the Google Goggles.  So it interprets and then gives you a chance to back out if you don't like what you see.



STEVE:  Yeah.  The one thing, I mean, so you certainly want that feature.  And I would say don't go crazy with 50 different ones of these.



LEO:  Yeah.  Pick some well-known ones.  You don't want...



STEVE:  Because, yes, exactly.



LEO:  ...exploits.



STEVE:  Exactly.



LEO:  I'll try the other ones.  I don't have it on here, I think.  I just use Google Goggles when I need a barcode reader.  There's also RedLaser, which was one of the very first barcode scanner apps.  They've been around for a long time.  I'm sure they're safe.  Yeah, the ZXing team does one called Barcode Scanner.  I have that also on my phone.  Let me - oh.  Yeah, same thing.  Actually, it's quite good.  In fact, this gives you a lot more - this is another good one.  It gives - this is Barcode Scanner from ZXing.  It gives you the URL, it tells you what it is, and it also even gives you some information about the format of the QR code, an image of the QR code, the data, some metadata.



STEVE:  Cool.



LEO:  You can open it in a browser, share via email, or share via SMS.  So I would say these two, which are the most commonly used on Android, are probably...



STEVE:  Yup, stick with them.



LEO:  Yeah, yeah.  All right, Steve.  Good.  I'm glad we covered that.  That's a great subject.  I'm fascinated by all that.



STEVE:  I've wanted to dig down and understand them for some time.  And now everybody who has listened to the podcast knows everything that you and I do.



LEO:  So now you know the rest of the story.  We do this show every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 1900 UTC on TWiT.tv.  Please watch live.  I love it because we can interact with the chatroom, and I can get that into the show.  But if you can't, you can always listen after the fact.  There's audio and video available on demand.  Steve has two unique on-demand features.  Of course, we always have the audio and video on the TWiT site.  But Steve has two unique formats.  One is a 16Kb audio for the really small audio file.  And if you're a small audiophile you'll enjoy it.  And he has the text transcript, which is an even smaller version.  But I think most people get the show and read the text transcript.  But it's a nice feature because it's also Google searchable, so it's a good way to find the contents of those shows.



All of the shows are available on his site, GRC.com, as well as our site, TWiT.tv, and wherever better podcasts are aggregated, like iTunes and all the other ones.  You'll find other great things like SpinRite, the world's best hard drive maintenance and recovery utility, at GRC.com - Gibson Research Corporation.  Lots of freebies, as well.  And Steve's on Twitter as @SGgrc, and he tweets there regularly.



STEVE:  Yup.



LEO:  Steve, thanks so much.  I look forward to doing a special.  Steve Gibson from the '90s.



STEVE:  Yes.  Let's record our opener at the beginning of next week.



LEO:  I'll come in early, just for you.



STEVE:  Cool.



LEO:  Yeah.  Or if I don't, we'll just do it at the beginning of next week because I'm having a hard time getting here on time, let alone early.



STEVE:  Yeah, no problem.



LEO:  Thank you, Steve.  I appreciate it.



STEVE:  Thanks, Leo.



LEO:  We'll see you all next time on Security Now!.



Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#383	

DATE:		December 19, 2012

TITLE:		Listener Feedback #157

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-383.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's the last Security Now! of 2012, and we've got a bunch of good questions for Steve Gibson.  He'll talk about a brand new version of Java, too.  Does it address the security concerns previous versions have?  We'll find out next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 383, recorded December 19th, 2012:  Your questions, Steve's answers, #157.



It's time for Security Now!, the last official version or episode of 2012.  With us, of course, our Explainer in Chief, Steve Gibson, the man in charge of security here at the TWiT Brick House.  Hi, Steve.



STEVE GIBSON:  Hey, Leo.  I have to apologize in advance...



LEO:  Oh, no.



STEVE:  ...if any Yabba Dabba Doos are heard in the background.  I changed my whole environment around and changed AV receivers.  And I used to have a remote control set up so that I could just easily mute the monitor of the servers at GRC whenever I want to.  And this morning, when I pressed the remote control button, the remote itself is no longer emitting the IR signal that my system receives in order to mute.  So I pressed it, like, a few times.  It actually started to act up yesterday.  And so I think it's just dying finally because I've been pressing that a lot for many years.  So we've got Fred not muted, and there may be a Yabba Dabba Doo that we hear in the background.



LEO:  Steve, you're missing a great opportunity here.  If anybody would like to hear Yabba Dabba Doo, all you need to do is purchase a copy of SpinRite from GRC.com.



STEVE:  It is in real time.



LEO:  Is that what Fred does?  He's signaling a credit card purchase.



STEVE:  Precisely, the transaction with the merchant that moves the funds from a purchaser's credit card into our merchant account.



LEO:  Well, you would go Yabba Dabba Doo.  It's here.  The money came.



STEVE:  Always good news.



LEO:  So this is our last episode of 2012.  Very fitting, we're going to do a Q&A episode.  We should let you know, we will have a new show next week, but it is not new content.  In fact, it's pretty stale.



STEVE:  Well, I can't remember whether we talked about it on air, so to speak.



LEO:  I think we did.  I think we did, a couple of weeks ago.



STEVE:  During the recording last week, I think so.



LEO:  Yeah, yeah.



STEVE:  So our regular listeners already know that they're going to get a wacky special Christmas Security Now! episode, a video recording made on analog tape, the Sony Hi8 format, back before we had DV or anything digital, 22 years ago, when I had black hair and lots of it.  And it's really entertaining.  I will say again, although I said this at the beginning of the little chunk that we just recorded for that, you really need to see this.  So unfortunately, 22 years ago, I didn't know we'd be doing an audio podcast, and so I make a lot of use of waving my arms around.  And if you're just listening to it, you won't know why they're all laughing at me.  And, that is, the audience of this.



LEO:  Oh, yes, they will.  Oh, they'll have an idea.



STEVE:  Yeah.  So anyway, if you can, over the holidays, track down the video from Leo and watch it because I only have the audio.



LEO:  How did you convert it?  Did you have to buy something to convert it with?



STEVE:  Yeah.  I had the original camcorder that I used, a Sony Hi8 camcorder.  So the first thing I did was put them back into the same device that originally recorded them.  I got nothing.  And so I thought, okay, either we overwrote these - and it's very possible that we would have put the lens cap on and hit record and wiped them out in order to clean the tapes, get them ready for something else.  So I was worried about that.  Then I remembered that when my dad died, he had a Hi8 deck which I had grabbed.  And so that was in the garage because I never throw anything away if it might be useful someday.  So I pulled it out.  And it sucked the cartridge in, but it failed to go to the next phase and wrap the tape around the helical scan head.  So I tried that for a while, and I said, okay, that's dead, too.  So now at least I can discard two devices that I didn't know were dead.  So then I went to Amazon, thinking - or maybe it was eBay.  I think I went to eBay first, and then Amazon, and I found a used Hi8 camcorder in, they promised me, like-new condition for $199.  So...



LEO:  Yeah, it better be like new for that price.  Holy cow.



STEVE:  Well, I figured this was for a good cause.  So I purchased it.  It arrived.  I put the tape in, and, oh, there - well, I don't know that I was blessed with seeing my image from 22 years ago, but at least there I was.  So then I have a - I can't remember the name of the company.  There's a really good, well-known - oh, Canopus.



LEO:  Oh, Canopus, yeah.



STEVE:  I have a Canopus...



LEO:  Yeah, the ADVC.  We use those, yeah.



STEVE:  Yup.  I've got a couple of those.  And so I ran the analog video from that through the Canopus to turn it into DV, digitized it to hard drive.  Then I used my old version of Pinnacle Studio that I have kept for years because they ruined it.  And this was when it was lightweight and fast and everything.  And I put a little title on the front, and trimmed it, and then digitized it, and then I ran it through TPMG, the Pegasus Inc. encoder...



LEO:  Gosh, I forgot about that, yeah.



STEVE:  Yup, still there.



LEO:  You've got some old stuff there.



STEVE:  Really a good one.  And that converted it to a relatively high-bandwidth MP4.  I think it was 700MB.  It's about 45 minutes long.  And then I shipped that up via Skype, of all things, to John at your studio.  So you guys have the content.



LEO:  That's fantastic.  Well, that's for next week.  This week we've got a Q&A, our 157th.



STEVE:  Interesting news and great feedback from our listeners, as always.



LEO:  Well, why don't we get into the industry happenings, and we'll get to the Q&A in a little bit.



STEVE:  So, huge news, at least that's what you would imagine from the industry's reaction to it.  I'm a little less impressed.  And that is that Oracle late last week updated Java 7 to update 10.  Now, 6 is still there.  And they're doing security enhancements to 6 and 7 sort of synchronously.  This is a change only to 7.  And I got a kick out of seeing a comment, I think it was Adam Gowdiak - I think his first name is Adam, I remember it's Gowdiak - who is a Java security expert whom we've spoken of in the podcast before, who has found all kinds of problems over time in Java.  His comment was, well, okay, you're still probably better off staying with 6 because Java 7 is so ripe with security flaws that even this recent change probably isn't going to help you.  So here's what they did, and it is amazing.  They have - oop, I just heard the cash register sound, so we're going to - yeah, there's Fred.



What Oracle did is, for the first time ever, in Java natively, in itself, under the security settings of the Java Control Panel - which, for example, Windows users can get to, under the Control Panel, there's a Java Control Panel applet.  If you've got Java installed, you, right there, can completely disable it from your browser, from all access to your browser.



Now, we've been talking about how to do this the hard way and the easy way and various ways.  Various people have posted how-to's on their websites or their blogs and pages, how to disable only your browser's access to Java because, as a runtime engine, as a virtual machine, Java gives you cross-platform.  There are many things to appreciate about the flexibility that it provides, especially as a corporate development language.  But the problem is, normally when you install it in the system, your browsers get it, too.  So Oracle has themselves finally stepped up and said we will let you turn off browser access.



Now, the reason I'm a little less impressed is, first of all, it's not clear that blanket disabling it, I mean, while that's best for security, if you do have a need for it in a particular app, for example, I keep hearing, whenever we talk about this, people in Sweden talk about how their banks all require a Java applet in order to do online banking.  Ugh, okay, well, but that's the way it is.  Or many people will say, oh, all of our corporate middleware that our programmers do is not only in Java, but is hosted by the browser instead of an external container of some sort.  So there are instances where you have to have it on the browser.



So if all you have is an all or nothing, then you're back to this problem of, well, if you turn it on to use it, then you've got to remember to turn it off when you don't want it and so forth.  And my point is that something like NoScript in Firefox already does that.  NoScript won't let Java run unless you explicitly give it permission to do so.  And then you of course can train NoScript to always allow your Intranet to run Java where the Internet would not.  And you could, if you had sites on the Internet that you go to, like your banking sites, you might, with that granularity, stickily, persistently enable them to run Java, but generally not anything else.  So that's still probably the right way to go.  But this represents a step forward.



The other thing that unimpresses me is that this normal control, you are able to do blanket, all or nothing.  But they also provide sort of a four-step security, like low, medium, middle or something, I don't remember what the third one was, and high, where you're able to choose different sort of scales of settings from the control panel, but that only applies to unsigned Java applets.  That is, anything signed or even self-signed is permitted to run unencumbered.



So the problem there is that, if this caught on, and if this became significant, then Java exploit malware would simply be signed.  It would be self-signed.  And so right now it's not because no one bothers because it's an additional headache.  But we've already seen instances where malware is using stolen certificates.  It wouldn't even need to be stolen.  They could just be digitally self-signed, and this would pass right through.  And of course Oracle is not by default going to use the kinds of settings we would suggest.  They don't want to suddenly have a release that breaks things.



So these are - that's the other problem, of course, is as I coined the term "the tyranny of the default," is while all this is here, and it's better that it's here than not, because security-conscious users will be able to turn these things on, crank up the security to high setting, and/or use a third-party tool in our browser to give us more granular control, all of that only happens for people who make those changes.  Unlike, for example, what Facebook is now doing, of moving people to SSL by default, even if they've never made the change themselves, which is really nice.  Of course, that's solving a different problem.  This is a serious problem.



And, of course, all of this is only because Java is a security catastrophe.  I mean, it's just like the No. 1 exploited add-on, across-platform add-on, that malware authors go after because it just has - it's so powerful, so complex, there are side effects to the way it was designed that are, I imagine, Oracle's going to be chasing forever.  And the fact that 7 is so much worse than 6 demonstrates the other rule that we've often spoken of, which is that new is not necessarily better from a security standpoint.  New will give you more features, but every additional set of features is more opportunity for bugs to be hidden in there that can be leveraged and turned into vulnerabilities.



So I certainly wanted to cover this because it's been in the news.  It's a nice step forward for Oracle, and I hope they're spending as much time just trying to make it more secure, rather than acknowledging the fact that it isn't.  I mean, it's a big acknowledgment that they're saying we're going to allow you to disable it from your browsers.  It must have come from corporate pressure.  I mean, it's not we little end users that they're worrying about.



LEO:  Well, it's a little embarrassing for Oracle.



STEVE:  Yeah.



LEO:  I mean, that could be some of the pressure, too.



STEVE:  Speaking of embarrassing, Samsung, it was revealed over this past weekend by a nice little hacker, had essentially a deliberate kernel bug which was found which affects their more popular smartphones, the Galaxy Note 2, the Galaxy S2 and S3, those based on the - and I don't even know how to pronounce this, the...



LEO:  Exynos.



STEVE:  Exynos, that's what I would have guessed, or something like that, the Exynos processor and chipset. 



LEO:  I don't know if you could blame Samsung, though.  It sounds like it was an Exynos bug.  It's a kernel bug.



STEVE:  Well, it's in the kernel.  But apparently it involves the graphics portions, the aspects of the kernel or the add-ons that want access to graphics memory of various sorts, the camera and HDMI subsystem and so forth.  In the UNIX world, they've done something that was really nice and clever, which was all of the resources appear to be in the common hierarchical file system.  So, for example, you've got your regular drives and subdirectories and files.  Those are in the hierarchical file system.  But something, even things that weren't actual objects, like random numbers, the random number generator is you access it as if it were a device, an object in the same unified hierarchical file system.  And Linux, being a functional clone of UNIX, took that same concept.  So that exists in the Linux world, too, and thus in the Google-derived Linux core smartphone technology.



Anyway, there's an access to physical main memory, which is /dev/mem.  But of course that is so powerful because anything that opened that device could have access to all physical memory.  So it is locked down tight so that only root privilege devices can do that.  Only other kernel-level and sufficiently privileged processes are able to open the /dev/mem pseudo device to give them visibility, read/write access to main memory.



Well, what this hacker "alephzain" found and he posted, it was kind of cute.  English is not his first language.  He said, "Hi.  Recently discover a way to obtain root on S3 without Odin flashing," Odin being the Norse god, the main Norse deity.  And Odin is the No. 1 popular means for rooting these devices.  He said, "The security hole is in kernel, exactly with the device /dev/exynos-mem.  This device is R/W" - meaning full read/write access - "by all users and give access to all physical memory ... what's wrong with Samsung?  It's like /dev/mem but for all."



And then he enumerates the libraries that he has seen that are accessing that device.  And he says, "Many devices are concerned" - and I'm thinking, and many users, as well - "Samsung Galaxy S2, Samsung Galaxy Note 2, Meizu MX" - whatever that is - "potentially all devices who embed exynos processor which use Samsung kernel sources."  Now, he sums up his post, "The good news is we can easily obtain root on these devices, and the bad is there is no control over it."



LEO:  Yeah, it even works on root-locked Galaxies from Verizon.



STEVE:  It's a complete short circuit.



LEO:  Unfortunately, this guy published this proof-of-concept code, the code to do it, without letting anybody know at Samsung.  So the good news is Samsung responded right away, and I'm sure that we'll have a patch soon.



STEVE:  Yes.



LEO:  I have one of the affected phones.  You know what's interesting, though?  He's right.  I now have a - there's a very easy download root, which I ran, and it rooted my phone.  And by the way, the root exploit has a feature to turn off this kernel exploit.



STEVE:  Yes, yes.



LEO:  So it's one way to secure your phone, if you trust these guys.



STEVE:  Yes.  There are already public patches to fix this because, I mean, it is just a mistake.  And you'd have to go back through and do a forensic analysis of the development path, whether the developer quickly created this, intended to lock it down so that only the sufficiently privileged devices or processes had access, and just forgot?  I mean, that has to be the case.  So it's just one of those things that is lurking in the Samsung phones ever since this chipset was introduced, and apparently having to do with graphics access, and, whoops.



LEO:  Ooh, hello.  I got this from Chainfire.  I've bought some of his software before.  It's on the Play store, so I kind of trust him.  And it's nice because it means you can root all of these phones by just running an application, and it has a little checkmark to disable the exploit.  So you can protect yourself that way.  Probably, though, most people will want to wait until Samsung issues a patch.



STEVE:  And for what it's worth, they're on it big-time.  I mean, as we have just seen, this is a trivial fix.  So as quickly as a company with the bureaucracy that they have, and their needs to verify they don't break something else, and it's done right and so forth, as quickly as they could move, they will.  But you're right.  For our listeners who want to - the overall take I've seen, the consensus seems to be, if you don't download sketchy apps, you're okay.  And certainly since this became known on the weekend, there's no doubt that sketchy app land is going overtime right now to incorporate this and put stuff out in order to try to get access to as many phones as they can before this gets locked down.



LEO:  Probably the smart thing to do would be not download any new apps, from Play store or anywhere else, until there's a patch.  And that way you're probably all right.



STEVE:  And if you have to, then fix it yourself, as you just said.



LEO:  Yeah.  If you go to XDA Developers, the code to root it is easy.  I mean, that's the side effect, it's great, is it's a one-click root now for all of those phones, the Exynos 4-based phones.  That's easy.



STEVE:  Yeah.  You might want to bring this link up, Leo, while we talk about it.



LEO:  Sure.



STEVE:  Under the category of YAC, which stands for Yet Another CAPTCHA, we have MintEye, at Minteye.com.



LEO:  This is hard.



STEVE:  And, well, okay.  So it's kind of clever.  What their pitch is...



LEO:  Oh, I get it, I get it.



STEVE:  ...that you just have a slider, and the slider changes a distortion, like a single-point sort of sinkhole gravity spiral distortion of an image.  And as you slide the slider back and forth, it winds this distortion one way or the other.  And your goal as the "prove you are a human and not a computer" is, looking at the image, we can instantly tell what our slider is doing.  And but the clever part is they're suggesting that sites that want to protect themselves with CAPTCHAs also tie into advertising networks.



LEO:  That's what's interesting about this is these are ads, once you solve it.



STEVE:  Yes.  And so it's also clearly got your eye on the ad so you don't glaze over and don't focus on it.  Basically you're resolving an advertisement yourself, and you have to in order to move forward.  Now, the thing that doesn't impress me about it is that the slider has only 30 settings.  And 30 is not a big number, as we know, which means that something that was just trying to brute-force post on a forum that was protected by this could just choose a random setting for the slider, and one 30th of the time it's going to succeed.  That's the problem with this solution, as opposed to - and they talk about the impossible-to-solve CAPTCHAs that we have all encountered.  I mean, some of these things, they make you feel like it's your fault that you cannot possibly figure out what this heavily distorted string of characters is supposed to be.



And they quote some statistics, like a failure rate of 75 percent by people and a success rate of 30 percent by computers for old-style CAPTCHAs, the distorted text CAPTCHAs.  And they talk about a 98 percent success for people of their untwist-the-twister, the twisted-up ad approach.  So anyway, I wanted to bring it to our listeners' attention because it's kind of cute.  I also do think that this would not be difficult for a generic image algorithm-based solver to find.  And there does also seem to be sort of a dead spot on the proper solution.  As I was moving the slider back and forth, it unwound, but it seemed to kind of like the correct setting more than the other ones.



LEO:  It's stupid.  This is just a way to put an ad on the page.  And we know that anything a human can solve can be solved because you just redirect the CAPTCHA to a human and let them solve it.



STEVE:  Yeah, and actually this one would be really quick to solve.



LEO:  Yeah, it'd be fast.



STEVE:  You'd be real good at unspinning the thing.



LEO:  Truck through these, yeah.



STEVE:  While going through our mailbag yesterday for our Q&A, I found a note from Bryan in Carlsbad, California.  And I liked this because it was a follow-up on remember that we talked about FreeBSD having discovered that their servers had been - I think two of their servers had been compromised, and they were very worried over anyone who downloaded FreeBSD between two dates could have been subjected to an unknown exploit because they had not yet had a chance to figure out what was going on.



So he wrote, "Hi, Steve.  Regarding the news of intrusion at FreeBSD servers you reported in Security Now! 379, I shared with a colleague who reported back to me with a November 22 update" - which I had missed, which is why I wanted to share it with our listeners - "stating:  'Verification of CTM-sourced trees has been completed against the Subversion tree, confirming that there are no differences between the two.  Our experimental Git repository has been similarly verified.'"  So it looks like that is okay.  No one who did get FreeBSD during that time would have risked being in trouble.



I wanted to give a moment for an update on the Quiet Canine project.  About a hundred of our listeners so far have reported problems with dogs and an interest and willingness and in some cases, I mean, they're, like, to their wit's end.  They've bought all the other devices available.  None of them work.  They're, like, on the verge of moving because the neighbor's barking dog problem is so bad.  There's one person who's being harassed by Chihuahuas that, like, run around him, and he's sure that, if he didn't keep his eye on them, they would nip him.  And having read all these, I found that my feeling about the problem has evolved.



I mean, I don't have a dog problem.  As we know, my best friend Mark does, and we solved it.  I was telling you before we began recording, Leo, that he's only had to use that megablaster unit that I first built for him a month ago three times.  But when he does, and it's just with the merest little blip that he sounds it, these two little collies, he said it's like the Keystone Cops with them, like, crawling all over each other, trying to squeeze both of them at the same time back through the doggie door that only has room for one of them.  And he says it's pretty funny because, I mean, they just - they absolutely want to leave the area.



LEO:  We should underscore this isn't harmful to the dogs or even distressing to the dogs, it's just like shouting at them.



STEVE:  Yes.  Well...



LEO:  And it surprises them.



STEVE:  I think it's better than shouting because shouting will anger them and upset them.  This is alien.  This is like nothing in their experience.  It's completely foreign.  And so it's the surprise value.  It's the "What the heck is that?"  And so they just want to get away.  I mean, yes, he's doing it from his second-floor window down to the ground floor, so it's not at all harmful.  And believe me, they don't stick around.



So where I am at the moment is we had a huge breakthrough this weekend.  The design no longer uses or needs a microcontroller at all.  It's self-oscillating rather than needing to program a microcontroller and use that as the oscillator.  The parts cost is now less than $5, including the tweeter.  It costs more for shipping than it does for the parts.  And people are building them.  I'm seeing pictures now.  One guy built one into a flashlight form factor that he calls the "Canine Flashlight," I think.  Or I think that's what he called it.  But it's still in flux.



I've seen some complaints from people who talk about how disorganized the group seems, and he just wants to get a parts list.  Now, Leo, I put some links here in the show notes.  You can bring them up for people who are looking at the video.  You can see that I have the wave forms that it produces that I was staring at last night, and I managed to reduce its power consumption by a third so that it will last 50 percent longer than it would have before.  The schematic exists and the parts list and so forth.  But it's still in flux.



http://www.GRC.com/tqc/TQC_v2.1.png

http://www.GRC.com/tqc/TQC_Waveforms.png

http://www.GRC.com/tqc/TQC_v2.1_Schematic.pdf



So for everyone who is interested, I mean, I've seen some neat mail.  There are some parents who, because this is so simple, think it would be a great project to work on with their kids to sort of introduce them to electronics and electricity and so forth.  And it would be because it is so simple, and it does something.



All of this will end up being organized and living at GRC.  So the Google Group only really makes sense for people who are actively following the postings.  You can't just sort of come by and, like, have everything laid out for you.  I will be doing that at GRC as soon as this settles down.  But I'm still making changes.  Just yesterday, as I said, I reduced its power consumption by a third.  So it's too soon.  For people who want to be on the bleeding edge, people are building these things and providing feedback.  But there will be some blood.  So, I mean, if you poke yourself with a resistor lead.



LEO:  The dogs will not bleed.  I just want to emphasize this.



STEVE:  No, no.



LEO:  There's no bleeding dogs in this.



STEVE:  No.  So anyway, I'm really, when I'm listening to people who are being bitten, and we have mail carriers who are really being harassed, and people who, I mean, their life is being ruined by a next-door neighbor dog who is out in the backyard all day long.  Sometimes someone lets their dog out at 2:30 in the morning, and it starts barking.  They've got newborns that cannot sleep that are being awakened at all hours by dogs barking.  I mean, it's just - I really developed a much better sense for that we're the victims, unfortunately, or oddly, in this.  Which seems so counterintuitive.  But it's just dog barking is a huge problem for people.



So anyway, I don't know how this is going to develop, where this is going to go.  I don't really want to be in the hardware manufacturing business.  I was there once with the light pen, and I did that.  And I don't think that's where I want to be.  So I'll play this by ear.  I'm committed to building some prototypes for our listeners because I want to find out whether this is effective.  That's the next step.  So I'm just sort of taking this one step at a time.  I want to see, like, do dogs get used to it?  Is it initially startling but not after a week or two?  Can dogs be trained?  People want to - I would say it's about 50/50 neighbors' dogs and people's own dogs who have some behavior that they want curtailed.  So I just don't know yet, but that's the nature of research and development is we'll just go one step at a time.



LEO:  Awesome.



STEVE:  You and I discussed, before we began recording, but I wanted to for our listeners, that you finished Season 2 of Homeland.



LEO:  Yeah.  We're not going to spoil anything here.



STEVE:  Which you could have only done on Sunday because I put this note in the show notes because Season 2 just finished, and I wanted to say, at no point was this a disappointment.



LEO:  What a great show.  What a great show.



STEVE:  Yeah.  So I'm sure there will be...



LEO:  That's all we can say.



STEVE:  I'm sure there will be a Season 3.



LEO:  There is going to be a Season 3 because they did a little piece at the end with the showrunners.  This is on the Showtime Network.  Showtime has a showrunner show.  And he talked about next season and what might happen.



STEVE:  Oh, I've got to go find that.  I didn't see that, Leo.



LEO:  It's on the on-demand portion.  Yeah, he said, basically - no, I'm not going to say anything.



STEVE:  Okay.



LEO:  Because you shouldn't watch it because it does - it is a little spoiler-y.



STEVE:  I have heard through Twitter and through email, many people who have been induced to see it are thanking us for bringing it to their attention.  They're really, really liking it.  So for what it's worth, I think it's an entertaining program.



LEO:  Yeah, quite...



STEVE:  Speaking of entertaining.



LEO:  Yes.



STEVE:  I did run across a note I wanted to share because it ties into sci-fi and one of TWiT's sponsors, Audible.  James Tisdale in Waterloo, Ontario, Canada wrote.  The subject was "David Weber's Honor Harrington Books - Blessing or Curse."  And of course that subject got my attention.  He sent this on the 12th of December.  He said, "Hi, Steve.  I've finally gotten around to taking your suggestion to," he has in quotes "read," he says, parens, "(I listen to the audio books) David Weber's Honor Harrington books.  I've gone through the first three books so far, and each one has me wanting more.  As I am 'reading,'" in quotes, "them, I am as happy as a treecat with celery," which Honor Harrington readers will know what that means, "but I have to curse you at the end of each book as I have to then wait the rest of the month for my next Audible credits so that I can get the next book.  Though I wouldn't want it any other way.  I have to say that I think this series is one of the best works that Audible Frontiers has done and would suggest that anyone wanting to read these books think about going the Audible.com way.  From this long-time Audible user, these audio books are five stars all the way."



LEO:  Great.  Great.



STEVE:  And just on the topic of "reading," I also saw Preston in Silicon Valley.  He wrote, subject, "I'm reading, no, enjoying a great book."  He said, "Hi, Steve.  A super quick note about audio books.  When I started 'reading' audio books, I would say to my wife, 'I just started reading (insert book title here),' and she would jokingly complain, 'You're not reading it, you're listening to it.'  We debated the topic, and finally I said, 'Fine, I'm enjoying a new book.'"



LEO:  Good word.  Good word.



STEVE:  "Ever since, I use the term 'enjoying,' and every time we both laugh a little.  Love the show, including the sci-fi, Hush Puppy, and other talk.  Preston."



LEO:  I like it.  "Enjoying."



STEVE:  And I asked you last week about the iPad Mini.  I found myself near an Apple store, so I went in.  And I haven't changed my decision, which we sort of - you and I came to, which is they are sure to increase the resolution, so why buy one now?  But I just wanted to say that what struck me more than the size was its weight, which is light.  It is, I mean, I'm an iPad - I've owned multiples of every version.  And they're not light.  This is really light.  As I was holding it, I was thinking, oh, my god, this is - here's everything that the iPad is, and it doesn't weigh much.  So I was very impressed with that.  I would love to have it get, boy, if it could get the pixel resolution of the regular-size iPad in that size, so that it was super retina, that would be something.



LEO:  Well, I think it will be retina.  In fact, now, and this will really peeve people off if this is true, we're starting to hear rumors that Apple may rev the iPad Mini sooner than later, like sooner than September.  And if they do put out a retina, like in May or June, there are going to be some angry people.  Angry people.



STEVE:  Not me.



LEO:  Angry.



STEVE:  Now, the note I have...



LEO:  Yeah, because you didn't buy one.  I mean the ones who did.



STEVE:  Yeah, so I know what you mean.



LEO:  Angry.



STEVE:  The note that I have that would normally talk about SpinRite is about everybody.  And I just liked it.  The subject was "Nothing but love."  Now, I didn't know what this was about.  This was in the mailbag from Jason in Pennsylvania.  He says, "Nothing but love."  And he said, "Hey, Steve, GRC gang, Leo, Tom, et cetera.  I know that this is technically the wrong feedback form for mentioning the podcast.  But I'd like to address everyone, and I figured this might be a good way to do it.



"SpinRite has saved my data more times than I kinda care to admit.  I do have backups now, but there is simply nothing like the speed of a SpinRite recovery compared to the daunting download task of getting those backups back from my cloud provider.  Even a SpinRite run that's extended saves time.  Also, the podcast has been AWESOME," he has in all caps.  "I'm quite addicted and really look forward to listening on my horrible commute or during my workouts.  It is clear to me that Steve, Leo, Tom, and the rest of the gang at GRC and TWiT are making this world a better place to live in.  Seriously.  I'd rank your efforts high among the great things that make life worth living."



LEO:  Oh, wow.



STEVE:  "And before you write me off as nuts, stop and think about that.  Isn't it always the small things that matter the most?"



LEO:  True.



STEVE:  "When we recognize these kinds of things.  If I wasn't fed, sheltered, and clothed, my opinion might change.  But that would be because of my perspective.  From where I sit now, joy comes from different places.  Anyway, I felt the need to express thanks to everyone listed above.  You have all made a big difference, and it is much appreciated.  Please keep up the good work, never stop, et cetera, et cetera.  Also I'm a proud SpinRite owner, ready to cram money in your pocket for any upgrades or new products you create.  I'm also a slave to buying everything advertised on TWiT, so please tell Leo to take it easy.  I do have my limits.  If you read this on-air or post this someplace, please don't reveal my email."  Of course not.



LEO:  No, we would never do that.



STEVE:  So thank you, Jason.  That was a very nice, neat, holiday-spirited note that I know we all appreciate.



LEO:  You know your blinking lights have stopped.



STEVE:  Oh, you're right.  We had...



LEO:  You have a PDP crash?



STEVE:  No, no, we had another little brief power failure a couple nights ago, and I had to go around and reset all the clocks.  And I just forgot my blinking lights.  So I'll...



LEO:  What is that you've got there?  Is that a tuba?



STEVE:  This just came in the mail.  The doorbell rang as you were starting your Ford commercial.  This is the neatest company.  I don't know if people know about it.  The company, I think they're in Minneapolis, is Digi-Key.  They are a fabulous online electronics parts supplier that can ship overnight, or I finally got myself under control because I was spending way too much money on overnight shipping because I was wanting the stuff immediately.  But all of the parts for the Quiet Canine Dog Whistle project will be sourced from this one company.



LEO:  Oh.  This is just like a toy store.



STEVE:  Oh, my god, Leo.  Everything you can imagine, massive inventory, quantity discounts, I mean, I would imagine major companies might be sourcing stuff from them.  But so you're able just to go through, use an online ordering process, tell them how much you want, they put it all together, you tell them how you want it shipped, and they're just fabulous.  In fact, something I asked for it turned out they didn't have by the time they were trying to pick it.  They phoned me and said, "Steve, this is Digi-Key.  We just wanted to let you know that or hope that this wasn't a critical component that you needed because we don't have it.  But we'll ship everything else.  And if there's a replacement that we can use, give us a call, and we'll get it to you immediately."  So they're just - they're an amazing company, DigiKey.com.  And so when I finally put together the whole bill of materials for people who want to build these themselves, it'll just be a parts list from Digi-Key.  You go there, put it in, and you'll end up essentially with a kit just arriving at your doorstep.



LEO:  This is awesome.  Look at this.



STEVE:  Yeah, I mean, anything you can imagine.  I put in "n-channel enhancement mode MOSFET," and bang, there's, like, all the ones they have.  You're able to, like, then, winnow down a huge array based on characteristics.  You can sort the columns.  It's just - there's also Mouser.com.  They're sort of the - Digi-Key and Mouser are the two distributors that have really built themselves a beautiful online presence for doing this kind of thing.



LEO:  You did not just learn about this company, somebody in the chat says, obviously.  I think...



STEVE:  Oh, no.



LEO:  I think you've known about them for a while.



STEVE:  No, it's why I can talk about - I can state their reliability and reputation is that, I mean, they're my go-to place when I need a particular widget.  Well, and we no longer really have electronics stores around.  Radio Shacks are kind of cheesy, and they've pretty much always been a little too consumer-ish.  We happen, because we're in a particular location in Southern California, there's one store called MarVac in Costa Mesa that I do drive to when I want something, and I'm willing to go half an hour both ways to get it.  But again, they've got limited inventory, nothing like Digi-Key.



So what I ended up doing is, if I order by - they're so good that they will accept orders up to, I think it's 8:00 p.m. central time.  So even late in the day.  But I know that if I order, for example, the stuff that just came now, I ordered Monday morning.  So they got it in - and this was by mail. So this is Priority Mail, which is the least expensive way to ship it, it's like $5.00.  And they ship it Monday, I get it in California on Wednesday at noon.  So, anyway, love them.



LEO:  That's cool.  You're such a geek.  Shall we get - you're such a geek.  Shall we get to the questions?



STEVE:  Yeah, we'll do as many as we can.  We've had a lot of fun up to now on the podcast, so...



LEO:  We've got 20 minutes left.  That'll be enough time.



STEVE:  We'll do what we can.



LEO:  Yeah.  All right.  Let me see here.  This is...



STEVE:  Oh, actually, No. 1 is just so funny.  Oh, Leo.



LEO:  All right.  Scrolling down.  Where are the questions?



STEVE:  They're on a different PDF.



LEO:  Ah, there you go.



STEVE:  That would explain it.



LEO:  That would explain it because I have the long Oracle Java notes that you sent.



STEVE:  Oh, I decided not to drag everybody through that.



LEO:  Thank you.  Thank you.  They can read those on their own.  We don't need to read those to them.  Let's see.  Q&A show notes, questions.  There it is.  Let's open that sucker up.



STEVE:  Oh, goodness.



LEO:  Oh, I did open it.  I already had it.  Why don't I see it?



STEVE:  These computers are so confusing.



LEO:  Question 1.  Yes, it is.  I can't figure out how to use a computer.  This is a "Listener-Driven Potpourri," according to Steve.  Wes in Indianapolis inadvertently interfered in his family dog's "business."  Hmm.  Hi, Steve.  I'm a big fan and was just listening to the Security Now! episode on DTLS when I heard you mention how old CRT TVs produced a certain very high-pitched whine while they were operating.  It reminded me of when I was younger, and we had an ancient-looking CRT television in the living room.  It was the kind with customizable buttons that you had to dial in to the station you wanted to watch - or the cell phone conversation you wanted to hear, but that's another matter - although thankfully it came with a handy three-button, count 'em, remote.



One Sunday morning I was playing Super Mario World.  My dog came into the room to perform some lewd acts with the furniture.  I told him to stop, but he wouldn't do it.  I even threw a toy to him to try to distract him, but he was rather focused and engaged, I wonder why, in a lovely piece of couch.  In a fit of exasperated acceptance, I pointed the remote at him and pressed the power button, prepared to dryly complain to no one in particular about how the remote was broken, and at the very least entertain myself.



However, oddly enough, the remote wasn't broken at all.  After I pressed the button he jumped backwards and looked around as if he were stung by something.  I tried it again with the same result.  Then, to my dog's chagrin, I did some further youthful experiments.  In short, the effect was reliable up to 10 feet while the remote was pointed at him and, to a lesser extent, when pointed at him through a wall.  I decided not to do it again because it obviously upset him.



But maybe you could find use for this in building a more compact version of your PDK.  I figure with a bit of amplification you could rig up a pocketable device with a decent range for dealing with aggressive dogs out on the streets.  You could sell it to mailmen all over the country.  Unfortunately, I don't recall the brand of the TV, and I don't know how standardized remote control technology was in the '90s.  But maybe there's something here.  Thanks for the great podcast.  Wes.  That is bizarre.  It must have been an audio remote.



STEVE:  Well, do you remember - yes.  First of all, I thought maybe we need to rename this the Canine Coitus Interruptus box.  So the original remote controls had three or four big stiff buttons.  And when you pushed it, a striker hit a steel bar that emitted an ultrasonic tone.



LEO:  Oh, my goodness.



STEVE:  And so there was a receiver in the TVs with four tuned circuits, each one that would respond to a different tone.  So one was like alternate action on/off.  Or maybe it was like channel up, channel down.  I mean, one was channel up; one was channel down; one was volume up; one was volume down.  But you would kind of go clunk, clunk, clunk, clunk, and the TV would respond each time because you were banging this bar, and it would send out a very high-pitched tone.  And clearly what we had was a very, very - he arguably was the originator of the Quiet Canine Dog Whistle.  It was exactly that effect, which I just got a kick out of.



LEO:  I hope this won't throw you.  But Zinga tells me that there is on Amazon something called the Pet-Agree Dog Training Ultrasonic Aid.  Also use in training cats, it says.



STEVE:  It doesn't upset me at all.  And in fact it's one of the reasons I want to thoroughly beta test this because many of our listeners, being techie people by nature, have already bought every one of these things.  They sent me links to things that I've seen.  And remember that I mentioned I had bought a whole bunch of these things for Mark because I'd just rather buy something for him than have to go through inventing and building one.



LEO:  Right.



STEVE:  But none of them work.  And all of our listeners report nothing, nothing has ever worked for them.



LEO:  They just aren't willing to put enough power behind it.



STEVE:  I really think that's the case.  The other thing they do is they pitch them much too high.  There was something Mark had called a "Dazer" that actually I got for him.



LEO:  Yeah, that's this.  The Dog Dazer II Ultrasonic Dog Deterrent.



STEVE:  Yes.  Now, the problem is that's at 25KHz.  I've measured it.  And that is way too high.  Dog hearing actually peaks down around 5 to 10KHz, and then it does extend to, like, 15 and 20.  But it then begins to drop off very quickly.  Many of these companies pitched theirs much too high.  Just, I don't know if they didn't do their research or what.  But so that's why I'm deliberately at about 15KHz is to definitely stay down where I'm sure we have a sensitive receptor.



LEO:  There's a review by a postal carrier of the Dog Dazer II.  It says it works only on four out of the thousand dogs he's tested it on.  It stops about half of all dogs from barking for a few seconds, about 30 percent of dogs from barking as long as I hold the button.  It quiets my day, but I'd only use it as a primary defense if I have a can of mace as backup.



STEVE:  And we do have a few postal carrier listeners who have asked for and will receive a beta device.



LEO:  Postal carriers, we should point out, do carry mace for this.



STEVE:  No kidding.



LEO:  Yeah.  So if they're attacked by dogs they have something to spray them with.  This would be more humane than macing a dog.



STEVE:  Oh, my goodness, yes.  I mean, if it's effective.  And the other thing, too, is that I've been considering using a microcontroller so that it only generates a short burst.  There is no need to, like, spray anything with this.  I mean, my intention is to have it be so loud that you want a shock value, a startle value, not to hurt anything.  You just want to say, okay, knock it off.



LEO:  Right.  And here...



STEVE:  And something brief is better than that.



LEO:  ...thanks to Eric Duckman and Wikipedia, is the Zenith Space Command Remote Control, with four buttons.



STEVE:  Oh, there it is, yes.



LEO:  Each of which strike a bar, make a tone that you can't hear.



STEVE:  And you know that I took mine apart, and my family was not happy.



LEO:  Of course you did.  Moving along to Question 2, John Hughan in Austin, Texas:  Why not start with TCP and just switch to UDP when you're using DTLS?  Given that one of the design goals of DTLS was to reinvent as little as possible, why couldn't the design have been to perform the standard SSL/TLS handshake - I'm getting the acronym hiccups - over TCP the way we always have, and then use the symmetric key negotiated in that session for the UDP session?  To me that would seem to require the least change of all since there'd be no need for the mini-TCP tweaks to UDP.  And for applications like VoIP, I can't imagine that the extra time required to complete a TCP handshake upfront to negotiate a key rather than doing everything over UDP would be significant.



Is there some issue with the way connections are handled by operating systems and/or firewalls that would prevent switching over from TCP to a UDP session while retaining the symmetric key negotiated over TCP that way?  And, for that matter, if UDP is only now gaining the benefits of SSL/TLS, how has Skype been providing encrypted conversations for so long?  Are they running a proprietary encryption scheme?  Thanks for providing such a consistently fantastic show.  This email from the one listener who understands this show.  Because I don't understand the email.



STEVE:  I was very impressed with John's question.



LEO:  Interesting question.  But can I boil it down to, basically, we don't negotiate a new key, we use the key we've already negotiated, the symmetric key?  Is that right?



STEVE:  Well, he was exactly right that the guys that were trying to do essentially SSL over UDP, they ended up trying to reuse all of the existing good technology and proven that was designed, that was developed for SSL over TCP.  But doing that does, because TCP offers a reliable transport, they had to add things to UDP, specially during the setup handshake, to sort of simulate the reliability of TCP in the ways that I described in that podcast [SN-380].  And so John is - it's a very interesting proposition.  That is, if their goal was to not reinvent the wheel, why not just negotiate a TCP connection, then take the context, the SSL context which you negotiate from that and move it over to a UDP session?  So you let TCP do what it's best at, which is the reliability that you need during the SSL negotiation, then take the information both endpoints obtain, which is used for the subsequent crypto, and move that over to UDP.



I actually had a different solution that I would probably argue was better than any of those, I mean, even better than DTLS, that I'll talk about in a second.  But John is right when he suggests that maybe is it something about operating systems or firewalls or something.  And the reason that you can't move context between flows, between endpoints, is that many systems are behind load balancers.  There'll be like a firewall load balancer which receives the incoming traffic and then redirects it to a given server behind.  Sometimes those are based on the instantaneous load that all of the servers behind them have, or the load that they're under, so that this switch will, in like a Google or an Amazon or any big datacenter, there's normally a load balancer.  So it will choose which server is going to get this, is going to handle this connection, and then remember that statefully.  So it's very possible that one server might get the TCP negotiation, and then when you establish another connection, that ends up going to a different server.  There's normally no reason why that wouldn't be okay.  So that's one of the problems.



The other way these things work is sometimes that they will, rather than using dynamic load balancing, they're just trying to evenly spread the traffic across a set of servers that are behind sort of this deconcentrating switch.  What they do is they'll take the source IP and source port and often the protocol, and they will mix them together and essentially hash them and end up with, like, a one of 10 or one of eight, and then that determines which one of the eight ports the traffic is emitted from going to one of eight servers that are behind there.  That way sort of statistically all the users on all the different ports all over the Internet end up randomly spreading themselves between servers.  And the beauty is any one user always gets assigned to the same server, that is, for a connection.



But when we allocate TCP and UDP connections from our operating system - we talked about this years ago - we sort of march up through the available ports.  So port 2468 will be used, then 2469, then 2470 and 2471.  So the point is that there isn't a way for the application to say I really need to be on the same port that I was on TCP under UDP.  That's done by the TCP/IP stack in the kernel, and the application layer doesn't have any control over it.  So, yes, that's why they didn't make that change.



The thought that I had was that an interesting modification to TCP could easily be made, which is to tell TCP to shut down all of its reliability nonsense.  That is, you establish a TCP connection, and then you say, I want to go asynchronous.  And essentially you turn the existing TCP connection into a UDP connection by telling both ends, okay, don't care about buffering packets, don't care about lost packets, don't care about out of order arrival.  We just want a clean, unencumbered, unbuffered, unpatched-up pipe between endpoints.  And that would actually be something pretty simple to do.  So maybe someone will do that, which would be cool.



LEO:  Bruce Barnett, Albany, New York writes:  Here's two great low-cost items for the home user who wants a "data diode" from GreatScottGadgets.com, the "Ethernet Throwing Star."  And you can Google "Ethernet throwing star" if you want.  It's a LAN Tap that looks kind of like a ninja throwing star, actually.  He says there's a kit for $15 and a fully assembled version for $40.  It's great for network sniffers, intrusion detection systems, et cetera.  It splits two-way traffic into the original two-way and two additional one-way connections that have to be merged to fully decode protocols.  This is a preferred solution because programs like Wireshark can have buffer overflows, and they run as a privileged process.  A malformed packet can compromise a sniffer, but the diode prevents that machine from interfering with the monitored network.  Keep up the good work, Steve.  We enjoy the show.  There it is, the Throwing Star LAN Tap.



STEVE:  Yeah, I liked this because essentially I've been very impressed with the technical level of our listeners.  I mean, they've jumped on, for example, the Quiet Canine project, and a bunch of them are building these things, even though the design isn't finished.  They don't mind being on the bleeding edge.  I remember when I talked about this a year ago and found that cool little Xpresso LX board, our listeners kept buying out the supplier.  And I thought, wow, we've got a lot of techie, hardware-capable, interesting, experimenting oriented people.



We talked about the idea of modifying Ethernet cables, but this has done it in a very simple way.  You may be wondering why they used the term "throwing star" until you see this thing because the PC board is in a wacky sort of four-pointed star shape.  And then with the little kit you just get the Ethernet connectors which you mount on the four points of the star.  And two of them are a passthrough, and the other two monitor the traffic in each of those two directions.



So anyway, the point was that, if anyone was interested in the notion of sniffing Ethernet in a one-way direction - the so-called "data diode," as the term was used by that company we talked about a couple weeks ago who'd done that at the protocol level - if you're interested in doing it at the hardware level, this does it for you for 15 bucks if you have a soldering iron, or 40 if you don't.



LEO:  They sell it at the Hak5 store.  Darren Kitchen and Shannon Morse have a video on it and everything.  And they sell the kit for 15 bucks, not very expensive, and the assembled version is $40 if you don't want to take soldering iron in hand.  That's neat.  Kinda cool.



Jim Sauber, Minneapolis, Minnesota has a suggestion about show links:  Steve and Leo, listener for several years, insert usual stuff here.  Steve brings up many interesting websites during the show and refers listeners to his Twitter feeds for the links.  Since often people listen to the show or read the notes weeks or years later, relying on Twitter for the many links seems to leave us with the task of searching through your Twitter feed for the right dates.  Also, if Twitter someday disappears or decides to truncate your old tweets, these will be lost forever.  For the sake of at least posterity, I request that you include the links in your show notes or copy and post your relevant tweets on your site so they will live forever as we know your notes will.  Looking forward to many more years of Security Now! and other great TWiT shows.  Thanks for everything.



STEVE:  And you know, I had not thought about that, but he's completely right.  Twitter is inherently recency based.  And I'm always saying, and I'm thinking, to people who listen to the podcast in the next few days, since I'm not typically frantically tweeting, the things that I post for the show won't have been pushed far back into my Twitter history.  But on the other hand, we're also encouraging people constantly who just joined the podcast and find out about it, we're saying, hey, and by the way, all 380 prior episodes are over here.  But it's certainly the case that on all those times a year later that I refer to things, there's just no way to find that on Twitter.



So I'm going to ask Elaine if she would grab the links at the time that she's doing the transcription of the podcast and just embed them in the podcast.  I don't think that would be a problem for her, I'm paying her by the hour, and it shouldn't delay her very much.  That would capture them at the time.  Now, we still have the problem of the links themselves becoming stale over time, but that's - at least we've done everything we can.  So I'm going to, when I send this off to her, I mean, she's hearing this right now...



LEO:  Oh, you want me to do that, Steve?  Okay.



STEVE:  ...because she's transcribing this.  So I would like her to do that.  I don't have any this week, but in the future - I know that she's a little bandwidth constrained, but pulling up my Twitter feed takes no bandwidth.  And that would be great.  So thank you, Jim, for the suggestion.  That's an improvement we will incorporate.  And thank you, Elaine, for doing that.



LEO:  Do you send Elaine what you send me, the show notes before each show?



STEVE:  Yes.  She gets that all, too.



LEO:  Because the links are in there, too.



STEVE:  Oh, good point, yes.



LEO:  She doesn't have to go anywhere.  She's already got them.  Question 5, R. Morton in Round Rock, Texas - home of Dell Microcomputers, I think that's about all that's there - wonders about Google and SSL certificates up the wazoo.  Steve, as you suggested, I have Certificate Patrol installed in Firefox, and I have a Gmail account.  Lately I've been spending an enormous amount of time in China - he does work for Dell - and as such I keep a very tight rein on Internet usage.  Within the last six to nine months, it seems every time I visit Gmail, Certificate Patrol warns me of a slew of changed certificates which I ignore while in China.



But then today, after checking Gmail at home in the U.S., I receive an alert that Google is now a Certificate Authority, having replaced Thawte and issuing their own certificate that expires three months sooner than the Thawte certificate.  What am I to believe?  Is Google going rogue, or is someone trying to spoof them?  Please, what's going on?



STEVE:  So that certainly was news to me, so I established an SSL connection to Google.  And what I saw was a little different than what our listener was seeing.  However, I should mention I was a fan of Certificate Patrol.  I loved it.  And in fact it's through Certificate Patrol that I found DigiCert, that is now my certificate provider.  I really love them.  And it was by seeing all of, like, Facebook uses DigiCert, so I can, too.  And I'm so happy that I left VeriSign for this because it just - VeriSign was becoming increasingly difficult to deal with.



However, I was forced to stop using Certificate Patrol because of Google.  Google is synthesizing certificates at an insane rate.  So much so that, exactly as our listener reports, Certificate Patrol was popping up all the time.  And there is an ability or a checkbox to say "Ignore further notices from this provider."  But whatever Google was doing was still upsetting Certificate Patrol.  So I just said, I mean, I put up with it for quite a while, and finally I just said, okay, I've got all the information I'm going to.



What Google is, is an intermediate authority.  Equifax is the root.  And so what R. Morton said made me curious to see whether Google had in fact quietly become a root authority in our browsers, but that's not the case.  And I'm kind of glad because that's a little heavy-handed, and a lot of responsibility, too.  Instead, they are an intermediate authority.  Their certificate, the Google Certificate Authority, yeah, I think it's called Google Internet Authority, is signed by Equifax, that is a longtime, old-school certificate authority, a root CA.  And then this Google Internet Authority is just - they must have an electronic certificate generator, I mean, it spews things out.  So it's constantly changing, different servers, different IPs, I mean, just basically these are - it's very much dynamic.



So I don't think it means anything bad that Certificate Patrol is being driven crazy by Google.  It's just the security model Google has, for whatever reason, is they do not have static certs.  They're being dynamically generated and signed by their own intermediate authority that is in turn signed by Equifax.  And he mentioned Thawte being replaced or reissued or I don't know.  So maybe the chain, certificate authority chain, changed recently.  But at this point - because I do remember Thawte being around there.  But at this point it's just certificate to Google Internet Authority to the Equifax root, is what I saw yesterday.



LEO:  All right.  Chris Lewis, Jonesboro, Arkansas, found a really nice Chrome tree-style tabs.  We know Steve loves tree-style tabs.  A new Chrome extension just came through my G+ stream, says Chris, that provides the tree-style tabs you say you love.  It's a long URL, so just search for "sidewise tree style tabs," I guess, in the Google Chrome store.



STEVE:  Yes, I meant to mention that, and I forgot to.  It looks very nice.  It's sort of like a sidecar that you dock along the side of the browser.  And from looking at the page, I have not installed it or tried it yet, it looks yummy.  So if there's anybody who, like I am a side tab addict over on Firefox, this is beginning to get there.  And I noticed there were some other utilities that were doing the same sort of thing.  So we're beginning to see - we're waiting for Google to come up with their official solution because they recognize there are tabaholics who organize themselves with their browser this way, and that tabs across the top just don't do it.  So I just wanted to point this out for other people who feel as I do.



LEO:  Tabaholics.  I like it.  Greg in Washington, D.C. wonders about a company impersonating commercial root CAs:  On show 381 you discussed how a person can tell if a company is snooping on their SSL traffic by examining the certificate's chain of trust.  Most companies issue their employees the hardware.  So what's stopping them from installing their own root certificates and naming them after the commercial providers?  A casual inspection of the certificate's chain of trust would show no anomalies.  You'd need to check the fingerprints for all the root CAs to uncover this problem.  What am I missing?  SpinRite owner/operator Greg.



STEVE:  And Greg is not wrong.



LEO:  Really.



STEVE:  I don't know if the root store in our computers would allow two identically named certificates.



LEO:  That's what I think is the problem; right?



STEVE:  Yeah.  There might be a naming collision there.  But I'm not even sure that's true because, with certificates, you can definitely have identically named certificates with different expirations because I've had that myself where I'm installing a new one, and the old one is still there.  It's about to expire or expired.  But I've seen them sitting side by side.  So it might be very possible for a company to issue, to themselves create a certificate named Equifax CA and sign it and install it in people's machines right along with the normal Equifax certificate.  And that might work.  Then, when their browser - let's see.  How would this work?  When their browser would ask for the cert from a secure site, it would provide the certificate from the fake Equifax.  And again, I don't know then how the matching works.  Is it serial number matching, or is it name matching?  So I don't really have an answer.  But it's a great question, and I'll bet you that we've got some listeners who have drilled down in this area where I haven't yet and will probably provide me with some answer in our feedback.  So I'll look for it and hopefully have an answer next time.



LEO:  Cool.  Here comes Question 8 from Matt.  He's commuting somewhere near Chicago.  He was listening to 381, as well:  During episode 381, a listener expressed some concern about their company monitoring their SSL traffic; and, if it's actually monitored, are his LastPass passwords still secure?  You are correct in that the blob of data LastPass uses is secure, even without any transport encryption.  However, what you missed is when the password is decrypted and sent back to another server as part of the login process.  If the listener's company is monitoring SSL traffic, then this password would be visible to corporate security software.  In other words, you couldn't read all the person's passwords, but any of the passwords he uses you could.  I always look forward to the drive home on Wednesday so I can listen to a new podcast.  Please keep them coming.



STEVE:  So Matt and a number of our listeners caught me on this.  I answered the question correctly.  I assumed everyone understood Part 2.



LEO:  All bets are off when you use the passwords.



STEVE:  I should have made it more explicit.  So, yes, the question was, is my LastPass blob secure?  My answer was yes, it is.  And it is.  But the person who asked the question certainly deserved me saying what our listeners have added, which is, but, when you use the individual passwords, they're not secure if your company is filtering your SSL and spoofing the provider.



LEO:  Andrew Cooper's in my new favorite city, Sydney, Australia.  He got a rude surprise:  First, Steve, I want to say "blah, blah, blah."  I was recently at a conference at a well-known museum here in Sydney.  While there, I connected to their public WiFi in order to check my email, among other things.  But when I connected to Gmail, Chrome gave me an alert about the SSL certificate being used.  I checked, and sure enough, the museum was trying to intercept the SSL session.  Needless to say, I immediately turned off my LAN WiFi radio and went without a connection for the day.  Without the podcast this would have been much more confusing, and I would have been less sure exactly what it meant.  As always, thanks for the great podcast.  I never miss an episode.  Andrew.  Wow.



STEVE:  So I'm impressed.  First of all, I thought, why would a museum do this?  And then I thought, oh, yeah, of course.



LEO:  Why?



STEVE:  They're wanting to filter.  They're wanting to do...



LEO:  Ah, no porn.



STEVE:  ...porn and bad content filtering.  And so they bought some edgeBOX that's sitting on the edge of their network, and it just does this.  It's like, that's what it's going to do.  So, and I'm sure, a museum being sort of a little bit like a school, in the same way they're just wanting to do content filtering for their LAN.  But I was impressed by Chrome.  So tip of the hat to Chrome for noting that something is fishy here.  You're trying to connect to Google, but you're not getting one of our certificates, so something's in the way.  Very nice.



LEO:  Wow.  Wow  Something to pay attention to.



STEVE:  And many people, by the way, I mean, this is - we're getting so many questions about this idea of am I really secure?  Am I being spied on?  Is my company filtering stuff?  So that's why we just went through a bunch of these.  It's representative of a cross-section of our listeners.



LEO:  Yup.  And Tyler Larson in Scottsdale, AZ suggests:  Make key-stretching hardware-proof by burning memory.  Okay.  You're going to have to explain this one to me.  You've already mentioned key-hardening algorithms such as PBKDF2 and bcrypt, which hash and rehash passwords thousands of times to slow down cracking attempts.  But these approaches all have an inherent flaw:  You can still build a cheap hardware device, or program an FPGA to dramatically speed up cracking.  But someone solved this problem.  By making your algorithm require huge amounts of RAM, you can massively increase the hardware cost of building a dedicated password-cracking device.  CPU-speed memory is extremely expensive, which means that building an ASIC for password cracking would be too costly to warrant the effort.  That's the idea behind scrypt, used by Tarsnap.  Reportedly, a hardware device implementing scrypt would be 20,000 times more expensive than an equivalent one implementing PBKDF2.  Your thoughts?



STEVE:  So this is our lead-in question for our next podcast after the Christmas Special.



LEO:  Oh, joy.



STEVE:  We have talked - I've touched briefly on this.  Attentive listeners with eidetic memories will remember the phrase "memory hard problems."  That's the cryptographic jargon for this kind of deal.  They're called "memory hard problems."  They are problems which are deliberately memory hard, that is, not algorithm hard, but memory hard.  Because Tyler and the author of Tarsnap, who designed scrypt - and, by the way, I'm very impressed.  Scrypt, which just some random guy did, has now been adopted by the IETF and is heading towards RFC.  So he did it right.  And in fact there's even - I ran across - there's even a non-bitcoin currency, another currency, that is using this scrypt algorithm, this memory-hard algorithm, as proof of work.  And remember, the proof of work is the whole concept behind bitcoin, which is doing something that is really hard, and you want hardness to be scalable and not something that you can easily get around by doing hashing fast.



And so everybody is correct.  Hashes are designed for speed so that they're not burdensome for normal applications.  We've sort of repurposed them for scrambling passwords.  But they're really not appropriate because look at what we're seeing with [indiscernible] breaking records all the time in the speed at which they've been hacked.  So the solution is somehow do something that is much harder, that is not just algorithmic, that takes it in a different dimension.  And that dimension is memory, and that's our topic in two weeks:  Memory Hard Problems.



LEO:  Awesome.  Wow.  That is going to be a hard problem.  We'll be back January 3rd, I think.  No, the 2nd.  January 2nd, the day after New Year's Day.  And that will be a special return to the regular Security Now!.  Next week, of course, we go back in time to 1990.  And that'll be a lot of fun.  Steve Gibson's at GRC.com.  That's where you'll find 16Kb versions of the show and transcripts, as well, thanks to Elaine.  GRC.com.  You'll also find SpinRite there, the world's finest hard drive maintenance and recovery utility, and lots of freebies, as well.  He's @SGgrc on Twitter, SGgrc on Twitter.



And of course you can get the show live here every Wednesday, 11:00 a.m. Pacific - not next week, but the week after - 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1900 UTC on TWiT.tv, or download audio and video after the fact at the same spot and wherever finer podcasts are stored.  Thank you, Steverino.  Have a great holiday.



STEVE:  Will do.  Thank you.  Great to be with you as always, Leo.  And we've got years and years more of this.



LEO:  See you next year, Steve.



STEVE:  Bye bye.



Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#384	

DATE:		December 26, 2012

TITLE:		Once Upon a Time

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-384.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  For this special year-end holiday edition of Security Now!, Steve digs down deep into his video archives.  He takes us back 22 years, to 1990, to share a 45-minute presentation he gave, once upon a time, on the inner workings of the "megabyte-sized" hard disk drives that gave birth to the PC industry.



SHOW TEASE:  It's time for Security Now!, a special edition on this day after Christmas.  We're going to take the week off and let Steve do the talking from 1990.  You want to know how hard drives used to work?  Guess what, they still work the same way.  Stay tuned.  A trip back in time, next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 384, published December 26th, 2012:  Back in Time.



It's time for Security Now!, a very special edition of Security Now!.  We're introducing this the week before Christmas, but it will air on December 26th.  Happy Holidays, Steve.



STEVE GIBSON:  Hey, Leo.  Thanks very much, and Merry Christmas.  This is the day after the Christmas holiday.



LEO:  Boxing Day.



STEVE:  Yeah, I guess probably many people who are normally listening to the podcast while they're commuting are probably not doing so this week.



LEO:  We hope you're in your jammies at home, is what we hope.



STEVE:  That they're off.  And actually that's a good thing because this is our special holiday Security Now!.  We agreed to strongly endeavor never to have a dark week again.  We made that mistake once and heard about it for quite a while.  So the reason it's good that people may be home is that this particular one really has to be seen and not just heard.



For some strange reason, my company recorded a series of presentations that I gave 22 years ago, when I would have been 35 years old.  These were in Chicago for what was called the SofSel SofTeach, which was a multicity road show that I was invited to attend for our software distributor.  This is back well before the Internet, when we copied software onto diskettes, and there were manuals, and they went in boxes, and you got them at Microcenter and Egghead and Fry's and regular boxed software retailers.  So SpinRite at the time was new.  And I was explaining to these people how hard drives work.  And I ended up sort of having it down pat, with a patter, which when I watched it again a couple weeks ago, I thought wow, I was pretty funny.



LEO:  You were a showman.



STEVE:  There's a bunch of stuff that I had forgotten I had come up with, like at the front of the audience, standing there with my arms by my side, my fingers sticking outwards, declaring myself to be a screw, and explaining the difficult job of a screw, which is holding down the stepper motor in the hard drive because it dare not allow it move, or the drive alignment will change.  And so there's a lot of pantomime.  It's very physical.  I'm taking advantage of the fact that I'm there in body in front of the audience.  So this podcast I'm always very conscious of the fact that the majority of our listeners are doing so in audio, so it isn't heavily graphics dependent.  Back when you and I were doing the TechTV stuff, there was a lot of graphics because it was TV.  Everyone was seeing it who was hearing us.



LEO:  Right.  There was no audio version.



STEVE:  Right.  So I would urge our listeners for this episode, I think it'll be worth your while.  You'll get a kick out of it.  And I'd forgotten the level of detail that I went into in order to describe the things that SpinRite does.  I would bet that every single listener learns something even now about hard drives that they didn't know.



LEO:  It's actually funny because I would have, if you'd asked me in, what was it, '95, '96...



STEVE:  No, '90, 1990.



LEO:  '90?  If you'd asked me...



STEVE:  Yeah, 22 years ago.



LEO:  ...in 1990 if in 20 years we'd still be using hard drives, I would have mocked you.  I would have said, oh, no, that technology, that can't continue.  We're going to be using holographic memory cubes, of course.



STEVE:  Well, actually, I even talk about those.  I'm not kidding you, Leo.



LEO:  Really.  Really.



STEVE:  Those holographic memory cubes are in that video presentation 22 years ago.



LEO:  But what's interesting is the same technology that you were describing 22 years ago is pretty much how it works today; right?  With a few added details.



STEVE:  Yes.  It's amazing how little of it has changed.  Some has.  But I just - it's a perfect, fun, wacky, holiday podcast.  But again, let me urge people, I mean, maybe you'll not believe this, and you'll listen to it, and you'll go, okay, I have to see what he was doing when everyone was laughing at him.  So in that case you'll probably end up watching.



LEO:  You spinning around like a screw.



STEVE:  Yeah.



LEO:  All right.  Well, we're going to get to that in just a little bit, Steve Gibson explaining how hard drives worked in 1990.  I can't wait to - do you have hair?



STEVE:  Yes, it's black.  Oh, my god.  And a huge black mustache.



LEO:  I can't wait to see this.



STEVE:  Jenny just looked at it, because I showed it to her a couple weeks ago, she's like - she was just staring at me with her mouth open.  She says, "I don't think I would recognize you."  I mean, she knew me years before then, but then we had a gap in our relationship.  And she says, "I don't think I would know who you were."  So, yeah.  It is quite a different look.



LEO:  I love it.  Is there anything you want to say before we roll tape?  And I mean tape?



STEVE:  I just want to say Merry Christmas to all of our listeners.  Thanks for being with us for this last year and heading into 2013.  I'm sure we're going to have a lot more fun and great podcasts.



LEO:  So let's spin the time machine wheel as we go back to 1990...



STEVE:  Where I had hair.



LEO:  ...and a hairy Steve Gibson.



[Begin 1990 recording]



STEVE:  Let's talk about hard disks.  If you ask somebody who has been associated with personal computers for a while  what the least reliable component of a PC is, if you make the exception of the operator, they'd probably say, oh, the hard disk drive.  The common wisdom now is not, is this drive ever going to die, but when?  And then of course you ask the subquestion, yes, but exactly when?  Because I'd like to back it up just before that, please.  Of course they don't give you any notice, typically.  And backing up is not a fun thing to do.  It's a very noncreative experience. 



And most people will tell you, "Oh, well, I know that I should have done that, but I just sort of never got around to it."  Or, "Oh, after I had my computer for two weeks, I backed it up."  And you say, "Yeah, uh-huh, when was that?"  "Oh, two years ago."  "And you haven't used it since?"  "Oh, no, I've been using it, but it's been fine."  Yeah.



Why do drives die?  Why have they got this bad reputation that, sooner or later, they're going to give up?  We know how to make things.  We're a society that's very good about building things.  We're putting men on all these other planets.  And what we don't know how to do, the Japanese guys do.  So together we've got the bases covered.  Yet we've got drives dying.  And the Fuji drives are dying just as quickly as the Seagate drives are.  So what's the problem here?



Well, let's look at it.  Let's step back for a minute and look at the technology in the drive and answer the question.  So here's the drive, a MiniScribe something or other, 3650.  It's got three surfaces, or rather three platters, six surfaces on each side.  The engineers haven't figured out yet how to do a Mbius disk, but they probably will.  That'll save them one head for each disk.  So in this case we've got three platters and six surfaces.  And one head for each surface.  This is a so-called "head tower," where the heads are all mounted.  And each of the little heads are sitting on one of the surfaces.  Then we have a little rack-and-pinion mechanism down here that translates the stepper motor's rotary motion into the linear motion for moving the heads in and out.  And that's basically it.  And this of course all spins around in order to allow us to get to all of the area on the different tracks.



What we need to do in order to store data in this thing is to establish addressability.  Right now it's just sort of this empty domain of magnetism, potential grazing land for a magnetic field.  We need to establish addressability.  And we want to also protect ourselves against a problem which these drives have by virtue of the technology in them.



Let's look at that.  If we have perhaps multiple surfaces, each with a head, so we need to select a head.  So that's one dimension in our address.  Then we need to know where on the surface, in or out [indiscernible], which track or cylinder on the surface we want to be.  So that's a second dimension.  And, finally, where around the selected track are we wanting to do our reading and writing?  So it's a third dimension.  So it's sort of half of a 3D coordinate system.  Which is not surprising because we live in a 3D coordinate system, and the drive occupies a volume of space.  And so we need to talk to specific areas of it.  So we have 3D.



Well, in the cable that goes between the controller and the drive are some wires known as the head-select lines.  And taken in combination, they determine which of these surfaces is the active one at any given moment.  It would be a problem, though, if the controller said I want to be on surface No. 4 and sent that signal through the cable, through a couple of these head-select lines, if there was a break in the cable or a bad connection at one end or some goo on the connector that kept it from mating correctly.  You wouldn't want the drive to hear the head 4 as head 2 because then it'd be working on the wrong surface.  So we need some way of knowing that we really did get the surface over here that we asked for over on the controller side.  So that's reliability in that first dimension.



Secondly, we need to make sure that we're on the right track.  These little stepping motors are nifty gizmos.  They are getting the speeds of them up so that they're actually cutting into the market that the older voice coil actuators used to have.  Voice coils tend not to be as reliable as the stepping motors.  But stepping motors have been known to misstep.  Naturally there's pressure on the engineers who design all this stuff to make them get where they're trying to go as quickly as they can so that the manufacturer can say we have a 63ms seek time, or 25, or whatever it is.  So they push them maybe a little too far, enough so that every so often they misstep, so they don't actually get to the track that they were asked to go to.



Well, if we were on track 25, the controller said I want to do something out on track 100 so go out 75 steps.  And if we didn't, if we threw in a freebie there and went out 76, or only 74, and didn't end up on track 100, that's a problem.  It's not good enough just to write our data somewhere in the neighborhood.  We really need it to be on the right track.  So we need a scheme for allowing us to address the data in the drive that prevents these kinds of confusions.



Also, we need to chop our tracks up into smaller pieces.  A track formatted with the least dense technology, called "modified frequency modulation," has about 80,000 bits around its circumference.  That's about 10,000 bytes.  Well, that's a lot of bytes to just allocate in one lump.  If we had a little 40-byte config.sys file that said buffers=20, files=20, and we could only allocate with the granularity of one track, well, it would take up 10K of the disk just with that little 40-byte file.  So we chop the tracks of the drive up into pieces.  In fact, these pieces, it's nice, are all 512 bytes.  It's nice because it turns out that's a galactic standard.  Aliens have chosen 512 bytes also for their packet size.  They don't have all this mechanical.  They've got those neat little cube things that are all solid, and they work with laser beams and things.  But they use 512-byte molecular-string DNA polymer manipulation.  So, still, that means that they'll have an easier time getting to IBM compatibility.



So, where was I?  So we need to label these sectors uniquely and give us some prevention against any kinds of problems.  So that's where low-level formatting comes in.  Low-level formatting establishes addressability on a drive.  Basically we go to every single track on every surface on every cylinder and everything and lay down little signposts.  These are called "sector IDs."  And they're just periodically plopped out on the disk as it's spinning.  It spins at 3600 rpm, so that's 60 rps.  It's whizzing.  And so the controller in low-level formatting just blasts these out of the head every so often, and that spaces them evenly around the track.  Then it goes to the next head, blasts those out; the next head, blasts those; the next head and so forth, until it's done all of them on that cylinder of tracks and moves to the next one.



Each of these contains three vital pieces of data:  the cylinder it's on, that is, that they track in and out; the surface it is a member of; and which sector it is around the disk.  Now, that may seem a little bit redundant because, after all, all the sectors on this surface, they all have the same surface number written into them.  Correspondingly, all the sectors on this track have the same track number.  Except that there's a benefit here.  If we encode the complete address of each sector in the sector's header, then all of them are unique.  So we've completely uniquely labeled all the sectors in this 3D storage volume.  Because of course you can't have two sectors that are in different places at the same location, by definition.



Okay.  So how does this work?  The computer says, "I want to write into Sector No. 1, please," to the controller.  The controller, that's what it's here for.  It says, "Fine, whatever you say, boss."  So this is Sector No. 1.  Well, we never know where the disk is at any given time as it's spinning around.  So we just start listening.  We put the head on the right track first and say, okay, we're on the right track, so to speak.  And we start listening now.  We open what's called a "read channel" from the proper surface, listening to everything going underneath the head.  It's a very, very delicate magnetic listening device.  And as each of these little signposts comes along, we check it and see, are you the one?  Do we get a match here?  No?  Okay.  And wait for the next one.  You?  A match?  No?  Okay.  And so on.  Eventually we're going to find it.



So imagine the head running along here.  It finally hits this sector, this sector ID.  It runs through it and says, ah, this is the guy.  I got a match on everything, exactly what I was hoping for.  In a little moment called the "right switching interval," right afterwards, we turn the juice on to the head.  We switch it from a read-mode head, where it's a delicate magnetic listening device, into a big magnetic plow, where we pour juice in it, and it goes [vocalizing], leaving ones and zeroes behind in its wake.  4,096 of these ones and zeroes form a 512-byte sector.  So we have essentially written data into the gap between these two sector IDs, which is really the sector region.  And the controller reports to the motherboard, okay, got it.  Motherboard, tending to be suspicious, says, oh?  Uh-huh?  Well, read that back for me.  So it's fine.



So again, it's down here somewhere by that time.  It again just starts listening from all these little sector IDs as they come along until it finds the right one, runs across Sector No. 1 and says, okay, here we go, and then starts paying attention to the data.  And it sucks in these 4,096 little bits into a buffer that's on the controller.  Generally it's this chip here.  And it gets them all together, that one sector's worth, and then adds them all up, adds the bytes up to make sure that, with the addition of a checksum here at the end, a little gratuitous byte thrown in, that we end up with a zero sum.  That's just a quick way of knowing, hey, all the bits are probably okay.



So we say to the motherboard, okay, I've got them all here.  Motherboards says, well, give them to me.  So they set up something called a DMA transfer, Direct Memory Access transfer, to move the data down through the I/O connector onto the motherboard and over to some little buffer or something sitting there.  And then we're really done reading this one sector.  So the controller says, "Okay, now we're done."  Computer says, "Well, yeah, but, what, one sector?  512 bytes?  What can you do with that these days?  Have you seen new Lotus?"  "Okay, I'll get busy."



So the problem is now the computer wants a second sector.  But while we were doing - we got this all sectored in, and then the disk kept on spinning while we were doing our checksumming and stuff and our DMA work, until we got to here somewhere, and then it said, "I want No. 2."  Well, No. 2 went by.  We were on it for a while, then - now we're on No. 3 even, probably.  But 2 is gone.  But that's not a big problem.  Columbus demonstrated how this works.  You just wait long enough, it's going to come back around, and we'll be fine.  So it starts looking for Sector No. 2, sure enough runs across it and reads in that sector.  Then the computer says, okay, we've only got about another three megs to go, so I need Sector No. 3.  Okay.  The problem is same as before.  We've moved past the beginning of 3 at least, by several sectors, perhaps.  We've got to go all the way around again.



Well, so the system is working.  We're reading and writing data.  But it's non-optimal.  We're spending much more time waiting for the sector that we've been asked to find, after just finding one, than we are actually transferring data.



Well, IBM invented all this stuff.  And they had a solution for it.  They said, let's not put Sector No. 2 right after Sector No. 1.  No one says we have to.  Remember, it's just what's written in the ID that says I am Sector No. whatever I am because we just listen.  We listen for them to see which one's going to go underneath the head next until we find the one we want.  Let's put Sector No. 2, oh, let's give it some time.  If it needs still down here somewhere, let's put Sector No. 2 here, and a couple more sector spacing, and No. 3, couple more sector spacing, and No. 4, and so on, and continue skipping a few, running around until we finish numbering all 17 of them.  Essentially we're interweaving all of these guys.



Okay.  Now the computer says, let's try this again, see what you can do.  So last time we were only getting one sector per revolution.  Every time it asked for it, the one we wanted just went by.  So 17 sectors meant 17 revs.  Now, it's worse, in fact, if you have a higher density drive.  This MFM, remember, gives us 17 sectors.  We have RLL encoding, stands for Run Length Limited encoding.  It's a somewhat more aggressive means for encoding the data.  That gives us 26 sectors around the track.  And then we have even one step further, ERLL, stands for Enhanced Run Length Limited encoding.  Actually, in my experience, this stands for Expensive Run Length Limited encoding.  But so it can get bad if your interleave is wrong as you crank up the number of sectors that you've got on track.



Okay.  So now the computer says, "I want to go again.  Sector No. 1, please."  So average about half a revolution, and we find Sector No. 1 and suck in the data during Sector No. 1, and then do the checksumming, set up a DMA transfer, move down to the motherboard, get everything finished, and we say we're done.  Computer says, okay, I want No. 2.  Perfect.  Here's No. 2 in front of us and heading towards us.  It's the next one we're going to encounter.  So we read through No. 2.  And then after being done, do our checksumming, use the DMA transfer, move down to the motherboard, then the computer says, "I want No. 3."  Again, perfect.  So in comes No. 3.  Well, this is a much-improved situation.  We're now reading almost all the time.  And in fact we're reading every third sector each time around.  So clearly, in three revolutions, we've read them all.  Much, much better.



Well, IBM was creating the PC XT.  They knew about interleaving.  But being IBM, they really didn't have a clue what the right number was.  But they didn't worry about it too much.  They figured, hey, you know, we're IBM.  We don't have to be right.  We just sort of have to be here.  People are going to buy this stuff anyway.  And they did know one thing that was critical.  They knew that it was better to have the sector that was next in line and was going to be asked for out in front of you and heading in your direction than to already be standing on it or to have it just having passed by and leaving.



Well, that suited them fine because conservatism is their nature.  And they said, well, how about six?  Six sounds good.  That's certainly going to be out there in front of us, no matter how slow we make this XT, so that'll give us lots of time.  So in fact that's what we got.  They shipped the IBM PC XT, the blue one, with a hard disk interleaved at 6:1.  So it took six revolutions to read one track of data.



Okay.  Then along came clones.  And hard disk controller maker to the clones was Western Digital, who said, oh, let's make some controllers here because these IBM PCs or compatibles are going to be hot sellers.  So they made a family of controllers, the 1002-WX1s and that whole lineage.  They said, we want to compete with these Big Blue guys, and we're in California, so we're expected to be faster and crazier.  Let's set our interleave to 3:1.  That's much better.  In fact, it's twice better.  IBM is interleaved at 6:1.  Six revolutions to read one track of data.  We, Western Digital, will have our disk controllers default their interleaves at 3:1.  So we can read the same data on the same track as IBM in half the time, meaning that our throughput is twice as fast.  So that was pretty great.



Well, then I came along, and I had been writing a column for InfoWorld for about six months at that time.  That was about two and a half years ago.  Now about three years I've been writing the TechTalk column every week for InfoWorld.  And I wanted to write - I wanted to address the issue of performance, hard disk performance, but a different dimension of it than had been spoken of before.  Everyone knew about average seek times.  You open up your mass mail catalog or your mail order outfit, and they show you, oh, the 80ms worm drive drive, I mean, at the low end, or this 17ms screamer at the high end.  You know when you have one of these slow ones because you can kind of hear it arrive at the right track.  And you know when you have a fast one because your bank account is empty.  And then there's everything in between.



So people knew what their average seek times were.  That was no mystery.  But for me, I wanted to know, hey, once we get to where we've gotten with whatever the seek time is, once we get there, how long do we have to stay before we can leave?  I always find myself asking that when we're going to visit my mother-in-law.  How quickly can we get this over with and get this data transferred and get on to the next track?  So that was really the question that had not been addressed.



There was a utility out there called Coretest that everyone sort of knew of.  It was in the public domain, Coretest.  And it had been around since the dawn of man.  I mean, it was originally named the Rocktest, and cavemen used it to see how round their rocks were.  And they upgraded it finally at, I think, rev. 9.7 and made it IBM compatible, and they renamed it the Coretest and then put it back down to rev. 1.  Well, you could run it, and it would tell you something.  It would say, you have 47,926 bytes per second throughput.  Is that good news?  I don't know.  The only thing you could do, I guess comparatively you could have all your friends run it.  And if theirs was bigger than yours, then you weren't so happy.



I wrote something that delivered the information in something that I felt was what was really happening, with a little thing I also put in the public domain called SPINTEST, SPINTEST and SPINTIME, two little - it was a little 183-byte thing.  I write everything in assembler.  Even SpinRite is 100 percent 500K of assembly language.  So I took SPINTEST and stuck it into my PC, my PC XT from the Blue people, and it said six revs.  It was to be expected.  Yeah, there's six, blah blah blah blah.  Went over, and I stuck it in my clone computer, and it said 17 with my Western Digital controller.



Now, it always did seem a little slow.  I figured that was sort of generic cloneness.  But now I thought, wait a minute, this is just mis-interleaved.  Western Digital chose this 3:1 interleave.  It must be that it needed 4.  It needed a little more time.  The computer wasn't getting done somewhere here before Sector No. 2.  It's probably just barely standing on it or somewhere in it, and it needed No. 2 to be moved back here.  So it was getting the worst possible interleave.  I mean, if it's standing on it, I'd rather have two back over here, where it would have been if I didn't have any interleave because I wouldn't have to wait quite so long.  It can't be any worse than the one too tight.  That's as bad as it gets because you're on the one you've just been asked to get.



So I said, well, let's find out if this is true.  So I got 75 floppy disks and formatted them all.  I waited for morning so I was fresh.  Then I started pumping those floppy disks into this puppy and backed up my whole hard drive.  Then a real experience of user-friendliness.  I typed "debug."  I got the famous minus sign prompt.  You bet it's a minus sign, not a plus sign.  And I wanted to override the default low-level format, which was 3.  I was going to force it to give me a 4 and see what would happen.  So I put a 4, RAL4, put a 4 in the AL register of the AX accumulator and a 1 in the AH register of the AX accumulator.  Then I typed G=C800:5, and it said "Welcome to Western Digital."  I said, yeah, right.



And then it spit out something about oooppeerrrruuu, and I was supposed to figure out what my right precompensation cylinder was, and where my right curve was to be reduced, I don't know from where to what, and about my stepping rates and something.  And I figured, you know these engineers.  This is just probably bullshit.  It doesn't matter.  So I typed in some numbers, and off it went.  So everything seemed fine, and in about 10 minutes it was all done.  And so I needed to put all my data back.  So I spent the last half of the day with my 75 floppies, putting them back in, and then rebooted.  And it did seem faster.  So I did a few little things, familiar things.  And it was definitely running better.



So I took SPINTEST, stuck it in there - 4 revs.  Had been 17 that morning, this same morning.  Now 4.  So I said, my goodness.  425 percent difference in throughput.  Think if I could do that with my mother-in-law.  I could have four of them.  So I thought, how widespread is this disaster?  To how many systems did WD do this?  So I had since published my column and put the program out into the public domain.  And I was getting letters back:  Steve, it's 17.  Steve, mine's 17.  Steve, it's 17.  I went out on the road with my own disk - this is before you had fear of viruses and things - stuck it into all the computers I could find, without fear.  And I tell you, Epson was at 17, and Kaypro was at 17, and Leading Edge was at 17.  They were all at 17 revs.  They were all wrong.  I think Compaq might have been at 6, which figured.  They were sort of beginning to follow IBM's conservative approach.



So I thought, my goodness.  If I could come up with a way of nondestructively low-level reformatting a drive, I could probably drive any kind of car I want.  And CompuServe, the guys on CompuServe sort of heard about this.  I was talking about it.  Because I was enough of a figure by then, with the InfoWorld column, and I had FlickerFree, which was my first little TSR product for the IBM that eliminated the flicker from the scrolling of the CGA adapter and sped up other stuff, as well.  And I had done light pen stuff back in the Apple II days, a high-resolution light pen for the Apple II.  So they kind of knew me.



And they said, Gibson is talking about doing a non-destructive low-level format.  What has he been smoking out there in California?  Low-level formatting is a wipeout.  And of course they're right, it is.  I mean, the worst thing that can happen to your computer is that it catches a software virus somehow, and then you innocently do something to piss off that virus, and it sticks it to you in your low-level formatting.  It's over.



What they didn't know is that there's another command than low-level format drive that the viruses know about down in the low-level IBM BIOS.  There's one called "low-level format track."  Just one track.  Any one you want.  IBM probably put it in there because they thought maybe someone would come along and write some software that would fix a blown track.  No one ever did, as far as I know.  But I thought, yeah, I can use this.  I'll start with the first track.  I'll read all the data off of it, low-level reformat it at the right interleave, after figuring out what that right interleave is, and put the data back and go to the next one.  I thought, how hard can this be?  A couple late nights?  A long weekend?



Well, a year later I was wrapping up because it turned out there was a lot more to it, but more importantly, that I could do a lot more good.  Peter Norton was the first person to figure out that, when you deleted a file, it really wasn't gone; and that, if you asked for it back before waiting too long, you undeleted it, you could have it back.  As a consequence of that little discovery, I guarantee you Peter is now driving any kind of car he wants, and in whatever town he owns.



And actually we did lunch a couple months ago because he wanted to acquire this.  And he said, "You know, Steve, when you came out with this, I thought you were just going to crash and burn.  You were going to just nuke yourself on the spot."  He said, "But then the reviews started happening.  People were talking about it."  He said, "So we went out and got a copy."  And I said, "I bet you did, Peter.  What's in here?"  And he said, "You put a ton of technology in there to make it safe and to really create some value."  He said, "You want to sell it?"  I said, "No.  No, thank you.  I want to do more good things instead."



What I figured, I've got the data off the track.  I've just low-level formatted the track.  Is this a safe place to put the data back?  Why not find out?  Because there's this whole world of defects on drives.  It's not good news, but they have them.  The manufacturers can't be very happy about it, but they print a little list of defects.  MiniScribe has a small list.  Seagate you just sort of scroll.  See page 9.  Oh, okay.  Where is that?  They're not happy about this, but they've got defects.  So I figured, hey, let's just check on some defects while we're at it, see if this is a good place to put the data back.



I did a lot of R&D.  I'm fundamentally a hardware guy, which is I think why I write good low-level software and I'm an assembly language fanatic.  So I got out all my equipment, and I learned a lot of other interesting things, too.  I found out what the biggest nightmare that these drive designers and makers and manufacturers have.  Their biggest nightmare they call "long-term drive alignment drift."  Long-term drive alignment drift.  Look at this.  It's all made out of metal.  It's got yellow metal, silver metal.  It's got real nice sort of expensive-looking chrome kind of metal.  It's got some tastefully matte finish metal and yellow and silver and all kinds.  It's all screwed together with screws, little screws down here in the motor and everything.  And these get very hot when you run them.  You put your hand on a drive after a couple hours, whoa, baby, I mean, this is where your 220 watts goes in your power supply, goes to heating this puppy up.  They make good irons.  Actually the Seagate ST225s with the [indiscernible] edges, oh, boy, they won't catch on your pockets and things.  That makes a great iron.  Or a doorstop.



So it's all made out of metal.  Well, what does metal do when you heat it up?  It expands.  And in fact, different metals expand at different rates.  There's something called a "coefficient of thermal expansion" which describes the rate at which metal expands as it gets hot.  So here we have this thing made out of all kinds of different metal.  We don't have the alien technology yet to just make it one humongous lump.  So it's complicated.  It's all screwed together.



Okay, now imagine I'm a screw.  These are my threads.  And I'm this screw, the one that's responsible for holding down this corner of the motor, keeping it in place.  Now, you've perhaps never spent any time contemplating the life of a screw.  It's a very simple life.  A good screw just really - calm down there - just wants to be the very best screw possible.  That's its whole purpose.  It's a simple request, I know.  During manufacture it got very well screwed.  And it's going to try to, by definition, to hold everything in place.  Yet it's made of a different metal than this base plate that it got screwed down into, and yet a different metal than this massive black intimidating kind of motor which it's been told it has to hold absolutely motionless.  The motor's made of iron.  The screw is made out of steel.  It's in an aluminum base plate.



All of these things are doing their own thing as you heat this up.  And we've already seen it gets very hot in there.  So it heats up.  The screw expands.  The hole expands that the screw is in.  This motor is tugging on it because it wants to expand at a different rate.  The three other screws, they're all trying to do their own job of being good screws and hold that motor absolutely motionless.  Well, it's amazing to me that it works both hot and cold.  And in fact many people who specialize in recovering data from drives do so by deliberately changing the temperature of the drive because it's known to have an effect.  The point is the alignment is not even constant from morning until night.



Now, the end of the day happens.  The computer gets turned off, begins cooling off again, and our little screw is getting pinched.  The motor is shrinking.  It is shrinking.  The hole is even shrinking.  All these little threads that have been trying to hold on for dear life all day are getting stretched back down.  Is this in exactly the same place, exactly as it was in the morning?  No.  It can't be.  We've got molecules, after all, and they're kind of grainy down on that level.  It's amazing to me that it works the second day after one of these thermal expansion/contraction things.



The fact is it doesn't work after a couple years.  It begins failing.  This is a mechanical device.  Wear and tear.  It's got a little rack-and-pinion system back down here with gears that are wearing and rubbing on each other over time.  So the alignment is going to drift.  Long-term drive alignment drift.  Now, of course you've got gravity.  Gravity applies.  It's a force.  So amid all this expanding and contracting and all these little screws trying to hold themselves exactly where they are, there's a siren call of gravity - hello, come over here - kind of pulling at everything.  And these little screws are saying, okay, I'm trying, and they're going to succeed to some degree, to varying degrees, varying from drive to drive.  Long-term drive alignment drift.



So let's say, for the sake of argument, that our tracks are drifting inwards.  Sort of a function of the way the drive is designed, how it's aging, the relative tightness of the various screws who are tugging on each other, and who's winning in the long term.  But what does that mean?  We saw that we've got defects.  So there are defects wandering around in here, in various places on the surface.  Clearly, drifting alignment affects defects because defects are on the surface.  They're surface defects.  They are of the surface.  And they're not moving.  But the tracks are moving relative to the defects because, after all, the thing that determines where a track is, there's no grooves in the surface.  It's a smooth, uniform surface.



What determines where the tracks are is where the stepper motor ends up with all its mechanical connections, holding the head.  That's the track.  And if, over time, this is aging and altering its alignment just subtly, then the head is going to be in a slightly different position on track 100 than it was when it was made.  So if a defect was right there, but the track has drifted away, the defect has floated, essentially.  So that, for example, this defect is in between tracks.  The manufacturer didn't find it.  But a year later this track has drifted inwards and is now smack dab in the middle of that defect.  So we have a new defect.  This one was found.  But because all the tracks were migrating as a whole, that track has correspondingly drifted inward out of danger.  No more defect there.  Fact is, defects are not a static phenomenon of a hard disk.  They are inherently dynamic in nature.



Now, MiniScribe has this little chart that says "As Shipped Defect Criteria."  I always thought that was interesting.  "As Shipped Defect Criteria."  One good UPS man can triple the length of this list.  But I don't think that's what they're referring to.  I think they paid some attorney $20,000, or on retainer, to say, you know, "You're telling me that the alignment is changing on these drives?"  "Yes, sir."  "Well, what does that do to the defects?"  "Oh, well, they change, too."  "Then we'd better not say 'defect criteria.'  We'd better say 'as shipped defect criteria.'"  "Whoa.  You're worth your money, aren't you, Mr. Attorney."  "Well, that's why you pay me."  They know this is going to change.  Doesn't help their sales any if they advertise it, so they don't talk about it much.  Besides, they've got our money and cashed our check.  And this is probably good for a year or two, six months.  If you have a Seagate, you measure it in weeks.  I'm just kidding about Seagate, of course.  They're just the biggest.



What about our data, though?  That's why we're here is our data, not defects.  Well, something interesting happens with the data.  If the head drifts a little bit from where it originally was, but it's still able to read the data, and it never writes it, the data gets realigned.  And if there was a gradual long-term alignment drift, and we were periodically realigning the data, well, it tracks with the drifting alignment.  So it balances out.  Over time, the tracks are drifting.  But the alignment is drifting.



The data is tracking [indiscernible] sort of an overall upheaval of the drive that rewrites it all will do that.  Oh, my god.  There is an empty cluster at the beginning of my drive.  Well, we can't let that stay there because that would make a fragment.  So that's where our optimizer can pick up 70MB and move it over.  One cluster.  Got that little sucker closed off now.  The little opening is now over there with the rest of the free space.  In the process, we read and wrote the entire drive and inherently realigned all the drive's data.  So the data is tracking with this drifting alignment.



But there's something which isn't.  There's something which has absolutely no opportunity for this realignment.  That's the low-level format.  It's written during the first minutes of this virgin drive birth and never again.  We just read it.  Even when we're writing data into the sector, remember, we find the sector by reading the low-level ID first.  Over time, the alignment drifts so far that the head passes right past, and you get "sector not found, abort retry ignore."  Drives need some respect.  They're going to get it from you sooner or later.  It's less painful if you give it to them sooner.



SpinRite does three things.  The first time you use it, it optimizes the interleave for you.  If you didn't have the next sector arriving as exactly the one it was being asked for, it will change it so that you do.  And perhaps you get a free performance boost for all time, just by numbering these sectors properly.  More importantly, I think, it is a long-term, low-level format maintenance tool for hard disk drives.  Run it three times a year, four times a year, weekly if you use Seagate drives - I'm just kidding - and it will keep the drive aligned.  It will scrub the surface for defects that are coming and going in and out of the tracks, literally tracking them as the tracks drift across them over the years.  There's no reason our drives have to be unreliable.  This is why they are dying over time.



SpinRite has proven effective over and over and over in keeping drives alive.  It's simple to use, simple to sell.  It won't ask your customers about cylinders and heads and sectors.  You can't make it ask you those things.  You just run it, and it works.  Thanks very much.



[Applause and SpinRite giveaway]



LEO:  Wow.  You did have hair.  Oh, I loved that.  Now, tell me again, that was a lecture you gave at SofSel?



STEVE:  It was, yeah, it was a series of presentations.  And, frankly, what I heard was - there were many vendors that were hosted by this big software distributor.  This was the largest software distributor in the country at the time.  There were many vendors who were hosted.  So people had to - and there were only so many slots during the day when you could attend one.  And so attendees, who were retailers - you'll have noticed that I referred to what makes SpinRite easy to sell because I recognized that my audience were resellers.  SofSel was distributor.  These guys had computer stores, and so they would be buying my product from my distributor, SofSel, and then reselling it to the end user.



LEO:  Ah, the good old days of shelf space.  You don't do that anymore.



STEVE:  Exactly.  And so - I just completely lost my...



LEO:  I'm sorry, I didn't mean to throw you.  So you were just saying this was to the distributors and to the end - I didn't realize it was also to shop owners who would buy from SofSel.  And so they would record this because not everybody could get in to see it.  I think that's where we were headed with that.



STEVE:  Oh, I know what I was saying, right, was that there were many more vendors making presentations than there were time slots.  So it was necessary to select those which you would see.  And what I ended up hearing through the grapevine was that the word spread like wildfire that you had to come see Gibson.



LEO:  Oh, that's great.



STEVE:  So our little room was like standing room only, packed with people all lining the back and the sides because there weren't enough chairs because I ended up draining the audience from the other presentations.  And in fact the other vendors wanted to come to see what the hell was going on in this one room.  So it ended up being a lot of fun and some good laughs, too, as we all saw.



LEO:  I just want to show you.  In that year, in 1990, this is what a Mustang GT looked like.  Now, and I should show you my Mustang.  But let me tell you, this is a good moment to take a break.  When we come back I want to talk a little bit about what you would amend from that speech, what's changed in hard drives.



STEVE:  Ah, right.



LEO:  All right.  So what is, I mean, the fundamentals you describe in that video are the same; right?



STEVE:  Yes.  Probably the major change has been, well, obviously density.  So I talk about MFM and RLL and ERLL encoding, not too much, but that's all in the past now.  Now we have PRML, which is as spooky as it sounds, which is Partial Read Maximal Likelihood, where our drives are literally guessing at the data because the bits are so tightly packed they really can't see them any longer.



LEO:  Wow.  Wow.



STEVE:  So that's one change.  But also the addition of servo information.  That was the big change.  It used to be that we had what I would call "dead reckoning" head positioning, where there was like a stepper motor and a rack-and-pinion that would just go out a hundred steps, and where the head landed was where the track would be.  But that meant that you had this long-term drive alignment drift problem, which was one of the things that SpinRite really excelled at because, as I explained in the video, only low-level reformatting the drive before the alignment got too bad could cure the problem.  And of course SpinRite famously was the only nondestructive low-level reformatter.  That's what it did.  And that's why Peter Norton, when he wanted to buy it, said he thought he was going to look down towards Irvine and Laguna Hills and see a big mushroom cloud coming up because he just didn't think you could do that safely.



So that's the big change.  But when I talk about sector marks and sector headers and - of course interleaving disappeared as the data channel got fast enough so that we were able to suck in all the data off the drive in one revolution, rather than needing, like, a 3:1 or a 4:1 interleave, so it would take three - you could only get every third sector or every fourth sector per revolution.  So that changed.  But the underlying technology is the same.  And so many things about computers are like that.  I mean, when you were first saying that, Leo, I was thinking, yeah, word processing.  We have GUI, but we almost had it back then.  I mean, we had Windows 3.0 back in that era.  And we had Micrographics Designer was that great graphics drawing program.  And we've got more buttons now, but it really hasn't changed.



LEO:  Well, maybe it's changed because you can put it in your pocket.  That's a change.



STEVE:  Yeah.  That, and run it on batteries.



LEO:  And run it on batteries.  Yeah, that's...



STEVE:  And it costs about one one-millionth the cost for the equivalent power.



LEO:  Per MIP, yeah.  Really fun.  I think we should do more of this.  You have more of these?



STEVE:  I do.



LEO:  Because I think this is, well, it's educational.  I mean, there's a lot of people listening who were kids in 1990.  Probably most of them.  And so I think that a lot of people - this is good stuff.  This is fun to see.  Anyway, I think it a perfect thing for our holiday episode.  We will be back on January - will we be, January 2nd, doing a show?



STEVE:  I'll be.  I hope you're here with me.



LEO:  I'll come in.  Might be a little hung over still.  No, I won't be.  I'll come in.  January 2nd will be our next episode.  That's a Wednesday, 11:00 a.m. Pacific - that's when we do Security Now! - 2:00 p.m. Eastern time, 1900 UTC, on TWiT.tv.  We would love to see you live because we have the chatroom.  But if we can't, that's okay.  Download a copy.  We have on-demand versions available a lot of places.



Steve has 16Kb versions.  That's the smallest audio format.  He also has transcripts.  Those are even smaller.  Most people get those and listen, I think.  We have higher quality audio and video, too, at TWiT.tv.  Steve also has SpinRite.  Now that you know how hard drives work, maybe you ought to get a copy there.  That's the world's finest hard drive maintenance and recovery utility still, to this day.  What version of SpinRite were you talking about on that?



STEVE:  Oh, that was...



LEO:  2?



STEVE:  That might have been 1.  Or maybe 2.  I mean, SpinRite was not very old at the time, so this was an educational tour.  This was to say, hey, folks, there's something you haven't seen before.  And, I mean, it was all...



LEO:  You know what's cool?



STEVE:  Yeah.



LEO:  If you'd bought SpinRite in 1990, you'd still have an upgrade path to SpinRite 6; right?



STEVE:  That's true.  That's true.



LEO:  Free upgrades.



STEVE:  Even the very first person 22 years ago, we'll give you a discount on 6.



LEO:  Discount.  Okay.  Not free.  Let's get that straight, Leo.  GRC.com.  Go there right now and see - and also lots of free stuff there from Steve.  Steve, I'm so glad we could talk.  And have a great New Year, a happy holiday - because we're recording this before Christmas - and we'll see you in 2013.



STEVE:  Can't wait.



LEO:  On Security Now!.



Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#385	

DATE:		January 2, 2013

TITLE:		Listener Feedback #158

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-385.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here.  Our first episode of the new year, and lo and behold, has TrueCrypt been cracked?  Steve will answer your questions, including that one, next on Security Now!.



LEO LAPORTE:  It's time for Security Now! with Steve Gibson, Episode 385, recorded January 2nd, 2013:  Your questions, Steve's answers, #158.



It's time for Security Now!, the show that protects you and your loved ones online.  And speaking of loved ones, Happy New Year, Steve Gibson.



STEVE GIBSON:  One two one three.  Great date.  I like that.  Although 12-12-12 was good, too.



LEO:  And then somebody pointed out that March 14th, 3.14.15, 2015, will be a very auspicious date,



STEVE:  Beginning of pi.  Have some pi on that date.



LEO:  Some pi.  That'll be - really that'll be pi day.



STEVE:  Yeah.



LEO:  Hi, Steve.  How was your holiday?



STEVE:  Well, I have to say, Leo, I'm so pleased by the response to what we chose to do for the podcast over the holidays.



LEO:  The young Steve Gibson.



STEVE:  It was a real hit.



LEO:  Oh, good.



STEVE:  Yeah, it really was.  I got a bunch of feedback in the regular Security Now! feedback mailbag that I saw last night as I was pulling questions together for today.  And also Twitter was crazy with people saying they haven't laughed that hard at a moron for quite a while.



LEO:  A moron?



STEVE:  Oh, no, no.



LEO:  Oh, my.  I hope they didn't say that.



STEVE:  And many people were, as I predicted, very surprised that so little had changed in 22 years.  Indeed, a lot has not.  In fact, it did spur some questions.  I just answered a couple of them in today's Q&A, that many people had, saying, well, wait a minute.  If that's the way things were, is that the way they still are?  What's not that way? 



LEO:  Isn't that interesting, yeah.



STEVE:  I've got a couple, I'll answer a couple of those things today.  But, yes, I think I have an idea for next year.  People want more of that.  It's like, well...



LEO:  You got any more VHS tapes in your closet there?



STEVE:  I do.  I do have old TechTV shows, Screen Savers.



LEO:  But those are short.  But we could bring those back.



STEVE:  Yes, that's a good point.  It was only a short - although I have them all.



LEO:  Well, and I should point out that, despite the fact that G4 is now history, has become the Esquire Channel, or about to, that they still reserve the rights to everything.  So occasionally they'll do takedowns on YouTube when people put stuff out there.



STEVE:  Ooh, you're kidding, even now.



LEO:  Yeah, yeah.



STEVE:  But anyway, I've got some ideas for next year.



LEO:  Okay.  We've got time.



STEVE:  It was fun for everyone.  And the fact that it was a video didn't seem to slow many people down.  So what I may do is keep with that concept and do something visual for the holiday break on my own and then provide it to you guys so that you can publish it.



LEO:  Cool.  You could do, like, dance lessons or something.



STEVE:  I don't think that's what I'll do.



LEO:  Okay.



STEVE:  Although apparently I was spinning around pretending to be a screw.



LEO:  Yeah.  There was a little dance move in there.



STEVE:  A little dancing there.



LEO:  So you said it.  We're going to do a Q&A episode this week, our 158th Q&A episode.



STEVE:  Yes.  And the hackers took the week, took the holidays off also, apparently.



LEO:  Oh, that's good.  That's nice.



STEVE:  There was a good conference, the CHAOS Conference, over the holidays, and it produced some interesting things.  There was one report that I haven't yet followed up on about the cost of pulling files back out of Amazon's Glacier storage.  I think it's an alarmist posting, but I need to do some math because it was some - one particular reading of their FAQ led someone to believe that it could be prohibitively expensive to pull things out of cold storage.  But that doesn't make sense to me.  So I'll follow up on that.



But the big news is we've got a new zero-day vulnerability that was discovered, not surprisingly, in Internet Explorer, leveraging an Adobe flaw.  It only affects versions 6, 7, and 8.  So the very latest people, the users who are using 9 and 10, IE versions 9 and 10 are not in danger from this.  But what's happening is it's being used in so-called "watering hole" attacks.  That's the jargon that the industry has developed.  You know we have phishing, right, so this variation, this is being on the other end of the phishing pole.  The watering hole attack is, if you want to attack, like, say, the Department of Defense, you go find a vendor or a site that your typical DoD employee would visit, and you compromise that.



LEO:  Ah, perfect, yeah.



STEVE:  So you poison the watering hole where they innocently go.  So that has actually been happening.  So this was discovered for the first time in the wild.  Shoot, I can't remember, who was it?  I did quote Brian, and I don't think - he said, "Attackers are breaking into Microsoft Windows computers using a newly discovered vulnerability in Internet Explorer.... While the flaw appears to have been used mainly in targeted attacks so far" - and this is really Brian's forte.  He says, "This vulnerability could become more widely exploited if incorporated into commercial crimeware kits sold in the underground."  And Brian's done a really good job of developing a persona or set of personas, I presume, that allows him to monitor the underground.  He gets a lot of his information that way.  And so he's able to see when these new exploits get moved into the single pushbutton crimeware kits.



And so what's going on is Microsoft has acknowledged it in their typical Micro-Speak format.  They said, "Microsoft is investigating public reports of a vulnerability in Internet Explorer 6, Internet Explorer 7, and Internet Explorer 8. Internet Explorer 9 and Internet Explorer 10" - apparently they will not say "IE," no matter how much they have to type "Internet Explorer" - "are not affected by this vulnerability.  Microsoft is aware of targeted attacks that attempt to exploit" - sorry, Microsoft, do succeed in exploiting - "this vulnerability through Internet Explorer 8."  So 8 has been exploited; 6 and 7, however, are known to be also vulnerable.  Says Microsoft, "Applying the Microsoft Fixit solution," which is called "'MSHTML Shim Workaround,' prevents the exploitation of this issue.  See the Suggested Actions section of this advisory for more information."



And then Microsoft goes on to say, "The vulnerability is a remote code execution vulnerability that exists in the way that Internet Explorer accesses an object in memory that has been deleted or has not been properly allocated.  The vulnerability may corrupt memory in a way" - now, we understand the vulnerability DOES corrupt memory in a way.  Microsoft says "that could allow," we change that to "does allow an attacker to execute arbitrary code in the context of the current user within Internet Explorer.  An attacker could host a specially crafted website that is designed to exploit this vulnerability through Internet Explorer and then convince a user to view the website."  And as we know, the way it's actually being used in the wild is websites with good reputation, not created by hackers, are being modified to insert this attack.



So there is a Fixit.  I just tweeted it on the @SGgrc Twitter stream [New 0-Day IE flaw being actively exploited.  Users of IE:  Go here to apply Microsoft's quick interim FIXIT:  bit.ly/WeEJx5].



Or you can just go support.microsoft.com/kb/ and then the magic number here is 2794220.  So that's Microsoft.com, support.microsoft.com/kb/2794220.  I would recommend that people do this if you are a heavy IE user.  I would imagine most of our listeners...



LEO:  The workaround is not a fix, it's a workaround.



STEVE:  Correct.



LEO:  So what's the difference?



STEVE:  Well, okay.  This just shuts down the avenue of exploitation, but doesn't actually fix the problem.  So here we are with the first of the year being Tuesday, which means the second Tuesday of the year, and of the month, is the soonest it could be.  So that will be next Tuesday.  And Microsoft just got onto this this weekend, this past weekend.  So it's not clear whether they're going to have time to put this through everything that they need to, all their regression testing and everything, to get this thing into the second Tuesday of this month.  If it escalates and becomes bad enough, they could of course do an out-of-cycle patch.  Maybe they'll wait till February, next month's second Tuesday update, to do this.  We don't know.



But if people, for whatever reason, if you're in a corporation that's standardized on IE, and you have to be using IE, you might want to make sure that your IT folks know about this and maybe - because you can have this Fixit easily propagated through an entire corporation.  The Fixit is able to do sort of a cross-network mass installation.  So this may be important.  It's the kind of thing - these are what the attackers jump on because they recognize there's a window of opportunity which will be closing pretty quickly, and they'd like to jump on it as quickly as they can.



And the only other thing I had was just a note at the end of the year, an interesting article quoting a report, and the article was in The New York Times on 12/13, so New Year's Eve.  The headline was "Outmaneuvered at Their Own Game, Antivirus Makers Struggle to Adapt.  Antivirus Industry Is Always Reactive, Not Proactive."  And that's something that we've been feeling more and more.  I mean, even if you have state-of-the-art, updated, latest AV, all of these things are getting past.  I mean, think about it.  We never hear that, oh, unless you've got this AV or that AV, you'll be okay.



LEO:  That's a good point.



STEVE:  That's not the case anymore.  So Ted Schlein, who's a security-focused investment partner at Kleiner Perkins Caulfield & Byers, of course a major tech venture capitalist up in Silicon Valley, he was quoted in this article saying that "Existing methodologies we've been protecting ourselves with have lost their efficacy.  This study is just another indicator of that.  But the whole concept of detecting what is bad is broken."  And we've been sort of talking about these ideas.  We've talked about how the first firewalls were all open, and then you closed them to protect things.  And then people realized, okay, that model is backwards.  We need to close them by default and then open them to allow things that we want.



And, sadly, that model is very awkward to apply to software because we're all using software coming from everywhere.  I mean, even a very carefully managed store like Apple's iOS store, I mean, there are things getting past them all the time.  So even if you closely curate what you allow, you're still going to have a problem.  So my feeling is we need to fundamentally change the way our systems work so that, at the system level, they are invulnerable to this kind of malarkey.  And you can sort of imagine a form of a virtual machine system where everything runs in its own space, more like an iOS model, which even that's not perfect, and it does cause people problems because you're going to trade off features for safety.



LEO:  I know antivirus companies talk about ESET, which is a sponsor on the radio show.



STEVE:  Behavioral based?



LEO:  Yeah.  They call it "heuristics," where they're looking - they understand, everybody understands signatures are not updated fast enough, obviously, for zero-day exploits.  But what if you look for virus-like behavior?  Is that effective at all?



STEVE:  Well, it gives you, I mean, there's nothing that's a perfect solution.  I did see somebody, I think it was either a tweet or in the mailbag, just telling me that my LeakTest program was being considered a malware by some latest version of some antivirus system.  And that's exactly this, that this is the problem with heuristics is that they're inherent - because they have to recognize something they've never seen before, they might misrecognize something they have not seen before as bad when it's not.  And then the tighter you make that, that is, the more protective you make the soft determination, the more false positives are going to get caught in that net.  So it's just a mess.



LEO:  I'd rather have a false positive, I guess.



STEVE:  It's a classic - well, except then you get harassed.  I mean, it's like you and NoScript, how you love NoScript popping up notices constantly.



LEO:  Right, so I turn it off.



STEVE:  And you're having, exactly, saying, okay, this is just not worth the hassle.  So, I mean, what this tells us is that all of these solutions are wrong, that is, they're the best we can do given the foundation that we've created.  But so it's the foundation that's the problem.  It's fundamentally broken.  The fact that this can happen to people is ridiculous.  So I look forward to the day when you and I will connect up, and you'll say, "Well, Steve, do we have a podcast?"



LEO:  Never gonna happen.



STEVE:  "Nothing happened, Leo.  We went a whole week, and nothing.  No."



LEO:  Now, QE says, and I don't know if this is a fair thing to say, I'd rather use a more secure OS like Ubuntu.  Is, by its nature, is Linux more secure?  Or is it just less targeted?  I mean, we thought...



STEVE:  It's less targeted.



LEO:  Yeah, we thought Apple was more secure until it became more targeted.  Then we realized how it was the same as anyone else.



STEVE:  Yeah.  What we see over and over is that all of these systems have porous surfaces.  They're fundamentally porous.  And so it's just a matter of how badly you are willing to work, how hard you're willing to work, how badly you want to get in, that determines whether or not you can because their systems are just too complex.  They have really outgrown our ability to understand every possible interaction.  Look, for example, at a protocol like TCP, which is so solid and has been around for a long time.  Everybody's pounded on it.  Yet a couple clever guys realized that, oh, look, there's an inter-packet dependence in the way the cipher block chaining works, and we can leverage that.  I mean, just little tiny mistakes that are there, not like a buffer overrun, but actually a flaw in the protocol.  These exist, unfortunately, throughout our systems because they are so complex.  We're asking them to do so much.



LEO:  It's easy to say something's more secure.  And I just - and it may be, until it's hammered on in the way that Windows is hammered on, I don't know if you can - we can be sure.



STEVE:  Well, and you might argue that, if it is not being attacked, it's more secure.



LEO:  Oh, yeah.  That's for sure, yeah.



STEVE:  So I would say that Linux is probably safer to use today, not intrinsically safer, but effectively safer.  That is, it doesn't have to actually be more secure.  It just has to be something no one's attacking, in which case you get the effect of it being more secure because it's not being attacked.



Anyway, I did get a kick out of - this is not security related.  This is just we're now into miscellany.  I tweeted an interesting little observation that people began observing on New Year's Day, and that is that their Do Not Disturb option, which was added to iOS 6 so that the phone would not ring and messages would not alert you and wake you up, you're able to turn on Do Not Disturb at 11:00 p.m. and turn it off at 6:00 a.m., for example.  And it turns out it no longer turns off.  And we were first thinking, well, maybe this is just New Year's Day.  And a lot of people had fun with it, saying, oh, it knew that I needed to sleep in to get over the hangover of New Year's Eve.  But it turns out that it's still not turning off for everybody, even today.



LEO:  And of course they ran, of course Apple ran an ad touting - with, what, Serena and Venus Williams - touting their Do Not Disturb feature that didn't work.



STEVE:  Yep.  Ill-timed ad.



LEO:  It seems dates are a problem.



STEVE:  I imagine that they will be releasing a "disturbing" update to iOS 6 at some point.



LEO:  But what that underscores is what we were talking about earlier, which is software is difficult to make perfectly.



STEVE:  Yeah.  And you know also, Leo, you probably remember this, that for the last several years they have had New Year's problems.  There was one in 2012, and there was one in 2011.  That just really seems to trip them up every time.



LEO:  Apple apparently says it will fix itself on the 7th.



STEVE:  Oh, nice.  They've got really rounded corners on their stuff, but that first week of the new year, that's just a little problem.



LEO:  Now, here's a challenge for adept programmers.



STEVE:  Explain that, yes.



LEO:  What would be the bug that would have the Do Not Disturb fail January 17, 2013.  What is it - and then it starts working January 8.  What is it that's - I can't think of it.  But that's a good puzzler.  If you're a good programmer, you should be able to figure that out.



STEVE:  Yeah, they just forgot to carry the one.  Okay, so...



LEO:  That's always a problem.



STEVE:  So a little update on my Quiet Canine project.  The device has a name.  And I got trademark protection for it just because.  I don't know that anything commercial will ever come from this.



LEO:  Oh, aren't we fancy.



STEVE:  But it's just the name is so good.  We were playing with Hush Puppy for a while, but that's just overused and so forth.  Anyway, it's called the Treble Shooter.



LEO:  The Treble Shooter.  I get it.  Because it shoots a high-pitched treble sound.



STEVE:  Yeah, Treble Shooter.  And we now have two designs.  Well, one design is finished, which is the one that I will make a bunch of in order to satisfy my interest in determining whether or not this does anything more than this full industry of attempts.  Because, I mean, the barking problem is - I've been flabbergasted by how many of our listeners are like, oh, my god, do I have a problem.  And then they explain it to me.  And it's like, I mean, there's divorces, and there's crying babies, and we have to move out of the house, and the helicopters are circling overhead.  And it's just unbelievable what is going on just from dogs barking.  And of course we know famously that arguably McAfee is on the run somewhere because he had a backyard full of barking dogs, and things escalated to homicide, presumably, from that.



LEO:  See?  You could have saved a life here.



STEVE:  So this is a problem for people.  The first design came out better than I had ever imagined it could.  It's very, very few components, even less than I showed you, or even fewer, sorry, components than I showed you when I was holding up that little first iteration version.  Really, really cool.  It takes a 9-volt transistor radio battery, from which it only draws 100 milliamps, and it produces an 80-volt beautiful sine wave across this capacitive piezo tweeter, so using the tweeter as part of the circuit.  So I'm really happy with that.



And it runs at a fixed frequency with a button that you can press to drop the frequency down, just so you can appreciate how loud this is for the dog.  The problem is, if it didn't make any sound at all that we could hear, I mean, it's still powerful, and it's still potentially harmful.  So I want people to appreciate the amount of sound this is making, even though they can't hear it.  So the second button just drops it down from 16KHz that we can't hear, or barely hear - kids can hear it - down to 8.  And, boy, it is so...



LEO:  That's a very good idea that you did that.  I think that's great.



STEVE:  Yeah.  It's like the physicists who were working on the development of the H bomb for the country, the Manhattan Project.  They all died of cancer because something that they sort of only dimly understood was really affecting them.  And I don't want anyone's hearing, anyone, human or animal, their hearing to be harmed by this.  So it takes respecting how loud this is to treat it properly.  We know about guns and knives.  They're just obvious.  We have real-world understanding of them.  But this is something different.  And this is too powerful to be used casually.



LEO:  Good for you.  Good for you.



STEVE:  And I've got about 150 of our listeners so far have said, oh, my god, I have a problem that I need help with.  I can't make that many.  But what I'm really wanting to do is to find the people who have already used other, like there's a market of sonic deterrents, none of which work.  And so my question that I really want answered is does this one work?  Is this any different?  Or do the dogs get used to it?  Who knows what.  I do know that my buddy Mark, who's got that overkill one that I made, he used it yesterday because these two dogs were in the back barking.  His brother is visiting over the holidays with his dad.  And they just tapped the button.  And his brother actually thought the dogs had been vaporized because they were instantly gone.  It's like, where did they go?



LEO:  Oh, my god, it's a ray gun.



STEVE:  They were just gone.  And he says it's like the Keystone Cops, the dogs trying to both squeeze at the same time through the doggie door that can only accommodate one of them.  So anyway, that project is moving on.  The second device I'm working on now, since the first one is perfected, is I still want to do, before I drop this - because once I get it documented and put it up on GRC, I'm going to move on to other things as I always do and probably never come back.  So while I'm in this mode, I want to nail it.  So what I want to nail is a microcontroller-based version that could do all kinds of other cool things, like only send out a short burst; maybe at some future time respond, hear barking and respond to the bark in order to do an automatic training mode, those sorts of things.  So I'm going to - I want to nail down an efficient microcontroller-based power amplifier before I move on to other stuff.



LEO:  Unless people - I was watching football over the holiday break.  And lest people think this is cruel, I saw an XFINITY ad.  You know, they have the ad for - I think he's, like, stopping the DirecTV guy from coming.  He's, like, powerful, some football player,  And there's a dog comes out and barks at him, and he throws a stick at it, hits the dog in the head.  The dog runs off.  I thought, if they can do that in a national TV commercial, then there's a little yelling, a little sound, it's like a yell, it's like "Get out of here," is fine.  It's not going to hurt the dog.



STEVE:  Well, and I have to say, Leo, after reading the torture that dogs are really putting people through, I mean, I don't want dogs to be hurt.



LEO:  I blame the owner.  It's the owner's fault, not the dog's fault, obviously.



STEVE:  Well, many owners are at their wits' end, too.  They have apparently - the owners are not trained, and presumably the owners could be trained, but that doesn't seem to be happening.  So, I mean, it really - I am a dog lover.  I grew up with dogs.  But, I mean, many people are - and the problem may be the owner, but it's the neighbor owner.  And many people have written to explain that they have begged and pleaded and offered to do anything if the owner would not put the dogs in the backyard and drive off for the day, but the owner just doesn't care.  It's like, eh, tough, too bad.



LEO:  Yeah, the owner's not there.  They don't hear the barking.



STEVE:  Yeah.  So in a little bit of health-related news, I mentioned this before we began recording, a number of our listeners who followed the whole low-carb deal sent me links.  And of course I follow a lot of these things anyway, so I had seen them, too, but thank you for sending the links to make sure that I had seen it.  This ketone that I have mentioned, which I have been measuring in my blood now for nine months because I have been continually in ketosis since that happened to me on April 17th, for the last nine months, the one that you measure with the blood test is called beta-hydroxybutyrate.  The other one was acetoacetate.  Beta-hydroxybutyrate is the product of fat metabolism, which appears in fasting or starvation or, in moderate amounts, in ketosis.



Well, a report came out, produced by a huge number of PhDs, I mean, it's like, my goodness, you've got to be kidding me, about their discovery of the mechanism by which beta-hydroxybutyrate extends your life, that is, extends lifespan.  And we know that caloric restriction, CR, is known to extend lifespan.  But the problem is you have to almost starve yourself.  Well, it turns out that one of the mechanisms may well be that, in caloric restriction, you are also in ketosis, and you're producing beta-hydroxybutyrate.



What they found was that the presence of beta-hydroxybutyrate blocks a class of enzymes known as histone deacetylases that would otherwise promote oxidative stress.  And we also know that people in ketosis have much higher levels of antioxidants in their bloodstream.  We haven't understood exactly why until now.  But the idea is that burning fat produces lower levels of free radicals than burning carbohydrate.  And now we understand also that one of the side effects of fat burning is the production of this beta-hydroxybutyrate, and it directly blocks the promotion of oxidative stress.  So another good little piece of happiness for all of our listeners who have been experimenting with reducing the level of carbohydrate in their diet.



I do have the worst New Year's pun, courtesy of a frequent tweeter of ours, Simon Zerafa.  He tweeted, "I'm going to make my New Year's Resolution - 1388x768."



LEO:  I've heard that one.



STEVE:  Oh, god.



LEO:  It's good.  I like it.  It's a little low.  I'd actually like a higher resolution, if you don't mind.



STEVE:  I did notice, when I turned on my machine that monitors and reports on the number of remaining days of Windows XP support, that we still have, as of today, 460 days remaining of Windows XP SP3 updates.



LEO:  That's the enhanced support, though.  I mean, that's like if you're a - I think that it's expired if you're just a normal person.



STEVE:  No.



LEO:  No?



STEVE:  They changed it about a month ago.  You're right, but they just changed it, and they extended this for everyone.



LEO:  Everybody.  Good.  Because a lot of people still use it.  My question is how long is Windows 7 going to last?  At least 20 years, I hope.



STEVE:  I hope so, too.  Because my second part of this is I am liking Windows 7 more and more.



LEO:  Oh, it's great.



STEVE:  I've been using it a lot.  I've set up a couple of Media Center systems in the last couple months.  I finally retired my triple TiVo configuration because it was an old standard definition.  I went to HD, and I ended up building a Windows Media Center box, and a couple more of them for some friends.  And I'll be quite happy to jump over Vista, from XP to 7 here, maybe about a year from now.



And, lastly, somebody sent me a tweet that I could not find again.  I think it was a tweet.  Turns out they have been cataloguing all of my SGgrc tweets for the Security Now! episodes where I've been putting links in my Twitter feed.



LEO:  Very nice.



STEVE:  And I went to the page.  It's beautiful.  It's by episode, here's all the links and all the tweets for that episode.  But I can't find the page again, and I can't find the tweet.  So could I ask whomever that is to tweet me again?  And I thank you for it, and I will share it with our listeners, hopefully next week when I see it.



LEO:  And if you're in the chatroom, let us know, and we'll let you know.  But it doesn't look like it's somebody in the chatroom.



STEVE:  And I did find a nice story from a listener of ours, sent on December 30th, Sunday, named Jenn.  He's in San Diego.  He said, "Fixing emergencies before they become emergencies, and lots of thanks."  He says, "My SpinRite story:  My company was trying out whole-disk encryption software, and my team served as guinea pigs.  The first step was to run chkdsk, which found tons of errors on my two-plus-year-old laptop.  In spite of that, it said it was clear to install the software and encrypt the drive.  I did, and then it refused to reboot.  Completely bricked.  Help desk wasn't any."



He said, "No big deal.  I of course backed up my data before step one, so I got a loaner laptop and was up and running again from my backup in no time.  But I would have to either get my computer wiped and rebuilt or would need to order and build a new one.  When I reported the problem to my boss, also a fan of this podcast, he said, 'You've been meaning to buy a copy of SpinRite, haven't you?'  'Yes, sir.'  I got myself a copy and started running it.



"After SpinRite completed its task, I was able to boot the computer, and it ran perfectly.  I was impressed and have continued to use it to fix my family's computers before they break.  When I've had questions, I've been impressed with how fast and thorough the response was.  (Thanks again, Greg)," he says.  "I've even recently taught my 10-year-old how to run SpinRite.  More thank yous."



He said, "I have several professional certifications that require me to do continuing education.  Since I've been listening to this podcast longer than I've had the certifications, I've often used Security Now! to meet this requirement.  Recently one of these continuing education submissions came up for a random audit.  I needed to provide a summary of the event and how it related to my work.  Easy.  I just looked up the transcript, skimmed over it to refresh my memory, and quickly wrote up the response.  So thank you, Steve and Leo, for the great podcast, and thank you, Steve and Elaine, for the transcripts."



LEO:  Well, thank you.



STEVE:  And thank Jenn for the nice note.



LEO:  Yes, for the nice note.  We're going to take a break.  When we come back, we have questions from you the listeners.  Some good ones, too.



STEVE:  Well, actually I want to say that we need to finish this one because #10 answers a question many people have been worried about.  There was an article, it got Slashdotted and a few other places, about a company that had broken the encryption on whole-drive encryption.



LEO:  Ooh.



STEVE:  So all kinds of people were saying, oh, Steve, my goodness, is this true?  And so we will answer that in Question #10.



LEO:  Don't fast-forward.  Stay right here because we still have other questions.  All right, Steve.  I'm going to do some reading, if you will do some listening.  Question #1 of our listener-driven potpourri comes to us from Tim D. in Detroit, Michigan.  He had some holiday episode questions.  As you mentioned, we have a few.  So last week, Steve's holiday episode was a video of him from 1995?



STEVE:  '90.



LEO:  '90, explaining how hard drives worked.  And it prompted Tim to write:  Do modern spinning disks still allow you to access the low-level formatting?  If not, how do they account for long-term drift?  Do the seek motors move in increments much smaller than the width of a track?  Does the servo information you mentioned allow the drive to correct for drift?  What is it, Steve?  Tell me, tell me.



STEVE:  So, many people asked this question in various forms in the mailbag.  They got a much better sense from last week's holiday episode for the inner head and platter level interaction going on in a disk, which really is what I spent 45 minutes explaining in detail.  And that left them wondering, okay, well, that was 22 years ago.  We've talked about how little has changed.  But the question of course was, well, okay, what has changed?



Probably the major change was when drives became intelligent.  And that was with this conversion to the so-called IDE drive.  We went from MFM and RLL and ERLL technologies.  There we had a controller that had to be mated with a specific technology of drive.  And the controller and drive together knew what kind of encoding would go on the drive and so forth.



Well, what happened was, essentially, that controller function moved into the drive.  So it was no longer something that you plugged into the motherboard, and then it worked in tandem with the drive where actual, like, flux data level signals were moving across the cable between the controller in the computer and the drive.  Instead, the controller itself moved into the drive with the move to so-called - and in fact IDE stood for Integrated Drive Electronics.  We're integrating the controller with the drive.  Now we simply ask the drive, which contains its own controller, for certain sector numbers.  Give us this block, and we'll give you this block, and the drive takes care of it.  So that was a huge change.



Well, what that allowed the industry to do, then, was essentially anything they wanted to, downstream of that so-called IDE interface.  They were free to change the sector count in the drive because one of the things you could ask the drive was how many sectors you got, and the drive would just give you back a number.  And then the computer will go, okay, thanks.  We'll use zero to one minus that number as our sector numbers, and ask you for them that way.  So that was a huge move because the drives stopped being just dumb electromechanical units, and they became smart themselves.



Then of course the world went crazy with density because this moving the controller into the drive and creating an IDE interface allowed the manufacturers to start cranking up the density, with it having no effect on its interaction with the computer, which was key.  One of the things they did to solve the problem that I describe in the holiday video of long-term drive alignment drift, in that case, in the case 22 years ago where you had a stepper motor and essentially a rack-and-pinion gearing system or sometimes a metallic band wrapped around a capstan that was controlled by the stepper motor, there, over time, the mechanics could change, which would cause the tracks to drift.  So the technology was completely changed to a so-called "servo-based" technology.



The first drives to do that dedicated a single surface out of however many surfaces the drive had to a so-called "servo platter."  The servo platter, which was really just a servo surface, was only one half, one side of the platter.  It contained sort of the master positioning reference for all the other heads.  So what that meant was that, as alignment drift occurred, the same drift would occur in the access to the servo tracks that would occur to the data tracks.  And so that helped to compensate for alignment.



But the problem was initially the servo was over on one end of a pack or a stack of surfaces.  Then they realized, oops, if we put it in the middle, that would be better because then it would be sort of - it would be physically, in terms of a sort of a rotational drift, it would be closer to the heads.  And that was called - there was something called "tower misalignment," which I did mention in the holiday video, the idea being that you call the stack of heads a "head tower" because they're all moving together in and out as one.  But the problem is even though you have fixed the alignment problem for the one head which is your positioning reference, if the tower skews a little bit, the head furthest away, at the other end of the tower from the servo head, that could still have an alignment problem.



So as they kept inexorably increasing the track density, chasing, cramming more and more data on drives, they ended up doing what's called "embedded servo," and that was another huge sea change in drive evolution was we embedded the servoing data into, essentially intermixing it with the data that is being stored.  There was a technology called a "wedge servo" where two different phases of sine wave were recorded in a chunk of the disk.  And if the head was exactly in the middle, the idea was that the amplitude of one phase of sine wave went down from left to right, and the amplitude of the opposite phase went down from right to left.  So if you were exactly in the center, those two 180-degrees out-of-phase sine waves would cancel each other, and you'd get a null signal.  But if you moved off center, you would start seeing a signal of one phase or the reverse phase, and which phase it was told the head which direction it was misaligned and by how much.



So what happened was, when we went to embedded servos, the ability to actually lay down new sector headers, as I describe in last week's video, we lost that.  And we really arguably didn't need it anymore because the drives got factory formatted with a very sophisticated format.  There were machines in the factories called "servo writers" which were the only things able to lay down this very delicate, super-precise servoing information on the tracks.  And once that was done, they shipped the drives out, and they just ran by themselves from there on.  So that began.



So essentially, as soon as we went to this embedded servo technology, the command to low-level format the drive, which had been in the interface, it was changed to a "zero the sectors."  So there was a command called "low level format drive," or "low level format track."  And all it did, though, was clear the data in them.  It never actually rewrote the sector headers.



And I should mention that, by the time this happened, we had solved the interleave problem.  The sectors had to be interleaved, as I described last week, because the systems were not fast enough to accept the data at the speed the drive was able to provide it.  So sectors had to be spaced out from each other.  Our machines got faster.  The buses got faster.  And moving the controller into the drive solved some of that communications bottleneck.  So then drives were all interleaved at 1:1, meaning just a linear stream of sectors.  The successive tracks were skewed rotationally so that, when you changed heads, because there's a delay in changing heads, that next track would be rotationally rotated downstream so that you'd have time to change heads and get reservoed and aligned before you encountered the first sector of the next track.  But so the answer is, no, we're no longer able to actually low-level format drives.  We've lost that ability decades ago, and obviously we're surviving without it.



LEO:  Interesting.



STEVE:  And lots, lots of data.  I mean, when I think about, you know, we showed, what, a couple weeks ago the guy screaming at his drives, causing them to generate errors.  I mean, that's how the servo system is trying as hard as it can to keep the head on track.  But if there's vibration present, that's going to cause some trouble.  And you can imagine, too, the engineers are doing everything they can to, like, not have it be like a weight at the end of a pendulum, which would be very prone to vibration.  They have a counterbalance so that the head mechanism itself is not prone to a pendulum sort of effect.  But even then, a rotational vibration, or a vibration with a rotational component, that is, something in the same axis as the head is moving, there's no way to prevent that from causing a problem.  So, yeah, it's a challenge.



LEO:  Well, now that we've explained that, let's talk about grown defects.  This is a question from Ron Frazier in Cumming, Georgia:  Could you elaborate more about how grown defects occur in modern drives?  I've often wondered why drives that previously work would fail.  I had a discussion on a forum recently where some people claimed the spindle bearing wear is a prime culprit.  That would explain why, for example, that reallocated sector count could start creeping up, then go up dramatically in a short time.  I'd be very interested to learn the best practices for monitoring a drive's health so you can exchange it while the data is still readable.  I was also horrified to learn that drives do not normally do a read after write verification.  Now I know I want to run SpinRite to refresh all the data a couple of times a year.



I found a cool Windows utility called CrystalDiskInfo which can monitor the SMART system, including the reallocated sector count, and send out an email when there's a problem.  The only problem is it's got to run with admin rights.  So I can't figure out how to install it on my dad's computer for his use since he doesn't run with admin rights usually.  Any thoughts?  Thanks for the podcast.  Always interesting.  Sincerely, Ron.



STEVE:  So in last week's holiday podcast I explain about defects, that despite our best efforts to create an absolutely flawless surface, at the molecular level almost, I mean, at the level of the size, the scale that we are recording magnetic flux, any variation in the surface causes a problem.  Even just a plating thickness variation, where it wasn't exactly perfectly uniformly plated, a slight variation in plating would cause the amplitude to drop.  And with today's technology, which is on the hairy edge of working at all, that's all it takes to cause that area not to be read back.



Now, we know that we have error correction technology, which we've always had, invented by IBM when they created the so-called Winchester technology, the original technology for flying heads over a spinning disk surface, because they wanted to get back the same data they wrote.  And they recognized that sometimes the system was so tightly engineered they weren't going to get it back.  So error correction is able to fix the problem.  We talked about error correction.  Actually it's the same kind of error correction, Reed-Solomon codes, which are used in the QR, the square 2D barcodes, the QR codes we talked about, that uses error correction so much that you can put corporate logos and things right across the QR code, and it just still reads it correctly anyway.



So defects are found in the factory.  And in the old days, when drives were not smart, they had a list printed on the outside.  This is one of the other things that happened when we moved the controller into the drive to create the so-called Integrated Drive Electronics, IDE drive, and everything since then has been that.  The drive would come with its defect list built in.  So no longer were we able to see what was going on.  The drive would just handle those.



What happens with so-called "grown defects," if you Google the phrase "grown defects" you get pages and pages about it.  This is a real phenomenon, is that there is a mechanical interaction between the head and the drive surface.  They're not touching, but they don't have to touch.  The technology is one where there is a surprising amount of downward pressure on the head to press against the disk.  Except that the, I think it's Bernoulli, it's not Venturi, I think it's the Bernoulli effect is one where the spinning disk drags with it the air that is immediately next to it.  Just because of friction, it pulls the air with it.  And that air ends up being pulled in between the head and disk interface so that there's an air bearing.



So even though the head is being pressed with surprising pressure against the disk surface, I know when I've taken drives apart and felt how hard the head is being pushed against the disk, I think, wow, this is amazing that it actually isn't in touch with the drive.  Once it spins up, the air is pulled under, and the drives float. They fly off the surface.  And that's why the term "crash" came into common use.  A head crash is literally when some disaster, like your dog running through the living room and knocking your computer over or something, or the laptop falling off the back of the couch, when some disaster creates such a mechanical event for the drive that the heads do, that they get past that air bearing and they bounce off of the surface, that's really not good.  So thus the term "crash."  The heads have crashed into the surface of the drive.



So what happens is, even though the head is not in contact with the drive, just the act of the pressure being put on the head, and the head and this air bearing passing over the surface, if you think about it, at a sufficiently low level that's going to create some mechanical flexure of the disk.  There is essentially - the disk is not absolutely rigid.  It can't be.  So the head will actually dimple the disk microscopically as it's flying over it.  And over time that constant flexing does cause some wear or variation of the surface.



Remember that we're not putting fewer bits on any disk than we can.  No engineer would, I mean, the engineers actually want to.  Management doesn't let them.  Management says, no, those other guys, they've got the density up to this.  We've got to compete.  We need it to be cheaper and higher density.  And the engineers say, no, we can't do that.  And of course management says that's what you always say, just like Scotty in the engine room.  So go away and figure out how we can double the density again.  And sure enough, a couple weeks later, the engineers come back and go, well, okay.  I think we know how to do that now.



So this has been the history for a long time.  So the point is that we are always, always on the edge with this technology.  We're putting as many bits as we can possibly justify onto the surface.  So over time there will be problems.  Now, one of the beauties of the IDE technology is that it's no longer up to us to manage the growth of these defects.  And this is one of the main beauties of SpinRite is that - and I've talked about this before.  A drive doesn't know it has a problem until it tries to read a sector, and its ability to read the sector is no longer just black and white because, thanks to error correction, and in fact thanks to the prevalence of error correction, many sectors are requiring error correction in order to read back.



And so the drive monitors how much correction a sector requires over time.  And over time the latent defects that were not detected by the factory, or that were just so small they were easily corrected and weren't a concern, they grow.  And at some point they get so big that the drive is no longer able to comfortably correct them.  It worries that, if it got much bigger, the defect would outgrow its maximum correctability.



So at that point, all by itself, the drive says, okay, we've got to move this somewhere else.  And that's the sector relocation.  It marks this region as unusable for now, for ever on, and it takes a spare sector, moves the data there, and essentially arranges so that, when the software asks for it, it'll go look in the relocated location.  So that's how defects grow and how these drives, which are increasingly smart, are able to fix it.  And of course SpinRite's benefit is that it's able to come along and get the drive to recognize the problems before the sectors become unreadable or uncorrectable, as it's called, so that's that benefit.



His last little question was about the SMART system.  I learned a lot about the SMART system.  What happened was - SMART is Self-Monitoring Analysis and Reporting Technology, SMART.  And it's when we got the IDE drives that manufacturers like Compaq that were big users, consumers of these drives, they said we need some way of knowing what's going on in there.  Now that you've moved the controller in there, you've got this integrated drive electronics, this IDE.  It's a black box.  How do we know how good it is, how solid it is, how long it's going to last?  We'd like to know, before it dies, that it's getting kind of flaky in there.  But thanks to having moved the electronics in there, we can't see into that anymore.  We need some visibility into the drive.  That's what the Self-Monitoring Analysis and Reporting Technology gives us, theoretically, is an API, a means of asking the drive about things going on inside.  It's a classic case of politics.  The manufacturers did not want to provide this information.



LEO:  Oh, interesting.



STEVE:  The OEMs, yes, the OEMs desperately wanted the information.  So the manufacturers gave them as little as possible, as little as they could get away with, and lots of excuses for why it was impossible to do more, which was complete, uh, malarkey.



LEO:  Malarkey, there you go.



STEVE:  Malarkey, that's what it was.



LEO:  Bull-pucky.



STEVE:  So the problem with SMART is that - and I learned this when I added that technology - SpinRite 6 is the first version of SpinRite to dynamically monitor the drive's SMART system while it's running.  And what I learned was that the SMART system is only useful when the drive is under load, that is, when it's doing work.  And that's the beauty of SpinRite's use of the SMART system.  There's a SMART analysis page in the SpinRite UI which shows you in real-time, for example, the amount of error correction the drive is doing per megabyte of data read.  And it shows you the high point, the low point, and the average over time.  So you're able to judge, literally in an analog fashion, judge the quality of the current quality of the drive when it's doing work.



The SMART system means nothing when you're not asking the drive to read things because it's only in reading that it has a potential problem.  So it's one thing, it's sort of nice to have the SMART system around in the background.  But unless you actually are watching it while you do a scan across the drive, it's not going to tell you that much.  And of course the manufacturers know that.  They're like, they're not wanting to actually demonstrate that, like create a means for judging drives, because then manufacturers would reject some of them.



LEO:  I've often wondered why SMART was so dumb.  Now I know.



STEVE:  They didn't want to do it.  Yup, they wanted to keep it a black box.  Don't worry about the man behind the curtain.  We'll take care of getting your data back.



LEO:  How interesting.  And disappointing.



STEVE:  Yeah, politics.



LEO:  I guess you have to do it at the low level.  You couldn't write a third-party app that would give you that information.



STEVE:  No, exactly.  There just isn't - we're now dealing with the so-called ATAPI, that's the AT Attachment Packet Interface is the formal name for the spec.  And I think we're at version 8 now, and it's taken decades to get here, because they update it for SD cards and thumb drives, and it's got all kinds of stuff now, and a bunch of legacy stuff that is dragging along from two decades ago, you can imagine.  But that's the interface.  And the drive makers actually even support the minimum of that.  There's, like, there's a whole ton of really cool stuff.



And it's like, for example, the drive wipe was a recent addition to ATAPI, and we've talked about that, where if you spared sectors that were defective out of service, they still contain some data.  So if you just do a overwrite of the drive, you're no longer able to access the spares, that is, the spared-out sectors that were defective.  And of course we've talked about this in the context of SD drives, or SSDs and thumb drives, that as we take sectors out of service, we can no longer get to them through the user interface.  Well, the manufacturers understood that, or actually the ATAPI committee understood that, so they added a low-level wipe command that does a much better wiping of the drive than just writing zeroes to it.  It's able to go in and kill all of the spared out sectors, as well.  And it's taken manufacturers a while to get around to doing it because they just sort of don't feel like there's a big need.



LEO:  We don't need that.



STEVE:  Yeah, well...



LEO:  Nobody needs that.  Come on, who would need that?  Question 3, Brian Phillips, Hammersmith, London, U.K., says that Steve is more famous than he thinks:  Steve, I'm watching your Christmas special, "Back in Time," on my Apple TV.  I got to the part where you were deep in discussion about hard drive sectors when suddenly my partner enters the room and says, "What are you watching?"  Before I could answer, she then belts out, "Is that Borat?"  Well, I laughed so much.  I could see the resemblance immediately after she said this.



STEVE:  Oh, great.



LEO:  I just thought I'd drop you a note and let you know you're a Hollywood star, Steve.  All the best to you and Leo, and keep up the good work.  Yes, he does look quite a bit like Borat.



STEVE:  Sacha Baron Cohen.



LEO:  I don't think you have that suit, though.



STEVE:  No.  Love our listeners.



LEO:  Yeah, they're...



STEVE:  And their partners.



LEO:  Maybe you do have that suit.  All the best to you and Leo.  Keep up the good work.  Happy New Year, Brian.  Philip, Taunton, Southampton, England wonders about multiple keys, please:  Long-term listener of your show.  I always enjoy your thorough discussion on how things work.  One thing that might be worth looking into is PGP whole-disk encryption, as it has a special option that allows you to have an additional decryption key for the disk, meaning that two different keys can decrypt the same disk.  Oh, that's interesting.  It would be interesting to know how this works and whether it has any implications to the security of the disk.



STEVE:  So, yes.  PGP does allow you to establish a second key.  What it's actually doing, though, is not quite what it sounds.  The way whole-disk encryption works - and this applies to the encryption built into encrypted hard drives, that is, hardware-encrypted hard drives, that is typically supported at the BIOS level, where a BIOS password is given to the drive to unlock its ability to decrypt the surface, and TrueCrypt, which is the whole-drive encryption tool that I've looked at carefully and we've talked about on the show many times.  The idea is that you would like to give the user the ability to change the password that is used.  If you think about it, you can change the password on these drives, if you want to.  Well, that means that the password is not what's used to encrypt the drive because, if it were, you couldn't change it.  Or you'd have to...



LEO:  Oh, good point.



STEVE:  Right.



LEO:  So it's a way to unlock the actual encryption key.



STEVE:  Exactly.



LEO:  So don't confuse encryption key and password.



STEVE:  Exactly.  There's a level of indirection, we would call it in programming terms.  The idea is that you generate a big blob of very high-quality pseudorandom bits, and that's used by TrueCrypt or PGP or the drive.  That's used as the actual key.  That data drives the encryption of the surface.  And it's super high-quality random, so you're good there.  Then your password is used to encrypt that.  So what that means is you can change your password anytime by reencrypting that under a new password.  And, presto, now that's the password you need for decrypting that pseudorandom blob, which then gives the world access to your drive.  So that tells us instantly how you allow two passwords to do that.  You simply store two versions of that blob of pseudorandom data encrypted under each different password, and then one of the passwords will decrypt one of those blobs.  So no significant implication on the actual technology of security.  Of course you could argue that the more passwords you have overall, sort of in an absolute fashion, the more passwords you have, the lower your security is because there's more ways to get to the drive.  But still it's a nice hack.  And we'll be talking about this when we talk about this recent...



LEO:  Hack.



STEVE:  ...alarm over a company that has decrypted these things in Question #10.



LEO:  All right.  Question 5, Alex Waters in Amherst provides a useful wakeup call.  In Episode 383, Question 7 asked if a company installed a root CA, Certificate Authority, in their employees' machines named Equifax, if that could live side by side with the real Equifax cert, and what the lookup chain would be like if that were done, and a lot of other cruft.  Cruft because it's a moot point.  The company can wipe out the root CA store, replace them with 200-odd CAs named identically to the ones our browsers trust, then dynamically regenerate the chain of trust at the router, inspecting the foreign cert, generating a clone, then signing it with the fake CA that matches - or, in the case of Google, generates the intermediary CAs, sign those with their fakes, and then generate the site cert and sign it with an intermediary, and on and on and on and on.



Since they don't have to be cryptographically secure - that went out the window the second the company decided to decrypt everything you're doing - this is a cheap operation.  Costs you nothing.  I mean, we've got a 256-bit symmetric key that's all zeroes with some metadata attached.  They could even reuse entropy over and over if the former didn't work.  As an even greater point, the company owns the hardware.  They could, although unlikely, write a utility that hooks the OS GUI controls and overrides them.  To that end, they could see that you're in IE, hook the address bar, see that the string there starts with HTTPS, change its underlying value to HTTP, but still render it as HTTPS.  Ooh, that would be mean.  That would be evil.  It's their hardware.  They can do what they want.  From a personal privacy perspective, someone else's computer is, of course - I guess this is really the real point - a totally unreliable platform.



STEVE:  And I thought that was a good wakeup call.  And Alex, of course, is absolutely right.  The moment you are using, as he says, somebody else's machine, the only way they could install a fake Certificate Authority in the first place is through some means, presumably IT department did it, and you sit down at your desk, and that's what's in front of you.  So I liked this because it steps back a little bit and says, yes, Steve, it's nice that you explained how the technology works, but let's remember that  none of this matters because it's not your machine, you don't want someone to do that to your machine, but they have the right to do it to theirs.  And so the fact is, if your company is up to these shenanigans and is determined they want to spy on you, they will be able to do so.



LEO:  Yeah.  And we should point out it's perfectly legal.  Courts have ruled again and again that companies don't have to tell you, even, when they're doing this.  They can just do it.



STEVE:  It annoys people, but that's their right.



LEO:  Ricardo Ramirez, Orlando, Florida wonders about card apps and mobile wallets:  Steve, blah blah blah blah, since Episode 1, blah blah blah blah blah blah blah.  You know what that all means.  It's ditto.  It's ditto.  I've been thinking about pinning - of pulling my wallet - putting, I'm sorry, I'm thinking about putting my wallet on a diet.  By this I mean removing unnecessary cards, like my bar-coded library card and a couple of customer rewards cards.  I've been considering moving those cards to one of the many card apps for my iOS device, like 1Card or CardStar.  Apple even has that capability on iOS 6 called Passbook.



One thing worries me though.  As often said online nowadays, if you're not paying for it, you're the product.  How much can we - by the way, you're paying for it.  You bought an iPhone, didn't you.  How much can we trust these apps and companies?  I don't want this to become a large honeypot of my personal information for greedy marketers.  I also always err on the side of preserving my privacy.  I just read the License Agreement for CardStar, and Item No. 2 almost made me break out in hives.  Ooh, I've got to read that now.  



Could you please look into these apps?  If not, could you mention on the podcast in case someone has a good, security-minded, preferably TNO solution?  I am on iOS, but I'm sure others would also be interested about Android solutions.  As always, thanks for the great podcast.  Greetings from sunny Florida, Ricardo.  And Happy New Year to you and Leo.



STEVE:  So, Leo, this is one for you.



LEO:  Well, I don't know these other two programs.  And I agree, if - I don't know, 1Card and CardStar, if they're free.  But, okay, first of all, as you will, I'm sure, aver, you could even have encryption on these things, but the company always has access to that data if they want to put a backdoor in there.



STEVE:  Potentially, yeah.  If you don't trust them.



LEO:  I would say that, if you're going to trust somebody with a wallet, you would trust Apple.  By the way, you are paying for that.  You're buying an iPhone.  You're giving them a lot of money.



STEVE:  Yeah.  I think you're right.  Passbook probably is - given that it has the functionality that you want, I guess I would wonder, why go with a third party?



LEO:  The other issue, of course, is that, even CardStar or 1Card, I don't know who these are, but it would be so damaging to their reputation.  And plenty of people watch, use Ethernet sniffers to watch the traffic.  If there were some sort of nefarious traffic going on, it'd be hard to hide that.  And ultimately, if somebody found out, it'd be devastating.  Maybe less so for CardStar and 1Card.  Absolutely devastating for Apple.



STEVE:  Yeah, and so I would say never for a moment consider using some app you've never heard of from Russia or China.



LEO:  For sure, yes.



STEVE:  I mean, absolutely stay with a mainstream, well-vetted company with a reputation because that's, I mean, that's the value to them.  They cannot have that blown.  So some random app that offers all kinds of features, people get seduced all the time, get suckered into this.  But it is dangerous.  So just say no to that.



LEO:  And I would point out that there is something for Android.  It's called Google Wallet.  And again, Google has some incentive not to get in trouble, and makes money other ways.  Unfortunately, Google Wallet doesn't work on a lot of Android phones.  And neither Google Wallet nor Passbook will do exactly what you want them to do, necessarily.  They may not store all the cards you want them to store.  Apple, for instance, still doesn't support credit cards, although will at some point, I suppose.  I'm just going back...



STEVE:  And you wonder if they just don't want to.



LEO:  I think they may not.  That may be why; right?



STEVE:  They don't want the liability.  



LEO:  I'm just looking at the CardStar license agreement.  I don't see anything particularly horrible.



STEVE:  Well, don't break out in hives because we need you to read a few more questions.



LEO:  Oh, Borat, whoa.  Where did he come from?  Okay.  Back to work.  Kent, at an undisclosed location someplace on Earth, asks us, please revisit UPnP.  Hey, guys.  (Insert normal gratuitous comments here.)  It's been some time since you last really talked about Universal Plug & Play, and I do recall what was said back then.  But as a new PlayStation 3 owner, I'm wondering what the state of UPnP is today?  The PS3 - the Xbox does, as well, I might point out - wants UPnP enabled.  Some games won't run or are limited if UPnP is disabled.  Is it safe to turn it back on for my PlayStation?  Or just avoid those games and features of the PS3?



I'm using a D-Link DI-604 router, blah blah blah.  I can go on and on on that one.  I don't think it really matters.  He wants to know which is better, a WRT54G with DD-WRT installed or a D-Link DI-604 router using stock firmware.  He's also thinking about using pfSense on an old PC, and wants to know which of those three options would be best.  All my PCs run Windows 7 or XP with Avast, SeaMonkey with NoScript, Thunderbird instead of Outlook, and I'm the only person using the goodies on my LAN.  I operate on a semi-paranoid level of security - I would say so - and I'm no newbie to computers, going all the way back to TRS-80 days, which I still have and still works.  Thanks.



And then of course I should read this second one from Russ Greeno in Buckingham, U.K., who also says:  You did a huge podcast on UPnP in the past and how it's a security risk if left on.  What about Extended Security UPnP settings?  These are something the new routers come with.  Is that any better?  Russ Greeno.



STEVE:  Okay.  So we haven't talked about Universal Plug & Play for a long time.  Kent, I was glad you acknowledged, Leo, that he is very security conscious, and he's running AV, he's using less targeted systems, he's using SeaMonkey instead of Outlook, and he's using Thunderbird, really taking care of his systems.  The only danger is, that we're aware of with Universal Plug & Play, is we absolutely know that malware exists that now leverages Universal Plug & Play to maliciously open ports on a router that causes the beautiful and natural firewalling that a NAT router provides to become porous.



Years before this appeared, on this podcast, we said this is going to happen.  I could not believe that Universal Plug & Play was designed with no security.  Just nuts.  And so that's why I've had my UnPlug n' Pray utility around for so long.  It's just like, okay, unless you know you need it, turn it off.  It's just one of those things that is a problem.  I do know that, at least for Xbox, you can manually configure static port mappings through your router to your Xbox that essentially manually do exactly the same things that Universal Plug & Play does easily.



But I also don't think anyone should get too worked up over this.  I mean, he's, like, avoiding games and features of the PS3 that use Universal Plug & Play.  No.  You're in control of your network.  The big danger is, if something gets in, then it's able to, like, open the front door through your router to allow other things to connect to you.  That's not a good thing.  But again, you have to have something in your network first.  You have to have malware there which is using and leveraging Universal Plug & Play before that happens.



LEO:  Right.  So it's a hole only for malware that exists on your LAN already.



STEVE:  Right.



LEO:  It's not a hole that allows inbound malware.  It just would allow a malicious program, without warning you in any way, to open ports on your router and say come on in.



STEVE:  Yes.  Basically the same features that are available at the user interface of your router are available programmatically.  And what's really been controversial...



LEO:  The port-forwarding features or the opening, yeah.



STEVE:  Yes, exactly.  And what's really been controversial is that many routers don't even show you what Universal Plug & Play ports have been forwarded.  They just sort of do it secretly.  I mean, really, that I could never understand, that they wouldn't provide you a means of seeing what has been done to your router.  But they don't.  And Russ Greeno's Part 2 of this, extended security is something I have not yet researched.  But I've got it on my list of things to look into and talk about.  So I will definitely see what, I mean, I'm delighted to hear that some routers are offering extended security.  I just don't know if it's any good or how it works and what it does.  I will find out.



LEO:  You know it was Microsoft that invented UPnP, and I think it was for the Xbox because the - and the reason this is an issue on gaming machines is if you want to play games with other people, you have to allow incoming, uninitiated-by-you incoming connections.  So this UPnP opens ports and says, yeah, yeah, these games can be played.  If you just were opening the connection yourself you wouldn't need this.  So it may be, I don't know, but you might investigate.  Maybe I can get some of the functionality.  Only I can start a game.  I can't join a game somebody else has started, that kind of thing.  I don't know.  It's just a guess.



Anyway, our next question is on punch card.  It says - no, it's not.  Somebody sent me punch cards.  But you know what's funny about these, because of their historic nature, do not fold, spindle, or mutilate, those of us who learned programming in the old days...



STEVE:  You mean like these, Leo?



LEO:  You have a few?



STEVE:  Oh, yeah.



LEO:  You have some lying around?



STEVE:  I still code on punch cards.



LEO:  You know what I like about these?  They're pink, and they say "Be My Valentine.  TCU Computer Center."  They've got a heart.  I don't think you could probably use these.  And there's an arrow, too, I just noticed.



Anyway, Mikael Falkvidd in Sweden suggests that Australian museums may not be filtering.  We talked in 383 about an Australian arts museum that was apparently filtering SSL connections, according to our correspondent.  He's saying they just require a login so that the user accepts their terms of service for the use of their network.  To do this they redirect the traffic to their own server until - this is the key - until the user has logged in and clicked Accept.  Since the user went directly to an HTTPS URL, the certificate, the museum's server certificate, didn't match, of course, the Gmail URL.  But the solution would be just to go to a non-SSL page, log in, get redirected, accept the Terms of Service, and then you can go to SSL, and it will act normally.  I suspect that's the case.  You'd have the same thing at Starbucks or anywhere where you had to accept Terms of Service.  You get a start page.



STEVE:  Yes.  This was a case of me not seeing the forest for the trees.  I immediately went to the technology.  And a large number of our listeners said, uh, Steve, ever been to Starbucks?  Oh, yeah.  I support, yeah, we know I've been to Starbucks.



LEO:  Doh.



STEVE:  Anyway, so yes, everyone who wrote in, thank you.  I'm sure you're right.  This was just their network wanting to get a Terms of Service agreement.  And if [Andrew] had gone to an HTTP site, he would have been redirected to their page.  Instead of freaking out the Google's Chrome browser, he would have been bounced over to their "Accept these terms, please," and then he would have been fine.



LEO:  Of course.  I should have spotted that, too.



STEVE:  Ah, just, you know...



LEO:  Well, but that's what happens is we go - you said "jumped to the technology."  Well, let me tell you.



STEVE:  Exactly.



LEO:  And that might have something to do with Question 10.  Jason in Indianapolis, Indiana says, "Oh my god, oh my god, oh my god.  TrueCrypt has been hacked."  What are your thoughts on this Slashdot article?  I've been listening to Security Now! because I know this will be covered.



"Russian firm ElcomSoft" - they've been around for a long time, and they've published a lot of cracks.  As far as I know they're reputable - "on Thursday announced the release of ElcomSoft Forensic Disk Decryptor (EFDD), a new forensic tool that can reportedly access information stored in disks and volumes encrypted with desktop and portable versions of BitLocker" - that's the Microsoft solution - "PGP, and TrueCrypt.  EFDD runs on all 32-bit and 64-bit editions of Windows XP, Vista, and 7, as well as Windows 2003 and Server 2008."  And he provides us with the link:  elcomsoft.com/efdd.html.  What?  What?  What?



STEVE:  Okay.  So, yeah.  Everyone went nuts with this and ran around, I mean, I got a ton of questions about it.  So the good news is nothing has been cracked.  Nothing has been hacked.



LEO:  So what does this thing do?



STEVE:  Well, for $300 it would be useful to maybe the FBI.  They'll buy it.  Maybe, like, private security companies that want to do forensics.  What it does is it automates what would otherwise be an arduous sort of theoretical process of accessing encrypted hard drives using only the techniques we've already talked about on the podcast.  For example, it supports the Firewire hack.  And we've talked about how Firewire, because it uses a - essentially the Firewire is an extension of the bus on your computer.  Firewire has so-called DMA, Direct Memory Access.  And so a device that is designed with Firewire can plug into a Firewire port and see into all of the memory on your computer.



Well, what we know is that, while any full disk encryption is in use, that is, while your TrueCrypt volumes are mounted, BitLocker is unlocked and so forth, the keys to do that must exist in memory.  They're there in use.  So that means that, if something gave you access to the system's memory, and it were clever, and so these guys, I take my hat off to them, $300, you don't have to do this yourself, they have done it for you, you can use this with a Firewire interface and suck out the keys while the system is in use.  That is, because the keys have to be there in order to dynamically decrypt and reencrypt the data as it moves in and out of the drive.



Now, hibernation is another issue.  When you hibernate your system, it writes RAM, a static image of RAM to the hard drive.  Now, if the keys were in RAM at the time of hibernation, they're still going to be there in the hibernated file.  And so that's another thing this ElcomSoft Forensic Disk Decryptor does support is, if your system did not wipe the keys before hibernation, then they'll be there.  It can get them out of the hibernation file.



On the other hand, none of this is news to the TrueCrypt guys, for example.  There's an option in TrueCrypt which wipes the keys prior to system going to sleep or hibernating.  And so you know you're safe if, when you bring your system out of standby, or you wake your system up from hibernation, if you can do nothing until you give it the passwords again because the option in the user interface is, specifically, wipe the keys.  And it overwrites RAM, removing the keys, the cached passwords, and the decrypted keys that we were talking about in Question #4, removes them from memory prior to going into hibernation.



And the page, I mean, this is a little bit of typical Slashdot hair-on-fire stuff that you see there all the time because it's sort of - also I guess I'd have to blame ElcomSoft for being a little bit obfuscatory here.  They talk about all of their ability to decrypt everything and complete decryption and real-time access to encrypted information and zero footprint operation.  And then, when you get down to the fine print, they say "three ways to acquire encryption key."



LEO:  They bury that, that little lead there, the most important part, yeah.



STEVE:  Yeah. 



LEO:  We need the original encryption keys in order to do this.



STEVE:  Exactly.



LEO:  Oh, well, of course you need the original encryption keys.  If I'd known that - okay, yeah.



STEVE:  Yeah.  So what this has done, this makes it easier for what could have been theoretically done before to now be done automatically.  They know BitLocker, PGP, and TrueCrypt.  They're able to do a quick search through memory to find, to lock onto the data structures that contain this, and they can suck them out.  But only if they're there.  And they're only there if the system, one way or another, has them in memory and is using them actively.  And if that's not the case, they can't help you.



LEO:  Right. 



STEVE:  So nothing to worry about here.  Nothing to see.



LEO:  Whew.  It's the same as it ever was.



STEVE:  Right.



LEO:  Steve Gibson is at GRC.com.  That's where you can ask questions for future Q&A episodes.  We do this about every other episode.  GRC.com/feedback.  It's got a form and everything.  Don't send him email.  You don't even know how to send him email, trust me.  I don't know how to send him email.  It's a magic process.  However, you can go to GRC.com/feedback and ask a question.



STEVE:  Please do.



LEO:  Maybe he'll use it on the show.  You can follow him on Twitter, he's @SGgrc.  If you're at GRC.com, you should certainly pick up a copy of SpinRite, the world's finest hard drive maintenance and recovery utility.  You might also want to take a look at some of the freebies over there, not to mention he's got special versions of the show, the 16Kb audio, which only Steve has.  He does it all by himself.  He grinds it down to a fine powder.  The transcriptions, which Steve pays for, from Elaine, which make it easier to follow along, also searchable, which is nice.  We have the larger files, the audio and video files of the show, at TWiT.tv.  You can find that there.  Watch live, 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 1900 UTC, every Wednesday.  Or download after the fact.  Best would be to subscribe so you don't miss an episode.  In fact, you really want an archive of these.  I think a lot of people save every episode, all 300, what is it, 385?



STEVE:  Imagine, imagine how many total bytes in the universe are being consumed by archives of Security Now!.



LEO:  Well, if it's the 16Kb version, it's barely a megabyte.



STEVE:  There you go.



LEO:  Or something.  I don't know.  It's barely a gigabyte, probably.



STEVE:  I will say that I ran across people wondering or  talking about their dog problems in the Security Now! feedback email.  The problem is, I get so much feedback, I mean, hundreds of pieces of email, I never have time to read them all.  I read enough to generate our Q&A episode, basically.  So there is a different feedback page for the Quiet Canine project, and that's GRC.com/tqc - as in The Quiet Canine - /feedback.  So instead of GRC.com/sn/feedback, for Security Now! feedback, it's GRC.com/tqc/feedback for The Quiet Canine feedback.



LEO:  You've got to start calling it the new name, Dude.



STEVE:  Well, my feeling is that the Quiet Canine is sort of - it's a statement of the goal and the project.



LEO:  Treble Shooter is just the brand name.



STEVE:  Treble Shooter is the name of the device.



LEO:  Trademarked.  Copyright.  All rights reserved.  Keep your mitts off.



STEVE:  It's just a nice name.



LEO:  I like it.  It's funny.  All right, Steve.  Thanks so much.  Have a great week.



STEVE:  Talk to you next week.



LEO:  We'll see you next week on Security Now!.



STEVE:  Thanks, Leo.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#386	

DATE:		January 9, 2013

TITLE:		Disconnect WidgetJacking

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-386.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with a very busy week of interesting security news and events, Steve and Leo examine the growing privacy and security problems created by the ever more pervasive social widgets - Facebook's LIKE button, Google's +1, Twitter's Tweet!, and others - and they offer an easy-to-use free solution!



SHOW TEASE:  It's time for Security Now!.  Did you know, did you know that those Facebook Like widgets, the other social share widgets, are actually revealing your identity to anybody who's on the same network?  This is a problem, but Steve explains how to fix it in a very simple explanation, coming up, along with all the security news, next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 386, recorded January 9th, 2013:  Disconnect WidgetJacking.



It's time for Security Now!, the show that does its best to protect you online.  It's a never-ending struggle.  Fortunately the Explainer in Chief is here, Steve Gibson, the man behind Security Now!.  I met so many people at the New Media Expo and at CES, Steve, who said, "Tell Steve hi.  We listen religiously."  And it's usually the high-end geeks.  They want to know more.  You can never get too much security or too much geekness or too much good information.  And they love how geeky we get on this show.



STEVE GIBSON:  Well, we've got more today.  There's a whole bunch of interesting stuff that happened this week we will catch everyone up on.  And something happened in November with an interesting project that I've had my eye on which achieved critical mass.  And so I'm going to discuss it later, but first talk about the problem that has been growing known as WidgetJacking...



LEO:  Uh-oh.



STEVE:  Which people have not been talking about.  This is essentially, it's related to the so-called "sidejacking," which is what Firesheep was doing.  Then this involves leveraging the lack of security of social widgets.  There's a privacy aspect, but there's a serious security aspect to it.  And the good news is - so anyway, we're going to explore it, and explain it, and everyone will understand it.  And the good news is there's a solution for it.



LEO:  Excellent.



STEVE:  Yeah.  But before we go, you need to type that first URL into your machine.



LEO:  Okay.  You don't want to say it out loud because obviously we're afraid it will bring the site down, as you are wont to do.



STEVE:  Correct, although I tweeted it last night, and I've never had so many responses I think to anything.  It is beyond cool.  Now watch it.  And it took me a while to get what it was doing.  I created a memorizable bit.ly shortcut, bit.ly/factorizer.  So again, that's http://bit.ly/factorizer.  It is just - it is spectacular.



LEO:  So it just looks like things are doubling here.



STEVE:  Well, no.  Look in the upper left.  It's incrementing.



LEO:  Oh, okay, it's incrementing.  Okay.



STEVE:  So it's incrementing one by one.



LEO:  It's dots on a dice, kind of, sort of.



STEVE:  Well, but keep watching because you'll begin to sense what it's doing.  Primes that cannot be factored show as...



LEO:  Oh, as a circle, I see.



STEVE:  ...as a circle.



LEO:  I see.



STEVE:  Because there's no way to subdivide them.



LEO:  So what you're doing is you're going through the numbers one by one of dots and factoring them into their factors - fours, twos, threes.



STEVE:  Yes.  And also then threes of fours of sevens, and sevens of, I mean, so all of the - it basically does a complete factorization of each number and animates it.  And I have...



LEO:  I'm going to speed it up because I've got it on slow play.  There's a fast-forward that's a little bit faster.  Maybe we'll just keep that running for a while.  How far does it go?



STEVE:  Somebody said it goes to 10,000.



LEO:  It's very cool.



STEVE:  It's just mesmerizing.  I thought it was, you know, of course it applies to what we're doing, too.



LEO:  And I do like it that it's HTML5.  And I'm sure you like that.



STEVE:  Yes.  It's code running in the browser.  And, in fact, Firefox 18, which was released yesterday and which we'll be talking about, runs at 25 percent faster.



LEO:  Oh, well, I'll have to download it.  We have to give that a try.  How funny.  This is the fastest I can do it on Safari.  Let's see how fast Firefox will do it.  All right.  How fun.



STEVE:  Yeah, it's beautiful.  So the big security goof is one of those that is really painful because it is incredibly widespread, incredibly old, that is to say, six years old, which is in this timescale it's infinitely old.  A six-year-old flaw was just found in all versions of Ruby on Rails from version 2.0 on.



LEO:  Oh, no.



STEVE:  So, and this is bad.  A security-focused Rails contributor, Aaron Patterson, posted in a Google Groups thread:  "The parameter parsing code of Ruby on Rails allows applications to automatically cast values from strings to certain data types.  Unfortunately, the type casting code supported certain conversions which were not suitable for performing on user-provided data, including creating Symbols and parsing YAML" - that's Y-A-M-L, and that's one of those recursive acronyms, "YAML Ain't Markup Language."  Anyway, continuing, he says, "These unsuitable conversions can be used by an attacker to compromise a Rails application."



LEO:  So, as always, sanitize your inputs, baby.



STEVE:  Yeah.  Well, and the problem is this.  Because this use of user-provided data wasn't expected, you were probably not sanitizing for it because you wouldn't think there was any problem.  He said:  "XML Parsing Flaw, which was first introduced in version 2.0 six years ago" - that is, the GitHub commit for that is six years ago - "allows an attacker to bypass authentication systems, inject arbitrary SQL code, inject and execute arbitrary code, or perform a DoS attack on a Rails application."



So in the RubyonRails.org weblog for 1/8/2013, which was yesterday, the updates were announced.  The guy posted, "Hi, everybody.  I'd like to announce that" - and then the current version numbers like 3.2.11, 3.1.10, 3.0.19, and 2.3.15.  So those are the latest versions of the various sub-versions - 3.2, 3.1, 3.0, and 2.3 - have been released.  "These releases contain two extremely critical security fixes, so please update IMMEDIATELY," he had in all caps.  And Patterson suggested, if for whatever reason, for any reason you cannot update, disable XML parsing completely or remove support within the parser for Symbols and YAML because those are the two weaknesses that he found.



So I wanted to immediately let, I mean, presumably anybody, hopefully, who's maintaining Rails-based systems will be on a mailing list and will already know this.  But this is fresh.  And of course the hackers, the malicious guys are going to be on this fast because, I mean, so many sites, as we've discussed many times in the past, are now running on Ruby on Rails.



LEO:  Yeah.  I love Ruby on Rails.  And Ruby is wonderful.  So it's Ruby, though, not Ruby on Rails that has the problem.



STEVE:  Well, he's a Rails contributor.  So I don't know where you divide this.



LEO:  Oh, well, Rails is a framework.  Ruby is the language.



STEVE:  He's calling it a Rails application, yeah.



LEO:  Okay.  So it's a Rails issue, then.  That's actually better than if it were a Ruby issue because Ruby's a...



STEVE:  Oh, it's not language intrinsic.



LEO:  Got it.  It's in the framework.



STEVE:  It's packages on top, yeah.



LEO:  And we've seen, actually we've seen problems with the framework before. So that's okay.  Okay, good.



STEVE:  So also in the news...



LEO:  By the way, let's just check in real quickly.  We're up to 1,305.  That's Safari.  This is Firefox.  Catching up.  It is appreciably faster.



STEVE:  Oh, and you got Firefox 18?



LEO:  Yeah, this is 18.  So Safari, Firefox.  Yeah.  I would say, I mean, 25 percent is not as huge as it might sound.



STEVE:  No, it's not two times or anything.  There was a bunch of news also, actually this was late, this was just after our podcast last week that Chrome detected a phony Google certificate in the wild.  And that really upset everybody because here we're back to a trusted, in the root, certificate authority.  This was Turktrust, a Turkish CA, which when they started doing the research - this was not malicious.  This was not a break-in or a compromise of their system.  But it's also a little disturbing because two years ago they inadvertently issued one of their customers a pair of intermediate certificates rather than an end SSL cert.



So what that means is, of course, an endpoint SSL cert is signed by the CA, and all you can do is assert your own identity with it.  If you ever get an intermediate certificate authority, you are a certificate authority that has been signed by the root certificate authority.  So for two years this entity that inadvertently received these two intermediate CAs - and of course we're having to take all this on trust, that this wasn't some secret dark entity of the Turkish government that got an intermediate CA from Turktrust and so forth.  So if we take this on face, what we do know is that for two years there has been an intermediate CA that could issue trusted certificates for any domain it chose.



LEO:  That's wild.



STEVE:  I know.



LEO:  Two years.



STEVE:  Yeah.  So this is the, as we've discussed, the Achilles heel of our entire SSL trust system.  Somewhere in any system there has to be an anchor of trust.  And so that's where you're going to be weakest.  And our long-time listeners will probably well remember that podcast [SN-104].  It was maybe, what, five or six years ago, where I had happened to check in, to look at the block of trusted CAs in whatever browser it was, I don't remember, because I'm old school.  And once upon a time there was five.  There was VeriSign and Equifax and, I mean, it was like a handful.  I looked at it, and it was 800.  And of course that's where the famous Hong Kong Post Office came from.  It was like, wait a minute, what are they doing signing certificates that I trust?



But anyway, so immediately Google updated Chrome to remove trust from that one certificate that was known to be a problem, immediately informed Turktrust that something was wrong, and please find out what, and informed the other browser vendors that there was a malicious intermediate CA in the wild.  And so now - we're okay now.  That intermediate CA and anything it might have ever signed that has also been trusted but never warranted our trust, they're dead now.  So none of our browsers will use them, and this happened last week.  But that's the story behind that, for people who sent me notes and tweets saying, uh-oh, what does this mean?  So we're okay.  But again it's like, oops, a little glitch in the system.



Also, yesterday was Microsoft's Patch Tuesday.  And it's another important set of patches.  Unfortunately, and we'll remember that last week we wondered whether Microsoft would have time to fix the zero-day flaw which had just been, I think it was the prior weekend, found in the wild.  Remember it was being used for targeted attacks on IE6.  But it's also known to affect 7 and 8, not 9 and 10.  So if you need to use IE first - because it's funny, whenever I tweet anything about IE, I get back the predictable, well, who's using IE?  It's like, yeah, I know, I know.  But I also get lots of people saying, hey, I have no choice.  My company makes me, my bank makes me, my whatever it is makes me.  So there are - and, I mean, I have it because - for Windows Update, and there are some things where it still has to be around.  And it's around by default, of course, in a Windows environment.  So it was not fixed yesterday.



So, and Brian Krebs reported that it has, as we also predicted last week, now been added to the Metasploit Framework.  So it is trivial for script kiddie level malicious hackers to go starting to exploit this.  So we can expect to see its use expanding in the wild because now the hackers think, well, we may have a month before the next Patch Tuesday.  Of course if it goes really crazy, Microsoft may be induced to issue an out-of-cycle patch.



Now, Part 2 of this is that, almost immediately after Microsoft's Fixit tool was put out, and we talked about it last week, it was discovered that there was a way around it.  So even Microsoft's Fixit tool is only partially effective against this exploit.  So really the only advice I have is, more than you might have already been avoiding the use of IE 6, 7, and 8, if 6, 7, and 8 are what you're using, try to minimize your use of it.  Or I would say go to really trustworthy sites.



The problem is it's not the sites that are going to be malicious.  But in the attacks we've seen, remember we were describing them as "watering hole sites" because the way these attacks were working is that not secure, not sufficiently secure sites were being modified to attack their visitors.  And so it was a sort of a - the idea was being that the actual targets of the attack, the companies that the attackers wanted to get into, would go to this so-called watering hole site, get themselves infected there, give the attackers the access they want, and be compromised as a result.



So we don't have any fix for this, not one that apparently works.  And having been dropped into the Metasploit Framework means that it's completely understood.  The hackers know how to exploit it.  It's now in the open source mode where anyone can get at it, and we have no fix for it.  So it's about as bad as it gets.  And it's, of course, being actively exploited in the wild.



Aside from that unhappy news, Microsoft this Tuesday issued seven patches, two of which were critical and addressed, like, 12 or 13 security problems.  One of those only affects Windows 7 and Server 2008 Release 2 only.  So rather narrow.  But the other one is another XML Core Services problem.  We've seen those before.  This affects everything Microsoft has ever touched, even something I've never heard of.  I was looking down through the list of stuff.  And I thought, what is the Groove Server 2007?  Does anyone even know?



LEO:  That sounds like a Microsoft code name.



STEVE:  No, it's the official name.  It's, like, in their list.



LEO:  No, it would be, yeah.  But, I mean, it would be what they called it.  Maybe not what...



STEVE:  Yeah.  Oh, I see, and they decided not to change the name when they put it out.



LEO:  Microsoft, doesn't it sound like Microsoft Groove?  Groove products, let me see, I don't see anything.  What is Microsoft Groove?



STEVE:  Groove Server 2007.



LEO:  Yes.  It's something Ray Ozzie did.  It's part of Office.  And a number of our people in the chatroom use it.



STEVE:  Well, folks, update your XML Core Services immediately.



LEO:  Microsoft Office Groove 2007 creates dynamic workspaces to hold all digital information related to any task.  So it's like, you know, Ray Ozzie did it.  It's a collaboration space.



STEVE:  Just drop the data in the groove, I guess.



LEO:  Yeah, yeah.



STEVE:  They already used Suitcase.  They can't use that again.



LEO:  It does sound like a Microsoft name.  An old Microsoft name.



STEVE:  Oh, god.  And the other thing was an important update to the .NET framework and a few other things.  So anyway, update your Windows, and don't use IE.



LEO:  They call it - I think they just call it SharePoint now.



STEVE:  Oh, okay.



LEO:  Well, it was part of SharePoint.  I went to the Groove page, and it brought me to the SharePoint page, so I don't...



STEVE:  Because SharePoint is strictly cloud-based; right?  



LEO:  Yes, yes.  As would Groove be.



STEVE:  Oh, I see.  You went to Groove, and it bounced you to SharePoint.



LEO:  Yeah.



STEVE:  Ah, okay.  But back in 2007 we still called it Groove.



LEO:  We had Groove, and it was groovy.



STEVE:  So speaking of same old, same old, we have Adobe, who simultaneously issued security fixes for all of their things also - Acrobat Reader and the Flash Player plugin.  And in my notes here I just put "blah blah blah."  Which is to say, just go update yourself.



LEO:  Ditto.  Ditto ditto ditto.



STEVE:  Yeah.  And big news.  Yahoo! Mail finally gets HTTPS.



LEO:  Oh, finally.



STEVE:  Yes.  And they've continued to have break-in problems.  I've seen some notes about people getting spam from Yahoo! Mail people, and I got some myself yesterday.



LEO:  Yeah, it's notorious, yeah.



STEVE:  Yeah, from like a week ago, I mean, from years ago, somebody who had an old email address of mine that I kind of monitor sort of for this purpose.  And it's like, oh, look at that, something coming in here.  Oh.  Anyway, so what that means is that if you sign into Yahoo! Mail with your ID and password, hover over the Settings icon, and from the dropdown menu which you'll get select Mail Options.  Scroll down to the bottom of that page.  And  then, under Advanced Settings, select the checkbox opposite to Turn on SSL.  Then a dialogue will be shown, and a refresh is required to change the setting.  Click Okay, and then click on the Save button.



So they're a long way away from on by default, but at least they do allow you to maintain persistent security.  And, boy, in this day and age, it's amazing that this is so late in coming, when we know now that, if you only are secure during logon, and then you're in Starbucks or any other open WiFi hotspot, an airport or anything, then all of your non-secure transactions, which is everything subsequent, will be in the clear.  Which means the cookie which you were given in order to establish your session at logon is there, and you can be hijacked.



So it's not surprising Yahoo! is having these problems.  This is how hijacking happens.  Exactly like this.  So lord knows why it took them so long to make it happen.  And they really need, unfortunately, it being buried like that, who's going to find it?  So our listeners will.  And if you get email from anybody who's got Yahoo!, listeners, drop them a note and say go find out - go to Advanced Settings and turn on SSL.  It's not going to break anything anywhere because we know how, we can all do SSL now.



LEO:  I remember when you discovered Firesheep [SN-272], which was a hack that allowed you to do this kind of thing at an open WiFi access spot.  And you celebrated it because, as you said, this will force everybody - how many years ago was this, two or three years? - this will force everybody to do HTTPS all the time.  And it's taken this long.



STEVE:  Yeah.  The responsible people did.



LEO:  Facebook and Gmail.



STEVE:  Yes, exactly.



LEO:  Well, now Yahoo!.  Join the club.



STEVE:  So Firefox 18.  No huge security or functionality changes.  The IronMonkey - don't use that as your password, folks.  The new IronMonkey is their JIT, their Just In Time JavaScript compiler, which delivers 25 percent increased performance over the already very fast JavaScript technology they had before.  IronMonkey is able to optimize more than their prior compiler technology because it compiles the JavaScript into an intermediate language that is designed for machine-driven optimization, that then applies lots of machine-driven optimization strategies to this intermediate language.  Then, and only then, it translates that into assembly language in order to execute at maximum speed on the system.  So it's a two-stage process with that intermediate step in the sandwich really being responsible for very clever optimizations.  And as a consequence, I mean, I'm excited because we're really seeing JavaScript, I mean, you know what a mixed blessing I feel it is because it's so prone to abuse, thus the reason I run with it disabled all the time except for sites I trust.  But, boy.



LEO:  It's powerful.



STEVE:  I mean, this is - it's really clear that the browser is the platform, the application platform of the future.  Speaking of which, one of the things also newly supported at the preliminary level is something called WebRTC.  This is in Firefox 18.  RTC stands for Real Time Communications.  The WebRTC is a forthcoming HTML5 generation W3C and IETF standard to support real-time Internet communications:  phone calls, video chatting, sharing, peer-to-peer file sharing.  So again, here's another example of, due to the standards moving forward and the power that we're developing in our browsers, we're talking about moving what is currently standalone apps or plugins into the HTML, into the web standard.  So our browsers won't need Skype to be downloaded and installed, or Google Talk, or anything.  They'll have it natively, in the same way, for example, that they now can play video without needing a Flash plugin or anything else in order to play video because the browsers are able to do that on the fly.  And speaking of which, Google has donated their VP8 video codec to the WebRTC effort.  This is the one that they got from...



LEO:  On2.



STEVE:  ...On2, that's right, and are claiming that it is unique in that it is license free.  There are some people who aren't quite sure that that's the case.



LEO:  Yeah, including the H.264 Consortium, who doesn't want it to be license free.



STEVE:  Exactly.  And in fact there is pressure for H.264 support in this same standard, in this WebRTC standard.  But the resistance, of course, from people like the Mozilla Foundation, is they don't want to put license-encumbered technologies in the browser.  They're just fundamentally against that.  So I think we'll probably always be in a position where there are a couple different video standards, in the same way that we have JPG, PNG, and GIF image files.  I mean, those are established.  They're not going to go away.  So there isn't just one way to show a picture.  There's a few ways.  And there won't be one way to play a video, there'll be a couple, depending upon what platform you're on.



Also with Firefox 18 we have full retina display support on the new Macs with the retina screen, which prior Firefoxes did not support.  So that's here for, like, super-crisp retina font-rendering and so forth.  And over on the Android side, Firefox 18 adds support for on-the-fly search suggestions in their so-called Awesome Bar.  And those search suggestions are transacted over secure channel, even if you're not, so that no one can see what's going on.  And there is a malicious site warning system built in for Android, which is certainly handy to have.



And I promised that I would take a look a couple weeks ago at what "Extended Security" meant for Universal Plug & Play.  Remember that I saw, I think it was a couple tweets, said, hey, well, what about the extended security?  Well, it's completely useless.



LEO:  Oh, dear.



STEVE:  First of all, it's not widely available.  I could only see really that Thompson was using it in some of their routers.  And all it does is lock down some ridiculously wrong things that Universal Plug & Play should have never been allowed to do in the first place.  But it provides virtually no security.  So no malware would be at all slowed down if you had extended security turned on.  And I didn't even write down and bother enumerating it because I just thought I would tell everyone, eh, you know, don't...



LEO:  Or don't worry about it.



STEVE:  Yeah, don't worry, it's not going to help.



LEO:  Plenty of holes left.



STEVE:  And apparently it even does mess things up.



LEO:  Oh, no.



STEVE:  I mean, despite doing nothing for you, I ran across a lot of advice saying, oh, if you have that turned on, turn that off because that's the problem.  So, you know.  Now, also in the "I'm not going to go into it in detail," I wanted to just say to Jungle Disk users, maybe there's hope, because there have been so many unhappy people with Jungle Disk.  They got bought by Rackspace, which is why Rackspace is the cloud service of choice for Jungle Disk, although it still works with Amazon and so forth.  But the support's been really lousy.  They recently changed their philosophy where it's no longer essentially free, the way it used to be, which really upset people.  People used to use it, for example, to create a private network to an unattended server, for example, so they would be able to get to that server.



Well, Jungle Disk, or rather Rackspace as parent, in the quest for more revenue, decided that they would only allow the nonpaid versions to interoperate between logged-on people.  So you can use it, for example, as it is used often, to set up a private little gaming network, in which case everybody would be logged onto their machines that are connected into this little Jungle Disk subnet across the Internet.  But you can no longer use it in its free version, the way you have always been able to use it, to hook to an unattended machine where you don't have somebody actively logged on and using the system.



Now, the ray of hope is that, at blog.jungledisk.com, for any holdout users of Jungle Disk, they had a "What the new year holds for Jungle Disk" entry.  There's a new CTO.  And apparently they sent out questionnaires to some subset of their users, and the questionnaires came back polarized.  There were people who were completely happy and wanted nothing more.  And on the other side there were people who probably feel about Jungle Disk the way we feel about PayPal.  I mean, they're only using it because they have to, because there's absolutely nothing else that they've found that does what they want.  So this was apparently a bit of a wakeup call, and they're promising that they're going to fix these problems.  They're going to be better with support, they're going to communicate more, and they're going to fix things.  So for what it's worth, people who are using Jungle Disk, it might get better.  And anyone who's interested can check out blog.jungledisk.com for the details.



And in my backlog of stuff to get to is a rather sobering analysis that an R&D company did of the silicon of a chip used in networking products where they discovered a hardware backdoor in the design.  We've talked about this.  We've touched on it a few times.  It is a worry.  Because there's obviously tension between, for example, the U.S. and China of various sorts.  And we're getting a lot of fabrication being done there.  And how do you know what's in the chip?  The chip's got legs, but it's got a lid on it, and it's incredibly complicated.  And you just can't look at it and know what the design is.  It takes a huge amount of effort to reverse engineer the design of a chip from looking at it.



Now, in the old days, microprocessors were reverse-engineered.  "Popping the lid" was something that was jargon in the industry, and it was the way designs got stolen.  But with this insane ramping up of complexity that we've had, it's just - that's vastly more difficult.  Yet the Los Alamos National Laboratory here in the United States just removed all of its Chinese network switches.  A Congressional Report found that Huawei, H-u-a-w-e-i...



LEO:  I think it's Huawei.  I think you pronounce it Huawei.  By the way, they had a massive booth at CES.



STEVE:  Were they waving American flags?



LEO:  Well, they dispute this.  Yeah, this is a while ago that the Commerce Department came out with this.  And it's reasonable.  But Huawei disputes it.



STEVE:  Yes.  So what the Congressional Report said was that the company had ties to the Chinese military and intelligence services.  They deny any connection to the military and say that their products are completely safe to use.  So who knows.  I will, as soon as I get to it, take us through the details of reverse-engineering the hardware, which did find a backdoor, so they are known to exist.  We don't know that this is an instance of it.  But it is something that we need to keep in mind.



LEO:  Yeah.  And if I were running Los Alamos Labs, where they make atomic weapons, I might be prudent.  I might act in terms of prudence.  It's the router that they're worried about, right, because who knows what code's in there.  Not just the chips.



STEVE:  Yeah.  Or they said switches.  And "switches" is sort of a generic term.



LEO:  They make phones, too, and I don't know, I mean, this was a pretty broad report.



STEVE:  Yeah.



LEO:  Anyway...



STEVE:  So I did ask for the tweeter who tweeted me a week ago or two weeks ago that he had come up with a cool synopsis page of my Twitter stream related to Security Now! podcasts.  So that when I say, oh, I just tweeted this link, for anyone who's listening, the observation was made in our last Q&A, it was like, well, Steve, that might have been a year ago, that I'm listening to Episode 206.  So that's a problem.  Anyway, so I created a shortcut.  It's bit.ly/sggrc, all lowercase, because bit.ly is deliberately case-sensitive so that it's able to encode more links in a short string.  So it's bit.ly/sggrc.  And it was Simon Paarlberg in Copenhagen who...



LEO:  It's amazing.



STEVE:  Yeah, isn't that great?



LEO:  Thank god for Scandinavian winters, that's all I can say [apps.simonpaarlberg.com/x/sn_twitter.html].



STEVE:  He called it a "hack," so I think he must have a bot which is just pulling the stream in.  I did see that it's always up to date.  So it has my latest tweets from yesterday in it at the top.  It is in reverse chronological order.  And so what I think he does is he, like, inserts a place marker for every Security Now! podcast and nicely formats it.  So anybody who is listening to a podcast, and I mention a tweet that has a link, you can go to bit.ly/sggrc, which I came up with that because that's the same as my Twitter handle, and scroll back and find it.



LEO:  Boy, if this is code, this is impressive.



STEVE:  That's very cool, Simon.  Thank you.



LEO:  It can't be code.  This is somebody - unless he's...



STEVE:  No, it's code because...



LEO:  How's he getting the time codes?



STEVE:  I'm sure that's all in the Twitter stream.



LEO:  Oh, I see.  I see what he's doing.  It's not the timecode into the podcast.  This is the tweet.



STEVE:  Right, right, right.



LEO:  I get it.  So he's just saying - oh, yeah.  I can see how he'd do this.  So he'd say, well, the week of January 1st through 8th, these are the tweets.



STEVE:  Exactly.



LEO:  Yeah, that had links on them.



STEVE:  And by the way, Elaine also replied, listening to the podcast as she is forced to do every week, that she has been putting - she's been expanding and putting the links in the show notes all along in her transcripts.  So they're also in the transcripts, for anyone who is looking.



And you're going to like this one, Leo.  Go to that next link before I mention it, although I also tweeted it, so you can find it right there in my Twitter stream.  Mark Thompson turned me on to this, and I thought it was really interesting.  If you dig down, you can see the chart of - okay.  I should, for people who aren't seeing the feed right there - but click on some of those languages, Leo, like click on Java, No. 2.



LEO:  So this is from TIOBE.com.



[www.tiobe.com/index.php/content/paperinfo/tpci/index.html]



STEVE:  Yes.



LEO:  And it is what?  It's a programming community index.



STEVE:  Yes.



LEO:  Yes, so Java.



STEVE:  And this in particular, this...



LEO:  Oh, it's how much it's used.



STEVE:  Well, it's languages.  It's the community's overall use of languages over time.



LEO:  So Java is declining.



STEVE:  And with some weird anomalies.  Like, look at that big notch.



LEO:  It stopped in 2004/5.  People really stopped - that has to be an artifact.



STEVE:  I think that's a reporting anomaly. 



LEO:  That has to be an artifact, yeah.



STEVE:  Yeah.  But it is on a straight-line decline.  Now scroll to the chart below.  And one of the really interesting things is Objective C, that very blue line at the bottom that takes off...



LEO:  Ooh, look at that take off.  iOS, baby.



STEVE:  Exactly why.  Exactly why.



LEO:  That's what iPhone apps are written in.  And starting in 2009 it really [acceleration sound].



STEVE:  Yup.  But No. 1, still top dog, is good old C.  It's sort of the high-level assembly language.



LEO:  Plain C.  Not Objective C.  Not C++.  Not C#.



STEVE:  Yes, Plain C.



LEO:  Kernighan and Ritchie C.



STEVE:  Yup, exactly.



LEO:  That's neat.



STEVE:  "The C Programming Language," one of my favorite texts.



LEO:  I love C.  It is one of the best programming books ever written.  It's about this thick, like a quarter of an inch.  And it's beautiful.  It's elegant.  First high-level language I ever learned, and I'm still...



STEVE:  It's a long URL, for anyone interested.  I did tweet it, and a lot of people fed back that they were liking poking around in those charts.  So if you just check my Twitter stream, Twitter.com/SGgrc, it's not far back at this moment.  Or bit.ly/sggrc you can find the index, thanks to Simon, of everything.  And anyway, it's called the TIOBE Index.



LEO:  They say they use search engines.  Google, Bing, Yahoo!, Wikipedia, Amazon, YouTube, and Baidu are used to calculate the ratings.  They're counting lines of code.  Lines of code.  Is that amazing or what?



STEVE:  Wow.



LEO:  And they make the point that you should probably, if you're a programmer, be paying attention to this because these are skills that you'd want.  Ruby, by the way, is No. 11 on this, right at the bottom on the Top 10.



STEVE:  Well, but go to the second chart.  Way down is the ones that didn't make it onto that chart.  There's the real dogs.  I mean, Logo is still there.



LEO:  PL/SQL, Transact, SAS, COBOL, Fortran, R; Scheme, which is a great language, and I wish it were more used; ABAP, which must be some specialty language; Logo, Prolog, Erlang, Haskell, Scala.  These are just too hard for most people.  Q, D, RPG...



STEVE:  Or they're just weird.  They're, like, declarative languages or, like, really bizarre...



LEO:  APL requires a special keyboard.



STEVE:  Can't even type APL.



LEO:  Common Lisp, ActionScript, way down there.  Awk, F.  But these are, yeah, some of these are special.  I mean, Awk and Tcl, you know...



STEVE:  ActionScript is still there, huh?  Wow.



LEO:  Yeah, yeah.  No. 43 on the Top 50.  And then, by the way, the next 50:  FoxPro, Algol...



STEVE:  I didn't see that.



LEO:  Oh, yeah, there's the bottom 50, 51 to 100.



STEVE:  Oh, my god.



LEO:  PowerShell, SPARK, VBScript, WebDNA, xBase, X10.  Some of these, for instance VBScript, probably you're not going to show up on a Google search because it's all internal code.  And so that's probably misreported, heavily misreported.  But who knows.  LabVIEW's in there.  Emac.  Mathematica.



STEVE:  So Ars Technica did a nice explanation of what happened at the beginning of the year with iOS 6's Do Not Disturb bug.



[arstechnica.com/apple/2013/01/ask-ars-why-will-apples-do-not-disturb-bug-fixitself-next-week]



LEO:  Yeah, wasn't that great?  I want you to explain this because I don't know what the difference is between four capital Y's and four lowercase Y's.



STEVE:  Yeah, and I just want to...



LEO:  Would you 'splain that to me, Lucy?  'Cause that's what happened.



STEVE:  If you really care, I could tell you next week.  Because I just sort of looked at it, and I just shrugged.  It's like, eh, okay.



LEO:  Well, the short form is that they used an ISO numbering scheme which has some known bugs in it.  There's a Gregorian numbering scheme, and they used the ISO scheme without testing for bugs, the bugs that are known, well known.  And everybody else does.  Most people use the ISO scheme.  But people know that, oh, well, yeah, in the first week of the year you've got a problem.  Week 1, you've got a problem.  Or Week 0, maybe it's Week 0.



STEVE:  Wow.



LEO:  Yeah.  It's really - it's very interesting.



STEVE:  Yup, good old boundary conditions will get you every time.



LEO:  Boundary conditions, baby.  You guessed it, really.  I think you picked it up last week.



STEVE:  Well, that's essentially what...



LEO:  It always is, yeah.



STEVE:  Yeah, I do all my math - because I've got all kinds of date stuff on my server, and I, of course, wrote it all in assembler.  I have really careful linearization of calendar dates from 1900, I think it is.  And then I just base everything on a simple linear number.  And it's like, okay, pretty easy.  So you divide by seven or do mod seven, and that tells you what day of the week it is.  So not that difficult, folks.  But I guess if you're using canned packages and not doing it with taking the responsibility that you really have to when you use a canned package or a standard with bugs, then that's what you're going to get.



A little quick update on the TrebleShooter dog training project.  We've got lots of people building them, Leo.  I'm getting where they're posting pictures.  We have a topic in the Google group, the Portable Sound Blaster Google group, where people are posting the pictures of their construction projects, building sort of flashlight form factor devices.  We have two designs.  One is the one I will end up making.  It's a fixed-frequency, incredibly low parts count, no microcode or firmware or anything required, that costs about $10 and just turned out beautifully.  I never expected we were going to get something like this when I began.  But I also want to explore a microprocessor-based version, just to sort of - just to have it before I switch my attention from this to something else.  So I'm still working on that.



Many people are saying, hey, where are the designs?  Where is it?  I want to build one.  And also I'm getting tweets saying that the GRC pages are blank except for the introduction page.  And it's like, yes.  This is still very much in flux.  So I would recommend that it's probably easiest if people just wait.  The Portable Sound Blaster group in Google is very active.  But those groups are so awful that it's just impossible to find anything there.  Do you know that Google can't even search them, Leo?  It's unbelievable.  They're hosted by Google, and you can only search the subject line.  You can't search the content of the posts.  And it's like, okay, crazy.



So if anyone is interested, there's a ZIP file, a ZIP archive that I do maintain at GRC, only because you can't maintain such things easily in the Google groups.  And that's GRC.com/tqc, as in The Quiet Canine.  So GRC.com/tqc/latestdesigns.zip.  And I'm updating that as I go.  And that's got a collection of resources for the project, the schematics and PDFs and even a big PNG file of the source code for people who just kind of are curious and want to scroll down through that to see what it looks like.



LEO:  You're using Google Communities now.  You're not still on...



STEVE:  No.  Turns out - no, no, Communities do even less, Leo.



LEO:  I don't know why they wouldn't search into the Google groups.



STEVE:  Isn't that amazing?  Yeah.  Many people were posting - the reason I did this, the static file at GRC, is that people were saying, hey, I can't find the version 2.2.2 design.  And it's like, I'm referring to it all over the place.  But sure enough, when you try to search, it doesn't show it to you.



LEO:  They do say that - you're using the new Google Groups; right?



STEVE:  Oh, I am using the new Google Groups.  And I did go look, I did go check out the whatever it is, the other thing, the new thing.  But it's even less.



LEO:  Communities, yeah, this new G+ Communities.



STEVE:  Communities.  It's even less than this is.  So anyway, what - well, anyway, so I won't go into any more details.  But we're having a lot of fun.  It's coming along.  And I will have some results pretty soon.



LEO:  I'm going to mention something before we go on that I want everybody to know, is if you watch this show on YouTube - I know not many do, but some do.  Most people want to download, and they what a transcript and so forth.  But we do make all of our shows available on YouTube.  And as of this week we've switched everything over on YouTube.  So we have a whole new - I'm very proud of what happened.  Our engineering staff and Russell Tammany and Spiro and everybody got together, and we've written code to automate the encoding of audio and video.  So editors finish, they drag a mezzanine file, and all this stuff happens automatically.  It gets posted automatically.  Which is why there've been glitches from time to time.



But now that that code is - and by the way, that means 720p versions are also available for all shows for download now.  But also it means that we've moved the YouTube channels.  Previously we had a single YouTube channel, YouTube.com/twit, for all shows.  That really is kind of a nutty way to do it because, if you subscribed, you got every one of the 25 shows we produce.  Not really useful.  So now what we've done is, if you go to YouTube.com/twit, you'll see on the right there are new TWiT channels for all the shows.  Unfortunately you can't get them all on there.  But, well, you can.  If you push "More," you'll see all the shows.  And I don't see Security Now! on here yet.  Maybe because the first one will be today.  So I think the channel is, and let's just check, twitsecuritynow.  We were able to secure channel names for all the shows.  Yeah, I think this is going to be where it'll be once the - this episode will be the first on there.  So twitsecuritynow will be the channel, youtube.com/twitsecuritynow.  We couldn't get plain old securitynow.  Somebody else has that.  And so, if you are among the few who care about this, just be aware, and we'll put a posting on our YouTube channel and let people know you should now go to a new channel.  But that way you can say, I want to subscribe to the YouTube Security Now! feed and just get Security Now!.  We needed to do this.  You go show by show.



[Note:  www.youtube.com/securitynow also works]



STEVE:  Nice.



LEO:  Yeah.  To me, my favorite way for you to get the show is to subscribe to the downloads.  But I want to make it easy for everybody.  All right.



STEVE:  So this is completely random.  And so just, you know, completely random.  But for years, people whose opinion I respect have been saying, hey, Steve, are you watching "The Good Wife"?  Now...



LEO:  That's not the first show you would jump to in TV Guide.



STEVE:  Precisely.  That's the problem.  Are you watching "The Bedwetters"?  No, I'm not.  And I realized, if it were named "Cyclotron Crash Hammer," I would have never missed an episode.



LEO:  But is it about a cyclotron clash hammer?  Or is it about a good wife?



STEVE:  Well, I kind of thought, how good can it possibly be if it's called "The Good Wife"?  Really, I mean, it's just not going to get my attention.  "Justified" just started last night was the next season, which is on FX, is, whoo, for those who watch "Justified," you know what I mean.  It's wonderful.  But "The Good Wife."  And so it was a little slow over the holidays.  And Sue, who's been with me for, I don't know, 24 years, every so often she'll say, "Hey, have you ever tried, have you ever watched that?"  Anyway, it's fantastic.  That's all I wanted to say.  Just to share something that I find when I do, like the way I found "Homeland."



LEO:  Love "Homeland."  And I finished it.  But, by the way, it's not universal, the love for "Homeland."



STEVE:  I know.



LEO:  And some people are a little tired of Claire Danes's cry face.  And I admit, by the end of Season 2, I was a little tired of it, too.  But it's still a great show.



STEVE:  So "The Good Wife" is now in its fourth year.  It's about halfway through its fourth season.  Up to the end of the third season it had been nominated for 21 Primetime Emmy awards.  Julianna Margulies, who's one of the stars, she of course was one of the - really came to fame as the nurse, one of the head nurses in "E.R.," which Michael Creighton of course produced.  The executive producers of "The Good Wife" are the Scotts, Ridley Scott and Tony Scott.



LEO:  Okay, that's a good start.



STEVE:  I know.



LEO:  That's encouraging.



STEVE:  I know.



LEO:  Creators of "Alien" and "Aliens."



STEVE:  Exactly.  She got a Primetime Emmy, a Golden Globe, two Screen Actors Guild awards, and a TCA award for individual achievement in this series.  One of the other actors got another Primetime Emmy.  And a third actor or actress got a Primetime Emmy.  So it's won a Peabody Award, twice nominated...



LEO:  But, Steve, is it science fiction?



STEVE:  No.  It's a courtroom.



LEO:  Oh, it's a courtroom.  Okay.



STEVE:  You wouldn't think so.  You have "The Good Wife," like what - I'm not going to get myself into any more trouble.



LEO:  Good thinking.



STEVE:  So why do I like it?  First of all, I do enjoy the courtroom interaction.  I've always found, obviously, that's a genre that appeals to a slice of the viewership in the country because courtroom dramas have had long-running success over the years.  But it's very well written.  It's very well acted.  All the characters are distinct and interesting.  And so I'm not saying it's going to curl your toes.  It's not the best thing that I've ever found.  But I'm really glad I finally - I got the first three seasons on disk, and I'm going through them.  And it took maybe eight episodes.  I mean, I liked it right off the bat.  But it's like, okay, where is this going?  And it's got the classic long cross series story arc running in the background with episodic things happening that develop the characters and move them around like chess pieces on the chessboard.  So anyway, if other people have told you about it, and you haven't made the move, now you've heard it yet again from one other person.  And I like it.  Totally random.



LEO:  I have to point out something.  And it's one of those things that these things happen so gradually, nobody notices.  But we have really changed our TV viewing.  You could not have said this five years ago.  I mean, maybe you could.  You could say get the DVDs, I guess.  But I would say, at least everybody in our set, very few people are watching live television anymore.  Tune in Thursday night for "The Good Wife" on ABC or something or whatever it is.  In fact, I don't even know or care what network it's on.  Increasingly, we're watching shows on download, on demand, or on DVD.  And, much more importantly, not one episode at a time, but like a box of candy that you just snarf up.



STEVE:  Exactly the way you absorbed the first two seasons of "Homeland."



LEO:  Yeah.  And I have to say it's a much better, much better experience.  There's no advertising.  But also there's not this long...



STEVE:  Continuity.



LEO:  Yeah, continuity is much better.  Now, I wonder, I'm very interested if people who create these shows are going to kind of think about that and change, because I think until now you really assumed, well, there's going to be six days between these episodes.  And they really spend a long time still on "Previously, on 'The Good Wife.'"  I don't know if they do it on...



STEVE:  Actually, none of that.



LEO:  Not on the DVD, maybe.



STEVE:  And I could not watch "24" because every single hour ended with, like, [gasp], you know, and it's like...



LEO:  So much better to watch it in one swell foop.



STEVE:  Yes.  Yes.



LEO:  And I suspect that that - now, maybe it's just us because we're nerds, and we have the means, and we have the technology.  But I suspect there is a sea change in the way people consumer episodic television.



STEVE:  Well, I do know that I asked my sister, who's got two - now my niece and nephew, her kids, are in college.  But they were in high school.  And I said, "What TV do Evan and Jenna watch?"  And Nancy said, "Oh, they don't watch TV.  They watch everything on their laptop."



LEO:  They watch YouTube.  Yeah, they watch YouTube.  My kids watch YouTube.  That's it.  Very interesting.  It's great.  I love it.  I love being - because you and I like change.  Well, I don't know about you.  You're kind of a fuddy-duddy.



STEVE:  Yeah, I am.



LEO:  But most people love technology.



STEVE:  I'm not denying it.



LEO:  You don't embrace the new.



STEVE:  I've had the same thing for breakfast every single day for the last six months.  I'm quite happy with it.



LEO:  There were several years where Steve had a ham sandwich every day for lunch, and that was it.  But I think those who like change are in hog heaven because the world is changing fast.



STEVE:  Well, yeah, although there is a problem with distraction because that's one of the things that all these possibilities bring to us is, oh, my goodness, distraction.



LEO:  I did some research because I was speaking at the New Media Expo, the podcast show, this week.  And we contacted, on Monday I contacted Brian Ellis over at iTunes to say how many podcasts are there?  250,000.



STEVE:  Ooh.



LEO:  Not episodes.



STEVE:  Series.



LEO:  Different series.  A quarter of a million, in 140 different countries and 50 languages.



STEVE:  Do you remember the days when we used to be - we would look on iTunes to see, not where your podcasts were, but how many were simultaneously in the Top 10.



LEO:  Those days are gone.



STEVE:  I think it was Top 15.



LEO:  Yeah.  Those days is gone.  Which is fine.  I'm happy.  I'm thrilled about it.  But you also remember people were kind of going crazy about the idea of a 500-channel cable universe.  Quarter of a million channels.  Try that.  Wow.  All right.  We shall move on and talk more about security.



STEVE:  So I have a nice note from Todd Sankey in Vancouver, Canada, who did something.  This is less a testimonial than a tip to serious diehard SpinRite fans.  He said, "Hi, Steve.  With all due respect" - and I'm not quite sure what this reference is, so maybe you can help me out here, Leo.  "With all due respect to Jack Black and 'Kung Fu Panda'..."



LEO:  Okay.  You don't have children.



STEVE:  "...this combination really is fantastic."



LEO:  So "Kung Fu Panda" is a series of movies, animated movies about a panda that is good at kung fu.  I think there have been two, maybe three.  And Jack Black plays the voice.  Okay.  There you go.



STEVE:  Ah.  Got it.



LEO:  I should [indiscernible] on the air.



STEVE:  Oh.  So he's saying, "With all due respect to Jack Black and 'Kung Fu Panda,' this combination really is fantastic."  So apparently he is a fan of Jack Black voiceovers of the panda?



LEO:  He loves it, yes.



STEVE:  Ah.  Okay.  And so is what he has figured out how to do with SpinRite.



LEO:  Okay.



STEVE:  "I'm a fairly new SpinRite owner, learning about it after listening to your Security Now! podcast, great product, great podcast, thanks.  I don't use my cherished copy of SpinRite very often, but I have a small workspace, and my wife 'resists'," he has in quotes, "'resists' letting me clutter it up with spare machines.  I just have my one main work machine.  So when I have needed to run SpinRite, it's fairly intrusive because I lose access to my main machine."  Since of course SpinRite runs, you boot SpinRite, and it is the OS while it's running.



"Did you know it is possible to configure a virtual box, VM, to have raw access to a physical disk drive?  Once I learned this, I had to give it a try with SpinRite.  The golden goal?  SpinRite running in a VM with full access to all its magic and simultaneous full access to all of my main machine, and it just works.  It takes a little bit of work because you need to work directly with command line utilities as the functions needed are not exposed in the VirtualBox GUI.  But VirtualBox is well documented, and the few steps are really very straightforward.  So I write this to you from my main machine as my SpinRite VM grinds away on a reluctant eSATA drive that I need to refresh to get my PVR working again.  Please share as you see fit, but I find this combo really useful.  Thanks.  Todd."  And thanks for the tip, Todd.  Very cool.



LEO:  Yeah, good idea.



STEVE:  I know that we'll have some listeners who'll go, oh, my god, that's perfect.



So, WidgetJacking.  Everyone who's been listening for a while will remember, and you already refreshed everyone's memory, Leo, about Firesheep.  Firesheep was an add-on for Firefox which made it embarrassingly simple to hijack people's social networking logons in any open public WiFi unencrypted hotspot.  This was only a few years ago, when Facebook was not encrypted, Twitter was not encrypted, LinkedIn was not encrypted, Google was not encrypted, and so forth.  And the mechanism of logging on is that you establish your authentication over a secure connection, but then all websites would then drop you, would give your browser a cookie and then switch you back to non-HTTPS, back to a regular HTTP, unencrypted connection.



The problem with that is that, because of the session granularity that browsers have, that is, when a browser makes a request, it's just - it's a request coming into the server in the sky, like any other request anywhere.  And but we want to create a persistent relationship with the server and ourselves as we move around the website, as we do things, whatever it is, after logging on and authenticating ourselves.  So that's done by having every single request send back the cookie that we were given when we were granted access and prove that we were who we say we are.  So that token is our unique identity.



The problem is, and what Firesheep really exposed and turned the pressure up on these companies and essentially forced them to go HTTPS everywhere, or all the time, was that all of those roamings around Facebook were sending that cookie that was the person, it was their identity for the moment, for the session. It was sending it through the air, over the WiFi connection, in the clear.  So Firesheep grabbed that, parsed all of the - it operated in so-called "promiscuous mode" with its WiFi radio, which is where, rather than the WiFi radio only receiving traffic meant for it, it would receive all traffic.



So it was seeing everything everyone was transmitting from their laptops to the access point.  And it was looking at it, parsing it, finding out whether it was Facebook or LinkedIn or any of the growing number of sites, social networking sites and others, that it understood; and, if so, it would grab the cookie in the request header.  And then it would go to the page, get the person's picture, and then stick it in a thumbnail in a little toolbar down the side.  So you just turn this thing on at Starbucks, and it starts going bup bup bup bup bup bup bup, and people's faces are appearing, and you're looking around you, saying, oh, there he is over there.  And then double-clicking on it allows you to impersonate him.



So this was a huge problem.  And as you reminded us, I celebrated it because this was going on all the time anyway, and there was no way that it was going to be foreclosed on unless it was, like, really made to be a problem, so that the companies would go through the burdensome process of changing all their systems over so that they can be HTTPS, that is to say, SSL connections all the time.  So we're more or less there.



Now, a security researcher named Brian Kennish gave a talk, a presentation at DEFCON about a year and a half ago, DEFCON 2011, on the prevalence and consequences of social widgets.  He was noticing that widgets were just exploding all over the Internet.  I mean, like Facebook's Like button, for example, which is, you go to sites now, and they're just lined up in a row.  I sometimes am a little bit bemused that we're all supposed to recognize all of these little icons because it doesn't say Twitter and Facebook and Google.  It's just they're little mini icon buttons.  And look at the level of identity that has been established among these things.  It's sort of breathtaking.



So back then, so this is a year and a half ago, widgets from Facebook.com, that domain, were then, and it's certainly more so now, found on 33 percent, so one third of the top 1,000 sites.  Google.com had its presence, its widgets on 25 percent of the top 1,000, and Twitter on 20.  And certainly those numbers are bigger today.  And there's a neat site, BuiltWith, that I think we've talked about before.  These guys monitor the technologies behind the web pages that we see, what are the technologies that websites are built with.  And you can query their data, which is massive, in all kinds of ways.



Brian did this, to discover that Facebook Like buttons - and again, a year and a half ago - are up 63 percent in popularity year over year across the top 10,000 sites.  Google +1 buttons were up, a year and a half ago, year over year 33 percent.  So that's growth.  And Twitter Tweet buttons, 35 percent growth.  Now, here's the problem.  Facebook deliberately used Facebook.com to host their widgets.  Why?  Because their members' browsers carry Facebook session cookies which identify them.  And even if the cookie is no longer fresh, so that if you went to Facebook it would say you must log in, the cookie may have expired, but it's present.  So it knows who you were, even if it's not sure who you are.



Well, as we know, browser cookies are stored by domain and sent by domain.  Which is to say that, if your browser asks Facebook.com for anything - a page, a picture, the image of the button, the social networking button, your browser identifies itself.  It sees, oh, I've got cookies that were issued to me once by Facebook.com.  I'm going to give them back.  That's what browsers do.  That's the essence of our ability to maintain a stateful relationship with a browser is that every single request sends back the cookies that the browser has.



So what that means is that the social networking sites are sort of the next generation of privacy concern.  It used to be, and we've discussed this often, that the advertisers, the so-called "advertising networks" like DoubleClick, they were a concern because their prevalence across the Internet meant that your browser established an unwitting relationship with them because they would give you a cookie.  If you didn't give one to them, they would give one to you, and then henceforth you would give it back to them every time you pulled an ad on any website you went to on the Internet.  And so thus that gave way to this whole tracking industry that has upset people to varying degrees.



Well, this has now changed sort of - okay.  That's all still in place.  This is why Google bought DoubleClick is because it generates revenue, apparently from this information aggregation.  Facebook, and other social networking sites, is even in a stronger position because the argument used to be that, well, DoubleClick doesn't know who you are.  They just know you're browser 39264783, and you've gone to these various places.  We can argue that Facebook, on the other hand, knows a lot about you.  I mean, it knows all kinds of things about you.  In fact, it's becoming controversial how much of themselves people are putting into Facebook.  So Facebook has all of this volunteered information and networked information.  And then the 'Net has become littered with their Like buttons.  So every time any Facebook user goes to any website that has a Like button, Facebook knows.  So I'm not judging it, I'm just saying this is what's happening.



But that's the privacy side.  There's a security side.  And it's bad.  The reason is these things are still not HTTPS.  The widgets, the social networking widgets, Like buttons and +1 buttons and Tweet buttons and so forth, even though when you're using Facebook with HTTPS everywhere, all the time, turn it on, that's your use, your first-person use of Facebook, which Facebook is now enforcing as being over SSL.  But other websites that host the Facebook Like button have no such constraint.  Even on their secure pages, they may be HTTPS all the time, always secure.  But their assets, the page assets, the images for these buttons are more often than not simply HTTP because that works better.  They're guaranteed of it working.  They don't have to wonder if it will or will not work.  HTTP, the lower common denominator, always works.



So if you are back at Starbucks, and you are a Facebook user, and you are now not using Facebook because now you're protected by Facebook, if you've got SSL on and always secure, Facebook is protecting you.  But if you then go anywhere else and encounter a Like button, your session cookie is in the clear once again.



LEO:  So what does that mean?  That somebody can impersonate - well, I guess that's what you're going to talk about next.



STEVE:  Yes.  Well, yes.  The next step.  We are right back to where - almost worse than we were with Firesheep because Firesheep was only intercepting your first-party interactions with the target site, and seeing those.  Now, thanks to the fact that these social networking sites have their assets spread, just like ads are, they are essentially little identity ads, they're spread all over the Internet, and they're not secure.  So you can go to one page, for example, TechCrunch, and it's got all those little icons lined up.  Visiting that one page, every cookie that you have identifying you with any and all of those sites that you participate in goes out, in a series of queries, to retrieve those images for the buttons on that page when you visit that page.



So this is known as WidgetJacking.  And it exists.  So it's arguably more of a problem even than Firesheep showed us with first-party hijacking of sessions, so-called "sidejacking," because here, one page that's not related to any of the pages that are being compromised through this identity leakage, those cookies are going out with those widgets.



So what do we do about it?  Well, it turns out there's a wonderful solution, much as there was with Firesheep.  That, of course, required people to turn on security.  There is an open source offering called Disconnect, and the site is Disconnect.me, as in Disconnect Me, obviously.  It is open source, free, and cross-platform - Firefox, Chrome, and Safari.  Brian Kennish, who I referred to earlier, he was the guy who did the 2011 talk at DEFCON about this, get a load of where he used to work.  He was an engineer for DoubleClick.



LEO:  So he knows all about it.



STEVE:  He knows all about it.  Brian is the cofounder and original developer of the first version of Disconnect a couple years ago, which is why I've had my eye on this for a while.  In his own biography he wrote:  "Brian is the original developer of Disconnect.  He spent many years tracking users as an engineer for DoubleClick, then Google, but now, like George in Episode 86 of 'Seinfeld,' is doing the complete opposite."



And in a blog posting of his on October 24, 2011, he posted: "Exactly one year ago I noticed a virus infecting the web.  Facebook widgets, mostly Like buttons, were popping up everywhere - alongside the articles I read, the music I listened to, the videos I watched.  Worse, Facebook was, and is, serving these widgets from the same domain, Facebook.com, as their login cookies.  Being a tracking aficionado," and he says, "(I developed DoubleClick's mobile ad server and the kludgey precursor to Google's AdWords API)" - so this guy knows his stuff.



He said:  "I recognized Facebook's strategy, collecting user browsing habits to sell to advertisers.  That night I spent two hours writing 53 lines of JSON and JavaScript, and then two more hours making a Ghostbusters-inspired logo for it, to inoculate my browser.  I called the Chrome extension, which works by stopping the flow of personal data from third-party sites to Facebook, Facebook Disconnect.  I had done side projects before and included another extension that had 37 users.  But I was thinking big this time.  I imagined Facebook Disconnect could have 50 users.



"I was off by three orders of magnitude and change.  Today Facebook Disconnect" - and remember, this is October 24, 2011.  He's saying:  "Today, Facebook Disconnect has over 150,000 weekly users, and the extension has been Chrome-only, until now.  To celebrate Facebook Disconnect's birthday, we've created versions for Firefox and Safari and open-sourced the code as usual."  And there's links to it.  It's over on GitHub.



Then, in a much more recent blog posting, end of April 2012, they are celebrating having 511,900 active users across a seven-day period.  What is significant, the reason I'm telling everyone this, is it is a cool add-on:  lightweight, behaves itself, installs easily into Firefox, Safari, or Chrome.  And it's very quiet, a little button on the toolbar.  And if you're curious, you can see how much blocking it has done.  What Disconnect does is disconnect you from the tracking that the major sites that it understands are doing.  And I'm looking at mine right now.  Supports currently Facebook, Google, LinkedIn, Twitter, and Yahoo!.



And but the reason that I finally decided I needed to tell everyone about this is a couple months ago, November 2012, they added WiFi security to Disconnect, meaning that their technology is now able to prevent widgetjacking, which I just described.  They're able to see that the subsidiary assets being pulled by a browser, being requested by a browser over a nonsecure channel, can be secured.  And so on the fly they intercept, before they leave the user's computer, they convert them from HTTP to HTTPS.  So where you would be surfing with any of these browsers at Starbucks and be exposing your Facebook cookies, if you went to any page that had a Facebook Like button on it, all you have to do is install Disconnect in that browser, and it will make the browser's same query for the button.  Everything works identically.  It'll just coerce it into HTTPS, and then your Facebook cookies are as secure as the cookies for the main site you're visiting that was inadvertently leaking this information into the air.



So I've been running it for a while.  I am very impressed.  It does a very nice job of protecting.  And so if you're someone whose machine never leaves the house, then it's like, okay, not such a big deal.  I mean, it is the case that unsecured data is going through the Internet as opposed to being wrapped by security.  And our listeners who are generally more security conscious would probably just as soon have that.  And why not break this tracking by the major social sites also, so that they're no longer aggregating, as he explains in his first posting.  So it's free.  It's open source.  It's Disconnect.Me.  And click one button, and it puts the shields up for you.



LEO:  We should say that it's kind of a manual process; right?  I mean, you have to go through one by one your stuff; right?



STEVE:  No.  No.  No.



LEO:  Oh.



STEVE:  I installed it.



LEO:  Oh, he has updated it.  Aha.  I see now.  It's a plugin.



STEVE:  Oh, yeah.  Yeah.  He has it available in three flavors.  I'm not sure why.  I think it's mostly historical.  It's because he did the Facebook Disconnect by itself, and then he, like, supported the different platforms, then did one for Google and did one for Twitter.  But it's all in one now.  I installed this one thing.  It installed seamlessly in Firefox, and the secure WiFi, it's like a little checkbox in the menu, was turned on for me by default because why wouldn't you want it?  And they have some very cool adaptive technology.  If you try to use HTTP Everywhere, that plugin that attempts to force everything to be SSL, unfortunately that can break pages.  And these guys understand that you can't just do that.  You can't use brute force, force it on.  So if it encounters things that fail, it falls back.  It can't lock it down, so it just says, okay, well, we're going to let the page continue functioning.  We tried to make this secure, but were unable to.  And the number of sites that it knows about is growing over time.



LEO:  Interesting.



STEVE:  So, yeah, it's just - it's an install-and-forget little goody.  Unlike NoScript, which is in your face and you're needing to mess around with, this thing just works.



LEO:  How about Ghostery and things like that?  This doesn't replace them because Ghostery's more about information.



STEVE:  Correct.



LEO:  But it might be a nice adjunct.



STEVE:  Yeah.  Ghostery is great because it just gives you - I ran Ghostery for a while.  Then I got tired of the window blocking the page that I was on.



LEO:  Right.  It's more informational than anything else.



STEVE:  Yeah.  It's a really nice wakeup call to show you just exactly how much of this is going on.



LEO:  And in my defense, by the way, we use the Facebook Like button because that's a great way for people to share what they're, I mean, we have social sharing on all of our stuff.



STEVE:  Right.  And this isn't breaking that, Leo.



LEO:  Right, it's making it better.



STEVE:  It's making sure that your use of it is secure for the people who visit your page and encounter that button.



LEO:  Right.  Cool.  Does it turn on SSL?  I mean, what is it doing?



STEVE:  Yeah, it turns on SSL.



LEO:  So if I don't have SSL on my site, is that when it steps back and says, okay, well...



STEVE:  No, because the SSL on your site is incoming...



LEO:  Oh, it turns on Facebook's SSL.



STEVE:  Correct.



LEO:  Got it.



STEVE:  Yes.  All it simply does is it coerces the non-secure outgoing queries to be secure.



LEO:  I got it.  You said that.  I just didn't understand.  I suddenly started thinking about myself, you see, as a purveyor instead of a user.  All right.  Cool.  Very nice stuff, as always.  A great way to keep track of this stuff is to listen to this show every week, of course.  We do it 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 1900 UTC at TWiT.tv on Wednesdays.  But if you can't watch live, or listen live, by all means subscribe.  In fact, you should anyway, so that you have every episode.  There's 386 so far.  This is our 386 episode.



STEVE:  I know.  I saw that, too.  I saw it, just a little smile to myself.  I remember when I was coding to that chip.



LEO:  [Codger voice] Yeah, I remember the 386.  Remember the DX?



STEVE:  Yup.



LEO:  Remember the SX?  They just disabled the numeric processor.



STEVE:  And the DX2 that followed.  I mean, god, remember, we were, like, living on megahertz.



LEO:  Oh, I thought - oh, man.



STEVE:  I can get 9MHz.



LEO:  The 386 was how fast?  It wasn't till we got Pentium that we got, like, into the double digits, was it?  I guess we were at double digits.  I remember Pentium 90.



STEVE:  I remember 33MHz and then 66.



LEO:  33, that's it.  And the DX2 was 66.  Boy, you have a good memory.  That's exactly right, yeah.  Anyway, what was I saying?  Oh, yes.  Sidetracked.



STEVE:  We were trying to wind this down.



LEO:  No, no, I just, you know, start talking about 386's, and, well, you know what happens.



STEVE:  Yeah.



LEO:  You can get copies of this from Steve's site.  He has 16Kb audio, the smallest we make available, and text transcriptions at GRC.com.  While you're there, you might want to pick up SpinRite, the world's finest hard drive maintenance and recovery utility.



Now, the people in the chatroom were asking - because we had that SpinRite letter from a user who was using it in a virtual machine.



STEVE:  Yeah.



LEO:  Okay?  Wasn't there an issue maybe that maybe you'd get some rights to that disk while you're SpinRiting it or something?



STEVE:  No, no, no.  What happens is, in order for you to make direct physical access available, it takes it away from the rest of the system.  So that drive disappears from outside the virtual machine and is only available inside the virtual machine.



LEO:  Good.  So nothing to worry about there.



STEVE:  Right.



LEO:  I knew you wouldn't recommend such a use unless it were safe.



STEVE:  No.  And I've heard about this for a while.  People have been doing this on various of the virtual platforms.  But I just ran across this nicely assembled explanation.  I thought, oh, that's a perfect thing to share.



LEO:  Good.  I think you - there were a number of people saying, wait a minute, I thought you couldn't do that.  Yes, you can.



STEVE:  Yeah.



LEO:  So that's the kind of thing you find out when you go to GRC.com.  You get SpinRite, you get the freebies, you get the stuff.  You can also follow the Steve on Twitter at SGgrc, so you keep up with all his links.  But then we also have that bit.ly/sggrc.  All lowercase?



STEVE:  Yup.



LEO:  So people can just - this was - thank you, by the way, to our Danish listener who made that available - follow your [indiscernible] tweets.  And I guess that's going to be up to date automatically.  And then of course we make higher quality audio and video available at TWiT.tv.  But best way to do it is subscribe at iTunes.  Do you make a podcast feed of the 16Kb version?



STEVE:  No.



LEO:  So you just can download that.



STEVE:  People just go there and get it.



LEO:  That's for you primitive types, still using 386's.  But for the rest of you, subscribe in iTunes or Zune or whatever, DoggCatcher, Instacast, whatever you use to get podcasts, and you'll get every week.  You won't miss a single episode.  We will see you back here next [Wednesday], Steve.



STEVE:  Thanks, Leo.



LEO:  Oh, it's a Q&A segment.  GRC.com/feedback, if anything you've heard on this show has stimulated your thought process.



STEVE:  Yes, by all means, send a note, and I will go through the mailbag the day before, and probably also the morning before, and pull a bunch of goodies.  So thanks, everybody.



LEO:  Thank you, Steve.  Somebody in the chatroom is saying, does TWiT benefit more if we subscribe to any particular source?  No.  As long as you are downloading - the only version that we don't count is Steve's 16Kb version.  But if you're downloading a version of the show...



STEVE:  Those are being counted, Leo.



LEO:  Oh, yeah, that's right, we added those to the counts, didn't we.



STEVE:  Yup.  I'm bouncing through Podtrac so you get credit for those.



LEO:  Thank you.  Bless you.  Bless you, bless you.  So, yeah, as long as - and you can tell because, yeah, you'll see a Podtrac redirect.  But if you subscribe to any of the XML feeds, that will also be counted.  Any download or subscription counts.  And it's a great way to let us know that you like this show.  This show, by the way, one of the few that is growing all the time.



STEVE:  That's neat.



LEO:  More and more nerds.  I think the show is highly shared among security experts.



STEVE:  We are anabolic rather than catabolic.



LEO:  That's what I say.



STEVE:  [Laughing]



LEO:  Steve, thanks so much.  We'll see you next [Wednesday].



STEVE:  Thanks, Leo.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.


GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#387	

DATE:		January 16, 2013

TITLE:		Listener Feedback #159

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-387.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here, our Explainer in Chief.  He'll talk about the Oracle Java fiasco and a whole lot more, plus answer 10 of your questions, with a bonus 11th question.  It's all up next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 387, recorded January 16th, 2013:  Your questions, Steve's answers, #159.



It's time for Security Now!, the show that protects you and your loved ones and your privacy online with this man right here.  He's the Explainer in Chief, Mr. Steve Gibson.  I call him that because he's so good at taking technical difficult subjects and making them crystal clear.  And he's done that on many, many shows.  Today, though, this is a Q&A.  So we'll get lots of little bits of crystal clear.  Hello, Steve.



STEVE GIBSON:  And a nice update on the happenings of the week.  We've had an event-filled, over in the security industry, week that we'll catch everybody up with.



LEO:  No kidding.



STEVE:  And there was an interesting tweet that I got from a listener and SpinRite owner whose Mac was saved, his SSD on his Mac was saved.  And so I just sort of retweeted that, and a whole bunch of other people said, wait a minute, I thought you couldn't use SpinRite on an SSD and blah blah blah.  So I thought I'd take a little bit of time to explain the problem.  And in fact I sent you a picture that you can share at the appropriate time, showing a very distressed-looking solid-state drive.  It's no longer the case that solid-state drives are as perfect as we would think, and I'll explain why that is also the case.



LEO:  Excellent, Mr. G.  And then we have 10 questions from you, the viewers.



STEVE:  We do.



LEO:  Why don't we kick things off?  We've got a GoToAssist ad, and I'll get to that before we go to our Q&A.



STEVE:  Okay.  So the big news - and, I mean, it's big enough that you were even covering it on your weekend syndicated radio show, The Tech Guy.  And I thought what was humorous to me was that the media picked it up as the U.S. government is recommending that every one uninstall Java.  And, okay, well, CERT is the standard computer response team for the government that maintains a list of vulnerabilities and concerns.  It is now a division of the Department of Homeland Security, the DHS.  And for some reason what got caught in the news net was that the Department of Homeland Security is recommending that everyone uninstall Java.



Now, this is nothing different than any other zero-day flaws.  And in fact I saw some people tweeting out to their followers and mentioning SGgrc, which is why I happened to see it, in their Twitter stream, that it's like, yeah, nothing new.  Gibson's been telling us about this for years.  So in fact this is nothing new.  This is yet another zero-day flaw.  It was discovered, I think it was just after our podcast last week, so like Thursday.  And then the news continued to escalate.  I thought, since it's easy just to say, oh, ho hum, I wanted to share from the DHS CERT notice what they said, just so that our listeners get a sense for how complex this stuff is.



So what the DHS posted was actually derived from the discoverer's and reverse-engineer's analysis, and that's our friend we've talked about before, Adam Gowdiak.  He posted over on the secure list his analysis.  This is, believe it or not, a simplification of what Adam posted.  So CERT said - their title was "Java 7 fails to restrict access to privileged code."  And we'll talk about version numbers and all that in a second.  They posted:



"By leveraging a vulnerability in the Java Management Extensions (JMX) MBean components, unprivileged Java code can access restricted classes.  By using that vulnerability in conjunction with a second vulnerability involving recursive use of the Reflection API via the invokeWithArguments method of the MethodHandle class, an untrusted Java applet can escalate its privileges by calling the setSecurityManager() function to allow full privileges, without requiring code signing."



Okay, now, that, believe it or not, is the simplified version of what Adam posted, which just, I mean, your eyes cross, and you can't uncross them.  But, I mean, this stuff is really convoluted, but that's the problem is that we're now seeing an aging platform, Java, which has a massive code base.  It was created in an era where security wasn't a focus.  And it's been exploding in size as they've added major new features.  And in fact this vulnerability didn't exist in 6 and earlier.  There have been some conflicting reports, but the most authoritative sources say no, this is a consequence of new functionality which Sun/Oracle added at Java 7.  So it's been all Java 7s up through Update 10, which was current until on Sunday, so just four days ago, Oracle put out an emergency patch in order to fix that.



So CERT goes on, saying, "Oracle Java 7 Update 10 and earlier Java 7 versions are affected.  OpenJDK 7, and subsequently IcedTea," which I guess that's a weak version of Java, "are also affected.  The invokeWithArguments method was introduced with Java 7, so therefore Java 6 and earlier is not affected.  This vulnerability is being attacked in the wild and is reported to be incorporated into exploit kits.  Exploit code for this vulnerability is also publicly available.  We have confirmed" - and this was the other thing, is this was - so this is all Java.  This is all platforms.



So CERT is saying, "We have confirmed that Windows, OS X, and Linux platforms are affected.  Other platforms that use Oracle Java 7 may also be affected.  By convincing a user to visit a specially crafted HTML document, a remote attacker may be able to execute arbitrary code on the vulnerable systems.  Note that applications that use the Internet Explorer web content rendering components, such as Microsoft Office or Windows desktop search, may also be used as an attack vector for this vulnerability."



LEO:  And unfortunately it's pretty darn hard to turn it off in IE.



STEVE:  Well, okay.  So the good news is that, with Update 10, which is not very old, because we were talking about this just a couple weeks ago, they added, they did add in the control panel an easy means for simply disabling the web aspect of Java.



LEO:  When you say "they," this isn't Microsoft, this is Oracle.



STEVE:  No, "they" Oracle.  And so...



LEO:  And is it in the Windows Control Panel or in a special Java control panel?



STEVE:  Well, you get to it from the Windows Control Panel applet, which contains all of the control panel applets that have registered themselves.  And so there will be a Java applet in the Windows Control Panel.  It opens the Java control, and then there's a tab there, and a checkbox at the top that you can uncheck to disable Java's plugin capability across all of your browsers that are using Java.  So they finally added that in 10.  So even in this vulnerable version, that's there.  Of course, the problem is only our listeners have gone in and turned that off, or uninstalled Java.  And of course Oracle brags that it's in three billion devices.



LEO:  Yeah, when you install it.



STEVE:  Billion with a "B," yes.  When you install it and tell them you don't want McAfee to come along for the ride.



LEO:  By the way, McAfee wouldn't help you in this case.



STEVE:  No.  So our friend Adam Gowdiak, I'm skipping all of his technical stuff because it's, again, it's just - but it gives you a sense for you've got to be a deep expert in order both to develop an exploit and also to figure out what's happened and fix it.  And but the problem, the whole problem is this is a house of cards.  It is incredible, ridiculous level of interaction such that even the authors of the code can't fix it.  And what's really interesting is this is the result of a failed previous patch.  Last time there was - and in fact our really astute listeners may remember some of that language because I shared it last time.  This was when Adam found something like this in August of 2012.



So he writes this time, "This is not the first time Oracle fails to sync security of Core and the new Reflection APIs, just to mention the Reflection API filter.  This is also not the first time Oracle's own investigation and analysis of security issues turns out to be not sufficiently comprehensive."  And then he points to Issue 50, which was discovered in the code addressed by the company not long ago.  Then he finishes, saying, "Bugs are like mushrooms.  In many cases they can be found in a close proximity to those already spotted.  It looks like Oracle either stopped the picking too early, or they are still deep in the woods."



So I'm glad for all of this because this level of attention increases the pressure and allows the budgeting of more focus on Oracle.  This is always about money.  This is always about economics.  I'm sure the developers are wishing they had more time to, like, check new releases, to verify security, to run regression analysis.  There's going to be some tension between the developers, who really want to do a good job, and the managers of them, who are feeling pressure to put out the new features that they announced at some prior conference.



So this sort of attention, very much like - we were talking last week, Leo, how Firesheep put pressure on the major social networking companies to bring up their SSL barriers much more quickly than they would have, if they ever would have, without it.  Similarly, I mean, this is not good.  But the fact that this escalated to you talking about it on your weekend radio show, and the news covering it as a U.S. government advising people to remove Java, that gets Oracle's management's attention and allows them to put their focus where it should.  And...



LEO:  They did an update yesterday.  Did that fix this hole?  Or was that...



STEVE:  Yes, yes.  Well, okay, yes.  Yeah, there was that, and then there was also a Microsoft emergency out-of-cycle update that we'll talk about in a second.  Apple was very proactive on this.  The instant this came to light, they used a new feature in OS X, which is their plugin blacklist, which is a file called Xprotect.plist, and they declared that the current version of Java and prior were unsafe.  And so all Mac users were immediately protected, as soon as Apple became aware of this.  This got pushed out to connected Macs.  And of course the disconnected Macs were never in danger because this is all about networking.



LEO:  So that's not an update.  You just get that automatically.



STEVE:  Yes.  Without doing anything, your Safari browser will no longer run Java, as soon as a problem like this becomes known.  And Brian Krebs, our friend who's maintaining a great blog, KrebsOnSecurity.com, he did a great blog posting shortly after this, which was "What You Need to Know About the Java Exploit."  But what I got a kick out of was that, when I went there to see how far down it was and to see if I wanted to get a link to our listeners, already there's another zero-day.



LEO:  What a mess.



STEVE:  I mean, after this.  So if you go to KrebsOnSecurity.com now, what you will find is "New Java Exploit Fetches $5,000 Per Buyer."  And Brian writes:  "Less than 24 hours after Oracle patched a dangerous security hole in its Java software that was being used to seize control of Windows PCs, miscreants in the Underweb were already selling an exploit for a different and apparently still unpatched zero-day vulnerability in Java."  And then he links to - or, I'm sorry, then his blog posting has an excerpt from what the hacker posted.  The hacker posted:  "New Java zero-day, selling to two people, $5K per person."



LEO:  Wow.



STEVE:  And the hacker wrote, "And you thought Java had epically failed when the last zero-day came out.  I LOL'd.  The best part is, even though Java has failed once again and let users get compromised, guess what?  I think you know what I'm going to say.  There is yet another vulnerability in the latest version of Java."  So that is the 11 update, the patched one.  "I will not go into any details except with seriously interested buyers.



"Code will be sold twice; it has been sold once already.  It is not present in any known exploit pack," meaning that it's still valuable because it's unknown, "including the very private version of Blackhole," which is rented.  You rent this particular Blackhole exploit pack for 5K per month.  He says, "I will accept counter bids if you wish to outbid the competition.  What you get?  Unencrypted source files to the exploit so you can reencrypt as necessary.  I would warn you to be cautious who you allow to encrypt.  They might try to steal a copy.  Encrypted, weaponized version, simply modify the URL in the PHP page that calls up the JAR," that's the Java file extension, JAR, "to your own executable URL, and you are set.  You may pm me."  So we're basically just always in Java zero-day vulnerability rolling forward mode at this point.  It's gotten that bad.



LEO:  My god.



STEVE:  Yeah.



LEO:  Unbelievable.



STEVE:  So again, from Java v7 Update 10 and on, you can just disable Java in your browser, and of course that seems like a good thing to do.  Or one of the tips that Brian has on his what you should know about the Java exploit, and I would recommend to people, go to KrebsOnSecurity.com, and you'll have to go back about six blog entries, blog postings at this point to find that one.  But he's got a really nice page with tips about dealing with Java, one being to do the dual browser approach, which is completely remove the plugin and seriously disable it from the browser you use mostly, and then have a browser you don't use often where you go to trusted sites and have Java enabled, if you need it.



I mean, when I've talked about this in the past, I've received mailbag and tweets from people, for example, in Scandinavian, where for some reason all their banks apparently are based on Java applets.  And so they have to have Java enabled in their browser in order to operate.  But the reason we see Java is that it's cross-platform.  It's a serious programming language, a nice mature programming language, which codes - it compiles to a sort of a pseudo instruction set, a so-called "virtual machine," and then these virtual machines are hosted on different platforms, on different architectures, on Windows and Linux and Mac, and other places.  Originally it was developed for set top boxes.  And so that's a time-honored approach.



The problem is that, when they said, oh, wouldn't it be nice if you could use Java on web pages, this is not JavaScript, this is Java.  So this huge, behemoth programming environment that was never meant to be exposed to the Internet got exposed to the Internet through the web browser, thus the problem.  So it's really become a major feasting zone for, as Brian puts it, "miscreants."



LEO:  I love "miscreants."



STEVE:  So turn it off, or uninstall it, if you know you don't need it.  And if you do, and if you have a habit of poking around on the shadier side of the Internet, you really, for your own sake, need to come up with some sort of a strategy for doing that poking around on your iPad or on a tablet or on a safe browser that doesn't have Java and only use a browser with Java enabled when you're going to sites where you know you have to have it.  And of course NoScript for Firefox allows Java control on a site-by-site basis, as well.



So, meanwhile, we talked last Tuesday, or we talked last Wednesday, about the prior day's second Tuesday of the month Microsoft Patch Tuesday event, where they offered, we'll remember, seven patches that fixed a whole bunch of, I think it was like 12 or 13 vulnerabilities.  Those were MS13-001 through MS13-007.  Well, Monday of this week they just released the out-of-cycle emergency patch that they didn't obviously have time to get done by last Tuesday.  So this is MS13-008, and it does fix the remaining glaring problem that they had.  That was with their MS IE versions 6, 7, and 8 zero-day problem, which their Fixit did not completely fix.  This now does completely fix the problem.



So anyone who noticed, if they were shutting down their system, and they were told, oh, install patches and shut down, which is one of the things that Microsoft does now, or if your system rebooted, if that's the way you have it configured or whatever, it was because Microsoft was sneaking out this fix which I'm sure they would have done it last Tuesday if they could.  And as it was they did respond overall very quickly.  When we were originally talking about this, it was like a week before, and I was musing whether there would be time for them to get it into the next Tuesday cycle, and there wasn't.  But they did get it out as quickly as they possibly could.



And on the topic of no matter how dire the warnings are, better critical infrastructure security does not necessarily follow.  We have in the news, IDG covered the story and Network World among others picked it up, that malware was found infecting two U.S. power generating facilities through USB.  And I shortened the story a little bit, paraphrased it for the podcast, but basically IDG News Service said that two U.S. power companies reported infections of malware during the past three months, with the bad software apparently brought in through tainted USB drives, according to the U.S. Department of Homeland Security.  And this is interesting.  This is an acronym I hadn't heard before:  the Industrial Control Systems Cyber Emergency Response Team.  So that's a new version.  It would normally have US-CERT.  This is ICS-CERT, the Industrial Control Systems.  So I'm glad we have that.  Maybe that'll help.



And they said, in the first case, the industrial control system at a power generation facility was infected with "common and sophisticated malware," apparently through an employee's USB drive.  The name of the malware was not specified.  The tainted USB drive came in contact with a "handful of machines" at the power generation facility, and investigators found sophisticated malware on two engineering workstations critical to the operation of the control environment.  Investigators did not find malware on 11 other workstations examined.  ICS-CERT recommended that the power facility adopt - I love this - "new USB use guidelines" - which we talked about three years ago - "including the cleaning of a USB device before each use."  Yeah, that'll happen.



In the second incident, a power company contacted ICS-CERT in early October to report a virus infection in a turbine control system.  About 10 computers were affected, ICS-CERT said.  An outside technician used a USB drive to upload software updates during equipment upgrades, CERT said.  The malware delayed the plant's reopening by three weeks.  So here we're seeing reports, thanks to us having something like ICS-CERT.  Notice that these various power facilities are remaining anonymous, probably to encourage them to report these problems rather than giving them a big black eye for doing so.  So that's good.  But, wow.



We know from having tracked down forensically the way we apparently, we and Israel, managed to get Stuxnet into the centrifuge control system in Iran.  We know that those were off the 'Net and that the malware jumped the gap using USB drives.  And so remember that the original viruses rode around on floppies using the so-called "sneaker net" approach.  That's where they lived.  And now they're living on USB drives which are obviously very effective because USB drives tend to be highly promiscuous in their behavior, no fault of themselves, of course.  So anyway, be careful of your USB drives.  And the good news is Microsoft awoke to this several years ago such that the operating systems are far more careful about just immediately running the autoexec file on a drive when you plug it in as they originally were set up to do.  It's like, oh, won't this be convenient.  Yeah, mm-hmm.



So there's a concern that might be big, but I don't know.  And that is what's been reported as a zero-day remote preauth vulnerability in Linksys routers.  A company, DefenseCode, whose domain is DefenseCode.com, reported several months ago that they had found a remote preauth vulnerability, meaning that they can get around login vulnerability, which gives them root access to Linksys routers.  There's a video, and I created a bit.ly link for our listeners.  It's bit.ly/linksys0day with a numeric zero, so linksys0day, all lowercase, in case people wanted to go look at it.



Now, what it shows is them connecting to the router over 192.168.1.1, which is the inside the network local interface.  Now, while it's not good that there is a way for malware to attack your router from the inside, well, UPnP allows malware to do that with everyone's permission.  So the problem would be if you had disabled Universal Plug & Play because you're security aware and smart, and something bad already got into your network, it could attempt to see whether you've got a vulnerable Linksys router and bypass your cleverly changed administrator password in order to access the guts of your router.  And this little video absolutely demonstrates that happening.  I'm assuming that this is not exploitable on the public interface, that is, on the side facing the Internet.  If it is, we have a disaster on our hands.



Cisco has ignored, basically, this report.  They responded that they have already fixed the vulnerability in their latest firmware release.  But DefenseCode checked the latest version of the firmware for the WRT54GL router, which of course is a high-end powerful router that lots of people use, the WRT54G series.  And the latest firmware, which was 4.30.14, was still vulnerable.  And DefenseCode stated that the nature of it leads them to believe it is probably widespread across many routers that are Linux-based and probably goes way back.  And this is 70 million routers worldwide.  So what DefenseCode has said is, "According to our vulnerability disclosure policy, the vulnerability details will be disclosed in following two weeks at DefenseCode.com, on Bugtraq and Full Disclosure," on the standard disclosure mailing lists.



So Cisco has burned up their time and apparently done nothing about this.  Again, there's no reason to believe this is a vulnerability on the public interface.  There's a lot of reason to believe it isn't because, remember, the first thing that packets hit when they come in from the outside is the NAT, the stateful NAT router.  It's an effective firewall.  It's very rare that we see a problem there.  It's not impossible.  My own spoofability test, the DNS Server Spoofability Test, it routinely crashes people's routers.  And I'm constantly getting reports from people about - actually when I was developing that we were crashing our beta testers' routers, and so I figured out what it was I was doing so that the regular test wouldn't do it.  But then I put in a "Does this crash your router" test for people who wanted to find out because the concern is there may in fact be an exploitable vulnerability from the outside that I stumbled on, but because I'm not a bad guy, I've never pursued it in order to figure out how exactly to turn that into an exploit.  I have no interest in that.



But so there's some possibility that something is there which is a problem.  It may just be that it's a form of overload that's crashing the router and not something that could be exploitable, at least in my case.  But so I don't want to alarm people needlessly.  I would be surprised if DefenseCode found something that was remotely exploitable.  But they may, and they may only be showing it on the private interface, the inside interface, because they don't want to overheat the world about figuring out what they've done.  We'll know in two weeks, and I will certainly update us.  Cisco has been as lame as anyone could be about these problems.  And in fact one of our Q&A questions we'll be getting to focuses on that with some details.



So anyway, just to - I don't think this is going to be a problem.  The only vulnerability is if something already got in your system, in your network, that it could then take over your router.  But again, that's true for pretty much everything.  So Universal Plug & Play does that, as I said, with permission.  So we will keep an eye on this and let everyone know.



I just tweeted - this is now we're in miscellaneous stuff - a fabulous review of 5v USB chargers.  I know this is totally random.



LEO:  And geeky.



STEVE:  It is so wonderful.



LEO:  What are the differences between 5v USB chargers?



STEVE:  They're huge.  I made a bit.ly, bit.ly/usbcharge.  So, and Leo, check it out.  I mean, the good news is there's a winner.  There's a clear, clearly superior USB charger.  Apple's is highly regarded by this guy, who is clearly an electrical engineer.  Actually I got onto him because Simon Zerafa, who is a frequent tweeter and amazing finder of things, found a page where this guy shows how part of the logic of the old 6502 microprocessor can be reverse-engineered by looking at the exposed chip.



LEO:  I have most of these chargers.  So I'm glad to see that - but, wow.  So there's a chip in here.



STEVE:  So anyway, so I commend our listeners, bit.ly/usbcharge.  And it's a wonderful page.  He takes, I don't know, maybe 12, and puts them through all kinds of tests.  He tests the ripple, he puts them under load, he shows how well regulated they are, he tears them open and looks at the physical construction, and everything is rated and ranked.  And the HP tablet charger is the clear winner.



LEO:  Which you can no longer get.



STEVE:  Actually they're on Amazon for $25.



LEO:  Is it a 10-watt charger?



STEVE:  Yeah, it's a high-power, a little better than five volts and a little better than two amps.  So it's a beautiful charger.



LEO:  And that's what you want in every case, even though your device may require fewer watts.  An iPad requires 10 watts to charge.  Actually the new iPad charge is even a little more powerful.  But even if you have one that only requires, I don't know, .8 milliwatts or something...



STEVE:  Well, and as you know, power equals voltage times current.  So five volts times two amps is 10 watts.



LEO:  Right.  But it wouldn't hurt anything if you put a 10-watt adapter on it.



STEVE:  Oh, absolutely not.  It's just...



LEO:  It would charge faster in most cases.



STEVE:  It's cruising along and having a good time.



LEO:  Safety standards is one of the things he talks about.



STEVE:  Yeah, oh, and there's some really interesting stuff about the clone chargers.  There were a bunch of clones.



LEO:  They're not safe.



STEVE:  That are, I mean, oh.  And he shows the pictures, like the clones of the Apple charger, side by side.  And you can clearly see that not as much fit-and-finish care was given to the clone as to the original one.  And then he talks about the insides.  And the clones just behave miserably.  I mean, there's just probably a diode in there.  And it's like, good luck.



LEO:  Good to know.  Don't use cheap chargers.



STEVE:  Do not want to use a cheap charger.  The last thing you want is for AC to get its way up that cord to your precious phone or tablet.



LEO:  He also rates for vampire use, that is, how much power the charger uses when it's not charging.



STEVE:  Yes.



LEO:  And the Samsung oblong is best in that regard.  Only 19 milliwatts when it's not being used.  To compare it, the iPhone charger's 195 milliwatts when not being used.  But the iPad charger's 62.  It's the next best trip.  Wow, this is really interesting.  I love this...



STEVE:  Isn't that nice?



LEO:  I love this fake counterfeit, which looks pretty good until you see that it is - the Apple one is designed by Apple in California, and the cheap one, the fake one, is designed by California.  That's the giveaway right there, yeah.  I have a bunch of these Samsung oblongs because I have a lot of Samsung phones.



STEVE:  Oh, really, cool.  Well, now you know that you can leave them plugged in, and they're not burning too much power.



LEO:  Yeah.  Wow, that is an interesting article.  Who'da  thunk it?



STEVE:  I thought that was a great page.  So speaking of who'da thunk it, if you put up for our video listeners or watchers, Leo, that JPG which was tweeted to me last week, that is an image of SpinRite's drive map running on a six-month-old Crucial 500GB, so half a terabyte, SSD.  And anyone who ever believed that solid-state drives were like memory will be disabused of that belief looking at that map.



LEO:  Those U's are all unrecovered sectors.



STEVE:  Yes.  Now, what happened was the person who was doing this, and I unfortunately don't have his tweet handle in front of me, he just tweeted to me, in the middle of the day, I think it was the late morning, that SpinRite was working on his USB drive, I mean, I'm sorry, his SSD drive from his Mac.  I think he'd removed it from his Mac, and he was running it on a PC.  I note that it's getting a very nice speed.  He's showing it, the chart there, the map, SpinRite shows it as halfway through 500GB in about 20 minutes.  So it would be about a 40-minute run for the whole half a terabyte, which is about right.



So but he said he was running it on Level 1.  And I said, "Oh, you don't want Level 1, you want Level 2."  He's a listener.  And so he knew that SpinRite could be used to recover SSDs.  And his system was trashed.  It would no longer boot.  Nothing was working.  So he did this.  So he restarted it at Level 2.  The difference is both Level 1 and 2 are read-only, and that's the key.  You don't want to run Level 4, which is exercising the surface, because they are exercising the bits and nominally wearing them out, not very much, but there's really no point to it.  It's unlike the operation of a physical media with a defect where you're exercising the bits in order to find the defect.  Here what you want to do is run Level 2 because Level 1 is not permitted to fix anything.  That's why he was getting all those "U" reports of problems.  But SpinRite had been prevented from doing any repair.



So he started again on Level 2, and I got a tweet from him about an hour later saying that his system was running again.  So SpinRite did fix his 500GB SSD by removing it from a Mac.  And he ran it, I guess hooked it up to a PC in order to run it and then put it back and was a happy camper.  However, what he tweeted, he said, "Six-month-old Crucial 500GB SSD not looking good.  KNEW I should have stuck with OWC."



So what happened was I retweeted his tweet, and it caused a flurry of responses from people saying, what?  I thought you'd been saying don't use SpinRite on SSDs because it'll wear them out, and it won't fix them.  And we have had now many testimonials from people like this guy who have had SpinRite successfully repair their SSDs.  The reason they're failing is the same reason hard drives are failing.  And that is, the nature of the world, unfortunately, is economics.  Everything is economics.  And engineers are being forced to operate right at the limit of technology.  They could make SSDs that were much more reliable, and arguably the first SSDs were.  They were very expensive, and they were not nearly as dense.  But they were very reliable, just like the earlier hard disks which, because they were cramming fewer bits on the surface, the bits were bigger, and they were easier to find.



And so what's happened with SSDs is, remember that the technology is like a little tank.  Think of it as a tank of electrons, and there's some leakage in the tank, just sort of natural migration of the electrons out of the tank, like a very slowly leaky bucket.  Unfortunately the tank is a little porous.  And the idea is that you either empty the tank to have it be a zero, or you fill the tank full of electrons for it to be a one.  And everybody's happy.  Except that the problem is to increase the density to get more bits in the same, like in a per given unit area.  They've made the tanks smaller.  So the tanks have a smaller capacity, which means there's less difference between a full tank and an empty tank in absolute terms.



And then they went even - to make matters worse, they went from using these cells, tanks, which only had a - which were only either empty or full.  Someone said, hey, you know, we could store more virtual bits per cell if we did multilevel tanks, that is, if we filled the tank a quarter full, half full, three quarters full, or full.  Then what that would mean is there were four different potential fullnesses.  And we know four states gives you two bits.  So by using so-called MLC, multi-level cell SSDs, they've been able to double the density kind of for free, but not at the same level of reliability.



Every single one of my SSDs is SLC, single-level cell.  They're not affordable, even today.  I mean, they are really expensive.  And the reason is that in order to get high-density SLC SSDs you need to use a lot more chips.  So they're just more expensive to produce.  But, for example, I'm using only SSL - I don't have any MLC SSDs anywhere because I just - I'm old school, and I realize that manufacturers are always going to push the boundary.  They're going to make these reliable enough.  So SSDs work sort of the same way today that hard drives do.  They're reliable enough.  But because they push the boundaries of the technology to get the density up in order to be as competitive as they can and to keep their costs as low as they can, we have problems like this one.



And once again, SpinRite can - you can do a read-only scan of an SSD anytime you want, and it is just as good for it as a read-only scan of a physical hard drive with SpinRite.  Why?  It's because, just like a hard drive, where I've said the hard drive only knows it has a problem reading a sector when it tries, it's not omniscient.  It doesn't know anything about the sectors floating around out there that it hasn't visited recently.  So it's only when it tries to read it that it's able to gauge whether or not it can, and how much error correction is required.  And that's the other part of this.  SSDs use error correction just like hard drives.  Because these bits are flaky, they've unfortunately made them flaky by forcing them to have too much capacity in too little physical size.  They're now relying on error correction to make up for the fact that the bits are coming back bad.



So just like hard drives, if you run SpinRite on an SSD at Level 2, it will do a read-only scan, and it may be terrifying the SSD controller.  It will be showing it that it's got problems.  And it will be relocating sectors of SSD in exactly the same way hard drives relocate sectors on the physical surface.  And if there's a problem that the SSD controller cannot fix and relocate, then if you're on Level 2, that allows SpinRite to go to work and do its data recovery work, which is clearly what did succeed for this guy who tweeted me last week.  So that's the whole story.



LEO:  That's cool.



STEVE:  It is the case that, unfortunately, the passion for cramming as many bits in as small a space as cheaply, as inexpensively as possible - well, actually cheap in both senses of the word - is creating a problem.  It's no longer the case that they are super - they're certainly reliable physically.  The reason I have them in my laptops is laptops tend to get bounced a lot more than stationary systems.  And so there I think a laptop really is the right, well, and for example, remember iPods used to have hard drives in them.  That was nuts.  And of course SpinRite was able to fix those, too, very often.



LEO:  So but you're not recommending against them in desktops, are you?



STEVE:  No, no, no.  I would say they are probably - I don't even really know if I would say they're more reliable than hard drives.  At this point...



LEO:  They're not less reliable.



STEVE:  They're not less reliable.  I would say the benefit is they are non-mechanical, and that's a good thing.



LEO:  And they're super fast.  I mean...



STEVE:  Yes, and there you go.  Super fast.



LEO:  There's the benefit.  I mean, they're massively speedy.



STEVE:  Yeah.  To give you an idea, though, of how belt-and-suspenders I am, the latest server that I built for us has six OWC single-level cell SSD drives running in - I'm sorry, four, four drives, the highest reliability I could find.  They are also, the OWC drives, they are massively over-provisioned.  That's the term used for the amount of unused space available for relocation.  They call it "over-provisioning."  And then I run those four drives in RAID 6, which is full 100 percent redundancy.  Any two of them can fail to read, and I still am able to read perfectly.  So I just don't ever want that to be a problem.  And you invest once, and then you're not having to make trips to the datacenter all the time.



LEO:  I just got the new iMac that has - Apple's got this new thing they call a "fusion drive," which is two drives that look like one.  One's an SSD, and one's a spinning drive.  And it's a total of 3TB.  It's not RAID.  It's not an Intel technology that is similar.  It's their own technology, software built into the operating system, Lion and Mountain Lion.



And what it does is kind of interesting, is it moves the most accessed stuff to the SSD, and the less accessed stuff stays on the spinning drive.  And it's purely for speed.  But having just installed this computer, so I haven't - it hasn't tuned itself yet.  But I'm getting 290-plus megabytes/second write speed and 430MB read speed on this thing without having it optimized.  And I presume it will get faster in the stuff that I need to be faster.  So this is very close to an SSD drive.  Direct SSD drive is very, very fast.  SSD is even faster, four or 500 mbps.



STEVE:  Well, and it really makes sense for reading.  Of course, SSDs don't write quickly.



LEO:  As fast, right.



STEVE:  They read quickly.  And the reason is that the only way, the way you write to an SSD is you drain all of the tanks throughout a region, and then you selectively refill them.  And you also need to do that at a higher voltage so there's actually a voltage booster in the SSD that brings the voltage up to a couple hundred volts.  And that's needed.  Remember we've talked before that the way that the SSD works is that you pierce the insulation, and you squirt the electrons through an insulating layer.  To do that you need a lot of pressure, and voltage is pressure.  So the SSDs bring the pressure up, squirt the electrons through an insulator, and strand them out on a little conductive blip, essentially, in the chip, and that represents a one bit.  And the problem is over time the integrity of that insulating barrier breaks down, specifically because we keep squirting electrons through it.  It just - it hurts it.  Sensing the charge is easy.  We're able to do that electrostatically.  That's when we can read effortlessly, very quickly, and with no overhead...



LEO:  Well, and it's random access.  There's no seek time, either.



STEVE:  Correct.  Correct.



LEO:  But I have to say, you make it sound like the writes are slower.  They're still faster than spinning drives.  I mean, they're fast, the writes.  This is the Other World Computing solid-state in my MacBook Pro Retina:  208 mbps write, 500 mbps read.  That means I'm reading a gigabyte every two seconds.  It's really fast.



STEVE:  Wow.



LEO:  Really, really fast, yeah.  So I only use SSDs in everything.  I'm pleased to see how well that the fusion drive performs, given that...



STEVE:  Even when it's new.



LEO:  Even when it's new.  It hasn't optimized at all.  And it's got the 3TB capacity, which is nice.  So I will do a little ad, and then we will get to your questions.  How about that, ladies and germs?  How about it?  And we've got 10 questions from our audience, our "listener-driven potpourri," as Steve puts it, episode 159.  And we do this pretty much every other week, so that's how we got to such a high number.



Starting with Bob Iiris, a listener in the USA, who offers a minor correction, Steve.  He says in Episode 385 you refer to the - and this was an offhand comment you made, by the way - the Bernoulli effect/principle used to float the hard drive's head off the surface of the rigid disk, commonly called the "Venturi effect."  But you were actually describing the so-called "boundary layer effect."  They're related in that the Bernoulli effect is occurring within the boundary layer.  P.S.:  With your audience, you just can't get away with anything, can you, Steve.  I think you got it right because I think you started saying Venturi effect, and then you said the Bernoulli effect.



STEVE:  Yes.  And I thought I would share Bob's note and that it is about the boundary layer, which is true.  And what's interesting is, remember when there were Bernoulli drives?



LEO:  Yes.



STEVE:  We went through that phase?



LEO:  They weren't fixed disks, they were rigid disks.



STEVE:  Well, you mean they weren't rigid disks, they were flexible disks.



LEO:  Right.  That's what was unique about them.  They did the same kind of floating head thing, but on a flexible disk.



STEVE:  Exactly.  And what's really interesting is we think of floppies as spinning, well, those of us who do think of floppies spinning...



LEO:  What's a floppy, Steve?  I've never heard of that.



STEVE:  We old-school people.  You think of them as spinning very slowly.  And in fact they do spin very slowly.  I mean, you can see them spinning around.  If you ever looked at the hub of a spinning floppy disk, it's not going fast.  What IBM determined, though, was that that's as fast as they could go before the head would start coming off the disk.



LEO:  Ah.  Oh, that's interesting.



STEVE:  Yeah.  So it turns out that you actually don't have to go fast for there to be enough air pulled along by the spin of the disk in order to get under the head and for it to no longer be in contact.  The floppy technology is more like the magnetic tape technology, which has to be in contact with the head.  Hard drive technology, which is what the Bernoulli drives used, is deliberately a floating head technology.  And I remember in the pictures that the Bernoulli Company had, that made the Bernoulli drives, they showed their head pushing down and the disk actually flexing under the head.  There was an air bearing, and the head was deforming the disk a little bit as it flew, but it was not in contact with the head, or with the disk, which by the way was in a removable cartridge.  These were large, high-capacity, I think 40MB, which, ooh, boy, back then, high-capacity cartridge technology.



LEO:  Ooh.  40MB.



STEVE:  Oh, you'd never fill those up, Leo.



LEO:  We've come a long way, baby.  Jared in Australia raises some useful concerns about the CrashPlan cloud backup:  Going around trying to find the top backup solutions, I decided to re-watch the Cloud Solutions episode you did on Security Now!.  I decided to put both CrashPlan and Carbonite to the test.  Unfortunately, CrashPlan requires Java to use, just to let you know.  This itself made me switch back to using Carbonite.  Even with limitations of its own with file type, at least we know there's no additional security associated, or security issues, I should say.  Since Java is so down with patches right now, the question I always think when an application requires such software is, is my data still going to be there?  You know, there are a lot of apps that still use Java.  Minecraft does.  A lot of our Citrix apps do.  That's not the same as Java in the browser; right?



STEVE:  That precisely is why I chose the question, yes.  I wanted to - I thought this was great.  First of all, what I discovered when I was doing the cloud backup solutions podcast was many of these multiplatform solutions are Java-based for exactly the reason we were talking about at the top of the show, which is you write it once, and you can run it anywhere.  And for an application to be running on Java, exactly as you say, Leo, is completely different from the browser to invoke a Java applet when you visit a malicious website.  So definitely worth keeping these separate.



These cloud backup solutions, while they're Java-based, they're not Java browser-based, and that's where the problem is.  And so, for example, if you were to use the security control panel to turn off Java in the browser, then Java on your machine, for example using these backup solutions, still works just fine, and you're okay.  And the fact that Java has security issues doesn't mean that the users, that is, the developers using Java are at fault for using Java.  That is, if you see what I mean...



LEO:  Well, but, yeah, but that's neither here nor there.  I mean, it's not their fault.  But if it's a security issue, you still wouldn't want to use it.  But it's not the same.  I guess the security issue is if somebody gave you a program to run on your system, and you trusted them, they could make a dangerous problem.



STEVE:  Yeah, right.



LEO:  But that's any program.



STEVE:  Exactly.  An EXE is far more powerful than a Java virtual machine program.



LEO:  True, good point.  That's a very good point, yeah.



STEVE:  So I think it's...



LEO:  So if they're going to give you a malicious program, they're not going to give it to you in Java.  They're going to give you an EXE.  They don't even need an exploit.  They just say run this.



STEVE:  And none of our users would be able to use it if it were in Java because they've all uninstalled Java, if they had it in the first place.



LEO:  But that is the disadvantage, also, to uninstalling Java is that you have that issue.



STEVE:  And also, if you think about how detailed the exploit was that I read, you could see that it was like winding its way through a circuitous route to get to a particular function where it was able to trick it into changing your security settings that then gave you remote access that you wouldn't have otherwise had.  So here again, this is, as I've discussed before, Java allows all these things, and then they try to put a barrier up to prevent you from getting to them.  That's fundamentally error prone.  You don't want power which you then have to firewall.  You'd really rather not have that capability at all.  Then there's nothing, there's no possibility of figuring out a way to get around what's blocking it.  Unfortunately, Java is a powerful environment.  But these exploits are specific to remote browser-based implementation.  And that's important to understand, too.



LEO:  Very good.  Question 3, or, yeah, 3.  Mike King on the eastern shore of Maryland notes that helium-filled hard drives may lift Western Digital to the top.  Have you heard about this, Steve?  And either way, what do you think?  It's a Computerworld article about hard drives, not with - I guess hard drives have, what, air inside them?



STEVE:  Yes, they normally run at atmospheric pressure.  There's typically a little multi-hole filter in the lid, like in the cover of the hard drive.  If you look somewhere...



LEO:  To equalize pressure.



STEVE:  Exactly.  And so air is allowed to pass both ways through that in order to keep the pressure equalized.



LEO:  Otherwise they would, like, wouldn't work well at altitude and things like that.



STEVE:  Yeah, exactly, well, because, if you were at high altitude with low outside pressure, then the lid would bulge, and lord knows what effect that would have.



LEO:  That wouldn't be good.  If you think yelling at a drive messes it up, bulging lid's got to be a problem.



STEVE:  So very, very clever.  Western Digital realized that the density of helium is - I think it's one-seventh the density of air.  That's why helium balloons rise and go up in the air is that helium is so much lower density than air.  They realized, if they switched to a helium environment, everything changes.  It turns out that a substantial amount of the power that a drive uses is just overcoming the air friction of the disk platter surfaces as they're spinning.



LEO:  Wow.  No kidding.



STEVE:  And so the motor is working to spin the platters at a constant speed against the drag of the air.  And if you switch to helium, it dramatically cuts the drag on the disks.  It also completely changes the physics of the head/disk interface, as we might imagine.  We've been talking about the boundary layer and all that.  And it turns out that that allows them to increase the density further because it allows them to fly the head closer, at higher speed, than they've ever been able to.  So they could spin faster, get the head closer, and a closer head means a greater signal coupling between the disk and the head, and that means more bits, baby.  So anyway, this is very cool.  They've got patents on it.  They beat Seagate, and is it - there's one other.



LEO:  It's pretty much those two.



STEVE:  It's Western Digital, Seagate, and there's another foreign manufacturer.



LEO:  Well, there's Hitachi.  But, no, Hitachi is Western Digital.



STEVE:  No, Hitachi got bought by, or they bought IBM.



LEO:  No, it says in fact that Hitachi was the ones who developed these helium-filled drives for Western Digital.  That's why it's so confusing.  Hitachi bought IBM's Diskstore business.



STEVE:  Right, the Travelstore line.



LEO:  Yeah, Travelstore, Diskstore.  And then Western Digital bought Hitachi.  I think it's shaking out to really only a couple, and there might be some, like, small ones around.



STEVE:  Anyway, I just thought that's very cool, helium-filled drives.



LEO:  It is great.  It's great.



STEVE:  And when the drive died...



LEO:  Western Digital has 45 percent of drives; Seagate has 48 percent.  So there's somebody who has 7 percent.  I don't know who it is.  But they're not important.



STEVE:  Yeah, and when the drive dies, Leo, you could crack the lid and suck out the helium.



LEO:  [High voice]



STEVE:  Exactly.



LEO:  There's a guy who calls the radio show and does that every time.



STEVE:  Oh, goodness.



LEO:  It's like, grow up.  It's funny once.  Luca in Verona, Italia suggests a possible UPnP solution:  [Italian accent] Steve and Leo.  I'm not going to do that.  I just finished playing through Episode 385, and I thought of a possible solution for the listener asking about the PS3 and UPnP.  He could get a second router and enable UPnP on that, daisy chain it to the first one, then place it in the first router's DMZ.  This way he could have only the PS3 connected to the second router, which has UPnP capabilities, and keep the rest of his machines safe under the current network.  He'd also be protected from any hypothetical attacks exploiting vulnerabilities in the PS3 since it would be also isolated from the rest of the network.  Keep up the good work.  Luca.



STEVE:  And that's very clever.



LEO:  You've thought of that.  Wait a minute, isn't it that triangulation, router triangle thing?



STEVE:  Yup.  We've covered the idea of using routers as, like, one-way valves.  And the idea of putting them in series, but connecting them...



LEO:  But you need three to do what you wanted to do.



STEVE:  Well, you really do because, technically, if the PS3 were infected, it has visibility into the network outside of it, which would be your private network.  So you really need a Y connection with one router for the PS3 and another router for the local network.  That way both of the interior routers are feeding to a third public one.  But he is correct, and I hadn't thought of this, that you could put the router that requires UPnP to be enabled, you could set that router's IP as the DMZ for the primary public router, so that unsolicited traffic would automatically be routed to that router, where UPnP would have been dynamically opening ports to allow access to the PS3.  Meanwhile, your second internal router would have UPnP disabled and would essentially be barricading itself against both the PS3 and any mischief it might get up to and the outside network.  So it's not lightweight, but routers are pretty cheap these days.  So, yeah.  Anyway, I thought that was clever.  That's a variation I hadn't thought of before.  So thank you, Luca.



LEO:  Bill Burlingame in Huntsville, Alabama, has a question about the Quiet Canine project:  Steve, I heard your update on the unit you're designing to stop dogs from sustained barking, No. 385 for those of you looking for that story.  Is there a chance that, once the design is completed, a kit can be made available?  Has this guy not been paying attention?  If not, I hope the list of parts are readily available to people who don't happen to live in a large metropolitan area.  My first choice would be a unit that is already built.  If you don't have the time and resources to offer one, would you grant permission to someone to sell units based on your design?



STEVE:  So that was a new twist that I thought I would share.  First of all, you and I did talk about my intention to open source, open design everything.  There is a company called Digikey which is fantastic, and all of the parts are sourced from there, and I've got a parts list with all of their own numbers.  So it's sort of a virtual kit.  And one of the people who is participating over in the Google group, it turns out that Spark...



LEO:  SparkFun.



STEVE:  SparkFun has a division which produces PC boards at low volume.  What they do is you're able to get a PC board  that - normally the problem is you just can't get one little PC board because the PC board fab people want to fabricate them in huge sheets and then divide them up.  Well, what SparkFun's company did, I think it's called BatchPCB, if I remember, I think that's the name of the company.



LEO:  A clever idea.



STEVE:  BatchPCB.  So the idea is everybody, there's like all these projects there.  Anyone who wants a PC board puts in an order.  It's not fast.  You have to wait some number of weeks, typically.  But even that's not bad turnaround for PC boards.  And what happens is, as soon as they get enough of them for the total real estate, they submit that as a single composite board, which is then broken up into pieces.  So it's very clever.  And so the bottom line is that, one way or another, the answer is yes, Bill, there will be a way for somebody who can build these or knows somebody who can - hey, do me a favor, build this for me - to essentially have a kit.  I really, myself, don't want to be in the hardware business.  I also don't have any problem if somebody else wants to build them and sell them.  And if they do a good job of that, I could certainly refer people to them.



I am going to still make a bunch of beta test units myself for our listeners who have this problem because I want to acquire more information about whether and to what degree this whole approach works.  So, yes.  Again, it's still premature.  People write to me telling me that the Quiet Canine pages are all blank except for one or two, and it's like, yes, I know.  That's because I don't have anything to put there yet.  We're working frantically over in the Google group, so much so that people have asked how do I unsubscribe to this because there's just too many postings.  It's like, I understand.



LEO:  Interesting.  Question 6, Mack Morris, Columbia, South Carolina.  He's worried about the CBC information leaks.  Steve and Leo, thanks for the show, blah blah blah.  I have a question regarding cipher block chaining.  If - oh, boy.  Oh, boy.



STEVE:  Yeah.  Just read this and don't try to understand it while you're reading it.



LEO:  Good, because nothing will come through.  But I am going to read it as if I understand it so that you can understand it.



STEVE:  That's good.



LEO:  If I understand correctly, the first block of "N" bytes is XORed with an initialization vector.  The resulting bytes are used to XOR the next block.  This continues until all blocks have been XORed.  If the key size and block sizes are different, wouldn't this result in information leakage?  For example, if the key is 8 bytes and the block size is 10 bytes, then the remaining 2 bytes would be the same after XORing is complete.  I'm assuming that the remaining bytes are XORed with zeroes.  That may be a false assumption.  You could just wrap around.



Wouldn't anything that is XORed with the zeroes result in the same bytes as the input?  If the key is larger than the block size, the remaining bytes of the key would always be present at the beginning of the ciphered text.  Well, that'd be bad.  If the block size is larger than - I suspect this has been solved, but we'll see.  If the block size is larger than the key, then the remaining bytes of the plaintext will be present at the beginning of the ciphertext, revealing the length of the key.  While the length of the key may not be sufficient for the entire cipher to be compromised, it is information leakage nonetheless.  Additionally, the first few bytes may contain information that does not need to be plaintext.  If this is correct, would it be a good idea to pad the smaller item with ones instead of zeroes to prevent this leakage?  Or is this how it's done anyway?  Thanks, keep up the good work, Mack Morris, Columbia, South Carolina.



STEVE:  Okay.  So there's a couple problems with what Mack has described.  The reason we do anything called a "cryptographic mode," which is different than a cipher, is to keep information from being leaked.  With a cipher, the actual algorithm, it takes some number of bits of plaintext and converts them, sort of maps them, into a completely different and unpredictable same number of bits in the output.  But the problem is, every time you put the same thing in, you get the same thing out.  So if all we did was encrypt a file by enciphering blocks of bytes, then patterns could be seen.  That is, there would be information leakage because someone looking at the ciphertext might see, oh, look, this block is the same as that block, which means that the plaintext must also be the same.  So while it doesn't disclose what the plaintext is, it tells you that it's the same.



And there are, for example, protocols that are very structured, where there's certain, like they have headers and trailers and so forth.  They contain structuring information.  For example, a JPEG of a certain size, it'll have in its header descriptions about the type of encoding, that it is a JPEG, the height and width and so forth.  Those things could be figured out.  You would then know what the plaintext was that corresponded to the ciphertext.  And if you found that same ciphertext anywhere else, then you would know that it just happened to be the same plaintext again.



So what we need to do is we need to prevent that case, where the same input data, input to plaintext, results in the same ciphertext output.  The way we do that is we, in addition to having a key - and remember the key is what determines the mapping between plaintext and ciphertext.  Additionally, we have something called an "initialization vector," or IV.  The initialization vector is always the size of the block, that is, the size of the cipher.  Like AES is a 128-bit cipher, so the initialization vector is 128 bits.  That's chosen at random.  Doesn't matter what it is.  And in fact it can even be in public.  It can be known.



So that gets us started because we XOR the plaintext with the initialization vector, then we encrypt it, then we take the encrypted output of the first encryption and use that to XOR the plaintext of the next block.  And then we encrypt that to get the second block.  We take that second block and use that to XOR the plaintext for the third block as we encrypt it.  So that's why it's called "chaining."  We're creating a chain from one block to the next, taking the output from the previous block and using that to scramble the bits going into the succeeding block.  And so the beauty is that it creates an ever-changing scramble.



And remember that a good cipher for an input is it gives us a pseudorandom output.  It is absolutely pseudorandom.  It has no way of knowing, if you don't know the key, what input gave you what output.  And so really smart cryptographers have thought about this a lot and said, yup, there's no way to gain any information that we don't want given.  So that's how CBC, cipher block chaining, works, and why we need it.



LEO:  I thought it was the Canadian Broadcasting Company.  Tim in St. Louis has already got a hot flash drive:  Steve, I'm sorry I'm a bit behind, but listening to 381 where you discuss a new flash technology that creates heat to prevent the drive from wearing out.  On Black Friday I bought a new flash drive from PNY that was on sale.  Unlike my existing drives, I noticed this one in particular gets extremely hot to the touch, almost too hot to touch, actually.  I assume that particular new technology is not out in the wild yet from the way you spoke of it, yet this drive is hot for some reason.  Even if it weren't designed for that purpose, could I have just gotten lucky in getting a hot running drive?  Is there a chance it could prolong the life of the drive, or is heat like that not the same?  Also, would keeping the drives in a warm area be beneficial?  Thanks for keeping us informed.  Tim.



STEVE:  Well, that's an interesting idea, Tim.  I think you should probably send it back.



LEO:  But I have a USB key that's quite good, it's very fast, and it's USB 3.0, and it gets fairly hot.  I mean, I don't think it's unusual.



STEVE:  No kidding.  Wow.  I've never noticed heat.  I've never noticed heat from mine.  But for what it's worth, we're dealing with, okay, what I was referring to is a new heat-annealing process.



LEO:  Right, that's different.  That's not the drive getting hot.



STEVE:  Yes.  And it's spot annealing at the molecular level with extremely high heat, like 600 degrees Fahrenheit, so way hotter than just power running through the flash drive and warming it up as a consequence.  So I don't think, I mean, I don't think the level of heat you're going to get will be helping to anneal the flash drive.  I would worry that it's going to hurt it over the long term.  But they're robust against temperature, so that's probably not a problem.  But no, the answer is we're a different level of heat.  It's hundreds of degrees hotter, many hundreds.  And also done sort of like on a microscopic instantaneous level, where nothing else has a chance to melt before the annealing process gets done.  And we're probably several years away from seeing that in production.  But, boy, will that be nice.



LEO:  Sorry about that.  I was doing sit-ups.  Don't ask.  Don't ask why.  Steve, I only got two.  I was trying to do 30.  So take your time on this answer.



Steven Knight in Brisbane, Australia wonders about ransomware:  Steve, over the Christmas break the Australian media covered ransomware, where your data is encrypted, and you have to pay a fee to get access to it.  Or not.  This is probably the mafia, after all.  The media coverage didn't really get into prevention.  My first thought was effective backups.  You could wipe the affected device and restore the data, as well as firewalls, et cetera.  Can ransomware be detected by traditional scanning software, and what are the best steps for prevention?



STEVE:  Okay.  Leo, you do sit-ups.  I'm going to answer the question.  So ransomware, I think, is a really clever idea.  I'm not endorsing it, of course.  It's bad.  But it's interesting.  If a virus gets in your computer, then the question is, what is it able to do?  I mean, normally it's able to use your machine as part of a botnet in order to DoS other sites.  Maybe it watches what you're doing in the hopes of being able to see a credit card transaction or intercept banking work or something.  But the other really interesting idea is that it could encrypt your system.  And which is really an interesting sort of Catch-22, I mean, if it just wanted to hurt you, it could just reformat your drive.  It could wipe out your files.  But then it doesn't have anything.  If it wants to extract value from you, what better thing to do than hide your own files from you, ransoming your access to them by making a payment.  So when this surfaced a few years ago I thought, wow, that's diabolical.



LEO:  Isn't it clever?  Yeah.



STEVE:  Really clever.  



LEO:  I had a call over the weekend by a guy, he had ransomware.  It says it's the FBI; right?  They're smart.  They're getting smart.  They have a big FBI logo and stuff.  But then it says that you have a fine, you have a $300 fine, and we will release it.  Your data has been blocked because of a violation of the Patriot Act or something, and we'll unblock it.  But then they ask for the payment in these cards, these prepaid cards that you go to the 7-Eleven to get.  And I asked the guy, do you think the FBI uses prepaid cards for fine payment?  Does that sound - MoneyPak, that's the name of them, MoneyPak cards.  In fact, that's why they call this the MoneyPak Trojan.  It's ridiculous.



STEVE:  So the bad news is, it is, in all other regards, it's malware like any other.  You don't know where you got it.  You went to a website.  Something happened.  You had Java enabled on your browser.  There was a JavaScript exploit.  You downloaded a bad piece of software, and it had a trojan in it, who knows what.  One way or another, you've got this junk on your system.  And as we discussed, antiviral software is having an increasingly difficult time because the code is encrypted.  Sometimes it's polymorphic encrypted so that every instance of it looks different.  It's very difficult for software to inspect the outside and see whether it's a problem.



LEO:  This is good.  I just pulled up the warning:  "FBI Anti-Piracy Warning.  All activity of this computer has been recorded.  If you use a webcam, videos and pictures were saved for future identification."  And then it gives you a barcode.  And then it says your IP address.  It says:  "Your IP address and hostname were recorded for future identification.  Your computer has been locked.  Illegally downloaded material, MP3s, movies, or software have been located on your computer."  Then it quotes U.S. copyright code, possession is punishable, et cetera, et cetera.  "To unlock your computer and avoid other legal consequences, you are obligated to pay a fine of $400.  Payment of the fine is done by Green Dot MoneyPak payment voucher.  Failure to comply with FBI anti-piracy warnings could result in criminal charges and possible imprisonment of up to three years in country jail."  So I think country jail is probably the giveaway that this - if the MoneyPak didn't get you, the country jail might get you.



STEVE:  I wonder if you could be in city jail, or if they just say...



LEO:  Oh, no, you've got to go to country jail, my friend.  And you know what that means.  Oh, lord.  But of course they need to anonymize the payment; right?  Unless - actually the best thing to do would be get a credit card number, and then they could just keep charging you.  Some of them do that.



STEVE:  Well, that's why the traditional hack was to use Western Union MoneyGram.  That was the way the Russian mafia was always extracting money because it was a wire transfer.  And baby, when that is gone, it is gone.  It's over.



LEO:  Yeah, no way to recoup that one.



STEVE:  Yeah.  So unfortunately there isn't anything, Steven, that is special about ransomware.  It's just a particular breed of very clever sort of late-model attack which leverages the malware's presence in your machine in an interesting way.  It doesn't just wipe you out because it wants money from you.



LEO:  But I should say that a backup is always kind of the last resort protection against corruption of any kind, including malware.  If you do have a good backup, at least you can wipe and reinstall, which is really the best way to get rid of this.



STEVE:  Yeah.  I would say, if it's easier for you to use Grandma's Green Eye Money Card, then go ahead and try that.  [Leo laughing]  And if that doesn't work, then maybe just go from the backup.



LEO:  Mike Robinson in Michigan updates us one year after Reaver and Linksys WPS.  Has it been a year?



STEVE:  Yes, Leo.



LEO:  A year.



STEVE:  Yes.



LEO:  This is of course a hack that allows you, even if you're using a secure WPA2 password, allows somebody to break into your system trivially.



STEVE:  Four to 10 hours, and typically half of that time, somebody just doing a passive network sniff is able to obtain access to your router.



LEO:  Nice.  Steve and Leo, I think Linksys needs another black eye.  It's been over a year since Reaver - which is the tool that allows you to do this, free, open, widely available - was developed and released.  And most of Linksys routers have yet to be updated.  Remember Linksys routers, even though they had a Disable WPS button in some cases, it didn't do anything.  It just pretended.



STEVE:  Now, and click that link and look at Cisco's list of routers which are still just flapping in the breeze.



[homekb.cisco.com/Cisco2/ukp.aspx?vw=1&docid=3bccc46248f9417b909e2c1028f6778e_WPS.xml]



LEO:  To their credit, they posted this list quite quickly.  Oh, too bad.  They must have known we were about to check it.  They say "We are currently performing system maintenance in the knowledge base.  Please try again later."



STEVE:  No kidding.  Oh, wow.  For what it's worth, there's, like, maybe 50 routers, and I think maybe a third of them are not vulnerable.  The rest are TBD, to be determined, when...



LEO:  They're not going to update them.



STEVE:  No.  No, you're right, they're not going to do anything about it.  They're just going to - just like, oh, well, not a...



LEO:  It's too late.  If we wait long enough, they'll be obsolete. 



STEVE:  It's a consumer product.  Good luck.



LEO:  Really goes to show, he goes on to say, that Cisco doesn't care all that much about the security of its customers.  I have a WRT54G2 V1.  That's a pretty old router.  I gave up waiting, so I flashed it - the nice thing is it's an old router that's easily flashed - with DD-WRT thanks to Know How, our show.  We did a whole Know How episode on flashing your router.  Frankly, you've got much better firmware on there anyway.  Tomato or DD-WRT are much, much better and don't have WPS at all.  There is still no - I didn't realize it had been a year.  When you talked about Reaver and WPS, you pointed out it would be an almost trivial thing to fix.  But what they're doing is they're just disabling WPS; right?  Nobody has yet put out a WPS that's safe.



STEVE:  Correct.



LEO:  Can you believe it?  Just stupid.



STEVE:  I know.



LEO:  Stupid, stupid, stupid.



STEVE:  And, I mean, what this tells us is there has to be massive pressure on a company before it'll overcome their inertia to fix it.  It's got to be a big black eye.  Which is why Oracle rushes out a Java patch, Microsoft...



LEO:  Department of Homeland Security has to make an announcement.  And you have to put it on the NBC Nightly News.



STEVE:  Yes.  Meanwhile, Reaver is sitting there as a proof of concept.  There's plenty of code now around.  And bad guys can sit somewhere with secured WPA encrypted routers and, in a few hours, gain access.



LEO:  Yeah.  Question 10 wraps it up today.  Peter Smith in London having trouble with GoDaddy and the "new" 5.0.0.0/8 public range.  We talked about that a few episodes before.  I've been a listener for over three years now.  I enjoy the podcast greatly.  It is enjoyable and informative, with enough technical information to make it interesting and informative without swamping a listener.  He's obviously a pretty high-level listener.  I get swamped almost every episode.



We have recently been allocated our own public IP address range from RIPE within the 5.0.0.0/8 range.  This was allocated to RIPE in November 2010, and I believe they started giving those to customers in 2012.  As you remember, this was previously used by Hamachi for their LogMeIn and other VPN solutions.  It's kind of the other way around.  LogMeIn used it for Hamachi and other VPN solutions.



We've run into issues since using the IP range to source NAT our office connections as it seems probably that people are blocking this with an IPS system.  Both GoDaddy and Adobe are unreachable when I use an IP address in this range; however, when I switch the NAT to another IP address, I can connect.  Oh, that's interesting.  Obviously GoDaddy is used to host many sites and servers, and as a result don't have access to any of them.  Interestingly, with GoDaddy, ICPM traffic is unimpeded, but both UDP and TCP are stopped before the first hop on their network.  I have contacted - ICPM is ping; right?



STEVE:  Yeah.  Actually that was a typo from him.  ICMP.



LEO:  MP, right, yeah, yeah, ICMP.



STEVE:  Internet Control Message Protocol.



LEO:  I have contacted both Adobe and GoDaddy, and they are currently investigating the issue.  I'm currently interested in finding out which IPS systems they are both using - this would be a firewall or an intrusion protection system - since this is probably causing the issue.  However, I think it likely they might be reluctant to give out this information.  Obviously this is quite frustrating, and I would like to know what steps you would take if it were your IP range, especially as I think that it is likely this issue will pop up repeatedly for us.  Peter.  What an interesting point.



STEVE:  So this is actually not unexpected.  The back story our listeners, our frequent listeners will know is that, as the Internet began to run out of IPv4 space, the traditional 32-bit addressing scheme, which uses the dotted quad approach, a previously unallocated block, which was huge, 16 million IPs all beginning with 5, were taken off of the shelf and put into service.  This was the private - it was a private IP range only because no one had used it, very much like the 10-dot range.  But 10-dot is officially for private networks.  Five-dot was simply not yet in use.  So what happened is overeager router configurers, that is, human people who set up Internet routers, and I've seen this many times in routing tables, they will block the private address ranges.  They'll block 10-dot everything, 172.16 through 172.31, and they'll also block 192.168 because those are known to be private, meaning that no public router ought to ever see packets with that addressing.  And somehow they get out on the Internet.  I mean, the Internet's a crazy place.  If it can happen, it will.  And so the point is there's really no one to send that stuff to.  So routers are often set up to just drop those.



I have also seen tables which drop all of the previously unallocated ranges.  Some engineer, some Internet engineer somewhere thought they were being clever by saying, well, 5-dot is also unallocated.  I'm going to block that because there should never be any 5-dot traffic.  Well, that was once upon a time, but it's not any longer.  So unfortunately it's probably not the endpoints, firewall, or intrusion protection system, the IPS that he refers to.  It's lord knows what.  It's a router somewhere out on the Internet.



Now, it is possible with various traceroute programs not to use an ICMP message, which he says has no trouble getting through, but you can use TCP or UDP protocol in a tracerouting fashion simply by changing the TTL, the time to live, making the TCP or UDP packet expire while it's en route.  And that way you could determine which router was doing the blocking of the 5-dot address on those protocols, but not on ICMP.  So it might be worth looking at.  But that's what's going on is it's just - it's pure legacy.  There's legacy tables in routers on the Internet that have not been updated to reflect the fact that ranges that used to never be seen are now being seen.  It was really never necessary for anyone to block those.  But somebody was just a little bit overzealous, and they did.



LEO:  There you have it.  Our bonus from Mike in Daytona, Florida:  There is a new Peter F. Hamilton book, the "Great North Road," 900 pages big.  Have you already started it?



STEVE:  Oh, no.  All my time is being sucked into catching up on the prior three seasons of "The Good Wife," which I'm enjoying.  And when I'm not doing that, I'm plowed into the TrebleShooter project for the Quiet Canine effort, and again, making fabulous progress.  I'll have a full update and get the pages updated before long.  But I did go and look on Amazon.  It's getting well reviewed.  People are not all five stars.  It is long.  Apparently it's a mystery, which is interesting.  It also involves procedural police work, which he had in the "Pandora Star" series, the two-volume.  Remember he had Paula was this really cool...



LEO:  Investigator, yeah.



STEVE:  ...investigator.  And so there's some of that.  And there's mystery.  There's chasing aliens around.  This is in the far future, where remember that in Peter's previous work, where we had - in "Pandora's Star" they had wormhole technology and were running trains through wormholes, which I loved.  Here, there's still no faster-than-light travel, but they've figured out how to do teleportation.  But the teleportation is controlled by one family which is multiple generations of clones.  And the clones, as will happen if you keep cloning clones of clones of clones of clones...



LEO:  Transcription errors.



STEVE:  Yes, you get exactly, DNA transcription errors.  So they're becoming a little defective.  Anyway, it sounds like, I mean, I just trust Peter to give us a really romping story.



LEO:  But it's still got sci-fi, it's just a sci-fi detective story.



STEVE:  Oh, it's absolutely science fiction.  It's set in the far future and in a really interesting universe.  So I can't wait to read it.  I haven't yet, but thank you, Mike, for bringing it to our attention.  And some people also tweeted it to me, so I had seen that before I encountered it in the mailbag just now.



LEO:  Audible, let me check, they have a lot of Peter F. Hamilton stuff.  I don't know if they have that one yet.



STEVE:  If not, it's only because it's so new.



LEO:  Yeah, and it's 900 pages.  Nontrivial.  "Great North Road," is that the name of it?



STEVE:  Yes.



LEO:  Yes, they do.  Unbelievable.  Well, I guess I'll be listening to it, not reading it.



STEVE:  Do they say how many hours it is?



LEO:  36 hours.  It's not that long.  Not that long.  I mean, that's long-ish.



STEVE:  Good.  Please listen/read it for us, Leo, and let us know what you think.



LEO:  Here's what the narrator sounds like.



[Excerpt]



LEO:  I love Peter F. Hamilton.



STEVE:  Yeah, he's so good.



LEO:  He's our favorite, one of our favorites.



STEVE:  He really - I would say he's absolutely, I mean, I love the work of Mike McCollum at Scifi-AZ.com, yeah.  Love his work.  But Peter's, oh, boy, I've got to catch up because I haven't done any of the Void Trilogy yet, either.



LEO:  Oh.  God, that goes on and on.  Not my favorite Peter F. Hamilton, actually.



STEVE:  I know.  Yeah.  I think, if I were to recommend...



LEO:  His weakest series.



STEVE:  I would recommend, if someone wanted to see if they like him, "Fallen Dragon."



LEO:  Yeah, that's the one.



STEVE:  I've read it three times.  It's just, oh, it's just...



LEO:  That's a masterpiece, yeah.  The Void series I would say not a masterpiece.  "Pandora's Star"...



STEVE:  And then "Pandora's Star."



LEO:  ...very good, very good.



STEVE:  Yup.  And "Judas Unchained" is the sequel to that.  And then you're pretty much done with blobs that become intelligent.



LEO:  It's a great premise.  I do enjoy the premise of that.



STEVE:  Oh, god.  I love his world.



LEO:  Yeah.  Not so crazy about the Void Trilogy.



STEVE:  Okay.



LEO:  Steve Gibson is at GRC.com, Gibson Research Corporation.  See how that works out?  That's where you'll find all his freebies and his bread and butter, SpinRite, the world's finest hard drive maintenance and recovery utility, even for solid-state drives.  He also makes 16Kb versions of the show available there in audio and transcribed each week.  Elaine transcribes every episode, and the transcriptions are online there.  GRC.com.  It's also where you'd go to ask a question, GRC.com/feedback.  And there's lots of, I mean, it is a treasure trove of eclectic material that Steve has gathered over his eclectic life.



STEVE:  You and I, baby.  Oh, you mean the site.  Yes, it is getting ever more eclectic, actually.



LEO:  Yes, that's what I'm saying.  That's what I'm talking about.  So if you like what you hear here, oh, you get a whole lot more there.  In fact...



STEVE:  Yeah, I've often thought that it's nice that I called the company Gibson Research Corporation because it gives me complete freedom.



LEO:  Right, it's whatever Gibson's researching this week.



STEVE:  Whether it's ketones in your breath, or it's the longest repeating strings, or it's how to quiet your neighbor's dog, we've got it all.



LEO:  You get the idea, folks?  Now you understand what I mean when I say "eclectic"?  Okay.  He also does this show, and we are very grateful to him for it, every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 1900 UTC on TWiT.tv.  Watch live if you can because there's often stuff before and after that's worth staying tuned for.  But if you can't, we make audio, as I said, audio and video versions available after the fact.  Steve's got the baby ones and the transcriptions.  I've got the higher quality audio and the video at TWiT.tv/sn.  Or just go to iTunes or anywhere podcasts are offered, and you can search for Security Now! or TWiT.  You'll find all our shows on all the usual suspects.  Steve, I'll see you next Wednesday.  Thanks so much.



STEVE:  Thanks, Leo.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.








GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#388	

DATE:		January 23, 2013

TITLE:		Memory Hard Problems

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-388.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with a bunch of fun and interesting news of the week, Steve and Leo examine the future of anti-hacking password scrambling and storage with the introduction of "Memory Hard Problems," which are provably highly resistant to massive hardware acceleration.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here.  We've got a lot of security news and an acronym for Java, which I don't think is official.  Also a warning.  If you're about to install Java, there's something sneaky Oracle's up to.  And then we'll take a look at something called "memory hard problems."  Too hard for me.  Maybe you'll understand.  Next, on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 388, recorded January 23rd, 2013:  Memory Hard Problems.



It's time for Security Now!, the show that protects you and your loved ones online; your privacy, too.  And here's the guy who does it all for you, Mr. Explainer in Chief himself, Steve Gibson.



STEVE GIBSON:  We have a massive infotainment podcast for our listeners this week, my friend.



LEO:  Really.  An infotainment podcast.



STEVE:  Yeah, I've been listening, through reading the mailbag and looking at tweets, people just enjoy the podcast.  I mean, they appreciate learning something, but they're also having fun.  And you I think help bring the fun to it, which is a good thing.



LEO:  It's news you can use.  Actually some viewer brought this fun to it.  I showed you this before the show.  And it is apropos today:  "Keep calm, and disable Java on your browser."  It's a play on the Keep Calm signs from Great Britain during the Battle of Britain in World War II.  What did it say, Keep Calm and...



STEVE:  Carry On.



LEO:  Carry On.  In this case.  And it's instead of the royal crown it has the head of Steve at the top there.



STEVE:  Looking down with some disdain.  You're running Java in your browser?  What's wrong with you?



LEO:  It's apropos because I guess there's another, god, I can't believe it, hole in...



STEVE:  Yes, and in fact someone tweeted a great acronym that Java stands for, so we're going to briefly delve into acronyms we love.  I did a little research and found, oh, my goodness, some - my favorite from the old days, because I was actually a - I was a Fiat owner twice.  The little X19 Fiat...



LEO:  Fix It Again Tony.



STEVE:  I love that one.  Or, wait a minute, oh, Feeble Italian Attempt at Transportation.



LEO:  Oh, yeah.  It depends on what kind of car you have because there's also - Ford also has Found On Road Dead, I've heard of that.



STEVE:  Fix Or Repair Daily, that was always my favorite Ford one, yeah.



LEO:  Well, we'll have a few acronyms for you.  And we're going to talk about, now, is this a typo, "memory hard problems"?



STEVE:  That's what the crypto industry has named it.  And I think, when people understand what memory hard problems are, they'll go, okay, yeah, I can remember that.  That terminology makes sense.



LEO:  Okay.



STEVE:  To give a little tease for what we'll be talking about after we catch up on all of the week's craziness, we're seeing clearly, we're talking about it always, people are tweeting me constantly, the fact that people are building machines full of GPUs, graphics processing units, in order to create these massive password-cracking machines.  They're also building them to mint bitcoins because bitcoins are a hashing problem.  Now, the problem with hashing is that one of the criteria for selecting hashes has always been that they be fast because we don't want to burden computers with a lot of work to create a hash.  And, for example, one of the reasons that the AES cipher, Rijndael, was chosen is that it lent itself, the algorithm lent itself to easy implementation, both in silicon and in software.



So while all of those are good properties for ciphers and hashes to have, that's exactly what you don't want if you're using those to protect passwords.  And that's why we keep - now what the industry has done is it's said, okay, we're not going to hash the password once.  We're going to hash it a thousand times.  Or 5,000 times.  Or something.  And the problem is that you can't really solve the problem that way.  That is, that's a linear scaling of difficulty, and there are problems with that.  So we're going to talk about the problems with that, why just things like - we've talked about password-based key derivation, that PBKDF2, which everyone is using.  But we're heading toward a new solution which solves the problem in a way that is much more robust, and that's the domain of memory hard problems.



LEO:  Got it.  I guess.  Sort of.



STEVE:  So a great topic for the week.  And, oh, all kinds of crazy fun stuff, too.



LEO:  Can't wait.  Security Now! is on the air.  Get ready.  Put your beanies on, your propeller heads.  Did you see, by the way, that two bitcoin-based casinos did their annual reports, and they made a lot of money?



STEVE:  I didn't know there were such things.



LEO:  I didn't either.  But this is in Ars Technica today.  SatoshiDice and bitZino.  They don't take money because in the U.S. it's illegal to do that.



STEVE:  Wait, Satoshi was the name of the developer of Bitcoin.  So that's probably where that name came from.



LEO:  Maybe Satoshi decided to cash in.  They did apparently a half a million dollars in business.  I don't know, anyway.  But is it money or what?  SatoshiDice is based in Ireland.  It's a pseudorandom number generator game.  You choose a number, then bet on the likelihood that the rolled number is greater than the one they've selected.  It sounds like keno a little.  But I don't know what it is. 



STEVE:  Oh, interesting.



LEO:  House has a 1.9 percent edge.  That's the profit.  Day in, day out.  That's the beauty of these things.



STEVE:  Wow.



LEO:  It's just math.  Players put down 2.3 million bets in May through December 2012.



STEVE:  And so betting is with bitcoins?  You bet bitcoins and you are paid in bitcoins?



LEO:  And you win bitcoins, yeah, I guess so.



STEVE:  Oh, interesting.



LEO:  And then this bitZino does poker, blackjack, craps, roulette.  So 3.2 million wagers in the second half of last year.



STEVE:  There was actually an episode of "The Good Wife" that I talked about, I think it was probably last year, where it was about Bitcoin.  



LEO:  What?  Really, wow.



STEVE:  The topic was bitcoins, and they were arguing in court whether it was a currency or a commodity because the laws differed depending upon whether it was one or the other.  And it was really interesting.



LEO:  No wonder you like the show.  Holy cow.



STEVE:  Yeah, it's hit the mainstream.



LEO:  Yeah.



STEVE:  Oh, I'm now caught up.  I've seen all of the first three seasons that I had on disk, and all of this season that my media center has been sucking in all season, even though I hadn't watched one.  I am now 100 percent current.



LEO:  That's what he really did last week, folks.  He watched TV.  Admit it, admit it.  Busted.



STEVE:  I can get my life back now.  As long as I don't crack open another Peter Hamilton multiple...



LEO:  I downloaded the audiobook of that new Peter Hamilton.  Have you read it yet?



STEVE:  No, no, no.  I do have work I have to get done.



LEO:  I've got some studying to do, actually.  But maybe after that...



STEVE:  Football.



LEO:  Football study.



STEVE:  You've got to be able to know what's going on if you're going to go to New Orleans.



LEO:  Yes.  "Take your eye off the ball," it says.  That's how you pay attention.  I have no idea.  Excuse me.  I have something caught in my throat here.  Maybe it's just the Java software.



STEVE:  So, many people - I'll talk while you go fix your throat, Leo.



LEO:  Okay.  Please.



STEVE:  Many people have asked for a sort of a summary of Kaspersky's big revelation of a little over a week ago because this was on my radar for the last podcast, but there just wasn't time to cover it.  So I pushed it to this week.  And that is the discussion of so-called "Red October," named after the famous movie, "The Hunt for Red October."  Kaspersky Labs discovered, at the request of one of their unnamed clients, they discovered another massive, longstanding - and by that I mean since 2007.  Some of the files that they've located are date stamped, and they have reason to believe that those dates are valid.  So five or six years there has been in place a very substantial spying network.  It tends to be focused on embassies and diplomatic facilities, largely in Europe and in the Middle East.



They believe that the code originates with Russian-speaking coders due to various hints throughout the code, some subtle, some not very subtle, like there's a batch file that immediately changes the code page which is the way Windows interprets characters into a code page that allows Cyrillic characters.  So that's rather obvious.  But it's littered with little tiny subtleties that say the coders were Russian.  Now, that's of course circumstantial.  You might imagine somebody else could have deliberately, like, chosen Russian-speaking programmers who are not in Russia to do this.  But we don't know.



By analyzing everything they've been able to find, infecting machines, watching how they work, creating sinkhole servers, that is, their own targets - I'll explain how they did that in a second - they learned a lot about it.  All of the attacks start by either being phishing or watering hole attacks, meaning that either email is sent to somebody they want to gain intelligence from, or websites which are not secure, which are often visited by people whom they wish to gain intelligence from, will be altered with well-known exploits.  It's significant that this isn't, from what they've seen, these are not employing the latest cutting-edge, zero-day, what's your Java flaw-of-the-hour sort of problems.  But often very old exploits are being used.



For example, once a machine within a victim network becomes infected, it uses what they describe as a "lateral scan," meaning within that layer of the network, meaning an Intranet scan, using the same old attack that the Conficker worm used.  And it's MS08-067.  Well, the MS08 tells us how old it is.  That was from 2008.  And so what they are leveraging is the fact that probably in this geographic region, maybe more than others, there are many, many fewer Windows machines being kept current with security.  They may not be legitimate.  They may not be registered.  They may not have access to Windows update mechanisms.



For whatever reason, what they've seen is that this network is reusing relatively old exploits, but they are being highly effective.  From the phishing exploits that are used in email, and in some cases bringing up pages on the web, they're exploiting three or four well-known Word and Excel vulnerabilities which have long since been patched in the West, and anyone who has access to Microsoft's Second Tuesday of the Month patching.  But they're being very effective.



In every case the first infection runs what's now being called generically in the trojan industry a "dropper" because it drops a file onto the system.  The dropped file then contains the payload, which goes out and finds the command-and-control system, hooks into it, obtains instructions, URLs and so forth for downloading other modules.  Naturally, in any facility like this, which is going to be long-lived, and in this case from '07, we're talking five years or six years this thing's been around, it inherently has to adapt.



It needs to remain as stealthful as it can so that it's not exposed.  But also it can't just be some code written in '07 which is still going to be doing what they want in 2013.  So it's inherently modular, and it's sort of organic in that, as they look at different systems, they realize, oh, here is an instance of older code that's still part of the same network that hasn't updated itself compared to the newer code.  One of the things they discovered is that, within each instance of this initial sort of hub or root, there will be three domain names hard-coded in.  For example, in one instance that Kaspersky shows, there was nt-windows-online.com, nt-windows-update.com, and nt-windows-check.com.  So sort of innocuous looking.  I mean, they're not named "werehackingyousucker.com."  It's like, if you were looking, and you saw, oh, look, that's, I mean, who knows what Windows does anymore.  So that's sort of believable.



And in general they found about 60 domains that have been registered to this network over time.  When the thing starts up, it verifies that it has Internet connectivity by trying to connect to the three legitimate websites, update.microsoft.com, www.microsoft.com, and support.microsoft.com.  If it's able to do that, it decides that it currently has connectivity, and it does a number of very sophisticated things.



For example, they divide the modules into those they call "offline" and "online," the distinction being that the so-called "offline" modules, even though they do communicate on the Internet, they will write things to the hard drive, like the registry and the log files and so forth; whereas the so-called "online" modules deliberately never record anything.  So they're, like, running within a different - think of it as a security boundary where they might be more vulnerable to being caught, so they behave themselves against monitoring.  They're, I mean, they're just as nasty as anything else, but they never touch the registry.  They never touch the hard drive.  So again, this demonstrates some real sophistication in the overall architecture.



LEO:  You know what this reminds me of a little bit is Flame.



STEVE:  Yeah.



LEO:  Which was the government-sponsored, our government probably sponsored, cyberwarfare tool.  Do you think this is the Russians' version of Flame?  I mean, it's the same age.  It sounds like it's very well written.



STEVE:  Yeah, I mean, this kind of - these level of details demonstrate that this sort of cyber espionage is not science fiction.  We've read several of the books that talk about it.  But this is actually going on.



LEO:  This is a Mark Russinovich novel in real life.



STEVE:  Yeah.  They have pursued this network to the best of their ability.  The problem is that there are chained encrypted proxy servers which have even now prevented Kaspersky Labs' detection of the root master command-and-control server.  So they can see what's...



LEO:  Do you think this is private enterprise?  This sounds awfully governmental.



STEVE:  It does sound governmental.  This is, I mean, it could be a private subcontractor.



LEO:  Well, oh, yeah, I mean, and it could be the Russian mafia.



STEVE:  A lot of money's been spent.



LEO:  Seems like this...



STEVE:  Well, yeah, and they're - looking at their targets - I'm not going to enumerate.  If anyone's interested, just put "Red October" and "Kaspersky" into Google, and you'll find their pages because they've dissected this thing down to the molecular level.  And there are things like listings of all of the embassies, spread out by geographic region.  And the geography tells a story, too.  That is, since this is a so-called spear phishing or watering hole attack, there's reason to believe that this isn't like Code Red or Nimda that just promiscuously scanned the Internet and infected everybody they could.  The point is you want to keep your head down if you're running a network like this.  You want to stay off the radar.  The last thing you want is Kaspersky to get wind of it, as they always seem to, because then you're blown.



So this thing for five years or six years has stayed under the radar.  It's been operating.  And so one of the ways they've done that is to make the infections highly selective.  This isn't just going, registering on everyone's scanners all over the Internet.  They're selectively infecting specific individuals or offices or organizations from whom they wish to gain intelligence.  And they are absolutely wanting not to get detected.



So one of the very cool things about this is that Kaspersky found - remember I mentioned there were three domain names burned into every sort of kernel of this malware.  They looked at, they collected enough samples of it that they found five domains whose registrations had expired:  shellupdate.com, msgenuine.net, microsoft-msdn.com, windowsonlineupdate.com, dll-host-update.com - oh, I'm sorry, it was six - and windows-genuine.com.  And they registered them.  So they registered the domains that had been...



LEO:  So clever.



STEVE:  Yes, that had been retired and expired.  And they are now receiving tens of thousands of connections...



LEO:  Holy cow.



STEVE:  ...from infected machines to their what they call "sinkhole servers."



LEO:  Holy cow.



STEVE:  Isn't that cool?



LEO:  This is, oh, man, this is like a spy novel.  This is great stuff.



STEVE:  It is neat.  So they set up servers on their own IPs, or probably some that are not associated with them, just for safety.  And they registered those domain names which were in the spyware, but which no one had bothered to renew.  That allowed them to acquire them.  They pointed those domain IPs to their machines, and they started getting calls from older malware that was still in place.  And then that allowed them to continue their investigation.  So anyway, that's the story about Red October.  It is a long-lived, keep its head down, try not to get discovered.  It's using old exploits which are still startlingly effective, despite the fact that they're, in the case of an '08 exploit, that's going to be, what, five years old.



LEO:  This is for sure - I've got to think it's the Russian government.  Wow.



STEVE:  It is, well, again, once you discover it, you can see who they've been targeting.



LEO:  Yeah.  Embassies.



STEVE:  And they're targeting...



LEO:  It's governments.



STEVE:  Yes.



LEO:  And by the way, you know they shut it down within hours of this report.



STEVE:  Yup.



LEO:  So.  This reminds me of the Anderson tapes, where...



STEVE:  And so that's the other that happens, of course, is that, because Kaspersky knows disclosing it is going to kill it, they wait to tell anybody until they've gathered all the information that they can.  And then, when they finally are ready, they go public, and the thing instantaneously dies.



LEO:  Like "The Bourne Identity."  We're shutting this down.  Shut it down.  Terminate with extreme prejudice.



STEVE:  Now, we talked, boy, it's maybe been a year, about the really egregious mistake that the TRENDnet webcams made.  Remember that those were webcams that people were putting on the 'Net that anyone had public access to.  The webcam acts like a little web server.  And when you connect to a web server, the web server identifies itself.  Well, that meant that you could scan port 80, if it was port 80.  I didn't go back and refresh my memory.  But you could scan whatever port these things were on.  They may not have been standard HTTP port 80 servers.  But you could easily scan the 'Net for whatever port they were listening on and inquire of them whether they were a TRENDnet webcam.  If they were, it was trivial to start receiving from it the imagery that it was sending.



Well, what appeared on the 'Net, it might have just been yesterday, was really frightening.  And it's been taken down.  Gizmodo wrote about it.  The Verge wrote about.  I mean, it caught people's attention because what you got was a map of the world from Google, with all those little red sticky pin icons that Google Maps uses, for the geographic location of every one of these still open, a year or however long it's been since I last - since this was in the news and discovered, every single one of them that had been found.  And you could click on any of these little sticky pins, and it opened a window, and you were looking into someone's bedroom.



LEO:  Oh, that's handy.  Find your neighbors.



STEVE:  I should have grabbed a screenshot of it yesterday.  What's up now, when I went there checking the link for the podcast, I briefly saw the map, and then it disappeared with a statement saying that Google was no longer servicing Google Maps for this domain.  So the outrage over this immediately went to Google, and Google shut down their access to the Google Maps API.  Oddly, it still comes up briefly and then gets covered up by this message.  So it seems like it's probably possible to work around it.



But in any event, if you disable scripting, and I still had mine initially on from temporarily allowing it yesterday in NoScript, if you disable scripting, then you get a static page that just shows what I'm talking about.  So if anyone's curious, it's cams.hhba.info.  Again, that's cams.hhba.info.  If you go there with scripting enabled, you may briefly see the real map, and then it will disappear.  Yup, there it is, Leo, you're showing it in the video.  And if you disable scripting, you can see just a static slide that they've put up saying that the site is no longer live, and they have no intention of bringing it back.



LEO:  Obviously they just wrote a little script.



STEVE:  Yeah.  Oh, but, I mean...



LEO:  Of course this hasn't fixed the problem with the cams.  It just means it's harder to find them.



STEVE:  Correct.



LEO:  It's not even that hard.  A Google search finds them; right?



STEVE:  Oh, it's trivial.  Yes, I mean, it's really disturbing.  And it's funny because TRENDnet immediately after this said, oh, well, we've notified everyone who has our cameras that they need to update their firmware.  Well, here's a picture of it, folks.



LEO:  Yeah.  See if you're on the map.  Geez, Louise.



STEVE:  Yeah.  Oh, big improvement.  Okay.  Now, the other big news is something that I'm so confused about what I can say that I have to err on the side of not by mistake saying anything I can't say.



LEO:  Now I'm intrigued.



STEVE:  Yes.  Well, this is about Google and YubiKey.  And I alluded to a meeting that I had with Stina.  She was down in Southern California a few months ago.  And that was a reason that I did a podcast on near field technology, because it was due, but I decided, okay, we need to understand what near field technology is.  And what sort of leaked out ahead of schedule was that some guys at Google posted, or presenting a paper toward the end of this month, and there's not much month left, so it's going to be soon, that will be in the - it'll be published in the IEEE Computer Society proceedings.  The paper is titled "Authentication at Scale."



And so what I can say is that Google is working on solving the authentication problem, and YubiKey is involved as a vendor.  So Google is playing with YubiKeys.  And I will be able to say more as more is known.  I've not yet read the paper, although I spent an hour on the phone yesterday with Stina.  And we jumped back and forth so much between this is off the record, this is on the record, that I have no idea what...



LEO:  That's why I never do anything off the record, because I can't keep track.



STEVE:  Yeah.  So...



LEO:  There is an article, and maybe this will help you because this is, once it's public, then it's public.  There's an article in The Verge saying Google wants to ditch passwords, let you log in with the ring on your finger.



STEVE:  Yes.  And Wired.com has one, and technology review had one.  So there has been Google's alternative to passwords.



LEO:  As Wired reports, Google envisions a new form of authentication that would let you quickly sign websites with the help of a minuscule USB key.  Its researchers have been fiddling with YubiKey graphic cards in particular.



STEVE:  Yes.



LEO:  And found it only takes a few modifications to Chrome to get a seamless login process running smoothly.



STEVE:  Okay, good.  In that case I can say that the cool thing here, the reason I just went crazy when I met Stina at the top of the escalator at the RSA security conference those years ago was that she said - I'm walking around, and no one knew who she was, and she'd been kicked out the booth that she had a commitment to share with some deadbeat company.  And so she said, "Are you interested in security?"  And here we are at the RSA security conference, so that was a good bet.



LEO:  A good guess.



STEVE:  Unless I was just there for the buffets or something.  So I said yeah.  And, I mean, she didn't know who I was.  And so she said, "What about authentication?"  I said, oh, yeah.  And so she says, "This is a one-time password that emulates a keyboard."  And, I mean, I instantly knew as much about it as she did because, I mean, that's - really good inventions are like that.  And it was like, oh, my god, this is fantastic.  And so but the beauty of it was, because it was a keyboard emulator, it was a USB keyboard in a little tiny dongle, it worked without software.  It typed for you, into whatever machine you plugged it into, end of story.  One-time password.  Brilliant.  So now, okay, I think I can...



LEO:  So there is an article.  Stina's written on her YubiKey blog at Yubico.com an article describing Google's vision and how YubiKey would be part of that.



STEVE:  And the abstract from Google's IEEE article says - this is their "Authentication at Scale."  They said, and this is public:  "In working to keep cloud computing users' data safe, we observe many threats - malware on the client, attacks on SSL, vulnerabilities in web applications, rogue insiders, espionage - but authentication-related issues stand out amongst the biggest.  When trying to help hundreds of millions of people from an unbelievable variety of endpoints, attitudes, and skill levels, what can possibly displace plain old passwords?  No single thing, nothing overnight, and nothing perfect.  A combination of risk-based checks, second-factor options, privacy-enhanced client certificates, and different forms of delegation is starting to find adoption towards making a discernible difference."



Now, Stina's vision, that is well known to anyone who knows Stina, is they don't want to own anything.  They don't want anything to be proprietary.  They're completely happy to compete in an open market.  She wants everything to be standards.  She wants everything to be open.  She wants no single point of failure.  And this collaboration with Google is really exciting because what could potentially happen is, by making some changes to Chrome, they maintain the zero friction usage, zero software installed.



If you use Chrome - and I should mention, not the current YubiKey.  They'll make deals for people who have existing ones to upgrade to a next generation because there is some really good stuff in the next - in the YubiKey that works with Google.  So we're not going to be able to use the same one.  But the reason is that the technology needs to change a little bit.  In return for that, though, something really amazing happens.



So what would happen is, all that Google would have to do, after they take this out of pilot, is say, okay, now everybody can use this.  And that'll put pressure on any non-Google browser to support this because, for obvious reasons, this thing really could be the thing that catches on.  So anyway, it's very exciting.  And it's moving faster than people expected.



LEO:  I love the idea.  I mean, I presume it would be the second-factor authentication, not primary.



STEVE:  It's strong enough that it would be up to the user.  But what they've got is they've come up with a way of essentially achieving those goals.  The problem with VeriSign identity protection, unfortunately, is that it's VeriSign, and it's expensive.  And the people who get - not the people authenticating, but the people being authenticated to, pay per authentication a stiff price to VeriSign.  And so there's that problem.  Then you have the OneID people who say, oh, yeah, we can get rid of passwords completely.  It's like, well, yes, if you change the entire infrastructure of the world, you could do it differently.  And they want to own it.  It's all proprietary.  I've asked them for security documents, and they won't ever tell me how it works.  So it's like, well, okay, good luck with that.



So the only way we know, the only way this can, any solution can succeed, is if it isn't owned by any one company; if it's a set of standards that are strong enough to really work.  And, for example, you could have multiple tokens.  In Stina's vision, you buy these things at 7-Eleven or Safeway, in the same way you buy prepaid credit cards.  These things are inexpensive.  So you use one as your master identity.  You could have a couple more for pseudonymous identities.  So you can have all of the flexibility that we have now, yet a physical token, a physical hardware token which would both be like the YubiKeys that are now around, both near field and USB, so that it works on your phone, if you've got a USB-enabled phone.  And I have to think that Apple's going to have to fix, I mean, I'm sorry, if you have an NFC-enabled phone.  I have to think that Apple's going to be fixing that with the next release of the iPhone because Samsung is just having a massive party at their expense.



LEO:  And it's so awesome.  And there's so many things you can do with it.



STEVE:  Yeah.  So anyway, that's just - Google has demonstrated obviously their clout, and they've got a browser that people really like.  And I'm wishing that it weren't burning so much of my RAM every time I fire it up, but so be it.  But...



LEO:  You use Chrome?  So you're using Chrome now as your preferred browser?



STEVE:  No.  I fire it up when I'm using the Google Groups because their own groups work just a little bit better in Chrome than others.  I just - I'm still in love with Firefox.  I'm still a Firefox guy.



So Ed Bott did a blog posting whose link I tweeted, I think yesterday, which is really annoying [zd.net/WTCvni].  Ed discovered that, when you are upgrading Java - and he talked about what I've often talked about.  He was talking about the Ask Toolbar.



LEO:  Oh, this thing, yeah.



STEVE:  Yes.  Now, again, it's checked by default.  If you are a person who just clicks the Next button on the wizard in the lower right, you will leave it on, and you will get this thing installed.



LEO:  So frustrating.



STEVE:  But get a load of this.  When it comes up to its confirmation of saying we're done, it'll say "Java has been updated, and the Ask Toolbar has been installed."  Now, you might go, what?  No, oh, no.  No.



LEO:  No.



STEVE:  So a smart person, I mean, any of our listeners would immediately go into the Control Panel and look for the Ask Toolbar in order to say no, thank you, uninstall.  Leo?  They put a 10-minute delay in.



LEO:  Oh, that just sucks.  That just sucks.



STEVE:  So it sits in the background for 10 minutes.



LEO:  Oh, they just are evil.  What is wrong with Oracle?



STEVE:  And then installs itself.



LEO:  Oh, that's just - that's malware.  Sorry, that's malware.



STEVE:  Is that unbelievable?



LEO:  That's malware.  I'm sorry, that's not okay.



STEVE:  It is.  It's unconscionable.  So someone realizes that they didn't remember to uncheck it and says, oh, crap, let me get rid of it, and it's not there.  And they think, well, okay, something happened.



LEO:  It didn't install.



STEVE:  It didn't work.  So, whew.  And then it sneaks in 10 minutes later.



LEO:  Revolting.  Revolting.  I think, well, the headlines are "Oracle's trying to kill Java."  I mean, come on, Oracle.  What the hell?  Oh, geez.  Well, this does kill Java.  That's fine.  Bye bye, Java.



[Talking simultaneously]



STEVE:  It's having a bad time lately.  Ah, well.  So a quick note.  Google added a service that someone tweeted to me.  I wanted to share it with our listeners because there have been websites around from time to time that show you what your IP is.  Well, now you don't have to go to a website.  You just type into Google, what's my IP?  And the first thing that comes up is your IP.  Oh, here's your IP, by the way, and then the standard search results for what's my IP.  So that's very cool.  Just an FYI, a little tip for our users who care about IPs.



Oh, and you do want to make sure you do it over HTTPS.  I don't know for sure, but that's why ShieldsUP!, my own port scanner, uses HTTPS, and that is to bypass ISP caching proxies because that's the IP that nonsecure connections see when you're behind - when you're in an ISP who's using a caching proxy.  You don't really want the IP of the caching proxy, which is where the requests go to Google, and so the IP that Google sees.  Only if you are over SSL are you able to avoid the non-SSL caching proxy.



Now, because we've got so much to talk about this week, and it's involved, I'm punting my discussion of MegaUpload, aka Mega...



LEO:  Oh.  Because there's some real concern about how secure is it.  And they claim AES, but they're sending, I mean, it's an interesting question.  Okay.



STEVE:  It is.  And so it's involved enough that I didn't want to do it.  I didn't want to shortchange anyone.  So next...



LEO:  Give us the bottom line.  Should we avoid MegaUpload?



STEVE:  I don't know for a week.  I won't know till next week.  I mean, as you said, it is so involved, and I just - I had it on my list of things to get to.  I couldn't get to it.  But I will definitely have a complete readout on it.  I do know that they're defending themselves against all this flurry.  There's been a whole bunch.  And so I need to read what everyone is saying, read their defense, and then I'll process it and let everyone know what I think.



LEO:  Great, thank you.



STEVE:  A week from now.



LEO:  A week from now.



STEVE:  Okay.  So I also tweeted this.  It's always interesting when I tweet things because people assume that I'm promoting what I'm tweeting, when in fact I'm making sure that people who care know.  So for people who care, and our listeners know how I feel about Windows 8, the Windows 8 Pro special $40 upgrade offer ends on February 1st, and then it goes up to $199 [bit.ly/13NDlaZ].  So if it...



LEO:  I bet it doesn't.  My prediction.  Just going to make a prediction here.



STEVE:  Well, okay.  It's a Windows blog.  There's the link there.



LEO:  No, they say it ends.  I'm just saying, let's see what happens then.



STEVE:  Yeah, it's like...



LEO:  Because nobody's buying this piece of crap.



STEVE:  It's like Windows 7 security.  Well, in fact XP got extended because too many people are still using XP.



LEO:  Nobody's buying Windows 8.  And making it 200 bucks is not going to help it sell any better.



STEVE:  Oh, goodness.



LEO:  So I have a feeling that we will see a - maybe they'll extend that offer just a little longer.



STEVE:  So of course you can imagine people said, wait a minute, you care about that?  I thought you were a developer, blah blah.  Yes, I get all of this stuff as my $2,500 a year I pay Microsoft for the privilege of having access to all these things.



LEO:  You're performing a service for our audience.



STEVE:  Yes.  I just wanted people to know, if they were thinking about it, in case it does go up on February 1st to $200, you can still get it, that beautiful shiny...



LEO:  You know, the more I use it - I've been reviewing Windows 8 laptops.  The more I use it, the more I wonder what the hell they were thinking.



STEVE:  I know.



LEO:  It is awful.



STEVE:  Leo, how about solving security?  How about...



LEO:  Well, they can do both.  They can do both.  It's not an either/or.



STEVE:  No, I mean, they've got resources.  They're - anyway.  Done.  Yeah.  They're not spending their resources where I would have them spend them.  Now, I have to share this.  I'm a little worried that this got enough coverage that it won't be a surprise for every listener because Friday I was mentioning it to Jenny, and her mom had run across the story.  So it's like, okay, well, if Jenny's mom knows about it, maybe it's no longer a secret.  But I'm sure many people haven't heard about it, and it's just too wonderful not to share.  So this was posted on January 14th on the Verizon RISK Team security blog.  And I'm just going to read it because there's nothing I could - paraphrasing it won't work, and it's just wonderful.  So this is a case study, the moral of which was the title of the blog posting:  "Proactive Log Review Might Be a Good Idea."



So they said:  "With the New Year having arrived, it's difficult not to reflect back on last year's caseload.  While the large-scale breaches make the headlines and are widely discussed among security professionals, often the small and unknown cases are the ones that are remembered as being the most interesting from the investigators' point of view.  Every now and again a case comes along that, albeit small, still" - are you chuckling in the background, Leo?



LEO:  Yes.



STEVE:  "...albeit small, still involves some unique attack vector, some clever and creative way that an attacker" - huh?



LEO:  No, I'm just reiterating.  Clever, creative, yes.



STEVE:  "...clever and creative way that an attacker victimized an organization."



LEO:  Shocking.



STEVE:  "It's the unique one-offs, the ones that are different, that often become the most memorable and most talked about amongst the investigators.  Such a case came about in 2012.  The scenario was as follows."



LEO:  Such a good story [laughing].



STEVE:  You couldn't make this up, Leo.  This is so good.  "We received a request from a U.S.-based company asking for our help in understanding some anomalous activity that they were witnessing in their VPN logs.  This organization had been slowly moving toward a more telecommuting-oriented workforce, and they had therefore started to allow their developers to work from home on certain days.  In order to accomplish this, they'd set up a fairly standard VPN concentrator approximately two years prior to our receiving their call.  In early May 2012, after reading the 2012 DBIR" - whatever that is [Data Breach Investigations Report] - "their IT security department decided that they should start actively monitoring logs being generated at the VPN concentrator.... So they began scrutinizing daily VPN connections into their environment.  What they found startled and surprised them:  an open and active VPN connection from Shenyang, China.   As in, this connection was live when they discovered it.  



"Besides the obvious, this discovery greatly unnerved security professionals for three reasons:  [One] They're a U.S. critical infrastructure company, and it was an unauthorized VPN connection coming from CHINA" - in all caps.  "The implications were severe and could not be overstated.  [Two] The company implemented two-factor authentication for these VPN connections, the second factor being a rotating token RSA key fob.  If this security mechanism had been negotiated by an attacker, again, the implications were alarming.  [Three] The developer whose credentials were being used was sitting at his desk in the office.



"Plainly stated, the VPN logs showed him logged in from China, yet the employee is right there, sitting at his desk, staring into his monitor.  Shortly after making this discovery, they contacted our group for assistance.  Based on what information they had obtained, the company initially suspected some kind of unknown malware that was able to route traffic from a trusted internal connection to China, and then back again.  This was the only way they could intellectually resolve the authentication issue.  What other explanation could there be? 



"Our investigators spent the initial hours with the victim working to facilitate a thorough understanding of their network topology, segmentation, authentication, log collection and correlation and so on.  One red flag that was immediately apparent to investigators was that this odd VPN connection from Shenyang was not new by any means.  Unfortunately, available logs only went back six months, but they showed almost daily connections from Shenyang, and occasionally these connections spanned the entire workday.  In other words, not only were the intruders in the company's environment on a frequent basis, but such had been the case for some time. 



"Central to the investigation was the employee himself, the person whose credentials had been used to initiate and maintain a VPN connection from China.  Employee profile:  Mid-40s software developer versed in C, C++, Perl, Java, Ruby, PHP, Python, et cetera.  Relatively long tenure with the company, family man, inoffensive and quiet.  Someone you wouldn't look at twice in an elevator.  For the sake of case study, let's call him 'Bob.'



"The company's IT personnel were sure that the issue had to do with some kind of zero-day malware that was able to initiate VPN connections from Bob's desktop workstation via external proxy and then route that VPN traffic to China, only to be routed back to their concentrator.  Yes, it is a bit of a convoluted theory and, like most convoluted theories, an incorrect one. 



"As just a very basic investigative measure, once investigators acquired a forensic image of Bob's desktop workstation, we worked to carve as many recoverable files out of unallocated disk space as possible.  This would help to identify whether there had been malicious software on the system that may have been deleted.  It would also serve to illustrate Bob's work habits and potentially reveal anything he inadvertently downloaded into his system.  What we found surprised us:  hundreds of deleted PDF invoices from a third-party contractor/developer in - you guessed it - Shenyang, China. 



"As it turns out, Bob had simply outsourced his own job to a Chinese consulting firm.  Bob spent less that one fifth of his six-figure salary for a Chinese firm to do his own job for him.  Authentication was no problem:  He physically FedExed his RSA token to China so that the third-party contractor could log in under his credentials during the workday.  It would appear that he was working an average 9-to-5 workday.  Investigators checked his web browsing history, and that told the story.



"A typical workday for Bob looked like this:  9:00 a.m., arrive and surf Reddit for a couple of hours.  Watch cat videos.  11:30 a.m., lunchtime.  1:00 p.m., eBay time.  2:00-ish, Facebook updates and LinkedIn.  4:30 p.m., end-of-day update email to management.  5:00 p.m., go home. 



"Evidence even suggested he had the same scam going across multiple companies in the area.  All told, it looked like he earned several hundred thousand dollars a year, and only had to pay the Chinese consulting firm about 50 grand annually.  The best part?  Investigators had the opportunity to read through his performance reviews while working alongside human resources.  For the last several years in a row Bob received excellent remarks."



LEO:  So what is the problem?  He's doing great.



STEVE:  Yeah.  "His code was clean."



LEO:  Very good stuff.



STEVE:  It was "well written and submitted in a timely fashion.  Quarter after quarter, his performance review noted him as the best developer in the building."



LEO:  Wow.  Oh, my.  It would only have been, I mean, if he hadn't given them access to the VPN, I don't - is it illegal to outsource your contracting work?



STEVE:  I bet you that the employment agreements probably had something to say.  If not, it'll be immediately amended to add that.



LEO:  He did what he said he would do.  He provided the work.  It was well done.  It was high quality.



STEVE:  Ow.



LEO:  Probably FedExing the VeriSign token wasn't so cool.  That's, I mean, basically "spyferret" nailed it.  Bob just promoted himself to management.



STEVE:  [Sputtering]



LEO:  Sorry.



STEVE:  I just took a drink of coffee, Leo.



LEO:  That's pretty good.



STEVE:  I almost spit it out on the monitor.



LEO:  Now he's a manager.  That's what managers do.  I would have done it if I could have gotten away with it.



STEVE:  Wow.



LEO:  If you see a Chinese guy hosting the show next week, you'll know what happened.



STEVE:  Oh, no, Leo [laughter].  So, okay.  So this little dip into geek humor, I have a couple things, was prompted by an acronym for Java that we will wrap with.  First, though, I did a little poking around because, as we were saying at the top of the show, I've always - my favorite thing for Fiat was always Feeble Italian Attempt at Transportation.  So it turns out there's a website of these.  And I just put some - oh, I put "car acronyms jokes" into Google, and it found a website for me where I found some I'd never seen before that I particularly - and I don't know why these really - I just - I do like puns, and for some reason puns, I have heard, are considered the lowest form of humor.  But they just always tickle me.  So Buick as Big Ugly Indestructible Car Killer I think is pretty good.  But I have to say I found some for BMW that just give me a kick.  Okay, so BMW stands for Bought My Wife.  Brutal Money Waster.  Born Moderately Wealthy.  Brings More Women.  And Broke My Wallet.  So anyway...



LEO:  People are quite inventive.  There's a lot of...



STEVE:  Oh, they go on.  Now, some are really awkward, like there was Yamaha or...



LEO:  The longer ones are harder.



STEVE:  ...Toyota, yeah.



LEO:  Honda:  Had One, Never Did Again.  Hang On, Not Done Accelerating.  That's a good one [laughter].  That's from LotsOfJokes.com.



STEVE:  So Java's official name henceforth.



LEO:  Yes.



STEVE:  Because this is just too good.



LEO:  Yes.



STEVE:  JAVA stands for - and thank you, whoever tweeted it - Just Another Vulnerability Announcement.



LEO:  Oh, boy.  Wasn't there another one, a new one?  For some reason I think there was a new zero-day, unless, you know, you get - after a while it's just a blur.



STEVE:  Oh, we're just dizzy.  And I did like a tweet that I saw.  I just love - this demonstrates the caliber of geek people that we have.  Actually the Twitter handle is @LethalDosage1, the numeral one.  And @LethalDosage1, whose name is not in his profile, otherwise I would use it, said:  "@SGgrc Steve, you almost have 32768 followers.  I hope you're using unsigned!"



LEO:  Otherwise you go to -1.



STEVE:  Wonderful.



LEO:  That's good.  Somebody's paying attention.  Wow.



STEVE:  Yes, yes, yes.



LEO:  That's funny.



STEVE:  Yup.  Yeah.  For those who are not programmers, if you store a number in a 16-bit representation, you can have it be unsigned, in which case it's a simple quantity which can have any value from zero to 65535, which is the maximum, which is 2^15 plus 2^14 plus 2^13 plus 2^12, all the way down to the zero, which is 65535.  But you may want to be able to represent negative values, in which case the highest order bit, the bit 15 if you number from zero, that is the so-called "signed bit."  So if it's on, that is, if it's a one, then the rest of the bits represent a negative value.  So what would happen at 32767 followers would be the maximum positive number you could represent with a signed 16-bit quantity.  You add one more, and that flips it over, turns the signed bit on, and actually then it becomes -32768, and it starts counting backwards towards zero from there.  So anyway, a nice observation.  I thought that was - I got a kick out of that.  That's good.



Okay.  Also in my Twitter stream today, someone tweeted me a neat picture.  His name is Troy Thompson, and he sent me a flip.it link [flip.it/bdM2b] which is a picture of a lab - and Leo's showing it on the video right now - of a huge table of laptops all running SpinRite at once.  And the caption says something about, I think, they're running SpinRite on laptops which will be raffled off, and so they will have the best, most tested hard drives ever.  Anyway, so I saw that.  I just tweeted back to Troy and said, "Hey, thanks for that, that's a cool photo."  And he sent me a link to a review that he wrote of SpinRite in '07.  So it's dated.  But of course, as we have seen, hard drive technology isn't changing very much.  So I just thought I'd - I'm going to excerpt a little bit from this.



The title is "SpinRite - Review by a Fan."  And so he said, "The SpinRite hard drive maintenance and recovery utility software by Steve Gibson of GRC.com has been around for years.  I first encountered SpinRite during the summer of my sophomore year of college.  This is my personal unbiased review of my SpinRite experiences."  And I've snipped out a bunch there, but he's talking about drives, and he says, "Hard drives are far from perfect.  Instead, they are excellent at hiding the fact that errors happen, and happen frequently.  While the operating system is told the drive is flawless, the drive itself is frantically performing error correction on the fly" - which we all know is true, we've been talking about that recently - "to compensate for the fact that we're rapidly approaching the point where laws of physics are limiting what can be done with magnetic media."  Which of course we talked about.  Inherent economic pressures force companies to always store as much as they possibly can and probably go a little farther than they should.



He says, "By the time Windows System Event log throws errors from ATAPI, disk, or other devices about 'error during paging operation' or such, it's nearly too late.  The drive has run out of ways to compensate for problems, and has finally told the upper-level operating system, 'I'm dying here.'  Kiss the drive goodbye.  Or not.  Enter SpinRite, stage center.



"SpinRite, presently at version 6.0" - as it still is today - "as I write this is still around.  With over 16 years of history under its belt" - and now we're at 20-plus - "SpinRite has achieved a lifespan nearing that of Norton Utilities and other classic disk tools."  Actually I think we're now the last man standing in that regard.  He said, "And I must confess" - and he has in bold italics - "it works precisely as described.  There are those who accuse SpinRite's author, Steve Gibson, of hyperbole and scare tactics, and summarily state that SpinRite is mere snake oil.  Say what you will of Steve's mannerisms, he is by far one of the most talkative tech podcasters I've heard."



LEO:  Well, he just hasn't heard me.



STEVE:  Oh, no, I'm sure he's heard us both.  I'd never have been doing tech podcasts without you, Leo.  He said, "SpinRite's success is not attributable to slick marketing or fakery.  It recovers data when nothing else can.  "One more thing for the geeks:  SpinRite is a svelte DOS and Win32 executable weighing in at a mere 170KB, written in pure assembler.  In my book, this earns Steve Gibson very high geek points."



And then finally, under "Success Stories," he says, "I have used my copy of SpinRite to fix" - in bold italics - "at least two failed hard drives per year amongst my family.  When a friend solicits assistance with a drive recovery, if SpinRite does the job, I urge them to purchase their own copy, too."  And of course everyone knows I have no problem with that policy.  "At EnvisionWare, we have a corporate site license, bootable from the LAN - very handy! - and have used SpinRite to repair" - again bold italics - "four failed drives per year on average, recovering data which was not recoverable by any other methods available at the SpinRite price point.  We have recovered numerous laptop and desktop drives, and we've started running SpinRite on every new system before deployment, ensuring that the drive has been completely worked out before it hits the road.



"I've seen SpinRite run on an unbootable, unreadable drive that was actually making click-of-death type noises, where the internal motor driving the heads across the platters was making a constant clack-clack-clack as it tried to read.  After several days of work, SpinRite had recovered enough data to make the file system readable so we could recover the data.  The drive was completely dead by the time we finished the recovery."



So, and then he goes on.  And he really understands how a hard drive works, talking about sector relocation events and relocated - actually our listeners would care about this.  So I'll continue, just finishing up quickly, "What doesn't kill you makes you stronger unless you're a hard drive.  A word of warning here.  If a hard drive is nearly dead, SpinRite will often warn against running anything except a basic data recovery.  This warning should be heeded. If a drive is marginally readable, or is physically damaged to the point that heat or wear would kill it, SpinRite may very well be the last thing the drive sees.  This is because SpinRite is best used preventively.  In my experience, running SpinRite every few months is a good way to detect far in advance" - he has in italics - "that a drive is going to die."



And of course I absolutely believe that, that when you're running SpinRite, the SMART system is really showing you in an analog fashion how hard the drive is working to recover from problems that it hides.  And the harder it's working, it doesn't say it's going to die soon, but it shouldn't start working that hard.



So anyway, continuing, he says, "The most telling predictors of pending hard drive problems in my SpinRite experiences are:  SMART Sector Reallocation Events or Reallocated Sectors.  In over 90 percent of hard drives requiring SpinRite recovery, there are at least one sector reallocation event recorded by SMART.  You can monitor SMART statistics on your hard drives in real-time from Windows using the smartmontools software provided at smartmontools.sourceforge.net.  Note that, due to the way SpinRite works, a marginal drive may trigger sector reallocations during a SpinRite run.  This is by design and is part of SpinRite's data recovery method.  It's still a warning that the drive is showing early signs of trouble.  I'd recommend running SpinRite multiple times at Level 4 until the sector reallocation events stop increasing.  And keep your backups up to date."



So he says, "Rising ECC or Seek Error Rates:  A notable rise in ECC or Seek Error rates between SpinRite tests over a month-to-month time period can indicate trouble."  And that's one thing that SpinRite shows on the SMART monitor page while you're running it.  And if those do go up, that's an indication that the drive is having trouble.  He says, "My current otherwise-flawless SATA Seagate drive is sailing along in SpinRite now at an error rate of 1,664 seek errors per" - now, he wrote "minute," but it's actually per megabyte are the units that SpinRite shows.  That way it's a constant measure.  So it's at 1,664 seek errors per megabyte.  If that number goes up significantly, like by 25 percent or more, watch out."



And he wraps up with, "Why Don't You Own It Yet?  That's the real question.  If you're not a SpinRite fan already, why don't you buy a copy of SpinRite?"  He says, "There are a few people who should not bother:  You have daily backups of all your data, and a spare drive on hand."  So he's a little tongue-in-cheek here.  "You have RAID controllers or your own SAN, which is backed up."  Or, three, "You don't mind losing your data.  Seriously," he says, it's that good."  So, wow, Troy.  Thank you very much.



LEO:  Nice compliment.  That's great.  Very nice.  And that's the same guy who had the pictures of the laptops.



STEVE:  Yeah.  And, well, that's how I found this review.  I had never seen the review before.  But when I thanked him for posting the cool link of pictures, then he sent me a link to his review.  So...



LEO:  Very nice.  Memory hard problems.  Not hard memory, memory hard.



STEVE:  Right.  So as I said at the top of the show when we were talking about our topic for the end of the show, which is where we are now, the problem is that we are currently  using existing crypto technology in a way it was never really meant to be used.  Someone sent me, it must have been a tweet because it's short, and I don't think I saw it in the mailbag.  So it may not have been a listener.  But the person tweeted, "If my bank locks me out after three misses, why do I need a hard-to-use password?"



LEO:  That's a fair question.



STEVE:  It is, absolutely.  And our listeners know that the reason is not that your bank is actually going to sit patiently by while you guess passwords day and night through the web browser interface, which itself imposes a huge penalty in terms of per guess time.  The problem is that we see ridiculously, I mean, almost as often as Java is getting a new zero-day exploit, somebody is losing control of their password database.  It's happening all the time.  So the problem is, if your bank lost access, that is, got hacked, and hackers acquired the hashes - first of all, if the bank weren't hashing the password, if it was just storing the plaintext passwords, well, they instantly have every account is compromised.  But that requires really bad security practices.  Most times the bank is hashing the password.  So that means that they're storing something which is a one-way function.  You can, given the password, you can get the hash.  But you cannot go the other way.  There's no key.  It's not like a cipher where you can decrypt what has been encrypted.  The hash is a lossy - it's an information lossy process.  It doesn't attempt to retain all the information.  It attempts to create a fingerprint of the password.  It's like, this password gives you this hash.



And so the point is the bank, if the bank only stores the hash, then they don't know the password.  They can't mail it to you.  They can't give it to you.  The only thing they can do is if you provide it again, they can compare it to the one they have and see if it matches.  And if it does, it's almost certain that you are the person logging in.  Not absolutely galactically positively certain because it's possible to have a so-called "hash collision," where different things input result in the same output.  But the chances of that are diminishingly, vanishingly small.  And this is why the password, the hashes have so many bits.  If you had a 256-bit output from the hash, you would have to have all 256 bits come out exactly identical.  And just statistically, that's ridiculously unlikely.  So it's safe.



The problem is that the hashes were designed to be executed quickly.  So in answer to this person's tweet to me, the danger is that the bank would lose its hashed password database.  And then bad guys could, using big monster arrays of graphics processing units which have been custom programmed to run these hashing algorithms fast, could pour millions, truly millions of passwords in, looking for matches against the hashes.  And so that's the problem.  It's not that someone is going to guess your password trying to log in.  It's that the bank will lose control of its database, and then the bad guys, if you have easy passwords which are going to be found through that massive bulk guessing game using graphics processing units, then someone can log in as you the first time they try and take all your money.



So to thwart this problem, the current best practice is to use something called PBKDF2, which is an awkward acronym for Password-Based Key Derivation Function.  The hash we were just talking about is a very weak version of that.  A stronger version is to do it many times.  The idea being you take a salt of some kind, which is hopefully just a random junk.  It's like, for every user account, a random number is - it's called a "nonce" because you just ask for it as just a piece of - it's like a big cookie.  It's just a blob of randomness.  You append that to the user's password, and you hash it.  And you append that blob of randomness so that the same password doesn't always hash to the same result.



So you can put in a user's database, in the clear, in public, this is the nonce that was used.  It doesn't really matter whether that's secret or not, though it's convenient if it's secret, but it doesn't have to be.  Just the idea is we want to make it something that helps make the outcome unique per user.  Then you take the output from that hash, and you may append the nonce to it again if you want, but then you hash it again.  And then you take that output and append the nonce to it if you want, and hash it again.  And so you iteratively hash this maybe 5,000 times.



Now, then you take the result of that as the user's hash.  So what does that do?  Well, when the user is logging in and puts their password in, then on the server end it does this same process 5,000 times that it did when the user created their account.  So it's going to get the same result using the same nonce, the same number of iterations, same password, out comes the same answer.  So you can test it.  The reason this is better than only doing it once is that bad guys have to also do it 5,000 times.  They have to duplicate what the bank does in order to know what the password is that you put in to get the right thing out.  So that slows down the brute-force cracking by a factor of the number of iterations - 5,000, for example.  So that's a good thing.



But here's the problem.  Hardware is getting faster.  It's getting smaller.  It's getting more powerful.  We've got people boasting about, and we've seen pictures, we've talked about, like, racks of PlayStation PS2s, all programmed to crack things.  Hobbyists are building machines that are nothing but graphics processing units with Freon being poured over them in order to keep them cool because they're running so hard and so fast, and they're doing hashing.  It may be a crack station, or they may be bitcoin mining, where a hash is the way you mine bitcoins.



The problem is, I mean, this really is a problem.  Actually it's a problem for Bitcoin that their so-called "proof of work" in the bitcoin currency system, it's called a "proof of work" because you require a certain amount of work in order to create a bitcoin from thin air.  Unfortunately, they used a problem that was not memory hard, that is, a hash.  So the problem is that you can scale with more hardware.  You buy more graphics processing units, you're able to produce more hashes.



Okay.  So we need to talk about parallel processing and pipelining because the weakness of iteration, anything that is iterative can be pipelined, which is a neat trick for speeding things up.  Pipelining was first - it first appeared in early minicomputers.  The way computers used to work is they had very simple hardware that went through steps.  It would fetch an instruction, the next instruction from memory.  Then it would decode that instruction to figure out what it should do.  Then it would execute that instruction.  And then maybe it would store a result back in memory, depending upon whether it was an instruction that was writing to memory or not.  It might just add something in the accumulator and not to memory.



But the point is that execution took these three or four - fetch, decode, execute, store, fetch, decode, execute, store, fetch, decode, execute, store - it took those individual steps.  And everybody was happy.  It's like, wow, we've got minicomputers.  Then they of course wanted more speed.  And they said, well, this is fine, but we'd like it to be faster, please.  And the people making them said, oh, if we make it faster, we can charge more.  So we need a next-generation idea.



So they thought about it, and they were already - already, of course, each of these steps was as fast as they could make it.  I mean, they were fetching as quickly as they could.  They were decoding as quickly as they could.  They were executing as quickly as they could.  So they couldn't make those any faster.  But they realized, hey, those three steps - the fetching, decoding, and executing - they're separate.  That is, say we fetch the first instruction, and while we're decoding that, we fetch the second instruction.  And then while we're executing the first instruction, decoding the second instruction, we fetch the third instruction.  And while we're executing the second instruction, we're decoding the third instruction and fetching the fourth instruction.



So you see what happened, they overlapped those individual stages so that each of those aspects - the fetching part, the decoding part, the executing part - was busy all the time.  It used to be that they were only one third busy.  The decoder was idle during fetching and executing, and the executor was idle during fetching and decoding.  But by overlapping them, they got three times the performance from the same hardware at the cost of a little more complexity.  But suddenly this thing was three times faster.



So this was the birth of pipelining.  It's called a pipeline because, if you think about it, if you think of, like, fetch and decode and execute as connected boxes, or a pipe, instructions come in, and they get fetched; then they move to the next stage, and they get decoded; then they move to the next stage and they get executed.  So they're moving through this pipeline.  And when the pipeline is "full," as it's called, then you're finishing an instruction every single cycle, just as you're fetching an instruction every single cycle, instead of every third or every fourth.  So very cool.



But look at the password-based key derivation.  You can do the same thing with it.  If you use some salt, and you hash it with a password, you get a result.  Then what do you do?  You do the same thing again.  So imagine, instead of just looping that one algorithm, if you're in hardware, you pass that to the next hash chip.  And then it passes it to the next chip.  And it passes it to the next chip.  And you've got, say, 5,000 of these.  The way chips are these days, you might have a hundred on a wafer.  And so you've got a hundred hash functions on one wafer, and you only need 50 of those in order to get 5,000 hash functions.



Now, the first time you put something in, it's going to take 5,000 moves to get all the way through.  But if you put another guess into the front end every single chance, before long, after 5,000 steps, this machine you've made is now spitting out answers at the same speed as a single iteration hash.  So we have completely defeated our password-based key derivation function, which is iterative, by - it's called "loop unrolling."  We've unrolled the loop into a linear array of hashes, and we've created a pipeline.  We put guesses in the front, and nothing comes out for 5,000 cycles.  Then results come out every single cycle.  And this thing runs at full speed, just like there was no iteration at all.  So that's the problem is we're facing a world where people really can, in their living room, in their garage, have hardware that could do a 5,000-iteration password-based key derivation in hardware.  And we're back to square one.



Now, they're prevented from doing 5,000 different guesses at the same time.  So we've slowed them down a bit.  But the point is this doesn't scale well.  Or I should say, from the hacker's standpoint, it does scale the way they want it to.  It's not sufficiently difficult.  So what do we do?  How can we prevent that?  Well, what we want to do is we want to, standing back a bit, we want to raise the cost of computing a password.  So cost comes in different forms.  You could have the temporal cost, that is, the cost in time, how much time it takes to do it.  And that's what the current iterative PBKDF2 approach solves for us is it makes it more time costly.



But the other aspect is hardware.  And that's what we're trying to make expensive.  The problem now is that the algorithms we're using are not hardware expensive.  They were designed to be fast in software and almost elegant in hardware.  And so you can develop, like, field programmable gate arrays, FPGA chips, that are just, bang, create and compute a hash.



So the overall cost is the time it takes times the cost of the hardware.  And we know that what is expensive is real estate.  On a chip, when you make chips from wafers, the bigger they are, the fewer of them you can put on a large wafer because the wafers are typically big, round, they maybe six-inch wafers that then have the same pattern in a grid, and you throw away the ones that are not whole around the circular edge, and you get all the ones that are square in the middle.  Clearly, the smaller they are, the more you get per wafer, and that directly affects the cost.  So we want something which is somehow expensive in physical size, something that forces us to use area.



And one thing which uses space which algorithms don't use is memory.  Storage, we've done everything we can to make it smaller.  The limits of physics have been pushed.  Memory takes space.  If you need memory, then that's going to make your chips bigger, or you're going to need many chips, and then you're going to need to talk to the memory.  And that's going to mean interconnection between your processing and the memory.  And suddenly the whole problem of computing something skyrockets, on orders like 2,000 to 20,000 times.  And it's future proof.



The problem with something which just uses tiny chips and sees how fast they can go is that they keep getting smaller, and they keep getting faster, and they keep getting cheaper.  And so it's cost effective to use more of them.  And if you've got any kind of a process that can be done in parallel, then you're in trouble.  So what we want is memory hard problems, not hashes.  Hashing could be involved, but we want something that we cannot fool.  And that's where the crypto comes in.  Something that cannot be fooled, where whatever it is we do requires, it requires a huge array of memory, and there's no way to cheat.



And the cool thing is it turns out it's simple.  And here's an algorithm.  This is sort of a simplified version, but it's enough that you can get your hands around and I can describe over the podcast, and you'll get it, and it's all you need.  It works.  And that is, you take a - use a hash function.  Use whatever we want - SHA-1, SHA-256, whatever.  Doesn't matter.  And we fill a large region of memory with pseudorandom data derived from the password.  So we take the password and hash it.  Out comes 256 bits.  Store them in the first area of memory.  Hash that again.  Salt it if you want to, mix the password in again, doesn't really matter.  Hash it again, store that.  Hash it again, store that.  Hash it again, store that.  Fill the entire realm of memory.  And we're in the gigabyte realm.  So we've got gigabytes.  Let's do four gigs.  Fill four gigs with this pseudorandom data based on the password.  So every time this is done with the same password, we'll get the same array of noise.



Now, what we need - so that's part one.  What we need is some way to prove that all of that memory was filled and present all the time.  That is, we need a system that we cannot cheat, that there's no way to do this in a little scratchpad somehow.  So what we do is we then take the password and hash it, the same way we started before.  This time we take some piece of that hash, maybe the high end, the middle, the low end, and we use that to address into the array.  So we use that as a pointer into the array and take the data there and hash that with the first hash value.  The output of that is another pointer into the array.  So we look up what's there and maybe XOR it with the password, whatever we want to do, hash that, and take part of that as a pointer again.



And so you can see where we are.  What this does is we have filled an array with pseudorandom bits, huge array.  Then we are jumping in a pseudorandom pattern throughout that array.  And where we go is based on what is stored there.  So the only way, when we're done, to have the final result of this is if everywhere we went we found what we expected to find in that location.  We don't know in advance any of this except that we know that, when we're finally done, we end up with a value.  And we know that any time we put the same thing, the same starting value in, and do this to it, we're going to get the same value out.  And we also know that the only way to do that is if that memory is physically statically present in its entirety as we madly jump around it many, many times, getting the data where we land and using that to tell us where to go next, which is all pseudorandom.



So our path through this array is fixed for a given input, totally unpredictable, and we have to have all that memory there.  Now you could say, well, you really don't.  You could do this massively computationally, where you could instead look up what's supposed to be somewhere and then go back to the beginning and run all the hashes in order to compute what's there and then use that to jump to somewhere else.  Yes.  You could do this with no memory at massive cost of execution time.  And so the idea is that there is a time and memory tradeoff.  But by pulling this out of a purely algorithmic mode into a mode that requires lots of memory, the only, I mean, this is already going to be slow.  And so it's ridiculously slow if you try to emulate four gigabytes of stored pseudorandom data, not by storing it and then bouncing around through it, but by actually having to iteratively compute the value that would be stored somewhere in that four gigabytes and then to have to do it again.



So this thing, it solves the problem.  There's no way, because you were needing memory, which is physically large, FPGAs can't be employed.  It's going to be slow to do it once, but feasible to do it once.  And in fact, this is the technology, a variation on this was developed by Colin Percival, who is the author of Tarsnap, that we've talked about for his cloud computing solution.  He uses this technology, it's called Scrypt.  And it's been adopted by the IETF and will be becoming an Internet - it's on the way, it's on track to becoming an Internet standard in the future as the way to securely protect passwords from brute-force attack.  So it's very cool.



Oh, and there is a competing currency to Bitcoin called Litecoin.  And Litecoin uses this, too.  So I got a little bit of a kick out of it.  On the Litecoin pages they talk about how they're using Scrypt for their proof of work.  And the advantage to existing bitcoin miners is that your GPUs can be still left minting, trying to mint bitcoin because they're of no use minting litecoins.  Your CPU is the only thing that can be used to mint litecoins.  And the cleverness, the beauty of litecoins is they've got a non-hardware-scalable proof of work.  So somebody with a fast CPU is just as capable of minting litecoins as anybody else because Litecoin didn't do the simple hashing.  It's the simple hashing which created this ridiculous bitcoin mining frenzy, where it just isn't worth regular mortals trying to mine bitcoins anymore because we haven't converted our whole living room over to air-conditioned bitcoin-mining systems.  So it's very cool. 



LEO:  Wow, that's really neat.  And what is this other coin again?



STEVE:  Litecoin, L-I-T-E.



LEO:  L-I-T-E.



STEVE:  So, yes, there is another digital currency.



LEO:  But does it make a difference if there's more than one?



STEVE:  I don't know.  I mean, I don't know.



LEO:  It's the same idea as Bitcoin; right?



STEVE:  It's the same idea.  Their page talks about some benefits.  And they know about Bitcoin.  They refer to Bitcoin.  They just think their coin is better.



LEO:  Oh, yeah.  They're trying to create an alternative to Bitcoin.



STEVE:  A coin of a different realm.



LEO:  They say, "A coin that is silver to Bitcoin's gold."  Hmm.  Wow.  Okay.



STEVE:  Yeah.  And it's very cool, though, that they used the Scrypt technology, this approach, which a GPU is no use for.  You cannot use - you cannot mint Litecoins with a GPU.  It just can't solve this problem.  Your CPU can.  But so the point is, their proof of work, the Litecoin proof of work, based on Scrypt, based on this, this memory hard problem, is a much better thing to ask people to do because it's - see, what's happened is the hash has just been exploited.  It's gone crazy.  I mean, there are companies that make Bitcoin mining boxes for people who want to do that.  And they're always being obsoleted.  You buy one today, and it's obsolete in a month because someone came out with a faster way to hash.  You cannot - that won't happen.



LEO:  So you can't cheat on this one.  This is no way.



STEVE:  No, exactly.



LEO:  Well, I'm going to start using Litecoin, then, instead of Bitcoin.



STEVE:  And similarly, you cannot cheat on using this as your password hash function.  It's going to take time.  And no roomfuls of hardware can make it faster.  It's just going to - it's going to be expensive in memory.  It's a memory hard problem.





LEO:  Which is not to say difficult.  Is that what the "hard" comes from?  Or is it some other...



STEVE:  No, you're right, it's not difficult.  In fact, I was just able to explain how it works.  So, I mean, I could explain how this works where I'd have a difficult time, well, I guess I have explained how hashes work.  But there are things that are way more difficult, that are not hard.



LEO:  [Laughing] Which is completely different from a hard end, but we won't get into that.



STEVE:  Or as my dad used to tease me with, "Odd, but not peculiar."



LEO:  You want to know odd but not peculiar?  I'm sitting here, I'm watching my mouse move around, people pulling down menus and stuff on the screen, and I can't figure out how the heck, and I rush over to make sure - because it's the new Mac, and I installed it.  And I rush over - that's what I was doing when I was a little distracted.  I rush over to see if the firewall's on.  Yes, it is.  Is sharing turned on?  No, it's not.  What the heck?  And then Chad said, "Yeah, I just borrowed your track pad."  I was trying to use it.  It's a Bluetooth track pad.



STEVE:  Wireless, yes, yes.



LEO:  Yeah.  The mystery explained.  Steve Gibson is at GRC.com.  Great place to go if you want to find out more about everything he talks about on the show.  In fact, if you have a question, go there, GRC.com/feedback, and you can get some clarification about this or any other topic that's on your mind.  I know we'll have some Java questions for next week, and probably a few about memory hard.  He also does a lot of other stuff there, including, as you know, his SpinRite program.  That's his bread and butter.  You can get that from GRC.com.  And lots of freebies, too.  Lots of great free stuff.  New one coming soon.



STEVE:  And a new service to be announced on the podcast next week.  Our listeners will learn about it first.



LEO:  Follow Steve on Twitter, @SGgrc.



STEVE:  Yes, make my number go negative.



LEO:  [Laughing] Wouldn't that be funny if it did?  I'm follower No. -1.  That'd be very funny.  And we'll be back here next Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 1900 UTC, to do the show all over again.  Episode 389 will be, I guess, next time.



STEVE:  Yes, a Q&A.



LEO:  A Q&A.  Thank you, Steve.  Thank you, everybody.  We'll see you next week on Security Now!.



STEVE:  Thanks, Leo.



LEO:  Bye bye.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.






GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#389	

DATE:		January 30, 2013

TITLE:		Listener Feedback #160

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-389.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!, a really big show for you.  We're going to talk about a new vulnerability in almost every router, on almost every computer, on almost every television set and toaster and microwave oven that allows bad guys to work their way with your network.  The problem with UPnP, coming up next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 389, recorded January 30th, 2013:  Unplug UPnP.



It's time for Security Now!, the show that covers you and your loved ones in an invisible shield, a barrier against the malware, the viruses, the privacy invasions the Internet is prone to.  And we all owe a big gratitude of thanks, a heaping gratitude of thanks to Mr. Steve Gibson.



STEVE GIBSON:  A heaping helping.



LEO:  A turducken stuffed with three kinds of gratefulness to Steve Gibson.  He is the Explainer in Chief and our security guru.  Hello, Steve.



STEVE:  Hey, Leo.  Well, we're here for Episode 389, which is a Q&A, our 160th Q&A.  And we have big news this week.  Really interesting news.  It's been funny because there's been a Twitter storm of people saying, oh, my god, do you know about this?  This was something that just came out yesterday.  Our old friend HD Moore - who is the famous original author and curator of the Metasploit Framework, which we've spoken of many times in the last eight years, and HD pops up on the radar from time to time.  He finished, about a month ago, a five-and-a-half-month scan of the entire Internet for exploitable Universal Plug and Play router ports.



LEO:  Oh, dear.



STEVE:  And he found 81 million.



LEO:  [Laughing] That's not individual routers, though; right?



STEVE:  Yes.  81 individual routers.



LEO:  81 million individual exploitable routers.



STEVE:  2.2 percent of the entire public IPv4 address space has open exploitable Universal Plug and Play routers on them right now.  It's a disaster.



LEO:  And when you say "exploitable," is it theoretically exploitable, or there are known exploits that can take advantage of these...



STEVE:  Known exploits.



LEO:  Oh, crap.



STEVE:  We're going to go into it in detail at the top of the show.  And I have no choice but to quickly add scanning for that to ShieldsUP!.  So that'll be the first change I make to ShieldsUP! in years.



LEO:  Oh, marvelous.



STEVE:  I mean, that's what ShieldsUP! is for...



LEO:  That's fantastic.



STEVE:  ...is to allow people to check themselves.  So I'm going to do that.



LEO:  I'm surprised it's so low, if you say it's only 2 percent.  I would have thought that virtually all routers - isn't UPnP on by default on routers?



STEVE:  No, but this is it.  It should never be on the public side.  It should never be exposed to the Internet.



LEO:  Oh, you're saying that you could, from the outside, use UPnP.



STEVE:  No.  Any hacker, Leo, can take over people's private networks.  81 million of them.



LEO:  That doesn't sound good.



STEVE:  No, this is really bad.



LEO:  That doesn't sound good, yeah, yeah.



STEVE:  And we've talked about this.  We've known about this.  But what was funny was I saw some - there were some dialogues happening in Twitter where people kept the @SGgrc in their dialogue.  And they were saying, yeah, you know, Gibson told us about this two years ago.  It's like, well, yeah.  And I wrote, of course, Unplug n' Pray, famously, 11 years ago when Microsoft first screwed up with their initial UPnP server.  So anyway, you wanted to talk to our listeners first, but then we'll get into all this.  And we've got lots of interesting - I did 11 questions today because a couple are just kind of fluffy.  It was like, oh, well, they're fun, so...



LEO:  You really want to give value for dollar, Steve.



STEVE:  Ah, we're going to give them 90 minutes no matter what.



LEO:  Not time, value.  Just value...



[Talking simultaneously]



STEVE:  Oh, and by the way, it looks like our listeners all just went to ShieldsUP!.  But don't go there yet.  I have not...



LEO:  Oh, Steve.



STEVE:  I have not written that yet.



LEO:  Have you not learned?



STEVE:  I didn't know.



LEO:  Have you not learned?  We brought down, before the show - are you going to mention this underwater cable site on the show?



STEVE:  I think we should because people will...



LEO:  We almost brought it down, we might as well continue to keep it down.



STEVE:  Absolutely.  You tell them.



LEO:  Before we do that, let's talk a little bit about our friends at Audible.com, a great place to go.  Well, I'm going on a midnight flight, for instance, and that means...



STEVE:  To Georgia?



LEO:  Pardon me?



STEVE:  No.  Not to Georgia.



LEO:  Midnight flight to Georgia.  Well, actually, as a matter of fact, I am.  I'm going to Atlanta, and I'm then changing planes for New Orleans.  So you're right, I am on a midnight flight to Georgia.  At midnight tonight.



STEVE:  That would be when, yes.  Thank you for doing the podcast first, Leo, because at the rate we're going, this is going to be a high-value production.



LEO:  All right, Steverino.  Fire when ready.



STEVE:  So, lord knows this is not any news to our listeners.  How many times have we talked about the fundamental problems with the design of the Universal Plug and Play protocol?  The whole concept - and this is it, I mean, it arose from the typical tension which exists between ease of use and security.  Standard, one of our fundamental lemmas of security is that there is going to be competing interests, I guess, between something that's easy to use and also secure.  So, for example, if in a state-of-the-art home environment you've got everything on your network - and, my god, anything you buy now comes with WiFi built in - the televisions, the toaster ovens, you name it, it's got WiFi for some reason.  And in order for these things to self-configure, of course they have DHCP, Dynamic Host Configuration Protocol, which allows them to ask for an IP from your router.



But they also universally now have Universal Plug and Play, which is a system that allows those devices to be discovered, which is the actual terminology used, "discovery," on the 'Net.  It's possible for, for example, Windows or a Mac or a Linux machine to send out a discovery packet onto the 'Net.  Actually on a local network you can use a broadcast packet, which we have talked about in the past, where it's essentially addressed to everybody.  And so the query is who has UPnP?  And those devices that have Universal Plug and Play will respond to that query.  And then the computer starts to talk to them one at a time, asking them about their capabilities, what sort of interfaces do they have and so forth.



So the problem with that is that, well, there are several problems.  First of all, computers respond, too.  So if malware got into one computer, it could send out a query for all the other computers which are currently on and use the Universal Plug and Play to put holes in their firewalls and access them directly because that's one of the main capabilities of Universal Plug and Play is router configuration.  For example, BitTorrent is a well-known deliberate Universal Plug and Play client.  So when you run BitTorrent on a machine in your network, it tracks down your router through UPnP, and it says, hi there.  What is your external IP address?  Because that's not something which is known inside the network.  Inside the network you only have private IP addresses.



But BitTorrent needs to know your current public external IP address so that it can tell other BitTorrents out on the Internet how to contact you.  So it asks the router, what's your public IP?  Thank you very much.  Now, please give me an open port.  And so the router configuration is changed through this Universal Plug and Play dialogue to allow BitTorrent to receive unsolicited incoming traffic to the IP that the router has just disclosed to it and route it to the machine running BitTorrent so that it's able to knit itself into the big BitTorrent network in the cloud.  So there's a typical example of the way this should work.



At no point in time has it ever been suggested that any of this should be functioning on the public interface, that is, on the outside facing surface of the router.  All of this is - Universal Plug and Play only makes sense, it's only designed for inside your home, inside your office, inside your LAN, your local area network, never on the WAN, on the wide area network, on the Internet.



It turns out that through just not caring, I mean, the only way to explain this is that no one cared, a huge number of routers do have Universal Plug and Play exposed, that is, this same interface that I was just describing, very powerful, on their public side, on the public-facing interface, such that, if a hacker knew the router's IP address, that hacker could send Universal Plug and Play queries to the router with the same level of control and power as happens inside because there's no password.  There's no security.  There's no logon.  And here again, I mean, it would be nice if there were.  But if there were, then Universal Plug and Play wouldn't just work by itself, by magic.  And when it's in your home network, it's because there's no security, there's no password, no authentication at all, it is authentication free, that's what allows all of this just to work automatically.



And of course we know, we've talked about it before, the Xbox, for example, game console famously needs UPnP enabled on the router.  For a gaming network knitting themselves together, it needs to open ports through the router to itself so that incoming traffic can get to it.  So, well, and Skype, same thing.  One of Skype's early successes was that it was able to connect to Skype instances behind NAT routers.  And there's a bunch of ways, sort of flaky and not really reliable, but they kind of mostly work for arranging, if you don't have Universal Plug and Play, to connect two endpoints behind routers.



But because it doesn't always work, the Skype system also had to have so-called "relay nodes" which were outside, where, if two endpoints behind routers could not get to each other, then they would relay through this other point.  And that's why you and I, Leo, have famously selectively opened some ports that we use with our Skype clients who give us a non-relay connection because you get a much better Skype result.  What happened was, as Universal Plug and Play became more popular, Skype added that technology.  So now Skype is a Universal Plug and Play user, and it's able to solve this problem by itself by opening ports and finding out from the router, what's my public IP, and then sending that to Skype Central so that somebody who wants to connect to you knows where to send the packets and which port the router opened for that stuff to come in.



LEO:  So that's a good thing.  I mean, it's a convenience.



STEVE:  Massively convenient.  But...



LEO:  And it even required, with some, like, gaming boxes like the Xbox, we've talked about this before, I think they invented, Microsoft invented this for the Xbox because, if you want to Xbox live and play games against other people, you need to open those ports.



STEVE:  Yeah, yeah.  So, but the key is no authentication.  Anybody can access it.  And if this stayed constrained to your private network, that would be enough concern.  Now, listeners who've been paying attention will know that we have talked, I think it was maybe a couple years ago that it came to light that some routers had Universal Plug and Play enabled on their public interfaces.  And I remember clearly saying to our listeners, oh, my god, make sure that's not you.  Log into your router, see whether there's a way to disable UPnP on the WAN.  The problem is there typically is not because it's not supposed to be on in the first place.  It's a mistake.  It's an oversight.



So HD Moore somehow, something, who knows why, what the back story is, he isn't saying, or hasn't said, but starting June 1st of 2012 he launched a project to start scanning the entire public Internet, the IPv4 address space, so four billion IPs, to start scanning it to find out what was out there on UPnP.  And he was scanning at a speed, and with enough servers, I don't know how many or how fast or anything, but he was able to touch every IP on the public Internet about weekly.  This went on for five and a half months, from June 1st, and concluded around mid-November of late last year, 2012.  He found 81 million Universal Plug and Play exposed routers.  Now, the number should be zero.  And there's 81 million.  So what that says is that 81 million routers will respond to a hacker's Universal Plug and Play query and say, yeah, I'm here, what do you need?



LEO:  How can I help you?



STEVE:  How can I help you today?



LEO:  What can I do to make your day better?



STEVE:  My configuration is your configuration.



LEO:  Oh, my god.



STEVE:  The response...



LEO:  But this is different from - I just want to understand this.  This is different because, if you have UPnP turned on in your router, this does not mean you're opening yourself up to the outside world.  It means you're opening up yourself to things inside your network who are reconfiguring your router.



STEVE:  Correct.



LEO:  So how does it happen that the router opens UPnP to the outside world?  Is this WAN administration?  What is this saying?



STEVE:  There is no - there is absolutely, I mean, think about it, think what this means.  This is your router is promiscuously responding...



LEO:  Hey, big boy.



STEVE:  ...to unsolicited incoming nonsense...



LEO:  Wanna sniff my ports?



STEVE:  ...from the public - sniff my ports - from the public Internet and saying, hi there.  What would you like to change?



LEO:  So this is a flaw in the fundamental design of the router.



STEVE:  Yes.



LEO:  Do we know the manufacturers that do this?



STEVE:  Oh, yes.  All 1,700 of them.



LEO:  It's a bug.  Is this a bug, or is this a feature?



STEVE:  Oh, I'm sorry, it's 1,500 vendors and 6,900 products.



LEO:  I'm guessing Cisco and Linksys are one.



STEVE:  Well, yeah, gee, Leo, remember, was it last week or the week before we talked about how many of them hadn't even bothered to fix the WPS flaw?



LEO:  Right.



STEVE:  Okay.  So I'll just share the executive summary from HD Moore's paper.  I tweeted a short bit.ly link to the PDF a few hours ago, so it's in my Twitter stream.  It's bit.ly/upnpflaws, all lower case.  So it's bit.ly/upnpflaws.  And so his executive summary, that's not long, starts out:



"Universal Plug and Play (UPnP) is a protocol standard that allows easy communication between computers and network-enabled devices.  This protocol is enabled by default on millions of systems, including routers, printers, media  servers, IP cameras, smart TVs, home automation systems, network storage servers.  UPnP support is enabled by default on Microsoft Windows, Mac OS X, and many distributions of Linux."  Because, Leo, why wouldn't you want it?



LEO:  But it's not an issue if your router doesn't put this to the outside world.  I mean, if your...



STEVE:  Correct.



LEO:  Yes, if your TV, if your smart TV is plugged in directly to your cable modem or your Mac or your PC...



STEVE:  Well, unless you have both.  Because then a hacker in Russia can log into your smart TV directly.



LEO:  Right.  But if you had a router that didn't do this, you'd be okay; right?



STEVE:  Correct.  And now you understand why top priority for me is adding detection of this to GRC's ShieldsUP! system so that everyone will be able to immediately determine whether they're exposed.  Anyway, so continuing:



"The UPnP protocol," he says, "suffers from a number of basic security problems, many of which have been highlighted over the last 12 years.  Authentication is rarely implemented by device manufacturers" - I didn't even know there was any - "privileged capabilities are often exposed to untrusted networks, and common programming flaws plague common UPnP software implementations.  These issues are endemic across UPnP-enabled applications and network devices.



"The statistics in this paper were derived from five and a half months of active scanning.  UPnP discovery requests were sent to every routable IPv4 address approximately once a week from June 1 through November 17, 2012.  This process identified over 81 million unique IP addresses that responded to a standard UPnP discovery request."  And remember, that number should be zero.  It was 81 million.  "Further probes determined that approximately 17 million of these systems also exposed the UPnP Simple Object Access Protocol (SOAP) service to the world.  This level of exposure far exceeded the expectations of the researchers.



"This paper quantifies the exposure of UPnP-enabled systems to the Internet at large, classifies these systems by vendor, identifies specific products, and describes a number of new vulnerabilities that were identified in common UPnP implementations.  Over 1,500 vendors and 6,900 products were identified that are vulnerable to least one of the security flaws outlined in this paper.  Over 23 million systems were vulnerable to a single remote code execution flaw that was discovered during the course of this research."  23 million remote code execution in their routers.



"Rapid7 worked with CERT to notify the open source projects and device manufacturers vulnerable to the issues described in this paper.  Unfortunately, the realities of the consumer electronics industry will leave most systems vulnerable for the indefinite future.  For this reason, Rapid7 strongly recommends disabling UPnP on all Internet-facing systems and replacing systems that do not provide the ability to disable this protocol.



"Rapid7 has provided a number of tools to help identify UPnP-enabled systems, including the free ScanNow for UPnP, modules for the open source Metasploit Framework, and updates to the Nexpose vulnerability management platform."



So to summarize, 2.2 percent of the total IPv4 address space has exposed Universal Plug and Play services, which is 81 million unique IPs.  About 20 percent of those expose what's called the SOAP API.  What happens is, when you send a UDP packet to the router, the so-called "discovery" packet, it responds with an identification string telling it what version of Linux it's running, what version of which UPnP library it's running.  I mean, it tells you everything you need to know to then send the next exploit packet to it.  But it also tells you where it's running its HTTP web service because that's the second part of Universal Plug and Play.



The first is you use UDP to find the device.  Then it tells you which port its little web server is listening on.  So isn't that handy.  So the attacker receives that information and then makes a port 80 or actually port whatever, it's over the HTTP protocol, but not a port 80.  Most manufacturers have their devices randomly choose a port so that it's not obvious where it's going to be all the time.  But all you have to do is ask it, where is your HTTP service, your UPnP HTTP service, and the router tells you.



So then you connect to that.  And over a well-understood, well-known API called SOAP, which is sort of an XML-ish API, you're able to dump out the router's configuration, make whatever changes you like, and send them back.  And the router will, just as it does if you're an Xbox in the network, or if you're Skype in the network, or if you're BitTorrent in the network, it doesn't care.  It makes whatever changes in its configuration have been asked for.  Meaning, essentially, that it takes the router out of the way for anyone who wants access to your network internally, and all the devices on it are then available.



So in their analysis they found that four development kits accounted for nearly three quarters, 73 percent, of all the discovered Universal Plug and Play instances.  So from their scan and the fingerprints that they were able to obtain, mostly from the thing just saying this is what I have, in the first response package just lays it all out for you, they determined where the software came from that they were talking to.  And there are - unfortunately this is very heterogeneous, I'm sorry, very homogeneous, not very heterogeneous, meaning very few kits have been used across most of these.  And they're buggy as hell.



So they found - there's one kit called the MiniUPnP, which 332 different products use.  69 percent of those still have v1.0, which has multiple exploitable flaws.  A different library, which actually came originally from Intel and then became the Portable UPnP SDK, then it went open source and is called "libupnp," 23 million fingerprints out of the 81 million that replied match a version of UPnP that exposes the system to remote code execution.



And then, get this, Leo:  Only one UDP packet is all it takes to exploit any of the eight newly discovered libupnp vulnerabilities, which as I said affect 23 million routers out on the Internet, and since it's a single UDP packet, you can spoof the source address.  So it's impossible to know where it came from.  Someone drops it on the Internet, aims it at you, and it executes a vulnerability that exists in your router.



So 11 years ago - I've seen some people say, hey, Steve, doesn't Unplug n' Pray, your free utility from December 28th of 2001, doesn't that fix this?  No.  The problem was that, in classic Microsoft fashion, whatever it was, it must have been XP, an early version of XP, first offered, whoa, the Universal Plug and Play interface.  Isn't this wonderful.  We'll be able to configure everything automatically.  They had a bug in their Universal Plug and Play service which allowed that computer to be immediately taken over.  And at the time there were no other Universal Plug and Play devices anywhere.  This was the first instance of Universal Plug and Play.  There were no TVs.  There were no toaster ovens.  There were no BitTorrents at the time, or Skype or anything.  Nothing else existed that used it.  Yet Microsoft, forward thinking, had it turned on even if you didn't need it, and it could be exploited remotely.



LEO:  I'm really convinced this goes back to Xbox and Xbox Live, that they wanted - Xbox Live is the ability to play videogames against other people on the Internet.  And of course...



STEVE:  Yes.  Remotely configuring your router is an absolute need.  I agree.



LEO:  Yeah, well, it's not a need, but it's certainly - most people who buy Xboxes are not going to be sophisticated enough to do that.  And if you do start your Xbox, and you say, I want to - and by the way, this goes back to the original Xbox, as well - and you say I want to play games online, it will say - it says, let me check.  Oh, you can't, you've disabled UPnP.  Please reenable - they call it something else.  But they say please enable it so that we can configure your router so that we can do it.  So, I mean, I remember getting calls from radio listeners regularly saying, yeah, I'm getting this error message on my Xbox.  And if you want to, you can send out outgoing game requests, but you can't accept incoming game requests, obviously.



STEVE:  Yes.  And there have been articles published which show you how to manually configure a bunch of ports.  It's not simple.  It's not like they were...



LEO:  Port-forwarding, all routers support this.  I mean, it's not impossible.



STEVE:  Yes.



LEO:  And so that's what I would end up telling people because I learned from you not to say don't turn that on, but here's what you need to do, you need to port-forward your router.



STEVE:  Yes.  So...



LEO:  But blame Microsoft.  It's their technology, and they actively pushed it on people.  I mean, really actively.  Like insisted on it without any mention of the potential risk.



STEVE:  Right.  And you can imagine then from the viewpoint of the router vendors, this was a feature that their routers had to offer because everyone wanted it.  Everyone was demanding it.  We need our routers to be autoconfig or whatever it is, was probably what the Xbox...



LEO:  Who wants to make the router that doesn't work with Xbox Live?  Not you.



STEVE:  Yup.  Yup.



LEO:  So it really is shameful.  Really.



STEVE:  Yup.  So I looked over the source code which HD Moore has some snippets of in this PDF report.  And the mistakes, okay, they're not even mistakes.  They're not subtle.  And the fact that this was - this portable SDK for UPnP devices originally came from Intel.



LEO:  It was a reference library.  It's what everybody uses.



STEVE:  Yes, well, it was a reference implementation.  And when you look at it, it is so devoid of real-world safety checks that I don't think it was ever intended to be used.



LEO:  Right.  It's just this is how you would do it were you to implement this on your own device.



STEVE:  But of course we removed all of the extra extreme...



LEO:  We made it simple so you can understand it.



STEVE:  Right.



LEO:  And people just used it.



STEVE:  Exactly.  I think that's how this happened.



LEO:  So it's really twofold.  It's the fact that Microsoft had UPnP and encouraged people to use it, and then a bug in the UPnP library...



STEVE:  Oh, not "a."  Not "a."



LEO:  Several bugs.



STEVE:  Oh, my god.



LEO:  That made it possible to do inbound UPnP as well as outbound UPnP.



STEVE:  Yes.  Well, yes.  It should never be "bound," that's the term, you should never have the UPnP service bound to the public interface.  It was always meant to be on the private interface, the LAN inside interface.  It makes no sense to have it on the WAN.  Yet, who knows?  People took an implementation that was never - from Intel originally that was never meant to actually be used in the real world.  And because, I mean, it doesn't have any checks.  None.  No checks for buffer overrun.



LEO:  Oh, dear.



STEVE:  There's a while - no, I mean none.  There's a while loop that is scanning for the string you've received, looking for a \r\n, a carriage return/line feed.



LEO:  It doesn't sanitize the inputs at all?



STEVE:  No, not at all.



LEO:  Just send me anything.  I'll just look for it.



STEVE:  And so this while loop doesn't have any other constraints on its execution.



LEO:  So that's not a dumb programmer.  That was never intended to be in the wild.



STEVE:  Correct.  The only - when I'm looking at the source code...



LEO:  That's like taking example code from a book and putting it in your production product.



STEVE:  Exactly right.  And we've often seen books that say, here's - and you can see that Intel could do this, saying - and it was probably in the footnote or in the text, but that they didn't read.  They just copied the code where it said this is an example of how to use the API.  We've left out all of the checks and balances that you would normally use in real production code because that's, as anyone who's done that kind of coding, you take something simple, and it hugely complicates it to check for every possible thing that could go wrong.



LEO:  And it [indiscernible] it if you're doing example code.  It just gets in the way.  You don't want that.



STEVE:  Yes, exactly, because you think, wait a minute, what's this about?  It's like, oh, this is to check to see if I...



LEO:  This is a range check.  I don't need that, yeah.



STEVE:  Right.  And so this very simple, I mean, simplistic code is in production.  It's in people's routers.  Oh.  And it's bound to the public interface.  So there are a few libraries.  And HD Moore and his group looked at them closely, worked with CERT, also CERT/KR that must be Korea and CERT/CN that must be China, trying to get the word out.  The libraries that they have had access to have fixed all the bugs they know of.  But this was just a visual inspection.  This wasn't, like - it's just really not their job to fix these libraries.  But when they were looking at the code, they're like, oh, my god, how can this be?



And so those things have been fixed.  And in fact even this MiniUPnP library had been fixed, I think it was like several of the things they found were fixed in '08 and '09, but 69 percent of the current MiniUPnP on the 'Net, which was 14 percent of the total fingerprints collected, were still using 1.0 that had none of these fixes.  So, and this is the point that he makes in his executive summary at the beginning is that we think of these as little plastic boxes.  No, you know, I mean, there isn't the same, except for within our own - within our Security Now! community certainly people know about keeping their router firmware up to date and the importance of that.  And we don't - we wish that, for example, Cisco had published router firmware to fix the WPS security problem more than a year ago, but no.



So there's, like, they sell them, and they forget them.  They don't know who their customers are.  And more or less the customers just think of it as an appliance that they plug in.  Their Windows box is busy updating itself multiple times a day.  Chrome's version number has gone into seven digits now.  But the router is sitting there with version 1.0 code that was never meant to be made public, that is exposing itself to the Internet.



So under mitigation, what do we do about this?  The good news is that this all starts with a UDP port 1900 query.  That's the port, port 1900 of UDP that all these boxes are listening on.  That was assigned in the same way that the web uses 80 and POP uses 110 and so forth.  UDP port 1900 is Universal Plug and Play.  ISPs we know are blocking 137 through 139 and 445.



LEO:  That's NETBIOS, and what's 445?  Is that NETBIOS also?



STEVE:  Same, it's the newer version of Microsoft's...



LEO:  That's filesharing.  You don't obviously want to do that on the Internet.  And that was a real big flaw many moons ago.



STEVE:  And that's why, that's what induced me to create ShieldsUP! in the first place was that everybody had their C: drives exposed to the Internet.



LEO:  You'd go to a hotel, and you'd see all the hard drives available to you.



STEVE:  Oh, my goodness, yes.  So what ISPs could do and must do immediately is block that port.



LEO:  And there's no other use for that.



STEVE:  None, no.



LEO:  So there'd be no side effect.



STEVE:  No collision.  There is no reason for any ISP subscriber to ever receive incoming traffic on port 1900.  None.  The router won't open it for incoming use because it's already in use by Universal Plug and Play.  So it's reserved for that.  And there is no need for it out on the Internet.  And in fact, anyone who is interested, if you run a scanner on the 'Net, watch for UDP port 1900.  I bet we're going to start seeing this because the other thing that happened is that all the hackers know this now, too, since yesterday.  The Metasploit Framework is open source.  HD Moore has published every detail...



LEO:  Open source [laughing].



STEVE:  Yes, every detail about how to do this, how to take over 81 million routers anonymously.



LEO:  And he's not doing that maliciously.  He's doing that as a public service.



STEVE:  In full disclosure, yeah.  Before he went public he worked with all the various CERT organizations.  They contacted all the router vendors.



LEO:  Were promptly ignored.



STEVE:  Yeah.  And this is just the problem, is in the same way that there's still Code Red and Nimda out there scanning around, looking for something vulnerable from the Flintstones era, similarly there are routers that are never going to get fixed.  There's 81 million of them now, and it's not clear how many of them are going to get fixed.  And the other problem is many of these do not have an ability, they may in fact disable Universal Plug and Play on the inside but leave it enabled on the outside.



LEO:  [Laughing] That's really bad.



STEVE:  Yeah.



LEO:  So disabling UPnP isn't going to work on all routers.



STEVE:  It's not clear.  It's not clear that it shuts down the demon.  It may just...



LEO:  This is worse than the WPS flaw.



STEVE:  Oh, yeah, this is way...



LEO:  This is horrible.



STEVE:  This is way worse.  Yeah, WPS you have to be nearby.  Here...



LEO:  Right, anywhere.  Could be Russia.



STEVE:  They're not going to sleep in China and Russia right now because they're going to have too much fun with this.  Unbelievable.



LEO:  So mitigation really has to come from the ISP for most people.  You certainly should turn off UPnP in your router.  But I do that routinely.  It may not be enough.



STEVE:  And again, it's why a priority for me is to add detection to ShieldsUP!.  When I disconnect from you in an hour from now, Leo, that's what I'm going to start on.



LEO:  That's easy because you'll just test for port 1900; right?



STEVE:  Well, yes.  But right now ShieldsUP! is a TCP test.



LEO:  Oh, you need a UDP.



STEVE:  Yeah, well, I have all that technology.  I've got DNS servers and all kinds of other stuff.  I mean, it's not, I mean, it'll take me a couple days to nail it down and get it right and do the UI and all that.  But I will.



LEO:  Now, I use ShieldsUP! right now it will tell me if port 1900 is open; right?



STEVE:  Only if TCP 1400 is open.



LEO:  Oh, no, I get it, I get it.



STEVE:  And, now, if you knew which TCP port your UDP service was on, then it would tell you that that was open.  But you'd have to do a 65535 port scan.



LEO:  It's random.



STEVE:  Yes, it's random.  So that's crazy.



LEO:  And I'm sure, but I'm going to ask, that DD-WRT, Tomato, and the other custom firmwares for routers don't have this problem, I would guess.



STEVE:  There are three spreadsheets that I encountered.  And I don't know how I found them.  I don't think they were links.  They may have been links in the report, or they may have been on the Rapid7 website.  But they have published  Google Docs spreadsheets showing all the router makes and manufacturers.  It's like 536 pages long, though.  I mean, it's crazy.  It's an analysis of what they found and the make and model and version number and so forth of all the vulnerable routers.  Fundamentally, I mean, the only way to know is to get a test from outside.



Now, he mentions in the executive summary there's this ScanNow thing.  I did create a bit.ly link for it before I tried it.  And then I decided not to share it on Twitter because it's a disaster.  I mean, hackers write hacking code.  It's not production code.  It's 6MB.  Apparently it requires Java.  Mine, when I tried to run it, it scanned a little bit, then just died.  And who knows why.  So maybe it's useful.  It's bit.ly/upnpscan.  And that will take you to the page to download Rapid7's free scanning tool.  And that's a Windows-only, by the way.  There are instructions for how Mac and Linux users could use Metasploit Framework to do that.



LEO:  Well, that's the other thing.  You could try to exploit your own network.



STEVE:  Well, yes.



LEO:  Through pentesting.



STEVE:  It would be interesting to find out which devices in your own network are vulnerable.  And of course the problem is it would be nice if it were cross-platform, and at this point it isn't.  But it's also...



LEO:  Well, let's just stop Security Now! right now.  Go to work.  We need this.  Get this thing done.  Fix ShieldsUP!.  We need a UDP port scan now, stat, pronto.



STEVE:  I know.



LEO:  What do you think, it'll take you a day?  Two?  Because, I mean, really the clock is ticking on this; right?



STEVE:  Oh, you're not even going to be around for your show this weekend.



LEO:  No.



STEVE:  Okay.  Well...



LEO:  But I'll make sure, if you send Chad the information, we'll plug it like crazy.



STEVE:  Yeah.  I will let you guys know as soon as I have it up.  And, yeah, it's...



LEO:  And we'll tweet it, and I'll, I mean, I'll be at least on email, so I'll be able to tweet it and everything.



STEVE:  Yeah.



LEO:  Rapid7 has a UPnP tester, Zenserver [ph] says in our chatroom.  Have you seen that one?



STEVE:  That's the one.



LEO:  That's the one.  And it's not good.



STEVE:  It's, well, use it at your own risk.  It didn't - it's huge and awkward.  It asks for your email address, so they want to upsell you.  And it requires Java.  Apparently someone tweeted that he had to install Java in order to run it.  I've got my Java well under control here.  So it's not a great solution.



LEO:  Well, Steve's will be the best.  Just get it...



STEVE:  Oh, and that's the other problem is it's an internal scanner.  What we want is an external scanner.



LEO:  Which is what ShieldsUP! is.  Your servers probe our network and then report back on what the results of the probe have been.



STEVE:  Yup.  I'll have it up in a couple days.



LEO:  Okay, good.  Thank you, Steve.  And of course it will be written in assembler.



STEVE:  Yeah.



LEO:  Not that it matters because it's server-side.  Although don't you - you used to, and I think you still do have a download that I can run also; right?  There's like an additional little...



STEVE:  There was something I had, I don't even remember the name of it now.



LEO:  I'm trying to remember myself.



STEVE:  It was some little agent thing.



LEO:  Yeah, the agent, yeah.  You don't do that anymore?



STEVE:  No.  There was just no need for it.



LEO:  No need for it.



STEVE:  I think I did a rewrite of the whole technology, and I obsoleted that.



LEO:  And what we're trying to do anyway is to see what it looks like from the outside world.  That's what you report back.



STEVE:  That's the whole point, yes.



LEO:  Well, you should still disable UPnP on your router, if it's enabled.  I don't think anybody who listens to this show has it enabled.



STEVE:  Right.  I would say, if you don't know you need it, disable it, and we'll hope for the best.  And I will very soon have a proactive test that anyone can just go to GRC, I'll make it easy to find, and it'll just send that packet to you and let you know if your router responded or not.  And if it did, that's not good.



LEO:  And to reiterate, does DD-WRT or Tomato, do you know, or have you - it's a lot of...



STEVE:  I don't know, but I have to imagine that at least the latest versions of them are fixed.  So I would say, across the board, get the latest firmware you can, for whatever router you're running.  And that's another point that I wanted to make.  I'm glad you brought it up again, Leo.  Many existing routers who are still using the standard manufacturer firmware may have this problem.  But switching to, as you said, Tomato or DD-WRT firmware, if it's available and compatible with your router hardware, that also solves the problem, presumably.



LEO:  And I would guess, but I'm going to have to check this database, that Apple routers are not prone to this.  They don't actually have UPnP.  They use NAT-PMP instead.



STEVE:  And remember, it's not the UPnP per se that's the problem.  It's the external exposure, which is a complete mistake.



LEO:  Right.  But in theory, if you didn't have UPnP in your router for whatever reason, it's unlikely that there would be an external exposure, like they would put in a feature that they don't give you access to.



STEVE:  Yeah.



LEO:  Yeah, okay, wow.  This is terrifle.  Terrible.  Terrifying and terrible.



STEVE:  Yeah, well.  I didn't need anything more to do, but I've got to do this.



LEO:  Oh, I'm so sorry.  But, I mean, golly, get to work.



STEVE:  Oh, it'll be good.



LEO:  I'm sorry.  Get to work.  Oh, my goodness.  Well, it's frustrating to not be able to test for it; right?  You don't know.



STEVE:  Yeah.



LEO:  Amazing.  Continue on.



STEVE:  So I'm just wondering whether - the ScanNow utility does allow you to give it a starting and an ending IP.  And if you knew a friend's IP, you could run ScanNow with that single IP as the starting and ending IP.  And they mention in the documentation that that causes it just to scan the one IP.  And that would route the packet out through your router across the Internet to their router and back.  So you could use, if you had a partner, you could use ScanNow...



LEO:  You mean the built-in Windows tool of Scan Now.



STEVE:  No, no, no, sorry, no.  This thing they call ScanNow...



LEO:  This Rapid7 thing, yeah.



STEVE:  The Rapid7 thing that you get at bit.ly/upnpscan.  If you set that up outside your network, that is to say on someone else's network, and knew what your public IP was, you could say, okay, John, scan me.  And then that...



LEO:  Could you...



STEVE:  I think that would work.



LEO:  Could you use something like Nmap or tools like that?  Nmap's used to do...



STEVE:  Well, you could certainly use Metasploit.  You could use Metasploit.



LEO:  Use Metasploit, yeah.



STEVE:  But the idea is it's got to be on the outside.  So you need...



LEO:  I get it, I get it.



STEVE:  You need someone else...



LEO:  You need a friend to do it.



STEVE:  ...a friend to send it in your direction from the outside.  And of course ShieldsUP! will do it in a day or two.



LEO:  This is traditional pentesting.  This is what people do.  They look for vulnerabilities.  And now there's another one.  We should offer a service.  I'll scan you.  I'll scan you if you'll scan me.



STEVE:  Well, I have that.  It's called ShieldsUP!.  It just doesn't do this one yet.  But it will.



LEO:  And again, we're not recommending Rapid7.  It crashed on Steve's computer.  I'm seeing others in the chatroom say it crashed for them.  You have to use Java in the browser to make it work.



STEVE:  Yes.  It's a piece of junk, actually.



LEO:  Yeah.  So we're not saying that's the solution.  It just seems to be the one available right now.  You know what, I'm going to put the chatroom to work.  Maybe by the end of the show they'll have another choice.



STEVE:  Okay.  So, many people asked about, want the full security dump on Mega, Kim Dotcom's new offering.  And because of all this, I didn't get to it again.  But it will be the topic for next week's Security Now! podcast.



LEO:  We can do triage.  Pick the biggest vulnerability first.



STEVE:  Yeah.  We have - we're sorting these.



LEO:  So next week, good.  Look forward to it.



STEVE:  Yes.  Okay.  A little miscellaneous kind of fun stuff.  I don't know why I got this newsletter.  I remember I subscribed to it years ago.  In fact, the email address it came in on demonstrates how long ago it was.  It's the Journal of Physical Security.  And we have a listener who's at the Argonne National Laboratory or something because I'm dimly remembering this.  But the new issue of the Journal of Physical Security came out.  And this is sort of interesting.  I just thought I'd give our listeners a heads-up.  It's jps.anl.gov.  So JPS of course is Journal of Physical Security.  So jps.anl.gov.  And of course ANL is Argonne National Laboratory.  And just to give you a quick little table of contents, they call themselves "The first scholarly, peer-review journal devoted to physical security R&D."



The first paper, pages 19, is "The Japan Earthquake and the Tsunami:  Their Implications for the U.S."  Paper 2, "Lock Opening by Bumping:  Physical Analysis and Secure Lock Designs," pages 1021.  The third paper, "How to Choose and Use Seals," as in, like, I don't know, King Arthur and wax or something.  And that's pages - so how to choose and use.



LEO:  I want to subscribe to this.  This sounds like the best journal ever.



STEVE:  It's wonderful, yes.



LEO:  Is it email only, or is it a print journal?  I want it.



STEVE:  Just go over there, yeah.  It's neat.  So that's pages 2231.



LEO:  This is great.  This is the best magazine I've ever heard of.



STEVE:  Paper 4 is "Election Security:  Don't start with fraud investigations, start with security investigations."  The fifth one is a "Viewpoint Paper:  Common Election Security Myths," pages 4345.  And then, get this one, Paper 6, by D.B. Chang and C.S. Young:  "Comparison of Window Stresses from Explosions and Projectiles."



LEO:  It's the government publication.



STEVE:  Yeah.



LEO:  From the Argonne National Labs.  I mean, this is not hackers.



STEVE:  No.  This is...



LEO:  This is our tax dollars at work, ladies and gentlemen:  "The first scholarly peer-review journal devoted to physical security R&D."  I love this.  You could subscribe free of charge.  Argonne National Laboratory.  By the way, just as long as I've interrupted you, somebody in the chatroom has come up with this Android program called Port Scanner, lets you scan ports on a remote host via its IP or domain name.  Now...



STEVE:  But if it's only TCP...



LEO:  It's got to be UDP; right?  So we've got to look at this and see.



STEVE:  In which case you just want 1900.



LEO:  So if it did UDP, you would just scan port 1900 UDP.



STEVE:  Oh, and the other problem is you need to actually send a deliberately formed discovery packet.



LEO:  It's not just a ping.



STEVE:  Right.



LEO:  Ah.



STEVE:  Yes.



LEO:  You have to wake it up and say...



STEVE:  Yeah, I'll be busy, Leo, for the next couple days.



LEO:  Yeah, interesting.  All right.  So this isn't enough.  Jps.anl.gov, I love that.



STEVE:  Isn't that wonderful?



LEO:  That's the best magazine I ever heard of.  They don't come out very often.



STEVE:  No.  In fact, when I got it in my mail...



LEO:  Not even yearly.



STEVE:  Yeah, it's been a long time.



LEO:  It's only six volumes in eight years.



STEVE:  Yeah.  But they're good.



LEO:  They're good.  They're juicy.  You can download them as a PDF.  I'm sending these to my Kindle right now.



STEVE:  "Comparison of window stresses from explosions and projectiles."



LEO:  Freaking awesome.



STEVE:  Ever wanted to know.



LEO:  Who has that job?



STEVE:  And lock bumping is really interesting, the fact that pins in a lock can be caused - just by knocking on the lock, you're able to use some vibrations in order to migrate the pins to their splice points and then end up being able to turn the tumbler.  So, yeah.



LEO:  Apparently there's a whole team at the Argonne National Laboratory that does this stuff.



STEVE:  A bunch of monkeys.



LEO:  Now, that's what tax dollars should go to.  This is wild.  Okay.  And it's available via PDF for free.  Good.



STEVE:  Okay.  So I'm going to skip the PDK update.  We'll do that next week because we're running short of time.  I did get a nice tweet from a listener, Dan Fox in Illinois, who has a how-to on running SpinRite in a VirtualBox VM.



LEO:  Oh, good.



STEVE:  On Windows 7, Mac, or Linux.  And so we had talked about there was a listener, a show listener who talked about booting an external Mac drive, thus the Mac was running on that drive, not on the Mac's internal drive, and then running SpinRite on a VirtualBox VM in order to run it on the Mac's native drive, which is possible.  He referred to a bunch of command line options or necessity, and Dan has it all laid out.  So it's another bit.ly link that's easy to remember:  bit.ly/srvm, as in SpinRite Virtual Machine, SRVM.  And so it explains how to do that.  And he said, "P.S.:  I met Leo in early June of last year after a recording of TWiT and showed him a prototype of my Masters Project called TrustAuth on my MacBook Pro."



LEO:  Yes.



STEVE:  "I'm sure he'll remember it."



LEO:  I do.



STEVE:  "It's an authentication system using public key crypto instead of passwords for web logins."



LEO:  I didn't understand it at all.



STEVE:  Another smart listener.



LEO:  But he's smart.



STEVE:  And then Michael Vail in Throop, Pennsylvania says, "Yes, Virginia" - this is very short - "SpinRite is for real.  I'm a proud owner of SpinRite 6 and finally got to use it.  My father-in-law's computer died hard and of course had no backup despite having an irreplaceable photo collection.  The drive was in such bad shape that it took SpinRite almost exactly three weeks.  But SpinRite was able to recover 500 photos, including ones of people who had since passed.  Thank you for a great product and for all the sci-fi recommendations.  I bought ALL" - he has in caps - "of Michael McCollum's after reading 'Euclid's Wall.'  You and Leo have great taste."  And I have to say, Michael McCollum's stuff, if you liked "Euclid's Wall," you're going to love the other stuff.  They're great and reasonably priced.



LEO:  So you know what, in the interest of time, let's go right to the questions; right?  You ready?



STEVE:  Yeah.



LEO:  You feel good?  You've got your thinking cap on?  Listener-driven potpourri No. 160, starting with Mike Nash in Salt Lake City, who asks the question we all ask:  Am I really secure?  Steve, you continue to receive so many questions about SSL sessions, certificates, and concerns over whether the connection is truly secure or not and whether the hosting network might be intercepting and spoofing the remote host's SSL certificate.  So what if you were going to create a single web page that users could visit any time they're worried to show whether they're really secure or not?  In other words, if you go to GRC, and it's maybe an SSL site, and you would say, hey, you should be seeing this.  What are you seeing?  Is that possible?  Could you do it?  Thanks for the great information and laughs along the way.



STEVE:  So this is the note that I encountered two weeks ago, where I said, oh, my god.



LEO:  What a good idea.



STEVE:  I can do that.



LEO:  Did you do it?



STEVE:  And it's what I've been working on ever since.  I brought it online Friday night.  And it stayed up for about an hour or two and then died.  Now, the bad, well, and unfortunately it took our eCommerce system along with it because...



LEO:  Oh, no.



STEVE:  [Laughing] And in the morning, on Saturday morning I got up, and it's like, uh-oh, what's not working here?  And it's not Peter Gutmann's fault.  You remember Peter.  We had him on the show in 2006 [SN-077 January 2007].  He's a fantastic security cryptographer, cryptologist, researcher in New Zealand.  We had him on the show in '06 because he fully examined Windows Vista's DRM content protection model, and he wrote this beautiful paper called "The Longest Suicide Note in History" ["A Cost Analysis of Windows Vista Content Protection"].



LEO:  By the way, Microsoft's still alive.  But okay.



STEVE:  Yeah.  But Vista didn't last very long.



LEO:  Vista didn't last.



STEVE:  So he was certainly right about that.  Anyway, I use a library called "cryptlib," which is Peter's.  It's very nice and very clean.  And it turns out that there were some things I didn't understand about the way it was caching sessions because in doing this test - in fact, Leo, you could probably grab this PNG, if you want to take a look at it.  It's just GRC.com/ssl_fingerprints_technology.png.



LEO:  Dot htm.



STEVE:  No, .png.  It's a picture I made of the web page when it was working.  Yup, there it is.



LEO:  Yeah.  It's the most I can blow it up.  It's so long, I see why, it's formatted at - so it's so long, I can zoom in a little bit, but you can't really read it.  Wow, this is cool.



STEVE:  Anyway, so this...



LEO:  So why did it crash?  What happened?



STEVE:  Oh, it's that I announced it into my newsgroup crowd.



LEO:  Oh, you told people about it.



STEVE:  Yeah, and they all began to play with it.



LEO:  Oh, dear.



STEVE:  And so it was reissuing sessions for sessions it had already secured.  I was trying to obtain the security certificate from them.  But, being smart, Peter reestablishes existing sessions using the standard SSL session resumption technology, so he doesn't get a security certificate every time.  I didn't understand that.  He and I have a dialogue open now, and I have some other questions and confusions.



Anyway, what this will do when it's up, it's not up now, is exactly what Mike was asking for.  I was hoping that I could make it completely automatic, that you could bring up a web page that would get the fingerprint that it has received from the server and compare it to one that it has received from me and see if they're different.  Unfortunately, JavaScript does not have permission, for reasons I don't understand because I don't see it being any kind of a security problem, but there is not in the current JavaScript API a means of obtaining security information about the session.  Privileged JavaScript, running as an applet, for example, in Firefox, can get that.  But that's an applet, and I didn't want to do an applet.  And then it would only be Firefox and not Chrome and IE and Safari and Opera and so forth.



So what this does is it's still pretty simple.  If you're anywhere where you think someone may be spying on you in your company, in your educational institution, anywhere, you can simply go to this page, it'll be called "Fingerprints," and just bring it up.  And it will show you a block of the most popular websites' fingerprints and also GRC.com, where you happen to be.  You then check the fingerprint that your browser sees by right-clicking on the page and saying "View Certificate," and all the certificates show you the fingerprint.  The key of this is, it's not possible to forge a fingerprint.  That is unforgeable.



So an SSL proxy, as we've discussed often, can forge the identity of a remote site if your computer trusts it.  And it would trust it if it has received a certificate authority cert from your company, from your university or whatever, in which case it can do on-the-fly forgeries.  But it's not possible for it to duplicate the actual fingerprint of the remote server because the fingerprint is everything.  It, for example, includes the server's public key.  Well, it can't use the same public key because that only matches the private key.  And no one knows what the remote server's private key is.



So the point is I will, probably next week, announce that this system is up and running.  And it'll be the first new service that GRC has offered in a long time.  Or at least I thought it was.  Now it looks like we're going to have the UPnP scanner also.  But it'll be very cool 'cause it'll allow people to just quickly check to see if anyone might be running a man-in-the-middle attack on them, through any form whatsoever.  So it'll be very cool.  And thank you, Mike, for the idea.  I replied to him immediately when I saw his note and thanked him and told him that I was going to get on it and hopefully announce it in two weeks.  Well...



LEO:  You've got too many things to do now.



STEVE:  Yeah, yeah.



LEO:  That one's going to wait, as well.  Question 2 comes to us from New Jersey.  PJ says:  In the last couple of Q&A podcasts the topic of corporate root certificates has come up in relation to a company being able to intercept and view all SSL traffic to its employees.  Just what we were talking about in the last question.



STEVE:  Yup.



LEO:  Is it true that IE uses the root CA on Windows, but Chrome and Firefox use their own CA?  Or their own list of CAs, I guess.



STEVE:  Right.



LEO:  If yes, does that mean if I install a browser after a computer's been issued to me, then my company won't be able to decrypt SSL traffic to this alternate browser?  I guess this would only work if the web proxy or gateway does not require the root certificate before allowing you to proceed.  Is that true?



STEVE:  Well, it's not quite correct.  What very likely happens is that, when your computer is given essentially a fraudulent certificate authority certificate, it is also given a client certificate.  We've not talked about that very much because our typical use of SSL is only to authenticate the remote server.  We're anonymous, so we're making an anonymous connection from our end to a non-anonymous authenticated server on the other.  But there is in the SSL protocol the provision for the server asking you for a certificate.  Well, we don't normally have one.  I mean, most of us don't.  Except that, in a corporate setting, this spying SSL proxy, this interceptor, it would require a client certificate because it also wants to identify who's making this request.  So it's going to lock onto you and ask you for a client certificate.



So what that means is, if you had a computer that came in, you brought your own computer in from the outside and tried to connect it to the corporate network, it would probably fail.  It would say, I'm sorry, this computer is not authorized to use our network.  What that really - that's code for we asked for its certificate, and it didn't have one, so go talk to IT.  Well, of course, if you talk to IT, they'll give you not only a certificate, but a fraudulent certificate authority, and they'll say, oh, now you'll be able to use your computer on our network, which opens it up to spying.  So that's likely what happens.



Now, as for certificate authorities, it is the case that Firefox, from day one, implemented their own - they call it NSS is the - it might stand for Netscape Security Service or something.  That's the library, their own SSL library.  It contains all of the Mozilla security infrastructure, and it does have an entire populated certificate authority store.  So that's true for Firefox.  Obviously IE is going to use Windows' native store.



And I wasn't sure about Google because from the stories we've talked about in the past we've heard them being very proactive with certificates.  Yet when I was doing the work for the fingerprinting system last week, I noticed that the dialogues that came up in Chrome looked like Windows, which led me to believe that Chrome was in fact using Windows' security model.  So I did some digging, and I found Google's - they call it the "Root Security Policy."  And they said, "Google Chrome attempts to use the root certificate store of the underlying operating system to determine whether an SSL certificate presented by a site is indeed trustworthy, with a few exceptions."



And then they say, "In order for Chrome to be able to trust a root certificate, it must either be included by the underlying operating system or explicitly added by users," which of course we're talking about here in the interception concern.



"If you are a root CA, the following contacts should be used."  And then they list how to get a hold of Microsoft, Apple, the Linux people, and Android.  If you were a certificate authority who wasn't - who was, like, just launching, you would need your root certificate moved into all of these places.  So they're saying don't call us.  We're using the OS's underlying technology, not our own.  So that's the answer.  Everybody uses the OSes with the single exception of Firefox.



LEO:  And that's probably as it should be.  I mean, you don't want a whole bunch of...



STEVE:  I think so.



LEO:  ...cert stores.



STEVE:  No, they'd be out of sync and messed up and, yeah.



LEO:  And, well, the security issues would be significant, as well.



STEVE:  Yes.



LEO:  And we do install, I have installed my own certificate, just once, a certificate authority.  And I think it was LastPass.  I'm trying to remember.  I had to run an app for it to authenticate.  I'm trying to remember.  But it came with a little plugin that you'd run, and then it would use their own - which obviously is a scary thing to do.  But in this case...



STEVE:  I was just going to say, that's scary.



LEO:  I think it was LastPass, but I'm going to have to try to remember.  Anyway...



STEVE:  Don't know why it would have been unless there was a standalone app or something.



LEO:  Yeah.  It had to do with using its - I don't use it anymore.  I use Google Authenticator now.  But remember you used to have a standalone app that you would run for LastPass to do second-factor authentication?  So you'd give it your password, and then it would say, if this isn't a trusted machine, it would say, all right, now you have to run it, and you can put it on a USB key.  But in order for it to work you'd have to install the certificate authority.



STEVE:  Ooooooooooooooh [laughing sardonically].



LEO:  You don't remember that, huh?



STEVE:  No.



LEO:  Yeah.  Well, anyway, I now use Google Authenticator.  Although probably that certificate is still sitting...



STEVE:  Still there.



LEO:  Yeah, it was Sesame.  Thank you, Serge.  Sesame was the name of the program, the LastPass program you'd run.  And it would give you a second-factor code.  But it  wouldn't work unless you had their certificate on there.



STEVE:  Well, okay.  It might not have been a certificate authority.  It might have been...



LEO:  It might have been just a certificate.  You're right.  You're right.  It wasn't a CA.  What am I thinking?  Of course it was just a certificate.  Which happens all the time.  I install certificates.  Whenever I use PGP you install certificates.



STEVE:  Exactly.  Exactly.  To identify your system to it.



LEO:  Right, yeah, doy.  Stupid of me.  Never mind.  Forget I said a thing.  Back to the questions.  Lee in London, in England...



STEVE:  Let's skip that one because we're going to have to skip a few.  We're running out of time.  And we've spent lots of time...



LEO:  Yeah, sorry, and we started late because I had to give a tour.  My fault.



STEVE:  But 4 is a good one.



LEO:  Yeah.  Bill Welker in Colorado Springs, Colorado:  Steve can you refer me to a source to describe and explain the physical handling of packets in Internet data traffic?  I understand the definition of a packet and its contents in terms of the protocol.  I cannot comprehend how a packet is physically sent on a wire.  Since a wire can only have current on it or not, i.e., as a potential between two endpoints, that is, voltage, I'm having difficulty understanding how a wire can handle so much data in such a short time and carry that data so that discrete packets are maintained.  Am I making sense?  I've searched and searched on - it's amazing how fast electrons are.



I've searched and searched on this topic and not found any description of the actual physical handling of a packet on a physical wire.  I'm not suggesting it's a topic for Security Now!, I just want to know.  If you could refer me to a technical description, I'd be grateful.  I just always assumed it's switching; right?  It's on and off?  It's ones and zeroes?



STEVE:  Well, yes.  But one of the cool things, one of the cool aspects of the technology, he talks to about how it's able to go so fast, and how we're able to have wires draped around the floor, and they're running gigabit speeds.



LEO:  It's pretty amazing, isn't it.



STEVE:  That's just crazy, yes.



LEO:  We just take it for granted, frankly, because everything else in the computer industry is magic.



STEVE:  Yeah, it's like, why not?



LEO:  It's all magic.



STEVE:  Yeah.  It's funny, too, because that was - I got into a discussion with Jenny about "Euclid's Wall" where the theme of the book, as we've described, is that a truly massive set of earthquakes shakes civilization to the ground, I mean, and regresses us to sort of a pre-technology mode.  And Jenny sort of, who's not a technologist, said, oh, well, that'll take, what, a week to get back?  I said, oh, no, no, no, no.  I said, where do chips come from?  Well, you know, the chip place.  Okay, but...



LEO:  The chip store.



STEVE:  But the more you think about how dependent we are on...



LEO:  It's a fine thread we hang from.



STEVE:  Oh, my god, on a hierarchy.  And, for example, when I said the same thing to Mark Thompson, he said, oh, yeah, we'd never recover.  It's just...



[Talking simultaneously]



STEVE:  ...so true.



LEO:  One electromagnetic pulse, one air burst, we're gone.  You know, that's one of the - I've talked about this before.  We were talking about Jerry Pournelle and Larry Niven, and "Lucifer's Hammer" is his story of how an asteroid hits the Earth.



STEVE:  Yup, meteor.



LEO:  Meteor hits Earth and sends us back to the Stone Age.  But what he says, and I think it's very germane, is early on one of his characters says, you know, we all use this stuff.  How many people actually know how it's made, how to make it, how to fix it, or, if we were to lose the technology, how to bring it back?  And that's another problem.  We take it for granted, but do we know how to make it?  You do.  Thank god.  But how many of the rest of us who use this, we just - thank you magic, magic person.



STEVE:  Yeah, it is phenomenal how much we build on.  And again, I know a lot.  I could start making batteries.  But...



LEO:  But you couldn't build a cyclotron.



STEVE:  No.



LEO:  Or even maybe an automobile.



STEVE:  It would be rather low down on my list, but I could build it.



LEO:  Could you build a car?  You could build your own combustion engine from scratch?



STEVE:  Oh, yeah.  Yeah.



LEO:  Really.



STEVE:  Oh, yeah.  I took mine apart completely on my - I had a little Fiat.



LEO:  I know how they work in principle.  But the thought that I could actually make one that would work...



STEVE:  Oh, yeah, I mean, it would be stinky and noisy and make a lot of fumes.



LEO:  I'm coming to your place in the case of atomic war, then.



STEVE:  The EPA would just roll over in their grave.  But, you know...



LEO:  But would you know how to refine petroleum so you could use it?



STEVE:  Ah, now, that's a problem.  See?  You're right.



LEO:  But this is life.  We've always been interdependent on one another.  And it's just - we forget.  Conveniently.  Because if we really thought about it, it'd be terrifying.



STEVE:  Oh, we'd just stay in bed.



LEO:  Question 5 from - I love his Twitter handle.  Are you done?  I'm sorry, go ahead.



STEVE:  We never really answered Bill's question.



LEO:  Oh, we didn't answer the question, yeah.



STEVE:  We just said...



LEO:  How do packets...



[Talking simultaneously]



STEVE:  It's bits.  Go to the next question.



LEO:  It's bits, on and off, on and off, real fast.  Is it really switching?



STEVE:  They're speedy little electrons, as you said.



LEO:  Is it modulation?  Or is it actually on and off?



STEVE:  They get up to speed.  The concept I wanted to actually convey is the notion of differential electricity.  That is, it's not one wire, it's two.  And that's the key.  It's a so-called "twisted pair."  And people have probably heard the jargon, "twisted pair."  But it's really crucial.  And the reason is that our environment is full of interference, all kinds of noise.  And, I mean, electrical noise, radio noise, microwaves in the kitchen, I mean, just all kinds of interference.  How do these wires not pick that up?  Well, they actually do.  The trick is that two wires are intimately physically close to each other and truly wound around each other so that they pick up the same noise.  They both pick up the same thing.  So on one end the sender, the transmitter pulls one wire high and the other one low.  And that signal moves through the wire and gets to the other end.



Well, any interference which occurs along the way happens to both of them.  So the only thing the receiver cares about is the difference in the voltage at the receiving end.  It sees one is higher than the other.  Doesn't matter how much.  It matters in which direction because that's the data.  But it doesn't matter whether they're both at 50 volts and 49 volts.



LEO:  Amplitude doesn't matter, just their relative amplitude.



STEVE:  Exactly.  The so-called differential.  And the term for the noise is called "common mode."  The common mode is that voltage or noise that they share is completely ignored, and it's only the difference.  And so the transmitter, it moves the - when it wants to change it, the one that was at a one or a high level, it pulls low, and simultaneously pulls the one that was low high.  And so out at the other end they flip positions.  And then to that you add - there are many, many protocols that have been developed by clever people over time.  The one that was used by 10Base-T, which is the most simple to understand, is a technology called "Manchester coding."  The idea is that you have moments in time which represent bits of data.  And with Manchester code the two wires are - and so we'll subtract one from the other and call it a one or a zero.  So we've dealt with the differential aspect.  And so what's coming out is a one or a zero.  If it's a one for the first half of the bit cell, then we call that a one of data.  And if it's a one for the second half, we call that a zero of data.  Now, the reason that's important, the reason it was not just a one or a zero, is say that we wanted to transmit 50 zeroes.  Well, that would be nothing happening for a long time.  Well, is it 50 or 51 or 49?



So the problem is, and we've talked about this relative to hard disk drives, they have the same kind of problem called Run Length Limited, RLL encoding, because as time is passing and nothing happening, you need to know how much nothing happened, and you need to know exactly how much nothing happened.  So instead they use what are called "self-clocking codes," Manchester code is one, where you always have something happen.  It's just when it happens.  Does it happen early, or does it happen late?  If it happens early, it's a one.  If it happens late, it's a zero.  And that way, independent of the transmitter, the receiver is able to reconstruct the same data that the transmitter sent at the receiving end.  And the encoding technologies have gone from that 10Base-T simplicity to stuff that, I mean, just boggles your mind as they go from 10 million bits per second to 10 billion bits per second.  A thousand times more bits over the wire.



LEO:  Reliably.  Reliably.



STEVE:  Yes.  Yes.



LEO:  So it is kind of related to the analog way it was done then.



STEVE:  Yes.



LEO:  I mean, analog is modulated; right?



STEVE:  Yes.  And so here there's no carrier that we modulate because that would waste bandwidth.  So we're using absolutely all of the wire's ability to reflect the change in voltage in time as possible.  And remember that there is error correction.  So packets have checksums.  If something happens where it doesn't work, we say, send that again.  And so we do.  So all of this stuff is working at some low level of unreliability where it mostly works.  Sounds very much like the way hard drives are these days.  Mostly they work.  And if they don't, we just ask for it again.



And of course that's actually one of the differences with magnetic storage versus data in transit is data in transit you can always ask for it again.  If it's been written to a hard drive, and you can't read it, then there's no one to ask for.  Whoever wrote it's long gone a week ago.  Who knows how long ago that got written on the drive.  So there's no one to ask.  Thus the reason we actually - we pad the data in a hard drive sector with error correction code so that we can fix it ourselves if we're unable to read it easily.  And Leo, with that, we wrap another fabulous podcast.



LEO:  We'll save the rest for later.  Thank you for your - I have one question, though.  I do have a question of my own.



STEVE:  Okay.



LEO:  Where is your PD - your top PDP is gone.



STEVE:  Ah, you didn't notice that.  Some listener noticed that; right?



LEO:  Oh, of course.  Immediately.  The chatroom has been talking about nothing else for the last hour and a half.  Normally, for those listening, Steve has three blinking lights behind him that duplicate the face - they're not actual PDP-8s, but they're replica PDP-8s that are actually doing work.  And there's normally three of them, and one of them's missing.  So what's the story?



STEVE:  Yes.  The guy who did these, Bob...



LEO:  He wants them back.



STEVE:  I'm blanking on his last name.  No.



LEO:  Bob called.  He wanted his PDP-8 back.



STEVE:  He found 30 more of the microprocessor chips.  They were made by Harris.  It's a 6120 is the number.  It is a PDP-8.  And so he's seriously considering bringing the project...



LEO:  Oh, good.



STEVE:  Yes, back to life.



LEO:  This was a limited supply, and he does the silkscreen of the face and everything.



STEVE:  Oh, and, I mean, it's so gorgeous.



LEO:  He doesn't even have the original silkscreen?  He's using yours as a template?



STEVE:  Oh, no, no, no.  What happened is he loves my frames.  I found this fabulous frame that is a two-inch-deep frame that the whole thing fits behind.  And anyway...



LEO:  Aren't I lucky to have Steve as a friend?  Aren't we all lucky that we know a guy like Steve Gibson?  Unbelievable.



STEVE:  I took it down in order to go over to Aaron Brothers Art Mart, where I got the frames...



LEO:  To get it made.



STEVE:  Yes.  And what I found on the door was "Veggie Grill Coming Summer of 2013."



LEO:  Oh, no.  Bye bye, Aaron Brothers.  Hello, Veggie Grill.  We have an Aaron Brothers up here.



STEVE:  And, well, and Bob's got one near him.  It turns out that there's all kinds of serial numbers that I discovered that were stenciled on the back of the frame.  So I'm going to take photos of it.  It's the reason it's not already back up there.  I'm going to take photos of it, send them to him, and he'll be able to track it down.  And he's not yet sure - I'm sort of pre-announcing something that I shouldn't.



LEO:  You know he could sell every single unit to the Security Now! audience, like that.



STEVE:  They're just so fabulous.  He's, for example, he's wondering should he just do them as ready-to-go, turnkey, finished assembled units?  He's asked me for permission to embed the code that I wrote, my little utilities, the blinking lights program and the little puzzle program that I wrote, embed those in the ROM so they'll come built in with that, and of course I said, oh, absolutely.  So there may be a project of some sort that would just use up - he feels badly that he's got these 30 beautiful PDP-8 chips, and he could turn them into more of those.  So, and they're just works of art.  It's just a beautiful little machine.



LEO:  But on the bright side, you've got a Veggie Brothers store opening near.



STEVE:  A Veggie Grill, yeah.  Jenny, who is a vegetarian, loves it.



LEO:  She's happy about that.  Steve Gibson is at GRC.com.  That's where you need to go right now.  Obviously there's so many great things.  But in a couple of days...



STEVE:  You will be going there soon, yes.



LEO:  You'll be definitely wanting to go to ShieldsUP!  And we will announce it.  I'll tweet it.  I'll make sure - Tom Merritt and Father Robert Ballecer are hosting TWiT on Sunday.  Robert, of course, he's probably in the chatroom right now.  He's our enterprise tech guy, and he will absolutely want to talk about this.  So just send him a note.  You can send it to padre@twit.tv, if you want, Steve, and you can include him, and I'll make sure he's up to date on that.  And we will let you know.  And of course, once you're there you want to buy ShieldsUP!, I mean SpinRite, because that's the world's best hard drive and maintenance utility.  You might want to check out the amazingly low bandwidth 16Kb version of the show that Steve makes available and the transcripts, which are, frankly, lower bandwidth still, at GRC.com.  Also that's where future questions can be asked:  GRC.com/feedback.  And someday, perhaps, we'll have your SSL tester there, as well.



STEVE:  Yeah.  I'm going to suspend it for the UDP vulnerability scan in ShieldsUP!.  That's got to take priority.  So I'm going to do that.  And I'm at a perfect point right now.  I sent email to Peter Gutmann this morning, asking how he wanted to proceed on a couple of things that I'd found.  And he's, like, in New Zealand, so lord knows what time it is there.



LEO:  He's just getting up; right?



STEVE:  I think it's probably the middle of the night or something.  So I will immediately add the functionality to GRC.  I expect it'll take a couple days for me to - mostly just a matter of me coming up to speed on the details of the protocol.  All of the infrastructure is in place and bulletproof.  And, I mean, this is what it's made for.  This is what I built GRC originally to do was ShieldsUP!.  So we'll have a new service soon.



LEO:  Yeah, that's really good news.  Thank you for doing that, Steve.  This show is also available on our website.  We make both high-quality audio and video available at TWiT.tv/sn, but you can also subscribe wherever podcasts are aggregated, like iTunes and the Zune Marketplace, places like that.  And watch live if you want.  We do the show live every Wednesday at 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 1900 UTC on TWiT.tv.  So tune in next week.  We'll be back with more Security Now!.  Don't forget our Security Now! YouTube channel, another place you could find it at YouTube.com slash - I think it's twitsecuritynow.



STEVE:  No, it's just securitynow.  It works.



LEO:  It's just securitynow.  Oh, good, okay.  We were able to get most of the shows.  If you go to YouTube.com/twit you'll get there, and that's got links on the right to all of the shows.



STEVE:  And you'll be tempted by all the other goodies.



LEO:  There's so many good shows now, 25 of them.  That's why we basically had to create YouTube channels for individual shows because, if you subscribe to our YouTube channel, you get 25 show announcements, like four or five a day.  That's too much.  Thank you, Steve.  We'll see you next week.



STEVE:  Thanks, Leo.  It's a pleasure.  And enjoy your red-eye to the game.



LEO:  NOLA.  NOLA.  Go Niners.



STEVE:  Talk to you next week.  



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#390	

DATE:		February 6, 2013

TITLE:		"Mega" Security Update

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-390.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After covering "UPnP a week later" and catching up with some interesting security industry happenings, Steve and Leo take a look into the controversy surrounding the security (or lack thereof) of Kim Dotcom's new "Mega" cloud storage offering.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here with the latest security news and something he's promised for a while:  a look at the security behind the new Megaupload service.  How safe, how secure is it?  Despite all their protestations, maybe not as secure as you might have thought.  Steve explains all next on Security Now!.



LEO LAPORTE:  It's time for Security Now! with Steve Gibson, Episode 390, recorded February 6th, 2013:  Mega Security.



Time for Security Now!, the show - as I wave my finger - the show that brings you and your loved ones peace of mind, thanks to this fellow right here, the Explainer in Chief, our security guru, Mr. Steve Gibson of GRC.com.  Hi, Steve.



STEVE GIBSON:  That would be me, Leo.  Yes, yes, our non-live listeners have been spared 36 minutes of nonsense.



LEO:  It's not nonsense.



STEVE:  No, in fact, I've actually...



LEO:  It is not nonsense.



STEVE:  I've received some tweets during this saying, "This is why I tune in and listen live," you know, "LOL."



LEO:  Always listen live.  You never know.  We talk about coffee, science fiction.  Basically, I try to have the conversation - see, people may not know, but this is - you and I only really get to talk once a week, so this is our personal time.



STEVE:  Oh, I miss our quiet, private...



LEO:  This is our personal time.  So we like to get a little time to catch up, see how each is doing and fill him in on the gossip.



STEVE:  Boxers or briefs.



LEO:  So hello.  I guess you've been kind of busy, a little busy this week.



STEVE:  I've been super busy, yes.  We have lots of news.  Today, as promised, we've got an overview of the security - and lack of - of Kim Dotcom's new Mega...



LEO:  Oh, good.



STEVE:  ...cloud storage offering.



LEO:  Oh, great.



STEVE:  Some of the attacks have been a little overblown.  But it also demonstrates that they've got a ways to go.  And it's a perfect example of why this stuff should all be done in the open.  The consequence of the fact that their initial client, their only client at this point, is a browser is that their tech is in JavaScript, which automatically means it's open for analysis.  And, oh, boy, that was a good thing because they've got a lot of work to do.  So we're going to talk about that and catch up on other news of the week.



There was a really unbelievable article in Slate about a new iOS app called Silent Circle that I want to talk about.  But I first want to follow up on last week's Universal Plug & Play nightmare revelation.  Our listeners will remember that on Tuesday, the day before last week's podcast, HD Moore of Rapid7 surprised the world with their report on the number of open and exposed Universal Plug & Play ports on the world's routers, 2.2 percent of the entire addressable IPv4 space.  So that's 2.2 percent of 4.3 billion, which was 81 million, different devices responded.  And as a consequence of that, I said that I would immediately do a - I would add a test for this to ShieldsUP!.  So all of our listeners who don't already know, I did tweet this Thursday afternoon, late afternoon.  It took me all of Thursday to write it.



And actually, when I went - I hadn't looked at this code for 10 years.  But that was the rewrite of the original ShieldsUP! system where I added the concept of true stealth, where I was looking for any noise coming back from an IP that we were testing.  And so I rewrote the foundation with the experience from the first one.  And I was frankly quite pleased when I looked at it last Thursday.  It's like, oh, this is pretty nice.  And so there was already - I was already checking for NETBIOS ports, which is a UDP packet where I care about the return data.  So I was pretty much able to copy the logic that I had developed and proven there for the Universal Plug & Pray probe.



Anyway, so just anyone and everyone actually should go to GRC.com, go to the regular ShieldsUP! entry point, and you'll see a big, clickable icon, says whatever it says, GRC's Instant UPnP Exposure Test or something like that.  And it just takes a few seconds.  You can get three different outcomes.  You are either completely invisible, or you are actively denying probes, or you're accepting them.  And in fact, because I had a couple members of the press had asked me, what would it look like if I was exposed, on that same page down below I have three links to samples of the three different outcomes, so people can see what they look like.  I also, on that page, Leo, link to the podcast that we did last Wednesday, which was the whole beginning of it was about this.  So I linked to the YouTube instance of it, for anybody who wants to see it, and also to the audio.



So what we have found is, to date, 780 different individual people that have come by have been exposed.  Someone, actually several people reported the rejected response.  I didn't even know if that was possible, but it was available to me, so I built in that possibility of being actively rejected, the idea being that, when you send a UDP packet at the port, you get back an ICMP packet that says "Destination unreachable."  So it's an affirmative, there's nobody here.  So you're not stealth, but at the same time you're also not vulnerable to a Universal Plug & Play exposure.



And then, of course, if you do respond, I show on the page the block of text which comes back, which has all the details about the version of Linux that you're running, the version of the Universal Plug & Play code that you're running, sure enough, the port that the device is listening on for future conversations.  I don't go to the next step of then establishing an HTTP TCP connection to that port.  I could have.  But my feeling is, hey, you don't want any exposure anyway.  So there's really no point in showing people more of what's there.  The fact that anything is there is not good.



So the other interesting thing that I found is immediately upon finishing the podcast, I set up my own little honeypot net.  I have a block of 64 IPs here that have never been used for almost anything.  They get, like, just debris traffic in, just the noise that's on the Internet.  But I left the machine on.  I unbound the IPv4 TCP protocol so that it came protocol free because I had to put it directly on the Internet with no firewall, and then I hooked up the network.  It's a cool thing.



I don't know if people know that, when you're using Wireshark, you can, in the same way that years ago in ShieldsUP!  I showed people how to unbind protocols, you can unbind your IPv4 and IPv6 protocol stack from the interface so that you are completely invulnerable.  You're an adapter listening promiscuously, but it doesn't matter that you're now on the Internet, as long as you're careful, because you have no protocol, essentially, listening to that wire.  It's just a raw Ethernet cable.  And Wireshark is still able to pick up packets.



And the point is that I then built a filter looking for anything incoming on UDP protocol and port 119.  I have so far, so it's been about a week, found 21 unique IPs out on the Internet that have sent UDP port 119 - I'm sorry, I mean, 1900 is what I meant, mean to say, 1900, incoming packets to this block of 64 IPs.  Several of the IPs have been scanning.  They sort of scan in a pseudorandom order.  They don't come back that often.  Several others are doing a much slower scan.  Oh, and I should mention that every day a couple new ones appear that I have not seen before.



So this is exactly what we would expect if hackers were beginning to come up to speed about this vulnerability and deciding that they're going to start having some fun with this.  So this is not a theoretical concern.  There are definitely unknown entities out on the 'Net.  I've tried to look up some of these IPs and gotten nowhere.  They're just, like, they're just - there's no records of them anywhere.  So a couple, the first ones that I saw were in Amazon's scalable network architecture system.  It's like, whoa, that's interesting.  So somebody was apparently using Amazon as their scanning hub, basically rent some machine and some bandwidth from Amazon and scan the 'Net for Universal Plug & Play vulnerabilities.



Anyway, the test exists.  And people have been surprised and turning them off.  I did just see a tweet saying that a new version of the MiniUPnP, I think it was version 1.6 the tweet said, had just been released.  That doesn't help end users because we're not able to update our firmware ourselves.  But it does make the packages available to the manufacturers.  And hopefully this has been a big enough wakeup call that we'll get some firmware updates and close these things.  So that's what's been going on here.



LEO:  Well, thanks for doing that.  I know everybody was dying to test their routers.  I'm amazed at the number of issues.  Although in some ways that seems like a lower number than one would expect, given how many routers are vulnerable.



STEVE:  You mean like the number I'm seeing, or the incoming...



LEO:  Yeah.



STEVE:  Well, these are only...



LEO:  They're Security Now! listeners, for one thing.



STEVE:  Yes, exactly.



LEO:  Not that there's anything we can do about it, really.  Is there?



STEVE:  Well, no.  I mean, all you can - okay.



LEO:  Buy a new router.



STEVE:  Most routers, most routers have Universal Plug & Play on by default.  If you're not a gamer, and, well, really I think that's about it.  If you're not a gamer, you should turn it off.



LEO:  Right.



STEVE:  Now, but even if it's on inside your network, it may not be on outside your network.  And that's the only danger.  So that's what I'm testing for is whether it's exposed to the public.



LEO:  And it's not possible, if I've turned it off internally, that this flaw that we're talking about could still give an external attacker...



STEVE:  Yes, that has - we have...



LEO:  That's what I'm saying, that's what I'm thinking is that, yeah, well, anybody listening to this show has certainly disabled UPnP years ago.



STEVE:  We have confirmed that there are some routers that leave it on outside, even if it's off inside, and some that don't actually turn it off inside.  That's just a checkbox.



LEO:  It's like the WP...



STEVE:  It's a checkbox.  It's not hooked up to anything.



LEO:  It's like the WPS flaw, yeah.  Which Linksys has a checkbox that says "Turn off WPS" that does nothing.  It's nice to put those in the UI because it gives people, you know, reassures people.



STEVE:  Oh, yes.  And also it's right - it's above the one that says I'd like to have no problems.  And then you can just check that one.



LEO:  It reminds me of - it's the security theater that we go through as we go through airports.  It's to make you feel better.  It doesn't actually - you know, it was interesting, as we were leaving New Orleans, because there was...



STEVE:  That just airs out your socks, basically.



LEO:  Yeah.  As we're leaving New Orleans because there was such a flood of people the day after the Super Bowl...



STEVE:  Oh, I can't even imagine, Leo.



LEO:  No, this was what surprised me.  They turned off security.  We did not take off our shoes.  We did not take out our laptops.  They took off the micro, the millimeter scans.  All we had to do was go through a metal detector.



STEVE:  Nice.  Just like the old days.



LEO:  It was just like the old days.  And I thought, but wait a minute, didn't - wasn't it important that we took our shoes off?  Wasn't it important that we took our laptops out?



STEVE:  No.  You see, the bomb would have gone - would have been...



LEO:  It's irrelevant.



STEVE:  ...during the game, not after the game.



LEO:  Oh, I see, yeah.



STEVE:  So clearly that didn't happen.  Incoming you have security.  Outgoing, eh, you know, maybe the fuse didn't work.



LEO:  Security theater.  It's everywhere, friends, it's everywhere.



STEVE:  Yes, it is.  So I did get some breathless tweets about the so-called "Lucky Thirteen" attack on SSL.  It made some news that there was a new compromise on SSL.  And I thought, okay.  What do we have now?  Okay.  So, short version is there's nothing to worry about, nothing to see here.  Quoting from the paper, from people who I guess really needed a PhD, they said, "We have discovered a variety of attacks, each having different complexity and severity.  For TLS, our attacks are multi-session attacks" - and they're not kidding when they say "multi-session," we'll cover that in a second - "which means that we require the target plaintext to be repeatedly sent in the same position in the plaintext stream in multiple TLS sessions."



Okay.  So let's stop there.  That means that they need essentially the same stuff to be sent, unmodified, over and over and over again.  Okay.  So, okay, well, maybe that could be bad.



"The attacks involve detecting small differences in the time at which TLS error messages are returned on the network in response to attacker-generated ciphertexts."  Okay.  So this is a timing-based vulnerability, such as it is, where they're messing things up on purpose as this data is going by, and they're seeing how long it takes to have an acknowledgment of the thing that they broke.  And they're detecting slight differences in the time to respond, which means that the algorithms at the receiving end differ depending upon the way they break the text.  So this is a classic side-channel attack on crypto.



They said, "Because of network jitter and other effects, the times observed by the attacker are noisy," meaning that even if they weren't doing anything wrong, they're still going to get varying timing attacks.  So they say, "...and multiple samples" - and they're not kidding - "of each time are needed to make the attacks reliable." That is, they need huge numbers of samples which are themselves going to carry jitter in order to filter out, essentially, the native jitter in the network.



So they say, "In their simplest form, our attacks can reliably recover a complete block of TLS-encrypted plaintext" - now, let's remember, that's a cipher block, which means that's 128 bits, or 16 bytes.  So they can recover 16 bytes of the encrypted plaintext "using about 2^23 TLS sessions."



LEO:  How many - that's a lot.



STEVE:  That's 8.4 million.  So...



LEO:  Take a little time.



STEVE:  Well, and remember, they have to receive - they have to have somebody who...



LEO:  There's a SYN and an ACK.



STEVE:  Well, no.  No, no.  This is just - they have to have exactly the same packet pass by 8.4 million times.



LEO:  But then, then I gotcha [laughing].



STEVE:  And we've figured out 16 bytes.  Okay.



LEO:  Okay.  I'm not too worried.



STEVE:  So assuming - exactly.  Assuming - we can all breathe a sigh of relief.  Assuming the attacker is located on the same LAN as the machine being attacked - because, Leo, forget the Internet.  Talk about delays and jitter and buffering and all that nonsense.  So this only works if you're next to the computer whose data you're trying to decrypt.



LEO:  Although with WiFi you could be on the same...



STEVE:  No, I don't know if WiFi - WiFi might produce too much jitter.  I mean, this has got to be - you can't use a tin can and string with this.  This has got to be, I mean, they're looking at something incredibly subtle.



So they said, "...assuming the attacker is located on the same LAN as the machine being attacked and HMAC-SHA1 is used as TLS's MAC algorithm."  And of course that's one of many that might be used.  "This can be reduced to 2^19 TLS sessions if the plaintext is known to be base64 encoded."  Which means that the character set only contains a subset of the total number of bytes.  Remember that a byte is 256 bits.  That gives us 256 different combinations per byte.  But if you happened to know that the plaintext was base64 encoded, then you would know that the bytes were only going to be one of 64 values - uppercase/lowercase alpha, and then plus and minus.  If you knew that, then you can do it in only 2^19 sessions.



LEO:  Oh, well.



STEVE:  So, yeah.



LEO:  [Indiscernible] in the chatroom says it would be easier just to look over the guy's shoulder, to be honest.



STEVE:  Or just hit on the head.



LEO:  Clonk him.



STEVE:  Yeah.  So, but it is true, we have to acknowledge this, Bruce Schneier was right when he said, prophetically and correctly, "Attacks only get better.  They never get worse."  So no one is taking this lightly.  And all of the SSL packages in the industry have just been updated.  There's a new OpenSSL, both the 0.9.8 track, I think went from "V" to "Z."  And GNU SSL and CYA SSL, all of them.  Oh, and the NSS, the Mozilla Netscape Security Suite, that's in the process of being updated.  The only things unaffected are those that are using hardware, like the F5 router technology has got it all in hardware so there is no timing variation from that.



So what has been done is tiny modifications were made to the code so that they're looking at what the probes were, and they're doing something to the code to make them homogeneous in terms of time response.  The error messages they generate all take the same amount of time.  So small change in code, and it's like, okay, good, got us.  So now this is fixed.  So the good news is TLS is really standing up very well.  And in their own overview they said, "Is it still safe to use TLS?"  So that we don't all hyperventilate at once.



And the people who figured this out wrote, "The attacks can only be carried out by a determined attacker who is located close to the machine being attacked and who can generate sufficient sessions for the attacks."  Uh-huh, 8.4 million.  "In this sense, the attacks do not pose a significant danger to ordinary users of TLS in their current form.  However, it is a truism that attacks only get better with time, and we cannot anticipate what improvements to our attacks, or entirely new attacks, may yet be discovered.



In addition, because of its extremely widespread use, any attack against TLS requires careful evaluation.  In this context, it is notable that the leading TLS implementations are deploying countermeasures to our attacks."  And it is true that everybody has said, okay, well, we can't be odd man out here, so we're all going to update ourselves.



LEO:  I think that's actually great.  It shows that they take it very seriously, even though it's not really a serious security issue.



STEVE:  Yeah.  And really, look at the difference here.  Instantaneous updates across the industry to something that you can barely find it in a clear day.  And yet here we have routers that have been massively miscoded and pumped out...



LEO:  Not a peep from the router companies.  Not a word.



STEVE:  None.



LEO:  Not an acknowledgment.  Not anything.



STEVE:  And remember, they have a liability concern, too.  Their attorneys are, like, in a sweat right now because, if anything happened to somebody...



LEO:  "Don't say anything," is what they're saying.  "Admit nothing."



STEVE:  Yeah, exactly.  Exactly.  Now, okay.  Probably the most tweets I've seen in a long time came from an article in Slate on a new product for iOS called Silent Circle.  I don't know what the Silent Circle people are paying their PR agency.  But it's not enough.



LEO:  I don't think they have a PR agency.



STEVE:  Oh, somebody does.



LEO:  What is it?



STEVE:  I don't - this was an unbelievable article.  The title was "The Threat of Silence."  And the subtitle was "Meet the groundbreaking new encryption app set to revolutionize privacy and freak out the feds."



LEO:  Wow.



STEVE:  Leo, governments are going to crumble. 



LEO:  Oh, my god.



STEVE:  Life as we know it, forget it.



LEO:  Holy cow.



STEVE:  It's all changed.



LEO:  How could it be?



STEVE:  They even have, as their CEO, a 45-year-old former Navy Seal commando.



LEO:  There you go.



STEVE:  On the team, Leo.



LEO:  So I think that's good training for writing security software.



STEVE:  Now, the article in Slate, I mean, it sounds like this thing is God's gift.  It is.  The piece that was written is more impressive than the software.  The software is nice.  What the software does is provide point-to-point crypto between two iOS devices.  And you can burn the file at either end, subject of course to problems with deleting things from flash memory, which we understand is problematical.  I don't mean to put this down at all.  I think - and the article is just amazing.  They talk about all these case studies of people in the Middle East.  Someone used it to videotape something bad happening, and then used Silent Circle to beam it off to Europe over their secure link and then burned it from their phone so that, after they were captured, even Navy Seal commandos couldn't determine what it was that they had video recorded.  Anyway, I really believe...



LEO:  That's nice.  That's all nice.



STEVE:  Yes.  Yes.  A UI on crypto is important.  I mean, that's a lot of what I was aiming at when I was looking at  doing my own VPN that I named CryptoLink, was the idea that it would be incredibly simple to use.  The reason I stopped doing the notes on how to set up OpenVPN was that I made it work, like with multiple simultaneous listening ports so that you could always get to it.  But it was an incredible nightmare.  And I thought, okay, I'm just going to solve this problem.  So there is definitely a need for a very secure, turnkey, point-to-point app for iOS.  And now we have one.  So announcing Silent Circle.  And if you want a real thrill to run up your leg, go find the Slate article titled "The Threat of Silence," and you'll know what this thing can do for you because it's quite impressive.



[slate.com/articles/technology/future_tense/2013/02/silent_circle_s_latest_app_democratizes_encryption_governments_won_t_be.html]



LEO:  You're mocking it a little bit.



STEVE:  Yeah, I am.  Just the piece.  No, I think the app is probably really good.  I think the guys who are behind it, they really know their crypto.  So I believe it's been done right.  I trust it.



LEO:  Unfortunately it's closed source.  I can't trust any crypto that's not open source.



STEVE:  Yeah, but it's like Zimmermann of, I mean, he's one of the guys, I think.  Maybe I'm confusing stories.  But I think it was Phil.



LEO:  Phil Zimmermann is involved with it?



STEVE:  I think he is.



LEO:  The PGP guy.



STEVE:  Yeah, yeah.  So, I mean, they know their crypto.  And so I believe they got it right.  And that's the other thing, too.  It's not hard to do.  It's not hard to do this right.  It is a store-and-forward service, and it's a Trust No One technology so that it's being encrypted locally and that they're holding it, but they cannot break the crypto.



LEO:  So what it says here is it utilizes Phil Zimmermann's open source ZRTP encryption protocol.



STEVE:  Ah, okay, good.  I'm glad you clarified that.



LEO:  But we have to take their - unless something's open source, we have to take their word for it.  So the problem I have is that, because it's iOS software, it's always closed source.  You cannot really - you have to trust the company.  I mean...



STEVE:  Well, and remember, too, that BlackBerry had a lot of problem, or RIM.  I guess they're now called BlackBerry officially.  RIM had a lot of problem in the Middle East last year because the governments there were deciding, we don't like not being able to see into the...



LEO:  So they opened it.



STEVE:  Yes.  And so the problem is, what do we do here?  Here's - they're making a lot of noise about the fact that this is uncrackable.  The fact is, everybody's encryption is uncrackable.  You just may not be able to use it because the government will say no, or someone will put some pressure on Apple, and they'll remove it from the app store, and it'll vaporize off of everyone's iOS devices because we know Apple has the ability to do that, too.



LEO:  See, that's why I like TrueCrypt, is you can validate it, you can say, hey, it's working, I know what it's doing.  You can't do that with this.  And so you don't know if there's a government backdoor.  You'll never know.



STEVE:  Yes.  For our listeners, just using AxCrypt or one of the nice little, I mean, that's not hard anymore.  This problem we've solved.  You encrypt the file, and you send it to somebody.



LEO:  On iOS it's hard.  I don't know if there's a way to do it or not.



STEVE:  Yeah, yeah.  And so this is a nice platform.  So for our listeners, to be serious, I don't mean to put these guys down.  But oh, my god, the Slate article is just, I mean...



LEO:  It's not cheap, by the way.



STEVE:  No, it's $20 a month for each endpoint.  So you have to have it, and the other person at the other end has to have it.  And, yeah, so that's 240 bucks a year for the privilege.



LEO:  Yes, not gonna happen.



STEVE:  So if you need to be shuttling secure documents around and video footage and images and so forth, this is - I think this is the right app for it.



LEO:  There are apps for iOS for many of the other services that we have already talked about that use encryption.  I think there's probably ways to do this without spending that much money.



STEVE:  Yeah.  And there will be a client, doubtless, for Mega before long, in which case...



[Talking simultaneously]



LEO:  Can't wait to hear about that.



STEVE:  Okay.  So there was - this is under the category of "Why Bother?"  But I do thank the person who tweeted this to me.  There is a petition now at the Change.org petitions site titled - it's aimed at Oracle Corporation.  It's a petition to ask them to stop bundling the Ask toolbar...



LEO:  Thank you.



STEVE:  ...with the Java installer.



LEO:  Thank you.



STEVE:  And again, it's like, yeah, well, okay.  I guess that's like asking a mass murderer to be a little less sloppy, please clean up your mess afterwards.



LEO:  It's a start.  It's a start.



STEVE:  So if anyone's interested, I guess I could tweet this.  I mean, I just looked, and I thought, well, okay, let's just have Java go away, please.  You know that it's the No. 1 language, though, Leo?  I mean, it's, like, what you have to program.  They're teaching it in high school.  I have a...



[change.org/petitions/oracle-corporation-stop-bundling-ask-toolbar-with-the-java-installer]



LEO:  My kid's high school teaches it.  And it was not my recommendation.  It's actually a fairly poor teaching language.  But it's practical, I guess.



STEVE:  Oh, it's way too complex for, like...



LEO:  I'd much rather see a scripting language like Python or Ruby being taught.  Or better yet, even LISP, but everybody laughs at me when I say that.



STEVE:  Yeah, don't say that in public, Leo.  Besides, they'll just think you can't pronounce [indiscernible].



LEO:  You know, I was talking to the guy who founded Reddit.  Reddit was originally written in LISP.  But they changed that very quickly to Python.  I'm sorry.  Go ahead.



STEVE:  I had a good friend in high school who actually had a lisp, and unfortunately her name was Leslie.



LEO:  Leslie?  I'm sorry.



STEVE:  And so it was really sad.  She couldn't - she said "Leflie."  But it's like, well, okay.



LEO:  But she was a hell of a LISP programmer.



STEVE:  She was.  So in our acronym soup section, we have the acronym for UPnP.  Remember we did our various car acronyms.  And Java was Just Another Vulnerability Announcement.  So UPnP, the best one I've seen was Ur Probably Not Protected.



LEO:  Winner.  Winner winner chicken dinner.



STEVE:  Probably not protected.



LEO:  Ur probably not protected.



STEVE:  And I did have a nice note from Ron Finney.  Oh, and I have a big apology, too.  I'll do the apology after the note to our listeners, many of whom I upset.  So, but, and Ron's note about SpinRite reminded me of my need to apologize.  He says - the subject was "SpinRite Testimony."  And he said - he sent this on the 12th of January.  He said, "I'm a commercial video producer.  I had a devastating turn of events.  I caught my foot on the power cord to an external 3TB drive, and it crashed to the floor."



LEO:  I shouldn't laugh.  That's horrible.



STEVE:  No.  Just look around you for cords, Leo.  I know there are some there.



LEO:  Yeah, no, there's no cords.



STEVE:  Oh, that's good.  That's right, you've got a basement.  You just drill straight down.



LEO:  Yeah, we put holes in the floor.  The cords are all downstairs.



STEVE:  It's wonderful.  Anyway, he says, "The drive is history.  But then the next day a large primary internal hard drive began to fail.  There went my redundancy.



LEO:  Uh-oh.



STEVE:  I was getting error notifications upon boot-up that the drive was failing.  I immediately began attempts to back up the data, but the drive and Windows Explorer would seize up after only transferring one or two files.  And when it would transfer, it was extremely slow.  I went a whole day and got virtually nowhere.  Late in the evening, I got SpinRite.  Files started copying, and it is copying almost without a glitch, if I don't try to move the files all at once.  I am so relieved.  I was certain this three-year-old drive was toast.  The product, your product, retrieved irreplaceable files and important video footage that would have taken days to hunt down and recapture from digital tape.  Thanks for a great product.  Ron Finney, owner, North Woods Productions in Gig Harbor, Washington."  So thank you, Ron, for sharing your success story.  And my apology to the people whom I offended.



LEO:  What?



STEVE:  Unintentionally.  Oh, yes.



LEO:  No.



STEVE:  When I mentioned, I glibly said that nobody has gigs of data of their own creation on their drives.  This was a couple months ago.  We were talking about backing up, like the need to back up gigs of data.  And I said, "Who creates that kind of content?"  Well...



LEO:  Lots of people.



STEVE:  Many people took umbrage at that.  And of course I'm talking to somebody who's over in drive land.



LEO:  Yeah.  And I didn't take umbrage, but...



STEVE:  No.  No, you knew what I meant.



LEO:  I'd like to move to Umbrage.  Right next to Gig Harbor.  All right.  No, of course we know.  But really the truth is you wouldn't back up that much data.  It'd be foolish because it would take an impossible amount of time unless you had virtually unlimited bandwidth.  That's really the point.



STEVE:  But I do recognize that people who are shutterbugs, who are, like, generating photos like crazy...



LEO:  Mostly videographers.



STEVE:  But mostly video people.  And then those were the people who tweeted back, saying, hey, I've got terabytes.  So it's like, okay, fine, sorry.



LEO:  Yeah.  I don't know if we were talking about online backup when we were talking about that.



STEVE:  We were, actually, yeah.



LEO:  Because that's crazy.  Because just do the math.  Even if you have a megabit, let's see, we can do it in our heads, it's so easy.



STEVE:  The math makes that TLS vulnerability look feasible, Leo.



LEO:  But if you had - let's say you had five megabits.  Let's say you could do a megabyte a second.  Just do the math.  You can see, anything more than a few hundred gigabytes is ridiculous.



STEVE:  That'd be a million of those.



LEO:  Yeah, a million seconds.  How many million seconds is that?



STEVE:  Yeah.  



LEO:  How many is a million seconds?  It's a, you know, long time.



STEVE:  That's a lot.



LEO:  All right, Steve.  Let's talk.  Megaupload.com. 



STEVE:  I first have to mention that, since I gave the more clear and thorough explanation of the Universal Plug & Play vulnerability, ShieldsUP! did get another big hit of visitors.  That's after the hit that we got from our live audience before we started recording.



LEO:  You mean just now we got a big hit.



STEVE:  Seven more vulnerabilities were found among our live listeners, yes.



LEO:  And those people are no longer listening as they rush to buy new routers.



STEVE:  It's like, oh, my god.



LEO:  Aaaagh.



STEVE:  Yes.



LEO:  And, well, as long we're doing follow-ups, I might also mention that, and thanks to Web0213, Phil Zimmermann is indeed one of the founders of Silent Circle.  Phil, of course, is the creator of PGP.



STEVE:  Did think he was, yes, good.



LEO:  So they not only use his protocol.  I'll tell you, that reassured me considerably because I know Phil.  I trust Phil.  He's a president and cofounder along with Mike Janke.  So in that case I would say absolutely.



STEVE:  No, I really think it's the real deal.  I just think that their PR firm needs to, like, be taken out to a huge wonderful expensive dinner because that Slate article is just over-the-top wonderful.



LEO:  And I know that Phil in fact is a little sensitive about some of the criticisms people have that encryption can be used to defeat law enforcement and government.  He would not want, I don't think he would want that kind of coverage.  I think he knows that that's a sensitive issue with encryption.  And he's, you know...



STEVE:  Well, at the end of the article, the interviewer asks the CEO, well, what will happen - or I think the CEO volunteers that, if it turns out that governments are unhappy with us, we'll just go somewhere where the laws are less restrictive.



LEO:  Oh, that's good.



STEVE:  It's like, okay.  And Apple's going to follow you there?  Uh-huh, yeah.



LEO:  It's interesting, yeah.  Anyway...



STEVE:  Okay.



LEO:  Let's go.



STEVE:  Mega security overview.  Okay.  So we know this is about Kim Dotcom, who as I understand it, Leo, changed his last name legally?



LEO:  Yeah.  He's German.  His real name is, I think, Kim Schmitz.  And he's quite the promoter.  He's a little bit, you know, he's got kind of a, I don't want to say "shady" past, but interesting past, and has been in trouble with the law before.  He created a service called Megaupload, and it was widely used for a variety of things, kind of like Dropbox.  It turned out that it was apparently widely used for piracy, some say partly because of the way it was structured.  Megaupload always said, no, no, we don't encourage piracy.  Nevertheless, the United States government decided it was, seized their servers in the U.S., and managed to get the New Zealand government to arrest Kim Dotcom.  He's currently...



STEVE:  Did they extradite or just arrest him there?



LEO:  They have not extradited him.  As far as I know he's wandering around New Zealand.  But I...



STEVE:  The DOJ did try to extradite him, I know.



LEO:  Charges have not been dropped, and it is not over yet on Megaupload.  However, he went out and raised more money.  And, by the way, a lot of people very upset about the seizure of Megaupload servers because they were using it for business documents and other purposes and have lost all their data that was stored there.  So it's not completely piracy, anyway.  So he started - and there's more, much more to the story.  But he started a new company a couple of weeks ago, actually on the anniversary of the seizure of Megaupload.com.



STEVE:  Well, and therein lies a bit of a story because it looks like they were in a bit of a hurry.  I think it was clear that there was schedule pressure for the release of this on the anniversary of the raid, which was what he did.  But a bunch of people have looked at the code, as have I.  And after I recovered from looking at it...



LEO:  [Laughing] Really.



STEVE:  Oh, goodness, yes.



LEO:  See, a lot of interest because it's got 50GB of free storage to start; right?



STEVE:  Yeah.  Well, yes.  And the...



LEO:  And they're billing themselves "the privacy company."



STEVE:  Yeah, their own documentation states that they know the JavaScript is a mess, that it's not commented, it's poorly formatted, it needs work, and - I know you're sitting down, but don't puncture your ball, Leo.  This is their first JavaScript project.



LEO:  Their first ever.



STEVE:  Yes.  Yes.  This is the first JavaScript they've written.  And...



LEO:  Oh, that's a good sign.



STEVE:  ...it does show, unfortunately.  Now..



LEO:  Oh, dear.  So wait a minute.  So the encryption and everything is client-side?



STEVE:  Yes.  And it attempts to be a TNO system, a Trust No One system.  And that's the benefit.  Now, many people have commented that it is a benefit to them more than it is a benefit to us.  I don't quite follow that, as long as...



LEO:  Well, they're not going to get arrested, maybe.



STEVE:  Well, there's a lot to talk about here.  So the first is that they're using the browser as their client.  So that's a problem.  It is the case that they apparently have a very nice back end.  And they are - the API is open, and I'm sure we will see people developing clients to use the Mega system natively, rather than through the browser.  But the only client that exists today is the browser.  So the browser...



LEO:  And that's what's in JavaScript, not the back end.



STEVE:  Correct.  We don't, well, see...



LEO:  Well, we don't know.



STEVE:  The back end is closed.  We don't know.  But the good news is the worst that they could do - well, it's not quite true.  I was going to say the worst that they could do is to lose your data, but that's not exactly true because they are also doing file de-duplication.



LEO:  Wait a minute.  How do they do that if it's Trust No One?



STEVE:  Ah.  Well, it turns out it's possible to do that.  There's something called "convergent cryptography" or convergent...



LEO:  We talked about that a couple of episodes ago.



STEVE:  Yes.  And the idea is, if you have a file, and you hash it to get the key which you use to encrypt it, then only someone who had the file has the key because they had to have the file to hash it to get the key.  And that means that anybody else that had the same file, independently hashed it, would get the same key.  So the idea is when you send this up there to the cloud, the cloud sees, oh, look, we've already got the same file with the same hash, so we're not going to store it again.  Now, the problem...



LEO:  But that leaks information.  Well, go ahead.  I know what you were just going to say.



STEVE:  Yes, it does.  It leaks information that the MPAA would like to have.



LEO:  Love to know.  Because all they do is they upload their movie, get the key, and see who else has done that.



STEVE:  So there is a problem.  There's no question that the de-duplication only serves the benefit of Mega.  Now, a study that Microsoft did in '03 of 585 workstations showed that 50 percent benefit could be obtained by doing duplicate elimination among that set of Microsoft's 585 workstations.  But, okay.  First of all, this was in '03.  So there weren't, like, videos and MP3 files probably in huge abundance on Microsoft workstations.  They were also probably all running Windows, probably the same version.  So there was a large substrate of identical stuff.



Now, where people are taking pictures, that's original content.  Anyone who does an MP3 conversion themselves is probably going to be generating original content from the original digital source.  MP3 is a lossy compression, and all the codecs are slightly different and operate in a slightly different fashion.  So it's only, I mean, and what I should say is that modern analysis of typical cloud storage only shows a 0.1 percent benefit from dup elimination.



So what that says to me is that, if they bother to do dup elimination, which is not a simple thing to do, and it comes at a cost of privacy, they must be gaining a lot from it.  And the only way you could gain a lot from it is if many identical huge files are being uploaded.  And of course those are movies.



LEO:  As in piracy.



STEVE:  Yeah, that's piracy.  So that's the only reason I can see that they would still have that in there.



LEO:  And really, the hash is not going to be the same unless the file is absolutely identical.  In other words...



STEVE:  Well, one bit different is half of the bits are different in the hash.



LEO:  So if I rip a movie, and you rip exactly the same movie, that doesn't mean the hashes will be equal.  In fact, the chances are very slim that they will be equal.



STEVE:  It's only really going to be identical downloads.



LEO:  If it's the same file.



STEVE:  It's going to be we both downloaded the same file from BitTorrent and then...



LEO:  And reshared it.



STEVE:  Right.  Okay.  So Java is - Java crypto is challenged in the browser.  There are a number of things that are tricky with doing security, good crypto and security in the JavaScript in a browser.  For one thing, all of the pieces that come into the page have nominal access to the Java that's running.  So you need to control the entire envelope of everything that is there.  Also, many JavaScript implementations have known poor random number generators.  And this is a big problem for crypto that is purely Java based.



When I was doing the work on the Off The Grid project, and I developed that ultra-high entropy pseudorandom number generator, the way I solved the problem was that I sent a wad of very good entropy down with the page, and then added to that the entropy from the machine and mouse and keyboard and things, other things that I was able to get.  The beauty of that is that you're then not relying just on local entropy, but you're starting with really good entropy, but then you're adding to it so that, in my case, for example, so that GRC doesn't know anything about the entropy you finally had on your system because you immediately dumped a bunch from the local machine and mushed it all together in order to get something new.  But it solved - that approach, which they're not using, by the way, and they could trivially add, would really help the problem of them using the known limited random number-generating capabilities of JavaScript on the browser.



Now, another troubling note is, and this comes from the analysis of the script:  If you select "Remember me" during your logon, your master key to all of your data is stored unencrypted in the browser's local storage and is written to disk.  So that's not good.  You don't want to do that.  That's an example of some of the limitations, partly of their implementation and partly the fact that they're in the browser and in JavaScript.  But the problem is, we want to have a Trust No One technology.  But we really can't, we really never have that if we're using JavaScript which we dynamically download from them on the fly because all they have to do is change the JavaScript, and it's no longer TNO.



Now, what they've done is something interesting.  They've got a very good, high-level, 2048-bit public key crypto on their main Mega server, mega.co.nz or something.  That's got very good crypto.  The problem is they can't afford to serve the bulk of their JavaScript from that single server to the world.  So they use a content delivery network to provide most of the JavaScript.  They have the concept of a chain of trust, which we've talked about often in the context of certificate authorities, where the idea is you download from Mega the index.html which contains a core of JavaScript and signatures, digital signatures, fingerprints, for all the other files that it then loads from the content delivery network, the CDN network.  And the idea is that you trust the core that you get from Mega, and then you trust all of the additional JavaScript code to flesh out the client that is not coming from Mega but from a geographically distributed CDN, because that core verifies the signature.



The problem is they made a mistake in the algorithm that they chose for verifying the signatures.  They use an approach called "CBC-MAC," Cipher Block Chaining Message Authentication Code.  We've talked about cipher block chaining even recently, where the concept is you don't just take 128 bits of plaintext and encrypt it to 128 bits of ciphertext, then take the next 128 bits of plaintext and encrypt it to the next 128 bits of ciphertext, because that would mean that each block would stand alone, and there would be leakage of information.  If you ever encrypted the same plaintext under the same key, you'd always get the same ciphertext.



So instead they take the output from the first operation and XOR that, "exclusive or" it with the input to the second operation and so forth, forming a forward-pointing chain.  So you can do the same thing in order to verify a file using cipher block chaining.  And essentially you feed the file in and chain together all the ciphers and get a result out.  The problem is, this is known not to be secure for variable-length content.  That is, if the length cannot change, then this is secure.  If you were, for example, if you wanted to use CBC-MAC for 4K clusters, then because they're always 4K, it's secure.  You can trust that the code you get will demonstrate that none of the bits in that 4K cluster changed.  Any bit changes, it's going to be different.  And it is computationally infeasible to make any sort of change that you would want to and also have the MAC come out the same.



This only applies, though, for fixed length.  The JavaScript that they're loading from the CDN are inherently variable length.  And it is trivial, it turns out, to compute whatever MAC - Message Authentication Code - you wish to have for a block whose content and length you can specify.  And so this completely breaks something that, in their own documentation, they talk about, they brag about how they've done this in order to protect the code that could otherwise be not under their control in a content delivery network.  Bad guys could somehow get up to some mischief and change those files on a CDN that they don't have direct oversight over.



So they tried to protect that, and they completely blew it.  I mean, they blew it badly.  It's not at all clear why they did this.  I mean, we know how to do message authentication codes.  The only thing I can see is that they really seem to like the AES cipher.  They just use it for everything.  And so this is a way of using a symmetric cipher like Rijndael, AES, for cipher block chaining to create a message authentication code.  And I should mention there are safe ways to do it.  There's something called a CMAC, an AES-CMAC, which is an RFC standard, RFC4494.



So if you wanted to use AES, it can be done.  They just didn't do that correctly.  Or you use an HMAC, which is a standard hash-based message authentication, to also do it.  Those are strong authentication technologies.  They just didn't use them.  They basically rolled their own, and they rolled it wrong, so that there is no protection at all for the bulk of the JavaScript which is being loaded into people's browsers when they go to Mega and are trusting what they get.



LEO:  How would you attack it?



STEVE:  Anybody just changes the JavaScript in the CDN network, through whatever means, and they're able to change the JavaScript and have it authenticate so that, when it is pulled by the client, and this root JavaScript that was directly received from Mega when it runs the message authentication code over the JavaScript, it'll say, oh, this is legal.  This is exactly the code that we gave the CDN to give to you.



LEO:  That's kind of pathetic.



STEVE:  When in fact - it is really bad, Leo.  It's really bad.  Yeah.  So it breaks that.



LEO:  So basically you could do a man-in-the-middle attack on the JavaScript, replace it with your own.



STEVE:  Yeah, yeah.  And have it completely pass authentication because they authenticated in a completely broken fashion.  They also used...



LEO:  And you see this, by the way, from the source code.  You can look at the source code and say, oh, I see where they blew it.



STEVE:  Yup, exactly, yes.  And in fact...



LEO:  That means everybody else has, as well.



STEVE:  Yes, yes, yes.  And it's worth saying that these are all launch problems.  I mean, I don't know...



LEO:  They can fix this quickly.



STEVE:  Yes.  This can all be fixed.  In fact, there are some things that have already been fixed.  So these are - we shouldn't trust amateurs that have never done crypto and are writing the JavaScript for the first time, coming out of the gate on day one saying everybody use this.  They should have not been focused on this anniversary date.  No doubt work on the back end took longer than they expected.  They didn't get to the front end in time.  This wasn't released to the crypto community for vetting.  If it had been, it would have been torn apart, and they could have said thank you very much for your input, fixed all these things, and then released something that was solid from day one.  Instead, the press had a fiesta the last couple weeks with all of these stories about how broken Mega was, Mega insecurity.



Another example is they try to do - they take the user's password, and they try to strengthen the password.  We've talked about how that's done.  It's by iterating.  It's called - we've talked about PBKDF2, Password-Based Key Derivation Function.  We've talked about, just two weeks ago, when we were talking about memory hard functions used by Scrypt to deliberately make something slow.



What these guys did was they used an unsalted AES loop.  So they take the password from the user, and they convert it into the block size of AES.  And then with a fixed password, so that everybody in the world uses the same - oh, I'm sorry, with a fixed key, fixed key for AES, they then run AES on itself, 16,364 - wait.  I've lost my powers of two.  8192, 16384.  16,384 times.  So basically they take the output of that, of one, put it right back in and reencrypt it again, reencrypt it again, reencrypt it again, reencrypt it again.



The problem - okay, so there are several problems.  First of all, AES is so popular that it's now implemented in hardware, even on commodity systems.  Intel's chipsets all support AES instructions now.  So AES is screamingly fast.  So even 16,000 iterations isn't fast.  But what's worse is the key used never changes across the entire user base.  Which means that all you have to do is take a dictionary of the 10,000 most common passwords, run them through this forward.  Since no one's key is ever different, we will get out the result.  And now we have a lookup table for passwords.  So this is just as bad as the longstanding - I know.



LEO:  Oh, that's as bad as you can get, really.



STEVE:  It's as bad as you can get.  They've learned nothing from decades of experience with how to do this.  All the people that are using, like, unsalted SHA1 to encrypt their passwords, and then the passwords get out, and they're immediately broken because there are - we have lookup tables now, reverse lookup tables for hashes.  It's easy to create one because AES is so fast, it wouldn't even take the bad guys long to build the table.  And then all you do is take someone's password and look it up here.  I mean, you take the hashed result, look it up, and that reverses it for you.  So it's a disaster.



And then, finally - and all they had to do was use something slow, use Blowfish.  Blowfish in Bcrypt was chosen because the key setup is so slow, and there's no way to speed it up.  So you use Blowfish with a key that changes every time, and it just grinds along.  And so that's a much better choice than - see, for some reason they just glommed onto AES, and they used it everywhere.  And even though you can use it right, they didn't.



LEO:  It's a marketing term for them.  "We use AES everywhere," and that should make you feel better.



STEVE:  Yeah, actually it is, come to think of it.  It's on all their pages.  And finally, it was noted by some people who signed up that the link you receive for email address confirmation is your user's hashed password and your encrypted master key.  So it is - what that means - and of course email is always sent in the clear, with very few exceptions.  Certainly all of this email is.  So anyone intercepting the confirmation email gets the user's hashed password to drop into this reverse lookup table that we just constructed a minute ago.



LEO:  Didn't even have to run the table.



STEVE:  And then you have the encrypted master key, which you can decrypt using that result.  So you now have access to all the user's files.  It's a catastrophe of mistakes.  They should - there is no reason to send all that information, the user's hashed password and their encrypted master key, to them as the confirmation link.  Send a random number, and when they click that, associate it with that stuff that you've held for a while.  Maybe they're trying to do, like, stateless signup.  So they have no state at their end.  They send everything...



LEO:  I'm sure that's a higher priority for them, given their current state of being under indictment.



STEVE:  Yeah.  And all they had to...



LEO:  The less they store the better.



STEVE:  But then all they had to do is encrypt that with a key that only they know, and then decrypt it when it comes back to them.  But they didn't do that.  They left it unencrypted, the user's hashed password and the encrypted master key and other stuff, in the link.  Just nutty.  So it's hard to understand.  I mean, it's just full of holes.  And then, finally, this whole problem with dup elimination that we talked about.  They are, presumably they're doing - we know that they're bragging about eliminating duplicates.  I cannot see a way that that's safe for us, for users who might be storing data that anybody else would ever store.  If we're storing photos, and if we're storing our own videos or our own anything, I mean, 50GB is pretty tasty in terms of data.



LEO:  Oh, yeah.



STEVE:  But if what you store ever matches what somebody else has stored, that information is there.  Now, the individual file systems are encrypted in Mega's servers.  So that it's probably not possible for the MPAA to say, tell us now all the people who have this.  And as I understand it, you do send the whole file to Mega.  What Mega could have done, and this would have been a big mistake, would have been to hash it first - and we've talked about this in terms of TNO, cloud storage, and I think maybe with Bitcasa, where Bitcasa didn't even bother to upload a file that it already had.  Well, that is an instant giveaway to the recording industry, the copyright police...



LEO:  Oh, you've got copies of this, eh?



STEVE:  Yeah.  You already got it?  Didn't need to send it to you.



LEO:  It was instant.



STEVE:  Okay.  We're going to go talk to our attorneys.  We'll be right back.  So I think you have to send the file up.



LEO:  Anyway, yeah.



STEVE:  Yeah, anyway, so the MPAA doesn't instantly know that there's already a copy of this online.  But even so, somewhere there's got to be what's called a "reference count."  That is, as somebody else uploads the same file, somewhere there's a counter that increments.  Because they've got to know when it goes to zero that they can get rid of it.  I mean, somewhere they've - well, I guess maybe not, actually.  Maybe they just never flush the stuff, or if it ages and expires and disappears, or maybe they're just going to have infinite storage.  But one would think they would do that.



My point is that somewhere you are identified as being the owner of that file.  And there is a notion of the group of people who own it.  It may be that, I mean, we do understand that the file system is encrypted under the user's password and the master key that's created from that so that only the user is able to decrypt their piece of the file system.  But the mechanism is unclear.



And it's not clear to me whether it wouldn't be possible to have a subpoena which says this is a file we're sure your users have.  We've uploaded it, and we want to subpoena the reference count, and it comes back 10,000.  And they go, okay, fine.  So 10,000 people have uploaded this file.  You're telling us that because the file system is encrypted under their individual keys, you don't know who they are.  So we've found a judge who has issued a subpoena that will compel you to tell us who they are when they log in.  Because that's the point.  When you log into Mega, you are decrypting your file system while you're there.  And at that point it's clear that the file is sitting there in your file tree architecture, and it is known.



So I just - I can't see a way that it is safe to do this.  Maybe when we know more about their backend architecture it'll become clear.  I would - and we talked about this actually when we were talking about the problems, this kind of problem of dup elimination.  All you have to do is make some change to the file so that it's going to be different.  And then it won't match, and you'll have your own instance of it.  Normally there's a lot of junk up in the header that you could change, you could randomize so it's not going to hash the same.



LEO:  One bit is different, it doesn't matter how...



STEVE:  Yes.  I will say that I found it interesting that they're clearly browser-centric at this point.  I want to remind people that this is just the low-friction, no client needed, use your browser to upload and download and browse and things.  I am sure we're going to see, because they are being very open with their API to the back end, we will see Mega clients popping up fast - iOS, Windows, Linux, Mac, you name it.  And many things get better then.  All this JavaScript problem, all of this authentication problem, I'm sure they've looked - I know, because I've read their blogs, that they've looked at the criticism that they've received.  And while they sort of put up a good front, the fact is many of these critiques are correct, like the ones you've just heard from me.  There was a bunch of other stuff that was over the top, like, well, if SSL was broken, then it's like, well, okay, yes, and a meteor could hit the Earth, too.  So let's not concern ourselves with that.



But because they're browser-centric, Chrome is their favorite browser.  They talk about Chrome as the best browser for using Mega.  And interestingly, IE 10 is their second choice because both Chrome and IE 10 have implemented the HTML5 file system interface.  I've not looked at it.  But clearly you need to somehow write files back to your file system that you got from your browser.  Now, Firefox studiously avoids that.  It's never going to allow you to do that.  I mean, that's really malware's dream come true.  So...



LEO:  I'm surprised Chrome lets you do that.



STEVE:  I am, too.  You have to, like, you have to acknowledge it and say yes, you're sure.



LEO:  Oh, I know why.  It does it for Chrome OS and systems where you need to do that because Chrome is...



STEVE:  And probably Google Docs too; right?



LEO:  Yeah, yeah.



STEVE:  In Google Docs you're able to - I'm able to do that.  So it's like, okay, let's hope this doesn't turn out badly.  But I thought it was interesting that they liked Chrome first, and IE 10 second, mostly because it's got support.  They also said that IE 10's Java just runs like a bat out of hell.  They're really happy.



LEO:  Yeah, they're using a good just-in-time renderer.



STEVE:  Yeah, compiler.  Yeah.  So at this point - I read a recommendation that I liked a lot.  Actually it was the SpiderOak folks who, of course, they're in the same market.  And so they were looking at the astounding amount of interest that Mega was able to generate overnight.  I'm sure you saw the numbers, Leo.  Million, five million people.  In a few hours they had hundreds of thousands.  And they were - some numbers of new accounts per second were being created.  Anyway, the SpiderOak guys took a look at it and had some commentary.  I liked what they concluded.  They said, "Given the startup problems, nothing which you have uploaded so far should be considered safe.  So use it with caution now.  And once these problems are fixed and known fixed and confirmed, then scrap everything."



LEO:  Start over.



STEVE:  Start over.  Create a new account with new strong password.  Oh, yeah.  And they said also use a very strong, bizarro, from outer space password because you don't want to fall victim to the 10,000 password dictionary reverse lookup which somebody is doing as we speak, right now.  So use a crazy password.  But when these problems are fixed, just start over and consider everything you did before is no longer safe because technically it's not.  I think they're trying to do the right thing.  But this, using the browser as sloppily as they have in order to come up with a zero-friction solution, it's just fraught with problems.



LEO:  Hey, you mentioned salted hashes.  And it made me think of a couple of security things that you didn't mention.  Twitter was hacked.  You probably saw that.  Maybe you didn't.



STEVE:  Oh, yes, a quarter million accounts were...



LEO:  Apparently the first 250,000 users, which I'm one of them, so I got that email.



STEVE:  Ooh, no kidding.  Oh, you did get that.



LEO:  The early users, yeah.



STEVE:  Ah, okay.



LEO:  But those were salted and hashed, so probably not an issue, if you used a good password; right?



STEVE:  I would think that's really true, Leo, yes.



LEO:  So just being prudent, letting people know and forcing - they did force us to change our password.  And then the other one, and you didn't mention this, but I thought it was kind of interesting, the file:/// bug.



STEVE:  Yeah, I saw it go by, but I did not pursue it.



LEO:  In OS X.



STEVE:  What was it?  It crashes OS X or something?



LEO:  No, it doesn't crash the OS.  It'll crash any app, pretty much. If you enter it in Chrome or Safari as a URL, it will crash it.  If you enter it as a filename, it'll crash.  And apparently it's using some library, some system library.



STEVE:  It just didn't expect three slashes.



LEO:  Didn't expect that.  Oh, it has to be capital F-i-l-e colon slash slash slash.



STEVE:  Wow.



LEO:  And we mentioned this yesterday on MacBreak Weekly.  While all it does now is crash apps, as anybody who listens to Security Now! knows, that's always the first step.



STEVE:  Yes.



LEO:  Yeah.  Anyway, just a couple of addenda.



STEVE:  Yeah, that's a crash in a bad place, too.



LEO:  It is not good in the browser.



STEVE:  Well, and it's also in a field that's accepting data.  So who knows, if you created something wacky afterwards, if that would, like, crash it in a way that allows you to execute what's in the buffer that follows or something, who knows.



LEO:  Exactly.  Exactly.



STEVE:  I'm sure Apple will be on it.



LEO:  Yeah, it's kind of embarrassing, frankly.  It's a longstanding bug that nobody knew about.  Steve, always a pleasure.  This show, we do this show every Tues- I'm sorry, Wednesday at 11:00 a.m. Pacific.



STEVE:  Whatever day it is.



LEO:  Whatever the hell day this is.  2:00 p.m Eastern time, 1900 UTC.  If you want to watch live, the chatroom is always a great resource for both me and Steve.  Somebody asked a question in the chatroom, and I had to say, you know, Steve is in the middle of a conversation, but in general does not answer questions from the chatroom because he likes to research and come up with the definitive canonical answer to any question.  But there is a way to ask him questions, and next week we will answer questions, by going to GRC.com/feedback.  And Steve will pick 10 or so questions from the list and answer them.



STEVE:  And maybe we'll even get to them.



LEO:  This time.  Yeah, we missed a few last week.



STEVE:  We did four last time.  But that's because, I mean, it's not like...



LEO:  There was news.



STEVE:  ...we didn't have enough to talk about.  We still delivered an hour and a half of great content.  So that's really our goal.



LEO:  And we were explaining this week kind of more about the UPnP issue.  And of course SpinRite - I'm sorry, I always say "SpinRite" instead of "ShieldsUP!."  SpinRite's the great program Steve makes and encourages you to buy because that's his bread and butter, really the only thing he charges for right now, and that's at GRC.com.  It's the best hard drive maintenance utility out there.  There's nothing even close.  But also ShieldsUP!, which is his free service, he's had for many years.  You said you hadn't touched the code since 2009?  2006?  Been a while.



STEVE:  Yeah.  It's been - it was about 10 years, actually.



LEO:  Wow, 2003.



STEVE:  Oh, now we're at 790.  So three more people have found exposures of their routers since the last 787.



LEO:  Is there a short URL to go to for that?



STEVE:  No, there's really not, unfortunately.



LEO:  Just go to GRC.com and run ShieldsUP!.



STEVE:  And go ShieldsUP!, yeah.  And then you find you can't miss it once you go there.  Yeah, you know, I write my code to last.  And I hadn't looked at it in a decade, or I should say I hadn't looked at that aspect.  But I've written other code to do related things like the Perfect Paper Passwords support, the DNS Spoofability Test, other aspects of that.  But that particular area, the ShieldsUP! stuff has just been cruising along with no problems.  Much like SpinRite itself, that is due for an update.  And as soon as I catch up with my other loose ends, I'm going to do that.



LEO:  GRC.com, that's the place to go.  You can follow Steve on Twitter, @SGgrc.  He tweets all week with links and so forth.  And it's a good place to post queries, or more like informational updates to him because he does read the "@" replies to @SGgrc.  You can also get 16Kb audio versions of the show there for people with bandwidth constraints or hearing that just can't tell the difference, and transcripts, which makes it real easy to follow along.  If you want a slightly higher quality audio or video, get that from us, TWiT.tv/sn.



STEVE:  And now we're on YouTube with YouTube.com/securitynow.



LEO:  Yeah.  So that's a good way.  You can watch the video on YouTube.  We certainly count that.  That's part of our counting.  And we prefer you subscribe, if you can, in iTunes or at Downcast or some other client.  But if you want to watch on YouTube, you can do that.  And you can even subscribe at that point and get an email every time there's a new episode posted on YouTube.  That's at YouTube.com/securitynow.  Steve, we'll see you next Wednesday.



STEVE:  Sounds good.



LEO:  On Security Now!.



STEVE:  Thanks, Leo.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.










GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#391	

DATE:		February 13, 2013

TITLE:		Listener Feedback #161

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-391.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here, and we've got questions from our audience.  Steve's got answers, too.  Our Q&A episode, next on Security Now!.



LEO LAPORTE:  It's time for Security Now! with Steve Gibson, Episode 391, recorded February 13th, 2013:  Your questions, Steve's answers, #161.



It's time for Security Now!, the show that protects you and your loved ones, your privacy and more online, more and more important.  Here he is, the guy who does it all for us, our Explainer in Chief, Mr. Steve Gibson of GRC.com.  Hello, Steve.



STEVE GIBSON:  Hey, Leo.  Great to be with you again for...



LEO:  You were on the radio show talking about this problem, this...



STEVE:  And where are we?  I've not looked recently.



LEO:  UPnP.  But I'll tell you, when you went on the radio show, more than a hundred people...



STEVE:  200 on the first day you mentioned it.  You mentioned it on Saturday around 1:30.  And it jumped by about 200 then.



LEO:  That means people who had the vulnerability.  You have millions probably of tests.  But people who showed positive on the vulnerability.



STEVE:  Yes.  I'm not counting everyone because lots of people do multiple tests.  And it just didn't make sense to try to disambiguate their IPs.  I mean, you know, IPs drift and so forth.  So I am never double-counting anyone who tests positive.  But I am not trying to say, okay, here's the actual percentage that we're finding.



LEO:  Right.



STEVE:  And let me go to the test right now, and we'll see what an updated count gives us.  It was higher than 1,700 when I looked, I think earlier today or very early this morning, I think it was.



LEO:  1,700 people.  Now, the good news is those 1,700 people now know that you...



STEVE:  1,790.  1,790 as of this moment.



LEO:  Wow.  That's 530 more than before you went on the radio show.



STEVE:  And I think we were at 800 something last week when we talked about it.



LEO:  Jiminy Christmas.  It's not surprising.  I mean, you figure the people who are listening to the radio show are probably a little less sophisticated than the people who listen to this show.



STEVE:  Good point.  And so...



LEO:  Although that's not necessarily a factor.  But many of them may have UPnP turned on still in their router.  Wow.  And of course not word one from any router manufacturer.



STEVE:  Unh-unh.  Well, and again, as we said, they're scared to death of admitting any culpability and liability.  They don't want to, like, say anything because, if someone got hurt this way, you could make an argument that this was foreseeable, and this was defective.



LEO:  You blew it.



STEVE:  And it allowed their network to get penetrated.



LEO:  Yeah, you blew it.  Well.  All right.  We're going to talk about other matters today.  We have Q&A; right?



STEVE:  Yes, we do.  And next week we're going to have a special guest whom we've never had.



LEO:  You're not taking Presidents Week off?



STEVE:  No, Leo, we can't take any time off or we just get pummeled to death by our listeners...



LEO:  Thank you.  Thank you, Steve.



STEVE:  ...who have incorporated this into their lives.



LEO:  It is Presidents Month.  I think the entire month of February we're closed.



STEVE:  No, no, no, no, no.  Brian Krebs is going to join us.



LEO:  Oh, I'm such a fan.  Now, Brian we got to know because he worked at the Washington Post writing a security column.  Left the Post a couple years ago, still does Krebs on Security on his own and is really one of the best people to follow if you want to keep up on what's going on.



STEVE:  Well, and his particular shtick that I, I mean, the reason I mention him so often in the podcast is he tracks the underworld.  He has got probably, I mean, he doesn't talk about it, but he probably has multiple identities, and he's infiltrated that aspect, the dark black hacker forums where this stuff is bought and sold and so forth.  Anyway, he did a really interesting blog post about a week ago that talked about Microsoft and Symantec taking down and taking over a big botnet and then using their control of it to inform the infected victims that they had this problem.  And I thought, oh, you know, I mean, he is so much in the middle of this.  I thought he'd just make a really fun special guest.



LEO:  Can't wait to meet him.  I've been reading him for years.  That's exciting.  Next week.



STEVE:  Yup, next week.  So this week we've got the questions which we didn't get to two weeks ago because...



LEO:  [Laughing]



STEVE:  We did four two weeks ago.  But, hey, we gave everybody 90 minutes of, you know...



LEO:  Yeah, it wasn't a short show by any means.  It was just we had other stuff to talk about.



STEVE:  Well, and that was the Universal Plug & Play revelation.  That was the whole Rapid7 and HD Moore in there, and that had to get covered on that week.



LEO:  And my guess, we'll have a few questions about that this week.



STEVE:  Yeah, actually.  And actually some good stuff about memory hard problems.  People have asked some questions.  But the showstopper is this is, or yesterday was, the second largest Patch Tuesday in Microsoft history, their Mega Super Tuesday Patch Jubilee.



LEO:  [Laughing] Well, it was Mardi Gras.  Maybe they're celebrating early.



STEVE:  The biggest one ever, they hit us with 64 vulnerabilities.



LEO:  Holy cow.



STEVE:  This one came in at 57.  And across the board, both OS and Server OS platforms, I mean, both desktop and server OS platforms...



LEO:  This puts a little bit of a lie to what we had been saying, which was that, oh, things are getting a little stabler now.  They're settling down.  People are attacking other platforms because Microsoft does such a good job...



STEVE:  Well, actually, 32 of the 64 came from one guy at Google.



LEO:  Well, thank you, Google, I guess.



STEVE:  Yes.



LEO:  You know, it's ironic because Microsoft's been taking potshots at Google with their Scroogled ads.  Meanwhile, Google's very kindly...



STEVE:  Bing, everyone says Bing, but I don't - I just - I get Bing off of my browsers every time it shows up.  It's like, eh, I don't want Bing, I want - it just sort of seems lame.  But anyway, so IE, Office, .NET Frameworks across the board.  I'm not going to go and enumerate them for an hour because it's just more of the same.  They're all really bad, and they're remote code execution, and so patch.



LEO:  Wow.



STEVE:  And this one is a big one, so...



LEO:  You said 57?



STEVE:  57 vulnerabilities.



LEO:  Really.



STEVE:  Yeah.  And when you scroll through the list of affected systems, I mean, you know you're in trouble with the scrollbar scrunches down to about half an inch.  It's like, oh, I'll be scrolling for a while then.  And so that was the case.



Meanwhile, we have a new zero-day PDF exploit in the wild.  This just came to light yesterday.  An outfit called FireEye Malware Intelligence Lab - I thought, well, I wonder if they tried to work an acronym out of that.  FEMIL?  I don't think so.



LEO:  FEMIL.  Sounds like a menstrual...



STEVE:  Or an artery, maybe.



LEO:  The femoral artery.



STEVE:  Yes.



LEO:  Sounds like a pill for cramps.



STEVE:  What they found was they found this being exploited, effectively exploited in Adobe Reader 9.5.3, 10.1.5, and 11.0.1.



LEO:  Oh, crap.  Just when we thought it was safe to use Adobe products.



STEVE:  Eh, so.  And quoting from them, they said, "Upon successful exploitation, it will drop two DLLs.  The first DLL shows a fake error message and opens a decoy PDF document, which is usually common in targeted attacks.  The second DLL in turn drops the callback component, which talks to a remote domain."  And since this release, Adobe has confirmed they've got a problem.  So, and that's - it just happened.  We don't really know much more about it than that at this point.  But the takeaway is, if you can, don't open any PDFs.



What we're seeing is that this is being used in spearphishing.  So it would be, unfortunately, somebody who is spoofing their identity, sending you something that you're expecting or you would expect to receive or that sort of thing, like something relative to your industry, and this thing would get you.  So the thing to do actually would just be to stay away from Reader, I think.  It's specifically Adobe's Reader that has the problem.  So if you could switch to a third-party, a non-Adobe...



LEO:  I think most of our viewers have already done so with things like CuteFTP or Foxit Pro, I mean, there's so many good and free readers that I - it's just that most non-technical people just Adobe Reader either comes with it, or it's kind of automatic.



STEVE:  Or there's a link that says, "If you can't open this, click here" to get...



LEO:  Yeah, and so they're all using it, yeah.



STEVE:  To get infected.



LEO:  You know what's nice is most, well, I think Windows 8 now has a PDF reader built in.  So I don't think it's going to be an issue anymore.



STEVE:  Really.  Well, and the browsers of course are heading in that direction.



LEO:  All the browsers will do it, yeah.



STEVE:  Google's got it, and FoxPro, or, yeah...



LEO:  Firefox?



STEVE:  Firefox is on the way.  So there was something that initially looks very scary, and it was worrisome until we learned more about it.  And that has been called the "Packet of Death."



LEO:  Well, that's a good name.



STEVE:  Yeah.  It turned out what - the first report was that Intel's extremely popular 82574L - now, that seems like Stardate, but it's not.  But the 82574L is, like, everywhere.  That's the very high-performance, beautifully designed gigabit Ethernet controller.  I actually went under NDA with Intel.  It took a long time, too, to convince them that I wasn't going to steal their chip, I just needed to program it, and I couldn't use their drivers.  This was back when I was being DDoSed all the time, and I needed to come up with an ultra high-performance wire speed DoS prevention.  And to do that I had to talk to the hardware.  Anyway, so this chip is ubiquitous on any kind of Intel platforms.  And many other, like Supermicro and other people who like Intel will use that chip, too.



So what happened was customers' hardware was locking up tight at the hardware level and crashing in the microcode running in the chip, requiring a full power-down cycle.  You couldn't reboot the OS.  You had to pull the plug, wait for things to drain, and then plug in again.  And this was happening, it first came to light with one company whose customers were having this happen to them on their equipment.  And so it got their attention.  It turned out it was one VoIP vendor's packets that were doing it.  And then, quoting from their page, they said, "Problem packets had just the right Call-ID, tags, and branches to cause the '2' in the ptime to line up with 0x47f."  So there you go.



And they said - so basically they found out, like, exactly what it was that was the bad spot, and they said, "With a modified HTTP server configured to generate the data at byte value (based on headers, host, etc.) you could easily configure an HTTP 200 response," which is the standard response to an HTTP query, "to contain the packet of death and kill client machines behind firewalls."  So the idea would be you could create an evil server, and anybody who asked for a page from that server would die.  It would just kill their, I mean, just completely crash their Internet connection so that they just go off the 'Net.  They'd have to completely power down, wait a second, and then power back up again.



And the guy even created a test page where you do not want to go, so I just thought I'd mention that.  But then Intel of course got involved.  And the good news is this is not that bad.  An Intel spokesperson says that this is, quote, "one case scenario isolated to one specific motherboard maker and incorrect implementation of the controller on their motherboard (incorrect EEPROM image was programmed during manufacturing)."  So it was like a weird glitch.



LEO:  They burned a buggy ROM onto it.



STEVE:  Yes, yes, yeah.



LEO:  Okay.  It is ironic, after all, that the Intel reference code for Universal Plug & Play is the code that is causing this Universal Plug & Play issue.  Seems like Intel maybe should hire some better coders.



STEVE:  Well, but remember, I hold them harmless.



LEO:  I agree because they didn't intend for it to be put into production.  It's obvious.



STEVE:  It was Romper Room code.  I mean, it was so ridiculous.



LEO:  It was demonstration, yeah.



STEVE:  Yeah.  I mean, it was - it would - you were scanning for something and waiting until you got to the CRLF, to the slash...



LEO:  Now you're at the end of the line.  Go ahead.



STEVE:  Just right off into oblivion.  I mean, no one could think that was good.  So, I mean, and as we said two weeks ago, clearly this was demonstration.  This was to illustrate how someone serious would write code that would actually check for boundaries and buffer conditions and so forth.  So, yeah.



I did get a tweet from someone I thought I would pass on.  I have often talked about having coffee with Stina Ehrensvrd of Yubico, of course famously the YubiKey.  She did an interview on Hak5 at Rev 3.  It's on YouTube.  And so I imagine you could go to YouTube and search for, like, Hak - it's Hak5, and then I guess they have an episode number, it's 1226.1.



LEO:  YouTube.com/techfeed, I think.



STEVE:  Okay.  And she looks...



LEO:  Or /Hak5.



STEVE:  She seemed really nervous.  I mean, I know her pretty well.  We get together all the time.  She's completely relaxed with me.  But I think she was camera shy.



LEO:  Darren Kitchen scared the hell out of her.



STEVE:  But anyway, so people can get a sense for - I think it's short.  It's 12 minutes, and some girl with bunny ears is on for the first...



LEO:  That's not "some girl," my friend, that is Shannon Morse.



STEVE:  Okay.



LEO:  Of our - she works for us, too.



STEVE:  She does?  She was kind of petting her ears there on...



LEO:  Yeah, those ears, believe it or not, sense brain waves.



STEVE:  Having seen her, I'm believing it.



LEO:  And I guess that's not Darren Kitchen, it's Paul Tobias who's doing the interview.



STEVE:  Well, actually the interviewer comes on later, unless you've already gotten there.



LEO:  Darren is a hardcore hacker, so he's on TNT all the time, as well.  So, neat.  Good.  So it's worth watching?  There's Stina.



STEVE:  I don't know.  I saw - I was in a hurry.  I didn't sleep last night.  I was preparing the podcast.  I saw this.  I looked enough to sort of see her, and kind of she looked a little, whoo, okay.  Her hair's a little different than I remembered it, so I think she's changed it.  She's, you know, she's European.



LEO:  Well, she's on Hak5 now.  That's the big-time.



STEVE:  Exactly.  So anyway, I thought people who have heard us speak of her so often and know of YubiKey might get a kick out of seeing her.  And not a day went by, Leo, after I went off last week about the underpaid PR firm for Silent Circle, that I saw another article, this time in ExtremeTech.com.  The headline, once again, "Cryptography Super-Group Creates Unbreakable Encryption Designed for Mass Market."  And they have a team of ex-Navy Seals, Leo.



LEO:  Oh.  Seal Team Six is doing your encryption.



STEVE:  Yeah, not just the CEO.  It's not just the CEO who's an ex-commando.  He's got his buddies there, too, just to make - if anyone does crack the crypto, they're going to come and visit you.  So don't try.  Anyway, yeah, this is the underpaid PR firm's story.  It's amazing.



I did get a nice acronym, another one, for UPnP:  Un-Plug Now Please.



LEO:  Yes.  I think that was the name of the Rapid7 article; wasn't it?



STEVE:  No, theirs was UnPlug & Don't Play.



LEO:  That's it.  That's right.



STEVE:  Yeah, or do not play, Unplug & Do Not Play.  So Un-Plug Now Please, I like that.  I think that's crisp, short...



LEO:  Says it all.



STEVE:  To our listeners who may be trying to download Security Now! from my site, I just wanted to make a note that I know all of the audio is gone.  Last night I put the new server online.  I'm so tickled with it.  I mentioned the architecture a couple times on the podcast.  I have four highly overprovisioned, single level cell SSDs.  "Highly overprovisioned" means they're actually 64GB SSDs, but they only give me 46.  They keep the entire balance for sparing.  So that's what we mean by "highly overprovisioned."  If anything goes wrong, there's a ton of essentially spare sectors to swap in.  So I take those four, run it in a RAID 6 configuration, which is a notch above RAID 5.  RAID 5 allows one drive, any one drive to die.  RAID 6 allows any two drives to die.  So with a four-drive RAID 6 configuration, any two can completely go belly-up, and I'm fine.



Then the RAID controller has half a gig of battery backed-up cache which has a write-back policy, not a write-through.  So the cache stays dirty on purpose, which lowers the write fatiguing on the SSDs.  So the cache never writes to the RAID array unless that region of the cache is needed by somebody else.  So, for example, anything that's, like, frequently changing a certain location in a file is not even written to the file.  It just is changed in the battery backed-up cache.  And it's safe to do that because the RAID controller knows exactly what it has written so far.  And if, you know, you pulled the plug right in the middle, it would keep what it's - I think I've got 48 hours of battery backup at this point.



LEO:  That's awesome.  That's a great solution to... 



STEVE:  And it's got double redundant power supplies, double redundant blowers.  I mean, already the processors, it's got a Xeon X3450, which is the high-end server.  It's got eight threads that it runs.  And anyway, so I didn't sleep last night.  I brought the system online.



LEO:  With excitement?  Oh, oh, you were working.



STEVE:  Well, it was both.  It was excitement, too.  I was running Windows 2000 Server.  That's what I had been running all of, you know, for 13 years.  And so it was getting a little long in the tooth.  And what I believe happened is that there was a subtle date bug in Windows 2000 IIS 5, which was the web server for that platform, that nobody ever found because nobody ever ran it for 13 years.  But I did.  And it used to be...



LEO:  [Laughing]



STEVE:  It used to go years without having a problem, and then it began crashing.  I mean, I've been, like, I missed the crash a few nights ago, I think it was like the middle of last weekend.  We were off the 'Net for, like, six hours while I was asleep, and I didn't know it.  I have alarms and everything, but it died in a different way that didn't - so the alarms were pacified, yet nobody on the 'Net was.  So anyway, I'm hugely relieved to replace this.  And I have to say, everyone knows I'm no Microsoft fanboy.  But what they have done with their server platform I'm very impressed with.  It is - they've modularized it so that you - and at first it was, like, different.  So I was like, oh, I don't like different.  You know, because you and I are getting a little old, Leo.



LEO:  Ah, see?  I told you.



STEVE:  Oh, yeah.  But then I kind of - I thought, whoa, you know?  The modularization means that the attack surface is lower.  And we've often talked from a security standpoint about you don't want to have things there that you need to prevent people from doing.  It's better not to have them at all.  So here you're like, you only put in that you - Microsoft lets you only load the modules you want.  So it's smaller and lighter weight, a lower attack surface, and that's the case for the server platform and IIS.



Anyway, I am so tickled with my choice.  I mean, I bought all this stuff two years ago because I actually had problems once when I was up in Petaluma with you.  And something went a little wonky down here in the datacenter, and I thought, okay, I've got to fix this.  And so that's when I went to solid state because I thought, okay, I'm king of SpinRite.  I know that drives have problems.  And  several of the drives, I'm back on - I think these were Ultra SCSIs.  That was the era when I built this was the - I think the Ultra SCSI 320s was the technology back then.  And you can't get those anymore.  So the drives are dying slowly.  I have a full redundant server.  Oh, and I even have one of these, a second of one of these that will just sit there, powered off, if, like, the motherboard catches fire or something completely bizarre, in which case I still won't be off the 'Net for long.



So, but, oh, my point was I forgot to transfer the media.  I got the whole website up, all the active content.  I've been working on it for a week.  Microsoft did change things that caught me out in a number of places where I had to work around stuff.  So I was - I had to change my code to make it work under Windows 2008 versus Windows 2000.  And then I forgot to transfer all of the Security Now! files.  So people started this morning complaining, saying, hey, you know, I'm getting a 404 error on the small versions of the content.  Because of course the large versions bounce through Podtrac and to you, Leo, and I only serve the small ones.  So it's like, oh, what?  And it's like, oh, that's right, I didn't move those over.  So anyway, I'll do that after the podcast today, and then I'm going to go to sleep.



Okay.  So this is the last chance that there will ever be for people to get one of those [indicating blinky lights].  The PDP-8 kit did go live on Kickstarter [bit.ly/pdp-8].  And Leo, there are now only seven left.  They started with 30.  Let's see if there's still seven.



LEO:  I still haven't bought mine.



STEVE:  Well, if you want, I will build it.



LEO:  No, it's too expensive.  I'm not gonna...



STEVE:  Okay, okay.



LEO:  I can't - it's for blinking lights you're paying 800, 900 bucks?  That's crazy talk.



STEVE:  Well, if that's who you are, then that's true.  But remember also, all the documentation on this mini computer is online.  I have it all on my site.  The operating system OS/8 is there, the assemblers and editors and so forth.  But if anyone was interested, I mean, it makes a great demo, hang it on the wall with the lights blinking.  But it is a perfect instruction set for someone to learn.



LEO:  You want to - I know you've mentioned this before, that your retirement plan is to write a new OS for the PDP-8 instruction set.



STEVE:  Actually I decided that was a bad idea.



LEO:  Good, thank you.



STEVE:  After writing those programs, I had enough.



LEO:  Yeah.  You don't want to stay up all night again.



STEVE:  Well, it's just there are too many things that, for coming from a big CISC processor side, as I am...



LEO:  This is a RISC processor?



STEVE:  Well, no, no.  But it's certainly not a complex instruction set.  The opcode is three bits.



LEO:  It's primitive, is what it is.



STEVE:  It's three bits.  So you can have eight different things.  There's, you know, jump, and there's...



LEO:  Really, that's it, eight instructions.



STEVE:  Eight instructions, yes.  And so - and then the rest are - the rest is address.  So it's, I mean, it is a perfect instruction set if someone wanted to learn...



LEO:  For learning, yeah.



STEVE:  Yes.  If someone wanted to learn...



LEO:  It's probably got, what, a jump, a compare, an add, rotate probably...



STEVE:  If you go to GRC.com/pdp-8/pdp-8, that first page shows a beautiful front panel that, scroll down, and there I lay out the instruction set and show people what the instructions are.  But so if somebody wanted to, like, start, maybe with their kids...



LEO:  Perfect, yeah.



STEVE:  ...and build this, and then write some programs, you can really write programs.  I did.  And there's also a beautiful emulator on the Mac that's - actually I dusted off one of my Macs.



LEO:  See, I'll just do that.  It'd be cheaper to buy a Mac Mini and put lights on it.



STEVE:  Yeah, well, okay.  So anyone who's interested, bit.ly/pdp-8.  I made a shortcut for it.



LEO:  And you know who you are.



STEVE:  Bit.ly, bit.ly/pdp-8.



LEO:  And look over Steve's left shoulder, and you'll see what you're going to get.



STEVE:  Yup.  There were 30 because that's all Bob had.  There were only 30 of these Harris HD-6120 chips left in the world, as far as we know.  And 23 of them are spoken for now.  There are seven left, and we have 10 days to go.  So I'll remind everyone next week, and then you'll never have to hear about this again because, one way or the other, the Kickstarter will have closed.



LEO:  Actually, it's a little deceptive because they have a - I'm looking at this - a multipurpose operate instruction which can do one instruction, complement-rotate-increment.



STEVE:  Yes.  It is.  And, oh, and it's beautiful, too, because you can do really fun things with it.



LEO:  So that one instruction really does quite a bit.



STEVE:  Yes.  It is amazing how you can combine the bits in there to - and so that's the one non-memory reference instruction.  Everything else is a memory reference instruction, meaning that the fourth bit says either the other eight are addressing page zero, or in the current page.  It was an inspired little machine at the time.  It's my first computer.  It's what I learned.  The first computer I ever saw was a real PDP-8.  And I learned how to program in machine language on it, assembly language.  So anyway, it's there.  It's an opportunity.  It is true that you could do this, if someone wrote an emulator for the iPad, for example...



LEO:  Wouldn't that be cool.



STEVE:  ...you could, you know, touch the buttons and flip things and make it go...



LEO:  Oh, I like that.  That's a good project.  Maybe somebody should do that.



STEVE:  And I have thought about that.  The deal here, though, is it's an actual front panel.  For some people, actually 23 people so far, that's been appealing.  And of course I have three, so...



LEO:  So those switches, you could flip those switches, they all work, and they all do what the early PDP-8 did.



STEVE:  Yeah.



LEO:  It's a fully functional replica.



STEVE:  Yeah.  If anyone's wondering, I did have three videos on the site until last night.  They'll come back this afternoon because I demo the one that I built and show the actual unit that I assembled in one.



LEO:  That's really cool.



STEVE:  Then I also demo the two programs, one that is the blinking lights program called Deep Thought, and the other one is a puzzle program called Lights Out.  Oh, and Bob is going to burn both of those...



LEO:  Oh, neat.



STEVE:  ...into the ROM of these.  So they will be built in and come along with it.



LEO:  They come with their own built-in game.



STEVE:  A puzzle and blinking lights, yeah.  Okay.  So I've tweeted this.  And Leo, oh, my god.  Bit.ly/coolmodems, all lowercase, c-o-o-l-m-o-d-e-m-s.  Bit.ly/coolmodems.  If you zoom in on that, that is a timeline diagram showing exactly, step by step, what modems are doing when they're going through their mating ritual.



LEO:  [Mimicking modem] That thing.



STEVE:  Yup.  I mean, you can see at the beginning the touchtone, which is a two-tone matrix, and so you can see it dialing touchtone.



LEO:  This is the handshake is what they call this.



STEVE:  Yes.  It is the entire modem handshake sequence, stretched out.  But it's showing you the acoustic spectrum where the various modems are, like, sending test things to each other in order to see what, like, gauge the nature of the channel which is interconnecting them.  Anyway, I just thought it was very cool, bit.ly/coolmodems.



And I did want to mention, I think maybe we mentioned it after we stopped recording, but a number of people mentioned it, that I misspoke last week and used the word "Java" in a context where I clearly meant "JavaScript."



LEO:  I said, that can't be possible.  Mr. Gibson would never do that.



STEVE:  I just got carried away in my enthusiasm.



LEO:  He knows the difference, though, folks.



STEVE:  Yeah, I certainly do.



LEO:  So wherever he said Java, just put JavaScript in.



STEVE:  That's what I meant.  And I apologize for - I hope I didn't confuse anyone.



LEO:  I think people probably understood.  Certainly...



STEVE:  I got a nice note from Donn Edwards in Johannesburg, South Africa, written to both of us.  Both of us got a note, Leo.  But it was addressed to me.  But, "Dear Steve and Leo," he says.  "I'm a long-time Security Now! listener and SpinRite user."  Oh, I should say the subject was "SpinRite made a pensioner cry."



LEO:  Aw.



STEVE:  "...[A]nd SpinRite user.  On Thursday a family friend phoned me near to tears because her computer wouldn't boot properly, even after trying the last known good configuration option."



LEO:  Which almost never works, by the way.



STEVE:  No, I don't think I've ever had that work.



LEO:  Yeah.  It's not magic.



STEVE:  It's like, I think it was Microsoft trying to pretend to care.  That's what I think.  So he said, "She was starting to panic because there is financial information on the PC that will ensure she gets her pension this year.  I brought the computer home, booted up with SpinRite, and it soon found an unrecoverable sector which it repaired and did its magic.  After checking that everything is fine now that the sector has been fixed, I called her with the good news.  She just burst into tears.  What can I say?  Thank you for a wonderfully helpful utility.  Best wishes.  Donn."  And, Donn, thank you for sharing that with me and our listeners.



LEO:  Yeah.  All right.  Now it is time for Q&A.



STEVE:  Ah, okay.



LEO:  I wonder if I should install Flash before I do that.  Geez, Louise.  It always makes me nervous when I see a Flash update.  It's like, oh, I'd better do that, huh?



STEVE:  I wonder, that's got to be an ASCII code because he put something, an "it" on the end.



LEO:  Oh, are you talking about the first question?



STEVE:  Yeah, I don't know what that is.  That's a...



LEO:  Let me look at it.



STEVE:  It's an ASCII - 23 in hex.  23 hex.



LEO:  That's his - you're talking about his Twitter handle.



STEVE:  Yeah.



LEO:  00100011it.



STEVE:  Yeah.  So that's 23 in hex.



LEO:  23.  What is the ASCII for 23?



STEVE:  That's going to be a control code because it's less than 32.



LEO:  Huh.  Interesting.  Well, we leave this as an exercise for the listener.



STEVE:  Yes, we do.  We might as well actually...



LEO:  Who will absolutely give you the answer.  @00100011it says:  In Episode 387 you said you had four solid-state drives in RAID 6.  RAID 10 would give you the same size volume with much better performance, and the mirror is safer.  Why don't you use RAID 10?



STEVE:  Because he's wrong.  RAID 10 is a combination of striping and mirroring.  RAID 0 is striping, where the idea is you split the data across two drives, where you can sort of think of like all of the...



LEO:  We figured it out, by the way.  23 hex is ASCII for the pound sign.  We believe his handle is "Pound It."



STEVE:  Ah, very nice.  That makes sense.



LEO:  And it's just vaguely filthy, which, yeah, makes it seem appropriate.  Go ahead, please.



STEVE:  And only someone who's sufficiently geeky is going to get that, so everyone's going, what the heck is that 001?  Anyway, so RAID 0 is striping, meaning that you take the size of the drive, if you have two drives that are identical size, and double it, and then you sort of spread the data across both drives.  That gives you performance because, for example, if the drives are, well, you're able to read and write to both at once, you get twice the read and twice the write performance.  The problem is it's lower reliability because, if either drive dies, you lose everything.



LEO:  Right.  You don't want that.



STEVE:  No.  So then RAID...



LEO:  That's what we call "Scary RAID."



STEVE:  So, well, but back in the day when drives were small and people wanted more storage, they would - and they had faith, or...



LEO:  Is it the case, and I've been saying this, so I hope it is, that if you have two drives striped, you have twice the chance of failure?  You're multiplying the chance of failure of each drive?  Actually adding.



STEVE:  Correct.



LEO:  So it's twice as likely to fail.  Three drives would be three times as likely to fail?



STEVE:  Oh, yeah, three drives...



LEO:  If any one drive dies, the whole RAID dies.



STEVE:  You lose it all.



LEO:  So that's why I call it, and Alex Lindsay gave me the name, "Scary RAID."



STEVE:  Scary RAID.  So that was RAID 0.  RAID 1 is also called "mirroring," where this gives you complete safety against either drive dying.  So you write to both, and you read from one.  And if for some reason you can't read from that one, you read from the other one.  So you get - you'd have redundancy.  So RAID 10, think of it as a one and a zero, meaning that both striping and mirroring are going on.  RAID 10 is four drives which are mirrored, or I should say are striped and mirrored.  So you get the performance benefit of the striping and the redundancy benefit of the mirroring using four drives.  But it's not safer because, think about it.  The way I have mine set up with RAID 6, any two drives can fail, and I'm fine.



But in a RAID 10, there are several combinations of two that take you out.  That is, if two that were striped and mirrored die, it's as if, well, you're hosed.  So there are, what is that, one, two, three, four, five, six, there are six combinations of two drives which, well, there are six combinations of two drives in a set of four.  And two of those six possible pairs of failures would take you out.  So much less safe than RAID 6.  However, it is higher performance.  He's right about that.  RAID 6 incurs some performance hit because it's doing some math on the data that writes to the drives in order to create that redundancy.  I don't see that because the RAID controller has half a gig of battery-backed-up cache.  So the RAID controller buffers and only writes if - and it's a write-back policy rather than a write-through policy.



So anyway, it's very good performance.  And I just don't want to mess with - well, and the other thing that I should mention is, when I'm looking at the drives, they just kind of flicker every so often.  I'm in a huge datacenter, and I've looked at other people's servers.  And I'm thinking, what are they doing?  I mean, the drives are just going crazy.  I mean, just nonstop.  Mine, I have to sit there and wait to see them flicker to sort of make sure that everything's still working right.  So anyway, that's why RAID 6 is superior from a reliability standpoint than RAID 10.  But, agreed, at a cost of performance.



LEO:  Question 2 comes to us from John in Arizona.  He's wondering about whole disk encryption on solid-state drives.  Actually, we've talked a little bit about this before.  It is a question I have, as well:  I've stayed in the mechanical hard drive world using whole disk encryption with TrueCrypt on laptops.  I'd like to enter the SSD world on Windows XP or 7.  Could you explain how you can have the same level of Trust No One using whole disk encryption on a solid state drive using something like TrueCrypt?  Owner of SpinRite since November 2010.  Thanks for your response.



STEVE:  So this was an interesting question.  And I wondered if other people might be similarly confused because you can use TrueCrypt on an SSD.



LEO:  Doesn't matter.  Okay.



STEVE:  Yeah.  The software, the whole disk encryption technology doesn't care what the underlying technology is, whether it's magnetic or electrostatic, essentially, is what an SSD is.  It just doesn't matter.  So...



LEO:  He might be confusing, now, there is an issue with secure wiping in SSD; right?  Maybe he's confused...



STEVE:  Actually, there is not.



LEO:  Oh, there's not.



STEVE:  Because, remember, because there was a similar concern with wiping a hard drive because hard drives spare sectors in the same way that SSDs spare chunks.  Remember that the secret is run TrueCrypt before you ever put any data on the drive.



LEO:  Ah.  So it will always be scrambled, never in the clear.



STEVE:  Yes.  You never have any, I mean, any spares that got spared out will be encrypted, and it's just full of random noise.  So that's the key is don't add TrueCrypt to an already setup system.  Make an image of your current drive, set TrueCrypt on this, and then restore that image to the TrueCrypted drive so that that drive never is unencrypted.  But, yes, you can absolutely use TrueCrypt on an SSD.  In fact, I do.



LEO:  Question 4 is from "g33kp0w3r," spelled in leet, in Stanton, California, wants to know about private email:  Dear Elders of the Internet, I love your show, own SpinRite, blah blah blah.



STEVE:  But I got a kick out of it.  I guess you and I, Leo...



LEO:  I told you.



STEVE:  ...are the elders of the Internet.



LEO:  I said it before the show began.  I have crossed the Rubicon into old age.  I am now an elder.  And you know how I know that?  Because every Thursday when I go over to the supermarket over there I get a senior discount, 10 percent off.



STEVE:  Yeah, I get the discount at the movies now.  At first I was sort of balking at that.  But it's like, hey, wait a minute.



LEO:  I'll take it.



STEVE:  I'll take a couple bucks, what the heck.



LEO:  Yeah.  We are the elders of the Internet.  At least according to the movie and grocery...



STEVE:  And I've got switches, I've got switches and blinking lights behind me to prove it, Leo.



LEO:  You're a PDP-8 programmer.  That makes you an elder.



STEVE:  I actually used those in the old days, yes.



LEO:  Since the Mat Hogan - he says "Hogan," but it's "Honan" - incident, I've been wondering what the best host would be for an anonymous email account so I could use it to register all my other accounts.  I've tried S-Mail - I don't know that - S-Mail.com, but they deactivate any free account after 30 days.  I'm looking for something that I don't have to pay for because it's very complicated to pay anonymously.  That's a good point.



STEVE:  Yeah.



LEO:  I don't mind ads as long as they're anonymous, like on TV and radio.  They don't know anything about me except they're probably reaching people.  He's talking - maybe he's thinking about this Scroogled campaign from Microsoft in which Microsoft says "Google reads your email."  Of course they do, as does Microsoft.  Google and Microsoft both have to read your email to provide antispam filtering.



STEVE:  Well, and to target advertising.



LEO:  Well, Microsoft - and this is what Microsoft should be saying:  We both read your email.  But Google uses it to target ads.  We just use it for spam fighting.



STEVE:  Google understands it, and we don't.



LEO:  Right.  Maybe they understand.  I think it's a little bit of FUD because it really comes from this notion that reading your email is a human reading it and with a human understanding.  It's not - it's not that.



STEVE:  And we can't even agree on whether you're reading books, Leo, so...



LEO:  [Laughing] What is reading email?  In my opinion, indexing keywords in an email is not the same thing as some human reading it and making sense out of it.  And you can tell that because the contextual ads on Google's Gmail suck.  They don't - they have nothing to do with anything.  And Microsoft even makes this point in the ad.  Look, see, you've used the word "mortgage," so you're getting mortgage ads.  The ads don't work.  I think that to me that's an evidence that, yes, they're scanning email for keywords, but it's not reading your email in any sense that we understand, anyway.  He's worried about people reading his email.



STEVE:  And my question to you is, do you know of any free anonymous email systems?



LEO:  Yeah.



STEVE:  And I guess he doesn't like Google.  Or...



LEO:  Well, if you don't want to use Google, use Yahoo! or Microsoft's Outlook, both of which are free and anonymous.



STEVE:  Well, I think following from Mat's experience, he wants to use Google, for example, for his main, everyday use account, but he wants his registered email, key recovery and password recovery to be somewhere completely different and to be anonymous, to also be free.



LEO:  So the first thing I would say is that any email system that offers antispam protection is reading your email just the same as Google is.  You can decide whether that bothers you more than - if what you're saying is I don't want targeted ads, Outlook or Hotmail/Outlook or Yahoo! Mail - I think Yahoo! Mail...



STEVE:  I think all he's saying here is he just wants to be anonymous.



LEO:  Well, that's - and Gmail's anonymous.  I mean, your IP address is visible to any website you visit.



STEVE:  Well, but remember, the idea is he wants to use Gmail for his main account, so he needs an off-the-beaten path sort of...



LEO:  Well, like I said, Outlook.com and Yahoo! Mail.  But all web-based email sees your IP address unless you're using TOR.



STEVE:  I think I'd stay away from Yahoo!.  Yahoo! seems to be having a real problem lately holding onto their accounts.



LEO:  This is one I've used in the past.  And, you know, Phil Zimmermann set this one up, it's called HushMail.



STEVE:  Oh, yeah, sure.



LEO:  It's HIPAA-compliant private business email.  They provide PGP.  Encryption is built in.  You have to pay for it, which means it's not fully anonymous.  See, this is why I don't like this Scroogled campaign because I think it conflates a lot of different concepts.  When you say "anonymous," is it not the case, Steve, that your IP address is visible to anybody you visit?



STEVE:  Yup.



LEO:  And if a federal law official...



STEVE:  And ISPs are being required now to log.



LEO:  Oh, yeah.  Well, okay.  So let's just talk about the  email first.  They're all subpoenable.  So they can get your IP address and then go to the ISP and say who was using this IP address at this time, and the ISP says, oh, whatever you want.  But absolutely, you make a very good point, which is that ISPs are in many cases, they're not yet required to, although they will be soon, I'm sure, recording everything you do anyway.  So really all they have to do is figure out what ISP you're using, and then they go to the ISP and say, "Tell us everything about Leo."  And the ISP in most cases, unless you have a very good ISP, but if you have Comcast or a standard ISP, will say, yeah, whatever you want to know, sure, sure, sure, here you go.  So I think if you really, if you really want private email, it's a little more complicated than you might think.



STEVE:  Maybe lick a stamp, Leo.



LEO:  I don't know how private that is, either.



STEVE:  Ah, that's true.



LEO:  I mean, the truth is, if you're using encryption and TOR, you're pretty good; right?  Because TOR would give you some anonymity about your IP address.



STEVE:  Yeah, that's a very good point.  Running through TOR solves the problem.  So you could use TOR and Outlook.com.  I think Outlook seems like a reasonable free alternative to use as your repository for password account...



LEO:  TOR's not perfect either because the ends have been in the past subpoenaed.  But it's better than - it's probably pretty good; right?  Nothing's perfect.



STEVE:  Yeah.  And it's the people who are running mega downloads of really noxious content that draw attention to themselves through TOR, not somebody who's connecting to an SMTP server somewhere.



LEO:  And, further, we should point out, if you use an Internet service provider, you're probably busted no matter what you do.  And so really anonymity on the Internet, I don't know.  I don't think that's really...



STEVE:  It's being lost.



LEO:  Yeah.  So anonymity means getting off the grid, using only cash, not using the Internet, not living anywhere where there are cameras of any kind.  You pretty much have to move to the woods and be a survivalist, if you really want to be anonymous.  I don't - I agree we all deserve privacy, but I doubt we're going to get it.  So the problem with things like Scroogled is there's some sort of implication that Microsoft is doing a better job of privacy, and I don't think it's the case.



STEVE:  Where does - what is Scroogled?  Is that the name of the campaign?



LEO:  Oh.  You don't know about this.  Yeah, there's a whole Microsoft campaign called "Scroogled."  It's Scroogled.com, but I just saw a TV ad for it, so they're actually advertising now, as well.



STEVE:  God, and they have a domain?



LEO:  Yeah.  And what they're telling people, Scroogled started with something not completely wrong, which was that Google Shopper, which used to be a search result, is now all paid ads.  That's legitimate.  That's something people probably should know.  But now they're saying, "And by the way, Google reads your email."  They've been saying this for a while, Gmail Man reads your email.  And it's really FUD, and I think it's kind of unfortunate because - for two reasons.  One is it plays upon people's fear of technology and the anthropomorphizing of technology.



STEVE:  Yeah, and so Microsoft is being hurt to some degree by that, too.



LEO:  It's a dumb thing, yeah, exactly, it's dumb.  And it has the implication that somehow you're more private with Outlook Mail, which is not the case.  The only difference is Outlook Mail doesn't use keywords to target ads.  But it's still reading your mail.  Has to.  That's the only way you can do spam fighting.  If "reading," quote, is what you're worried about.



Paul Vines, Seattle, Washington:  Thanks for the job.  He says:  Steve and Leo, I started listening to the show about a year ago, and I have you to thank for a computer security internship I just got.  Right on, Paul.  The phone interview questions were all about SSL and SSH, what their vulnerable points were, and different types of attacks that could be performed on them.  Halfway through the interview I realized just about all of my answers were coming from what I'd learned on Security Now!.  Hah.  So thanks for a great show, and keep up the good work.  Isn't that nice.



STEVE:  It was very nice.  I just sort of tossed that in because I thought that was cool.



LEO:  Here's another kind of thank you from Joseph in Los Angeles.  He says:  Thanks for recommending DigiCert.  I switched from Comodo to DigiCert.  Comodo wanted $1,616 for my three certs; DigiCert wanted, like, half that.  You saved me $837.  The EV validation process was pain-free, and the installation instructions were easy to follow.  Start to finish was less than four hours, including going to lunch.  I like anything that involves lunch.  I even had to call their tech support because of a mistake I'd made when ordering.  They walked me through how to correct my mistake.  Thanks so much for letting your listeners know about your experience.  Joseph.



STEVE:  And I wanted - I saw this, and I thought, good, that gives me a segue because I had yet another amazingly positive experience.  This new server that I was talking about having set up is running - is on Windows 2008 and IIS 7, whereas the creaky old one that finally died was IIS 5.  Well, the certificates are incompatible.  And so here I was, I think it was maybe Thursday night, maybe Friday night.  It was after 5:00 Pacific time.  So even if - I don't know where DigiCert is.  Maybe they're in the Pacific Northwest.  I don't remember.  But, I mean, it was after hours, and I sent email to Todd, the guy that I'd worked with before, and I said, hey, I see how I can reissue things, but I absolutely want to make sure that that doesn't revoke the existing certificates because we're using those right now.



LEO:  Good point, yeah.



STEVE:  And so I don't want to press the wrong button.  And then I kind of poked around their website, and I saw where they had made it very explicit that they would always warn before anything would happen that would revoke existing ones.  And one of their cool policies is, you buy one certificate, and you can use them on as many servers as you want.  Now, that may not help many people who only have one server.  But in my case I needed to straddle - I needed to set up the new server with different certificates for the same domains.



Anyway, the whole thing was, like, 10 minutes for three different - two EV and one standard certificate.  I used their web interface.  I recreated certificate signing requests on IIS 7.  I dropped them into the website, pressed a button, and it emailed me my results.  It was like [chuckling], it's just amazing.  And it's like, this is the way - it's like a little certificate factory.  This is the way it ought to be.  And I've never understood why no one else can get it right.  These guys really do.  Oh, and my point was that, after I was about halfway through that, I got email back at, like, 5:45 from this guy.  He said, "Hey, Steve.  I'm no longer doing customer service.  I'm over in something or other.  But I saw your note and wanted to respond."



LEO:  Isn't that great.



STEVE:  And I thought, wow, this is - DigiCert, D-i-g-i-C-e-r-t.  They're the guys.



LEO:  These are expensive.  Are these the extended certificates, extended SSL?



STEVE:  Yes, the EV.



LEO:  That's why they're so expensive, yeah.



STEVE:  Yes.  And the EV, you get your root domain and your "www" for free.



LEO:  Oh, that's nice.



STEVE:  And two other wildcards.  So you can - so, like, I have...



LEO:  Like images.grc.com or something.



STEVE:  Exactly.  And in my case media.grc.com.  They're all - they all live in one.  And then I have my lower quality one is grctech.com, which is only used as a third-party for cookie checking, in order to try to get cookies set by third parties.  So it had to be in a non-similar domain.



LEO:  Well, I hope you've enjoyed this nontechnical respite because now we go to Question 7, and things get hard.  Specifically, hard memory.  Christiaan Basson in Cape Town, South Africa asks of memory hard problems:  Does it scale?  Longtime listener, love the show, really appreciate the easily digestible chunks and resources you produce.  That's a little disgusting.  After listening...



STEVE:  Hopefully they're not chunky when they come back.



LEO:  Eww.  After listening to the recent episode covering memory hard problems, I couldn't help but think:  Does it scale?  How practical is the solution for a web farm churning through many authentication requests a minute?  Could you perhaps explore this practical aspect of trying to implement this at scale?  Thanks again for a great show.  Christiaan.



STEVE:  So it's a great question.  And I've got two memory hard questions here because it generated a lot of interest.  I just couldn't even put them all in one podcast or we'd just have had the memory hard question podcast.  Consider the lifecycle of your involvement with a web server, that is, how much real time is used in it validating your password versus how much time you're spending there?  So you enter your username and password, and if it has to do this memory hard function that takes a second, I mean, that's all we're talking about, a second.



Now, understand that hashes, we see the Bitcoin guys talking about gigahashes per second, billions of hashes per second.  And they're, like, at 50 gigahashes per second, 50 billion hashes per second.  I imagine, though, that a memory hard system can only do one a second.  It takes a whole second.  So this is 50 billion times slower, and there's no way to speed it up.  So that means that any hacker is going to run 50 billion times slower.  So it's achieved its goal.  And my point is that, yes, a second is a long time on the server end to spend.  But that's the cost of offering this security.  But in terms of the user's life with their login session, it's nothing.  I mean, we only log in somewhere, we're poking around for a minute or two, maybe.  And so my point is that, despite the fact that that's much more than a 50 billionth of a second, it's a whole second, it still works because the total population of people visiting that server farm will all be spending one second, yet hanging out there for minutes.  And so it does scale.  And sort of like in just the right way.



LEO:  Beautiful.  A lovely thing.  Question 8 from Jason Crow, Rochester, Minnesota.  He's wondering also about memory hard problems.  Obviously a coder.



STEVE:  You have a problem with that whole...



LEO:  He's a coder.  Well, he's got a block here, a <Begin-Obligatory-Compliment> block.



STEVE:  Oh, yeah.



LEO:  Yeah.  Since the beginning (blah blah blah), a bright spot in my life (blah blah blah), please never stop (blah blah blah), SpinRite user (blah blah blah)... <End-Obligatory-Compliment> block.  I think you need a for while loop here, actually.  While still smiling, I really enjoyed your explanation of memory hard problems in Episode 388, and I have a question:  Would it be possible for the pipelined FPGAs to access some kind of shared mapped memory or shared page file, which already had the required memory hard problem contents mapped into it?  In other words, work on the same pool of data.



STEVE:  Right.



LEO:  If so, couldn't the first FPGA be, for lack of a better term, the super FPGA, the only one with the needed memory, which as part of its dedicated function is the only FPGA which creates and then stores the contents of the memory to a location which the following FPGAs then access?  It's sure to be still much slower than each FPGA having its own memory, but I would think it would be much faster than each FPGA recalculating the needed contents of the memory space every time it's required.  In an extension to this, couldn't each memory address space retrieval then also be pipelined?  This isn't something we'd put in our living rooms, but perhaps not out of the realm of possibility for a nation state.  Nowadays, with cheap hardware, probably anybody could do this.  Your thoughts?  This is clustering.  Jason Crow, Rochester, Minnesota.



STEVE:  And the answer is no.



LEO:  No.



STEVE:  What's so cool about this, I just - I love how simple and elegant this is.  Remember that you take a region of memory, and you use the password to - you just hash it, for example, in a standard hashing hash, to get the first value.  And you stick that in the first location of memory.  Then you hash that using, again, the password as the key, and you stick it in the second slot of memory.  And you do it again for the third and again for the fourth and again for the fifth.  So what you end up with is pseudorandom noise in this array.



But then, okay, so what he's saying is couldn't you do like a super FPGA to just sort of blast that out?  Now, then, he somehow wants to do the next step in parallel.  And the beauty of this is you can't because you then take the result from the final memory cell that you filled, you hash that, and that you treat as an address into the array.  And the contents of that address you hash, and that gives you the next address.  So there's nothing to do in parallel.  You have to follow a path.  It's a little bit like my Off The Grid approach using the Latin squares.  You have to follow a path.  And the contents of each memory cell, mixed with the key that is the master key, only that gives you the next location in memory.  And then only when you know that do you have the next one.  So it's provable and incredibly elegant that you - there's nothing you can do in parallel.  You don't know anything until you have the next - the data in the cell you jump to, and then its contents, not its location, its contents tells you where to go.  It's just - it's beautiful.  And no one has figured out any way to speed it up.  It's great.



LEO:  That's the point.



STEVE:  Yeah.  Exactly.



LEO:  A reminder about something we talked about many moons ago, which is I'm curious about what the status is.  Chris Rhodus in Madison, Mississippi - MS is Mississippi; right? - reminds us about the spray-on nanocapacitor antennas.  Remember those?  I was cleaning up my bookmarks this morning and came across a bookmark for Chamtech, which was chamtechops.com.  They had a spray-on antenna kit you could buy.  No longer on their website, but I started to do a little research.  I came across an article.  They partnered with an investment banking firm, Hickey Freihofner Capital, so maybe things are starting to happen.  Did you ever hear from anyone who actually used the product?  Was it a TED Talk or something like that?  Oh, no, it was a Solve for X Intel talk or something like that.  Chris Rhodus.  Thanks for all the hard work.



STEVE:  And what I remember, to refresh our memories, remember they, like, sprayed it on a rock, and it turned the rock into an antenna?  And they sprayed it on a tree, and it turned the tree into an antenna.



LEO:  Yeah, nano antennas onto something, yeah.



STEVE:  Yeah.  And it was nanocapacitors, some sort of a wacky nanocapacitor emulsion which they claim radiates in an amazing way.  And so I did follow the link, and it was SFGate.com on their PR website, about their partnering with an investment banking firm. Apparently there's huge interest being shown by everyone who listened to our podcast who want to spray rocks.  And so they need to raise some capital.



LEO:  Well, why did they take it off their website?  I am still [muttering].



STEVE:  Yeah, no, I agree.  And we have a friend of ours who listens, who's a big antenna guy.  I'm blanking on his name right now.  But I remember he waved his arms around and shouted and said, no, no, no, no, no.  I design antennas.  You can't spray rocks.



LEO:  [Laughing]  So was it, I mean...



STEVE:  Wait, could it be Spencer Webb?  Is that somebody - no, no.  That's somebody from PC Week, I think [Spencer Webb is at AntennaSys].



LEO:  I have to say, when I go to their website, it is not inspiring.



STEVE:  No, it's little scary, isn't it.



LEO:  What do they have on there?  Looks like an 1890s mechanical...



STEVE:  Yeah, a [chyrasopterus ph] or something.



LEO:  Yeah.  I...



STEVE:  Maybe they let the domain go.



LEO:  Yeah.  Well, the other possibility is, since they say we proudly serve a variety of government and military agencies, is that maybe - no, this is the same company.  Maybe they just - maybe somebody bought it.  Maybe the feds said, you know, you might not want to talk about this anymore.



STEVE:  Okay.  Yeah, I mean, it's hard to guess.  They said, "'Our decision to engage Hickey Freihofner Capital is a significant step in helping us realize our vision of improving the range, energy efficiency, and quality of the devices we all use to stay connected,' said Anthony J. Sutera, co-founder, CEO, and president."  Oh, I wonder if he's also a Navy Seal.



LEO:  [Laughing]



STEVE:  "The antenna application of nCap" - oh, they've got an acronym now - "nCap technology are virtually limitless."  Hey, if you've got rocks and trees covered, pardon the pun, then I suppose you pretty much can...



LEO:  That's pretty good.



STEVE:  ...anything you want.



LEO:  That's unlimited.



STEVE:  "From improving cell phone reception to enabling consumers to access wireless services from almost anywhere."  Didn't they spray it on a wall?



LEO:  Yeah, a brick wall.



STEVE:  I mean, I remember it was kind of - it was wacky.  It was fun.  Anyway, so they've patented it, but that doesn't mean anything because people patent windup steamrollers and things, so...



LEO:  Patent things like, well, don't get me started on patent law.



STEVE:  [Laughing] No.



LEO:  That could be a long conversation.  William Parsley - I love your name, William - in Ohio had a random question:  About a year ago, your podcast was brought up by a student in one of my classes.  He was recommending the podcast to someone else, but I overheard it.  I was intrigued.  I decided to check it out next time I had some free time.  Well, I've been listening to Security Now! from the beginning for a little less than a year now, I think, and I'm up to Episode 167.  Oh, you've got a way to go there, Mr. Parsley.  You're not even halfway there.



I feel like I've learned a ton from your podcast I wasn't getting from school or books.  I'm not sure if that's because of the approach you use to present things or the fact that the content is consistently relevant to today's world.  And this is taking into account I'm not even into the year 2009.  It's almost like ...



STEVE:  And now all the content is gone off the website, and he's unable to listen to anything.



LEO:  Well, now, we still have all the content.



STEVE:  I know.



LEO:  It's just your versions are gone.



STEVE:  And it'll be back later today because I'm obviously not going to go to sleep anytime soon.



LEO:  Yeah, Steve does - oh, dear.  Steve, you should get some sleep.  It's okay.  Steve has 16Kb and transcripts and so forth.  But we still have the high-quality audio and video.  So he can still get it.



It's almost like a soap opera, where I can't wait till the next week to see if the problem that's brought up in the show has been addressed by Microsoft, by Google, by Wells Fargo, whoever it is that had the problem in the earlier episode.  One random off-topic thing you said that caught my attention has been haunting me.  You mention in one of the recent episodes, well, recent for me, that is, you carry around an iPod with background music on it [SN-165].  This is kind of an odd request, but I'd really be curious to know what you have as your background music.  I've been looking for something like that, but the music always distracts me.  I like listening to it, I guess, instead of working.  Not a question, just wanted to say thanks to you and Leo for putting out a wonderful podcast.  I travel a decent amount for work, and this podcast makes it easy.  What do you listen to?  Oh, lookit, he's holding up CDs, folks.



STEVE:  Yes.  I really, really like this.  It's a series of 10 called "Liquid Mind."  And the artist is Chuck Wild.  And it's not for everybody.  It is, I mean, if you tend to doze, this will knock you right off.  I mean, I could listen to it right now, and I wouldn't be able to finish the sentence. 



LEO:  He's a daytime Emmy nominee.



STEVE:  Some of it is just beautiful.  I think it's synthetic.  It's sort of chords merging and blending, and there's clear composition involved.  Many of the pieces I've actually really come, like, I'll stop and listen to it.  But don't worry, William, that's not normally what I do.  But it is, it's perfect for when you want to fill the background to blank out noise, yet you don't want to - you just want to relax, and you want to read.  Or, well, no, I guess when Leo's reading he's listening.  So you want to do something where you want an audio background.  And I think I have 40 hours of it.



[Music]



LEO:  This is it.  Listen.  Go to sleep.  I'll play it from the beginning.



STEVE:  Boy, that almost - that really did almost put me out.



LEO:  Can I make a suggestion?



STEVE:  Yeah.



LEO:  Because I have seen studies that say the best music to listen to if you want to keep thinking, but not - obviously, anything with lyrics is out because we're going to start listening to lyrics, and then you're not being able to program or whatever.  So it's got to be instrumental.



STEVE:  Oh, I can't, absolutely can't.  And so I have...



LEO:  Gotta be instrumental.  



STEVE:  But my employees used to tease me because I had, you know, my music was filling the company.  And they said, yeah, Steve's music with no lyrics.



LEO:  I'm going to make a suggestion.  I have seen research that says baroque classical music - Bach...



STEVE:  For me it's Vivaldi.  I love...



LEO:  Vivaldi, Purcell.  It's very bright, very upbeat, no lyrics.  And I have seen many studies that say that actually you can listen to that, and it will actually improve your productivity.



STEVE:  The only problem I have with it is it sometimes can be a little too engaging.  They'll have crescendos and, like, things happening.  And you're like, whoa.  Very little happens in Chuck Wild's Liquid Mind.



LEO:  No [humming].  It's the kind of music that they play when I get a massage.  And, frankly, it just puts me right out.



STEVE:  Yeah, that's exactly it.  And so anyway, that's the answer to William's question.  I love it.  So if anyone else is interested, check it - wherever you found it, Leo, I guess other people can, like, go...



LEO:  Oh, yeah, yeah.  LiquidMindMusic.com.



STEVE:  Oh, perfect.



LEO:  And it's on iTunes, as well.  You can buy it from iTunes.  I, um, yeah, give me baroque.



STEVE:  Hey, it doesn't have to be for you.  It's for me.



LEO:  Give me baroque.  I like the baroque, yeah.  Little Brandenburg Concerto, I don't...



STEVE:  Oh, No. 3 in G major.



LEO:  Yeah, it's beautiful.



STEVE:  That is the best thing ever written.



LEO:  [Indiscernible].



STEVE:  I can't do - oh, are you kidding me?  My world comes to a halt if Brandenburg Concerto No. 3 in G major is playing.  It's like, okay.



LEO:  No, you're right.  That's pretty good.



STEVE:  It's just it's, oh, my god, it's so well done.



LEO:  Yeah.  No, you're right. Brandenburg may be too good.



STEVE:  Yeah.



LEO:  But a lot of Vivaldi.  I listen to Water Music.  There's some good stuff out there that just will - it's bright, but won't get you going.  And I, see, I don't - I'm not big into the new age sound, which is what this is.  This is kind of...



STEVE:  So [Cruz Cova ph] just tweeted, and he says, "Hey, Steve.  I have those CDs, too."  He says, "I can't focus without them."



LEO:  I mean, they certainly don't distract.  You're not going to stop and go, ooh, what's that?



STEVE:  Actually there is one that I do stop on, one particular composition out of about 40 of them.  Oh, that might be the one, actually.



LEO:  This is relaxing.  I'm afraid it'd be too relaxing for me.  You, I bet you, because you work at Starbucks and stuff, I bet you part of the reason you do this is not so much for the music but to seal out the outside world.



STEVE:  Yes, as I was saying, it is a beaut- if you were, like, trying to read print on a train or on a bus or on a plane...



LEO:  You can't hear anything, yeah, you don't hear anything else.  And that's really more the point than the music itself.  It just is - it's just something, you know, you could almost listen to white noise except that's not quite as attractive.



STEVE:  Yeah, I just think that's lovely.



LEO:  Yeah [humming].



STEVE:  Because I've got enough going on.  I'm twitchy enough.



LEO:  Yeah, you could use a little - all that coffee you drink.  How much is that?  Now, I know people want to know this.  You were up all night.  You haven't slept in 24 hours.



STEVE:  Correct.



LEO:  What coffee brews are you using?  What are you using to stay awake?



STEVE:  Actually, I have something I like so much, I'm fantasizing about somehow arranging to have you taste it because it's just - it's so good.  But this is the end of my third pot.



LEO:  Holy cow.



STEVE:  And around 11:00 I thought, well, I'm going to stay up all night, so let's start having some coffee.  I really had a ball last night.



LEO:  So, what - is it a bean that you like here?  What is going on?  What is this?



STEVE:  It's not exotic at all.  That's the thing.  But, for example, at Starbucks the other day I had my crew - I got the little espresso paper cups, and I poured some from my canteen into my little cup, and I said, just try this.



LEO:  This is real coffee.



STEVE:  And they're all, like - yeah.  And they're all, like, they've got froufrou, and they've got cream and sugar and everything to, like, manage what Starbucks gives them.  And they, like, they couldn't believe how good it was.  Jenny...



LEO:  Is it the bean?  What is it?  What is - you've got to give us a hint here.



STEVE:  So here it is.  It's just Starbucks' espresso bean.  And I grind it for drip, and then I drip it through my little brown paper Melitta filter.



LEO:  That's fabulous.



STEVE:  Using my little whatever that wacky - you knew the name of that silver pot that is like a five-cup sort of thing.



LEO:  Yeah, yeah, moka pot, yeah.



STEVE:  Whatever.  Anyway, it is - so you get - it's the dark roast.  It's actually lighter in caffeine because, as we know, espresso has less caffeine than lighter grind, or lighter roast because roasting roasts the caffeine out of the bean.  And it's - but I don't do decaf because decaf is scary processing.  And, oh, my god, Leo, it's just - and I just, you know, black, no cream, no sugar.  And it's just - it's a smooth, amazing cup of coffee, just the espresso bean ground for drip and dripped.



LEO:  You have Trader Joe's down there; right?



STEVE:  Oh, we do.



LEO:  Next time you're at Trader Joe's, get a can of the Kona.  The good Kona.  It's expensive.



STEVE:  Okay.  I don't care.  I'll try it.



LEO:  I think you might even like it better.



STEVE:  I'll try it.



LEO:  It is the most smooth delicious coffee I've ever had.  So good.



STEVE:  No kidding.



LEO:  Oh, yeah.



STEVE:  Oh, neat.  I'm...



LEO:  If you can get a good Kona pea bean, you're getting the best, in my opinion.



STEVE:  Okay.



LEO:  It's also among the most expensive coffees in the world.  But it's very good.



STEVE:  Well, I mean, and Trader Joe's generally is pretty affordable.  So I'll...



LEO:  Yeah, it's not bad.  It's not bad.



STEVE:  They've brought it at the best price you could get.



LEO:  Right, and they have a good Kona.  It's really good.  Now, I actually don't use it because I'm using - making espresso.  It's a waste of good Kona.  When I do the press, I do the Kona.  But for the espresso I just - we have a local coffee roaster here who does something called Godfather's Roar which is just right for me.  It's a coffee I can't refuse.



STEVE:  You have a roaster.  Wow, Leo, I'm so jealous.  And a personal trainer.  And...



LEO:  Oh, I get the whole...



STEVE:  And a masseuse, apparently, who, okay, so you don't want that music playing during your massage.



LEO:  I, you know, I used to get massages every week, and I stopped doing that because I was too relaxed [laughing].



STEVE:  Yeah.



LEO:  Now I just get them as needed.



STEVE:  We've all noticed that's a problem with the people on the TWiT network.



LEO:  I get them on demand.



STEVE:  They're all too relaxed.



LEO:  Yeah.  I guess for President's Day maybe I'll get a massage.  You know, actually we have a...



STEVE:  When is - is that Monday?



LEO:  It's Monday.  We have an all-day - this is funny.  Lisa and I have - normally Friday's a day off.  We're going to take all day.  We're meeting with patent attorneys all day.  It's an all-day affair.



STEVE:  What?



LEO:  I'll tell you offline.  But as a reward, at 5:00 p.m. she booked us a massage.  It's like, if you're going to spend your day off, 10 hours with attorneys, you deserve something, a reward at the end of that.



STEVE:  That'll be cool.



LEO:  Don't think even Kona's going to help me on this one.  Steve Gibson does this show every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern time.



STEVE:  Come hell or high rise.



LEO:  He does not stop.



STEVE:  And I may not have slept, so I'll still be rising.



LEO:  Holy - you'd better get some sleep.  I want you to - you're going to start hallucinating.



STEVE:  Nah.  I think my - the most I went was three days.



LEO:  Augh.



STEVE:  I rewrote the entire I/O system of an Interdata operating system, changed it, at Bob's Big Boy on a pad of engineering paper.



LEO:  Jiminy.



STEVE:  In a three-day, no-sleep - because Bob's Big Boy was 24 hours back then.



LEO:  Sure.  Oh, yeah.  Oh, yeah.



STEVE:  And I liked their chowder.



LEO:  That's where finer programmers go to - all the best.



STEVE:  Just sat there and ate French fries and drank coffee and rewrote the whole I/O system.  And it worked.  So it was - and I did that a couple times.  But three days is about my limit.



LEO:  Wow, you know, I think I am getting old because the idea of going without any sleep of any kind is just painful.



STEVE:  And you should know I'm a big sleeper.  I mean, this is...



LEO:  Good, I'm glad to hear that.



STEVE:  This is not something I do often.  But I was watching "Morning Joe" a couple weeks ago, and I was really surprised.  They were sort of talking around about how little sleep they get.



LEO:  Well, they do a morning show.



STEVE:  And that's what Jenny said, she said, oh, you know - well, exactly.  That's part of the problem.  And then she said, oh, you know, it's sort of macho not to get - not to need that much sleep.  And I said, well, you know, I mean, I'm really an eight-hours-a-night person.



LEO:  Me, too.



STEVE:  Because I know it's so important.  It is anti-inflammatory.  Your body needs it to recover.  And, no, it's...



LEO:  It's important for health, I agree.  You're putting your - you're taking life in your hands here, Steve.



STEVE:  Yeah, well, we've got to get the videos and the audio back online.



LEO:  All right, okay.



STEVE:  So I'm headed to Level 3 right now.



LEO:  Steve Gibson, GRC.com, that's the website you must go to.  Later today the 16Kb versions of all the shows will be back online, as well the transcriptions that Elaine does, the actual English-language, written by a human transcriptions of each and every episode.  We have the 64Kb MP3s and the video in a variety of formats on our site, TWiT.tv/sn, and wherever better Internet programming is made available.  That would include iTunes, the Zune Marketplace.  On your phone there's a variety of things like Stitcher, for instance, you can listen to Security Now!, and I encourage you to do so.



STEVE:  And YouTube has it now, YouTube dot...



LEO:  YouTube.com/securitynow, yeah.  Yeah, that's another spot for it.  Thank you, Steverino.



STEVE:  Thanks, Leo.



LEO:  See you next time on Security Now!.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#392	

DATE:		February 20, 2013

TITLE:		The Internet Underworld

GUEST:		Brian Krebs

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-392.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  We first converse with today's special guest, Brian Krebs, who for many years wrote for the Washington Post and is now publishing his own "Krebs on Security" blog.  Our topic is "The Internet Underground."  After that, we catch up with a somewhat busy and interesting week in Internet security.



SHOW TEASE:  It's time for Security Now!, and we're in for a big treat.  One of my security heroes - not Steve Gibson.  He's here.  Actually two of my security heroes are on the show today.  Steve, yes, but also Brian Krebs.  He started writing "Krebs on Security" when he was at the Washington Post.  He's been doing it on his own for the last three years, KrebsOnSecurity.com.  Brian Krebs talks about The Internet Underworld, next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 392, recorded February 20th, 2013:  The Internet Underworld, with Brian Krebs.



It's time for Security Now!, the show that covers your security and privacy online with this fellow right here, our Explainer in Chief and security guru Steve Gibson of GRC.com.  Usually it's just Steve.  It's the Steve show.  But today we've got a guest.



STEVE GIBSON:  Yeah, we do.  I refer to Brian often on the podcast because he has his thumb on the pulse of a different aspect of security than we normally cover.  When I approached Brian about being on the podcast today...



LEO:  I should say, because you keep saying "Brian," it's Brian Krebs.



STEVE:  Oh, yes.



LEO:  Who has, for many years - welcome, Brian, it's great to have you on Security Now! - for many years wrote about security at the Washington Post and really brought a well-informed eye on security to mainstream media, which was kind of unusual.  In fact, no one's doing it after you left.  Hard to believe it's three years ago, and now doing it on your own at KrebsOnSecurity.com.



BRIAN KREBS:  Yes, sir.



LEO:  Great to have you, Brian.



STEVE:  Yeah.  And as I said, I often refer to Brian.  I keep an eye on his blog.  And what I see is that he sort of has a different focus than we do.  We're more sort of security technology and security theory and sometimes computer stuff and that.  Brian's take, from what I've seen, is to, like, watch what is going on by all the cretins.



LEO:  [Laughing] Cretins?



STEVE:  Cretins.



LEO:  Smart cretins, though.  And they're not from Crete.



BRIAN:  I like to call them "miscreants" in my - my friends who read my stuff a lot say - they tease me, and they go, you know, Brian, we'll give you a dollar every time if you just replace "miscreants" with "ne'er-do-wells."



LEO:  Ne'er-do-wells, I like that even better, yeah.



BRIAN:  Yeah.



STEVE:  And that's better than trying to figure out what color someone's hat is because...



LEO:  Black or gray or white, yeah, yeah.



STEVE:  ...you know, is it gray, is it black, is it dark gray, is it light black?  Who knows what.



LEO:  And it's better, more importantly, than the word "hackers," which has a...



BRIAN:  Right.



LEO:  You know, while mainstream media - and for some time people said let's call them "crackers," which didn't really sit well with me.  It sounds like somebody on a porch playing a banjo.



BRIAN:  I have a theory about that.  If somebody calls a malicious hacker a "cracker," they've just dated themselves.  I mean, that's - but he's been around the scene for a long time and really takes offense at the hackers...



LEO:  And hackers should really have - but "hackers" should have a more honorable tone to it, since it does have an honorable beginning.  And there are still many hackers out there, hardware and software, who are not miscreants.  So I like "miscreants."  "Ne'er-do-well" is even better.  Bad guys. 



BRIAN:  There you go, bad guys, yeah.  That's...



LEO:  And I hate to say "cretins" because I don't think they're necessarily dumb.  Some of them are dumb, but there are some very impressive cretins out there, as well.



STEVE:  Okay.



BRIAN:  Without a doubt.



LEO:  Yeah.



STEVE:  Now that we've established that.



LEO:  Nomenclature is important, Steve.  You know that.



BRIAN:  Words matter.



STEVE:  We're going to have fun this podcast - oh, nomenclature is everything - talking about Brian's focus, that is, what the bad guys are doing, what the trends are, what sort of - there's, like, state sponsored.  There's organized crime.  There's random individuals.  How does the money flow?  Just sort of take an overview of this aspect of what goes on with Internet crime in general.



BRIAN:  Yeah.



STEVE:  Which is not something we've spent much time talking about, and that's where Brian spends a lot of time looking.  So I thought it would be great to get his thoughts and the benefit of all of his research.



BRIAN:  Well, what you just laid out, Steve, actually makes a lot of sense.  And I'd love to talk about all that.  You know, one of the things that interests me, I spend a lot of time, is kind of lurking in the underground.  And part of the reason I do that is because I like to know what's going on, what these guys are talking about.  But you get sort of an unvarnished look at what is going on.  I'll give you an example.  A little while ago I was trying to - I was working on a project, actually I'm still working on this project, where I was trying to figure out, okay, what do we know about these ISPs out there that are friendly to bad guys, right, the bulletproof hosting providers, stuff like that.



LEO:  Yeah, because somebody has to provide them with Internet access.



BRIAN:  Right.  Literally they do.



LEO:  Presumably that person has some idea of the kind of traffic they're hosting.



BRIAN:  Without a doubt.  Well, but the problem is, is it's kind of like - it's kind of like the issue with when you find a website that's malicious or it's hosting some nasty content, and you complain to the hosting provider, and they say, well, okay, we'd like to help, but we're just a reseller.  And, by the way, we're a reseller of a reseller, and you need to talk to these guys.  That's kind of what happens with the bulletproof hosting stuff is they jump through a variety of hoops to cover their tracks.  But I thought, well, why not just ask the people in the underground where they go to, you know, where do they trust?  What are the places they go to put their sites online?  And that's a kind of approach yields some really interesting results, instead of trying to go at it through the front door.



STEVE:  And from the things you've blogged, and this is one of the comments that I've often made about you, just from assuming, based on what you're writing, that you must have established some anonymous identities in those circles.



BRIAN:  Yes.  On a lot of different forums and sites.  And I try not to be too obtrusive and just, like I said, lurk and occasionally interact with folks.  Like I did this series, I've done a series, ongoing series on ATM skimmers.  And a lot of those images and some of the videos that I got there were actually just me talking to people on these forums who were selling these devices and chatting them up and just pretending I was interested in buying them, getting them to send me more information and pictures and things and explain how the technology works.  But that's about as far as I go with interacting with people on these forums, so...



STEVE:  Right.  So mostly it's sort of passive watching.  And of course you'll, by watching, you'll pick up references to other forums and URLs to other places.  And so after a while you end up sort of mapping that network.



BRIAN:  Yes, yes.  And, yeah.  As sort of a self-preservation exercise, it's usually good not to...



STEVE:  Keep your head down.



BRIAN:  ...[indiscernible] in the forehead too much.  One forum in particular, I won't name them, but they have replaced their home page right now and are redoing the site because they figured out that, not only did I get back on after the last time they kicked me off, that, you know, they had a compromise - it wasn't my fault - in the meantime.  So anyway, it's...



LEO:  So is it mostly IRC?  Is it forums?  Or is it a mix of the two?



BRIAN:  Yeah.  So a lot of the relationships are built on the forums, and people's reputations are built on the forums.  The forums are a way for people to build their reputation as somebody who can be trusted - in a criminal way - and build a reputation as somebody who's got something to offer the rest of the community; right?  So but a lot of the transacting, you know, the actual changing hands of malware, money, whatever it is, a lot of that takes place offline, you know, off the forums in private Jabber or instant message communications, stuff like that.  But, yeah, the forums are sort of the open-air bazaars of the underworld, Underweb, as I like to call it.



STEVE:  So when you were talking about how they establish an Internet presence, like how they get websites up and so forth, what occurs to me is the issue of money because that's something in the real world which does connect us all.  And on some level it would seem to be traceable.  So like the old adage was, you know, "Follow the money."  And I'm sure that law enforcement must recognize that that's a potential Achilles heel of any miscreants who are somehow wanting to collect money for their actions.  So how does that all work?



BRIAN:  Yeah, it is, well, that's a good question.  So follow the money still works as a very good investigative technique.  I don't care if it's journalism, if it's investigative journalism, if it's law enforcement or whatever.  But there are some wrinkles; right?  I mean, in the modern digital economy that we have there are lots and lots of ways that people can get paid.  And, by the way, new methods of getting, transferring money are being brought online every day, and companies are tripping over themselves to add mobile payments and all kinds of other ways that you can move money around.  And the really interesting thing about that is you watch the reaction of the guys in the underground because they love that stuff.  The first time somebody comes out with a new way of moving money around, you can bet that there are 16 different ways that the good guys didn't think of that that could be abused.  And so very quickly they hop on those.



But to your point, I mean, about following the money, yeah.  Sometimes it's not that hard.  They might move money from one bank account to another.  But more often than not, they're moving money from one account to an intermediary, and sometimes just series of intermediaries before it gets to where - an account that they can withdraw at or use it from.  And on top of that, they're relying on digital currencies, or virtual currencies or what have you.  Some of the more popular ones are like WebMoney or Liberty Reserve, Pecunix, there's a whole bunch of them.  But these are sort of unofficial currencies.  And they can help move money around relatively anonymously.  Some of them, it's not too difficult to create bogus identities and link it to regular bank accounts and push money through that way.  Of course getting money into and out of these systems can be challenging, and that's really where cybercrime investigators who are following the money trail tend to focus these days.



STEVE:  The linkage to the real world.



LEO:  Brian, if you can go to these forums, if you can get in, if you can talk to these guys, why isn't law enforcement doing this?  Or are they?



BRIAN:  Oh, no, I'm quite certain they are.  And some of these forums are actually...



STEVE:  They're just not reporting it.



LEO:  Yeah, but at the same time you'd think they'd be more effective in stopping all this if they were in there and talking to these guys.



STEVE:  It's just too vast; isn't it, Brian?  I mean, it's just sprawling.



BRIAN:  There are dozens and dozens of these forums.  Some of the more interesting and clueful ones are in other languages, particularly Russian, and that presents its own challenges.  But I think that law enforcement, I would be very surprised if law enforcement did not have a strong presence on all of the major forums out there.  But being able to know what people are doing does not necessarily equate to being able to match that activity with an identity.



LEO:  Right.  And maybe you don't - you want to, as they did with Enigma in World War II, you don't want to bust yourself by knowing too much; right?



BRIAN:  Well, right.  I've found myself in situations like that before, where...



LEO:  It would have to be Brian who knew this.  Oh, it's that guy.



BRIAN:  Well, so to give you an example, so let's say you have an account at one of these forums.  It's a privileged account, and only a certain number of people can see some information.  And you've got some really good information.  Do you go write about it?  Do you blog about it?  Knowing that they're going to go back and do a full review and find out who looked at what and when and what their usage pattern is.  And pretty soon that account's going to be gone.  So the same thing holds true with law enforcement. I mean, anytime they decide to do something, it affects their visibility, and everybody's visibility, for that matter.



LEO:  We're talking to Brian Krebs of KrebsOnSecurity.com and really one of the foremost researchers and writers about - actually, really I'd say writer first, but with all of this undercover work you're doing lately, you're really being a great source of information.



BRIAN:  Oh, thank you.  Thanks.  Yeah, you know, the frustrating thing about these - you mentioned following the money.  The frustrating thing about these alternate payment systems is the way they're being plugged into and meshed with traditional payment mechanisms.  Like, you remember the - they called them the scareware, the fake antivirus stuff that pops up on your screen, you know, got this little statement...



LEO:  FBI.gov.  Send us, what is it, value packs?  MoneyPaks?



BRIAN:  Well, so it used to be you need our antivirus software.  Pull out your credit card and pay for it.  But a lot of people got together and said, all right, this is ridiculous.  These people can use credit cards.



LEO:  Can have a merchant account.



STEVE:  Merchant accounts and all this.  So they made it a lot harder and a lot more expensive for them to do this.  And I think that's contributed to a slight shift, and that's part of what we're seeing with the ransomware is they shifted the attack a little bit.  It's still sort of, we have control over your machine, you're in danger, you did something bad, you need to pay us money.  But instead of asking for people to pull out their credit cards now, they're saying go down to Walmart or Walgreens or whatever and buy one of these MoneyPak or Ukash cards.



LEO:  It seems so obviously dumb.  I mean, obviously the FBI doesn't do this.  And yet people must do it or they wouldn't continue this.  There must be enough success to make it worthwhile.  I mean, who's going to go to Walmart, get a MoneyPak and send it to the FBI?



BRIAN:  You would be surprised.  I mean...



LEO:  I guess I am.



BRIAN:  Look, there are a lot of people who are just joining the Interwebs every day.  And maybe they aren't as savvy as some of you guys out there.  But, I mean, I did a piece, an investigation, it was about, let's see, it was August of last year.  And I was working with a researcher who had gotten control over a server that the bad guys were using to keep track of all the victims of their ransomware.  And so it was, like every day it was incrementing, like the number of people who got infected, the number of people who - and the number of people who paid.  And it was like, I think that they had, like - let me see if I can pull it up.  They had - right.  So you had to pay a hundred dollars to get this warning off your computer that you were looking at child porn or whatever.  And you could pay a fine of a hundred dollars to avoid jail time.



STEVE:  To be absolved.



LEO:  Now, it's $300 now, by the way.  Price has gone up to get out of jail.



BRIAN:  It has gone up, so true.  And it hasn't been that long.  So they said, you know, pay us a hundred dollars or a hundred euros.  In this case it was the good guys or the white hats or - so we weren't going to use that term.  But, you know, the guys who were messing with the bad guys, you know, they took over this thing.  And it was an attack against a bunch of French Internet users, so it was whatever the French police is, warning on their machine.  And they had something like 2,700 victims in one day.  And 3.7 percent of them paid the ransom.  And it was like, you know, almost 8,000 euros in one day.



STEVE:  A day.



BRIAN:  One day.  And that's just one subset.



LEO:  Who are these people?  Are they organized crime?  Or is it just individuals?  Is it small, as it has been in the past, groups of - kind of like hacker groups of teenagers that get together?  Or is it all of the above?



BRIAN:  Oh, it's definitely all of the above.  In the sort of Underweb space that I spent a lot of my time, I would say a tremendous amount of this is, you know, ankle-biter type, small-time cybercrime.  And by this I mean, you know, these are people who may not have actually that much in the way of street smarts with cybercrime.



STEVE:  Skills.



BRIAN:  What's that?



STEVE:  Skills, I was saying.



BRIAN:  Skills, skills, yes, you have "nunchuck" skills, you know.  Channeling Napoleon Dynamite.  They don't really understand the ins and outs of doing the crime in ways that may not one day expose them to doing the time; right?



LEO:  Well, I'm thinking of the guys who hacked Mat Honan, Derek the God and his - Cosmo, the guy, his friend, who's now doing jail time, or not jail time, but he's like 15, and he got caught.  It was just - they were teenagers, and they were kind of ignorant.



BRIAN:  Ignorant and arrogant.



LEO:  And arrogant at the same time.  Good combination, isn't it.



BRIAN:  It's a wonderful cocktail.  So it's a sure recipe for getting busted for this stuff.  But anyway, these new players are joining the forums at a fairly regular clip.  And they're constantly annoying the crowd, you know, the senior and established members on the forums.  But they're tolerated.  The senior members will put up with them because most of the top forum members, they're there because they've got different services and software for sale.  And a lot of what they're selling are turnkey solutions.  It's like you really don't have to know how to put up a botnet.  Somebody'll do it for you.



LEO:  These are script kiddies, in other words.  At least we used to call them that.



BRIAN:  Yeah, so a lot of them were script kiddies, and they're relying on somebody else's automation to help them get their operations up and going.  And so they tend to be the biggest buyers of the services that are for sale on the forum.  Now, they also tend to be the welchers and rippers of people on the forums.  But nonetheless, they...



LEO:  Gee, you can't trust a crook.  What a thought.



STEVE:  And are the relationships like a piece of the action, like the seller gets a percentage of the proceeds?  Or is it a one-time purchase?  I'm just sort of wondering if the script kiddies end up being agents for the more senior members who are behind the scenes, pulling the strings.



BRIAN:  Sure, sure.  Yeah, so you asked a lot of questions there.  There are a lot of things going on, particularly when somebody puts themselves in a situation where they don't - they're buying something they don't really know what it does.



STEVE:  Right.



BRIAN:  So, for instance, for the longest time people bought phishing kits, right, to tackle phishing 20 different, you know, a little software package, and you unzip it, and you've got readymade phishing kits for 20 different things.  Well, a lot of those had backdoors.  And they would - the guys who sold it to you would go in and steal all your...



STEVE:  Aaaah.



LEO:  [Laughing]



BRIAN:  And that still goes on.  That still goes on.  And even, so some of these software, these malware services that are sold, there's no honor among thieves in the underground, really.



STEVE:  Right.



BRIAN:  And so these guys will - some of them are quite clever, and they'll crack the encryption or crack the copy protection on these malware packages.  And then they'll go and say, hey, I cracked this, here you go, download it if you want it for free.  Of course a lot of times they'll backdoor it before they do that.



LEO:  Wait a minute.  Are you saying they DRM these?  They have copy protection on them?



BRIAN:  Mm-hmm, absolutely.



LEO:  [Laughing]



BRIAN:  They do because - and I think that that's part of the reason why we've seen a shift in the underground away from the bad guys selling software to more software as a service; right?  They don't - they're not making a lot of money off that because, hey, they're vulnerable to what I just explained, you know, somebody cracks your software and open sources it or whatever, you know, or just puts it out there for any idiot to download.  But what they've started to do is say, well, all right, if you want to run our software, you've got to buy a license.  And this license entitles you to support.  And you can file trouble tickets, and you can do all this other stuff, 24/7 support.  But it only entitles you to use this - in the case of, say, a botnet creation kit, it only entitles you to use it - or an exploit kit, which is actually a better example.  It only allows you to use this exploit kit at a particular domain, and your license is tied to that domain.  And if you try to use it somewhere else it just won't work.  And so that license allows you to do that.  But that's a barebones license.  And so if you want all these bells and whistles, you've got to pay extra for it.  Those are add-ons.  This is a la carte.



So there's a lot of that going on.  And not surprisingly, one of the, I think the biggest, sort of the busiest area of criminal commerce in the Underweb is developing these plugins for malware tools that have been massively adopted.  So somebody leaks the Zeus source code, as they did a couple of years ago.  Well, that may have been somebody who actually had the source and leaked it against the will of the guy who created the software.  Or it could have been the guy who sold the software itself.  He got sick of all these people he had to support.  I mean, because at some point it comes down to you have, like, thousands and thousands of users, and half of them don't even know how to, you know, they don't know anything about...



STEVE:  They're just clueless, yeah.



BRIAN:  They're clueless, and they're constantly annoying you with questions about how to set it up and use it.



LEO:  So JavaScript what is that?  How does that work?



BRIAN:  What's Java?  How is it different from JavaScript?  Where's the "any" key, you know?



STEVE:  Well, and of course you also have the problem that many of the vulnerabilities which these kits are designed to exploit, they ultimately get found and fixed.  And sooner or later they sort of dry up across the Internet.  And so something that had value initially begins to have diminishing returns.



BRIAN:  Yeah.  This is actually a very interesting dynamic in the underground, and it's part of the - I think it's part of the reason why we're starting to see a subtle shift in the way a lot of these exploit kits are sold.  Are you guys - do you think your readers are familiar with what we're talking about here?



STEVE:  Oh, yeah, for sure.



BRIAN:  Okay.  And so typically when a new vulnerability comes out, like if you read on a blog somewhere like, I don't know, KrebsOnSecurity.com, you might see a notice about a zero-day vulnerability in Java or something.  In short order, that will be in all of the exploit kits.  Okay?  They're very quick.



LEO:  Short-order - a day, two days, a week, a month?



BRIAN:  Day or less.



LEO:  They're fast.



BRIAN:  Yeah, because it's...



STEVE:  Because it's all about the window of opportunity.



LEO:  Right, because as soon as people start patching, you're out of luck.



BRIAN:  Well, it's not just that.  Their customers, again, they're answering to their customers.



LEO:  This is our business.



STEVE:  Right.



BRIAN:  Yeah, this guy over here is selling...



STEVE:  Their customers want the latest vulnerabilities in their kits.



LEO:  So they stay up late that night and...



BRIAN:  They're just like the rest of us.



LEO:  ...write code.



BRIAN:  They want the neatest iPhone and, you know.  So, yeah, they'll come to these guys and say, hey, you know, Joe Schmoe has this exploit in his pack.  How come you don't have it?  And so...



LEO:  Oy.  How many of these are there?  And is it, I mean, we talk about Metasploit Framework a lot, and that's kind of on the other side of it.  But it's similar to that; right?



BRIAN:  So how many exploit kits are there?



LEO:  Yeah, how many kits are there?  And where do you get them?  You just go online, and there are websites, right, that sell these?



BRIAN:  Yes.  Some of them have just regular websites.  There's one right now, I'm thinking it's called stxyx-crypt dot maybe ru.  But, yeah, you can go and just sign up and plonk down some money, and you'll get a license, and then they'll send - they'll sell you, you know, ancillary services.  But there are, to answer your question, there are dozens of exploit kits.  And there are lots that have sort of kind of been thrown out there and, hey guys, check out my kit, play with it, let me know what you think, and then some of them, you know, the community just takes a crap on, you know.



STEVE:  Pooh-poohs it, yeah.



BRIAN:  This sucks, you know, go back to...



LEO:  [Indiscernible] school.



STEVE:  Go get a day job.



LEO:  Is this it?  Styx-crypt, a well of wishes awaits you in the crypt of decay?



BRIAN:  No, I don't think so.



LEO:  I like that one, though.  It's got Russian on it.



BRIAN:  Yeah.  Let me...



LEO:  I don't know if I should go there.  They're selling innovative and world-leading obfuscation of JavaScript.



BRIAN:  Oh, that might...



LEO:  It looks legit, but then, if you kind of - it's kind of like HTML morphing FUD.  FUD morphing.



BRIAN:  Yeah, so you are on the Russian version or the...



LEO:  I'm on the English language.  Should I go to the Russian version?  Would I get more interesting things?



BRIAN:  No, you just - yeah, styx-crypt.com.



LEO:  Yeah, that's it.  So it doesn't look like a malware kit site.



BRIAN:  Well, did you miss that part in the banner that says Styx Sploit Pack?



LEO:  Oh, okay.  The Styx Sploit Pack.  Let's take a look.  Gentlemen, it's time to announce the next-generation product for your viewing pleasure, the Vulnerability Browser Stress Test Platform.



BRIAN:  Right.



LEO:  They use GIT [laughing].  They update from GIT.



BRIAN:  This is really - I absolutely love this phrase, this turn of phrase, "stress test," because people are going to buy this so that they can stress test their product.



STEVE:  Other people's browsers.



LEO:  I love it that you can update it via GIT twice a day.



BRIAN:  So here's another script kiddie-type activity that's gone off the hook over the last couple of years.  It used to be very common that the script kiddies would go - this is where they got their name from.  They would go grab some script that allowed them to hack into a website.  And it's really just like an SQL injection or something like that.  And you can still do that, right, like there are sites you can go that are called "Google dorks."  And you just Google "Google dorks," and you'll see it.  But they're basically strings that you can - search strings you can put into Google, and they'll bring up a listing of websites that are running outdated and vulnerable versions of software that can be exploited so that you can deface the site or add malware to it or whatever.  So it used to be - and this still goes on to some degree.  But it's not - it's a lot less innocent than it used to be.  Used to be, like, yo, man, hey, you know, Hacker G was here, right?  And that was pretty much it.  And they'd do it to all the sites that they could find that were vulnerable and lead to...



STEVE:  Not it's the iPhone SDK site that infects Apple and Twitter and Facebook.



BRIAN:  Well, no, just I was - this is a long way of getting to the stress testing thing because what they do now is they leave behind a little - a shell.  And it just allows them - it's a backdoor that allows them to get back into the site.  And in almost every case the shells include a booter component.  And all that does is it allows the hacker to use that website, that server power, in denial of service attacks.  And so it's not real hard to build a botnet of hacked websites to use in DDoS attacks this way.  You just find a bunch of sites that are vulnerable, you upload your booter shell, and you're good to go.  I wrote a story about a guy that was offering a booter shell service, and this was, like, last year.  And it was pretty clearly being used to knock people and different things offline.  And he got really upset with me, and he's like, oh, no, this is just stress testing, and it says that in the Terms of Service, this is stress testing, so - it's just stress testing.



LEO:  Yeah, no, it's okay.  If you use this for illegal purposes, it's on you, man.



BRIAN:  Well, I think, you know, this is kind of a debate that is raging right now, which is, is the sale of software vulnerabilities, like if you find a new vulnerability in Java, and you're selling it to the highest bidder, are you breaking the law?  Most people, at least in this country, would say no, not by today's standards, not by the way the law is set up.  And a lot of people are saying, well, do we need to change the law?  Personally I don't think it would change the dynamic or the reality at all, but...



STEVE:  The behavior, right.



BRIAN:  Right.  It wouldn't change the market, I don't think.  And if anything, it would make these things more valuable.



STEVE:  So it sounds like your focus, because of like the access to this community, is sort of the demographic that you've been sharing with us.  Do you see the presence of organized crime here?  I mean, we hear stories.  I've had FBI guys tell me that they really see, like, organized crime recognizing that there is a potential to make money through this kind of Internet chicanery.



BRIAN:  Oh, it's everywhere, yeah.  There are a lot of people use that term, "organized crime," and it's probably more apt to call it "disorganized crime."  Even the guys who are very good at what they do and have been doing this for quite some time, a lot of them are, I think, best thought of as more like independent contractors who work together from time to time when it suits their purpose, and everybody's happy about it.



STEVE:  So it's just sort of the social - it's sort of the nature of the people who are doing this is that they're loners, and they're in their parents' basement or whatever.  I mean, they're just - it's not the kind of thing that you have old-school family organized crime doing.



BRIAN:  I wouldn't say - so it works both ways; right?  I mean, there are, just like you and I are talking remotely, I don't think we've met face to face, this is a lot of the guys in the cybercrime community.  They don't want to meet face to face.  They want that distance.



STEVE:  Yeah, you and I are using our real names.



BRIAN:  Right.  But they'll find each other on the forums.  And what you tend to see is it sounds like an exaggeration, but it isn't really unlike something you would see in, say, "Ocean's Eleven," right, where you have one guy who's really good at writing malicious software that steals banking information.  And then you have another guy who's very good at writing custom web injects for specific things.  And then you've got another guy who specializes in procuring domains that won't get shut down very quickly, website hosting that won't get shut down.  Maybe he even runs all of the services.  So it's very common to see groups perpetrating criminal conspiracies.



STEVE:  Combining their various talents.



BRIAN:  Right, combining their various talents.  And the Justice Department did a really interesting series of indictments and arrests.  One guy was, I think, in Rumania.  The other was Russian, but had come to the United States.  And then the other guy I think was in Moldova.  But it was that same kind of thing.  One guy was in charge of bulletproof hosting.  One guy was in charge of authoring the malware.  And the other guy was developing custom web injects.  And that very, I mean, I think that meets, for  most people, that meets the threshold of organized crime because, if it works for them, they'll keep doing it.  And that's something I've been really spending a lot of time focusing and writing on, and that is the cyber heist against the small to mid-size businesses out there.  And I would be remiss if I didn't mention that because it is something I spend a lot of time researching and writing about.



And I do so because I feel very passionately about this.  I talk to - I travel a lot.  I talk to small business owners all the time, just, you know, chat them up.  And I always ask them, I say, well, hey, do you bank online?  Do you know how exposed you are?  Do you know if you get robbed, that's gone, that money's gone?  The bank doesn't have to put it back?  People don't know that.  And they don't know that this can happen, their business can be ruined because they got a virus infection on their machine.  And but unfortunately we're seeing that over and over again every week.



And so I would characterize those as organized crime attacks because they require certain resources.  And they have to hire people to hire the money mules, the people that abscond with the victim's loot and help the bad guys launder it.  They have to hire foreign money mules and people over there in their own countries to be intermediaries, as well.  There's a lot of organization there and orchestration that has to go right for them to get paid.  So that in my book is organized crime.  And there's a lot of that going on.



STEVE:  And so I guess in general, as we've seen the evolution of this over the last decade, it's switched from script kiddies running little botnets to blast each other off of IRC servers to, I mean, real money-making enterprise.  The point is now not just to, as you said, post your name on, like do a website defacement for its own sake, but to actively somehow turn some advantage for the person who's doing the exploiting.



BRIAN:  Yeah, there's no question.  And in some ways, you know, I think part of the problem that we have with some of the more advanced attackers, so when an organization gets popped and they lose all their customer data, or a company, a Fortune 1000 company gets infiltrated by foreign cyber spies, and five years' worth and billions of dollars worth of R&D gets siphoned overnight, I think those are all cases where the bad guys have identified the valuable stuff, much more directly, much more - they're thinking about it a lot differently than the folks who are getting breached.  And I think that that mindset is changing from the organization side.



STEVE:  Right.



BRIAN:  People are really, organizations are really starting to wake up to the fact that it's really not hard to get breached these days.  And the focus needs to be on just accept, you can't keep the bad stuff and the bad guys out.  They're going to get in.  And, you know, the financial institutions figured this out years ago, and they said, well, we only have so many resources.  We can't spend infinite amount on defense; right?  At the end of the day, the banks are the best bean counters in the world.  They know what it's worth and what's at risk.



But by the same token, they've looked at it and said, hey, we've got scarce resources here.  How do we best spend our money?  And they decided, well, let's make sure, let's make damn sure we know, when we get breached, that we know very quickly we got breached, and we can respond and take care of that before it becomes a much bigger problem.  So I think, unfortunately, a lot of the stuff we're seeing with the espionage attackers breaking into companies is an artifact of...



STEVE:  Oh, the companies being more aware now than they used to be.



BRIAN:  It's an artifact; but, I mean, a lot of the defenses the companies have in place are built to defend against attacks that were very - were more prevalent years ago.  They're not necessarily built to defend against today's attackers.  We still sort of rely on some of these things that are supposed to provide protection, but provide diminishing protection every day, of course stuff like antivirus and things like that.  So all I'm saying is it requires a mind shift, a different mindset when you're thinking about these attackers, to one of containment and response, rapid response.  And you know how these things kind of shift.  They kind of swing back and forth like a pendulum.  It's like, is it thin client, or is it servers on the LAN?  Is it cloud?  Is it, you know, whatever.  Seems like we go back and forth.



But for a while there it was like, oh, let's just automate everything.  We can't handle all these logs.  We can't look at - we can't possibly look at all this information we're collecting about what's going on in our networks.  Let's automate it, and then we'll know what's going on.  Well, yeah, okay, but only if somebody's really paying attention to the reports that those things are spitting out.  And so...



STEVE:  We had that perfect story a few weeks ago that the Verizon security blog brought to light where one of their clients was looking at their logs and discovered that there was a VPN connection to China that had been going for many months, and they thought, oh, my god, we've been hacked.  And it turns out that it was one of their own employees had subcontracted his own job out to a Chinese company, and they were actually doing the work for him.



BRIAN:  I want to give that guy a genius grant.  I mean, come on, you know, I mean, like, how many other people could have done that same thing, and probably still could.



STEVE:  And pulled it off, yeah.  He was just sitting there in his cubicle, surfing eBay and updating his Facebook page.



BRIAN:  And watching cat videos, I think it was.



STEVE:  And getting top ratings from his employee evaluations, saying, oh, this guy is just great.  Look at the fantastic, well-commented code that he's creating.



BRIAN:  Yeah, yeah.  So I guess what I was saying there is - go ahead.



STEVE:  Go ahead.



BRIAN:  No, I was just saying, with automation, I think we're starting to swing back now.  People are saying automation is great, but let's step back from it a little bit and try to put some more humans in the loop and really have people actually looking at this stuff.  And the Verizon thing you mentioned is actually very apropos here because they do an annual breach investigations report which I always recommend people read because they just - it's just got a tremendous amount of useful information for anybody who's involved in defending networks.  But basically they said one thing they saw over and over again with these breaches when they responded to companies that had breaches, they said that the evidence for the break-in was there.  It was there in the logs.  And if anybody had bothered to look, even - not even, like, reading the logs.  They didn't have to read the logs.  All they said was it would have been enough for them to, like, scroll through very fast the logs, and the anomalies jumped out.



STEVE:  They would see - a big block of something would just stand out, yeah.



BRIAN:  Right.  So I thought that was really interesting.



STEVE:  In the dialogue in the underground, do you see people talking about, discussing, or bragging about actual money that they're making from these exploits, where they're saying, hey, I used this exploit kit, and it's generating this much revenue for me?  Do they discuss that openly?



BRIAN:  Not so much, I mean, what you tend to see is people will post screenshots of, say, their Blackhole exploit kit administration panel showing that, of the hundred thousand people who went to their redirection sites that pushed them toward the malware, 10 percent of them were served an exploit.  And so they'll brag about that.  And you can make some inferences about how much money that could bring them, depending on what sort of like affiliate programs they were signed up with and stuff like that.



STEVE:  [Laughing]



BRIAN:  Because, again, it comes down to, you know, a lot of these guys, if they sign up for one of these pay-per-install programs, they don't know what they're installing.  They're getting paid to push some installer program.  They don't really know.  You know, it could be something that takes over their botnet, I mean, as far as they know.  But they're getting paid for every install.



STEVE:  So from all of this, from your perspective, and now looking at our audience of end users, if you could offer advice to individuals about how to keep from being victims of this, how would you sum that up?  What would you suggest?



BRIAN:  Yeah, I guess I would just say a couple of things, and I hope you don't mind me pointing people to some resources on my site because...



STEVE:  No, no, no, no.



BRIAN:  ...I could just spend all day talking about this, as you can see.  There are two resources on the right side of my blog, KrebsOnSecurity.com.  One is a graphic, "Tools for a Safer PC."  And there's just a whole bunch of tips for people.  It doesn't matter if you're running a Mac or Windows or whatever.  There are a lot of tips there that can help people...



STEVE:  Where you've pulled everything together into a nice organized list.



BRIAN:  Tried to put a bunch of stuff together that, if you follow these tips religiously, you're probably not going to run into any problems.  A lot of the stuff you're going to run into is sort of picking the low-hanging fruit and taking advantage of the fact that, for better or worse, it does require some amount of vigilance to keep up with this stuff.  And if you fall behind, that's when it becomes a problem.  So at the very least, gosh, I tell people to grab one of the tools that helps them stay abreast of the latest security updates for third-party software.  So, like, Secunia's Personal Software Inspector is a really good one.  It's free.  Same with File Hippo's file checker, Update Checker.  Both of them, really good in letting you know about new stuff.  That's real important.



And as I try - and there's another resource on there, on the right side of the site, that I built to really try to drive home the point that, look, this isn't personal.  If you get hacked, it's not because the bad guys are interested in you or your chats with Sally or Suzie Q.  They're after your computer.  They're after the resources that your computer offers them.  And that may include your banking information.  But part of the reason - so the graphic I'm referring to is called the Scrap Value of a Hacked PC.  And this thing is actually in the process of being translated into, like, 17 different languages at the moment.



But what I wanted to do with this graphic was to explain to the person who says, "Well, I don't bank online.  I don't have sensitive information on my machine.  I don't see why it should matter if I keep up with this stuff."  And this graphic tries to explain to people, okay, well, here are 59 different ways that it can impact you, and your system can be reused by cybercriminals.  So I think anybody who spends any time just looking at this hopefully shifts their mindset a little bit to being more proactive about that stuff because it's a heck of a lot easier to keep your computer from getting infected than it is to actually get it uninfected once it's messed up.



STEVE:  And in fact these days the malware is so pernicious and digs itself so deeply into one's system that it's arguably - it's either impossible to get rid of it, or certainly impossible to ever know that you've really gotten rid of it because we keep hearing stories about people who, like, really understand their machines and have removed every trace of everything that they can find, and a couple days later, whoop, the thing comes back, like from some dark corner where it was hiding somewhere.



BRIAN:  Yeah.  I always tell people, spend some time on some of these PC help forums and watch the experts go round and round with these guys and, oh, yeah, you're clean, and they come back a couple days later, and, wham, they're not.  Yeah, I mean, that's an excellent point.  Ah, shoot, I lost my train of thought.  I was going to tell you about another tool.



STEVE:  What I was going to say was that I think one of the best pieces of advice I got from you and your site, and it's something that I have credited you with and echoed it whenever it occurs to me, and it's just, it's so simple and pithy and perfect.  And that is, if you did not go in search of some software, do not install it.



BRIAN:  Yeah.



STEVE:  The idea being - go ahead.



BRIAN:  No, that's actually, that's absolutely right.  So that's part of my three rules.  If you didn't go looking for it...



STEVE:  Yup, I thought I remembered that there were three, yup.



BRIAN:  If you didn't go looking for it, don't install it.  If you install it, then...



STEVE:  Yeah, because so often, yeah, because so often we're being offered something as a consequence of some action.  And it's like, oh, you don't have the latest version of Flash. Click here to download the latest version.  It's like, oh, wait a minute.  If you didn't go to Adobe to go get Flash, don't do it by having it offered to you.



BRIAN:  That's exactly right.  And that's traditionally been a huge vector for malicious software.  And that's actually, the Tools for a Safer PC, that's at the very top.  There's a link to the three rules.  So basically, yeah.  If you didn't go looking for it, don't install it.  If you need to install it, get it from the source, don't get it from a third-party wherever possible.  And if you installed it, update it, right, no-brainer.  And if you don't need it, get rid of it because then you don't have to update it, and you don't have to worry about it.  And it decreases the attack surface on your system.



So these are really - where I was going before with the point I forgot, the reason I say it's - I emphasize prevention as opposed to cleaning up after the fact is I think that where we're headed with a lot of this - so right now the big scourge out there is, for your average consumer, is this ransomware stuff we talked about; right?  But by and large that ransomware still is not very common where it encrypts your files.  There was a spell where that was going on.  It was mostly attacking people in Eastern Europe and Europe where they would get on your machine, and they'd encrypt all of your data, all of your documents, everything you hold dear, your photos, whatever, with very strong encryption.  And you didn't get your files back unless you paid the ransom.  I don't know why...



STEVE:  Which is brilliant because it's better than wiping out your computer or deleting them, which doesn't give them any value.  This is a way of saying, hey, if you want this stuff back, then you've got to pay us.  It's, unfortunately, it's evil genius.  It's brilliant.



BRIAN:  Right.  And it's going to get even more evil genius, I think.  And I think we're going to see a resurgence of these attacks at some point.  And think of it this way.  I try not to talk about these things because I hate to give the bad guys ideas.  But then I remember they already have these ideas, so they're not getting it from me.  But encrypting files, imagine.  You've got something that encrypted your files with 2048-bit encryption, good luck.  You're going to pay that ransom if you want those files, or if you don't have them backed up.  But guess what.  It's really not that difficult for the bad guys' ransomware to go and look to see what network drives are on your system and then go encrypt all of those files, as well.  So maybe you backed up your files, so you're thinking, oh, screw these guys, I'm not paying my money.  And then you go and look and, wait a minute, we have a problem here.



STEVE:  All of your Dropbox files are encrypted also.



LEO:  [Laughing] Right.



BRIAN:  Yeah.  So, scary stuff.



STEVE:  Well, Brian, this has been perfect.  It's exactly what I was hoping you would bring to the podcast, and you've been great.  So thank you very much.



BRIAN:  Well, thank you.



STEVE:  I mean, I talk about you and your site all the time, so I'm glad that you gave it some plugs.  I absolutely want our listeners to go to KrebsOnSecurity.com and check out your resources, too.



BRIAN:  Well, thank you very much for having me on.  I really appreciate it.



STEVE:  And is Leo there anywhere?



LEO:  I'm here, yeah, yeah, yeah.



BRIAN:  Hey, Leo.



LEO:  And I'm going to start recommending people go visit that section on, you know, it's called "Tools for a Safer PC," because I think this is really great stuff.



STEVE:  Yeah.



LEO:  And he recommends, Steve, NoScript and all the stuff we talk about all the time.



STEVE:  Perfect.



LEO:  Yeah.  Thank you, Brian.



BRIAN:  Well, thank you.  I'm getting some nice traffic from your TWiT.tv thing.



LEO:  Good.  Lot of people going there, yeah.  Including me.  Brian Krebs.  We're going to take a break.  And, Steve, you have security news; right?  Back we go to Steve Gibson.  And we're a little upside down because Brian was on, so we're going to do the security news now, Steve.



STEVE:  Well, yeah.  The big news of the week, I mean, and this was news that made it to all of the mainstream network news coverage, of course, is this Mandiant report that came out.  Their acronym for a bad actor on the Internet was "APT1," they called it.  And we know APT is an acronym for Advanced Persistent Threat.  That's the technology or the name that's now been given to those, you know, the whole concept of a network being penetrated and the bad guys essentially establishing a beachhead there that we first, I think, encountered that acronym in the RSA, that infamous RSA break-in where all of the keys got exported from RSA.  Well, this Mandiant organization - I tweeted a bunch of links just before the podcast, so if you check my Twitter stream at SGgrc, you can find them.  It's a long report [bit.ly/WR2dvJ] where they lay out the basis for their conclusion that this is Chinese military, the PLA Unit - they have a number - 61398.  And they've got satellite reconnaissance photos of the building where this is being done once upon a time, some years back, and then it's been all renovated, and it's all shiny, you know, more recently.



And apparently this is the - they've, over the course of time, they've tracked down more than a hundred attacks against U.S. interests, typically business interests in the United States, which they're alleging was formally authorized and perpetrated by the Chinese military.  Now, there is an interesting rebuttal to this.  I think I also posted that.  I'm not sure that I did.  But in all of this, it's easy to get a little hyperventilated from this.  I mean, I saw it on the news yesterday.  Everyone was talking about it on several of the different programs that I was watching.  Yes, the Chinese Army is spying on you, they were saying.



But the SANS security newsletter had what I think is probably the best sort of, okay, push back from your computer and take a deep breath and what does this really mean.  And so paraphrasing from what they wrote, they said:  "In the last 24 hours, most major news outlets highlighted Chinese military and military-related hacking of American companies.  BusinessWeek's cover this week, in big letters:  'Yes, the Chinese Army Is Spying on You.'  Mandiant provided strong documentation.  It's a big story."



And then SANS asks:  "But is it the right story?  If you know that the People's Liberation Army is spying on you, do you change your defense?  If so, how?  Do you look for Chinese language intrusion prevention tools?  The continuous China bashing simply reflects the inability of watchers to see evidence of the stealthier attacks made by other nations that may take a different approach to penetrating our telecommunications and banking and power systems and stealing our national wealth."



LEO:  Well, in particular, you know that we were talking about the Apple/Facebook/Twitter hacking, and the presumption was, oh, it's Chinese hackers.  No.



STEVE:  No.



LEO:  It was from Eastern Europe, as far as we could tell.



STEVE:  Yes.  And so, and that's the point I think that is very good.  SANS goes on, saying:  "The number of bad actors, spread across nations, terrorists, anarchists and criminals, is so great that their identity is not as important as what we do to defend our systems."



LEO:  Yes, yes.  You might as well assume - you always called it "Internet Background Radiation."



STEVE:  Yes, IBR.



LEO:  It's more aggressive, and it's more effective than ever before.  But it's not relevant to worry about where it's coming from.  Much more important, what do you do?



STEVE:  Yes.  I think that's the point is that, yeah, you can get all worked up about the nature, or like the direction a threat's coming from.  But the point is what you're really concerned about is protecting your homestead.



LEO:  Well, it's the only effective thing.  I mean, you might say, it might be fun to saber-rattle and shake your fist and say we're a superpower, how dare you?  But really that's not going to be as effective as simply doing your best to lock things down.  The question is, Steve, and Brian kind of alluded to this, the banks just gave up:  Is it possible to lock it down?



STEVE:  Well, and what SANS says that I think is the key here is they where they said "The number of bad actors spread among nations, terrorists, anarchists, and criminals is so great," SANS says, "their identity is not as important as what we do to defend our systems because they exploit the same weaknesses."



LEO:  So one fix covers all.



STEVE:  Yes.  So he says, or SANS says, "The most important answer to what we should do was released last week in a White House, DHS (Department of Homeland Security), NIST meeting.  The defenses specified in that paper, written by CSIS's Jim Lewis [bit.ly/WR2IG8], block the vast majority of the Chinese and other attacks.  What we as a community must do is identify the barriers that stop broad-based adoption of these defenses and lower those barriers."



So what I thought was so interesting, and this I definitely, I linked the PDF, CSIS is the Center for Strategic and International Studies.  They produced a report, it's not long, I think it's, like, 11 or 12 pages, a PDF that was assembled by Australia's Defense Signals Directorate.  Australia's DSD is a little bit like our NSA.  And in fact they combined this with NSA research that identified three policies that would consistently reduce risk by 85 percent and often to zero.



So the first of those is use whitelisting.  Allow only preauthorized software to run.  And that's something we've talked about before.  It is difficult to do practically, but we're beginning to see it.  I mean, arguably that's what Apple's curated store is, is to some degree a whitelisting protocol where they preauthorize software that they will allow their iOS devices to download.  And of course we're also seeing that now in the Mac store, and also in some of the Android stores.  So but in a corporate setting you can imagine IT finally saying, okay, look, we're locking these things down, period.  You get to use this, this, this, and this.  And your OS, by policy, simply will not execute anything else.  So, again, it's draconian.  But ultimately it's what you have to do in order not to run stuff that might be bad.



And then, No. 2, very rapid patching of both operating systems and programs.  And so this is a recognition of the fact, as we were talking with Brian, that there's a window.  And Brian made it very clear, you know, he saw the actual dialogue, has seen the actual dialogue going on in forums where somebody says, hey, their exploit kit now has support for this new vulnerability.  When are we going to get it on ours?  So, I mean, and it's a matter of overnight that suddenly the exploit kits are updated because there's a window of opportunity.  So that means that we want to close that window on the receiving end as quickly as possible.  So very rapid patching is the other thing that is very important.  I mean, how often are we talking about people getting exploited on vulnerabilities that have been known for months?  So if the vulnerability - well, I'm sorry, and the patches, the fixes have been available for months, that the systems are still being compromised that way, then that tells you they're not being patched with any kind of schedule.  So that becomes very important.



And the third principle is minimize the number of people who have administrative privilege.  And of course we understand what that means.  If malware gets to a machine and is trying to impersonate that user, but the user cannot do much on the network, then it can't, either.  And so that's crucial for minimizing the attack surface against your network.



And then they had some interesting statistics in this report.  They said that, under the banner of "Hacking Is Not That Hard" - I thought this was - this is some of the most interesting stuff we've seen, and not surprising.  They said more than 90 percent of successful breaches required only the most basic techniques.  Only 3 percent of breaches were unavoidable without difficult or expensive actions.  Outsiders were responsible for most breaches, not, as we have sometimes been led to believe, insiders, although certainly insiders have been, historically, have created problems.  85 percent of breaches took months to be discovered.  The average time is five months.  96 percent of successful breaches could have been avoided if the victim had put in place simple or intermediate controls.  96 percent.



So what we're seeing is that the breaches that are now occurring are not hard to conduct, and they are essentially against corporations and entities with no protection.  They're just, they're running an old version of IE.  They're, I mean, they're just - they're clueless companies that are just not looking at this at all.  Their business is not computers.  They use their computers because everyone has to have, you know, computers.



LEO:  But, Steve, when developers at Apple get hacked, presumably these guys know what they're doing, and Apple's got to have very good corporate security.  They're paranoid as hell.  And they still get hacked internally?



STEVE:  Well, and this was...



LEO:  They ain't using IE5 at Apple.



STEVE:  Right.  It was, in this case, it was a Java exploit.  And they visited a compromised site; iPhoneDev SDK site was hacked to plant the exploit.  And so some Apple developers went there, got their machines exploited.  Now, what's interesting is that Apple's response to this was, well, yes, but new Mac OS X doesn't have Java, and it gets turned off after 35 days of non-use, so...



LEO:  And the browser Safari tells you, are you sure you want to run Java?  But obviously these developers were using Java.  Maybe it was part of their job.  They needed to - maybe they were writing stuff in Java.  I don't know.  Maybe they were writing Java browser plugins, for all we know.



STEVE:  Leo, Java is the No. 1 language.



LEO:  Exactly. 



STEVE:  So, I mean, you're going to have Java around.  You just don't want - you want it in your computer and not on your browser unless you have to have it.



LEO:  And I suspect that these developers did.  And I also believe, you know, Apple, apparently, even though Apple is the last we've heard about, was the first to discover this.  And I'm betting that Apple and Facebook both have very stringent security procedures and detected this immediately and remediated it immediately, I would guess.



STEVE:  Yes, yes.



LEO:  I mean, we don't know, but...



STEVE:  And this was your typical corporate breach.  Bloomberg carried a story from two unnamed people who were, quote, "familiar with the matter," unquote, told Bloomberg that the hackers appeared to be looking for research, intellectual property, or other private information that they could sell...



LEO:  It's industrial espionage now.



STEVE:  Yeah, exactly, it's espionage that they can sell on the underground market.



LEO:  Industrial, not cyberwarfare.  It's industrial espionage.



STEVE:  Right, right.



LEO:  Economic espionage.



STEVE:  Just as we were launching the podcast, Adobe released their emergency Reader patch [t.co/aKSJKrBt].  We spoke about this last week.  Remember that there was a very bad exploit that affected versions 9, 10, and 11 that was in the wild.  It was being used for targeted phishing attacks.  There was no known defense, as long as you were using Adobe Reader to open PDFs.  It's funny because, whenever I tweet this, I get feedback from Twitter saying, "Who uses Reader?"  It's like, okay, I know.



LEO:  Our audience doesn't, but everybody in the world does.



STEVE:  Yes.



LEO:  And it comes with many computers.  And, I mean...



STEVE:  Yes, and many sites where you go to, like, download a PDF, it says, oh, if you can't read this...



LEO:  Download Reader, yes.



STEVE:  ...click here to download Reader.



LEO:  I was looking at a firmware update just last night, and it said "Download Reader first."  And you know what, it's a firmware update.  I actually don't need to download Reader for it.  I guess that's for the manual.  And I sure as hell am not downloading Reader.  And, geez.



STEVE:  Anyway, so for anybody - but we also know that the reason Reader is insecure is it is so bloated and so big and it has JavaScript in it and it loads and runs plugins and does all this other stuff for you.  In some cases people have to have it.  So if you're in a corporation where Reader is the only thing that works for you, Adobe's Reader, then you should know, just go to www.adobe.com/downloads/updates, and that will take you to a page.  You select Adobe Reader, and then you've got a choice of Windows, Mac, and Linux.  Choose your platform and get the update.  It's dated today, February 20th, and you definitely want to do it because these things were bad, and they got fixed quickly.



Also in update land, Firefox 19 was just released.  And so I clicked on the Help menu, and I saw the little update button.  I was on 18.0.2, you know, from yesterday.  And now we're at 19.  So I said, yes, update me.  And it closed Firefox, and it opened again, and what was interesting was that I was using the Sumatra PDF plugin.  That's one that I had been using for viewing PDFs in Firefox.  And as we've been expecting, it was with version 19 that Mozilla finally put their viewer front and center for PDFs.  So the PDFs tabs that I already had open now open with the built-in browser PDF viewer.  And it looks very nice.  I don't have much experience with it because it's only a few hours old.  I did see some people tweeting that it's been working for them since they started using it.  I think they adopted it earlier.  It was available I think back on 17, but it wasn't automatically taking over.



And interestingly, I get a little attention bar at the top saying, sort of, I think, because they're still sort of sticking their feet, their toes in the water here, they said, "If this page doesn't render correctly, click here to render with an alternative."  So they know that they replaced a plugin that I already had.  And I'm happy because I'd rather - as long as they're not going to have any security problems.  I suppose we'll know here before long.  Hopefully they've done this very carefully; but as we've seen, careful doesn't always cut it.  Sometimes you need more than that.  But anyway, so Firefox 19 has a native PDF viewer.  Just shut it down or go into the Help menu, fire up Firefox again, and you should have it.  And the viewer looks very nice.



I just thought I'd give an update on GRC's Universal Plug & Play test.  When I checked this morning, we were up to 2,290 discrete IPs have been found.



LEO:  That's, like, twice what it was last week.  Wow.



STEVE:  Yes, yes.  Although I think it's slowing down. 



LEO:  These are routers that are vulnerable to the UPnP flaw.



STEVE:  Correct.  Well, actually it's routers that...



LEO:  That responded to your probe.



STEVE:  Yes, that may be vulnerable, but definitely have the Universal Plug & Play publicly present.  And that they should not have, absolutely.  In the ongoing quest for the best UPnP acronym, we have a new submission from someone on Twitter for UPnP, is Ur Probably Now Pwned.



LEO:  [Laughing] I like it.



STEVE:  I think that's the best one so far.



LEO:  That's very good.



STEVE:  Ur Probably Now Pwned.  And here is a great page, Leo.  You're going to like this.  I created a bit.ly link for it, so it's verbal:  bit.ly/xorxor, all lower case.  What I like about this is I've often talked about how perfect XOR is for encrypting something.  And remember that XOR isn't particularly amazing.  I mean, it's a simple concept.  If you XOR zero with something, you get the something.



LEO:  Wow.  This is really - so they've got a picture of Charles Babbage.  And they AND, OR, and XOR it.



STEVE:  Yes.



LEO:  Wow.  



STEVE:  And isn't that, I mean, I like this because it is so clear.  It just says - so what they did was they took pseudorandom noise, and they XORed the noise with the picture, or they ORed the noise with the picture, or they ANDed the noise with the picture.  Now, so the AND and the OR are interesting because they're alternative logical operations.  What's compelling, though, I mean, I get why, if you XOR noise with something, none of the something remains.  But that's the key.  That's why, if you just take a good source of a pseudorandom bit string, and you XOR it with plaintext, what you get is noise.  It's just, it's almost counterintuitive.  It's like, wait a minute, why does nothing of the original survive?  But this makes it very clear that all you get is noise.  So this is sort of a graphic visual demonstration:  bit.ly/xorxor.



LEO:  Now, we don't use XOR because it's reversible; right?



STEVE:  No, no, we do.



LEO:  We do.



STEVE:  Yeah, yeah.  And that's...



LEO:  But it is reversible.



STEVE:  That's the beauty.



LEO:  If you XOR it again, you get the plaintext.



STEVE:  Precisely.  So if you took that picture of absolute noise, and you XORed it with the original stream of bits, then it comes right back.  And that's the original RC4-style encryption, RC4 that was used in the earlier WiFi.  It was mis-implemented so that it didn't - the RC4 cipher works by sort of stirring up a bunch of bits in a pot.  And there are weak keys that don't initialize the stirring very well.  And even so, the initial stirring, if you start using the bits immediately, they're not very well scrambled.  But if you simply stir it a while, then you start using it.  Even though it's a simple algorithm, it produces a very good pseudorandom bitstream based on a key.  And that's what WiFi was using, and even WPA2 can use that.  It doesn't have to be using AES.  It can be using RC4.  And it's very secure when it's used properly.  And so this just demonstrates that something as simple as an XOR, where you simply conditionally invert the bits, it ends up with nothing surviving of the original.



Okay.  Now, this is the most bizarre, random thing I've ever said, which really is saying a lot.



LEO:  That is saying a lot.  Yes?



STEVE:  I saw - I was watching some video of some guy taking apart a PC.  And it was like, we're going to, I don't know what it was, add 12 video, you know, graphics adapters to your machine or something.  And the point was he was putting the system back together, and he used a power screwdriver to put the screws into the back of the case.  And I just - it just made me cringe because - and the guy lost all credibility with me, frankly.



LEO:  Wait a minute.  Because he was using a power screwdriver?



STEVE:  Yes, to put the screw in.  You can use a power screwdriver to pull the screw out.  That's fine.



LEO:  Okay.



STEVE:  The point is, and this is something that my grandfather taught me when I was, like, five, and I've never forgotten it, and it's just a little piece of wisdom that is so cool.  And that is, any time you - and this is why this is extremely random.  But, you know, what the heck.  Any time you are screwing something in, first back it out.  Put a little pressure on the screw...



LEO:  Oh, because you could strip it so easily.



STEVE:  Yes.



LEO:  Yeah.  I've done that so many times.



STEVE:  Put a little pressure on the screw and turn counterclockwise.  You will feel it go click.  And so that...



LEO:  Yeah, as it falls into the thread, yeah.



STEVE:  Yes.  And so that, I mean, wood screws, metal screws, doesn't matter.  Just back it out, and it'll click.  Then you can then go forward.  And if you have to use a power screwdriver, fine.  But get it started.



LEO:  But you're worried - what you're saying is it's so easy to strip a thread with a power screwdriver because you don't feel it.  And if you're not in the thread, it'll just make a new thread.



STEVE:  Exactly.



LEO:  Yeah, yeah.  That's a very good point.  It's very easy to do, yeah.



STEVE:  Well, and if you've got a power screwdriver, it's got all this torque there.



LEO:  Right, you don't need...



STEVE:  It just goes [angry whirring sound].  And before you know it you've created a round hole with no threads.



LEO:  I did that the other day.  I was opening a MacBook Air, and they have this Pentalobe screw - I'm not using a power screwdriver either way - Pentalobe screwdriver and the world's tiniest little screws.  And it's very easy to miss the thread.  Even if you do back it out, it's very hard.  And once you get it screwed up, it's never going to go in right.



STEVE:  No, that's exactly right.  So it may be something that everyone goes, yeah, yeah, Gibson, we know about that.  But if it's not something you've ever heard before, next time you encounter a screw, just think about it.  Just...



LEO:  So you never use power tools to screw in.



STEVE:  No.



LEO:  Only to screw out.



STEVE:  Yeah.



LEO:  That's actually a very good point.  I never really thought of that.  I have used power screwdrivers because I'm lazy.



STEVE:  Also, Leo, you can't - you have also no feedback on tightness.  I mean, anyone who's a craftsman, you'll tighten it down, and then you'll give it just, I mean, just enough, like when you're mounting hard drives.  You want them to be, like, firm, but you don't want to, like, torque the whole hard drive frame because you just bear down on the screw so much.  So it's like, no, just, you know, enjoy the process of putting the screw back in.



LEO:  Enjoy the proc- enjoy what you're doing.



STEVE:  Yeah.  You know, take some pride in having your threads well meshed.  That's all I'm saying.



LEO:  [Laughing] You know, it's funny, I never thought about that.  But I do know what you're - the cross thread, I know what you're talking about.  That happens to me all the time.



STEVE:  Yeah, and if you just - it's very satisfying.  When you just go backwards, it kind of goes click, and you just, oh, it's like, oh, okay, there we go.  Then we just go smoothly forward.



LEO:  [Cooing]



STEVE:  Yeah.



LEO:  Or you can do what I do and use nails; right?  That's what Web3991 said.



STEVE:  Or get some glue.  Oh, that screw is gone.  Get some glue.



LEO:  Nothing like Krazy Glue.  You know, I actually had the worst - this is complete digression.



STEVE:  Hey, you know, we're done now.  Although I did want to say I finished the third of The Rho Agenda books.  Oh, my god.  We talked about it last week.  They're all three available on Audible.



LEO:  I've got to read those, yeah.



STEVE:  And by the way, Honor Harrington books and something else are on sale right now for $4.95.  So I wanted to bring that up, too.  But The Rho Agenda books, if anyone is starting in on them, I would consider the first two books foundation for the third.  The third one is very difficult to stop reading.  GRC almost didn't get a new server last week.  I'm not kidding.  It is so good.  And it finished with some surprises.  So it ends up I didn't really endorse it strongly because I didn't know how it was going to turn out.  I was only 75 percent of book three.  I finished it.  Wow.  It's really fun.  And remember you said you were going to jump on it, Leo, because it was an alien spaceship began to alter three teenagers.  And we followed their antics.  And it turns out that the spaceship had an agenda of its own, which is really interesting, too.  So I do - R-H-O, Rho Agenda.  It's just spectacular.  And so you had a divergence.  I'm sorry.



LEO:  No, no, no.  It was more about screwing than about...



STEVE:  Okay.



LEO:  We're done screwing, I think.  And we'll move on to the - I think it's the point well taken.  Anything else you want to talk about?



STEVE:  I'm exhausted.



LEO:  Where do you get your underwear?



STEVE:  What?  Amazon.



[Laughter]



LEO:  That is a leading question.  I get mine from Manpacks.  This is actually a new sponsor on TWiT, just kind of for fun.  I actually found out about Manpacks from Jeff Jarvis.  It is a place where you can order underwear by mail, and other manly goods, and you get a new ship- what you do is you create a Manpack...



STEVE:  Wait.  These are - this is a new sponsor for TWiT?



LEO:  Manpacks.com.  Well, you know, it's a fun little sponsor.



STEVE:  Okay, good.



LEO:  But I like it.  And I've been using it...



STEVE:  Given our audience, I think, you know...



LEO:  They're mostly men.  And they're packing.  So the idea is - let me show you.  Actually let's see if I can log into my Manpack.



STEVE:  [Laughing] Hey, LastPass will do that for you.



LEO:  It will.  It just did.  I love Manpack.  I'll tell you why I like Manpacks.  Because there's certain things you want, just like razor blades, you know you want on a regular basis.  And so what you do is you set it up, and then you get it automatically every three months, or more often if you want.  And it's just convenient.  So I'm getting cushioned crew socks, boxers, shave oil, shaving cream...



STEVE:  You go through a lot of those, huh?



LEO:  Yeah.  You know, I get three new pairs of underpants every three months, and I throw out the oldest three.



STEVE:  Perfect.  Just recycle it.



LEO:  Yeah, recycle.  I don't throw them out.



STEVE:  No, don't bother laundering them, just...



LEO:  Well, you probably should since you're only getting three - one every new month.  But they have all sorts of fun stuff.  And you can change your pack.  You can get new stuff in your Manpack.  You've got a dashboard.  I should - let me see.  Where can I find the other things in the Manpack?  Well, they've got - here's something.  They also sell vitamins.  Because, you know, there are certain things that you need to take on a regular basis.  I wonder if they've got Vitamin D.  They are - we're talking to them.  We're going to make sure that they have everything that Steve Gibson recommends.



STEVE:  Hey, cool.



LEO:  So here's the deal.  Manpacks.com/twit.  You can get $10 off your first purchase of $30 or more.  And I think you could also get a gift card, a $50 gift card for 40 bucks so you can see - I'm trying to find - you can see I've been a Manpacks member since August 2011.  Started with underwear, but now it's everything.  I'm getting...



STEVE:  You have been?



LEO:  Oh, yeah.  That's why we're doing this.



STEVE:  Oh, cool.



LEO:  Because I'm a fan.



STEVE:  Apparently.  And I guess your underwear has been working for you.



LEO:  I - yes [laughing].  Where is my shopping list?  I want to show you all the different things you can get.  Socks - oh, here it is.  Visit the shop.  There was a big button, and I didn't even see it.  So here's the Manpacks shop.  I don't know.  Are you a boxers or a briefs kind of guy?



STEVE:  You did ask me last week, and I wondered where that was coming from.



LEO:  Yeah.  I'm a boxer brief guy.  It's like a mix of both.  [Laughing] I love this.  Anyway, I just thought I'd mention this.  Manpacks, socks, grooming items.  They even have Sir Richard's Extra Large, if you need them.  Whatever you need.



STEVE:  Sir Richard's.



LEO:  Yeah, I know.  Isn't that a good name?  Sir Richard,  yes.  I just think the service is great.  It's like Zappos for underwear, somebody said on Twitter, and I agree.  So use the offer code.  We'll make a little money.  You'll save a little money.



STEVE:  Hey, save some, yeah, save 10 bucks.



LEO:  Manpacks.com/twit.  I just wanted to mention that.



STEVE:  I'm so glad we didn't finish the podcast without that.



LEO:  [Laughing] Steverino, that was fun.  It was so nice to meet Brian.  I've been a fan, and I told him before the show, I didn't say it on the show, but I told him before the show, since - I didn't realize he'd left the Washington Post three years ago.  He was saying it's been a great thing for him.



STEVE:  Yeah, I noticed about a few weeks ago that he had an anniversary that he mentioned, and it was his three-year anniversary.  And as he also said to us before we began recording, it's the best thing that ever happened.  He was there, he'd been there for a long time, we used to watch him and follow him there.



LEO:  Oh, yeah.



STEVE:  Then he set up his own deal with KrebsOnSecurity, and he said, wow, it's working.  It's the best thing he ever did.  So, you know, I'm really, really glad we had him.  I think he really brought a different perspective and lots of really cool information to our listeners.



LEO:  Yeah.  I learned so much from him over the years.  And what is sad is that he was one of the, I think the only guy in mainstream media who really gave serious security information, not, you know, update your antivirus kind of level.



STEVE:  Yeah.  I'm glad I remembered that it was from him that I got that fantastic piece of wisdom, which is never install something that you didn't go looking for.  That was Brian.



LEO:  Right.  That's one of his three rules, yeah.



STEVE:  Yeah.



LEO:  All right.  Let's see.  You can watch this show, it's 11:00 a.m. Pacific, 2:00 p.m. Eastern.  I'm sorry, 1:00, yeah, 2:00 p.m. Eastern on TWiT.tv every Wednesday.  That would be 1900 UTC, if you're outside the U.S.  It also is available on demand, after the fact, audio and video from TWiT.tv and wherever you get your Internet broadcasts.  We're everywhere.  We try to be, anyway.  Oh, we're on Roku now.  We've got a great iPad app, a number of great iPad apps, a number of great Android apps.  It's really, it's easy to find TWiT, so just look around.  And we'll be back next week to talk more about security.  A Q&A episode.  That means you need to go to GRC.com/feedback, if you've got something for Steve.  People always say, how do I ask Steve a question?  That's how.



STEVE:  Yup.



LEO:  GRC.com/feedback.  While you're there, take a look, and you'll find SpinRite, the world's finest hard drive  maintenance and recovery vessel, software that you must have.  If you have a hard drive, you'd better have SpinRite.  ShieldsUP! now updated for that UPnP exploit, so you can test your servers there, your router.  Lots of free stuff, too.  GRC.com.  Steve also has 16Kb versions of the show there, and text transcriptions by a human being.



STEVE:  Yes, who is under snow at the moment.  Elaine sent...



LEO:  Where is Elaine?  Is she in Northern California?



STEVE:  No, no, she's - I have no idea.  Wherever it is, it's the extreme weather capital of the continent.  It's some - like she's in the desert somewhere.



LEO:  Oh, high desert probably, sure.  Gets very hot and very cold, yeah.



STEVE:  Yeah.  So she's got, like, swamps running through her house, or she's like buried under snow.  She has a satellite Internet connection, which is always - that's why she wants the lower bandwidth audio from me is that she's got bandwidth caps on her satellite feed.  I mean, and I think her husband is on, like, a bicycle with a generator.



LEO:  We're getting it now, Elaine.  It's coming down.  Here it comes.



[Elaine collapses here in helpless laughter]



LEO:  Pedal faster.  Pedal faster.  Here it comes.  I can see it.



STEVE:  Yeah, so, I mean, and they've got a whole bunch - they've got dogs and horses and, like, bats and owls, and it sounds like a menagerie out there.



LEO:  They don't keep bats.  They just happen to have them, I'm sure.



STEVE:  Oh, no, I wouldn't be surprised if Elaine has...



LEO:  You don't want to keep bats.



STEVE:  I don't know.



LEO:  Seems like a bad idea.  But I could be wrong.  All right, Steve.  Great fun.  Thanks a lot.



STEVE:  Thanks so much.  Talk to you next week, Leo.



LEO:  See you next time.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#393	

DATE:		February 27, 2013

TITLE:		Listener Feedback #162

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-393.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson's here.  We've got questions from our audience.  But before we get to those, I can't believe it, there's another flaw in Java.  Details next on Security Now!.



LEO LAPORTE:  It's time for Security Now! with Steve Gibson, Episode 393, recorded February 27th, 2013:  Your questions, Steve's answers, #162.



It's time for Security Now!, the show that covers your security and privacy and everything else you need to know to stay safe online with this man right here.  We call him the Explainer in Chief, Mr. Steve Gibson of GRC.com.  Hello, Steverino.



STEVE GIBSON:  Hey, Leo.  Great to be with you.  Episode 162, I'm sorry, 393.  Q&A 162.



LEO:  Question, yeah, Question & Answer 162, yeah.



STEVE:  Yeah, Q&A 162.  We've got so much to talk about, sort of toward the top of the show, that I'm not sure how many questions we'll get to.  We've got 10 plus a bonus question this week, some interesting, fun things to talk about.  So we'll just do 90 minutes' worth of stuff, starting with news and updates and so forth, and play it by ear.



LEO:  That's fantastic.  That's fantastic.  We have some visitors in the studio.  Lyle's from Nashville, James from Bloomington, Indiana.  I warned them.  I said, "Are you ready to get geeky?"  They put on their little pointy hats, and they're ready to go.  Actually, James is an IT guy at Indiana - is it Indiana University?  Yeah.  And Lyle's with Cisco?  Works with Cisco.  Did you see the small town that has a $30,000 Cisco router?  Did you see that story?  Just ridiculous.



STEVE:  No.  So, like, so total overkill for what the town needed?



LEO:  There's 400 people in the town.  They have a shack for a library with one Internet connection, and it has a massive Cisco switch in there.  And the reason is they went to Cisco, the state - I'm going to - got to find this story.  The state went to Cisco, and Cisco said, yeah, you need all that stuff.  They just threw it at them.  It's really kind of an amazing story.  I'll see if I can find it while we're talking.  I just read it this morning, and I should have bookmarked it, fool that I am.  But you've got plenty to talk about, so...



STEVE:  Well, you have an amazing story, and for the top of a podcast we have an unbelievable story, only because it is too believable.



LEO:  Uh-oh.  By the way, it's West Virginia.  It's a small town in West - here, I just found it.  It's in Ars Technica.  One-room West Virginia library has a Cisco 3945 router.  It's a $20,000 router.  It's in a temporary building.  It turns out, in fact, the state's legislative auditor found this.  It's the small town of Clay, West Virginia has seven - seven - 3945 routers serving 491 people.  $100,000 worth of Cisco routers within 0.44 miles of each other.  This is the best routed city in America.



STEVE:  Oh, goodness.



LEO:  Yeah, I guess it was Cisco's sales guys that convinced the state to buy $24 million worth of 3945 branch routers.  Unbelievable.  You couldn't even saturate one of them.



STEVE:  No.  No.



LEO:  So your story now.  I'm sorry.  I didn't mean to interrupt.



STEVE:  Believe it or not, Leo, we have two new Java vulnerabilities.



LEO:  What?  No, that's not possible.  We fixed Java just the other day.



STEVE:  Yes, we did.  And the day after, two new ones were found.  A pair of newly detected flaws in Java can be exploited to allow attackers to bypass the browser plugin's sandbox security feature.  So it gets out of the Java sandbox, which of course is now the goal of any exploit.  It affects the most recent Java update, which is Java 7 Update 15, which was released on February 19th.



LEO:  [Laughing]



STEVE:  So here we are...



LEO:  Eight days later.



STEVE:  ...nine days later on the 27th.  And actually this news is a couple days old.  And Java 6 is not affected.



LEO:  Oh, so it's something they introduced.



STEVE:  This I, well, yeah, exactly.  This is something, and we've seen this already in Java 7, things that were not a problem in 6, new features they put in that are causing problems.  So in several of the reports of this, I've seen it written that experts are advising users to disable or even uninstall Java.  And there are also reports that an exploit for Java 7 Update 11 has been detected in the wild, and Update 13 was released to fix that one on February 1st.  So it's really getting ridiculous.



And one of my favorite sources of security news is, you know, the SANS security newsletter that I subscribe to.  And it's just a really great summary that comes out a couple times a week of stuff.  One of their editors, John Pescatore, who was a VP of Gartner for 14 years, he had a little editorializing after their news summary.  He said:  "In developing the Morse code, Samuel Morse assigned the shortest code element (dit) to the most common letter (E) in the English language.  Java vulnerabilities today, much like IIS" - and that was Microsoft's web server back in the day - "much like IIS and Internet Explorer vulnerabilities 10 years ago, have now earned 'dit' status."  And I was tempted to say, "Or maybe 'duh.'"  Just amazing.  I mean, this is - it is getting to be ridiculous.



In fact, we've got - one of our listeners shares with us his company's solution to this problem, how they've worked - how because they have a need for Java, as corporations do - you know, invariably when I tweet something about this, people say, oh, well, you know, the best way to fix it is uninstall it.  It's like, yes, but some people can't.



LEO:  Well, say Minecraft, there's lots of reasons you need it.



STEVE:  Yeah, there are, actually.  And in fact the code that I'm - the Eclipse platform, which is the development...



LEO:  Is Java.



STEVE:  ...platform for - is Java based.  So you've got to have it around.  You don't always have to have it in your browser.  Although, and we've heard reports from, like, lots of Scandinavian banks require Java plugins in the browser.  So that's the problem.  And, I mean, it's just - it is really getting pathetic and ridiculous.  We do have a bright spot, however.  Firefox v7 - v17 - version 22 - I think we're now - I think I'm on 18 or 19.  What am I on now?  I updated not long ago.  I'm on 19.0.  Oh, and that's the one that's got the integrated - we talked about it last week, the integral PDF reader.  Even though I had a PDF plugin - I was using Sumatra PDF and happy with it, although it kind of gets a little wonky sometimes - when I installed the latest version of Firefox last week, it sort of pushed the plugin PDF reader aside and took over with its own.



So, again, it's always good to be cautious of something new from a security standpoint because this is a lot of new code.  But there's no way that anybody today could develop something which didn't have - develop something for the browser like the Mozilla guys that didn't have security as its No. 1 feature.  I mean, they're just - I'm loving the fact that we're seeing the kind of inevitable escalation of awareness because that's the driving force behind these things being fixed in the long term.  So that's all good.  Anyway, my point is that with Firefox 22, which will be three versions from now, slated for a June 25th release, and I don't know how they know that, but June 25th...



LEO:  Yeah, because I'm on 18 right now.  I mean, I'm way behind that.  And that's just updated.



STEVE:  On Safari.



LEO:  Oh, Safari.



STEVE:  I'm sorry, Firefox.



LEO:  I'm Firefox 19.  And it says it's up to date on the Mac, yeah.



STEVE:  Yes, yes.  So they are once again going to try to disable third-party cookies by default. 



LEO:  Good.



STEVE:  Yes.  So they will join the singular rank - I don't know if you could have a rank if there's only one.  But they will form a rank with Safari, the only two browsers then that have third-party cookies turned off by default.  And I coined the term "the tyranny of the default" because it is so much the case that default settings are what everyone runs on.  I mean, obviously not everyone, but the vast majority of people just assume that smarter people than they figured out how things should be set, and they don't want to mess with them because they don't understand them.  And I've been tracking third-party cookie usage of GRC's visitors for years now, and I have a GRC.com/cookies/stats.htm.  You can see a really graphic, well, because it's a chart, but a very clear display of the effect of Safari's decision on third-party cookie usage because, among all the browsers that I profile, one stands out as just ridiculously low level of third-party cookie usage because it's off unless people turn it on.



So, and this was Jonathan Mayer from Stanford.  He's been mentioned in the podcast for years.  He's a graduate student in computer science and law at Stanford, focusing on public policy, law, and the Internet and privacy.  And he's got some interesting papers written about the Do Not Track header and why it represents, when it's eventually implemented, the best of all worlds because...



LEO:  Now, is third-party cookies and Do Not Track the same thing?



STEVE:  No.  Third-party cookies are...



LEO:  Because I don't see a setting in Firefox for third-party cookies at all anymore.



STEVE:  Oh, yeah.  It's definitely there.  And in fact...



LEO:  I see "Tell websites I don't want to be tracked."



STEVE:  And that's good.  That's Do Not Track.  I think it's under the Privacy tab.



LEO:  No, it's not.



STEVE:  Oh.



LEO:  That's what I thought.  I looked under Privacy and Security.  I wonder if they've taken that out now.



STEVE:  Privacy.



LEO:  Maybe they just turn it on - when they say "turn it on by default," maybe they mean it's on, it's on.



STEVE:  Okay.  So on my Privacy tab I've got - oh, maybe it's because I've got "Firefox will use custom settings for history."  And I think that maybe opened up a bunch of things.  Because I've got...



LEO:  Ah, use custom settings.  Ah, now I see it.  So you...



STEVE:  Bingo.



LEO:  Okay.  So the default, which is Remember History, doesn't have anything.  But if you go to Use Custom Settings for History, then Accept Third-Party Cookies has a checkbox, and you can uncheck it.



STEVE:  Yup, yup.



LEO:  That's different from Do Not Track, which was the - that was the issue with Internet Explorer.



STEVE:  Right.  And it's funny because I was looking at browser headers yesterday with Chrome, and they're just like - there was DNT: 1.  Just Chrome sending out its little beacon of, like, this user has requested not to be tracked.  And it's like, oh, that's nice.  So, yes, the Do Not Track is a statement from the browser saying that my user has asked not to be tracked.  That's all it means.  So it's controversial because...



LEO:  It's not even enforced.



STEVE:  ...honoring it - right.



LEO:  It's just a request.



STEVE:  Honoring the request is up to the people who receive it.  Third-party cookies are...



LEO:  Very famously, Apache does not honor the request; right?



STEVE:  Well, Apache actually goes further.  Apache, and this is something I think is so wrong, the server itself strips that header preemptively so that applications on Apache can't even see if it was sent.  And I think that is really overstepping the bounds.  This will end up getting reversed because it is absolutely wrong.  But, you know...



LEO:  I do wish Firefox would make it easier to turn off Java, to disable the...



STEVE:  Yeah.





LEO:  I mean, come on.  Okay, that's good...



STEVE:  Although, I think if you look - where was it I saw it?  I think if you look in Plugins...



LEO:  Yes, that's what - both Chrome, yeah...



STEVE:  Tools, add-ons.



LEO:  Tools, add-ons.



STEVE:  And then if you look, if you do...



LEO:  Yeah, there it is.



STEVE:  ...plugins, then it, like, it shows it in red and says "Known to be vulnerable."  Acrobat, I've got a couple old Acrobats in here, 831, 930, known to be vulnerable, disabled, disabled.  So, I mean, it really does - it's doing a good job, and we're going to talk in a minute here about something that Google did for the NBC.com site when it got hacked last Thursday that was really nice for people, too.  So anyway, so Firefox v22 makes a very nice step forward thanks to Jonathan Mayer at Stanford.  I want to, you know, tip of the hat to him and the Mozilla guys for saying we're ready to do this now.  They did, at one point, it was, like, version, I don't know, 4 maybe, when it was in beta, they had it turned on.  But they backed out at the last minute before it went public and said, okay, no, we'll just leave it the way it is.



But we're seeing a groundswell about privacy.  And I'm seeing some things from the people who really track this about how privacy and security are beginning to overlap, that is, people may say, oh, well, privacy, that would be nice to have, but no one has it.  The problem is attacks are becoming more targeted.  And the more information the targeter has about the targetee, the greater the chance that the attack is going to be successful.  So it really does make sense to keep your privacy guards up where you can.  So anyway, that's nice news for Firefox.  I know that, I mean, I guess the people who are in the know today are probably either using Firefox or Chrome.  Certainly no one's using IE, although it's too bad because Microsoft has really, you know, they've...



LEO:  Hey, you know what?  I've been using Windows 8 on a high-res tablet, and Chrome looks like crap.  So I'm using Internet Explorer.  Chrome is my default, but it does not look good on this 1920x1080 display, and it doesn't support touch.  So I can't, you know, with Internet Explorer I can scroll with my fingers.  I can zoom and pinch.  And Chrome not yet.  I'm sure it will.  Maybe...



STEVE:  And the fact is, IE10 today, I mean, we're still...



LEO:  It's good.



STEVE:  Yes.  And Microsoft has really - they focused on security.  It took them forever to get off the launch pad and into orbit, as always is the case with them or any really huge organization.  But they have.  And so it's really not fair to accuse them of still having IE6.  They don't have IE6 anymore.  They have IE10, and it's way better.  So...



LEO:  Yeah, I ended up using IE10 on Windows 8 just because it was better.



STEVE:  And speaking of which, IE10 just came out of beta.  I upgraded to that on a Windows 7 machine of mine yesterday.  You know, 7 comes with 9, and I updated to 10 because I wanted to start watching it and see how it feels.  It looks absolutely the same, so it's just - it's better.



LEO:  I guess I can scroll with two fingers.  It's just weird.  You know, Explorer just looks better.  Just handles it better.  So if you're using Windows 8, I think there are probably a lot of people who've gone back to Explorer.



STEVE:  So what I was going to say was that on the desktop platforms we're probably split between Firefox and Chrome, either of which are really good choices, I think.  What did not get any news coverage, I was really surprised, I didn't even - no one seemed to pick it up and tweet it to me, so my major pulse on the industry didn't see this, is that Microsoft was also hacked along with Facebook and Apple.



LEO:  Yeah.  They didn't mention it.



STEVE:  No.



LEO:  Until everybody else did.



STEVE:  Exactly.  And so in their blog Friday they said, under the title of "Recent Cyberattacks," they said:  "As reported by Facebook and Apple, Microsoft can confirm that we also recently experienced a similar security intrusion.  Consistent with our security response practices, we chose not to make a statement during the initial information-gathering process.  During our investigation, we found a small number of computers, including some in our Mac business unit - in other words, it was the same iOS watering hole attack that got the Facebook and Apple developers - "that were infected by malicious software using techniques similar to those documented by other organizations.  We have no evidence of customer data being affected, and our investigation is ongoing."  Well, good luck with your investigation.



LEO:  [Laughing] You're such a cynic.



STEVE:  I know [laughing].  I've been watching them for too long.  Although I do, as I said last week, I've been very impressed with Server 2008 R2.  And I am using a new Win7 installation with IIS 7.5 here at home so I have the same thing that I have at the data center.  And I'm - they've got their act together finally.



LEO:  Good.



STEVE:  Apparently you know someone named Bob Bosen, who you once talked about his AskMrWizard.com website.



LEO:  Sounds right.



STEVE:  He had some interaction with you.  Well, Bob asked me if it would be all right with me if, for some selected propeller-head episodes, which sort of cry out for graphics, if he were to do some animated graphics to go along with my voiceover.



LEO:  Oh.



STEVE:  And I said of course.



LEO:  Yeah, I love that idea.



STEVE:  So you can go to AskMrWizard.com, and over on the left you will see a link to Security Now!, or you can go AskMrWizard.com/securitynow, which takes you directly there.  And what I saw yesterday, and I don't know how he's organizing it because I just saw his note when I was going through the...



LEO:  He calls it "Security Now! Illustrated" [laughing].  I like it.



STEVE:  Yeah.  And he handles NAT traversal.  He talks about NAT routing and how NAT routing are good firewalls.  Basically he's using the podcast audio, but doing 3D animated video to...



LEO:  Wow.



STEVE:  With, like, comments and balloons that illustrate things.  He understands it, and so he's helping other people to do so.  So what I'm going to do is I want to tell everybody about it.  I asked him, can we tell everybody?  He says, oh, yeah, sure.  So this stuff is up on YouTube.  And what I would hope is that, as he finishes new ones, he'll let me know, and I'll just make a brief note during the show that there's another one for people to check out, if they want.  But they're nice.  I mean, it's done at home, but it's nice 3D graphics, animated stuff.



LEO:  That's really cool.  That's so neat.  And I do agree.  I've always wished we had the budget to have more illustrations in all of our shows.



STEVE:  Yeah.  And especially for this, when we're doing the fancy stuff, when I'm talking about encryption and all that, it'd be wonderful.  But, oh, my god, that's - that would take over my life for the week, getting that stuff done because...



LEO:  Oh, yeah, yeah, yeah, you can't.



STEVE:  ...I'm a perfectionist, and I would never be happy with it.  So, okay, now, Leo, this is beyond cool.  You need to click the link in that next item. 



LEO:  Okay.  Don't say it out loud until I do.



STEVE:  I won't.



LEO:  Because we'll probably bring it down.



STEVE:  This is something that someone following me over in my VLC Twitter feed tweeted.  And it is so cool.  It's called the UChek Urinalysis.



LEO:  [Laughing]



STEVE:  And it is brilliant.  They use a smartphone, like an iPhone, to - you take a picture of urine test strips over time.  So you take several different pictures of it as the test strip is evolving.  And then this thing interprets the results for you much better than you could just by hand, and of course builds in a calendar and all that.  And it measures ketones, all kinds of measures which are detectable from a urinalysis.



LEO:  You know, this is nontrivial.  I look at these things, and I don't - is that purple?  Is it green?  I don't know.



STEVE:  Yeah.  And, now, okay.  And the thing that I got the biggest kick out of was the developers who said, you know, this is going to be an Apple application, so we're tempted to call it iPee.



LEO:  iPee.  There will be an Android version, too, though, so iPee.



STEVE:  Anyway, just...



LEO:  I like it.



STEVE:  Yeah, brilliant.



LEO:  Not out yet, by the way.  But UChek.in, if you want to check for it.



STEVE:  Ah, good, yes.  Looks neat.  Okay.  So this is, again, we're doing miscellanea here.  But this is the most exciting piece of news I've seen in years.  It is the cover of next week's Time magazine.  It's been on the Time.com site for about a week.  It is a long story.  I tweeted the link to it.  I also created a bit.ly shortcut, bit.ly/bitter-pill.  "Bitter Pill" is the title of this Time magazine - it is a major investigative report, the longest one Time magazine has ever undertaken, seven and a half months they worked on this.  And what's exciting to me, that whole title is "Bitter Pill:  Why Medical Bills Are Killing Us."  And this has been my own personal crusade, I mean, my friends are all annoyed with me because I'm ranting because, you know, here we are with the Republicans and the Democrats locked up, we've got the sequester coming into effect on Friday, and everyone's yelling and pointing fingers at each other.  They're worrying about entitlement reform, and the entitlements are going to - the soaring cost of medicine.  And I have been asking, okay, the driver of all of this is that it costs so much.  Why does it cost so much?  Why does, okay, yes, open heart surgery is amazing.



LEO:  Yeah, but a Band-Aid shouldn't cost $25.



STEVE:  Exactly.  And I have an elderly friend who lives in my neighborhood who's had a couple rather routine surgeries, but because he's 75 they kept him at our local Newport Beach Hospital.



LEO:  Oh, you don't ever want that.



STEVE:  It was, like, $7800 a night.  $7800 a day.  And it's, I mean, just mindboggling.  And it's like, okay, why?  And what I'm excited about, and the reason I'm bothering our security-oriented listeners about this, is I don't think there's anything more important.  I have no problem with Mercedes and BMWs costing whatever they want because I can choose if I want to drive a VW or a BMW.



LEO:  It's discretionary, yeah.



STEVE:  Yes.  But health isn't.  And this article, which is fascinating, I'm mentioning it because I would encourage everyone to make some time to read it.  It'll be out on the newsstands this weekend.  It's next week's Time magazine cover story.  You can get it now online at Time.com.  And it is fascinating.  This reporter doesn't just wave his arms around and talk about how expensive everything is.  He goes through individual people's case histories, talks about their - dissects their 327-page medical bill and demonstrates how wrong it is that a hospital in Texas that is nonprofit, and therefore tax exempt, is making a billion dollars lobbying Congress.  The medical industry lobbies Congress five times more than the defense industry does.  It's amazing.



And so anyway, I just wanted to point people to it.  Enough said.  But that's the problem that we have is it's the expense at the far end that is pushing everything back.  So I just thought it was really interesting.  And I was so glad to see it because we have to have - this has to be brought to light.  And nothing will do it better than a cover story in Time magazine.  All the different news stories, Jon Stewart had the guy on late last week.  All of the morning shows have been talking about it.  So I'm just glad it's getting some attention.  It's really important. 



Also, one of my very favorite sci-fi authors is now on Audible, Michael McCollum of Scifi-AZ.com.  So I wanted to let people know.  I got the heads-up from a couple of our listeners who said, hey, Michael's books just appeared.  And by "just" we're talking, like, the 19th, you know, so just last week.  I pinged him and said, hey, what's the story?  Because there are five of his books are there now, the first two of the Antares Trilogy, the first one of the Gibraltar Trilogy, and both of the Makers series.  But they're all going to be there.  He told me that Audible had purchased the rights to all of them.  He was removing his own Audible experiment where he was - I think he had an automated text reader that was, like, reading them, which is way less wonderful than an actual person reading them. But they're out there now.  They're on Audible.  And so I just wanted to give our listeners a heads-up.  The Antares Dawn series is just great, as is Gibraltar Earth.  I really, really enjoyed them.



LEO:  I'm so glad they're on Audible.  Did he make a - he must have made a deal because he's his own publisher; right?



STEVE:  Yeah, he is.  They bought the rights.  He has an agent.  And so the agent made a deal with them.  They wanted them.  And so I'm delighted that there was the interest, yes.



LEO:  And I presume they're going to do Book 3 of Antares. They've got to.



STEVE:  Oh, no, they're going to do them all.  All of his books will be there.  "Antares Dawn," the first one, was released on the 17th of this month, February 17th; "Antares Passage" on the 19th.



LEO:  Oh, okay.



STEVE:  So, and then "Procyon's Promise" on the 20th.  So they're all on their way out.



All the PDP-8 clones were sold, Leo.  The 19...



LEO:  Oh, shoot.  I just missed out.



STEVE:  [Laughing] Yeah.  The ultimate nothing box, as you would - I can't argue, but they're just wonderful.  And many people have been writing, talking about something that's been in the news, but is really not that newsy.  But so I wanted to cover it just so that people would understand sort of where we stand.  And that's over graphene.  Graphene is amazing.  But it's about eight years ago graphene began to happen.  What was newsy was that a video that was made of a bizarre way that a couple guys in the lab created graphene by, like, dripping it on a CD and putting it in their CD burner and, like, using...



LEO:  What?



STEVE:  Yeah, they used the UV for the laser of...



LEO:  Oh, that's hysterical.  Homemade graphene.



STEVE:  ...to, like, create the graphene.  And they produced - and there's a beautifully produced video that sort of doesn't get into as much detail as I would like.  But it won some awards for, I don't know, great graphene documented something.



LEO:  It ain't the Academy Award, but it'll do.



STEVE:  But what's exciting, and the intersection with us and me and the podcast, is there's probably nothing more perfect for supercapacitors.



LEO:  Oh.



STEVE:  Now, what graphene is, it is an amazing substance.  It is pure carbon, so it is just carbon molecules interlinked in a hexagonal matrix which is one atom thick.



LEO:  Wow.



STEVE:  So imagine just a flat sheet of carbon atoms linked to each other absolutely flat.  It's called an atomic monolayer.  But get a load of its properties.  Okay, in terms of resistivity, that is, its resistance to electrical flow, a graphene sheet is 10E-6 ohms per centimeter.  So...



LEO:  Very low.  Very, very low.



STEVE:  Unbelievably low resistance.  In fact...



LEO:  Is it a superconductor in that case?



STEVE:  It's not, but it is, like, it's, like, close.  It's less resistance than silver, which is the lowest resistivity substance known at room temperature, and graphene is lower than that.  It's also one of the strongest materials known.  Get this.  A square meter graphene hammock, imagine that you made a hammock that was a square meter, so a little more than a yard by a yard.  That would support a 4-kilogram cat, an 8.8-pound cat.  Okay?



LEO:  Okay.



STEVE:  It would weigh only as much as one of the cat's whiskers.



LEO:  Wow.



STEVE:  0.77 milligrams.  It is that thin and that low weight, but that strong.  So that a square meter of graphene sheeting could support an 8.8, almost a 9-pound cat, yet weigh about as much as a whisker.  And it is .001 percent of the weight of paper, .001 percent.  So just incredible.  It is also transparent.  It only absorbs 2.3 percent of the light passing through it.



LEO:  Oh, see, I was going to make a solar sail out of it, but it wouldn't be very good for that.



STEVE:  Well...



LEO:  Strong but invisible.



STEVE:  Because you need to be reflective in order to...



LEO:  Yeah, to capture it.



STEVE:  Yes.  But think of all the instances where we want something conductive that's an electrode, like a touchscreen or an LCD panel, where we need to pass electricity.  Nothing does this better than graphene.  So huge applications there.  But more than anything else, ultracapacitors.  What you need for an ultracapacitor is two electrically conductive surfaces very, very close.  And it turns out you can create graphene oxide, which by being an oxide is an insulator.  So you take a graphene sheet, a graphene oxide and a graphene sheet.  And they are incredibly close together.  They're one molecule apart.  And the graphene sheets are incredible low resistance.  So they can hold a large charge with a high breakdown between them.



Initial studies of using graphene for ultracapacitors has shown that it has more energy density than current lithium metal - it wasn't metal - it wasn't lithium ion.  It was lithium metal hydride, which is slightly lower energy density than lithium ion cells.  But still, real, I mean, like, this is existing, I mean, we're getting this in the lab today.  So this isn't, you know, bizarro future technology that isn't close.  And everyone's talking about cell phones that you can charge in a second whose charge lasts a day.  No more of this hours to recharge.  Or cars where you drive them into a high-current charging station, plug in for 60 seconds, and you are completely topped up.



LEO:  Yes, that's what we need.



STEVE:  So it is looking like graphene is the way we're going to get there.  It is just an amazing substance.  And apparently you just squirt it on a CD and spin it in your computer, and you're able to make some of it.



LEO:  That blows me away.  Not a usable amount of it.



STEVE:  Just, you know, it's a...



LEO:  It's a graphene spot.



STEVE:  Yeah.  I'm not impressed by that because it was fun in the lab, but in commercial settings they're not going to get a roomful of CD drives, keep burning.



LEO:  It means it's not a very, very difficult thing.  You can do it at room temperature with simple devices.  So that's good news.



STEVE:  I mean, everybody is racing.  The Patent Office is under siege with graphene-related patents.  So there are a lot of things that have been done that no one can talk about yet because they're waiting to, I mean, they're having to go through some intellectual property protection process.  But labs everywhere are going nuts.  And it turns out that maybe it's going to affect both semiconductor production, because you need conductive surfaces on top of semiconductors.  Right now they use what's called "metalization layers."  And graphene, if they could figure out how to tame it, could be way better than what they have now for semiconductor metalization layers.  And there's been some notion that this may create a breakthrough in quantum computing, as well.  So this is really cool stuff.



LEO:  Graphene.  Now, Steve, are you ready?  See, I knew you wanted to know what this box was.



STEVE:  That's the question I was waiting for, Leo.



LEO:  Are you ready for questions?



STEVE:  Am I ready.



LEO:  Here we go.  Question 1, John Thompson, Albuquerque, New Mexico.  Look, he spelled it exactly right.  I guess that's because he lived there.  He suggests that the canine isn't the only thing that's been quiet about the Quiet Canine project:  Steve, it's been months since we've heard anything definitive about your work on the Quiet Canine project and your development of the TrebleShooter devices.  At one point you said that hundreds of listeners had used the Quiet Canine feedback page to tell their stories and plead for a solution.  I number among them.  So perhaps you'll consider this as a short topic for a forthcoming Q&A?  Where is the canine?



STEVE:  So, okay.  I did get pulled off of it by the emergency that I had with my 13-year-old servers that began to get too long in the tooth, I guess.  They started having weird problems that were of no discernible cause.  I moved them to different hardware, same problem.  I rebuilt the software, no improvement.  I just think it was - actually I think it was date related, and it began on January 1st, and it kept getting worse until toward the end of January it became a real problem.  So as I have mentioned before, I did have brand new servers waiting to be deployed, and this was finally the impetus to make that happen.  So I have a few things I need to clean up to finish resolving.  There were a bunch of incompatibilities that I feared.  All the major ones were cured quickly, and I've still got some I need to clean up.  Then I'm going to get back to just wrapping up that project.



But here's what I think we've learned.  And this is from all the experiments that people have done so far, even though there's still one thing left I really want to try, and that is to try a tuned resonant cavity with a transducer, a piezo bender, or a tweeter driver at the end where we tune the cavity for resonance and see how that works.  To do that, we need a high-voltage variable frequency sine wave source, which is what I was working on when I got pulled off to fix the servers.  But what I think we know now is that what many people want is not possible.



LEO:  Oh, no.



STEVE:  That's the rip-the-bandage-off reality.  What people want is something that will silence a dog three houses away or two stories below them in an apartment building.  And we don't have that.



LEO:  Yeah, okay.



STEVE:  And we're not going to have that.



LEO:  There's no sniper version of the TrebleShooter.



STEVE:  Well, and I was wondering why so many people were asking for that.  And then I realized it's because several different aspects of the original Portable Dog Killer story kind of fit together that way, but they weren't really  meant to.  When I caused the rabid German shepherd attack canine to have its legs collapse out from under it and make an amazing sound, and then over the course of about a week and a half trained it never to rush the fence, it was by shooting it point blank in the face.  I mean, I was at the fence.  It was leaping over the fence, and I shot it right in the muzzle and elicited the reaction that I had.  So it was - and as much as anything it was terror.  I mean, this scared the dog, didn't hurt it, just scared the bejeezus out of it.  And so that was the key, something it was absolutely not expecting really, literally, right in its face.  And then the second adventure was with the seagulls, where we discovered that at a good distance away we were able to alter the flight path.



LEO:  Hey, somebody just bought a copy of SpinRite.



STEVE:  I actually have the phone next to me.  It now works out of the BlackBerry as well as in the living room.  So wherever I am I get a yabba-dabba in my pocket.  Quite nice.  Anyway, so there was the altering the flight path of the seagulls.  The problem is, sort of by combining those two effects, people have been hoping that they could stop a dog from barking at the same distance that the seagulls had their flight path altered.  And it's not the case.  The dog might even bark more because it's going to hear this and think, huh, what's that?  I think maybe I'll bark at it.  So, unfortunately, we don't have an answer for that.



Now, the good news is, many of the people who did send feedback through the Quiet Canine feedback page have a need for what I would call "tactical personal defense."  And I think we have an answer there.



LEO:  Oh, boy.



STEVE:  So, and it costs about $8.  I mean, it's amazingly inexpensive.  And that's just the little seven- or eight-component design that I have and a $2 tweeter with a couple, I think it's a 9-volt battery it runs on.  And it's fantastic.  So, I mean, and that would be if you're jogging and there's a vicious dog approaching you, that sort of thing, personal tactical defense, where you need to discourage - I mean, and it's surprising how many people have this problem.  So that we have.



LEO:  Like a mail carrier would need this.



STEVE:  Yes.  In fact, we have mail carrier listeners who have sent feedback saying, Steve, I need this.  I'd be happy to test it out and tell you how it works.



LEO:  Because right now they carry some - Mace or something to get the dogs that...



STEVE:  Yeah, and, you know, that's horrible.  That's...



LEO:  Yeah, that's really mean, yeah.



STEVE:  Yeah.  Now, the alter- the other thing - so that works.  The idea of a handheld personal short-range tactical defense, that we have because that's essentially the same thing that worked back when I was 19 with the dog that was attacking me.  And it just stopped it cold.  And I have a feeling this would work, be incredibly effective there.  But the problem is, at a distance, there's just no way to project something really, really powerful that isn't going to fall off as it carries.  I mean, the dog will hear it, no doubt about it.  But it's not going to stop it.  Now, we do have a...



LEO:  It might anger it, and that wouldn't be good.



STEVE:  It very well could.  We do have some dog owners who want to stop their own dog from barking.  And there I am - what I'm thinking of is a dog collar.  So you get the advantage of proximity and the electronics module sitting down by the dog's larynx so it's able to discriminate the dog's bark from alternative dog bark, other dogs barking or other sounds and so forth, and it would have a microcontroller in it and be smart so that it's not going to misfire.  But then there are some, sort of some surface mount tweeters.  Pyle makes some very inexpensive little surface mount tweeters, two of them.  I guess people, like, stick them on their dashboard in their cars to get extra high-end response from their stereos.  But if you stuck those on either side of a collar, then that would also definitely deter a dog from barking.



The problem, of course, is it wouldn't deter a neighbor's dog from barking unless you could say, do you mind if I put this anti-barking dog collar on your dog?  And if they said yeah, we don't care, then that would work.  But the idea that you're going to shoot something three doors down and stop a barking dog, it's just - we don't have that.  That's just not going to be possible.



So that's where I am.  I expect a few weeks from now I will have all of the GRC debris wrapped up, and I'm going to then get back and wrap the project up, make the pages public, make the designs public.  Probably still going to build a bunch to provide to our listeners who have an application that would fit this.  So that's where we are.



LEO:  Excellent.  Question 2 from Matt, who is at a secret location.  He offers his Java strategy.  Steve, I thought I'd chime in on how my organization is handling Java.  I think it might be helpful for others in the Security Now! audience.  I work at a research institute housed within a big university.  We recommend that all of our users use Firefox or Chrome with Java plugins disabled for their primary browser.  The university has some core services that require IE, Java, and in some cases both.  So we leave Java enabled in Internet Explorer and ask users to use IE only to interact with those particular services.  This way our users can still get their jobs done and are better protected during their other regular activities.  And I guess because they're using Intranet sites they're probably not anything to worry about using IE in that case.  Thanks for Security Now!, SpinRite, and everything else you do.  That's probably a good solution, if you can get people to do it.



STEVE:  I liked that, yeah.  I mean, all Windows machines have IE in them, whether you want them or not, thanks to the weird architecture that Microsoft created in order to say that, back when the DoJ was fighting them for antitrust, and they were trying to say, oh, no, no, we can't remove Internet Explorer, it's part of the operating system.  It's like, what?  So they made it part of the operating system for no good reason.  And, yes, Leo, I am a cynic.  But since you're going to have IE anyway, and you'd really rather not surf the Internet on IE, why not put Java there, like bundle all your problems in one place and then not use them at all.



LEO:  Yeah, only use it on the Intranet or something like that, yeah.



STEVE:  Yes.  Another thing, your comment about that read my mind because IE also has that whole notion of security zones.



LEO:  You could say only on trusted sites.



STEVE:  Yes.  So you could crank up the Internet security all the way to high, and there's that new feature that they have, that enhanced security thing that prevents you from doing anything useful.  You can't do anything if that's turned on.  But turn it on, because you don't want to do anything by mistake, for the Internet.  And then for Intranet, where it's a block of IPs that are local, hey, then you're able to use Java in IE with no trouble.  So I think there's a way to tame this, essentially, by giving Java its own playground.  But just make sure that it's removed from the browser that you normally choose to use.



LEO:  Yeah.  So you have a local Intranet zone.  And you could say you can only do stuff there; right?



STEVE:  Yes.



LEO:  And when it comes to the Internet, turn it all the way up, and then you're all right.



STEVE:  I think that that must be a corporate, I mean, I'm wondering...



LEO:  Oh, it's definitely for this purpose exactly.



STEVE:  ...how many users get into their zone configuration.  And what happens is, using Active Directory and Group Policies, which are Microsoft technologies, the IT department is able to propagate settings out through the entire network and, like, remotely lock down and configure their browsers for their users.  So it's good for that.



LEO:  Precisely.  Question 3 from a ham in Ireland, in Galway, EI8DRB:  Steve and Leo, huge fan of the show.  In fact, it was Security Now! that introduced me to the world of podcasting in general.  But we like to call them "netcasts."  But thanks for providing me with the company in the frequent traveling I do as part of my work.  In recent episodes, Steve, you were talking about how parallelism has reduced the "hardness" of certain computational functions.  You mentioned specifically iterative hashing functions and proceeded to describe how pipelining can reduce a multi-iteration hashing function to a series of discrete stages in a pipeline.



However, did you forget to take into account that each iteration takes the previous iteration as an input?  Unrolling this into a multistage pipeline would be infeasible since stage N would require as an input the output of stage N+1, which in a pipeline would execute at the same time and thus would not have the result in time for stage N.  Am I correct?  Is there something fundamental I have missed?  Thanks to you and all of you at TWiT and Security Now!.  Regards and 73, Gerry.  You talked about this recently, I think.



STEVE:  Yeah.  I did.  And I just wanted to make sure that this wasn't a common misunderstanding.  Gerry is right, except that he got his math a little bit wrong.



LEO:  N-1.



STEVE:  Yes, exactly.  He said "since stage N would require as input the output of stage N+1."  It's actually stage N+1 requires as input the output of stage N.  So it works exactly correctly.  That is, and this is in general the way pipelining of all forms works, whether it's CPU instruction process pipelining or any kind of loop unrolling pipelining.  It is the output of the previous stage feeds into the input of the next stage, as opposed to where Gerry got himself tangled up.  He had the output of the succeeding stage being needed for the input to the preceding stage, which is not the case.



So it is the case that the pipelining works just beautifully.  And it's just - it's such a cool concept that you're able to take something that is iterative and, as they say, well, and in fact in computer science terms it's called "unrolling the loop."  One of the things when you are, I mean, in any kind of computer processing you often have a loop that you're doing multiple times.  If you absolutely have to have the highest performance possible, there is in programming a slight overhead to the loop itself.  When you get to the bottom, you typically have to check something to see if you need to do it again, like you have a counter.



So, like, say that you had to do something five times.  So you decrement the counter.  Then you check to see if it went to zero; and, if not, you jump back up to the top of the loop.  So there's a decrement, a test, and a conditional jump which you execute every time through the loop.  But if you really care about performance, instead you do what's called "unrolling the loop," where you actually have those set of instructions linearly laid out five times.  Then you don't have to have a counter, you don't have to have a test, and you don't have to have a jump.  The end of one set just falls right into the next set, which falls into the next set.  And by the time it comes out, it's done.  So you save the loop overhead.  And that's, again, another form, sort of a form of pipelining relative to iteration, where the results, the work from each stage is sort of, by implication, is available to the next stage.



LEO:  Question 4 comes from Ben in Whittier, California, just down the road from Steve.  He wonders about RAID controller failure:  Steve, I was listening to Security Now! 391 in which you talked about your monster server setup and all the redundancy and RAID 6 and all that.  In my own admittedly limited experience with servers, the first component to die is usually the RAID controller itself.  Are you increasing your exposure to such a failure by going with such an enormous onboard RAID controller cache?  How messed up will your disks be if the cache memory goes out while the server is running?  Thanks for explaining your setup.  Best regards, Ben.



STEVE:  So, first of all, that's a very good point.



LEO:  That is a failure point.  I don't know if they're, I mean, they're solid-state, aren't they?  They're less...



STEVE:  They're solid-state, and several things are going on.  The thing that I am least comfortable with is that I have chemistry involved in the form of a battery.  That is, you know, it's a lithium ion battery.  It will keep the RAM contents in the RAID alive for two days.  I really question whether I need it at all because I'm at Level 3 that has - when they were giving me their initial tour of the datacenter, oh, my god, they have a warehouse of batteries, just walls, I mean, just ranks of batteries.  It's amazing.  And then outside they have what looks like huge RVs which are industrial-size generators and tanks of fuel.  I mean, these guys are really committed to the power never failing.  So I really doubt that I need battery backup at all.



But maybe I would pull the cable, the power cord myself.  Or maybe both of the redundant power supplies could fail at the same time.  I mean, it's really unlikely, but you never know.  So because I want the benefit of the so-called write-back caching, where nothing is written out to the SSDs until the space in the cache is needed, battery backup is really the only way to do that safely.  What the system does is every month it cycles the battery.  I mean, it's very nicely done.  It suspends the use of write-back caching and switches to write-through caching.  Then, while it's doing this, then it takes the battery offline, drains it, and recharges it, measuring battery parameters all the while.  And then, once it's back up to snuff, it returns to write-back caching.  So it's monitoring the battery.  It sends email reports of anything it finds.



But the worst could happen, and the RAID controller could fail.  Which is why I have an entire second machine sitting idle.  I bought two of the entire setup.  So I've got - this thing's got redundant power supplies.  I already have two spare power supplies in addition to an entire second machine, identically configured, sitting idle.  I did that 13 years ago and never needed - I actually have three.  One's running UNIX, one was running Windows, and a third one was just off, ready in case of an emergency.  My feeling has been, since I would hate to be down for days, which I would be taken down for days, running around trying to find some other machine to run GRC, it's worth it to me just to invest upfront.  So I have 100 percent redundancy of a system that is already ridiculously redundant.



LEO:  If there ever be such a thing.  Question 5, Jim in San Diego wonders how something like a dumb PDF viewer could be so dangerous.  I can't - still, after our conversation last week, I look, and everywhere, everywhere says you need Adobe Reader.  You need Adobe Reader.  No, you don't.  Oh, no, you don't.  Steve, I love your podcast, listen as often as I can.  As always, it seems, Adobe has fixed yet more zero-day flaws in Adobe Reader last month.  Actually this month.  Perhaps I'm not getting something obvious.  Why can't Adobe Reader be written so that, even if it crashes, it would not have the ability to install malicious code?  Is Adobe Reader's problem related to having access to kernel space?  What's the deal?  Jim in San Diego.



STEVE:  So, okay.  And just to add to your comment about it being installed, I was setting up this new machine.  I have a - it's a clone of the Intel Core i7 that I created when we were experimenting with that other video technology.  It's a shuttle, nice little shuttle box.  And I added the chips and RAM and so forth.  And I was setting it up from scratch a couple of days ago, and I ran the installer for all of its own drivers, the chipset driver, the NIC driver, the display driver and so forth.  And, bloop, there appeared on the screen a little icon for Adobe 9, you know, in that ruby red color of theirs.  And it's like, yeah, you just cannot get away from it.  Of course I uninstalled it and put Foxit Reader in, instead.



So the only way I can explain what's going on with Acrobat, or Reader, is that Adobe has such a stranglehold, for reasons that Leo and I were just saying, Jim, that it doesn't matter to them.  Sure, some portion of the security-aware world is upset and doesn't use Reader, uses something else.  But...



LEO:  Everything has problems, though; right?  I mean, it's not like there's a perfect solution.



STEVE:  Well, yes.



LEO:  Software is software.  It's just that Reader is ubiquitous.



STEVE:  Yes.  And...



LEO:  In fact, I might even say that one of the reasons you keep seeing Java exploits is because it's a great vector; right?  So people are looking at it.



STEVE:  Well, and also it's that they are both incredibly complicated.



LEO:  Right, right.



STEVE:  Complexity is the demon of security.  I mean, it is...



LEO:  And Microsoft has been aggressive about patching flaws on Windows.  So you look to a third-party which is not updated so easily.



STEVE:  Well, and also what's the economic model?  That is, Microsoft was clearly going to suffer with competition from alternative operating system platforms.  Once upon a time there was BOS, and there was Apple and Linux and so forth.  It was clear that Microsoft was suffering from their horrible reputation about security.  And so they did the trusted security platform or something, whatever that was that Gates did his keynote on at Comdex [Trusted Platform Module].



LEO:  Trusted Computing Platform, TCP.



STEVE:  That's right.  And, but, okay, but Reader is given away.  I mean, Reader is a free download.  Java just, you know, we don't ever pay for it or ask for it.  It's just there.  So these are sort of weird loss leader things for these companies.  I mean, Mark Thompson has been experimenting with the amount of money you can make if you bundle one of these default install checkbox things, you know, the Ask Toolbar, or what was it, the other thing?  It was Ask Toolbar, and there was something else that Adobe was trying to install.  Anyway, the point is...



LEO:  Or McAfee.  There's always something.



STEVE:  Yeah, McAfee, that's what it was.  It's amazing how much money you can make.



LEO:  Really?  Good bucks, huh?



STEVE:  Oh, my goodness.



LEO:  Mark Thompson is AnalogX.  He does shareware.  And he usually just gives it away.



STEVE:  Yeah.  But he's like, hey, let's - I don't know.  Something somehow crossed his radar.  He did some research.  And it's like, oh, my god, how much money you can make.  And so here's Adobe saying, eh, we own PDFs.  We invented it.  It did go open source and open spec, so it's no longer a closed platform.  It's getting installed everywhere, and we're making a bunch of money because we try to install crapware that people don't want at the same time.  And it's like, what's their motivation for fixing it?  They really - they're going to respond.  But it's not clear that it hurts them.  And the same thing for Oracle and Java.  And Java is installing crap, too.



LEO:  There are lots of third-party choices.  People in the chatroom are wondering if there's one you like or recommend.



STEVE:  I do like Foxit.  It's what I've been using recently.  I installed it on Sue's machine when I rebuilt her computer a couple weeks ago and told her, okay, the icon changed now, but this is what it looks like.



LEO:  Still use it.



STEVE:  Yeah.



LEO:  I mean, it's had problems.  It's had flaws, too.  It's not free from flaws.  But...



STEVE:  Well, that's just it.  I would imagine, see, okay.  One of the problems with Reader is it is ridiculously over-complex.  Who needs JavaScript interpretation?  I mean, talk about asking for trouble.  If you're going to run a JavaScript interpreter in a PDF document, it's like, oh, just shoot yourself now.  Because, I mean, we're trying to protect ourselves from JavaScript by locking down our browsers.  And notice that the browsers, where their reputation and security matters, they fix it.  Whatever it takes, they fix it.  I don't see anything like that happening from Adobe and Oracle with Reader and Java.  They  just don't have the need.



LEO:  Does it use Ring 0?  Does it access the kernel?  I mean, is that part...



STEVE:  No.



LEO:  No.  I don't think it does.



STEVE:  No.  The problem is that it's - and that's the other part is that we're still in an operating system where users want freedom.  And look at how developers chafe at the restrictions that iOS puts on them.  And even users, it's like, hey, why can't I do this?  Why can't I have LastPass running on my Safari browser in iOS?  It's like, nope, can't do that.  And so that's a restriction that annoys people, but it's where security comes from.  Well, we don't have that, really, to speak of on our desktop platforms because they're open, and people want to be able to run anything they want on their computer.  If that's what you ask for, then unfortunately it means you've got a - your applications are empowered to do whatever they want to on the system, which means that an aberrant application, malware in whatever shape it takes, is similarly empowered to do whatever it wants because the system is designed that way.  We want it that way.



LEO:  We asked for it, yeah.



STEVE:  Until it goes bad.



LEO:  Right.  More power.  More power.  Question 6, an anonymous listener - you suggest the name Bruce, so we'll use that.



STEVE:  Call him Bruce, yeah.  He said, "I'm anonymous."



LEO:  Call me Bruce.  Posed a few good questions about Bluetooth keyboards.  I was using a Bluetooth keyboard out at a restaurant the other day, and this question popped into my mind.  Is what I'm typing encrypted?  Could anybody just listen in on my Bluetooth keystrokes?  And if my connection's encrypted, how secure is it?  It seems as if there could be a problem with some sort of statistical attack on the data that's going up to my mobile device.  If the attacker knows the data is all keystrokes, perhaps they could make an educated guess about the frequency of which keys were being depressed, extrapolate out from there.  How do they avoid that problem, if they do?  Do they pad out the packets with lots of junk noise or something?



I know I'm not the most well-versed in the operation of encryption, so maybe this is a stupid question.  But I'm curious how you clever security folks address this potential problem with a piece of what is for me everyday technology.  Thanks, if you do answer my question.  I love the show and undersign the rest of the blah blah blah.  Keep up the great work and enjoy your new server hardware, Steve.  You sound like a kid in a candy store, and your enthusiasm is infectious.  Bruce.



STEVE:  Okay, so a couple things...



LEO:  We talked about this some years ago.



STEVE:  Yes, we did.  And I thought we hadn't for a long time.



LEO:  Yeah, I'd love an update.



STEVE:  So I'll just dip a little into it.  So let's talk about wireless keyboards in general first.  The very early wireless keyboards had ridiculous, quote, "encryption," unquote.  And you'll remember that all they did was, as you pressed keys, they sent out an 8-bit byte, which is the code for the key.  But they said, oh, we don't want that to be easily readable, so we're going to XOR it with a byte.  Now, we showed the graphic image last week or the week before, I think it was last week, where you XORed an image with noise, and you got noise.  That's really good encryption.  The problem was the keyboard XORed every byte with the same byte.  That is, it never changed.  So every time you pressed an "E," you got the same code.  It wasn't the code for "E," but it was a fixed code.  And "F" was exactly one larger than "E" because it's ASCII.  And so anyone who analyzed that stream, I mean, it'd be almost a nice, really amateur crypto problem for people to have.  It's like, here's someone typing something, and we've XORed all of the bytes with a single fixed byte.



Anyway, obviously weak crypto.  Anybody capturing that could easily, by doing a frequency analysis, look at which characters are typed, which characters are in relation to each other because it's not like there's any kind of cipher where each character maps to a different byte.  It's that each character is just XORed.  Which means the same - and remember XOR is a certain set of their bits are inverted.  Always the same ones, always the same way, every time.  So that's the way it was.



Now, but because that came to light, the manufacturers of the keyboards spent an extra three quarters of half a cent and increased the security of their keyboard so that it was good, so that it's now fancier security, and we don't need to worry about it.  Like when you buy a Microsoft wireless keyboard or Logitech wireless keyboard, they've got good wireless security.  But none of that is Bluetooth.



Bluetooth is a big set of standards, and the answer to the anonymous person whom we're going to call Bruce's question is that only in the instant of pairing of the Bluetooth keyboard with whatever device was receiving the keystrokes - I have a Bluetooth keyboard with my iPad, so maybe - and I love that little, the Logitech, it's like it forms both a cover and a stand, beautiful little keyboard for the iPad.  And it's Bluetooth.  Only during the brief event of pairing is there any danger at all from a man-in-the-middle attack, and even then it requires some sophistication.  So what we said years ago when we covered in depth Bluetooth security, we've got a podcast on that if anyone wants to get this in more detail [SN-280], is Bluetooth has a known limited range of 30 meters.  Wait, no, 10 meters, 30 feet.



LEO:  30 feet, yeah.



STEVE:  Right.  Go out into the middle of an empty parking lot...



LEO:  And you're safe.



STEVE:  ...where you can see all around you and you know that you don't have anybody within 30 feet or 10 meters.  Pair your devices, and then you're fine.  And also turn off discovery.  Many people, it's shocking how many people leave their Bluetooth discovery turned on.  I'm pleased that my BlackBerry that will soon be retired for a BlackBerry 10, when you turn discovery on, it's always for a fixed time.  It just turns itself off.



LEO:  Yeah, it should turn itself off.



STEVE:  Yeah, yeah.  So the answer is Bluetooth keyboards are secure.  Only if you were really concerned would you need to even worry about that pairing event.  But presumably you do that at home or somewhere.  And then, from then on, they know each other.  When they are paired, what that means is that there is a secret handshake that they had that established a shared key which is never exposed.  Only derivatives of that key are ever used in subsequent communication, and you are as secure as we know how to make you today.



LEO:  Question 7, Joe in Georgia - ah, I was wondering when we'd get one of these, a Universal Plug & Play question:  Steve, I've enjoyed your discussions about UPnP and the external access issue.  Quick question:  Can this be solved simply by creating a DMZ pointing to a nonexistent IP?  I seem to remember this was your advice when routers used to respond to IDENT queries, but I haven't heard anyone mention this workaround.  Also, is there any risk creating a DMZ to a nonexistent IP on my internal network?  I don't even understand why this would work.  Is there any risk of a malicious sender being able to do damage to other machines, given that I've let them into the private side of the network?  Really?  Creating a fake DMZ, in effect.



STEVE:  Yeah.  Actually, that's been a solution for a number of router problems in the past.



LEO:  Because unknown traffic will just get routed to there.



STEVE:  Exactly.  People have had routers where they were not stealth.  One of the things that I did when I rewrote ShieldsUP!, as I talked about a few weeks ago, was I created that notion of true stealth, where I have a big funnel, and while I'm working with the user, sending them probing packets of different kinds, I'm casting a net for anything that comes back as a result of the queries that I am making.  And I'd let them know, like, what's the nature of what bounced back for any reason.  And so there were people, for example, whose routers did not allow them to turn off ping, and so that upset some people.



Anyway, so an interesting solution which arose is to create a DMZ, which is the - it's a funky, I don't know why it's called, I mean, what, for demilitarized zone.  I'm not sure how it determines...



LEO:  Yeah.  Remember during Vietnam, there was like the place between your front line and the enemy's front line was the demilitarized zone?  It was in between...



STEVE:  Actually, it's the Romulan Neutral Zone, Leo.



LEO:  I'm sorry.  Pardon me.  Why don't we call it the RMN?



STEVE:  I think we should. 



LEO:  Or RMZ.



STEVE:  Romulan Neutral Zone.  Then we would all know what we're talking about.  So the idea is that anything not bound for a known computer behind the network gets sent to an IP that you establish.  And you just set it to something impossible, something illegal, something not in your normal DHCP auto-assigned address range, and it just kind of creates a black hole, which is a great solution.  So we have encountered people who are unable to turn off Universal Plug & Play.



The reason I wanted, I had this question is in case any of our listeners have routers where they were unable to disable Universal Plug & Play as detected by, for example, my ShieldsUP! system.  We're up to now 2,641 individual IPs have been found to be vulnerable.  And the rate is really slowing down, which means that the listeners within the GRC sphere, largely this podcast and friends of friends of the podcast, have checked themselves and know one way or the other what their status is.  But we're not seeing lots more.  I mean, the number is apparently in the millions.  But we don't have millions of people coming by.



So anyway, yes.  The DMZ, setting up a router DMZ is a great solution for solving the Universal Plug & Play problem, routing port 1900 to a nonexistent machine.  And then GRC will show that there's no response from you.



LEO:  Good.



STEVE:  Great idea.



LEO:  Clever.  Jon in Sweden suggests a good answer for the anonymous email question in 391, a couple episodes back.  Hi, Steve and Leo.  Insert gushing praise here.  In Episode 391 a listener asked about a free and anonymous email service.  I think there's a great answer:  TorMail.org is a free and anonymous service that cannot give your information away because they don't know anything about you except for what you tell them.  And since their servers are off somewhere in onion land - that's what TOR stands for, The Onion Router - they are subpoena-safe.  Also the problem Leo mentioned with exit nodes doesn't apply since it's a hidden service, and you never exit onion land.  Oh, that's interesting.  What a good idea.



STEVE:  Yes.  One of the things on my list of probably propellerhead episodes is to describe the technology that TOR developed for offering services.  Now, that's different than what TOR normally does.  TOR is normally a client anonymizer, where client users use TOR to hide their identity for their traffic that exits out onto the public Internet to prevent them from being back-traced back to home.  But the clever people who do TOR, I don't know if it was the EFF or whom, I'll find out and make the whole thing clearer in a podcast about it, they figured out a way to do the same thing for services so that you can access a service through the layers of onion routing, get to a server somewhere, but no one knows where it is.  So it hides the service, and you are hidden from the service.  So it's mutual hiding.  Very cool stuff.



So for anyone who's interested in exploring anonymous email - and remember, TOR is not super efficient because you're running through, you're bouncing through lots of servers.  People complain about the throughput, but I think that's because they're trying to download movies and things.



LEO:  Yeah, but email it'd be fine for.



STEVE:  Email probably works very well.  So Tor Mail, TorMail.org, check it out.  I will, I will check it out, and we'll do an episode on how it's possible, what the technology is for offering hidden services, since that's very cool and not at all obvious how it would work.



LEO:  Yeah.  Matt Buford in Austin, Texas properly corrects Steve about the infeasibility of ISPs blocking Port 1900:  I'm a bit behind in watching Security Now!.  I just came across you suggesting ISPs should immediately block UDP port 1900.  Was that for the UPnP problem?



STEVE:  Yup.



LEO:  Yup.  Whoops.  Please don't suggest that packet filters be put in place for ports above 1024.  These are commonly used as ephemeral ports, and you will block legitimate traffic by doing this.  Of course, that's how FTP works; right?  It just assigns a random port.



STEVE:  Yup.  And that's how, like, client - well, I'll let him finish, and then I'll...



LEO:  Imagine my machine wants to send a UDP packet to someone out on the Internet, DNS or whatever you want to imagine.  It will pick up a random port at 1025 or higher, maybe 1900, as a source port.  Many operating systems use 1025-5000.  Sometimes people enable the entire range, which is of course 1025-65535 range.  That's if they need a high rate of outgoing connections, servers, for example.  Anyway, I'm able to send my packet out with a source of 1900 and a destination of something else, say 53.  The response then comes back to me with a source of 53 and a destination of 1900, and your filter blocks it.



STEVE:  Yup.



LEO:  If my OS uses 1025-5000 as ephemeral ports and my ISP blocks packets to me on port 1900, then one out of every 3975 requests of mine will fail, since I won't be able to get the response.  I've found this problem on large networks more than once.  People try to block worm ports or other things they think is bad on the Internet backbone and do so by just using ACLs to drop packets - Access Control Lists - to drop packets destined for that high port.  Doing this causes random connections in the other direction to fail.  The number of failed connections is often low enough to not be very obvious to the average user.  But having an Internet connection that fails on even one out of 65535 connections would be a bad idea.  Is it any better because it's UDP, Steve?



STEVE:  No.  He's completely right.  His example is spot on.  He used the example of DNS, which is a UDP query.  It often is the case, actually, that DNS is sourced from 53 and aimed at 53.  It's often that 53 is to 53 port to port, but doesn't have to be.  But his point is well taken.  I was aware of this weeks ago and just kept forgetting to mention it on the podcast.  So when I saw Matt's posting, I thought, yep, let's make sure we acknowledge that really it is not safe to block, and for exactly the reasons he says, anything over 1024.



ISPs, as we have said, are blocking, for example, 25 to keep their own customers from being spam generators.  They are blocking - and that's outgoing 25.  They're also blocking incoming packets destined to 135, 136, and 137, which are the old Microsoft NetBIOS ports.  They're also often blocking 445, which is the newer version of Microsoft's file and printer sharing service, to prevent those old problems.  That's not a problem because those are so-called in the service port range, below 1024.



For example, when you go to ShieldsUP! and you click on "All Service Ports," that's the block from zero, and I actually do check for port zero even though it's illegal, up to 1024.  That's the block that I check because those are where services run.  And so exactly as Matt says, when you first turn on your operating system, and it starts sending out queries, if you look at Netstat, which monitors the history of connections, you'll see 1025, 1026, 1027, 1028.  It just marches right up using sequentially upward numbering ports until it gets typically to 5000.  There's a registry setting you can change to change the upper limit, but that's normally enough.  Then it wraps back around.



The reason that it works that way is that that disambiguates incoming traffic.  You've got traffic coming back that may be TCP, and it may be for your IP, but the question is, for which query?  Or, like, what is it coming back for?  The only remaining way of separating many outstanding queries and replies is the port.  So each successive query is on a succeeding numbered port.  And exactly as Matt says, it's entirely foreseeable that you'd send something out on port 1900.  So it would go out onto the Internet.  And when the query came back, it would be coming back to your port 1900, which is exactly the port that Universal Plug & Play accesses on your router.  And if the ISP were blocking it, you'd just get no connection.



Now, the operating system would retry, and it actually would use 1901.  It would go to the next port and try it again.  So our systems are robust around that, but it's still uncool.  And he's absolutely right.  The idea of this being done out on the Internet backbone just gives me shivers.  That should never happen.



LEO:  Uncool, man.



STEVE:  Yeah.



LEO:  Uncool.  Question 10:  James S. in Utah wonders if his shields are only somewhat up:  Thanks for the great Security Now! podcast.  I've listened to every episode at least once.  I just replaced my router with an Apple AirPort Express, since the old Netgear is now in pieces in the trash.  I wonder if he hit it?



STEVE:  I think he probably hit it with a hammer.



LEO:  With a hammer.  Once I set up the new router I navigated to ShieldsUP! and started pounding on the thing, boom, boom, boom.  The router responded to ping - fail - and actively rejected UPnP probes, but everything else was stealth.  It turns out Apple will not allow us to turn off ICMP response on the WAN side of the AirPort or Time Capsule.  Is that safe?  Do I need to take my shiny new router back to the Apple Store?  I didn't know this.



STEVE:  Yeah.  This is a longstanding complaint.



LEO:  Other routers do that, too, right, because...



STEVE:  It's varied.  I think I'm responsible, actually, for the more standard Netgear, Linksys and so on routers disabling their ping response because of ShieldsUP!, frankly, and the idea that - and people just wanting to be stealth.  So first of all...



LEO:  "Stealth" means if a guy sends you a request, there's just no answer.  Not even a no, I don't - I block that port.  Just nothing.



STEVE:  Yes.  And of course I named it "stealth" because of Star Trek and as related to the Romulan Neutral Zone and so forth.



LEO:  Well, there you go.



STEVE:  So, okay.  I don't want to alarm anybody.  So, James, you're not - technically your shields are not up inasmuch as you can be seen.  That is, but all that somebody knows is that, at that IP address, they don't know it's you, but at that IP address which your ISP has probably assigned you and it drifts around every few months, there is something that is there, and when you ping it, it says yeah, and when you give it a UPnP probe, it says yeah.  But it's rejecting the UPnP probe, so it says I'm here, but I'm not listening to these.



Now, notice also that, if I had probed 1899 rather than 1900, 1899 would also reject.  So the point is that it's not just 1900 that is rejecting an incoming UDP.  It's all of your ports are rejecting an incoming packet, and I'm just happening to check for port 1900.  So if you wanted to be stealthful, on an AirPort, you can do what we talked about a couple questions ago, which is set up a DMZ to a nonexistent IP, to an IP in your network, so it's like 192.168, but normally your router will assign maybe like from 1 to 100.  So set the DMZ to 111, outside of the auto assignment range, so no machine will ever be assigned that IP, yet incoming traffic will go there.  And when you do that, you will be fully stealth.



So you can be stealth.  But you don't have to.  Remember that all this tells anybody is some unknown piece of equipment is at that IP address.  The theoretical vulnerability is they could, like, then try to dig deeper and do something to you.  But at this point it seems unlikely.



LEO:  Could you DMZ it?



STEVE:  Yes, that does work.



LEO:  That's clever.  I don't know if I've ever seen DMZ in an Apple router.  I'm sure...



STEVE:  Oh, they must have it because that's the only...



LEO:  They have to.



STEVE:  It's the only way to run a server behind your network.  In fact, I should mention that's why the DMZ was created, not because of the Romulans, but because, if you wanted to allow - if you wanted to serve something, like your own little personal website at your IP, you inherently need unsolicited traffic, people you haven't invited by sending traffic to them, which normally means solicited traffic is coming back in response.  But clients of servers are unsolicited by definition.  So their traffic coming in needs to get to your server.  So this DMZ is set up so that unsolicited, unexpected traffic coming in from anywhere is routed to that machine's IP, or that it can decide what it wants to do with it.  So I'll bet that the AirPort has to.



LEO:  Oh, yeah, no.



STEVE:  It's crazy.



LEO:  In fact, MacBreak's telling me of course it does.



STEVE:  Ah, yeah.



LEO:  Last question, our bonus round.  Here we go, Q11.  Jonathan in Toronto brings us the Software Utility Suggestion of the Week:  Hi.  Just came across a new little utility I'd like to share.  You mentioned a few neat utilities a long time ago, KatMouse among them.  I love KatMouse.  It's been great, aside from the middle-mouse function that I would always have to disable on new installs.  I also use AutoHotkey - I like that one, too - to change my Caps Lock into Control, and to reverse mouse scrolling since my drivers don't have that feature.  The scroll reversal would stop working at random times, though.  Well, since I now have a keyboard with hardware control of control - with hardware control of control?



STEVE:  Of control...



LEO:  Oh, control key.



STEVE:  Right.



LEO:  Via DIP switch setting, I no longer need AutoHotkey or KatMouse.  Welcome WizMouse.  WizMouse by Antibody Software has the familiar scroll-anything like KatMouse, but also has the option to reverse scrolling.  Super simple, just a few options, just what I need.  Hope you find it useful.



STEVE:  So I wanted to thank Jonathan for that.  I have not looked at WizMouse, although I just did install KatMouse, both on the server at GRC and on my new Win7 box that I was building to set up a clone of IIS so that I can do development and work here.  And listeners may remember that what KatMouse does is it causes your mouse wheel to scroll whatever the pointer is over, even if it doesn't have focus.  So focus is when you click on the window, and it darkens it and jumps to the front and so forth, which is normally what the mouse wheel will scroll.  Even if you wander the mouse off of that to something else, and you scroll the wheel, that other thing still scrolls.  KatMouse causes the mouse wheel to track with whatever the mouse cursor is floating over, which is really cool.  I'm still using it.



I'll check out WizMouse.  I don't have a problem with the scroll wheel being backwards because I like it the way my grandfather used it instead of the way Apple has wrecked everything by thinking that I'm using a touchpad where I want to, like, push it on my Mac the same way I do on my tablet, which is not the case.  I find that the wheel is backwards on my Mac.  So, and whenever I do a major update, I have to go in and reverse the direction on the Mac.  But they do allow that to be done, so that's cool. Anyway, WizMouse.  So check it out.



LEO:  Good, good, good.  And that concludes all 11 questions on this episode.  Nicely done.  Right exactly on time and everything.  Steve Gibson's at GRC.com.  He didn't mention SpinRite.  That's what I was waiting for.



STEVE:  Yeah, I knew we were going to have a super - oh, that's what you're waiting for.  I knew we were going to have a super long one.  We had a lot of stuff at the top of the show.



LEO:  All right.



STEVE:  And I thought, eh, everybody knows about SpinRite.



LEO:  I'll mention SpinRite.  Get it.  World's best hard drive maintenance and recovery utility.  You've got to have SpinRite if you've got a hard drive.  And you can get it from Steve, GRC.com.  Make that yabba-dabba-do sound off in his pocket when you buy a copy of SpinRite, really great thing to have.  But while you're there he also does so many other free things.  In fact, you might want to test that UPnP flaw using ShieldsUP!.  So many other things you can do there.  Just go to GRC.com.  He also has 16Kb versions of this show for the bandwidth-impaired, and even transcripts, if you like to read along while Steve talks, thanks to Elaine.



STEVE:  Elaine sent me a note when she transcribed last week's podcast.  She said, "It cracks me up so much hearing you describe where I apparently live."  Because we were talking about that she has bats and...



LEO:  Mountains and - there it is, right there.  It's in the middle of nowhere is where she lives.



STEVE:  She did actually send me a photo, which I didn't focus on, but I showed it to Jenny.  And it showed snow on a cactus.



LEO:  Okay, there you go.  Says it all.



STEVE:  That does.



LEO:  [Laughing] Anyway, GRC.com.  Also if you want to ask a question for our next feedback episode, two episodes hence, you can do that there, GRC.com/feedback.  I think that's everything.  We do the show Wednesdays, 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 1900 UTC on TWiT.tv.  Do watch live because then I can look at the chatroom and add addenda from the chatroom.



STEVE:  And we do have fun for the first 30 minutes, Leo.  We ought to tell our non-live listeners that we normally get finally underway at about 11:30, but we have fun for the first half hour.



LEO:  There's stuff going on.  It's not like just dead air.  You get to watch the studio set up.



STEVE:  No.  It's a little bit - I'm a little conscious of the fact that I can say things that aren't going to be recorded for posterity.  So, yeah.



LEO:  Oh, well.  Maybe not recorded.  We can't promise that.  People do record things, you know.  So that's why you should tune in.  But if you can't make it, we make on-demand audio and video versions available, as well.  Just like Steve.  Ours are a little higher quality at TWiT.tv/sn.



STEVE:  And there is a YouTube channel now, YouTube.com/securitynow...



LEO:  Yeah, isn't that great.



STEVE:  ...will bring you the videos.



LEO:  Yeah.  If you want to watch the video on YouTube, that's good, too.  Well, thank you, Steve.



STEVE:  Okay, my friend, we'll do a full episode of some cool topic, whatever is next on my list or happens in the meantime, next week.  We'll see you then.



LEO:  See you then.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.






GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#394	

DATE:		March 6, 2013

TITLE:		Tor 2.0 with Hidden Services

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-394.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with this week's Java vulnerabilities and emergency updates, Steve and Leo examine the recent evolution of the public and free "Tor" Internet anonymizing network.  They look at the network's updated operation and its new ability to offer "hidden services" in addition to hiding the identity and location of the services' users.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here with an update on The Onion Router.  First of all, Tor doesn't even stand for The Onion Router anymore.  And now, with hidden services, it's about twice as good as ever before.  Tor 2.0, our topic next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 394, recorded March 6th, 2013:  Tor 2.0.



It's time for Security Now!, the show that protects you, your loved ones online.  And we thank this guy for making it possible, the Explainer in Chief, Steve Gibson.  Let's get ready to lock it down.  Hey, Steve.



STEVE GIBSON:  That's me.  Hey, Leo.



LEO:  And you're wearing your Atari shirt.  Shoot, I should have worn my Atari cap, yeah.



STEVE:  Oh, of course, yeah.



LEO:  I just was - in fact, I should show you this.  There's a fun Macintosh app.



STEVE:  You took your green hat off.



LEO:  Well, St. Patrick's Day is not for another 11 days.  There's a really fun app on the Mac that you would really - you and a few old farts like us would appreciate.  It's a terminal app that emulates an Atari or a Commodore.  It's called a Cathode because you can choose from different cathode tubes.  And it has all of the things that we used to hate, like the jitter, the rolling.  You have a...



STEVE:  No kidding.



LEO:  There's a degauss button, so it goes [sound] and bounces.  So it's really, I mean, it's a real trip down memory lane.  Unfortunately, I mean, it's a good way to get a headache.  So I don't, you know, it's $10.  I'm not sure what the - but it's the actual term, it's the Mac Term app, built into it.  So you could, I mean, you can actually use it as a terminal, if you want.



STEVE:  Ah.  So the point is that it's the visual display emulating an old-school CRT.



LEO:  Right, right.  But if I type "LS" or whatever, it actually works.



STEVE:  Nice.  Nice little fadeout on the cursor.



LEO:  Yeah, you see?  Oh, you're watching, yeah.



STEVE:  Yeah.



LEO:  And you can change the baud rate.  You can - here's a 286.  Here's a C64.  Let me see.  I wonder if they have an Atari.  I'm pretty sure they do.  Yeah, this might be it.  I'll make it bigger.  And then [laughing]...



STEVE:  That was very nice.  I don't know that it's worth $10.



LEO:  It's not worth $10, but you can't resist it.  And then you can try to - here's a 1976 TV.  Here's a 1991 TV, with a little bit better - we don't have the scanning anymore.  You can even change, I don't know if you can see this, but there's a reflection of a room on it.  And you can upload a picture of anything you want so that you can actually see yourself in the thing.  Isn't that hysterical?



STEVE:  They really went overboard.



LEO:  It's crazy, man.  It's crazy.  You can [laughing]...  I can't imagine what the purpose of it is.  But I just thought you of all people would appreciate it.  It is $10.  It's on the app store on the Macintosh...



STEVE:  If you want it, it's on the Internet.



LEO:  It's the best reason to buy a Mac [laughing].  All right.  What are we going to do today?



STEVE:  We're going to talk finally about the new, relatively new features of Tor.  And interestingly, Tor, we did a podcast on it years ago [SN-070] where TOR was considered an acronym for The Onion Router.



LEO:  Right.



STEVE:  And it's no longer officially an acronym, and it's not all uppercase.  I actually am still in the habit of doing that.  So my notes have it in uppercase, although elsewhere here I remembered that it should be uppercase "T," lowercase "o" and "r."  We've touched on this a few times recently because the topic has come up.  And because we've never talked about the recent changes in Tor, actually Tor had its 10th birthday last September.  So it's now 10 years old.



But the way it works today is completely different from the way it worked when we first described it.  So that's why I called the episode "Tor 2.0," and actually some of their documents do the same thing, because they changed the way the protocol functions.  And one of the really interesting new things that Tor offers is sort of the flipside of its traditional role.  Traditionally, users used the Tor system to hide themselves from Internet servers that are on the public Internet.  So that, for example, if some government or other agency was monitoring a service that was controversial, whether it be political or pornography or just whatever, if you just use a normal connection, they, as we all know, get your IP address.



Well, instead, the original Tor system, as does the new one, allows you to essentially bounce around through and among Tor nodes until finally you emerge from one having sufficiently confused the authorities that they have no idea who you are.  So the IP address of the service that sees you is that of a so-called "Tor exit node."  And we've talked about exit nodes before and how, in fact, we covered a story a few months ago where some guy was running a whole bunch of Tor exit nodes in his living room, and he got in trouble with the authorities because they saw his IP doing  controversial things when in fact he was just an exit node on the Tor network, and it was other people whose identities were hidden.



So this recently came up because we were talking about TorMail.org that offers - that is a user of the newer facility, which is sort of the other side of this, where service providers, like websites or instant messaging or email, can use the Tor system to hide themselves.  So Tor users...



LEO:  Or, more to the point, hide the person using the service.



STEVE:  No.  No, that's it.  Hide the service.



LEO:  Oh, hide the service.



STEVE:  Yeah.  See, Tor has always hidden the person using the service.  But the services were out on the public Internet.  What's now been added is a means for the services themselves to be hidden.  So it's possible to offer services that are accessible through Tor, but not accessible on the public Internet.  So that no one can see who is using these services, or that they even exist.  Or, if they do exist, there's no way to figure out where they actually are.  So it's, yeah, it's like the flipside of what Tor has traditionally done.  And we're going to - I'm going to explain this week how that's done because...



LEO:  This is good because I need reeducation.  And as you could tell from last week, I've misunderstood the capabilities of Tor.



STEVE:  Yeah.  So it's cool.  And of course we've got our regular Java update emergency happening.



LEO:  I can't believe this again.



STEVE:  Again.  We have not gone a week without one, Leo.  It's now three of these in the last month.  So I think for the last three weeks it's been there's a new emergency update patch of Java, and you need to deal with it.



LEO:  I think that really I've figured this strategy out now.  If they have a new one every week, pretty soon people figure it's all the same one.  Oh, we already heard about that one.  And it'll just - it'll say, well, there's just one problem that just keeps, you know, people keep reporting.  But this is not.  This is a new one.



STEVE:  No.  And in this case it doesn't even fix the problems they know about.  They still know about vulnerabilities that have not been fixed just with this latest one.  So the latest one patches both the older Java 6 to Update 43, and they had intended to stop moving Java 6 forward, but this is so bad they can't.  And Java 6 users are having this exploited against them.  So Oracle had no choice but to move it forward.  And so they fixed two vulnerabilities, one of which was being used to install the so-called "McRAT" - M-c-R-A-T.  And as our listeners know, RAT is now the acronym, sort of the generally accepted acronym for Remote Access Trojan.  So, you know, aka botnet node, essentially.



But get this, Leo.  They knew about this, which is why they were able to do it so quickly.  They knew about this weeks ago, many, and were deciding, well, since it isn't being publicly exploited yet, we're going to hold off and roll that into our planned April update, where they've got a whole bunch of other flaws that they're not doing anything with because no one apparently knows about them yet.



LEO:  No need to call attention to this.



STEVE:  Meanwhile, meanwhile our friend Adam Gowdiak, who has got to be Oracle's No. 1 nemesis, he's the security researcher who keeps looking at Java, and every time he looks at it he finds more things that are really bad and wrong.  They came back to him with what he called his "Issue No. 54" last week and said this is not a problem.



LEO:  Oh, good.  Oh, what a relief.



STEVE:  We don't agree with you that this is a vulnerability.



LEO:  Oh, well, if Oracle says it's not a vulnerability...



STEVE:  So he said, you know, but Adam knows what he's talking about.  I mean, he knows Java better than they do.  So he looked at the documentation, and the documentation for Java clearly stated that what they were doing now is not what the documentation says.  So his response to them was, well, you either need to change the documentation or change the code.  And, oh, by the way, since you made me go back and look at it, I found five more new problems.



[Laughter]



LEO:  You made me do it.



STEVE:  I'm not kidding.  He found five more problems because they said, no, 54 isn't a problem.  So he said, well, yes, it is, and here's five more.  And those are all present in the latest update.



LEO:  Now, is he publishing code, or explaining how it's done?  Or is he holding onto it?



STEVE:  No, he's being a hundred percent responsible.  He's sending them proof-of-concept code.



LEO:  But just to keep them honest he's letting us know he's doing it.



STEVE:  Yeah, exactly.  And to sort of keep the pressure on because we know.  I mean, their own behavior says, unless they have to update it, they won't.  Even when they know their problems.  So the consequence of this, I mean, remember that when we talk about exploits in the wild, those are successful installations of a trojan on people's systems.  So it's easy to view this in the abstract, where it's like, oh, yeah, that's happening to other people, so, eh.  But it is happening to other people, meaning that Oracle's decision not to patch this when they know about it is resulting in people's systems being occupied with trojan malware because they have Java on their system.



And I think it was Brian who wrote of this.  No, maybe it was Computerworld.  I think it was - because I did a bunch of just sort of backgrounding to see what people were saying.  They made the interesting point that Java was really never intended to be a consumer platform.  It was really more of a corporate platform for corporations to roll out multiplatform solutions, very much, for example, the way the Eclipse IDE that I've been using when I was writing code for the microcontroller, the little TI microcontroller that I was experimenting with, will be again here shortly as soon as I get GRC's new server squared away, it's all Java based.



So there's a useful, I would say important place for Java where software needs to be cross-platform.  It's a useful cross-platform solution.  The alternative is to write in cross-platform C or C++, but then you need to produce separate binaries that run on each OS, and there's really no good cross-platform solution.  Then you're maintaining essentially separate source forks for every platform.  Whereas Java, because it represents a unifying virtual machine where the platform differences are subsumed by it, you really can have a single Java blob that will run on all these systems.



The mistake people made is in making it a browser thing.  And that's why our advice is take it out of your browser.  Get rid of the Java plugin.  I mean, really, Oracle ought to just remove it.  It ought to be something you manually install if you have a known need for Java.  It ought not install itself.  So it ought to just, with the next update, it ought to remove it from the browser and then go back to being what it was supposed to be.  And then, for people whose companies have browser-based Java, then manually put it in.  Instead, they brag about it being in three billion devices.  Every time, every week that you get an update, it reminds you, oh, look, we're at three billion places.  Yes, and unwanted in most of them.  Lord.



LEO:  [Laughing] It really is hard to believe.  It's unbelievable.



STEVE:  It's just, hey, we're going through a rough patch in the industry, Leo.  I don't know how long...



LEO:  Well, I wonder if they want to kill, I mean, if Oracle just says let's...



STEVE:  This has got to be publicity that is damaging for them.



LEO:  It's not good for Oracle.



STEVE:  And it's all because it's browser based.  And Java on the desktop is fine.  Just not in the browser.  They can't get it right.



Apple did a nice thing, too.  They updated Safari a couple days ago to block all but the most recent version of Flash.  So people who have not been keeping current with Flash, because Safari's still - they're lagging a little bit behind at Apple, lagging a little bit behind in what everybody else has done, which is taking proactive responsibility for making sure that all these plugins are current.  I mean, I don't blame them.  We know how Apple feels about Flash in general.  So it's no longer being installed by default.  They'll run it on your desktop.  They will not run it on any of their iOS devices.



But Firefox and Chrome and now IE are proactively taking responsibility for keeping Flash current and checking to make sure that you're running the most recent version and warning you clearly if you're not.  Apple's doing probably what it ought to from its perspective, which is they are updating Safari to say, okay, this is not the most recent, go get it if you really want it.  And then they have made changes that we know of where they'll disable Flash if you're not using it actively.  It sort of goes to sleep, and then you need to manually reenable it.  So, I mean, I'm impressed with that.  That's the right thing...



LEO:  That's what they do with Java, as well, yeah.



STEVE:  Yeah, good. 



LEO:  Everybody's been talking about Evernote.  In fact, I'm just trying to log into my Evernote account because not only did they reset passwords, but they've downloaded new apps on all the platforms requiring - because this is interesting.  Well, you're going to get into this.  But this is an interesting point.  If you installed Evernote on, let's say your iPhone, your iPad, your Android phone, you already have a token, and that token's not invalidated.



STEVE:  Right.



LEO:  So tell us what happened.  Fill us in.  You're the guy.



STEVE:  Okay.  So the headline was 50 million passwords were reset.  It's not that 50 million escaped.  But what they posted on their blog I think is - it's a classic example of how to do this right.



LEO:  Yeah.  That was my supposition.  And I wanted to talk to you because they had the words that we've said we always want to see, "hashed" and "salted."



STEVE:  Yes.



LEO:  There was some speculation they were using MD5, but nobody's confirmed that.



STEVE:  Well, yes.  It is MD5.



LEO:  It is.



STEVE:  And that's not the strongest hash, but it's probably strong enough.  So what I think they did right, though, not only was their technology right, but their PR...



LEO:  Their response was right.



STEVE:  ...response was correct.  They called it a "service-wide" password reset, and they wrote:



"Evernote's Operations & Security team has discovered and blocked suspicious activity on the Evernote network that appears to have been a coordinated attempt to access secure areas of the Evernote service.  As a precaution, to protect your data, we have decided to implement a password reset.  Please read below for details and instructions.



"In our security investigation, we have found no evidence that any of the content you store in Evernote was accessed, changed, or lost.  We also have no evidence that any payment information for Evernote Premium or Evernote Business customers was accessed.  The investigation has shown, however, that the individual(s) responsible were able to gain access to Evernote user information, which includes usernames, email addresses associated with Evernote accounts, and encrypted passwords.  Even though this information was accessed, the passwords stored by Evernote are protected by one-way encryption.  In technical terms, they're hashed and salted.



"While our password encryption measures are robust, we are taking additional steps to ensure that your personal data remains secure.  This means that, in an abundance of caution, we are requiring all users to reset their Evernote account passwords.  Please create a new password by signing into your Evernote account.  After signing in, you'll be prompted to enter your new password.  Once you've reset your password on Evernote.com, you will need to enter this new password in other Evernote apps that you use.  We are also releasing updates," as you said, Leo, "to several of our apps to make the password change process easier, so please check for updates over the next several hours.



"As recent events with other large services have demonstrated, this type of activity is becoming more common.  We take our responsibility to keep your data safe very seriously, and we're constantly enhancing the security of our service infrastructure to protect Evernote and your content.  There are also several important steps that you can take to ensure that your data on any site, including Evernote, is secure:  First, avoid using simple passwords based on dictionary words.  Never use the same password on multiple sites or services.  Never click on 'reset password' requests in emails.  Instead, go directly to the service.



"Thank you for taking the time to read this.  We apologize for the annoyance of having to change your password; but, ultimately, we believe this simple step will result in a more secure Evernote experience.  If you have any questions, please do not hesitate to contact Evernote Support.  Signed, the Evernote team."



So that's textbook.  That's what you do.  You store your stuff, your passwords, in a good fashion.  The benefit of it being salted is that we don't know whether anyone knows what the salting value is.  We don't know that that escaped.  And it would not be easy to determine what that is.  So if someone did not know what the salt was - we also don't know if it's a per-account salt, and the salt is stored with the account information.  I mean, there's a lot we don't know.



But the idea is that, for a bad guy to make use of salted leaked password information, they would need to run MD5 hashing as fast as they could, putting in dictionary words with the salt if they know what it is, see what comes out, and then look for that value in the database that they have acquired and see if they can see a match.  If they do, then they know that account's password in order to log into the account.  Well, so we don't know whether they know what the salt is.  If it's not known, then they really don't have anything to go on.  I mean, they're really stopped.  If they do know what it is, and it's a per-account salt, then even the approach of looking it up in a big dictionary isn't going to be successful because they're not going to be able to run passwords through the hash and then see if anyone has it.  They would be limited to using the salt with a single account.



My point is that immediately retiring all of the passwords, which is what Evernote did, renders that escaped, that lost data useless.  Now, if emails have escaped, as I think they did, then that's a problem, if people consider their email address secret.  But at least it means that, instantly, every existing password was no longer valid, and users then in a distributed fashion took on the responsibility of changing their password.  And as you said, Leo, apps operate by authenticating once and then receiving an authentication token which - and we've seen this in other services, where other services have asked people to change their passwords, but it was, like, sort of a little strange that all of your applications into that service continue to function after that system-wide reset.  And what Evernote is doing is they're saying, okay, we're going to flush all the apps, also, and require people to update them.



LEO:  So this is similar, and the response is similar, to what happened to LastPass; right?  Twitter did the same thing, reset passwords.



STEVE:  Although Twitter is an example of not having...



LEO:  Hashed.



STEVE:  Well, not having your applications having to reauthenticate.



LEO:  Right, right, they didn't push those out.



STEVE:  Right.



LEO:  So Evernote really did everything they could do except, unfortunately, prevent the initial hack.



STEVE:  Yes.  And with any luck they, I mean, I guess I'm of a mind, yes, it's bad.  Yes, it's hard to do this right.  The larger your organization is, the bigger your systems and your network is, the more people have access, the more ways there are in.  I mean, it's just it is so difficult to do this kind of security correctly.  So I'm not of the mind that, if someone makes a mistake, you drop them and go somewhere else because I believe they can learn from these mistakes.  I mean, they're probably more secure now than they were before, so that's more reason to stay with the people that have learned this can actually happen.  And the fact that they were already using salted hashing says, okay, they understand the fundamentals.  Yes, it's not SHA-1; but MD5 is fine, if it's salted and it's done right.  And the evidence is it was all done right.



LEO:  Now, here's a question for you.  I'm thinking I store, right now, I store passports, driver's license, credit card numbers, Social Security numbers, everything.  My life is in Evernote.  Should I move this over to LastPass?  Would it be more secure?  It would be, wouldn't it, because Evernote stores this on their servers.



STEVE:  Well, LastPass does, too.  LastPass backs up all of the browser, the local browser blob, in...



LEO:  It's all automatically encrypted.



STEVE:  Yeah, now, see, we don't know, I know nothing about Evernote's...



LEO:  It's not encrypted.  Well, it's cleartext on my computer unless I explicitly encrypt it.  And that you have to do note by note.  And furthermore, I don't know how they encrypt.  So I'm thinking LastPass might be a better choice.



STEVE:  I trust them.  We know the technology for LastPass because Joe has laid it out for me and us, and it's been vetted, and, I mean, it's bulletproof.  I haven't looked to see whether Evernote has documented their technology.  If they haven't, I would not consider using them.  If they have, I just haven't looked.



LEO:  I'm think I'm going to move all of that stuff that would really be horrendous if it were stolen.  I think I'll move that.



STEVE:  You know, Leo, they must be doing something good.



LEO:  Evernote uses 64-bit, according to Fred Flintstone in our chatroom, he's linking to an Evernote page, 64-bit RC2.  So that's secure.



STEVE:  64-bit?  That's weird.



LEO:  That's a little low, isn't it.



STEVE:  Yeah, it is a little low.



LEO:  Should be bigger.



STEVE:  And RC2, as long as they do it right, it's secure.  But the big advantage is...



LEO:  I'm going to move it over to LastPass [laughing].  Is that right, 64-bit?  That doesn't sound right.  It should be much higher; right?



STEVE:  Yeah, that's not many bits.  So...



LEO:  What type of encryption does Evernote do?  Yeah, 64-bit.  "We derive a 64-bit RC2 key from your passphrase and use this to encrypt the text.  This is the longest symmetric key length permitted by U.S. Export."



STEVE:  Oh, my goodness.  That's why.



LEO:  That's why.



STEVE:  That's no longer true, though, Leo.



LEO:  I thought that that changed.



STEVE:  Yeah.  Used to be 40-bit.  In the first place, it was 40, not 64.  And that hasn't been true for years.



LEO:  "We do not receive any copy of the key or your passphrase or any escrow mechanism to recover your encrypted data.  If you forget your passphrase, we can't recover it."



STEVE:  That's all good.



LEO:  "User authentication is performed over SSL.  Data in user notes is also transferred via SSL."  But unless you explicitly encrypt it, it is not, it's in the clear after it gets to the servers.



STEVE:  Wow.  Wow.



LEO:  "Several of the company's founders come from a strong encryption background, founders of CoreStreet.  For Evernote's consumer product, the current encryption algorithms are chosen more for exportability under the Commerce Department rather than strength, since our software permits the encryption of arbitrary user data with no escrow.  We'd be interested in offering something stronger when we have the staffing to fight the lengthy export battle."



STEVE:  Wow.  I wonder if that's - I thought there were no export restrictions on crypto now.  I mean, everybody's doing 256-bit AES, which blows away 64-bit RC2.



LEO:  I would think.



STEVE:  Yeah.  I mean, you've even got AES supported in all the chips now.  So it's no longer in - there's no way that it's slow because you've got hardware-level support for it.



LEO:  And everything I put in a LastPass secure note is by default encrypted, and I've got two-factor authentication turned on, which Evernote will offer but doesn't currently offer.



STEVE:  Correct.  In fact, I was going to mention that they're - they've announced this week, as a consequence of last week's breach, that they are going to accelerate their plans to offer two-factor authentication.  We don't know anything more about what it would be, maybe phone text message loop or who knows.  Maybe hardware token, but that's a problem on smartphones.



LEO:  I'm inclined to move everything over to LastPass.  I just feel better about it.



STEVE:  I'm quite happy with LastPass. 



LEO:  So do you store online things like that?



STEVE:  Yeah.



LEO:  When you travel places, you're supposed to take with you a copy of your passport.  Rather than do that, I take a PDF on my phone, encrypted PDF on my phone in Evernote.  But I think I'm going to move it over to LastPass.



STEVE:  Yeah, I tell you, I'm actually still using Jungle Disk and really happy with it.  I've been very impressed.  I kind of went back and took a look at it, and it moves everything up to Amazon.  I mean, I know the architecture because Jungle Dave told us all about it back in the day.  And in fact Rackspace purchased Jungle Disk from Jungle Dave.



LEO:  All right.  Move on.  I just wanted some advice on that.  I think I am going to move everything, all that stuff into LastPass.



STEVE:  It's hard to see how LastPass could have a problem that, due to the architecture, they absolutely don't want the responsibility, and it's not possible to store anything in LastPass that isn't really strongly encrypted.



LEO:  Right.  I like that.



STEVE:  The other little bit of news I thought was odd, and this isn't like a problem in the wild.  But it could be soon.  A developer noted that only one browser in the industry had abided by published recommendations for limiting the amount of the local storage, which is a new feature of HTML5.  So traditionally the way a remote site could store data was with a cookie.  Not very convenient because it has to go back and forth with request headers and reply headers.  But cookie storage was limited to about 4K, sort of by agreed spec, which is plenty of data if you just want to store a gibberishy-looking token to represent who you are, that you're logged on, you're authenticated and so forth.  And you can store useful information in addition, and 4K is plenty of space.



But the developers of the web said, you know, as we move more towards an application-centric, browser-based platform, it might be useful and, lord, I mean, whose systems don't have gigabytes of data now, it might be useful to allow something called "local storage."  So there's a spec, the standard W3C specification under HTML5, for something called "web storage."  And this allows between 2.5 and 10MB per domain name.  For example, Chrome went low.  They set their limit at two.  Firefox set theirs at 5.  And IE sets theirs at 10.



But in the specification at W3.org under the web storage facility, under their category of disk space, they say "User agents" - meaning browsers - "should limit the total amount of space allowed for storage areas.  User agents should guard against sites storing data under the origin's other affiliated sites, for example, storing up to the limit in a1.example.com, a2.example.com, a3.example.com, et cetera, thus circumventing the main example.com storage limit.  User agents may prompt the user when quotas are reached, allowing the user to grant a site more space.  This enables sites to store many user-created documents on the user's computer, for instance.  User agents should allow users to see how much space each domain is using.  A mostly arbitrary limit of 5MB per origin is recommended.  Implementation feedback is welcomed and will be used to update this suggestion in the future."



Now, only Firefox heeded that warning.  And a developer created a proof-of-concept which does exactly what the W3C org said could be done.  And under Chrome 25, Safari 6, Opera 12, and IE 10, it is possible to fill up the user's hard drive at the rate of 1GB of data stored every 16 seconds.  And this was done on an SSD-based MacBook Pro.  So, to be more clear, if this isn't fixed soon, you could go to a malicious website that, for no other reason than it wanted to, it could completely fill your hard drive with garbage, essentially, at the rate of a gigabyte of garbage every 16 seconds.



LEO:  That's not good.



STEVE:  That's not good.



LEO:  Would it fill occupied space or just slack space?



STEVE:  Oh, just slack space.



LEO:  Oh, okay.  It's not erasing anything.



STEVE:  Yeah.  So it's, yeah, it's not erasing anything.  But most people, hopefully, if they've got their terabyte drives, they've got room, and this thing would just take it all up.  So anyway, this was - I got a lot of tweets about this.  That's the story about that.  I'm sure - oh, I should mention also that there is a - there's a little bit of a gotcha because in some cases subdomains are valid.  For example, GitHub uses subdomains of GitHub.com to store legitimate individual user data.  And Appshot does the same thing, and many others.  So the problem is that it's not clear how this works.  If you absolutely limited storage for the second-level domain, like "example" of example.com, then all of its subdomains would have to share that storage, when in fact it might not be abusive.  It might be legitimate.  Yet there's no mechanism, I mean, we really have a problem here because, unless the whole browser had a limit, but then you'd have a limit on how many sites could do this.



So unfortunately there's a bit of a conundrum here that we haven't come up with a solution for, other than - and, see, they suggest involving the user.  Oh, my god.  That's not going to work.  That's never going to turn out well, where dialogue boxes are popping up saying, you know, this site would like to exceed its limits on the amount of storage it can use on your computer.  People are going to go, what?  I mean, you'd think that was malware.  I mean, our listeners would, anyway, and they would be right to be suspicious of that.



So it's not easy.  It's not clear what kind of a solution we have.  I mean, unfortunately, I think the idea of having websites able to arbitrarily store multiple megabytes of data on people's computers is just probably fundamentally bad.  I'm not sure that I think that's a good idea at all.  So maybe that's why we're in trouble is this was never a good idea.



And there was a little bit of interesting news on the Do Not Track header front, which I thought was interesting.  This is proceeding exactly as I predicted it would.  SANS reported a story that I think they picked up from Computerworld, if I remember, saying that groups representing the interests of Internet companies are speaking out against proposed legislation - meaning, okay, legislation is getting proposed, which was inevitable - that would require all online companies to honor Do Not Track requests from consumers.  One of the bill's sponsors, Senator Jay Rockefeller, said that companies are not currently honoring those requests; whereas Lou Mastria, managing director of the Digital Advertising Alliance, which you can imagine is on the other side of this argument, disagrees, saying that the bill is unnecessary because self-regulation is working.



LEO:  That's always good.



STEVE:  Uh-huh.



LEO:  Hey, we're self-regulating, you know?



STEVE:  Don't make us do it.  We'll do it ourselves.  Ah, yeah.  Good luck with that.  Technology-oriented think-tank The Information Technology and Innovation Foundation, which of course tells you nothing about what interests they represent, noted that Do Not Track legislation could be ultimately detrimental to consumers - okay, now we know whose side they're on - because a significant amount of web content is supported by targeted Internet advertising.  And see, that's, to me, that's the big question, whether that's really true or not.  It's not clear to me that profiling ever did work.  Yes, people like to have it, but it's not clear that they need it.



The proposed legislation would allow the U.S. Federal Trade Commission, our FTC, to enforce action against companies that do not comply with consumer Do Not Track requests and would restrict online companies to collect only the data necessary to deliver their content or services.  So, and then that puts the Apache web server in an interesting position, doesn't it, because it's...



LEO:  Now, what is the current status of that?  Because I got a number of, well, one, tweet from a guy who said, "You guys are idiots.  You don't understand at all."



STEVE:  Yeah, I know.  I saw that tweet, Leo.  He sent it to both of us.



LEO:  I think he doesn't understand.  But...



STEVE:  He's a UNIX weenie, and I understand that such people have strong feelings that aren't in the real world.



LEO:  Well, he was defend- I guess he wasn't disagreeing with us.  He was implying that we kind of misunderstood the intent, which we didn't.



STEVE:  No, well, he was arguing that, because IE 10 breaks the rules, Apache has the right, the server has the right to prevent that from being seen by the application on the server.  And that is ridiculous.  The application could certainly make that decision.  The server, I mean, it's pure political pique on some Apache developer's part, to preemptively remove information that the user's browser is sending to the application behind the server.  It's ridiculous.



LEO:  That makes sense.



STEVE:  Yeah.  Sorry about that.  I just feel strongly.



LEO:  Actually.



STEVE:  Let's see how this turns out.



LEO:  Yeah, I mean, you know me.  I kind of defend the need for...



STEVE:  The need.



LEO:  The need because this is sites that are giving you free services, whether you understand it or not, are making the...



STEVE:  They will be just fine, Leo.



LEO:  And that's, I think, true because I think tracking doesn't in fact make the ads any better.  So...



STEVE:  Correct.  Correct.



LEO:  But I think that - I don't know if I want to see governmental regulations against companies.  You know, the next, I mean, maybe they'll say, oh, you shouldn't have ads at all.



STEVE:  No.  They're not going to say that.  It's like, you know, they're not going to take away your guns if they say that we'd rather you didn't have submachine guns in your hip pocket.



LEO:  I guess the presumption is that tracking is something that's done without the user's knowledge.  And I think that that's probably an appropriate thing to protect.



STEVE:  People who used to be in the advertising industry have said, if we knew what was really being done, we'd all be screaming with our hair on fire.  So in fact there was some guy...



LEO:  I don't know if that's true, but...



STEVE:  I know.  We just need to have him talk to you, Leo.  I'll find him.



LEO:  I don't think that's true.  That's a popular thing to say, but I think there's - I think just as there are - there's paranoia on both sides, let's put it that way.  But, you know, there's a lot of wonderful free web services that are ad supported, like this one, like this show.  Now, we don't use tracking cookies.  We don't need to.  But there are wonderful, you know, Facebook and Google and so forth, that people are getting for free, and it certainly should be their understanding that there's got to be some sort of payment for that.



STEVE:  Leo, I have no problem with ads.  I just have a problem with ads that surreptitiously link people across websites.  That's the problem.  And because it is being done without their knowledge and consent.  And I think if we broke that linkage, nothing would happen.



LEO:  Well, I think that that's true.  But I don't think that that's enough reason to say let's turn it off.  I mean, I agree with you that tracking doesn't seem to really have any value at all.  The other thing...



STEVE:  But that's all we're turning off.  We're just turning off tracking.



LEO:  But that's not for the government to decide whether it has value to the company that wants to use it.  I think what you probably more properly could say is you've got to explain what's happening on a page to the viewer or the user so that they understand.



STEVE:  Well, about if - how about the government saying, if a user asserts they do not wish to be tracked...



LEO:  Then don't track them.  I think that's fine.



STEVE:  Okay.  And that's really all we're saying.



LEO:  I think that's fine.  I think that's fine.  And by the way, as a result of all of this paranoia, justified or not, we're putting a cookie policy on our page because we do use tracking cookies in some ways.  But, I mean, we use them, I think, in a benign way, for instance Google Analytics.  But people are very paranoid about it all.  So...



STEVE:  Well, and what we need to see is you need to go to a site that says:  Hi there.  We notice that your browser has a Do Not Track header asking that no tracking be done.  This site is...



LEO:  But, see, this is a little unfair.  So let's say I say I don't want any tracking.  And I don't think it's for the government to decide whether Facebook needs tracking or not.  But let's say I don't want - the government says I should be able to say I don't want to be tracked, and I want to use Facebook for free.



STEVE:  Leo, Leo, Leo, it's not Facebook that's tracking.  It's their advertisers.  Facebook has nothing to do with this.  Facebook can't stop it.  Facebook is out of the...



LEO:  But understand they charge a certain amount to their advertisers, and the presumption is that the advertisers are getting their value.  Let's say - I don't think it's for the government or you or me to say whether that value implies tracking or not.  I think what this really is, is like Adblock.  It's like enforcing the right to ad-block.  It's saying you should be able to use Facebook for free, whether they like it or not.  And I don't think that's right.  So I guess what will start happening, and I think this almost certainly will be what happens, is that you will be offered the right not to - to not have tracking.  But they will also say, but then you can't use our service.



STEVE:  Yeah.  And that's fine.  And that was what I was about to say, or that's what I was saying, was that you'll go to a site, and it'll say:  Hi there.  You have Do Not Track on, yet this site depends upon the additional revenue that's generated by tracking you in order to function.  So go into your browser and turn that off right now, and then we'll happily allow you in.  And then...



LEO:  And that's what you're going to see, which is a fragmenting of the web.  But that's what you're going to see.



STEVE:  Yeah.  And there will be people who'll go, oh, I'd rather go somewhere else.  And there will be people who go, oh, I didn't realize.  I'll turn that off for you, no problem.  Yeah, I mean, I think that's fine.



LEO:  I think it's probably all right.



STEVE:  So I had a tweet from someone asking me something I didn't know, which is what's the URL for signing up for Audible and giving credit to Security Now!.



LEO:  AudiblePodcast.com/securitynow.



STEVE:  Securitynow, just all one word.



LEO:  Yeah, but they'll be tracking you as a result.



STEVE:  [Laughing]



LEO:  That's called "tracking you"; right?  But that's it.  AudiblePodcast - in fact, while we're doing it I'll do the Audible ad.  AudiblePodcast.com/securitynow.  It's a very benign sort of tracking.  It's kind of an opt-in tracking because obviously, if you go to that URL, you're sending a signal intentionally to Audible, hey, I saw this on Security Now!.  But I guess that's a little different.



STEVE:  It's completely different.  That's not tracking at all.  Tracking is linking people across websites.  That's what everyone objects to.  And aggregating a database about people's identities, anonymous or not, and often not, in order to build a profile of them.  And people are saying, eh, we'd rather not have that.



LEO:  Right.  Understandable.



STEVE:  Yeah.



LEO:  And I don't think that asking people to go to our URL is in any way an invasion of their privacy.  In fact, what we're saying is let them know you heard about it on Security Now!.



STEVE:  Yeah.



LEO:  Yeah.  I think that's fine.



STEVE:  I heard from, actually just this morning, Brian Hall, who is a frequent tweeter to me.  He's "bhall7x."  He just sent back, he said, "WizMouse is awesome.  Been using it for about a year on Windows 7 and love it."  And our listeners will remember that KatMouse is what I had previously recommended, but another listener in our Q&A, I think last week, said, hey, WizMouse - oh, yeah, it was our bonus question No. 11 - said WizMouse solves the problem of being able to use your mouse wheel over whatever window you're currently hovering over without needing to click and activate it.  And it takes away the third button, the middle mouse wheel button functionality, which he always was turning off.  So if you use that, stay with KatMouse.  If you don't, apparently WizMouse is better.  I still haven't gotten around to using it or to looking at it.  But I just wanted to pass that on.  And also, despite your pooh-poohing my music choice, Leo...



LEO:  [Grunting]



STEVE:  Many tweets have come back who checked out Chuck Wild's Liquid Mind series of 10 CDs.  And one good friend, who's a coder, commented that it's the only music he has ever been able to code to.  So, yes, it does - I know you think of it as putting you into a coma rather than into a state of relaxation, but I didn't want listeners to be discouraged by your opinion, since others have liked it.



LEO:  Oh, I didn't say it was that - did I really say it was that bad?



STEVE:  Oh, yeah, yeah.  Yeah, you did.  You started to snore.



LEO:  [Laughing]



STEVE:  And I got a nice note dated, yeah, March 4th, just Monday, from a Chartier, I'm sorry, Gabriel Chartier, because he reversed his last name and first name in the From line, titled "SpinRite Testimonial."  He said, "Hi, Steve.  I'm a long-time Security Now! fanboy and SpinRite user.  In Episode 386 you mentioned a testimonial about a user accessing raw data with SpinRite.  I have had excellent results with a USB SATA IDE dock that I have mapped over a USB line to a DOS VM in VirtualBox.  I lock a drive and start the virtual machine, and I am off and rolling, all along giving me full access to my host system while SpinRite chugs away in the background on the external drive.



"Testimonial," he says.  "I saved a friend's data.  Larry, the owner of a golf shop, had all of his tax info on his laptop."  Yeah, it's that time of year, folks.  "After letting his laptop sit for a little while," he says, "(six months), when they tried to boot up, Windows gave them the unmountable boot volume error."  Yeah, we hate those.  "I knew right away what to do.  I ran SpinRite for about 30 minutes, and it completed the Level 4 scan on the hard disk drive.  Error repaired.  I booted the system, ran a disk defrag analysis using the portable JkDefrag from PortableApps.com.  95 percent fragmented.  So I ran a defrag and gave the system back.  They are now able to do their taxes.  They are very thankful to me and you, the creator of this great tool. Regards, Gabriel Chartier in Loveland, Colorado.



LEO:  That's really nice.



STEVE:  So Gabriel, thanks for sharing that.



LEO:  Excellent.



STEVE:  So, are you ready?



LEO:  I'm ready for the Tor.



STEVE:  [Chuckling] Okay.



LEO:  Tor 2.0.



STEVE:  Yeah.  So everything changed since we talked about it last.  The way it used to work, real quick reminder, is it used to be purely a user-anonymizing service, allowing people who wanted to access Internet servers or services out on the public Internet to do so without their IP and thus location, ISP, and potentially their identity being known.  The way that was done was by hopping among a network of Tor nodes.  Each node is sort of a Tor server, and they are all interconnected.  And the idea is that we've all seen the sci-fi movies where - actually not even science fiction anymore - where bad guys bounce around through multiple servers out on the Internet and then finally do whatever they're going to do.  Often on TV they're making a phone call bouncing off of some satellites and things, which makes it difficult to figure out that they're actually next door.



So what was so cool about this, the word "TOR" was an acronym originally, stands for The Onion Router.  And it actually was a follow-on to an onion router network, which was the first thing created.  And, oddly, there's sort of some strange U.S. government entanglement here.  I mean, even now it's under the auspices of the Naval Research Lab.  And it was originally created out of ARPA and DARPA.



LEO:  Oh, now I'm suspicious.



STEVE:  Well, no, it's because - I think it's because we, too, need anonymity.  I mean, like, wouldn't the NSA like to be able to do things and not have it traceable back to them?  And so what we have is a - I mean, and Leo, it's all open source.  I mean, everyone knows exactly what these Tor nodes are running.  It's all done academically.  So there's no way to be suspicious of this.  It's that there are - it's not only people, individual users who want anonymity.  It's, you know, the EFF has been a supporter of this, and the Free Software Foundation gave them an award a couple years ago for advancing the free social interests of technology on the Internet, to allow people in repressive governments to be able to have free speech.  So there's a lot of good here.  But to me it's interesting that it was, and still is, there's some governmental support behind this thing being developed, which I think is interesting.



LEO:  General Petraeus should have used it.



STEVE:  The way it originally worked is a client would pick at random a few Tor nodes, and each Tor node advertised or published its public key.  So the client - there is an onion router node, but then there's also sort of a - there's software that you run in your machine which is your interface to the Tor network.  So a couple of nodes out of the cloud of available Tor onion routers would be chosen, and their public keys would be gathered.



The user then takes the payload that they want to put out anonymously on the Internet.  And by that I mean a request for a page on a website somewhere, or a posting to a socially controversially site, or who knows what, whatever it is they want to hide the origin as being themselves.  They encrypt that with the last node that they're going to visit, the so-called "exit node" where their data will finally leave the Internet.  Then they put on the out - so they encrypt that payload.  And sort of think of it as like sticking it into an envelope, or it's called an "onion router" because of layers of an onion.  So you could think of it like maybe being a sphere, and you wrap it with encryption so that no one can get in.



Then on the outside of that you put the address of that node, that last node.  Then you go to the node that will precede that one, the node that will be previous to that as you're sending stuff out.  And again, you know what its public key is, so you use its public key to encrypt that sphere.  And then on the outside of that you put its address.  And then you choose the third one, maybe it's the first one you're going to send something to, and you encrypt what you have so far with its public key.



Now you've got this multilayered blob, and you send it to the first node.  So first of all, that connection out to some random Tor node somewhere is encrypted under its public key, and only it has the matching private key.  So no force on Earth that we're aware of is able to access that.  But even if someone did, it's still got, remember, two more layers of encryption in these nested layers of onion in order to actually get down to the payload.



[Barely audible "yabba-dabba do"]



LEO:  You're selling a lot of SpinRite today.



STEVE:  [Laughing] So what actually happens is that first node, since the outer shell was encrypted with its public key, the first node to receive it is able to use its private key to essentially unwrap that layer, to decrypt that layer.  Then what it finds is, remember, on the outside is the address of the next node.  It can't decrypt the contents inside because only the next node has that.  But on the outside is the address.  So it sends this blob, which is still opaque to it, on to the second node.  The second node receives it, and now the outer layer was encrypted with its public key.  So it uses its matching private key to decrypt that layer, which exposes the address of the third node.  And underneath that is the remaining encryption, under that third node's public key.  So it has no access to that, either.



And notice that that second node, the one in the middle?  It only knows that it got a blob from another onion router, but it has no knowledge of where that came from.  That is, it doesn't know who sent it to that onion router.  So we're going to see the number three a lot because that sort of seems to be, like, the sufficient number of nodes involved to create anonymity no matter which way you come at it and how you look at it because that second guy receives it from the first one, doesn't know who the first one received it from, and all it knows is to send it on to the third one.  And then the third one, similarly, only knows that it received it from the second one, has no idea whether it came from an individual or from another onion router because all trace of the earlier hops have been removed.



Those previous shells, if we look at it like a spherical onion, those shells have been decrypted and stripped off and removed, removing all trace of its history.  And at no point along the way has anyone been able to see what this thing - have any of the intermediary nodes, onion router nodes, been able to see what this thing contains.  Finally, it gets to the third hop, which was, remember, the first encryption done of the actual payload.  So that final onion router decrypts it, as only it's able to because only it has its private key that matches the public key that it advertises.  So it decrypts it.  And now here's a standard Internet packet which it simply drops out on the Internet.  That is the so-called exit node from the Tor network, and the packet goes off, as packets do, bouncing around regular routers toward its destination.  So that's the Tor system as it was.



Now, there was a redesign to address some theoretical problems with this.  There were various people who said, well, you know, even if you couldn't encrypt the data, if you stored the data, then if at any future time it was ever possible to determine the private key from the past of an onion router, and if you happened to get the private keys associated with the paths that that blob took, then you could decrypt it and obtain all the information.  So what the system used to lack is something known as "perfect forward secrecy."  And we've talked about what perfect forward secrecy is.  It is this property that you should not be able to learn something in the future which allows you to go back into the past and obtain knowledge that the past wouldn't want you to have.  So the system was reengineered, and many other capabilities, including what we're about to discuss here, hidden services, occurred.  So here's how this was reengineered.



Instead of the user in advance choosing the route that the payload is going to take and building up an onion and then just dropping it onto the first onion router and off it goes, the capabilities in the onion routers were increased.  Notice that, with what I just described, the original system, there was no state being maintained.  There was no notion of connections or persistent state.  That is, the onion router would just sort of sit there.  It didn't have to have any history at all.  And if a blob came in, it would see whether it was able to decrypt it using its private key; and, if so, it would then send the blob on to the next jump in the router, or out onto the Internet, if it happened to be the last one to decrypt the innermost shell.  No knowledge was necessary.



This changed with the rewrite of Tor this move to 2.0.  Now what happens is that the user establishes a session with the first onion router node.  It sends it - all the onion routers still broadcast a public key.  But unlike the original system, where that public key was used for encryption, and that was the weakness, instead we now use session keys that are established with the so-called Diffie-Hellman handshake.  And we're talked about the way that works.  That's the exponentiation approach where anyone can observe the traffic going in both directions, but even the person observing it is unable to determine what the mutually agreed upon key is from looking at all of the dialogue back and forth.  And this, for example, is an option now in SSL and TLS protocols and very well established, very secure, very quick and lightweight, too.



So the client sends a - it gets the first onion router's public key, and it sends the first half of this Diffie-Hellman handshake encrypted under that first router's public key.  So the first router receives that.  It decrypts it, and only it's able to, using its private key.  And then it has the first half of this two-way handshake.  It finishes the handshake, sends back the second half of the handshake to the client, and hashes the resulting session key and signs it with it - okay, I'm sorry, I went a little fast.  So when it finishes the handshake, now it has the session key.



Once the client receives that second half of the handshake, the client also will have the matching session key for the encryption.  So to prove that the onion router also has it, the onion router hashes that key and then signs it with its private key, which only it has, and sends that packet back.  So the client now receives that, which it believes came from the onion router that it's trying to establish a connection to.  It decrypts that using that router's public key, which will only work if it was signed with the router's private key.  That returns - that finishes the handshake, allows it to establish the secret pseudorandom session key that they will be using to communicate henceforth, and it's able to verify that they both had the same session key by decrypting the hash of the key.



So now we've got - we've securely and with authentication of the onion router established a connection, sort of the first link.  Now the client chooses another onion router on the network, but does not contact it directly.  Instead it uses the link that it's established to the first onion router to do exactly the same thing that it just did with the first one, essentially sort of virtually moving itself to the other side of that first link.  So now the second link is similarly established between the first onion router and the second onion router, using exactly the same protocol.  And then it moves itself out to the second onion router to establish a third link, and so on.  Typically, as I said before, three links.



So that's the approach used.  It's still the case that the data is bouncing from one onion router to the next.  And as a consequence of moving up this chain of links, a series of session keys has been created for encrypting each link.  And that same session key is used for creating an onion-wrapped packet, which is then sent down the link.  And as it bounces, each session key is used to decrypt the successive layers.  And since the session keys are ephemeral, as the term is, they're only used briefly for that connection, at no point in the future would compromise of a router's private key give anybody any information about how to decrypt data that was stored, moving through the onion router network.



So that's the difference.  So it's subtle, but it's significant.  And essentially what's been done is a more sophisticated protocol has been created.  So what we have now is essentially what we had before, that is, the ability for a user to hide themselves on the network.  What we want is something new, which is the ability of services like websites, IRC chat servers, meeting areas, whatever, Internet services that are traditionally always public because the only way to reach them is over the public Internet with an IP address.  The gurus of Tor said, you know, we could hide these.  We could use the Tor system to allow people to publish public services, meaning available to anyone who uses Tor, so that the services were available from within the Tor network and not publicly.  And the only way to get to them is through the Tor network, meaning that they do not have public IP addresses and that no one using them can gain any knowledge of where they are, where they physically exist in the world, where they physically exist on the Internet.  So it's sort of the next-generation evolution of Tor.



The way it works is this.  Somebody who wants to offer a service of any sort, any kind of Internet service that anonymous users can access and that itself wants to remain anonymous, chooses three onion router nodes at random, just three.  And these are called "introduction points."  So we have introduction points are, for a given service, are three routers, three onion routers on the network.  The service creates a long-term public key pair so that it can have a public key which is used within the network to identify its service.  So this public key represents this service.  The service establishes circuits, static circuits that continue to exist with each of these three introduction points.  And we're using three for redundancy, so that if one was off the 'Net for a while, or disappeared, it would always be possible to pick a third one.  But in the meantime, you'd like to have a way to get to the service.  So three gives us redundancy.



So it establishes a circuit to these introduction points using the new protocol I just explained, successive links that protect its identity.  Notice that its identity is being protected now as a service in the same way that the user's identity was being protected as a client.  So it establishes, over three hops, links to introduction points.  And it says, here is my public key for anybody who wants to access me.  Let's keep this circuit open.  And if anyone wants to access me, they will reference this public key.



Then the service, in a Tor directory, publishes its public key and the identity of the three introduction points it has chosen.  It signs that and encrypts it with its public key to give it authentication.  And a 16-character token is statically created from that information.  And that's what's known to the public.  So the address of the service is this random 16-character token dot onion.  That's like the domain name with the Tor system, 16 characters that are derived from its directory entry dot onion, in the same way that we have dot org and dot net and dot com.



So now, out of band, not using the Tor system at all, some user has been notified or heard that there's a service hiding within the Tor network which offers something that the user wants.  So the client now, it uses its Tor interface to say, I want to connect to this service.  And so it uses that funky 16-character token dot onion in order to initiate the connection.  What it does is it goes to the Tor directory and uses that to look up the information it needs.  It gets a one-time cookie, a so-called "nonce," n-o-n-c-e, nonce, which will represent itself just for the purpose of authentication.



Now it chooses at random a node in the Tor network which we call the "rendezvous point."  And so it opens a circuit, three hops, out to a node, which is the so-called rendezvous point.  And so it connects to it, and it says, hey, I would like to rendezvous with this service.  Here's the service's descriptor.  Please set that up for me.  So, I'm sorry, it establishes the rendezvous point as the place where the service is going to connect.  So three hops out to the rendezvous point.  Then it talks to, it connects to the introduction point, which are sort of like the three listening outposts for the service, and it says to the introduction point:  Hi there.  I'm waiting at the rendezvous point.  Since you're representing the service, you're one of the three rendezvous points the service has chosen.  Please notify the service of my interest in connecting to it, and I'll be over at the rendezvous point.



So the introduction point, one of those three introduction points that has that static circuit up and connected to the service, it sends this information to the service along with that cookie, remember, that it's been given by the client.  The service then is able to decide if it wishes to accept the connection.  So this provides insulation against any kind of denial of service attack or bandwidth flooding attack and so forth.  Nothing is able to get to it directly.  It essentially has to mutually agree with the client that it wants to offer the service.



So assuming that it does, it then establishes a multi-hop circuit to the rendezvous point, so it'll have its three links anonymizing it again to the rendezvous.  It gets there, hands the rendezvous its agreement to connect, along with the cookie, the pseudorandom cookie that the client gave.  The rendezvous point forwards that to the client because the client has a connection to it that was established first.  The client receives back the cookie which it initially gave.  And there's, you know, wrappers of encryption on all of this.  And that cookie was signed then, before it was sent back, signed by the advertised service's private key so that only its matching advertised public key is able to decrypt it, thus authenticating the fact that it has received the cookie back from the real service.  Now, the client and the service both have mutually anonymizing multi-hop connections to the rendezvous router, and it passes traffic back and forth between them anonymously.  And that's how the new system works.



LEO:  Well, that was simple enough.  I don't know why anybody would be at all confused by that.



STEVE:  [Laughing] So backing off from this a little bit, essentially what this means - oh, and I should say that the standard Tor client software, the software that people get from Tor to load on their computer to access the Tor network, it is the hidden service software.  That is, it's the same package.  So anybody who has a computer that wanted to publish information anonymously on the Internet through Tor is able to use the same - it's not like you have to go get something secret or special or something somewhere.  Everybody has it.  So anyone can be a publisher and can essentially establish introduction points, publish their identity on the directory, and then arrange through some out-of-band means, on a mailing list or who knows where, or put it on some other website, here's a service that we're offering at this funky address.  And then people are able to connect to it.  They're anonymous, and it's anonymous, and everything is encrypted from end to end.  And it's done in a way that thwarts everyone's best effort to attack this.



LEO:  So this sounds like a big improvement.



STEVE:  It's a huge improvement.  Yes.  You take sort of the original concept and implement it and then think about it.



LEO:  Address the issues that we've mentioned many times with it.



STEVE:  Yes.  Yes.



LEO:  Yeah.  Do you feel this addresses those issues, the endpoint issues, things like that?



STEVE:  Yeah, the only thing that they're still - the only weakness that we know of is that it still wants to be fast.  That is, it wants to send...



LEO:  Good luck.



STEVE:  Well, yes.  It's certainly, you know...



LEO:  Kind of the nature of this, because of the layers, that it's going to be a little slower than direct.



STEVE:  Well, but here's the part, is that, if it's not heavily used, then people monitoring traffic going in and out can associate, sort of statistically associate the events of traffic entering and exiting this large cloud of onion routers.  Even though it's bouncing around for a while, I mean, still, if it's heavily used, then it becomes much less easy to disambiguate entry and exit events.



Now, I mean, this is well-known.  So, for example, all it would have to do is introduce arbitrary delays in the forwarding of traffic from one onion router to the next.  And then it would completely break the ability to use the temporal connectivity of traffic entering and exiting the cloud to associate those events.  On the other hand, it would really make it slow.  So they've said, no, that's not what we're going to do.  The bigger the network is, the more Tor nodes there are, the more busy it becomes over time, they're recognizing that while it's in its infancy with a few nodes and not much traffic, it's easier to associate incoming and outgoing events, even though the incoming events are encrypted and the outgoing events are encrypted if they're going out to a hidden service.  But still the...



LEO:  They're likely to be related statistically if there's not a lot of traffic.



STEVE:  Yes.  The relationship of them statistically is the concern.  They've said, look, that's not the problem we're solving.  We're going to make, again, the more nodes there are, the more popular the network is, the more use it sees, the less feasible - oh, and notice, too, in order to make the statistical process work, you really need to monitor all the nodes.  Well, they're also geographically diverse.  They're all over the globe now.  So it makes it very difficult for any single entity to have network-level access to the entire Tor node network.  I mean, many of them are deliberately in obscure locations.



So anyway, my sense is, if I were to hook up to Tor and do something through it, there's kind of a coolness factor.  It's like, oh, wow, I'm really - no one can find me.  It's like, well, okay, that's never a problem that I've had.



LEO:  [Laughing] People can find you.



STEVE:  Yeah, they know where I am.  But there's a coolness, there's sort of a coolness factor to it.



LEO:  And Tor Mail is probably the best example of a hidden service.  I think we talked about this a couple of weeks ago.



STEVE:  The perfect, perfect example.



LEO:  And that's one where speed is not an issue.



STEVE:  Right.



LEO:  And it's a hidden service.  So, in fact, if you go to the TorMail.org page, it says, "This ... is just an informational page.  None of Tor Mail's ... systems are hosted [here] or on any server ... you can find the IP address.  Seizing or shutting down this website will have no effect on Tor Mail's services."



STEVE:  Very cool.



LEO:  Yeah.  I mean, because, you know, go ahead, find us.



STEVE:  That's perfect.



LEO:  Yeah.  That's a really - I think that's a very good example of using a hidden service in Tor.



STEVE:  Yeah.  And, you know, one of the takeaways from this is, for everyone who just completely glazed over and wished they were listening to Liquid Mind for the last 15 minutes rather than me, or their mind has been liquefied...



LEO:  I have a liquid mind.



STEVE:  Jellified.  Look at what it takes to create anonymity.  That's how non-anonymous the Internet is.  They didn't do this just because they were bored one afternoon.  I mean, it takes that much in order to truly anonymize the Internet.  So anyone who's thinking, oh, no one knows who I am, it's like, only because they don't care.  But anyone who cared would absolutely know who you were.  And so I think this is an interesting lesson is that this is what it takes, all of that rigmarole, in order to protect, to truly protect identities on the Internet.  And even then, if the data that you send gives away who you are, well, then you're not anonymous anymore.



LEO:  [Laughing] And you were worried about tracking cookies.



STEVE:  [Laughing]



LEO:  Sorry, I had to throw that in.  Steve Gibson is the guy at GRC.com, the Gibson Research Corporation.  That's how you can find him on the Internet.  You can also follow him on the Twitter, @SGgrc.  Now, if you go there, you'll find a lot of stuff, free stuff, like his great ShieldsUP! service.  But don't forget his bread and butter.  The yabba-dabba dos you hear in the background all come from one and only one thing, and that's SpinRite, the world's best hard drive and maintenance utility.  You've got to have it if you have a hard drive.  So pick up a copy.



STEVE:  And for many of our really great listeners, Leo, who have just really been supporting me and my efforts and my ability to do this and offer all this stuff for free...



LEO:  Oh, we're so pleased, yeah.



STEVE:  ...it comes all from SpinRite.



LEO:  Steve does, on his own, make 16Kb versions available of the show, audio, so that's a very small file.  He also does transcripts, the smallest file of all, human-typed, actual, legible transcripts of each and every show.  Both of those...



STEVE:  Oh, yeah, Elaine researches them.  Every single thing I mention, she goes and makes sure that it's spelled right and...



LEO:  I'll give you an example.  I almost can guarantee you, if you're looking at the transcript right now, Tor is spelled capital "T," lowercase "o-r" because she figured it out; right?



STEVE:  Yup.



LEO:  That's how good she is.  Elaine, good job.  And if it's not, well, she's going out and fixing it right now with global search and replace [laughing].



STEVE:  No, she listens to this, too.



LEO:  Well, of course.  She has to.  She's typing it.



STEVE:  That's right.



LEO:  Yeah.  And by the way, you can watch the show live.  We do it live every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern time.  I almost had to punt today because my son Henry's giving his senior, was giving his senior speech right about now.  I was just either going to leave or have Iyaz do the show.  But it turns - he moved it to Monday, thank goodness.  So I can go see his senior speech.



STEVE:  Oh, how cool.  And so - and he's really come together, hasn't he.



LEO:  Yeah, he has.



STEVE:  Yay.



LEO:  He's waiting - he got into Arizona State.  He's waiting to hear from Cal State Chico and Colorado University, CU Boulder.



STEVE:  You don't want him to go to Chico.



LEO:  They're both party schools.



STEVE:  Yeah.



LEO:  I said, "Henry, is it a coincidence that you picked the two biggest party schools in the United States?"  He said, "They are?"  I said, "Yes, they are."  But you know what, any college in the U.S. is a party school on a Saturday night, so I don't know if it makes any difference.



STEVE:  Yeah, true.



LEO:  I mean, if you want to party, you'll find a party.  But ASU's a great school.  That's where Lawrence Krauss teaches.  And he's interested in music, so he's applied to schools that have good music programs.



STEVE:  Oh, cool.



LEO:  Any event, I got a little sidetracked.  Watch the show, 11:00 a.m. Pacific, 2:00 p.m. Eastern time.  That would be 1900 UTC.  And it's great to have you live with the people in the chatroom.  We all chat together as it's going on.  But if you can't watch live, as I mentioned, on-demand versions available at Steve's site, and we have a higher-quality audio as well as video at TWiT.tv/sn, Security Now!, TWiT.tv/sn.  And of course you can always get a copy wherever finer Internet broadcasts are aggregated and served.



[Laughter]



LEO:  I guess that's it.  Next week a Q&A, so do go to GRC.com/feedback if you have questions about security, privacy, or any of the things we talk about on the show.



STEVE:  Yeah.



LEO:  Steve will answer 10 of them next week.



STEVE:  I'll read them, and we'll be back in a week.



LEO:  Thank you, Steve.



STEVE:  Thanks, Leo.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.










GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#395	

DATE:		March 13, 2013

TITLE:		Listener Feedback #163

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-395.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson's here.  We'll talk about Microsoft's new Patch Tuesday.  Wow.  A USB exploit you just won't believe, and it's been in every copy of Windows until now.  Plus, your questions and Steve's answers.  It's all coming up next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 395, recorded March 13th, 2013:  Your questions, Steve's answers, #163.



It's time for Security Now!, the show that covers your security and privacy online with this cat right here, our Explainer in Chief, Mr. Steve T. Gibson.  The "T" stands for Tiberius.  He is...



STEVE GIBSON:  That's going to really mess up my Wikipedia page now, Leo.  People are going to scramble over there and  make changes.



LEO:  They're going to put it.  It's not his middle name.  Do not change his Wikipedia entry.  Thank you very much.  Hi, Steve.  How are you?



STEVE:  Hey, Leo.  Great to be with you again on Pope-Choosing Day.  



LEO:  We're waiting.



STEVE:  I guess the smoke is white.



LEO:  A new Pope to emerge any moment.



STEVE:  Yup.  And this is 31313.  I noticed that as I was assembling things.  I thought, oh, I like alliteration, we know.  And so 31313.



LEO:  And the day before Pi Day.



STEVE:  That's correct, 314.  Well, yeah.  I guess we really need two more years, 31415.



LEO:  Oh, Pi Day 2015 will be a big one.



STEVE:  Oh, baby.



LEO:  31415, yeah.  3.41559.  So at 9:00 a.m. in three years, two years, we're all going to be so excited for a moment.



STEVE:  We will have special coverage in case anything strange happens.



LEO:  Special coverage for Pi Day.  When is - the next one is 2038, isn't it, for Linux, for UNIX, the next big Y2K.



STEVE:  Yes, 2038 is when the 32-bit UNIX time wraps around to zero, and the world as we know it comes to an end.



LEO:  Well.



STEVE:  Actually, it's already been extended to 64-bits.



LEO:  It goes to 64 bits.  Doesn't come to an end, it just goes to 64 bits.  So what is our time - oh, we have a Q&A today, don't we.



STEVE:  It's a Q&A today.  The week since we last spoke has provided us with ample entertainment and shenanigans and updates and things to talk about.  And because of startup delays, we'll do as many questions as...



LEO:  Oh, no.  We've got time.  Let's just - my lateness should not affect your content.



STEVE:  Yeah, but we don't have to push it all downstream.  So you can decide, my friend.



LEO:  So let's talk about Patch Tuesday yesterday, Second Tuesday of the Month.



STEVE:  Okay.  So what was revealed, and this wasn't - there were three privately reported vulnerabilities that Microsoft closed.  Among the 20 that were closed yesterday that were aggregated into seven sets of patches that pretty much covered the works - Windows, IE, Office, Silverlight, and SharePoint across all applicable operating systems - four of those sets were rated critical.  And what's interesting is the most interesting one was only given the rating of "important," even though you gasp when you hear about it.  But that's because, to get a critical rating, a vulnerability must be remotely exploitable with no user intervention.  So it must be, as we've used the term before, "wormable," where, if a worm got loose on the Internet, it could reach into machines and propagate, as we have seen with Code Red and Nimda and so forth in the past.  So those get "critical."  The one that's interesting they only gave an "important" to because it's a physical presence hack, yet it is amazing.  Now, in Microsoft's typical...



LEO:  "Physical presence" means you can't do it unless you are actually at the workstation, at the computer.



STEVE:  Yes.  Yes.



LEO:  It's much less of a vulnerability.



STEVE:  But what it empowers people to do makes you gasp.  And so in typical, you know, they copied and pasted something they wrote four years ago, and they keep repeating it.  They say - the title of this was "Vulnerabilities in Kernel-Mode Drivers Could Allow Elevation of Privilege."  Which is like, oh, well, that doesn't sound good.  But, okay, elevation and privilege?  Okay.  So Microsoft says in their blog:  "Today we are addressing a vulnerability in the way that the Windows USB drivers handle USB descriptors when enumerating devices."



LEO:  Uh-oh.  



STEVE:  Okay.  So that means - so the drivers are in the kernel.  USB descriptors is not part of, like, the file system on a USB drive.  Those problems we've seen before.  The USB descriptors is down in the USB protocol stack, and it turns out there were bugs there.



So continuing, Microsoft says:  "This update represents an expansion of our risk assessment methodology to" - what BS.  Oh.  Anyway, "to recognize vulnerabilities that may require physical access, but do not require a valid logon session."  Okay, now, there was no such thing before, but this created that methodology for this reason.  And they say:  "Windows typically discovers USB devices when they are inserted or when they change power sources, e.g., if they switch from plugged-in power to being powered off the USB connection itself.  To exploit the vulnerability addressed by MS13-027, an attacker could add a maliciously formatted USB device to the system."  Which means plug it in.  "When the Windows USB device drivers enumerate" - which means, you know, scan...



LEO:  Say what have we got here, what have got here, yeah.



STEVE:  ...the device, yeah, what just arrived?  And you always hear that ga-glook sound, when Windows says, oh, someone just plugged something in.



LEO:  [Vocalizing]



STEVE:  Yeah, exactly.  So when they "enumerate the device, parsing a specially crafted descriptor..."



LEO:  Oh, lord.



STEVE:  "...the attacker could cause the system to" - and again, could, yes, uh-huh, can - "cause the system to execute malicious code in the context of the Windows kernel."



LEO:  Could, but only if he wants to.



STEVE:  Yeah.  Only if that was his intention.



LEO:  Only if he chooses to.



STEVE:  Only if he designed his USB device to do so.  "Because the vulnerability is triggered during device enumeration, no user intervention is required.  In fact, the vulnerability can be triggered when the workstation is locked or when no user is logged in, making this an un-authenticated elevation of privilege to kernel level for an attacker with casual physical access to the machine.  Other software that enables low-level passthrough of USB device enumeration may open additional avenues of exploitation that do not require direct physical access to the system."



So what all this means is that there has been a problem, which this patch fixes, such that it was possible to exploit a defect in all Windows operating systems across the board, for all time, apparently, where you simply plug something into a machine, whether it's in use or not, just if it's powered up.  You don't have to be logged in.  It could be a server where no one is typically logged in at the console.  It could be a machine which has been locked, and so you've got to, oh, type in a password in order to access it.  No, not necessary.  You just slip this little thumb drive in the side of the machine, and you take it over.  So...



LEO:  That's amazing.  That is, I mean, that's...



STEVE:  Not critical, Leo.  That was not critical.  That was just important.



LEO:  But of course what it means is somebody could create a thumb, could have a thumb drive and go to a library or somewhere with public computers, and boom boom boom boom boom, just take them over.



STEVE:  And what it means also is that what we're seeing now is all these patches are being immediately reverse-engineered.  So while this was privately reported to Microsoft, and there wasn't apparent, there wasn't known exploitation of it in the wild, that will exist tomorrow.



LEO:  Does it need autorun?  I mean, no, because it automatically runs these drivers when you install, when you stick it in.



STEVE:  Yes.  This is in the - at the kernel level, not at the file system autorun, "what is that" kind of parsing.  We keep - we've had all of those.  And so finally Microsoft gave up and just turned that off under duress because, oh, that was going to make it harder to use their operating system.  So, no, no, this is just - at the low level, at the hardware level, the Windows hardware drivers see that something has appeared, and in querying it for its specs it has a way of misusing the driver, essentially a buffer overflow-style attack in the kernel that allows it to just take over the machine.  And of course it's got the rest of the drive right there to provide all the files and malware that it needs to squirt in while it's doing it.  So, yeah. So this is one you want to update.  Not that there are any that you don't, but it would be good to do this and not wait long because there will be - this is - people are going to be having fun with this.  Meanwhile...



LEO:  Well, there you go.  There you have it.



STEVE:  Not to be left out, Leo, the fourth update in as many weeks of Adobe's Flash.  We've had basically one a week.



LEO:  Flash is in a race with Java to see who can be compromised most in the month of...



STEVE:  Yeah, actually I think Java may be inching ahead. But we'll talk about that next.



LEO:  Flash is catching up, though.



STEVE:  Yeah, so we're now at 11.6.602.180 for Windows and Mac platforms, as I said, the fourth update in as many weeks.  This addresses four known security flaws in Flash Player.  But unlike the previous emergency Flash updates, Adobe didn't wait, which is probably wise because, as we know, last time they waited, and then they thought, oh, well, we knew that this was a problem, but we were going to be updating when we could.  So this time they're just pushing it out immediately.  IE10 and Chrome both update automatically.  Firefox is getting better about that.  Safari has pretty much locked it down so you're less exposed, with that and with Java.  So we're seeing the industry adapting as well as it can.  And unlike Java, which fewer people have a need for, anyone who uses iOS devices is running into the annoyance of not having Flash on iOS.  But the flipside is you don't have the security problems.



LEO:  Even Adobe has stopped making a mobile Flash even for Android.  So it really - Adobe says you don't want it on a mobile device.  But you do kind of sort of have to have it on a desktop computer still.



STEVE:  Yeah.  I do think I like what - I'm still at - Firefox is my primary browser, and with NoScript.  And it has this stuff locked down.  So that unless I am somewhere where I trust, and I really know that I want to, like, play Flash, then I click, it's the click-to-play approach where I click on it, and then it enables Flash...



LEO:  That's probably the right way to do it, yeah.



STEVE:  ...on that page.  I really think that is.  That way you're just - you're less prone to - the normal approach is Flash is embedded non-visually on a site.  That is, some links are changed, and there's just a little Flash plugin embed that isn't like, here, play.  Click here to play this video.  It just sneaks something by on a site that doesn't otherwise - isn't obviously a Flash host.  And so anything that requires click-to-play Flash completely protects you from that.  So, and NoScript and Firefox, of course, are among those.



But as I said, Java is not to be left behind.  Many people tweeted me the link to the new "days since the last Java vulnerability" site.  And I can't remember what - it's like javazeroday.com or something.  But the point was I got a nice tweet from a Michael Horowitz in New York who said, "Steve, just an FYI.  There are now, as of March 8," so that was Friday, "12 known and currently unpatched bugs in the Java software released all of four days ago."  Which we talked about last week, that that was Version 7 Update 17.  Like seven new ones were found since then.  Our friend Adam Gowdiak has been busy.



Anyway, Michael has a site that looks kind of nice.  If you're somebody who's stuck using Java, you have to use it, you might want to check out JavaTester.org.  That's Michael's site.  I went there.  It looks nice.  He does some testing of your browser, seeing how, like if Java is truly disabled in it.  And he's done some digging into how the various browsers handle that setting in the Java setup where you can say remove it from my browser.  I updated, and I went through, in Windows, through the Windows control panel, to the Java applet.



And on the first page that comes up of the tabbed dialogue, it says "Java is enabled in this browser."  And it's like, oh.  And then it's like, "Go to the Security tab to change this."  So you go to the Security tab, uncheck that "Enable Java in the browser," and then I went back to the first page, and it said "Java is not enabled in the browser."  But there's been some concern that it seems to be reenabling itself because I had turned it off before, and it turned itself back on with an update.  So it's worth doing after you update until maybe they will start disabling it by default and only turning it on when people need it.



But so these are now known bugs in the latest Java.  And we imagine that they will be surfacing in the wild before long because that never seems to take very long.  And I have a note, somebody suggested another acronym for Java that was kind of clever.  But so far Just Another Vulnerability Announcement seems apropos...



LEO:  That's pretty good.



STEVE:  ...to this one, yeah.  And several people tweeted that the issue of Apache and the Do Not Track politics with IE10 had been solved, or resolved.  And so we've talked about this many times.  And the source code that was in the config, the HTTPD.conf file was commented as "Deal with user agents that deliberately violate open standards."  And my upset over this was that...



LEO:  In other words, Internet Explorer.



STEVE:  IE10, yes.



LEO:  I.e., IE.



STEVE:  Yes.  Or e.g., IE.  So on the GitHub site there is some dialogue about this.  And the anchor posting I liked because it was one of the main thinkers about this who said this is exclusively regarded - oh, I'm sorry, that was on the Apache.org Bugzilla site - said this is exclusively regarded as a bad idea because "Apache is the wrong point to add this setting.  DNT does only matter for a very small subset of servers, i.e., those of ad agencies.  So this will, one, result in unnecessary processing for most installations; and, two, the DNT header will only be processed at a higher level, e.g. PHP, where this check could be made.  With this setting, Apache is 'stealing' information from the actual processing logic that will handle the DNT header."  Which is a good point because Apache is not removing it unless it sees that your user agent is IE10.  So, and this was my argument, was that it shouldn't be at the server.  It ought to be at the application level.



So then he says, second point:  "This is damaging to the reputation of the Apache project as it shows people hiding their personal political agenda in open source software."  And he wrote, "German publisher Heise is already reporting about this."  And he said, "Using this setting would mean also people who explicitly decided to use DNT will be ignored, which is a much worse case than using the DNT setting from people who don't care."  And he said, "Whether DNT should default to 0 or 1," and he said, "Let's face it, there will always be a default unless you require the user to set this on first launch of the browser with only the buttons 'Enable,' 'Disable,' or 'Quit Browser,' which will never happen," he said, "is something to decide by the specification, not by Apache."  And finally, "Unlike what the comment says, IE10 actually asks the user about DNT when Windows 8 is installed, as shown in the link thread above, making the point of this commit invalid."



LEO:  It does ask, but it asks that with a number of other things in somewhat fine print.  So...



STEVE:  True, yes.  Anyway, so a number of people got onto the thread, had a very nice discussion.  And essentially Roy, who committed this to the config file update, lost, and it is now - it's still there, but all commented out.



LEO:  Interesting, interesting.



STEVE:  So it is gone by default from Apache.  But if your own feelings said I want to enforce this against an IE10, well, it's there, and you can take the comments out and the work is done for you.



LEO:  And this, by the way, is why I like open source software, because this discussion happened in public, and everybody had a chance to speak.  I think they came to the right conclusion.



STEVE:  Well, and in fact our friend at Stanford, whose name is escaping me, I referred to him last week, he's the privacy and tracking guy who's part of the W3C anti-tracking committee.  His responses in this thread were really well informed and well thought out.  And he was able to bring the exact perspective of the committee, saying that this is not what we want to do.  It is not a non-compliant browser.  Those decisions have not yet been made.  So it's like this was, if anything, I mean, the least it was was premature because this was jumping the gun relative to where the current thought is on the whole issue.  So again, to me, this is all interesting stuff because it's evolving, and it's what's happening right now.  How do we deal with the tension that exists between privacy on the Internet and monetization on the Internet?  And those are two forces that are in tension with each other.



LEO:  So my question, actually a good question from the chatroom is, is there any way to know if a browser - if the Apache has been compiled with this on?  I mean, I guess not.  I mean, you could look at the traffic, I guess.  I don't know.



STEVE:  Good question.  I don't remember what the patch does.  I have it here.  Let me scroll back to it.  Does it fake the...



LEO:  I don't know.  Or ignores it or...



STEVE:  Well, it apparently, if you have IE10, it changes the header to say that it is unset.  Meaning that there has been no decision made.



LEO:  Regardless of whether it's been set.



STEVE:  Correct.  So whether...



LEO:  I guess you could if you looked.



STEVE:  That was one of the other points made further down in the thread is that, if a user did deliberately set it or unset it and was using IE10, then Apache was, if this was in place, deliberately ignoring their explicit choice.



LEO:  Right.



STEVE:  So Apache has no way of knowing whether an IE10 user did or did not want tracking.  Even if they did or did not, Apache was not going to provide that information up at the application level running on the server.  So just all around a bad idea.  That's not the job of the server.  That was my technical, from a technical standpoint, independent of how you feel about it, it's not the job of the server.  The server's job is to make the connection, provide the information to the app running on top of it.



LEO:  I have to say I agree.



STEVE:  Yeah.  Bruce Schneier's famous comment, "Attacks only get better, they never get weaker," got a little workout also.  A group of cryptographers, led by - I don't know if it's led by Dan Bernstein, who's a world-famous cryptographer we've spoken of often.  He's got that neat site, cr.yp.to.  I just love that.



LEO:  Say that again?



STEVE:  Cr.yp.to.



LEO:  Cryp dot to.



STEVE:  Crypto.  No, it's crypto with dots every other letter.  So, very cool.



LEO:  "To" is Tonga.  So you have to go to Tonga to get that.



STEVE:  And then convince them that you want a two-letter domain, "yp."



LEO:  Yp.to.  And then you create your server to have a "cr."



STEVE:  "Cr," exactly.



LEO:  Love it.  That's Bruce.



STEVE:  Okay.  So there's a lot of history here, and this is interesting.  We've known for a long time that there's a weakness in the RC4 cipher.  To remind our listeners, RC4 was what WEP, the early original WiFi cryptography or WiFi crypto used as its cipher.  RC4 is itself a very good cipher.  It uses two arrays of bytes, two 256-byte arrays of bytes.  And when you give it a key, the key schedule process or key setup, as it's called, initializes - wait, is it two arrays?  No, it's one array and two pointers, I'm sorry, because I've written some RC4 myself.  So it's one array, very lean, one 256-byte array of obviously 256 bytes.



When you give it a key, it scrambles those in a defined fashion from the key. So that's its known starting condition.  Normally you just fill the array from zero to 255, and then you apply the key, which - and what it does is it employs a series of swaps.  So the two pointers are the places where you swap the bytes with each other.  And so, given a key, it initializes this in a scrambled, but deterministic way, so the same key always starts with the same scramble.  Then, when you're using it, what it is, it generates pseudorandom streams.  So it's a - RC4 is a stream cipher.  It emits a pseudorandom stream of bytes.



And we know that, if you take plaintext and XOR it with pseudorandom data, you get gibberish.  You get pseudorandom data.  You get something that, surprisingly, is really good encryption.  And then, on the receiving end, you apply the same key to the same algorithm.  You get the same pseudorandom stream.  You XOR that against the already XORed data, and out pops the original plaintext.  Very cool.  The problem with RC4, though, is that, due to the simplicity, essentially, of this approach, there were first of all weak keys, some keys that you could give it, and you can almost sort of intuitively get that.  Some keys that you would give it would not do a very good scrambling job to initialize that array.  And so that was a problem.  There was the weak keys problem.



And the way the WiFi system worked back then, WEP, is that there was an incrementing value that incremented over time, and it could wrap around.  So if you were online long enough, and it wrapped around, you would start reusing the same pseudorandom data.  You'd generate the same pseudorandom data, and that's a big no-no.  You never want to do that with a simple XORing cipher, or it's an immediate weakness.



The other problem was that it needed - RC4 needed more time to warm up.  That is, as you used it, it continually rescrambled.  So the key initially scrambled that vector of bytes.  But then, as you used it, it kept scrambling it even more.  Well, it turns out that the initial setup, the key setup really - there were some weak keys, but also there was actually some predictability, no matter what key you used, in the initial key stream, as it's called, the initial stream of pseudorandom data.  After about 256 bytes had been emitted, then even that was lost.  That is, it really became robust.



So, and I've mentioned this before, that all we really needed to do to fix RC4 was warm it up. Discard the first 256 bytes of data.  So change the way you use the cipher so that you use the key, then you run it for enough to get 256 bytes of data out, that would take no time at all.  Then you've got a much better key stream.  And that's one of the ways that WPA fixed this problem.  WPA can use AES, but also RC4 because there's nothing, if you use it right, there's nothing fundamentally wrong with it, although people could also argue that putting all those requirements on the way it's used really represents a problem for it.  And it's like, wait, you ought to just be able to give something a key and start using it, rather than, oh, well, you've got to avoid bad keys, and you've got to warm it up for a while.



So what happened is these crypto guys just - and this will be in a paper coming out shortly - completely characterized the nature of the initial weakness in RC4.  That is, it was known that some of the bytes weren't as random, no matter what the key was, as they should be.  And that made people uncomfortable, cryptographer people.  But they said finally, okay, let's figure out exactly what this means.  They nailed it.  So that the beginning of RC4 is now very well understood.



And this is a perfect reason why Bruce Schneier's famous quote, "Attacks only get better, they never get weaker," applies.  It's because over time we develop more knowledge of the way these - what seemed like it's, oh, really mysteriously complex initially, like we keep knocking off hashing algorithms one after the other because people really smart who have the focus are able to just chip away at it, a little tiny bit, just by digging deeper into it.  Suddenly the bits don't all seem so random.  It's like, wait a minute.  There's a little pattern over here.  What does that mean?  And they go off, and then they come back with, uh-oh, this means something.



So here's the point.  Because of the attacks on SSL, the most recent and popular attack is the so-called "BEAST" attack, B-E-A-S-T.  And this was done by those two guys we talked about.  One was on the beach somewhere looking at bikinis, I guess, and the other one was home.  And they were corresponding, and they realized that, because of the use of initialization vectors in the cipher block chaining that AES was using, or any other cipher that uses cipher block chaining in SSL, there was a way that you could mess with encrypted traffic and over time gain information because the chain went from the end of one packet to the beginning of the next.  That is, the chains were linked across packets.  And that allowed somebody who was able to inject and intercept traffic to fuss with that linkage and play with the cipher in a way that caused some information disclosure.



So the consequence of that was that the recommendation has been don't use CBC-based ciphers preferentially.  Use RC4 because RC4 works completely differently.  It's not a block cipher.  It's the block ciphers that need to use cipher block chaining as their algorithm in order to do crypto so that the blocks are interdependent.  We've talked about this a lot.  So, for example, when I was setting up my new servers just a couple weeks ago, there was a site, SSLLabs.com.  I recommend it to everybody.  Go check it out.  It's very interesting.  SSLLabs.com is a site which will check the SSL security of any server you ask it to.  It goes and performs a series of SSL or TLS connections to the server.



And we've talked about how SSL works.  Normally the client who wants to connect gives it a whole list of ciphers, and then the server picks one and then says in its return handshake, here's the one I want to use.  So it's easy, for example, to determine which ciphers a server supports by only giving it one.  Just give it one.  And if it comes back and says I can't do that, then you know it doesn't support that cipher.  And then you get a different one, and it says, oh, yeah, okay, I'll do that, if you're only giving me a choice of one.



So the point is it's possible to remotely probe a server and learn everything about the crypto that it supports.  SSLLabs.com does that.  Because I was using Windows 2000 from the Dark Ages, I used to get a "D" there, and users used to, I mean, I've had people, podcast listeners who'd say, hey, Steve, have you gone over to SSL Labs and looked at what GRC.com gets?  And it's like, yeah, yeah, yeah, I know.  And it was because the crypto stack in Windows 2000 was from Windows 2000.



LEO:  It was just old.



STEVE:  It was just old.



LEO:  Not broken, just old.



STEVE:  Not broken, and no one was ever really in any danger.  But, again, these are theoretical attacks; and, as we know, they only get better over time.  So one of the reasons that I was really glad to move to Server 2008 is I got a state-of-the-art updated stack.  And in fact I went to 2008, and it still did not support TLS 1.1 and 1.2.  It did support TLS 1.0.  So then I jumped to R2, and because I thought, if I'm doing all this work, I don't want to already be behind on day one.  So for once I actually got current.  And I went to R2.



LEO:  There is an argument for being current, isn't it.



STEVE:  Yeah, there is.  And now GRC gets a Grade A.



LEO:  Yay.



STEVE:  And but not 100 percent on a couple.  And I thought, wait, why am I not getting 100 percent?  It turns out that this guy is so picky that you've got to have 4096-bit or larger keys.  It's like, okay.  So nobody has that.  But he is being future-proof, so I understand that.  At least I get an "A."  But I didn't at first.  When I first set up my servers, he was...



LEO:  Because of TLS.



STEVE:  Well, because of BEAST.  I was vulnerable to the BEAST attack.  And I thought, okay.  Well, I knew what that meant, of course.  It's because the default ordering of the ciphers was such that RC4 was way down the list.  And the idea is that the server chooses in the order of what it considers greatest security, but you've got to tell the server what the better ciphers are.  So the default installation of Windows gives you a bad grade on SSL Labs because RC4 has pushed way down.



So because I wanted an "A" at SSL Labs so nobody would worry about GRC.com, I did what everyone does, and the only thing you can do is move RC4 to the top.  You have to have it first.  All the advice you can find on the 'Net is, if you want to avoid the BEAST attack, and it's not just SSL Labs, I mean, it's actually to avoid the BEAST attack, the server has to say "I want to use RC4."  As a consequence today, 50 percent of the encrypted traffic on the Internet is using RC4 because of the BEAST attack.  Even though there are many, many better ciphers available, we can't use them because the later ciphers, TLS 1.1 and 1.2, they fix this problem, except that clients haven't been updated.  So servers, like my server happily has the very latest cipher suites available.  But if the client can't use them, then it knows about RC4.  And that's better, some would argue, than using one of the cipher suites which can be compromised by BEAST.



So what all this means is that the paper that has come out that has fully analyzed the first 256 bytes has identified the way that those pseudorandom bytes are much less random and much more pseudo than we wish.  The consequence of that is, if you were to passively monitor encrypted traffic, where the same traffic was being repeated over and over and over, you would see the beginning of that connection as it's coming up.  And if you were to capture the first 256 bytes of that, and we're talking, I think it was four to the - I remember seeing, no, I'm sorry, two.  I remember seeing a 2^32 and a 2^20-something.  Anyway, it's millions.  You have to get millions of samples.  But if you do, you can figure out the plaintext.  You can decrypt that first blob of traffic.  And the reason that's a concern is that browsers generally have query headers at the beginning of their query.  And the query headers contain the cookie which is your authentication.  So again - we're having to follow a long chain of what-ifs, I realize.  But again, these things only get better.  Somebody will have something that runs in Starbucks before we know it.



LEO:  Don't feel bad, by the way.  Bartman in our chatroom says IBM.com gets an "F."  So you're in good company.  They're probably running an old server, too.



STEVE:  So, and, see, now I'm kind of wondering, well, what should I do because I don't want this.  So, I mean, there are proposals for fixing this.  The problem is everybody would have to update their clients.  All you would have to do, for example, is discard that first 256 bytes out of the RC4 stream cipher, as I mentioned before, and then the bytes are sufficiently pseudorandom.  And it's interesting, too, because there's a chart - I meant to tweet these links, but I didn't.  But if you - probably if you Googled "Attack of week:  RC4 is kind of broken," I think probably if you Googled "Attack of week:  RC4 is kind of broken," that's a great blog posting that links to the page where there's a chart showing the 256 bytes, each of the 256 bytes across the horizontal and the probability...



LEO:  It's from CryptographyEngineering.com.



[blog.cryptographyengineering.com/2013/03/attack-of-week-rc4-is-kind-of-broken-in.html]



STEVE:  Yes, that's where it is.  And then it shows you, like, a graph that spikes in sort of like a comb fashion, where the comb teeth are shortening as it goes further out.  So the bytes earlier are more easily determined than those later.  But what this ultimately allows you to do is theoretically get somebody's authentication cookie from their browser headers, if you could induce millions of requests.  And their point was that there have been things that do that.  For example, the BEAST attack works by injecting some JavaScript that causes your browser to make the kinds of queries that the BEAST attacker wants made.  And you could also inject some JavaScript that would cause your browser to make millions of repetitive queries to Google.com, for example, which each one of those would carry your currently logged-on Google.com cookie, if you were logged onto Google.



So anyway, an interesting piece of new, state-of-the-art cryptography, and sort of a problem here because the industry, in trying to thwart the BEAST attack for currently supported ciphers, has elevated RC4 as preferential to any of the block ciphers, which really are better ciphers, because of the way SSL 3.0 and TLS 1.0, the way they chained their packets together with cipher block chaining.  This has been fixed in TLS 1.1 and 1.2, but not everybody's using it yet.  So, interesting dilemma, and cool stuff, just from a theoretical standpoint.



Speaking of cool stuff and theory, a little glitch hit Bitcoin just yesterday.  And what happened is really interesting because all Bitcoin implementations up until 0.8 used the Oracle Berkeley DB backend as its database.  So the bitcoin mining and the Bitcoin clients and everything, they were using this Oracle Berkeley DB 0.7.  The developers decided to switch, with the release of 0.8, to Google's own database, which is called LevelDB, very nice, slick, clean.  It's a key...



LEO:  Yeah, so no SQL, so it scales beautifully across massive installations.



STEVE:  Yes.  It's very cool.  It's a key and value database, so you're able to store basically keyed values.  You say here's a key, here's a value; here's a key, here's a value.  And then later you say what's the value for this key, and it's able to find it, just bang.  What happened is there was a never-known bug in the old Berkeley DB, and everybody was using it with the bug.  The bug kind of kept the playing field level.  But when people began switching to 0.8, which should have been absolutely compatible, different things happened, and Bitcoin broke.



Essentially - and we did a complete podcast on Bitcoin [SN-287].  Anybody who wants the background, I'm not going to go over the whole thing again now.  But it's really neat the way it works.  I mean, the technology is so cool.  But essentially it caused a fork in what normally is a continuous movement of work of bitcoin mining.  It diverged the bitcoins and caused a huge upheaval yesterday.  I mean, they realized something was broken.  I read up on all of the current discourse that I could find.  And, I mean, the gurus are still saying, okay, we have to understand exactly what happened.  And what they're telling people is that miners should immediately go back to 0.7.



They're basically going to have to kill off some of the forked work that was done and then figure out what to do about, like, moving forward.  Do they, like, they need to exactly character- they don't even, as far as I know it, don't even yet know exactly what the problem was.  It involves locking.  There are things called "locks" in a database which you do in order to prevent data from being modified while you're in the process of modifying it, so that there aren't collisions.  It's the old case where two people each read something, and then they, like, increment it or modify it, then they both write it back.  Well, the first person to write it back gets what they wrote overwritten by the second person to write it back.



So instead, if you know that you're going to modify something, you lock it so that it's yours exclusively.  You then read it, modify it, and write it back.  Anybody else who's trying to get to it at the same time, they have to wait until you release your lock, and then they're able to access it.  So this is well understood technology for multithread, multiprocess, multiuser databases.  And there was a limit on locking which 0.7 had, and everybody had the same limit imposed because everybody was using the same database.  LevelDB is better and doesn't have this imposition.  So its behavior subtly changed, and that broke Bitcoin.



LEO:  Boy, it just shows how complicated this stuff is.



STEVE:  Oh, my goodness, it's complicated.  Yeah, I mean, and you're reading through this dialogue of these gurus, and your head just spins.  It's like, holy criminy.  It's, like, just amazing.



LEO:  And I can see why they can't just patch it right away, because they have to understand what the heck's going on, make sure - it's complicated.



STEVE:  Yes.  And work was done by...



LEO:  Right.  You can't throw out the existing work, or I guess they...



STEVE:  Yes.



LEO:  ...might have to, but...



STEVE:  Yeah.  Now, I did also notice that coins are - it used to be that when you successfully found the magic value to make the hash have all leading zeroes, which is part of the coolness of bitcoin, really any listeners who are more recent additions to our podcast, let me urge you to go listen to the Bitcoin podcast [SN-287].  Back then I did a pretty good job of sharing my love of Satoshi, who was the guy who developed this.  And it's just immaculately conceived.  It's amazingly cool.



LEO:  Not an endorsement, I should point out, not an endorsement of the idea of Bitcoin, but merely of the technology of it.  We don't...



STEVE:  No, but what I will endorse is the fact that this thing has staying power, Leo.



LEO:  Yeah, yeah, that's true.



STEVE:  I think it's here to stay.  I think the world, the governments may not like it.



LEO:  An extra-governmental currency.



STEVE:  Yes, a virtual Internet currency.  I think there's a place for it.  And I think Bitcoin is going to be it.  So anyway, just it is incredibly cool technology.  And I fired up Bitcoin and played with it for a couple weeks, and I minted a coin back then.  I got 50 bitcoin, which apparently is worth about $2,500 now.



LEO:  Wow.



STEVE:  So, yeah.



LEO:  But, yeah, to try and spend it anywhere that...



STEVE:  Oh, no.  You're able to use any of the exchanges and turn it into cash.



LEO:  Actual cold hard American dollar?



STEVE:  Yup.



LEO:  Wow.



STEVE:  Yup.  So back then a single bitcoin was - a single hashing success minted you 50 bitcoin.



LEO:  Not anymore.  Not anymore.



STEVE:  But that drops in half every four years.



LEO:  Right.



STEVE:  So it has been that four-year gap since then.  Bitcoins now, when you make a successful hash, you get 25 bitcoin.  And...



LEO:  We should point out you were fairly lucky to get that.  I mean, the odds against it are high.



STEVE:  Well, and, boy, since then - this was years ago.  And this was just on - it was on this little machine, a little i7 quad core.  And it just kind of - I looked at it one morning, it was like, oh, look, I got one.  Well, now, I mean, people have living rooms full of Freon-cooled, ASIC-driven, insane monster caching bitcoin mining machines.  And the Bitcoin system automatically scales up the difficulty in order to keep the coin creation rate set per its algorithm.  And that's asymptotically approaching a final maximum.  So since then, you're not in the game if you just run a computer and say, oh, maybe I'll get lucky.  It's like, no, no, no, honey, that day is way past.  But very cool technology.



I missed a note from our Mr. Wizard, who did another Security Now! video.  That is, I missed it because he sent me email on Wednesday when I was in the middle of prepping for last week's podcast.  Now, since then, there's been another one.  So I just want to remind people about AskMrWizard.com.  You can go to AskMrWizard.com, and you can click on the Security Now! link, or you can do AskMrWizard.com/securitynow.  He's got from Episode 3 "NAT Routers as Firewalls."  And these, I should say, these are animated videos to complement our podcast.  And they have our audio, but he's added video to it.  No. 8, "DoS Attacks."  He just did the "Rootkits," No. 9 on rootkits.  No. 10 on "Open WiFi Access Points."  No. 42, that is, Podcast 42, on "NAT Traversal."  And he also did one on a recent podcast, 388, on "Memory Hard Problems."  So those are there.



LEO:  It's pretty neat, yeah.



STEVE:  And I just had to also tell people about a piece of freeware that I've now been using for a month that I really like on Windows called CCleaner.



LEO:  Oh, yeah.  Oh, yeah.



STEVE:  It's by a company...



LEO:  Our audience knows about that very well.



STEVE:  Piriform.



LEO:  Piriform, yeah.



STEVE:  Yup.  I really like it.  I didn't know it was known.  I ran it on my own personal machine for the first time yesterday, or two - yeah, I think it was yesterday.  It found 775MB of accumulated gunk.  In fact, Google Chrome alone was responsible for 430 of those megabytes.  So it's very cool.  Also it found 1,126 debris keys in my registry.  And when I removed all those - you have to do that successively because sometimes keys refer to keys.  So the second pass it found 33 more, the third pass 11 more, and the second pass two more, and finally no more.  One of the things I've noticed is that any old machine that you've had for a while, when you uninstall software, the uninstall system tends not to remove registry keys.  So they tend to accumulate.



Anyway, this thing also allows you to view and play with your system startup and your browser add-on startup, your scheduled tasks, and it even has a free space wiper for people who want to wipe the free space on their drive.  So anyway, it's called CCleaner.  It's freeware.  They're not trying to install any junk on your machine.  It's not ad-supported or anything at all.  Very, very clean, good stuff.  So I wanted to just say, hey, I independently discovered it.  And I'm glad you guys know about it, too, you and your team.



LEO:  Oh, it's very, yeah, very popular amongst our crowd.  I don't generally recommend it.  Most of that data was just temp files, like the cache files on Chrome.  And so that's fine.  I mean, deleting temp files is harmless.



STEVE:  Yeah, I just like to...



LEO:  The registry keys is a little tricksy.  I found CCleaner is pretty conservative, so you're probably all right.  But you've got to be careful because you can screw your system up.



STEVE:  And it does also, in cookie deleting, it apparently applies some sort of a smart cookie algorithm.  So it will try not to delete the cookies representing your logged-on authentication, which is nice, instead of just doing a wholesale cookie expunge.



LEO:  Right.  By the way, I don't know if you saw the article in Ars Technica, but I thought this might be a good subject for a future show:  "Meet the men who spy on women through their webcams."  We've talked about the idea, the theoretical idea that you could access people's computer with a rootkit or something.  And apparently there are fairly easy tools, RAT tools they call them, Remote Administration Tools.  You remember Back Orifice, back in the day?  Well, they've gotten much more sophisticated and apparently quite widespread use.  So I have, on the radio show, we periodically get calls from people saying I'm sure there's somebody in my computer.  Well, I guess it's more widespread than we thought.  There are forums where people share pictures they've gotten from people's machines, and of course turning on webcams and things like that.  So I don't know.  I'll send you the link.  It's at Ars Technica in their Tech Policy Law & Disorder blog.  RAT tools.  And I thought this would be a good...



[arstechnica.com/tech-policy/2013/03/rat-breeders-meet-the-men-who-spy-on-women-through-their-webcams]



STEVE:  Yeah, remote access.



LEO:  Yeah, this might be a good subject for you to probe.



STEVE:  And of course we've talked about the problem with cams, and I always say just stick a little - stick the sticky part of a post-it note over the webcam, if it's something that you're not using all the time, or just stick it over there when you're not using it.



LEO:  It's funny that you mention that because here's the relevant paragraph from this Ars Technica article:  "Welcome to the weird world of the ratters.  They operate quite openly online, sharing the best techniques for picking up new female slaves" - that's what they call them - "and avoiding that most unwanted of creatures, 'old perverted men,' in public forums.  Even when their activities trip a victim's webcam light, and the unsettled victim reaches forward to put a piece of tape over the webcam, the basic attitude is humorous.  Ha!  You got us!  On to the next slave!"



STEVE:  Wow.



LEO:  Yeah, pretty creepy.



STEVE:  I guess you could use frosted Scotch tape, come to think of it, although I like the reusable stickiness of a post-it note.



LEO:  Yeah.  You don't put it on the camera lens, just over it.  Above it.  Oh, lord above.  And actually there are starting to be computers with little doors over the camera, which is just very cool.



STEVE:  Yes, that's so nice to have a shutter.  You really want a little shutter.



LEO:  Yeah, yeah.



STEVE:  And keep it closed unless you're actively using it.  We got another tweet suggesting a Java acronym, for J-A-V-A, of course:  Just Another Valueless Add-on.  So that's pretty good, too.



LEO:  Yes, yes.



STEVE:  And I don't have time, lord knows, to mess with this.  But there is something cool happening that I just wanted to give our listeners a heads-up for those who would be interested.  And that is, over on Kickstarter, there's something called the Mojo Digital Design for the Hobbyist.  It is a hobbyist-grade, very nicely put together FPGA platform, Field Programmable Gate Array.  A field-programmable gate array, I think it's using a late-model Spartan FPGA chip.  I think $55 gets you, like, the whole kit-and-caboodle.  They've already way passed the amount of money that they were hoping to raise, and they've made so much extra money, they've had so much more pledged, that they're adding new features and things now because they can afford to.  But so there will be software for programming it.



A field programmable gate array is basically software-controlled digital design so you can design gates and logic and counters and a little simple computer, for example, all in software, download it into this thing, and it dynamically configures this chip.  It has a ton of I/O, 50-some I/O, lights and buttons and analog inputs, and it just looks very cool.  So for anyone who thinks that would be fun to play with, I wanted to give you a heads-up.  Mojo:  Digital Design for the Hobbyist is the link over at Kickstarter.



[kickstarter.com/projects/1106670630/mojo-digital-design-for-the-hobbyist]



And I found a really neat story, something I hadn't ever seen before, about SpinRite, where he said "Backups are not always practical," from Howard Matthews, obviously a listener.  He said, "Years ago I landed a great job working for a well-known PC manufacturer" - he's not telling us whom - "in their R&D department.  My job" - and this is an interesting job - "was to create the preinstall bundles, the drive images that were then squirted onto each new computer as it got to the end of the production line.  The images contained..."



LEO:  Eww, you left your drive bundle on my computer.  Eww.  Ick.



STEVE:  "The images contained an installed version of Windows, along with drivers and a bundle of games and other apps that came 'free' with the machine."



LEO:  Yeah, right.



STEVE:  And think about the problem, though, of doing that.  He said, "It was a fascinating job because different machine configs needed to have different bundles of software on them.  I had to examine the way each game or app installed itself so that I could later 'install' the software automatically by just copying files and adding stuff to the Windows registry.  Apps with copy protection systems were often very tricky.  You'd start with two identical blank drives, install Windows on both, install the app on one of them, and then compare them to see what had changed.  Once you knew which files went there and what changes the app made to the registry and other system files, you could then create a batch file that would be able to silently and quickly drop a 'installed' version of the app on a new drive."



LEO:  [Snoring]



STEVE:  Hey, Leo, somebody's got to do this.



LEO:  Somebody's got to do it.



STEVE:  Somebody's got to do it.  He says, "It felt like legalized cracking."



LEO:  Yeah.



STEVE:  "In some cases it could take a couple of days to fully dissect even a single app like this, Lotus Notes" - can you imagine? - "being a prime example.  And backing up the drives you were working on just wasn't practical.  Some apps seem to know they've been copied to another drive, even if you use cloning software to supposedly copy the drive byte by byte.  And of course we were throwing hard drives around the place all the time, plugging and unplugging them, reformatting, trying again, more plugging and unplugging.



"Many drives" - and here's his point - "bit the dust from the sheer physical demands we put on them, and did so without notice, until the day my boss Duncan bought a copy of SpinRite.  Instead of trying to back drives up, we just SpinRited them all every few nights.  SpinRite kept those drives going for ages.  And, more importantly, it told us when the drives were getting a little too knackered, so we could take them out of commission before being tripped up by them.  It was like night and day.  We still threw the drives around with abandon.  But SpinRite was like a guardian angel, restoring and protecting them as we went.



"You changed the way we worked, Steve, and saved us a huge amount of hassle and worry.  The company is gone now, but no one in the R&D department left without having learned about SpinRite.  Thanks, Dude."



LEO:  That's awesome.



STEVE:  Signed, Howard.  So thank you, Howard, for sharing that with everyone.



LEO:  Yeah.  Nice story.  We're going to take a break.  When we come back, we've got questions, Steve's got answers in Security Now! Episode 395.  In another month we'll hit 400.



STEVE:  Coming up on, oh, 400.  I like round numbers.



LEO:  400.  Don't know what it means.  I told - you know they just celebrated 100 episodes last night on All About Android.  I said, you know, anything less than a few hundred we don't really - we've got shows in the thousands, kid.



STEVE:  Where are you [indiscernible]?  You must be into the triple digits.



LEO:  Oh, 1,400-plus, yeah, I think it's 1,409, something like that [The Giz Wiz].  But it was - that was because it was a daily show.



STEVE:  Right.  Was?



LEO:  And I'm sure TNT is - yeah, no, it's weekly now.  We made it weekly.



STEVE:  Oh, okay.



LEO:  Yeah.  I bet you TNT is up to that.



STEVE:  I'll never be able to catch up, though, darn it.



LEO:  No.



STEVE:  And we're not making us daily.  That would kill me.



LEO:  How would we get to 1,400?  It'll be, like, years.



STEVE:  We could cheat.  We could just, when we get 400, we could add a one on the front.  No.



LEO:  Questions for Mr. G.  Are you ready?



STEVE:  Okay, so here's what I think, Leo.  Because I am conscious of the time and that you've got another podcast to do, how about if we did half now?



LEO:  Sure.  Half next week?



STEVE:  And then we'll do the second half next week because I think the topic for next week, actually the last question of this week was going to be a lead-in about distributed hash tables.  This is the directory system that Tor uses.  I mentioned when we were talking about Tor last week that a directory, that services posted their existence in a directory.  And several people said, directory?  How can you have a directory in Tor?  So this uses - Tor uses a technology called "distributed hash tables" that we've never, ever spoken about, that I thought would make a great topic.  And I think I can do that and the other five questions in one podcast next week.  So let's do five today, and that'll give us a nice wrap.  And then we'll do the next, we'll do the second half next week.



LEO:  Sounds good to me.  Starting with Nicholas Bauer, Atlanta, Georgia.  He's been thinking about loops and parallels:  Steve, this week when you explained - which was last week, I think - the ability to paralyze chained - I'm sorry, parallelize, very big difference between "paralyze" and "parallelize" - chained ciphers, I think you missed the key part that was confusing the questioner, which is that usually you aren't trying to compute just one answer, but thousands of them.  The idea, which I think was lost on the questioner, is to implement something like an assembly line.  As soon as Unit A has computed the output from Input 1 and passed it off to Unit B, Unit 1 can immediately work on Input 2.



Thus, if the hash we are trying to break is 1,000 chained iterations, let's say we can do one iteration per second, normally it'd be 1,000 seconds.  If instead we implement in hardware 1,000 dedicated units, each of which computes one iteration and passes it on to the next unit, we can do 1,000 units simultaneously, so in other words a million hashes per second.  And I think you understood that.  I don't think that was what we were talking about.  But thanks.  Keep up the great material.  It helped inspire me to do some hobby programming and be fully conscious of security while doing so.



STEVE:  The one thing that I liked about this, and the reason I saw it, was "assembly line."  That's all anyone ever has to think.



LEO:  Right.



STEVE:  That's the most perfect model of this notion of pipelining.  I mean, that's what an assembly line is.  It's a pipeline of work.  And if you are ever trying to either conceptualize it for yourself or explain it to somebody else, that's it.  The analogy is the assembly line.  It's perfect.



LEO:  Sunil Joshi, Chicago, Illinois, reminds us about OneID.  Steve, I remember you talking about OneID some time ago.  I see their site's still functional and OneID being offered.  Is OneID an OpenID hosting site?



STEVE:  No.



LEO:  What is it?



STEVE:  So, okay.  These are guys who - there's a big team of people.  I wish them no ill.  But they are trying to do a proprietary replacement for website logon.



LEO:  Oh, no, sorry.



STEVE:  And that's the problem.  There's a serial entrepreneur, Steve Kirsch, whom I've met, who's been successful previously on some major endeavors.  He did Frame, you may remember, that was a major publishing platform, and other successful things in the past.  And he's decided he wants to solve the problem.  Well, my hat's off to him.  But it's proprietary.  And so what this means is that, in order to implement it, it requires websites to support his solution.  And only people who have his solution can use his solution.  And I have - several times I've gone back, wondering how they're doing.  And today, the most recent list of websites you can use is something called Portero, authentic pre-owned luxury, whatever that is, used luxury; NVX, don't know what that is.  There's a site called ShoppersChoice.com under which is BBQGuys.com.  Their slogan is "We smoke the competition."



LEO:  I like that.



STEVE:  Ultimate Patio, CookwareCenter.com, Home Appliance Center, and SportsmanGuys.com.  You can log on with OneID if that's where you want to go.  EmbroiderMyStuff.com, Bikes for the World, the League of Women Voters, Earth Charter US, Children Can't Wait, and Bill Foster.  And that's it.



LEO:  Well, and there's an existing technology that is open and in widespread use called OpenID that really is the same thing; right?  There's no reason to use some proprietary solution.



STEVE:  Well, no.  Well, okay.  So OpenID attempts to use the existing infrastructure to solve the problem.  Steve's solution is better.  I mean, OneID is like - it's better.  It's very good crypto.  I've asked them for documentation.  They have never been able to share any.  He sends me pictures of arrows pointing at things.  But that doesn't do it.



LEO:  I'm sorry, it's proprietary.  I don't understand.



STEVE:  And that's the point, is that, if the whole world were already using it, and anyone could, then it would make sense.



LEO:  You know, Microsoft tried this, and nobody did it.  I don't know why somebody else should...



STEVE:  With Passport.



LEO:  With Passport, yeah.



STEVE:  Yeah, I know.  So anyway, that's where they stand.  I don't - they're not getting off the ground.  I mean, this is where they've been.  It's been more than a year.  And the point is why would a site like Amazon or eBay want to add that when, first of all, you have a real chicken-and-egg problem, and it's going to confuse people?  It's like, wait, wait, do you need some new something or other?  I mean, it's just - I don't see the value to the site.  So it's going to - it's a tough sell.  I mean, again, I wish them luck.  But I don't think that a proprietary solution to logging on should win.  I don't think it will.



LEO:  No market for it.



STEVE:  Because I - yeah.



LEO:  Yeah.  John Chybowski, Poughkeepsie, New York, is wondering:  How future-proof are LastPass and similar services?  Love the show, blah blah blah.  What if LastPass goes out of business?  My entire online life is tied up in this excellent service, but I'd still prefer not to have the company's wellbeing act as a single point of failure, and I'm not sure if LP is completely stand-alone.  You still need to use their servers to maintain your personal blob of encrypted information; right?  Of course I don't expect this to happen any time soon.  But, hey, what happens 10, 20 years down the road?  That's a good question.



STEVE:  It is.  And I liked this because it reflects the fundamental tension of the cloud.  I mean, for all the benefits it offers, with it comes some concern like this.  LastPass in particular is very nice because the blob is encrypted and cached locally in all of the various platforms, services, machines where you use it.



LEO:  Yeah, because I can go offline and still use LastPass.



STEVE:  Yes.  So that's very cool.  And the format is so clean and well designed and documented that they even have, at least for Windows, and I would imagine other platforms, I don't know for sure, a blob browser, where you can export your blob to your machine and view it in a standalone LastPass viewer.



LEO:  Right.



STEVE:  Which is also very cool.  So they've done everything they can to solve this problem for us, if they just, like, went up in a puff of smoke somehow.  So the value they add is the centralized cloud interconnectivity, where if I change a password in Firefox on my Windows machine, and then I'm using Chrome over on a Mac the next day, it knows.  It got the update.  And so when I log in, it's synchronized.  I mean, that's just very cool, the notion of cloud-based synch.  So LastPass in particular I think has done everything they could to make it a non-emergency if they disappear.  If they did, if they puffed a smoke, we're still able to log onto everything we can now.  We would lose the inter-device synchronization which they provide.  But it wouldn't be the end of life.  And right now LastPass knows way more about my passwords than I do.  I don't even try.  It's just like, okay, that's - as long a site accepts the gibberish that I just gave it, and LastPass remembers it for me, everybody's happy.  But it is a tension.



I would argue, though, that 20 years down the road, I mean, that's a long time.  We didn't have the Internet 20 years ago.  Zero.  Didn't exist at all.  So we're not going to have this problem in 20 years.  I don't think we'll have it in 10 or five.  There will...



LEO:  There'll be a solution.



STEVE:  ...be a solution.



LEO:  And that's one of the reasons I like LastPass is I give them a buck a month for the premium account.  They have a business model.  It just seems like they're going to be here long enough that we can hand it off to something else.  I just recently moved, because of the Evernote thing, I moved all of my passports, Social Security numbers, all my personal documents into Secure Notes on LastPass.  So now I really am in there.



STEVE:  You were right, also.  There was a big dialogue in the GRC newsgroups about this following on our dialogue about it last week, Leo.  And the consensus was LastPass had - I mean, I'm sorry, Evernote - this whole weird "We can't export more than 64 bits."  There are a couple good crypto guys who hang out in the newsgroup; and they were talking about, you know, if they're using RC2 with 64 bits, eh, that's really not the crypto that you want.  So your notion of getting it out of Evernote and putting it into LastPass really does make more sense.  You still get the cloud synch, but you get really strong crypto.



And you've got to wonder what, I mean, I did some research after we spoke.  And sure enough, in the Evernote docs they say, well, we don't have enough staff to go through the hassle of applying to the State Department, or Commerce, rather, to get the certificate to allow us to use strong crypto, so we're going to go with 64 bits.  Uh, what?



LEO:  Yeah, whatever.



STEVE:  Okay, my browser is using 128 when it talks outside the country.



LEO:  I'm going to keep using Evernote.  I love Evernote.  But I'm not going to store anything secure in there anymore.



STEVE:  I think that makes perfect sense.



LEO:  I'm going to use LastPass.  And really, I tell you, I started using a Chromebook as for a review.  And it's so great because while the Chromebook is just Chrome OS, it's just a browser, as soon as you install LastPass into it, you feel like you're right at home because I can immediately do everything I want to do.  My data is there.  So it really is nice to have that.



The only thing, and I'll have to look into this, is there is an open source alternative called KeePass, K-e-e-P-a-s-s.  And it's conceivable that it would be better to go with an open source alternative, if it had the functionality.  I know it doesn't.  But if it had all the functionality of LastPass...



STEVE:  It probably doesn't have the - does it have the cloud glue?



LEO:  That's a good question.  I don't know if...



STEVE:  That's a new term, by the way, Leo.  We've got cloud glue now.



LEO:  Cloud glue.  I don't know about cloud glue.



STEVE:  He got cloud glue on his head, so he got it off.



LEO:  I'll have to ask about cloud glue.  I'm not sure how they do the synchronization.



STEVE:  Oh, that's the cloud glue.  We don't know about that.



LEO:  I'm not sure how they do that.  It may be that what you do, and I suspect this is what you do, is you use something like Dropbox to store the encrypted blob and then have that synchronized to all your machines.



STEVE:  Then you're cloud vendor neutral for the glue.



LEO:  Right.  It's just a blob.



STEVE:  Yeah.  Of glue.



LEO:  So that's an interesting idea.  So, yeah.  So everybody in the chatroom is agreeing that that's exactly it, is you have this blob, and you're responsible for gluing it.  In other words, use something like Dropbox or ShareFile or some form of sharing it with the rest of your machines.



STEVE:  And otherwise the functionality is similar?  It's cross-browser, cross-platform, fills in the forms, offers passwords, blah blah blah?



LEO:  It's missing some extensions.  There's no Firefox extension.



STEVE:  Uh, thank you very much, then.



LEO:  Yeah.  That's the beauty of LastPass is it works on every platform, automatically, kind of.



STEVE:  And they are a business.  Their motives are clear.  They've withstood attacks.  They've acted responsibly.  They're full disclosure of all of their technology.  Joe's, I mean, Joe's present and working in the forums.  And because there is, you know, we're paying them a buck a month, there's money there for them to add support as new platforms come out, you know, like on my BlackBerry.



LEO:  I'm always nervous when a company like this, that I'm relying on, doesn't have a business model because that means they may not be around for a few years.



STEVE:  Yeah.



LEO:  Daryl in Kansas reminds us of the wacky Mailinator.com service:  Steve, I think this is an excellent tool to put in your toolkit.  I thought listeners would like it, too.  The geek factor is high.  Here's what the website says about Mailinator.com:  Use any inbox you like.  No sign-up.  Inboxes are created when email arrives for them.  Make up email addresses on the fly.  Make up addresses, give it to somebody else, come here, check the inbox.  Atom feeds for every inbox so you can push/pull.  Give out a Mailinator address anytime you need an email address, but don't want to get spammed.  And then he says thanks for SpinRite and ShieldsUP!.  Hey, Leo.  Mailinator.  So it's like a way to create dummy email addresses.



STEVE:  Well, no.  Well, okay.  First of all, we did speak about this once.  And we haven't talked about it for a long time.  It's just so loony that it's fun.



LEO:  It just might work.



STEVE:  I would never have come up with this because it's so wrong.  But there's a purpose.  And that is, so here's Mailinator.com.  And it will accept email sent to it from any account incoming.  So an SMTP server connects to it and says I've got mail for LeoandSteve at Mailinator.com.  And Mailinator says, good, send it.  And Mailinator accepts it.  And that's what it does.  You don't have to - there doesn't have to be a SteveandLeo Mailinator.com account.  It accepts any mail for any account, anything, and just puts it in a database.  And then you can go to Mailinator.com, and right on the front page is a form, a little field.  You put in SteveandLeo and click "Check my mail," and it shows it to you.  There's no security.  There's no account.  There's, I mean, that's what it does.



Now, the mail lasts, oh, I think he's - I think it was overnight, or maybe it was a week.  I don't remember how long it was.  But so it's not guaranteed to be there forever.  And not only can you RSS or Atom feed, now they support POP.  So you could have your own web client polling Mailinator.com once a minute or so for a certain mailbox at Mailinator.com, SteveandLeo.com.  And anything that arrived there, your client would pick up.  Again, no security.  So...



LEO:  Anybody can read that mail, but that's fine.  Just don't have passwords sent there.



STEVE:  Yes.  And that's the key is - I had forgotten about it.  And so for certain things it makes so much sense.  If you have an absolute throwaway confirmation link for some random place that is annoying you, that you've got to prove who you are, you can just type in qwerty@ -- well, actually that one's probably taken.  Actually, it's kind of fun, Leo.  Go to Mailinator.com and put in - I put in "Noodles," and there was no Noodles.  But then I put in "Charlie," and Charlie's got a bunch of mail.  And so you could just put - try "Monkey."  I wonder what Monkey's got.



LEO:  Oh, Monkey's got a ton of mail, I'm sure.  So really this would be mail as only one thing, mail that came to Charlie@mailinator.com.  You can, by the way, it will accept mail from any - so you could actually point your domain, what would be the MX record, to Mailinator.  And so you could create your own email address that doesn't say "Mailinator" and still use it as a throwaway.  But the key, again, is do not use this for anything that would, for instance, be a password recovery because, well, you're just - that would be dumb.



STEVE:  Right.  It is.  So it is - what it is, for what it is, is I think wacky.  I mean, it's wonderful.  It's crazy.



LEO:  It's just for using as a throwaway address where you know it's just going to be spammed, basically.



STEVE:  Yes.  And, well, and anybody can see what was sent there.  So the normal purpose of email, an example you gave, password recovery, is that the assumption is only you can access your email.  Therefore something very critical, I mean, it's like the only - email, an email loop, except for now we have cell phone usage that is so ubiquitous that that's now becoming a solution.  When I logged into Google Docs just now, earlier, to produce the docs, Google wanted just an update on my authentication, so it sent me a six-digit code to my phone.  And it came through the loop, I typed it in, and Google was happy.  So that's nice.  We have that now.



But email is still what most people use.  And it's because only we are able to access our email account, hopefully, that you're able to use it for this kind of thing.  So Mailinator is not that.  It's just, you know, it's just crazy that you just make up a mailbox and send stuff there, and it's there for a while, for like a day, and then it just kind of expires off the other end.



LEO:  You've been Mailinated.



STEVE:  I think it's very cool.  And now you want to jump to No. 10, which will lead us into next week.



LEO:  Excellent.  Spencer, writing from the canonical "undisclosed location," poses two questions about Tor v2.0.



STEVE:  And now we know why his location was undisclosed.



LEO:  Uh, Steve, you do a great show on TWiT, but I've got questions.  One, in your explanation of the old version TOR, you never told us how the return packets make their way back to the anonymous user.  How does that happen?  We do have a whole show on that subject, by the way [SN-070].  Two, you said these new 'Tor services' are published in the 'Tor directory' so users can find them.  Well, where is this directory, and wouldn't attacking it bring the whole service system down?  



STEVE:  Okay.  So first one is that Tor nodes do record the information necessary to locally return an incoming packet to where it came from.  So in the same way that a node knows who sent it and where it is being sent to, and it knows its own crypto, if you think about it, as long as it retains some short-term memory of that information, when the returning packet arrives from the place it's sent the packet out to, it identifies what that's a connection from, sort of in the same way that NAT routers work.



We've talked about NAT routing tables where the act of the packet leaving the NAT router from one of many machines behind it allows the NAT router, when the packet comes back from the outside, to determine which machine should receive it.  So it's very much the same way, just a simple short-term routing table that allows it to do that.  And it also then reencrypts the packet with its private key before it sends it to the place where it received it from.  And so the chain is reversed in a similar fashion.  Then it gets back to the user, who has exactly the same kind of onion that they sent.  And since they know the sequence of machines it came through, they sequentially decrypt each round or each layer of the onion with each node's public key and get the returned data.  So that's No. 1, just basically backtracking and just remembering sort of some routing information the way a NAT router does, with the addition of the crypto.



And the Tor services published in the Tor directory, this is done, as I mentioned at the top of the show, and this will be the subject for the first half of next week's podcast.  We will wrap up next week's podcast with the five questions we didn't get to today.  And that is the technology of distributed hashing tables.  The key concept, which is cool, is that you locate something by its hash.  And that's all I'll say for now.



LEO:  I can't wait.



STEVE:  And we'll talk about it in detail.  You know we will.  Get your propellers ready.



LEO:  [Laughing] I love this show.  Steve Gibson, he is our Explainer in Chief.  The most geeky show on the network, and I'm mighty proud of that.  You can listen to Security Now! every, what is this, Wednesday, 11:00 a.m. to - what day?  Where am I?  Who am I?  What am I doing here?  11:00 a.m. Pacific, 2:00 p.m. Eastern time, 1800 UTC.  Note the time change.  We're in summertime now here in the U.S.  So that means UTC, which doesn't adjust for summertime, maybe someday we won't either, but for...



STEVE:  That means you were actually early for the podcast, Leo.



LEO:  UTC I was.



STEVE:  Yeah.



LEO:  Don't - yeah.  Yeah, well, now what do you say?  I'm going to - somebody bit my head off.  Anyway, the best thing to do is watch live, if you can.  But if you can't, don't worry, we've got audio and video available on demand after the fact at TWiT.tv/sn.  You know Steve has 16Kb audio versions for those of you who really have bandwidth caps, or even text versions.  He pays for transcriptions,  human transcriptions, written by Elaine, and you can get those at GRC.com.  While you're there you might want to check out SpinRite, world's finest hard drive maintenance and recovery utility.  If you've got a hard drive, you've got to have SpinRite.  You can also get all the free stuff Steve makes available to us, including the UPnP tester on ShieldsUP!, which you really ought to...



STEVE:  Oh, and that count keeps going up, too.  I saw it the other day.  I think we're like, 3,200 something.  I think that's what it was last.



LEO:  Holy cow.  That's 3,200 routers who are prey to the UPnP exploit from outside the router.



STEVE:  Yup.  I did receive a note from somebody who had two D-Link routers hacked from the outside.  And so one had some sort of trojan installed in it that had taken it over, and it was being used as a trojan relay.  And the other one had all of its ports opened up, so it was wide open to the Internet.  Yikes.



LEO:  Wow.  Wow.  ShieldsUP!  Run it.  GRC.com and check out all the other great stuff there, including the feedback section, GRC.com/feedback, if you want to ask a question for future episodes.  We'll save those other five, do them next week or the week - whenever we get around to it.



STEVE:  Yeah.



LEO:  Yeah.  Thank you, Steve.



STEVE:  Leo, always a pleasure.  Talk to you next week.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#396	

DATE:		March 20, 2013

TITLE:		The Telnet-pocalypse

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-396.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  This week was so chockful of things to discuss that we had no time to discuss the fascinating technology and operation of Distributed Hash Tables.  That discussion will be "tabled" for two weeks.  This week, we look more closely into the somewhat troubling issues of SSL/TLS server security as revealed by SSLLabs.com, discuss the SWAT team arriving at Brian Krebs's home, examine the consequences of the revelation that 420 million routers are accepting trivial logins on their Telnet ports, and more!



SHOW TEASE:  Time for Security Now!.  Steve Gibson is here with a revelation that will chill you to the bone, if you truly understand it.  We'll talk about Bitcoin and the Telnet-pocalypse.  It's here now.  Details next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 396, recorded March 20th, 2013:  Telnet-pocalypse.



It's time for Security Now!, the show that protects you and your loved ones online, your privacy, your security and all that jazz.  And, boy, there's never been a better time for the Explainer in Chief, Steve Gibson, than right now.  Hello, Steve.



STEVE GIBSON:  We've been busy lately, Leo.  And...



LEO:  Seems like the hackers are kind of, like, gaining on us.



STEVE:  Well, and we've got some news this week that is very worrisome.  I haven't seen anyone else pick up on this aspect of it, but it's perfect for our listeners to understand.



LEO:  Oh, great.  Oh, boy.



STEVE:  And this involves something known as - what was a transient botnet known as the Carna Botnet, which is the creation of one guy, one arguable sort of gray-area researcher.  I mean, he acted responsibly; but, unfortunately, the disclosure of what he found really is worrisome.  And we'll talk about that.  We had planned also to carry the second half of the questions from last week's Q&A over to this week, but there's just no way we're going to have time.  So those, I'm moving those five that we didn't get to last week to next week's Q&A because we have so much to discuss, news of the week, and I wanted to also talk about the operation and technology of distributed hash tables.



The topic came up when we were discussing, two weeks ago, the way Tor offers services.  And the way people look up the locations of the services is in a distributed, secure, anonymous fashion which distributed hash tables allow.  And in the research, sort of the background for this, I discovered, among other things, for example, that that's the way Amazon stores all of its data.  It's not using SQL, so-called SQL complex relational databases because that's overkill for what Amazon needs.  What they want is high availability, very fast, very robust, very scalable database technology.  And all they need to do is look up data associated with short strings, or keys, and they're actually using distributed hash tables throughout all of Amazon's websites and offerings as the way, like, of the database technology they've deployed.



So it's not just for places where you want a decentralized database.  Another perfect example is BitTorrent.  BitTorrent uses distributed hash tables so that there's no place, like there used to be with Napster, where it could be subject to subpoena and shutdown.  So that's our main topic today.  And I thought we'd have time for more.  But, boy, with all of the really amazing news that we have to cover, I think we'll have a very full and fun, interesting podcast.



LEO:  Well, may I also wish you a Happy Vernal Equinox today.



STEVE:  And isn't this the first day of spring?



LEO:  The first day of spring.  And all over the world, this is from Boston Globe's Big Picture, these are pictures of spring all over the globe.  This is the day when the day and night are equal.  There are two of these a year.  And there's Stonehenge, the sun rising between the lintels to mark the vernal equinox.



STEVE:  Cool.



LEO:  So Happy Spring.  It's raining here.  We've got, I guess...



STEVE:  Is that what I'm hearing?  I kind of hear something.



LEO:  Can you hear a little tippy-tap on the roof?  Yeah, we have a metal roof.  Or something.



STEVE:  Yeah, that's neat.



LEO:  I don't know what - it's not metal.  It's some sort of composite.



STEVE:  I normally don't hear anything like static coming from your end, but I hear...



LEO:  Yeah, it sounds like static.  That's the rain, yeah.  It's pretty, though.



STEVE:  Cool.  Well, our big - one of the crazy events of the week occurred just after last week's podcast, which was last Wednesday the 13th.  This occurred to a friend of the podcast, Brian Krebs, on the following day, on Thursday.



LEO:  He was on a couple of weeks ago, in fact.



STEVE:  Yup.



LEO:  Our show.



STEVE:  He was subjected to both a virtual and a real-world attack of sorts.  We're all familiar with the term DDoSed, and his site came under attack from a purchased denial of service attack by a distributed botnet which offers its DDoSing services for hire.  But in the physical world he was SWATed, which is the name - SWAT, of course, is the acronym for Special Weapons and Tactics.  A hacker, whose identity Brian believes he knows, spoofed an emergency 911 call from Brian's phone.  I think his cell phone, but I don't remember for sure.



LEO:  Yeah, it said cell phone.  And by the way, that's very easy to do.  That's not a sophisticated hack.



STEVE:  Right.  And so Brian was, like, I think he was removing some masking tape from his door jamb where he'd been painting or something.  I don't remember quite the details.



LEO:  He was expecting houseguests.  He was going to have a dinner party, and he was tidying up.  And, yeah, there was something on his door jamb.  He bends down to pick it up, looks up, and lo and behold, there are guns trained on him.  Holy cow.  Scary.



STEVE:  A bunch of police cars all positioned out in front.  Guns leveled at him.  They told him to turn around and walk slowly backwards towards them.  And he was handcuffed and then walked away from the house, up the street.  Meanwhile, of course, he was trying to explain to people that there was nothing amiss whatsoever in his home, and that this was a false alarm which he had even had the foresight, I think it was about six months before, he wrote a letter to his local police department warning him that this sort of thing might be happening.  Well, the standard beat cops just blew all that off, but finally someone who had the mannerisms and dress of a supervisor came up and said to Brian, "Are you the guy who wrote us the letter about six months ago?"



LEO:  Yeah, that was me.



STEVE:  "And told us this might happen?"



LEO:  Yeah.



STEVE:  And Brian said yeah, that's me.  And so the...



LEO:  It's really an easy thing, and it's happened on the West Coast with movie stars.  And Part 1 is it's not hard to figure out where somebody lives because that's all public record.  And unfortunately, in the old days you had to go to the courthouse in that local area, the county courthouse, to get that information.  But there are a number of websites that have sent people around physically to do that and have put it online.  So it's not so hard to find out those home sales records.  And then, unfortunately, anybody can spoof these 911 calls.  They told the SWAT team, he said, "This is Brian Krebs.  My wife has been shot by Russian gangsters."  And so of course they're going to respond the way they did.  I don't think they mistreated him in any way.  But it's still terrifying.



STEVE:  No.  No, and in fact, the moment the supervisor realized that this was extremely likely, both from Brian's mannerisms, the fact that he wasn't distraught and upset, and the fact that he was the guy that had written a letter six months before, the supervisor spoke something into his radio, and all the guns came down.



LEO:  But you understand they have - there's no - that's - this is the difficulty.



STEVE:  How could they not take it, yes, how can they not take it seriously.



LEO:  And believe me, the next time Russian gangsters break into Brian Krebs's house, he'll want them to do this.  And that's the problem is I don't know what the easy answer is to this.  We assume in society a certain amount of civilized behavior.  And this very uncivilized behavior, really childish behavior, mostly it is children or people with childish mentalities who do this, we're not really set up to handle it in any way.  They did call his - they called his phone, his home phone, and he just - he heard it ring, but he didn't respond.



STEVE:  Oh, that's right.  Right, right, right.  They called a couple times.  I think they called his cell phone because he made a comment that he'd left it upstairs.



LEO:  Had he answered, maybe that would have defused the whole thing.



STEVE:  Yes, because he would have said, oh, no, that's fine.  Remember, and I'm the guy who wrote the letter six months ago telling you this might happen.



LEO:  Right, right.



STEVE:  But you're right, there was no answer several times, so that, they thought, okay, well, our first...



LEO:  I think they'd still send a couple of units over because maybe the Russian gangster would say, yeah, this is Brian Krebs.  Everything okay here.  No problem.  Is okay.  So it's terrifying.



STEVE:  Anyway, Brian posted about that last week.  He also has posted since some further investigation results.  So anyone who wants more on this, Brian's site, again, is KrebsOnSecurity.com.  And the most recent blogs, postings, the second most recent is about this, where he describes the events that transpired last Thursday.  And then his most recent posting, just recently, was the result of him pursuing back through his various avenues who he thought it was that was responsible, and the conclusions that he came to.  So, and there is more that we haven't talked about.  So it's worth a - anyone who's interested, wow.



LEO:  He's done a lot of research, and actually pretty convincingly has tracked down the kid.  He's, I think, 20, lives in Milford, Connecticut, well-known kid, same kid who hacked Mat Honan.  I've actually had conversations with him on Twitter.  And it's - but there's nothing much you can do about this.



STEVE:  No.



LEO:  It's just so scary, so scary.  The scary thing is if something goes wrong.  If, for instance, you don't expect the SWATing, and you have a weapon, and you think somebody's breaking into your house, and you pull the weapon, you're dead.  It's kind of hard to take that back.



STEVE:  Yup.  And if you're someone with a very different temperament than Brian, where he was completely relaxed, he understood escalating is not what you do at a time like this.  But somebody else who reacts differently, I mean, tensions are high on the side of the police.



LEO:  And as Krebs points out, this also is a great expense and misdirects emergency personnel that might be needed in another situation, a real emergency.



STEVE:  Yeah.



LEO:  So all in all it's really, boy, I just don't know what you do.  I mean, one thing we've got to fix is the spoofability of phone numbers.  It's trivial right now.



STEVE:  Yeah.  So I mentioned a site, SSLLabs.com, a couple weeks ago.  SSLLabs.com has a service, free, that allows you to put the domain of any server, any public web server, into the site, and it will test that site's SSL and TLS security technology.  I mentioned it relative to GRC, my site, because we used to get a D or a D-minus, I don't remember, when I was running Windows 2000.  Because I was supporting older ciphers and because Windows 2000 was so old, I couldn't offer any newer, stronger ones.  It was one of the real benefits for GRC, especially, of moving up to Windows 2008 R2, which I'm going to discuss a little bit more next week because it's one of the questions we didn't get to last week, which we will get to next week, was about that, from some guy who administers - administrates? - a lot of Server 2000 installations.



But this prompted a bunch of our listeners, I probably have no idea how many, to put sites that they are interested in into SSLLabs.com.  I know that many put GRC in because I saw in my logs all of the inbound tests from SSL Labs coming to GRC as people ran the tests themselves.  One listener was very worried because he put the address of his bank, which is TD Canada Trust, and this was easywebsoc.td.com, into SSL Labs and received a grade for his bank's SSL security of F.  It got an F.  You can get an E, by the way, which is somewhere between D and F.  This got his bank an F.  So he wrote saying, "Oh, my god, should I worry?"



So I wanted to create a little bit of context for this, a little more context.  I went back to SSLLabs.com.  And Leo, if you go there - and you could use the link that's in my show notes, if you wanted to, and that brings up the test for this TD Canada Trust bank.  It summarizes all of its findings in four categories:  the quality and strength of your certificate, that is, the certificate that that secure server is offering; the nature of the protocols that it supports...



LEO:  Oh, geez.  That's a pretty big red F.



STEVE:  It leaves, yeah, you can understand why people might be a little concerned if their bank is getting an F.



LEO:  Oh, boy.



STEVE:  The key exchange strength and the cipher suite strength.  So this TD Canada Trust got 100 on their certificate.  So it's a big green bar that goes all the way.  They got a zero on protocol support, and that earned them an instant F.



LEO:  They're using SSL 2.0.



STEVE:  Yes.  And it's not that they don't offer more, but they offer it.



LEO:  They need to turn this off.



STEVE:  Correct.  And so that's what did it to them.  That SSL v2.0 earned them an instant F.  There's no way to get a better...



LEO:  So they're vulnerable to BEAST, is the problem.



STEVE:  Well, actually, no.  That's a different problem.  SSL 2.0 is just no longer recommendable.  And remember that, from our discussions about the way the handshake goes, the client, which is in this case a user, their platform, their Windows, their Android, their iOS, their Mac, whatever, Linux/UNIX, their platform sends to the server a list of ciphers and cipher suites that they understand.  So it's like, here's a menu, a bunch of things that we understand.  So it's up to the server then to choose what it wants.



And so the server looks at its list and compares the list of things it knows about, the different ways to securely interact in detail, and finds, like, arguably the best one, whatever that means, and we'll talk about that in a second because that's where BEAST comes in, finds the best one that it chooses from among what the client has said it understands.



Now, what this means is that, if you had a man in the middle, the man in the middle could intercept the client's initial outgoing connection and hold onto it for a second, then turn around and only offer SSL v2.0 to the server.  Now, my server will say, sorry, if all you've got is SSL 2.0, we can't talk.  And so a contemporary, well-configured web server today...



LEO:  Like my Bank of America, A+.



STEVE:  Oh, yay.



LEO:  Yay.



STEVE:  Good, yes.



LEO:  I had to check it after that.



STEVE:  A well-configured server will not agree to accept a v2.0 SSL connection.  It just says, sorry, if that's all you've got, we can't talk.  Unfortunately, TD Canada Trust does accept it.  So it's this man-in-the-middle vulnerability, the idea that somebody in the middle could downgrade the security the client is actually offering to a level that is so insecure that then there are other exploits which can be used against it.  So that's what earned it an F.



LEO:  Chase, by the way, Chase.com, C.



STEVE:  Yeah?



LEO:  Key exchange was red; cipher strength was yellow.



STEVE:  Yeah.  So the other things that are happening is that, in protocol...



LEO:  This is fun.  I like running this.



STEVE:  Isn't this neat?  It is.



LEO:  I know.  This is awesome.





STEVE:  It's wonderful, yeah.  So remember that the problem with BEAST, the B-E-A-S-T, the browser whatever it was that it stands for, but it's our guys that were on the beach, they realized that any cipher block chaining protocol, where the residual from the end of one block is fed into the beginning of the next, and that is true up to TLS 1.1.  So both SSL 2.0, which is already bad for different reasons, but also SSL v3.0 and TLS v1.0, which is essentially the same as SSL v3.0, they all have their cipher block chaining protocols chaining across the blocks that are being sent, that is, across packets of blocks.  And it's that interpacket chain that creates a vulnerability which can be exploited by this BEAST attack.



So what's happened again is that, when a client offers a bunch of protocols, the traditional wisdom was, oh, cipher block chaining and fancy ciphers like AES-256, for example, those are going to be better than RC4 because RC4 is just a pseudorandom stream generator.  It doesn't use chaining.  And so normally servers put their CBC-based fancy new ciphers first.  And so that's the other thing that SSL Labs tests is essentially it gives the server different sort of - it teases them with different sets of protocols to see which ones the server chooses.  And unfortunately, again, this TD Canada Trust has its CBC ciphers taking priority over the older RC4-based cipher, and once again it loses points because that means it's vulnerable to the BEAST attack because it will happily use this interlocking packet weakened cipher protocol rather than not.



And lastly, under the cipher strength category, it only got a 60 out of 100 because it's still supporting the weakest cipher key lengths ever.  It's got a whole bunch of 40-bit key lengths and some 56-bit key lengths.  And those are just no longer strong enough.  You just can't, you know, we were talking the other day about the 64-bit key, which I can't remember who, it was a service that was saying, oh, well, because of export restrictions we're just using a 64-bit key and not anything higher.



LEO:  Evernote.



STEVE:  That's right, Evernote.  But here, this is 40 and 56-bits.  So there's just no reason to offer these weaker ciphers.  And the server identifies itself as IBM_HTTP_Server and is deployed by AkamaiTechnologies.com.



LEO:  Oh, it's Akamai.



STEVE:  So this is a major cloud deployment IBM server that is just sort of default configured.  And this is what you get if you just install the software and don't do any tweaking.



LEO:  Ah, that's it.  Of course.  Yeah.



STEVE:  Yes.  Yeah, it just gives you everything.  Here's everything.



LEO:  But you've got to think a bank has some pretty high-qualified, heavy-duty experts, security guys.



STEVE:  Well, I think what they've done is they've subbed this out.  They've said, okay, we know about charging people.  We don't know about security.  And Akamai says, oh, I bet you they've got gold seals and all kinds of junk all over their website, talking about how wonderful their security is.  But it's not.  It's just, unfortunately, not - obviously, here, they've got an F at the moment.  So, I mean, this is not going to hurt TD Canada Trust in terms of, like, their reputation because only people who listen to this podcast know about the details of the way they're connected.  But if a bad guy was really, really intent on exploiting their customers, it's much more possible to do so with a connection of this low grade than not.  So anyway, that's what that's all about.



LEO:  And who knows who to blame.  I mean, I wouldn't rush to blame Akamai.  It may be that when you set up your server at Akamai, you have checkboxes, and whoever was doing TD Ameritrade said, yeah, we should make it as flexible as possible, let's make sure we support everything, and checked all the boxes.  Who knows how this happened?  I wouldn't blame anybody.  A surprisingly large number of banks are pretty good, though.  Wells Fargo, straight A's.



STEVE:  Nice.



LEO:  Yeah.  Chase kind of - some middle-of-the-road stuff.  BofA, A's.  So it just, you know, this is probably a worthwhile thing for people to run:  SSLLabs.com.  They have a site test right there.



STEVE:  Yeah.  And, if you find out that your bank is rated low...



LEO:  Complain.



STEVE:  By all means, send a note.  Yeah, complain, send a note to some web admin somewhere and say, hey, check this out.  Are you sleeping well at night?



LEO:  Yeah.



STEVE:  Just a note that Windows 7 Service Pack 1 has finally moved from "install it if you want" to "we're going to give it to you without you asking for it" mode.  That happened also with Patch Tuesday last week, but I didn't see it in time to mention it.



Also at the same time, and this is relevant for anybody doing new installations of either Windows 7 or Server 2008, Microsoft also released a - and this is appearing under Windows Update under "Optional" - a complete, comprehensive rollup of all post-Service Pack 1 security patches since Service Pack 1.  And having just installed a bunch of Server 2K8s and also a bunch of Windows 7 boxes, I mean, this is a great benefit to have this.  The alternative is, you know, you install Windows 7; then you install SP1, which has been available for quite a while; but then you do, okay, give me all the other security patches.  And there's, like, 64 of them.  And they install one by one.  Each one takes a snapshot of all of the system's configuration at the time it was installed and archives everything that it's replacing.



So the point is you end up with this massive blob of, like, history which has been stored on your system.  It just annoys me to see, like, because Microsoft allows you to uninstall any of these things.  You can roll them back, if you need to.  And so because you're installing individual update events, it's archiving all the things it's changing every single time.  Many of them are completely redundant.  So I'm really excited and pleased.  I wish this had come out two months ago.  But still, it's better to have it now than not.  So it's under "Optional Updates," and anybody - there's really no need to do it if your system has already been kept up to date because it'll - you'll probably run it, and it'll say, well, there's nothing for me to do.



But anybody installing and setting up a new Windows 7 system or new Server 2008 R2, which is essentially the server version of the same Windows 7 operating system, definitely wants to know about this.  So you would install Windows 7; presumably then Service Pack 1, it's probably a prerequisite; and then immediately install this rollup, and you're saved from, like, this individual annoying incremental update across the board.



LEO:  Love those rollups.



STEVE:  Yes.  They are.  And no one was really expecting this because Microsoft has moved on, famously or infamously, to Windows 8.  And I just, oh, my goodness.  How are you feeling about that, by the way?



LEO:  Well, A, I think it's safe to say there will not be a Service Pack 2 for Windows 7.



STEVE:  No, that was the point I was making was that nobody expected...



LEO:  Even one.



STEVE:  Nobody expected even, well, we had SP1 a long time ago.



LEO:  Oh, we had one, the rollup, that's right.  We talked about this in Windows Weekly.  They're not calling it a service pack, but it is, it's a rollup, yeah.



STEVE:  Right, yeah.



LEO:  You know, Windows 8, I have such mixed feelings.  Under the hood, I think it's widely agreed it is better in a great many respects.  Certainly file copy works better, a lot of the things work better.  It's faster.  Security, well, we'll see. 



STEVE:  Some guy on TV is saying that his mother finds it very intuitive, but I just, you know, I'm not getting...



LEO:  Oh, I don't find it - I think the real problem, as I see it, is it's really two different operating systems.  They say, well, that's just - we've replaced the Start Menu with a Start Screen.  No, really, you've replaced - it's more than just a start screen.  It is Metro, and there are Metro apps, and there are desktop apps.  And it's a little confusing.  There's two versions of Internet Explorer with different capabilities, and you're not always sure which is running.  So it's just, it's things like that.  I think they'll probably iron these wrinkles out, but - I'm not dis-recommending it.  I just...



STEVE:  They stumbled on something called Vista, and then they came out with Windows 7.  So maybe there will be a 9, and they will fix, in doing 9, they will fix what they learned about 8.  In which case I'm pretty much staying with my every-other-OS rule.



LEO:  Seven's awfully good.  I thought 7 was the best version.



STEVE:  Oh, Leo, I will be so happy with it.  I've been using it a lot more.  I'm very familiar with it.  I set up a new 7 machine here because its OS is a clone, essentially, of the Server 2008 R2 that I'm running GRC servers, the newly set-up servers on.  And the more I look at it, the better I get to know it, the more impressed I am.  I'm very, very, very impressed with Windows 7.



LEO:  Yeah, yeah.



STEVE:  Still on XP because it does what I need.  But I've got a 7 box next to me.



LEO:  I think it's conceivable that you could make Windows 8 run better just by eliminating Metro.  And there are ways, third-party ways to do that.  I don't know.



STEVE:  To revert it to something that looks like...



LEO:  Yeah.  Get rid of that Metro stuff.



STEVE:  So something really confused people this week.  Some researchers looked at an update that Cisco made to their IOS.  Now, this is not "iOS" the way we always talk about it, meaning Apple's OS.  This is capital I, capital O, capital S, that well predates Apple having anything called iOS.  I've got IOS running in my Cisco router here and at the datacenter.  Cisco is, of course, a major router and switch manufacturer from the old days.  IOS is their Internet operating system that they've always had on their devices.  They have traditionally had a very strong password encryption, one-way, hash-based.  It's got all the buzzwords.  It's PBKDF, password-based key driven - what? - key derivation function.  It runs a thousand iterations of MD5, of the MD5 hash, with salt.  So it's salted, it's got a good hash, and it runs it a thousand times.  Everybody was happy.



Then, curiously, some researchers looked at what they had done when they, with some ballyhoo, said, hey, we're coming up with a new password scheme.  It does one iteration of SHA-256 with no salt.  And people are like, huh?  What?  Because, I mean, with current state-of-the-art GPU-accelerated hashing, SHA-256 was designed for speed.  It loves to be run in parallel on GPU hardware, not to mention custom silicon just built for that.  And nobody could understand what was going on.  So these researchers brought this to Cisco's attention; also, apparently, through some responsible disclosure, made this public.  And Cisco has a response, a so-called "Cisco Security Response," and I'll quote a little bit from it.



They said: "The design called for using Password-Based Key Derivation Function version 2 (PBKDF2), as described in RFC  2898 section 5.1, with the following input values:  hash algorithm, SHA-256; password, the user-provided plaintext; salt, 80 bits generated by calling a cryptographically secure random number generator; and iteration count, 1,000."  And they said:  "Due to an implementation issue" - now, this is the PR speak.  At no point do they explain anything about it.  They say: "Due to an implementation issue, the Type 4 password algorithm does not use PBKDF2 and does not use a salt, but instead performs a single iteration of SHA-256 over the user-provided plaintext password.  This approach causes a Type 4 password" - which is the new one - "to be less resilient to brute-force attacks than a Type 5 password of equivalent complexity."  So they're saying yeah, we know.  And there it is.



LEO:  Yeah.  We know.



STEVE:  So an implementation issue.  Now, I am not, our listeners know, I am not a conspiracy guy.  But I don't get this.  I mean, I don't get how Cisco would apparently deliberately and knowingly weaken, dramatically weaken the login strength of their router technology.  I can't explain it.  They did.  And they got caught, essentially.  They didn't document it.  It wasn't public.  In fact, they documented it as strong.  And when the researchers looked, they said, uh, no.  This is - what you said you did is not what you did.  So they had to know.  They're saying an implementation issue.  This is not even conceivably a bug.  You can't think of a bug, I mean, maybe if it had done 10 instead of a thousand iterations, oh, well, we initialized our counter wrong.  Well, no, there's no counter.  And there's no salt.  So I'm just, okay.



LEO:  And IOS is used in all the - in the commercial Cisco routers; right?  What is...



STEVE:  Oh, my, yes.  Oh, I mean, like, yeah, yeah.  It is the big iron router of the Internet.  Now, since then there's competition.  There are other people also in the game.  Cisco still has a huge presence out on the Internet.  And every so often weaknesses are found in the current version of IOS, and so people upgrade.  And so, as they upgrade to newer versions of IOS, they would be, over time, inheriting this dramatically weakened password hash on routers that form essentially the backbone of the Internet.  So I don't know why.



LEO:  [Laughing and singing] I don't know why, but they do.



STEVE:  So, interesting publication came out on the 18th, so two days ago, Monday, from the U.S. Department of Treasury, the Financial Crimes Enforcement Network.  And if you just Google "FIN-2013-G001," it's the first link that comes up, FIN-2013-G001.  What you get is a PDF about Bitcoin.



LEO:  From the Financial Crimes Enforcement Network.



STEVE:  Yes.  And the subject is, dated March 18th, Monday, Application of the - they call it "FinCEN," Financial Crimes Enforcement Network.  So Application of Regulations to Persons Administering, Exchanging, or Using Virtual Currencies.  So, you know, they're...



LEO:  They're calling for a crackdown?



STEVE:  No.  The good news is we're okay.  And that's why this is amazing.  There's been grumblings in Congress.  Various random representatives and senators have said [grumbling], you know, we need to outlaw this crazy thing.  So they define a user of - well, so in sort of a summary at the top it says "A user of virtual currency is NOT" - in bold italics - "what they call an MSB."  And they later define MSB as meaning Money Services Business, which is subject to regulation.  So they say, "A user of virtual currency is NOT an MSB under FinCEN's regulations, and therefore is not subject to MSB registration, reporting, and recordkeeping regulations."



LEO:  But somebody like Mt. Gox, which is an exchange, would be.



STEVE:  Yes.  Yes.  So they're saying, "FinCEN's regulations define currency, also referred to as 'real' currency, as 'the coin and paper money of the United States or of any other country that [i] is designated as legal tender and that [ii] circulates and [iii] is customarily used and accepted as a medium of exchange in the country of issuance.'  In contrast to real currency, 'virtual' currency is a medium of exchange that operates like a currency in some environments, but does not have all the attributes of real currency.  In particular, virtual currency does not have legal tender status in any jurisdiction.  This guidance addresses 'convertible' virtual currency.  This type of virtual currency either has an equivalent value in real currency, or acts as a substitute for real currency.'"



And I'm skipping way down because I highlighted the things I wanted to share where they're explaining.  They say:  "This guidance refers to the participants in generic virtual currency arrangements, using the terms 'user,' 'exchanger,' and 'administrator.'  A user is a person that obtains virtual currency to purchase goods or services.  An exchanger is a person engaged as a business in the exchange of virtual currency for real currency, funds, or other virtual currency.  An administrator is a person engaged as a business in issuing (putting into circulation) a virtual currency, and who has the authority to redeem (to withdraw from circulation) such virtual currency."



And then under "Users of Virtual Currency," they said:  "A user who obtains convertible virtual currency and uses it to purchase real or virtual goods or services is NOT" - again, bold italics - "an MSB under FinCEN's regulations."  So that's more good news.  "Such activity," they say, "in and of itself, does not fit within the definition of 'money transmission services'" - so that's the key phrase that they look for - "and therefore is not subject to FinCEN's registration, reporting, and recordkeeping regulations for MSBs."



And then lastly, under "E-Currencies and E-Precious Metals" - I didn't know what an e-precious metal was.  I guess there's a market, an electronic market for that.  But they said:  "The first type of activity involves electronic trading in e-currencies or e-precious metals."  And they say:  "In 2008, FinCEN issued guidance stating that, as long as a broker or dealer in real currency or other commodities accepts and transmits funds solely for the purpose of effecting a bona fide purchase or sale of the real currency or other commodities for or with a customer, such person is not acting as a money transmitter under the regulations."



And actually there's one last thing I forgot.  Under "De-Centralized Virtual Currencies" - so, I mean, they're leaving no doubt here.  They said:  "A final type of convertible virtual currency activity involves a de-centralized convertible virtual currency (1) that has no central repository and no single administrator, and (2) that persons may obtain by their own computing or manufacturing effort.  A person that creates units of this convertible virtual currency and uses it to purchase real or virtual goods and services is a user of the convertible virtual currency and not subject to regulation as a money transmitter."



So for we end-users of Bitcoin, there is no longer any gray area at all.  The United States Department of Treasury Financial Crimes Enforcement Network says we're doing nothing wrong.  I saw this, and I also thought - I highlighted it, and I'm going to send the PDF off to Mark Thompson because, as I mentioned a couple weeks ago, he's experimenting with taking bitcoin in exchange for physical goods.  And for anyone who's interested in or has bitcoins or wants to mine bitcoins and wonders about the legalities of what they end up doing with them, this makes it clear.  We're okay.



LEO:  The only thing that bothers me a little bit about Bitcoin is I'm just used to the notion that money is tied to some sort of creation or physical, you know, doing something.  And Bitcoin's really just tied to how many CPUs and GPUs you want to put in series.



STEVE:  Well, okay.  Of course we famously went off the gold standard when money was...



LEO:  Right, so it's not tied to gold, either, is it, yeah.



STEVE:  And U.S. currency is tied to nothing.  I mean, it is - it's created out of thin air.



LEO:  Well, initially.  But there's something going on.  For me to get money from an advertiser, for instance, we do something.



STEVE:  Well, just agreement, Leo.  That's all it is.



LEO:  Well, the actual value of it is by agreement.  But it has a natural life because we agree what something is worth by consensus.  I don't know.  It's just there's something, it feels like there's something missing in Bitcoin that, well, all you have to do is run a giant server farm, and you can have as much money as you want.  That doesn't seem quite right to me.



STEVE:  Yeah, it's - well, okay.  I mean, that puts money into circulation, bitcoinage into circulation.  What is so elegant - and again, we really nailed this in our Bitcoin podcast [SN-287].  So anybody who hasn't yet heard the Bitcoin podcast, let me commend everyone to go back and listen to it because you'll get this.  What is so elegant is, independent of how much effort people put into mining, we already know today, yesterday, and tomorrow the rate at which new bitcoins come into the realm.



LEO:  Right.  So really those Bitcoin computers are just like the printers at the Treasury.  They're just creating the currency which we will then determine the value of by trading, just as we do with dollars.



STEVE:  And think of it this way.  The more printers there are, the slower they run.



LEO:  Right.  So that's naturally gated; right.  And there will be a maximum amount of coinage reached in a few years, and that'll be that.



STEVE:  In 20, what is it, 2040 or - I think at 2040 it hits, like, it stops.  It's already slowing down, and it's following a curve.  And so the rate at which new bitcoins are being minted is following a trajectory that is absolutely set.  Nothing can change it.  And we will then end up with a crypto - I mean, the Internet, the world will have a cryptographically strong, tradable, virtual currency.  And people will be buying and selling it using it, just like any other currency.



LEO:  Currently a bitcoin's worth $63.98 on Mt. Gox.



STEVE:  Woohoo, and I've got 50 of them.  So...



LEO:  Yeah.  But it's really an interest- I think it's starting to gather critical mass.  That's why it's of interest is it's no longer just kind of an academic exercise.  It seems to actually be gaining.  You can buy pizza with it.  God knows you can buy drugs with it.



STEVE:  My computer made $3,000.  It paid for itself and a few other machines.



LEO:  Right, right.



STEVE:  Just, like, overnight.  I woke up one morning, and I happened to check, and there was 50 bitcoins.  Like, hey.  I like this.  Now, that was a long time ago.  And it is a statistical thing.  So the chances today of that happening again are ridiculously vanishingly small.



LEO:  That's the other thing that bothers me.  But all currencies are essentially, unless they're tied to something like gold, something of actual value, they're all Ponzi schemes.  They're all pyramid schemes.  You just have to get in early.



STEVE:  Well, and the problem - the argument for releasing the dollar, the U.S. dollar from the gold standard, of course, was that our economy was inherently creating new wealth.  We were actually creating new value.  We needed money to be brought into the economy at the same rate that actual new value was being created.  And so rather than, like, ridiculously inflating the cost of gold, we disconnected it so that it's like we could - money could track the actual creation of wealth, so it was pretty much at parity.



LEO:  So you don't need to be a bitcoin miner.  At some point bitcoins will be exchanged for goods and services in a free fashion.  And then it's a true currency.  The miners are merely putting the currency into production in a way that's frankly more rational than the Federal Reserve Bank printing something.



STEVE:  Yes.  You could argue that it is less prone to, well, it is absolutely tamper resistant.  The technology doesn't allow tampering.  And the crazy mining people, what they're doing is they're saying, okay, it's harder to make bitcoins today than it was.  So I want to compete with the other crazy people.  So the idea is, the more hashes you can produce, the more - remember that the way this works is it's the number of leading zero bits in the hash.  And so the requirement is changing in the way that - in the guesses you make to perform the hash of a chain in order to find the result that gives you all zeroes at the front of the hash.



So what's happened is, among the miners, there has been this crazy escalation in performance.  But the Bitcoin technology has immediately reacted by making them work much harder than if this escalation hadn't happened.  So in fact, now what we're seeing is mining pools.  It's so difficult to actually get physical bitcoins yourself that people pool their resources.  And if anyone in the pool scores a bitcoin, that bitcoin is divvied up based on their relative computing contribution to the pool.  So, I mean, it's really been a very clever evolution over time.  And as you say, Leo, I think it is ultimately, I mean, it's a phenomenon that the Treasury Department has just blessed, essentially.



LEO:  Wow.  That's stunning.



STEVE:  They said we have no problem with this.



LEO:  Now, there are other, there are competitors like Litecoin.  But that's okay.  There can be other coins.  First of all, Security Now! 287 we explained the cryptographic standard behind Bitcoin.  So go back to 287 and listen to that one.  And there's a book which I am about to read, I haven't read it yet, but it's been on my  Audible list for some time, called "The End of Money," that talks about this whole notion.  And money is just an agreed thing.  It's not - there's no inherent value.  So I just - I find it fascinating and somewhat unsettling.  But I guess, as with many modernisms, we'll get used to it.  And I can see this becoming an accepted standard, not eliminating greenbacks or euros or anything else, but supplementing it.



STEVE:  Well, and it...



LEO:  I won't be able to pay my taxes in bitcoin, I don't think, in my lifetime.



STEVE:  At some point, because it's inherently virtual, it may be less prone to manipulation than physical currency which is sort of trying to straddle the virtual Internet world.



LEO:  Right.  We have seen peaks and valleys in value, however.



STEVE:  Yeah, I mean, there have been...



LEO:  There've been crashes.



STEVE:  Yeah.  I mean, I didn't know that it was at 63.  That's great.  I'm holding onto mine.



LEO:  I would hold on.  It's only going to get more valuable.



STEVE:  I think so.  Well, because they're not going to make any more.



LEO:  There's built-in scarcity, yeah.



STEVE:  Yeah.  And in fact what may have to happen, Leo, is that there will be, once it stops, then there will be only this much bitcoin, and it will have a value.



LEO:  Which, by the way, eliminates inflation.



STEVE:  Yes.



LEO:  I think, if I understand how all this stuff works.



STEVE:  Yup.



LEO:  There's a big payments conference [Innovation Project 2013] going on right now.  And Al Gore apparently, according to the chatroom, today said he's all in favor of Bitcoin.  He says, "I'm a [big] fan of Bitcoin," at the payments conference today.  So, wow.



STEVE:  Just the technology is solid.  We have just one more really interesting thing to keep an eye on.



LEO:  Yeah, yeah.  Well, you introduced me to Bitcoin, and I'm going to keep on you on this.



STEVE:  Read that book.  Read that book.



LEO:  I am.  Have you read it?



STEVE:  I bet you get - no, I haven't.



LEO:  Yeah, I can't wait.  I downloaded it months ago, and I just haven't gotten around to...



STEVE:  I can imagine.  You've got a few things going on.



LEO:  Yeah.  I keep reading - I do fiction/nonfiction, and I happened to pick a 48-hour book.  Actually it was two books, so it's more like a hundred hours.  But I'm almost done.



STEVE:  Okay.  Now I've got bad news.



LEO:  Oh, no.



STEVE:  Yeah.  It's really bad.



LEO:  What?  Let me scroll down and see.



STEVE:  Okay.  I created a bit.ly shortcut.  The bit.ly shortcut is interscan, bit.ly/interscan, interscan as short for Internet scan.  So bit.ly/interscan.



LEO:  Oh, dear.  I'm reading it now, the "Internet Census 2012:  Port scanning /0 using insecure embedded devices," from Carna Botnet.



STEVE:  Yeah.  So here's the deal.  First of all, I'm going to quote some things from this paper.  Everybody, I tweeted the link, but also the bit.ly link is easy to find.  You're going to love the graphics.  Click, up on the top, click the graphics button.  And look, and he's also got super-high-resolution versions of those thumbnails.



So here's what happens.  The guy, he says "we" throughout this paper.  And at the end he confesses, okay, "we" actually means "I" because it just was impossible to say "I this," "I that," and "I this" and so forth throughout the whole thing.  So it's a guy.  And with any luck he kept it quiet.  And it's a good thing it's one guy because secrets are difficult to keep among people because then there's no accountability.  Operating alone for six months, he poked his head out onto the Internet, wondering how many telnet ports were open.  And he...



LEO:  Telnet's the old, insecure way of getting terminal access to a server.



STEVE:  Yes.



LEO:  Nobody uses it anymore.  We all use SSH.  Or maybe not [laughing].



STEVE:  Okay.  1.2 million unique, unprotected devices exposing telnet on the 'Net.



LEO:  Oh, dear.



STEVE:  What he did was he scanned a small piece of the 'Net and found a surprising number of telnet ports.  That's port 23.  It's one of the ones that ShieldsUP! has been checking for people from day one because it is so bad to have - arguably, it's worse than Windows file sharing, port 23.  And no one blocks it.  That is, ISPs, it's off their radar.  They're not blocking it.  And as you said, it's like remote terminal.  You use a telnet client, which are freely available.  You simply connect to this port, and you get a prompt.



LEO:  Now, you'd have to know a login and password.



STEVE:  And he tried either blank logins or admin:admin or root:root.  He also tried admin:blank password and root:blank password, and that got him into the majority of these boxes.



LEO:  Oh, oh.  So this map that we're looking at is 460 million IP addresses, all of which respond to, well, these are ping requests.  I don't care about pings.



STEVE:  I know.  Leo, he wrote a bot which he then carefully uploaded into an initial set of these, which then scanned for others, and they sent themselves there.  He wrote a worm, essentially...



LEO:  This guy should be - I hope he's being careful because this is the kind of thing people go to jail for.



STEVE:  Oh, Leo.



LEO:  Unmalicious or not.



STEVE:  Here's the problem.  Now everyone knows.  This, I mean, this is why this is the worst news I've had this year.



LEO:  Well, but who - but what are these servers?  They're probably old machines in the closet and stuff.  I mean, what are they?



STEVE:  It doesn't matter.  They can launch DoS attacks.



LEO:  Oh, they can be used.



STEVE:  They can be - they are - they're Linux machines.  So he says:  "We used a strict set of rules to identify the target devices' CPU and RAM to ensure our binary was only deployed to systems where it was known to work."



LEO:  So this is 420 - this map I'm going to show you from the paper...



STEVE:  420,000 devices.



LEO:  Botnets.



STEVE:  Yes.



LEO:  These are all botnets.  They're installed.



STEVE:  These are, no, these are host - these are available host machines with telnet exposed that will accept a remote load of code.  This guy is a good guy.  He wrote his system so that he was very careful not to crash anyone's machine.  They expire and remove themselves.  I mean, I really want...



LEO:  Yeah, but he's clearly - he's in trouble.  He's broken the law to do this.



STEVE:  Oh, my god.  It's why he is completely anonymous.  He posted this stuff up on Bitbucket.



LEO:  Oh, okay.



STEVE:  He has a PGP signature only to prevent anyone else from claiming that they did this.



LEO:  Got it.  But we don't know who he is.



STEVE:  We will hopefully, for his sake, never know.  And it doesn't matter.  The problem is all the bad guys know.



LEO:  Everybody can do it now.



STEVE:  Yes. 



LEO:  In fact, I could write a script to do this in minutes.



STEVE:  Oh, my god, Leo.



LEO:  This is easy.  And by the way, if you look at the map, the heat map, it's population centers.  You could, if you overlaid this with a map of where the populations are in the world, it would look just like this.



STEVE:  So he said:  "We also excluded all smaller groups of devices since we did not want to interfere with industrial controls" - he found open, accessible industrial control systems - "or mission critical hardware in any way."  He found that, too.  So the bad guys are going to.  He said:  "Our binary ran on approximately 420,000 devices.  These are only about 25 percent of all unprotected devices found."  Okay?  420,000 was 25 percent, meaning that it was 1.3 million potential targets, from which he carefully selected a subset because that's all he needed.  But not everyone is going to be that thoughtful and careful.



He said:  "There are hundreds of thousands of devices that do not have a real shell so we could not upload or run a binary, a hundred thousand MIPS 4KCE machines that are mostly too small" - now, that's probably Cisco routers because they use MIPS, or PowerPCs, I can't remember now, but so small machines - "and not capable enough for our purposes, as well as many unidentified configuration interfaces for random hardware.  We were able to use ifconfig" - I mean, you get a full Linux prompt.  You're sitting there at somebody else's Linux machine, and you have access to their LAN also.



LEO:  But that's really not as bad as the fact that these default passwords still work.



STEVE:  I know.



LEO:  So what it really is, is somebody installed Linux, didn't pay attention.  Telnet was turned on.



STEVE:  No, no.  No, no.  I don't think this was installed.  I think these are embedded Linux...



LEO:  Ah.



STEVE:  Well, okay.  Many of these are HP printers.  Scroll down to the bottom of that, and you will see the enumeration of these.



LEO:  Okay.  But so somebody hacks my printer.  It's not the end of the world.  Can you use it as a bot?



STEVE:  Yes.  He did.  Yes.



LEO:  Wow.



STEVE:  So he says:  "We were able to use ifconfig to get the MAC address on most devices.  We collected these MAC addresses for some time and identified about 1.2 million unique unprotected devices."



LEO:  Nice thing about MAC address is you can tell who the manufacturer is.



STEVE:  Yes.  And it doesn't change when the IP address floats around.  So if these things were, like, on ISPs floating around, this disambiguated them.  He says, "This number does not include devices that do not have ifconfig."  So only the subset of those, and that was 1.2 million, had ifconfig utility installed on this Linux machine, accessible over port 23 to anyone with a telnet client.  So finishing up under "Trivia," he said:  "A lot of devices and services we have seen during our research should never be connected to the public Internet at all.  As a rule of thumb, if you believe that 'nobody would connect that to the Internet, really nobody,' there are at least 1,000 people who did."



LEO:  HP LaserJet P2055 Series.  There are 6,628 of those.  LaserJet 4250, there are 4,678 of those.  I don't know, you know, what?  Hello?



STEVE:  He said:  "Whenever you think 'that shouldn't be on the Internet, but will probably be found a few times,'" there are a few hundred thousand of those.



LEO:  I love all these UPnP devices.



STEVE:  Oh, my god, I know.



LEO:  Using that UPnP hole, the Portable SDK from Intel.



STEVE:  Uh-huh.  He says, "Like half a million printers, or a million webcams, or devices that have 'root' as their root password."



LEO:  Oh, scary.



STEVE:  He said:  "We would also like to mention that building and running a gigantic botnet and then watching it as it scans nothing less than the whole Internet at rates of billions of IPs per hour, over and over again, is really as much fun as it sounds."



And then finally, under "Who and Why," he said:  "You may ask yourself who we are and why we did what we did.  In reality, 'we' is me.  I chose 'we' as a form for this documentation because it's nicer to read, and mentioning myself a thousand times just sounded egotistical.  The why is also simple:  I did not want to ask myself for the rest of my life how much fun it could have been or if the infrastructure I imagined in my head would have worked as expected.  I saw the chance to really work on an Internet scale, command hundreds of thousands of devices with a click of my mouse, port scan and map the whole Internet in a way nobody had done before, basically have fun with computers and the Internet in a way very few people ever will.  I decided it would be worth my time."



LEO:  Yeah.



STEVE:  Now, this guy, in this paper, which is up on Bitbucket, it's linked to from the link I gave, bit.ly/interscan, he lays out the architecture.  This is even if somebody copied what he did.  But the problem is he was very white hat.  He was very careful.  He didn't need to push the limits because he had all the willing machines he needed, even if he only used those with lots of RAM and lots of CPU horsepower.  He also ran his bot at the lowest possible priority so that it wouldn't interfere with anyone else's traffic, and he didn't need it to take over.  But, Leo, mark my words, I mean, this is - all the hackers know this now.  This is going to launch a revolution.  And it's not good because this is going to be far more fun than them trying to get people to click on a link in a browser to get some bot loaded into someone's machine that then lives for a while.



LEO:  There's millions of machines just sitting there waiting.  Wide open.



STEVE:  Yes.



LEO:  Waiting for - just saying, come on, come on.



STEVE:  Accepting a command-prompt logon and then...



LEO:  He even told people what passwords to try.  I mean, he's given - the farm has been given away.



STEVE:  Yes, completely.



LEO:  Although it's so obvious that I can't imagine others have not already - are not aware of this.  He took a big chance in coming public with this.  And my strong advice to him is do not boast.  Do not go into IRC, say, yeah, that was me.  Do not say a word.  Go underground, deep, deep underground because you'll be going to jail for a long, long time as soon as anybody catches you.  Unfortunately.  Because I don't think he's done anything wrong.  But now the bad guys can.



STEVE:  I know.  They all know.



LEO:  And what that means is massive botnets for DDoS attacks; right?  That's the primary use of this.



STEVE:  Yes.  Yes.  Or email spamming, I mean, anything where you could use distributed low-power machines.  Well, basically botnets.  He really lays it out.  His machines expire themselves.  They leave gracefully.  I mean, it took him six months to build this and test it and deploy it.  And he talks about PHP and Python code and how he set it up.  And he had a web interface that allowed him to control this thing.  I mean, the guy had a ball.  And he had a sort of a...



LEO:  A little too much fun.



STEVE:  Yeah, I mean, I would - this would be just a kick in the pants.  But the bad news is, this is not rocket science.  This is standard Internet technology.  Everybody knows how to do this.  And the revelation that there are this many machines that you can log onto remotely that are unattended, they're in people's closets, they're in people's racks that have been forgotten, I mean, they are sitting there waiting to be taken over.  And just count the minutes.  I mean, we're going to be hearing about this.  This is not over.  This has been a nice, happy little white hat adventure.  There's more coming because there's no way this is not going to get leveraged.



I don't know it gets fixed.  That's the problem, is these are machines that will never be changed.  They will never be secured.  We talked about the UPnP problem and how widespread that is and that there are many boxes that are never going to have their Universal Plug & Play locked down because people are not coming by ShieldsUP! at GRC to scan themselves and take action affirmatively.  Similarly, these port 23 telnets with empty or default logons, those are going to be there forever.  And now everybody knows.



LEO:  Yeah, because whoever turned that on, whether it's an HP printer, although that's kind of a shocking flaw, clearly didn't pay any attention.  They turned on a telnet service, didn't modify the password.  You shouldn't have telnet on anyway.



STEVE:  But this can't be 120 million people or 420 million people.  This just has to be...



LEO:  No, it's the manufacturer.



STEVE:  Yes.  It's the manufacturer.  And, I mean, that's the problem.



LEO:  So somebody's saying "What's the fix?"  There's no fix.  This exists and will always exist.



STEVE:  Yes.  It's done.  It's out there.  It's too late.  It's over.



LEO:  Well, I don't know if it's over.  But...



STEVE:  Oh, wait.  It's over.  No, I mean...



LEO:  You expect to see massive DDoSes all of a sudden?



STEVE:  I don't think - well, okay.  There are already massive DDoSes.  There are already botnets.  They're just not taking advantage of people's routers.  And so now here's a whole 'nother class of opportunity for networks, for malicious networks, and for people to, like, bounce their traffic a few times.  I mean, you can't do - well, I don't know.  I was going to say you can't do really sophisticated things like Tor nodes.  But maybe you can.



LEO:  Depends what's inside that telnet.



STEVE:  Yeah, if you have enough...



LEO:  If there's a full Linux box, you could do anything you want.



STEVE:  Yup.



LEO:  And I imagine, given the millions of available devices, there are probably hundreds of thousands of full Linux boxes at the other end of this.  I don't know why.  Certainly, anybody who's at home and almost anybody listening to this show has a router.  And this isn't going to happen unless the router has telnet turned on.  But I doubt it.



STEVE:  All you have to do is go to ShieldsUP!.



LEO:  Go to ShieldsUP!.



STEVE:  There's no test you can run at GRC in ShieldsUP! that won't tell you if you have telnet port 23 open.



LEO:  Port 23 is turned on.



STEVE:  It's the first thing I check.  It's just like, oh, my god.



LEO:  Actually, the first thing you check is probably NETBIOS because that's why you made ShieldsUP!.



STEVE:  Yeah, I do.  And actually I greet you by name if you're crazy enough to have NETBIOS enabled.  I say, "Hi, there, Mark."



LEO:  Hey, Leo, you have NETBIOS turned on, huh?  Wonder why you knew that?



STEVE:  That was the original shocker.  People would come to GRC for the first time, and I would know their name.  And it's like, holy crap, how does he know my name?



LEO:  Wow.  This is interesting.



STEVE:  Oh, Leo.  So everybody listening, you've got to go:  bit.ly/interscan.  Read this guy's paper.  Look at those images.  The images are, like, wallpaper for your desktop.  They are gorgeous.



LEO:  They're beautiful.  And they're very high-res.



STEVE:  Yes, he's got them in 2200x1600 and higher.  And did you see the animated one?  There's one you can click on to start the animation, where it shows he took snapshots as the Earth rotated, and you can see a very dim, whatever they call that cool sine wave that moves across the map, showing where the sun is lighting the landscape.  There's a neat name I can't think of.  Begins with D, maybe?



LEO:  Oh, yeah, the, yeah, the terminator.



STEVE:  Terminator, yes, you can see the terminator slowly move back and forth.  And you see the lights, you see the scan change over time.  So some of these things are being turned on and off.  And they're, like, on during the day...



LEO:  Well, they're printers [laughing].



STEVE:  ...and off at night [laughing].



LEO:  That's what I find amazing.  These things are printers in many cases.  So people are saying, oh, well, everybody ought to have a router and turn - but really these are neglected devices or devices people don't even know have telnet turned on.



STEVE:  The word is "appliance."  They are appliances.



LEO:  They're appliances.  They're on the Internet direct because, if you're behind a router, chances are pretty good it's not exposed.  These are Internet appliances, like printers, that are just sitting on the 'Net for some reason.



STEVE:  Internet-facing appliances.



LEO:  Which is bizarre.



STEVE:  Yeah.



LEO:  Yeah, I like this animated GIF.  This is good.  You can see the terminator line.



STEVE:  Isn't that neat?  He did a really nice job.



LEO:  Well, you know, he's probably given way too many clues as to his identity.  I hope...



STEVE:  Whoever you are, hats off to you for a beautiful piece of work, and darn you for exposing it.  I mean...



LEO:  Well, I bet you bad guys knew this.  This isn't that hard to figure out.  Is it?



STEVE:  I guess maybe.  Maybe bad guys were keeping it quiet?



LEO:  That's what my guess would be.



STEVE:  It's just entirely - okay, but look, Leo.  We are always running across things that are frightening that no one knew, like the Universal Plug & Play port being open.  It's like, there they were, all open.  And it took HD Moore to scan the 'Net and find them.



LEO:  I'll tell you, though.  If I look at my server logs, I see pretty much nonstop telnet bangs on my servers.



STEVE:  Oh, I know.  I know.  23 is...



LEO:  Mostly from China.  And so I'm pretty much guessing some smart university student in China, or maybe somebody in the military, has figured this one out.  Don't you think?



STEVE:  Yeah.



LEO:  Because, I mean, telnet is - that's the first thing people try.



STEVE:  And Leo, the nice thing is there's enough there for everyone to share.



LEO:  [Chuckling]



STEVE:  You got 420 million.  How many do you need?  How greedy are you?



LEO:  Well, okay.  So the way a DDoS works is you have enough machines pinging a site that the site, no matter how much bandwidth it has, cannot service them all.  The bandwidth gets clogged.  And of course there are companies, lots of them, that provide DDoS protection by merely widening the pipe.  But with millions of machines, I don't know how many it would take to kind of overrun the largest possible pipe.



STEVE:  It's dishearteningly few.



LEO:  Several hundred thousand would be more than enough; right?



STEVE:  Well, and the worst attacks are the in-protocol attacks.  A ping is sort of old school, and lots of ISPs block them.



LEO:  You send a SYN, though, if you send a SYN to port 80, you can't block that because you wouldn't have a website.



STEVE:  What's worse is send a valid request.



LEO:  Okay.



STEVE:  Because then the website has to deliver a page.



LEO:  Has to respond, yeah.



STEVE:  And if it's a PHP site, and it's using computational resources to interpret and...



LEO:  Could bring it down instantly.  Look how many sites we bring down all the time.



STEVE:  Yes, yes.  The moment we talk about something...



LEO:  Send a thousand people, it's going to bring a site, most sites, down.



STEVE:  Yes.



LEO:  Send 100,000 people, I doubt there's any site that can survive.



STEVE:  No, no.



LEO:  Well, the good news is all the gambling sites will be offline during major gambling events.  I guess the next one is the Indy 500.  We'll see if, come Memorial Day, you cannot get online [laughing].  Wow.



STEVE:  Yeah.  I mean, it is really, really significant that there is this kind of - there's this presence of unattended, obeying machines...



LEO:  Now, this guy already is in deep trouble because what he's done violates every law known to man.  It's federal wire fraud laws that don't allow you to log onto somebody's computer.  Even though they leave it wide open, you're still not allowed to do that.  Why doesn't this guy write a bot that just changes the password to some random string on all of these devices?  What would stop him from doing that?  He's already on these devices.



STEVE:  Or just shut down - better would be...



LEO:  Shut down telnet.



STEVE:  ...to shut down the telnet service.  Just edit it.  He may not be able to make a permanent change, that's the problem, because he may not have access to...



LEO:  Change the RC file or whatever, yeah.  But he could at least shut it down for now.  Of course the machine's turned off and on, then it's going to start up again.



STEVE:  And they often do.  He explains in here that...



LEO:  You could see them on that map.



STEVE:  Yes.  He was seeing machines disappear.  They were moving, or he said also some machines just reboot themselves by schedule, on a schedule, every few days, just to clean out any debris that they've accumulated.  So unless he could make permanent changes to the nonvolatile memory in those machines, anything he did would be temporary.



LEO:  My point being he's already violated every federal, U.S. federal law, and probably federal laws in most countries.  Might as well go all the way and fix the problem.



STEVE:  He sounds like a nice guy, too.



LEO:  He sounds like a nice guy.  I'm sure he's considering it.  I mean, in many cases he had root.



STEVE:  Yes.  That's what he was getting.  What he was getting was full root access.  He was logging in, either with a blank username and password or as admin or as root.



LEO:  And that gives him write access.  He could probably fix a few of them.



STEVE:  Yeah.



LEO:  Maybe a few million.



STEVE:  Well, he has the infrastructure in place to do it before anybody else could.



LEO:  That's what's interesting, because he was able to do this by commandeering these machines to spread the botnet.  It wasn't all from one PC in his closet.



STEVE:  That's why it was a worm.  He built a beautiful...



LEO:  It's amazing.



STEVE:  ...Linux worm which then propagated, just like in a flash, across the Internet.  And its goal was to find other bots.  And he shows how it escalates.  The first few, he, like, launched a few thousand.  They all begin scanning.  He partitioned the IPv4 address space.  Now, that's one other point that he makes that I didn't read because I didn't want to read the entire paper verbatim, anyone can find it, is he mentions that this is only possible on IPv4 because we only have 4.3 billion IPs, and they can be scanned.  When you go from a 32-bit address to a 128-bit address, everything changes.



LEO:  Good.  Let's all go IPv6 now.



STEVE:  Well, none of those bots are going to.  None of those boxes are going to.  They're just passive...



LEO:  They're printers.  And we already know how little these device manufacturers care about fixing their problems.  This UPnP, not a word from any router manufacturer.  Not a word.



STEVE:  Nope, none.  I wonder if there's going to be a sudden spike in demand for toner.



LEO:  You know, that's what he should just do is, the ones that are printers, just print a big page that says, "Hey, moron, lock down your machine."



STEVE:  [Laughing]



LEO:  Okay, that's all you do.  You print one sheet on every printer that you can get to and say here's what you need to do.



STEVE:  And also, Leo, remember this.  There are infrastructure-critical machines, he refers to them in more detail than I did in the paper.



LEO:  Like SCADA boxes, things like that.



STEVE:  Yes.  And he's also on routers.  And because he is who he is, he is not turning around and looking into the network.  He talks about all the tasty machines behind these.  This is not going to be a hands-off policy for most of the hackers on the Internet.  They're going to get on a box and go, hmm, where am I?  Poke around.  What machines are connected?  What fun can I have?  I mean, it is - this is a catastrophe.



LEO:  [Laughing] Wow.  Okay.



STEVE:  Yeah.  Yeah.  Okay.



LEO:  Bury the lead, Steve.



STEVE:  I know.  Well, and we're not going to get to it this week.  I have two things left I want to share.



LEO:  Okay.



STEVE:  Our friend Simon Zerafa, who - he tweeted me something that is really cringe-worthy.  He said, "Two bytes walk into a bar.  First one, the first byte turns to the second and says, 'I think I may have a parity error.'  The second one says, 'Yes, you do look a bit off.'"



LEO:  Oh, it's horrible.



STEVE:  Oh, ow, yeah [laughing].  I got a really, really nice note from a listener, Richard Curtis, who said, "I've written a testimonial," but he didn't know where to send it.  So he sent it to my tech support guy, Greg.  So the subject is "I've Written a Testimonial."  And then his letter, his note starts, "But couldn't find anywhere on GRC's or SpinRite's pages to submit one.  So I decided to submit it this way.  Please let me know if there's anything else I need to do."



He said, "Just another miracle to add to your enormous collection.  I have a Dell Inspiron 1520 laptop running XP Professional SP3."  Man after my own heart.  He said, "In early September 2012," so a few months ago, "I got a BSOD," the Blue Screen of Death, "on startup, informing me that an essential system file in the boot process was corrupt.  I had purchased the computer in '08," so four years previous, "so it was out of warranty.  I paid Dell customer service $129, seeking their help in getting it up and running."  So, okay, $129 to Dell.



"The best they could give me for the price of admission was to tell me to reinstall the operating system.  Like everyone else, I had thousands of pictures and my personal, professional, and financial life on that computer.  Like almost everyone else, I didn't observe a regular backup schedule, even though I own two 1TB Phantom external hard drives.  I wasn't about to do anything as drastic as a system reinstall before I could engage in data recovery.  But I had previous experience with data recovery and knew it would likely cost me about as much as a new computer."  That's true, or a lot more, actually.



"I switched over to using my wife's brand new Asus laptop with a Core i7 processor and Win 7 while I pondered my approach to data recovery.  Several months went by; and, tiring of my monopolizing her new computer, my wife suggested I buy a new one of my own.  Nice as her Asus is, I didn't want to pull the trigger on that kind of financial commitment, either.  So I began scouring the web to find recommendations for user-controlled data recovery.



"Among several promising programs, SpinRite stood out.  I read absolutely everything on the SpinRite website about the program and how it worked.  I'm no techie, but it all made sense to me.  Impressed by Steve's background in computer hardware, preexisting the Internet and PCs; his long-term commitment to SpinRite for decades; SpinRite's nondestructive process; the glowing external reviews; the many user testimonials about not just data recovery, but the restoration of failing drives; and SpinRite's money back guarantee and lifetime updates, there was no question about the choice of program.



"I paid my $89 lifetime license fee, burned SpinRite to CD on my wife's computer, and started it on my nonbootable Dell at 5:00 a.m. four days ago.  It finished its work nine hours later."  That is, not four days and nine hours, but it only took him nine hours.  He didn't write "for four days."  He says, "Holding my breath, I started the Dell up, and, wham, the Windows start screen appeared.  It booted flawlessly, and there were all my precious files.  I'm writing this message on the Inspiron right now.  All the previous warnings of impending doom, such as hanging processes and stack dumps, are gone.



"Add me to the family of true believers.  SpinRite is the most reasonably priced, absolutely essential program that every computer owner owes to him/herself to obtain and have on hand to stave off the inevitable drive failures.  I will be running it on the Dell, my wife's Asus, and my son's Dell with Vista, quarterly, to keep them in shape.  And I'll back up all my files.  I promise."  And then he concludes with, "By the way, SpinRite found comparatively few bad sectors, so I guess the drive was actually in fairly good shape."  And he demonstrates that he really did read everything because he learned the lesson about maintenance, that SpinRite can not only recover, of course, but is really good for long-term maintenance, run every few months.  So, wow, great testimonial.  Thank you, Richard.



LEO:  Isn't that nice.  So do you want to save the hash tables for later?



STEVE:  We have to.



LEO:  We're kind of out of time.



STEVE:  Yeah.  We will do it week after next.  I have tons of really interesting material about the way they work, about who uses them, about how they operate.  It'll make for a great podcast, which unfortunately, well, not unfortunately, we had a great one just now, really.



LEO:  Yeah.  It turns out to be a pretty important thing.



STEVE:  This is very, very important.  When you learn that the Internet has telnet logon-able, unattended appliances in the hundreds of millions - and remember, I will say again, Leo, this is not just for outbound-reflected traffic.  All of these are in front of somebody's private LAN.  And they allow admission to that LAN.  So, I mean, this is not good.



LEO:  Not good would be an understatement.



STEVE:  Yeah.



LEO:  Steve Gibson is at GRC.com.  Next week, Q&A, which means if you go to GRC.com/feedback you can ask your question.  Steve will pick - actually, we have leftovers from last week.  We'll use some leftovers, maybe some fresh.  Mix it in, it'll make a nice casserole.  Put some potato chips on the top.  You can also, while you're there, get 16Kb audio versions of the show; transcriptions, too.  He does all that just for you, for the bandwidth-impaired.  For those of you with ample bandwidth, watch live every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 1800 UTC.  Or download audio or video after the fact, high-quality versions of both available at TWiT.tv/sn for Security Now!, or wherever better podcasts and Internet broadcasts are stored.  Just search for "TWiT" or "Security Now!," and you'll find it.  I guess - oh, and this would be a good time maybe to go to ShieldsUP!.  Just make sure that you don't have a telnet port lying open, flapping in the wind.



STEVE:  Yeah.  I would love to know more about those boxes.  The only thing that we didn't get is what are all those.  I mean, we know that a bunch are printers.  That's crazy.  Why does a printer have telnet at all running?  But one of the problems is people tend to leave things in default mode, even people apparently setting up and installing firmware in unattended boxes.  I mean, port 23 is nuts to have wide open and running a telnet server, just like, okay.  So these must have been around for a long time.  And they're going to be around forever.  [Frustrated noises].



LEO:  I'm sure we'll hear more.  And this is the show where you learn about all of that stuff.  And Bitcoin, too.  Thank you for joining us, Steve.  We'll see you next time on Security Now!.



STEVE:  Thanks, Leo.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#397	

DATE:		March 27, 2013

TITLE:		Listener Feedback #164

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-397.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here.  Oh, get ready for this.  We've got a Q&A episode.  We're going to talk about security.  We're going to talk about DDoS attacks.  We're going to talk about telnet exploits.  But we're also going to talk about coffee and Bitcoin and science fiction.  Stay tuned.  Security Now! is next.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 397, recorded March 27th, 2013:  Your questions, Steve's answers, #164.



It's time for Security Now!, the show that's designed, carefully cultivated, and in fact proven, four out of five doctors recommend it, for protecting you online - your privacy, your security.  And we thank this guy right here, the Explainer in Chief, Steve Gibson, for making it possible for six-plus years now.  Hi, Steve.  Happy Birthday.



STEVE GIBSON:  Hey, Leo.  Thank you.  Yesterday was the big day for me, 58.



LEO:  When you started this show you were just a young man of 52.



STEVE:  That's right.  Actually, I feel better today than I did then.  I don't really know why, but...



LEO:  I know why, and you know why.  You just don't want to say it.



STEVE:  Yeah.



LEO:  Because of your regimen, your Vitamin D and your...



STEVE:  Before I turned 50 I started, I decided I was going to get serious about looking into nutrition and supplements and physical condition.  And it's like, okay, I have the time now, I'm going to do it.  And I've...



LEO:  You're never going to die now, Steve.  Never.



STEVE:  I've learned a lot, yeah.



LEO:  You're going to live forever.



STEVE:  So a bunch of nice stuff this week.  We've got a Q&A episode, our 164th Q&A.  At the top of the news we've got both good news and bad news regarding Apple and authentication.



LEO:  Oh, what a mess that was.



STEVE:  Oh, my goodness.  Well, the bad news is a really great case study for us and our listeners because it was such a mess.



LEO:  It was a cross-site forgery exploit, as I understand it.



STEVE:  No, not at all, actually.



LEO:  No.



STEVE:  It was just a mistake.  So it had nothing to do with cross-site anything.  It was just a very simple web app programming mistake.  Okay, so this involved an "I forgot my password" problem.  So this was so-called "password recovery" at Apple.  And until this came to light - and to Apple's credit they shut it down quickly, that is, within a day it was fixed.  But it was so easy to fix because it was such a glaring, obvious mistake.  So, I mean, this is What Not to Do 101 on Internet security.  You'd go to iforgot.apple.com.  And you went through a series of steps.  You give them your email address for your registered account, and then they want your date of birth.  So you put that in.  Then you answer two security questions which you had previously provided, obviously, the answers to before.  Then you enter the new password you want to use for your account.



Well, the mistake they made, first of all - let's back up a little bit and remember how we've sort of forced the web, which was originally designed to deliver content, how we forced it to accept content, that is to say, like the answers to these questions, the email address, the password and so forth.  The Internet never was designed for this, really.  It was designed as a read-only medium with links, hyperlinks - oh, what a concept - that you click on, that take you to other read-only pages that may have their own hyperlinks that you click on, and they take you to others.  So that was the original concept.



And then someone said, what if we want to, like, log in to, like, we want to protect some of these pages so just not everybody can click on the links and get to them.  And then the gurus of old said, "Hmm.  Really?  We hadn't really planned for that."  And the people said, "Yeah, but wouldn't that be cool?"



So they said, okay, how about this?  We'll take that regular URL, that's the http:// with a domain name and then the whatever it is afterwards, the tail that specifies the page.  And then we'll put a question mark on the end.  And then anything after the question mark, the server will ignore.  That is, the question mark ends the address of the page and starts stuff the user provides.  Whatever they want.  And then we'll enhance the HTML definition with forms.  We'll have boxes you can fill in, buttons you can press, that kind of stuff.  And the form will stick its data after the question mark.  So the server will not care what's after the question mark, and then an application which we've added to the server will look at the stuff after the question mark as the data from the user.



So this kludge, which is the only thing you could call it, is what happened.  And then they said, well, but, you know, what if you wanted to, like, fill out - wanted to submit a letter to somebody?  You can't put a whole letter after a question mark on the URL.  That just goes on forever, and there's got to be a limit.  So they said, yeah, okay, that's a good point.  So then they created another verb.  Normal verb was "get," saying I want to "get" a page.  They created a new verb called "post."  And there the idea was you would, after you were through specifying the page you wanted this to go to, you would use the verb "post," and then you could sort of append as much stuff as you wanted to at the end of your query, rather than off the end of the address.  And so that's what we have today.  In this day and age, that's what we've got.



So both approaches are used.  Apple was using only the original one, the get-based approach, where everything that the user submits is after the question mark in the URL.  Now, that's not a problem per se because either our - you know, our part of the query that you send to the server, even though it's not really a query anymore, it's more of a, here you go, submit.



But the mistake Apple made which is so rudimentary is that anyone - anyone.  Doesn't take a genius.  This is not one of these incredibly complicated, okay, how did they figure this out things.  Anyone looking at the traffic to and from the user and Apple would notice that that final submission of the new password didn't really need all of the previous stuff.  That is, you could go to iforgot.apple.com pretending to be somebody else.  All you had to know was the email address they used, which you could probably guess because it's probably their email address, and their date of birth, which of course is public record often.  I'm a little uncomfortable that my Wikipedia page has it listed.  If it didn't, if it wasn't already public, I wouldn't have mentioned that yesterday was my birthday because I would rather that kind of stuff not be readily available because it can be used, exactly like this, for exploits. 



With only those two pieces of information, because they did everything through these simple "get" queries, you're able to skip, entirely skip the requirement for the two security questions.  You don't even need those.  You're able to synthesize the final submission of your new password without needing that because an analysis of the back-and-forth transactions to iforgot.apple.com made it clear to anyone, even just looking at the HTML, looking at the View Page Source option in your browser, you can see how it's assembling the data that it's going to send back.



And so, armed with only a person's email address and their date of birth, until this was fixed - which was, as I said, immediately after it was publicly revealed - it was possible to change anyone's Apple password to anything you wanted, and in that process take over their account.  So that was Apple's revealed, publicly revealed screw-up of the week.  That's the authentication bad news.



Coincidentally, they also gave the world authentication good news.  And we are really hoping that the guy who implemented the good news had nothing to do with implementing the bad news because we want them to have done this right.  Apple has now joined the growing group of major sites like Facebook and Google and Microsoft to offer two-factor, or at least two-step authentication.  Some purists have said, well, it's really not two-factor because you may be trying to use the same device you're trying to log in as the device you're authenticating with.  It's like, okay.  So it's two-step.  But it certainly does dramatically raise the bar on, for example, preventing like the Mat Honan attack.  And they've exactly done so.



Gregg Keizer, who reported the story in Computerworld, started his nice report sort of summing things up.  And I'll just read the first few lines.  He said:  "Apple this week followed the lead of rivals like Facebook, Google and Microsoft" - I don't know that they're such rivals, but still - "Facebook, Google, and Microsoft, offering two-step authentication to help customers secure their Apple IDs against hacking.  The new feature is designed to block unauthorized changes to iCloud or iTunes accounts, and keep hackers who steal Apple IDs from purchasing digital content or hardware using the credit cards stored in customers' iTunes and Apple Store accounts.  iTunes users in particular have complained for years about security so lax that hackers have easily hijacked their accounts to run up big bills.  Security experts this week commended Apple, even though the company was slow in pulling the trigger."



So they did a couple good things, I mean, sort of like extra good.  For example, they're not using SMS, that is, simple texting on phones because, as we've discussed with Brian Krebs's SWATing adventure or misadventure last week, cell phone is prone to spoofing, and SMS messages can be spoofed and have been spoofed.  And so it's better, if you have an infrastructure you can use, not to fall back on cell phones.  Most companies...



LEO:  Actually, they do use SMS if you don't have Find My iPhone.  They can use both.



STEVE:  Oh, if you don't have Find My Phone, okay.



LEO:  They used SMS with me.  I had both, and they used SMS.



STEVE:  Oh, okay.  So they do allow you to use their existing infrastructure, Find My Phone, which doesn't use SMS.  And so, for example, it allows you, if you didn't have a cellular-equipped device, like any of the iPads that didn't have cell built in, then you're still able to use this as an authentication loop.  And then they have removed, sort of in response to the Mat Honan horrific adventure that we talked about at length, they removed from Apple Support, as I understand it, the ability from Apple Support to reset passwords.  Nothing you can do in terms of social engineering any longer can convince Apple to reset your password.



The way they've made that practical is they also give you a long, 14-character, backup emergency recovery key which you're able to use if, for whatever reason, you can't use the iOS device which is assigned to receive the passcodes, or it's been lost or stolen or whatever.  Which I really think - we've seen a couple people do this.  I know that Google Authenticator does the same sort of thing, where you get this really big, inconvenient, you would never want to use it on a regular basis, long key.  But the point is that's your emergency recovery key.  You print it out and stick it in a drawer somewhere so that you have that as your ultimate fallback.  And then you normally use a convenient real-time feedback loop of some sort in the regular case.  So congratulations to Apple for strengthening this.  That's a good thing.



LEO:  Yeah, and I turned it on right away.  Although, in theory, that old hack doesn't work, so you don't have to worry about that.  But who knows.



STEVE:  Oh, yeah.  They closed that immediately.  But, yeah, I agree.  I think that Apple users have been low-hanging fruit in the past.  And so it makes sense that Apple is doing this.  And I think it's great, too, because Facebook has great penetration.  Apple has great penetration.  Certainly Google does.  We're seeing the large movers educating the public about increasing their security.  And this is just all good.



In a weird and unfortunately maybe related to us event, the day after we talked about the Canadian-based TD.com, I guess they're related to TD Ameritrade, Leo?



LEO:  Yeah, it's Toronto Dominion Bank that's now - I think it's considered an American bank, despite the word "Toronto" in the name, yeah.



STEVE:  So that was easywebsoc.td.com.  They are even now off the 'Net.



LEO:  What?  Really?



STEVE:  Apparently, yes, even now.  I tried before the podcast.  Easywebsoc.td.com, if you try to go there, it says "Service Interruption:  We are currently experiencing systems issues due to an external interruption."



LEO:  Oh, that sounds like a DDoS.



STEVE:  That's what it has been, apparently.  "Support teams are working to restore services as quickly as possible.  This is a service interruption issue which we are monitoring closely."



We'll remember that last week I talked about them because somebody tweeted that this was their bank, and they went to SSLLabs.com, and they got an F.  And so we went into some detail into the reasons for their F grade, which were that they're still supporting SSL 2.0.  They're supporting 40 and 56-bit symmetric key ciphers among the cipher protocols that their server is willing to accept from a client, which are regarded as too weak to be secure these days.  And they haven't reordered their server's preference such that they're using the cipher-based chaining with the weak SSL and the early version of SSL and TLS, which makes them subject to the BEAST attack.



So I'm wondering if some people who listened to the podcast thought, well, we should punish them for their lack of security by holding them off the 'Net.  And if that's true, it's been effective because it's been a week now that easywebsoc.td.com has been unavailable as it once was.  They do have a link at the top of that page that takes you to another site which has always been there.  So maybe this is not their main entry portal or I don't know what.  I know that it certainly used to be online and is not.



LEO:  You know that there's a massive DDoS going on right now, kind of a global DDoS.  I'm sure you'll talk about that.



STEVE:  Yeah.



LEO:  It's not related, I presume.  I don't know.



STEVE:  I assume it's not.  So we've spoken a couple times in recent years about the fundamental - well, actually we've spoken many times about the fundamental tension that exists between our feeling of our own rights to privacy, the U.S. constitutionally guaranteed rights of privacy, and the really understandable need that law enforcement, legitimate law enforcement has to pursue, through evidentiary means, criminals.  And this creates tension.  We spoke a couple years ago, in 201l, Valerie Caproni, I remember, was at the time FBI's general counsel.  And it was her speech to the American Bar Association, the ABA, that worried me about the future of even being able to encrypt with a VPN because those encryptions are something that work against the law enforcement ability to monitor everything that they want to, which is what they want.



Slate just carried a very good article, Ryan Gallagher reporting for Slate, about the new FBI general counsel Andrew Weissmann's statements in front of the same body, the American Bar Association, in an article titled "FBI Pursuing Real-Time Gmail Spying Powers as 'Top Priority' for 2013."  And so I just want to share this, it's not very long, because it perfectly characterizes where we are.



Ryan wrote:  "Despite the pervasiveness of law enforcement surveillance of digital communication, the FBI still has a difficult time monitoring Gmail, Google Voice, and Dropbox in real time.  But that may change soon because the Bureau says it has made gaining more powers to wiretap all forms of Internet conversation and cloud storage a 'top priority' this year."  "Top priority" was their words.



"Last week, during a talk for the American Bar Association in Washington, D.C., FBI general counsel Andrew Weissmann discussed some of the pressing surveillance and national security issues facing the bureau.  He gave a few updates on the FBI's efforts to address what it calls the 'going dark' problem - how the rise in popularity of email and social networks has stifled its ability to monitor communications as they are being transmitted.  It's no secret that under the Electronic Communications Privacy Act, the feds can easily obtain archive copies of emails.  When it comes to spying on emails or Gchat in real time, however, it's a different story.



"That's because a 1994 surveillance law called" - we've talked about CALEA in the past - "the Communications Assistance for Law Enforcement Act (CALEA) only allows the government to force Internet providers and phone companies to install surveillance equipment within their networks.  But it doesn't cover email, cloud services, or online chat providers like Skype.  Weissmann said that the FBI wants the power to mandate real-time surveillance of everything from Dropbox and online games" - and he says, ("the chat feature in Scrabble") - "to Gmail and Google Voice."



LEO:  Yeah, crooks plan a lot of their heists on Words with Friends.  I know that.  That's where we go.  That's our secret spot.  We meet there.  Actually, that's a good idea, if you're a crook.



STEVE:  I was thinking the same thing.  It's like, hey, we'll use Scrabble Chat.



LEO:  I would like to play some Words with Friends with you, if you know what I mean.



STEVE:  He says:  "Those communications are being used for criminal conversations," said Weissmann.



LEO:  So is everything.



STEVE:  I know.



LEO:  Stop it.



STEVE:  Leo, I know.  I just wanted...



LEO:  Did you see this?  Here's one.  Look, this is from Reuters.  "U.S. plans to let spy agencies scour American finances."  The Obama administration is drawing up plans to give all U.S. spy agencies full access to those databases, those central databases that have all of our financial records in them.  Apparently, though, the FBI's had this all along.  So I don't know if your email or your Words With Friends chat is more revealing than your financial records.



STEVE:  Well, probably all of the above, Leo.



LEO:  Yeah, they have it all.  Just forget it.  It's too late.



STEVE:  Yeah.  So anyway...



LEO:  We should fight, I guess.  But I think it's hopeless.  I've given up.



STEVE:  Well, I think this sets a useful context for the conversations that we have on the podcast for - the tradeoff in going the extra measure to encrypt your cloud storage on the client side, as opposed to trusting your cloud provider to do it, is a perfect example.  And, again, not all information is the same.  Many people want to store stuff in the cloud.  They want the convenience of that.  And it's just random stuff that they don't - they don't care if the FBI rifles through it.  Fine.



At the same time, for just the sake of privacy, for example, I'm backing up GRC's corporate books to Amazon nightly using Jungle Disk, and it's working beautifully.  And I have an encryption key that I had my own passwords page make for me, so god help anybody who tries to brute-force that.  I know how Jungle Disk works.  I know it's doing TNO-style encryption.  So all we're sending up there every night is completely pseudorandom noise.  And I love the convenience of it.  I love the low cost of it.



And, yes, it's not as easy as simply having Dropbox clone everything everywhere.  And there are ways to do pre-encryption technology with Dropbox, but it takes a little more.  So I just - this sets the tone, I think, against which our listeners make their decisions about how much they care about this.  So that's why I think it's worth discussing.



LEO:  Yeah.  I wish there was something we could do about it.  I feel like it's just - it's, like, over.



STEVE:  I don't disagree with you, Leo.



LEO:  They're so hard to fight.  And the fact that this data's all been out there, and now it's consolidated into big databases.  I just read an article, I thought it was fascinating, in Nature magazine.  Data scientists took location data only, anonymized location data - did you see that?



STEVE:  Yup, yup.



LEO:  And with four points, that's all, they had 95 percent success in identifying individuals.  So let's say the fifth point, they observe you at a fifth point.  If they can go back and say, okay, we see him now there.  Where was this person four points ago?  They've now got you.



STEVE:  Remember the size of that new facility the NSA is building in Nevada?  I mean, that thing is unbelievably big.  And it's full, I mean, it's just for data storage.



LEO:  It's all big data.  It's all about these machines have now gotten fast enough, data big enough, and we have enough data points now...



STEVE:  And hard drive storage is so incredibly inexpensive.



LEO:  And it's insufficient now to say what everybody's been saying all along, which is, well, but we anonymize the data.  As we now know, algorithmically, you can't anonymize data; that enough data points, you can identify it.



STEVE:  Yeah, well, for example, I mean, your example in the Nature article was perfect.  Location, nothing but X and Y coordinates, nothing is more anonymous than X and Y numbers.  Yet they just demonstrated, four of those, and they pretty much know who you are.



LEO:  Four.



STEVE:  Yes.



LEO:  Four.  Can you believe that?  Even that is a measure of how effective our computer algorithms are, that they can take these four points and get 95 percent accuracy.  Probably six points, and it's a hundred percent.



STEVE:  I'm stunned by Google, just Google search.  It is amazing to me what I can find, that I can - I just put a few words in for a page that I wish existed somewhere, and there's a list of them.  It's amazing, when you really think about it.



LEO:  It is amazing.  What a world.  What a world.  What a world.



STEVE:  So speaking of amazing, I'm really pleased that Firefox, that is to say Mozilla, and Google have a competition going on because we the users are the winners.  I mean, we are clearly seeing an evolution of applications off of the traditional desktop model into the cloud.  And the browser is our portal, and the browser is becoming our engine.



I got a neat text from SeanT6.  And normally I check people's real names so that I can just say, okay - his Twitter handle is @SeanT6.  And so when I went to look at what is his name, so I could quote that fairly, his public description for his Twitter account says "My name is Shawn" - actually it's S-h-a-w-n - "and I'm an English geek.  Yep, I'm from England, where the tech news is limited.  Thank God for Security Now! and TWiT Network podcasts."  I thought, well, that's a nice handle to be broadcasting in TWiT.  So thank you, Shawn.



Anyway, he pointed me at some news from last night, which is the most recent Firefox Nightly build, which they're continually pushing out and people who really want to be on the bleeding edge can play with.  And this was 22.  22 is Firefox version slated for this summer sometime.  So they're already working on something that we'll be talking about going live - I think I'm on 19.  I think that's where we are now in the normal.  I'm not needing to be on the bleeding edge.  I want all my 88 open tabs to be stable.



So anyway, what they just rolled out in the most recent Nightly is a new technology for their JavaScript engine called OdinMonkey, O-d-i-n-M-o-n-k-e-y.  And it's interesting to me because it's - I was a little distraught over the direction Chrome took with their superfast acceleration because, as I understand it, it's native code, is what they call it, where they're allowing you essentially to run, like, Intel coded apps in the browser, which, okay, for one thing it breaks compatibility because nobody else's browser understands that.



So I'm less comfortable with what Google has done than with this which the Mozilla guys have done, which I think is very clever.  What they did is they looked at JavaScript.  Now, JavaScript is designed to be easy to use.  So you can just sort of write some script, and things just work pretty easily.  It's also powerful enough that a real programmer can do some amazing stuff.  Not to toot my own horn, but we remember the animation that I wrote showing hard disk wave forms coming out in real time and pulsing and so forth.  That was GRC.com/animation.htm, I think.  And so JavaScript is both simple to use and powerful, which is not always an easy thing to achieve.



But JavaScript the language achieves that at some substantial cost in performance because it's having to do all types, all kinds of behind-the-scenes work:  variable type conversion.  It manages memory for you.  There's no explicit, like I need some memory, now you can have it back.  JavaScript just does that.  So there's something called "garbage collection," which is memory that's been released.  It needs to keep track of reference system memory so it knows, if no one else is going to reference the memory, then it can free it.  All of that is expensive in terms of runtime at the benefit of the programmer not having to even know about that kind of stuff.  Traditional programmers do it themselves.  The newer dynamic languages do it for the programmer at some cost.



So what the Mozilla people did with this OdinMonkey project is there's something called "asm.js."  And "asm.js" is a declaration, that is, just a line that you can add to existing JavaScript that declares that you are a programmer who is willing to abide by some strict rules of coding, and you're going to only use a proper subset of JavaScript - sorry, I need to make sure I don't confuse that, JavaScript - and in return for you being disciplined in your coding and the language being reduced to a subset and your making this declaration, the forthcoming Mozilla and Firefox will give you unbelievable performance.  I saw the numbers, and it's orders of magnitude faster, for example, than where Chrome is today.



Now, Chrome is moving forward.  I mean, it's already incredibly fast.  And that's why I say I'm happy that there's this competition.  And of course also there are some cross-fertilizations.  Not like there are teams that don't share.  All of this is open.  And so they're able to take each other's good ideas and employ them.



But so essentially what they've done is, by allowing a programmer to say I'm going to restrain myself and restrict myself to things that are not expensive to do, it allows the system to compile that declared code ahead of time.  They use the acronym AOT for Ahead of Time compilation.  And it screams.  And the benefit of this is it's still compatible.  It is, if you fail the browser's verification pass over your code because you broke some rules, then it says, sorry, cannot honor your pledge because you haven't honored your pledge.  So we're just going to treat this like regular JavaScript and keep you out of trouble.  So it's still completely cross-platform and completely cross-browser.  Yet, if you have a browser that is aware of this, and if you play by the rules, you can write applications in remotely delivered pages that just outperform anything.  And so this is a neat move forward.



LEO:  There are other solutions like this.  I think this is kind of a general thing that everybody wants to accomplish because JavaScript itself is so irrational.  They're trying to rationalize it.



STEVE:  Yeah, it is, yeah.  I mean, it's unfortunate that it is as sloppy a language as it is.  I mean, it's not easy to corral it, as you say.



There were two things that I noted on Kickstarter in the last week.  One I tweeted about, which was very cool.  And I know that people who follow me picked up on it, and many of them tweeted back that they were glad for it.  There's actually, everyone has heard about 3D printers, of course.  This is a - get this, Leo - a 3D printing pen.



LEO:  Oh, I know.  Jeff Jarvis ordered one.



STEVE:  Yes.



LEO:  It's so cool.



STEVE:  It is so cool.



LEO:  Yeah.  It's a Kickstarter project.



STEVE:  Yup, it's a Kickstarter.  I tweeted, "No wonder this Kickstarter was seeking $30,000 but now has $2,319,739 pledged."



LEO:  It's gone up since you've checked.  It's now 2.344 million.



STEVE:  Yup, exactly.  It's got 26...



LEO:  3Doodler, it's called.



STEVE:  Yes.  Anyway, I tweeted the link [t.co/n3XFL0MvL7].  If anyone is interested and wants to see it, there's a beautiful video at Kickstarter.  It is closed now.  When I tweeted there were 33 hours remaining, which was enough time for people who were following my Twitter feed to see that and jump onboard if they wanted.



LEO:  All it's really doing is just extruding quick-drying plastic.  And so you can draw in three dimensions.



STEVE:  So it must heat.  There must be a battery-operated heater that brings it up to melting point.  But what's cool is when you see the guy, like, moving the pen around in the air, and it's leaving, like, a coil behind it.



LEO:  It's really a great idea.



STEVE:  Oh, it is just so clever.



LEO:  Yeah, yeah, yeah.  They're going to - this guy, he's going to be speaking at LeWeb in London in a couple of - in about a month.  Very interesting.  And Jeff Jarvis did order one, so I expect TWiG will have many demonstrations of 3D art.



STEVE:  I'll remind people who are not Twitter followers that on the web we've got a nice friend of the podcast who is chronicling all of my tweets.  And I created a bit.ly shortcut, bit.ly, and then just my Twitter handle.  So it's bit.ly/sggrc.  And that will bring you up, and so anyone can find the things I have recently tweeted, the most recent of which, I believe, as of the time of this podcast, is a link to this thing on Kickstarter, which I would encourage people to check out the video.



LEO:  3Doodler.



STEVE:  It's, oh, really cool.



LEO:  Yeah.



STEVE:  Now, not nearly as popular, but still I think interesting for people, is something that Mark Thompson told me about.  Our buddy Mark Thompson, AnalogX, designed this himself, for himself, to meet his own needs, and then thought, you know - and he and I chatted about this.  He looked all over the 'Net.  There were a couple bad implementations that just were not done correctly.  Mark wanted an automated way of sending and receiving SMS messages for his own web-based stuff that he's doing.  There wasn't anything.



So he talked to a couple friends of his.  He's got one friend, Earl, who was actually the winner of Survivor one year, and a talented engineer KG, who's in Santa Monica.  They've put together a Kickstarter called, unfortunately, SmushBox.  I don't know what - I guess it's like it's SMS, it's supposed to be.  It's supposed to be SMS Box, but it's S-M-u-S-h Box, SmushBox.  I know.



LEO:  It's all about the name, you know.



STEVE:  I know.  Well, in that case they're in trouble.  But I'm one of the backers.  As of this moment there are 46...



LEO:  Oh, you've fallen for the Kickstarter thing, haven't you.



STEVE:  I've done Kickstarter a couple times.  And it's never been a problem for me.  I think you've not had such good success.



LEO:  No, nothing but flop-olas.



STEVE:  So I wanted to tell people that - oh, and actually the pressure-sensitive pad stylus was one of my favorite things that these guys did.  They did a good job of that.  But anyway, so what this is is an SMS gateway in a box.  They have a deal with T-Mobile, and so it's preregistered to T-Mobile.  I think it's maybe like 25 bucks a month, Mark said, in order to pay for this.  You have unlimited SMS texting.  The hardware is beautiful.  So I would encourage people, it's SmushBox.



LEO:  This is so you don't have to have a phone?



STEVE:  No.  The idea would be, if you have any kind of a web service, where for example you'd like to do two-factor authentication, multifactor authentication...



LEO:  Oh, you could use this, tied to your web server, to send SMSes.  I get it.



STEVE:  Yes.  And actually a couple of these things are USB-based.



LEO:  Can I send thousands of text messages?



STEVE:  Yes.  Yes, you can.



LEO:  So what I can do is I can have a SmushBox attached to our calendar.  And we can ask people, hey, if you want a text message when Security Now! is about to start, we'll send one out.



STEVE:  Yes.



LEO:  Maybe I should order one of these.



STEVE:  Yes.



LEO:  See, that's the thing.  It's not ordering one that you're doing here.  You're just giving them some money to support their development.



STEVE:  Well, and so I'm saying I know these people.  I mean, the hardware works.  KG has been producing hardware for a long time.  Look at the video.  It's just a gorgeous thing.  I mean, you just want one when you just look at it.  It's just...



LEO:  That's how it starts, Steve.  I'm just warning you.  I'm just warning you.



STEVE:  But this is different.  I mean, this will happen.  Oh, and what I wanted to mention was that it's actually a net - it is a web server itself.  So you don't hook it by USB to your server.  You put it on your network.  And so it it's - you have to go into all the details.  The page goes on and on and on.  There's a video there.  Anyone who's curious what Mark Thompson looks like, you can see Mark Thompson finally because he appears on the video.  But anyway, I think it's a cool thing.  I would love my server to be able to receive SMS messages from me.



LEO:  It's got Cylon lights.  What could be wrong?



STEVE:  I know.  And the Cylon lights change speed.  I said, okay, Mark, what does it mean when it's going slow versus when it's going fast?  He says, I don't know.



LEO:  That's Mark Thompson right there in the grocery store.



STEVE:  Yes.



LEO:  So he's part of this team?



STEVE:  Yes.



LEO:  Oh, that's different.



STEVE:  Yes.



LEO:  So he's like the software guy.



STEVE:  He designed the first one.  He prototyped it.  He built one for himself, and then he said...



LEO:  Well, that's different.  If it came from AnalogX, all right.



STEVE:  Yeah.



LEO:  Yeah.  Can I show you the crap that I've purchased?  "Purchased" is the wrong, perhaps, word to use for the stuff I've...



STEVE:  Just so that I make sure people can find it if they want, the Kickstarter, I don't know if putting SMuSh in is enough, it's Smart SMS Texting for Everyone, the SmushBox.



LEO:  Yeah, I just did "smush" in Kickstarter, and I found it.



STEVE:  Okay, good.  SMuSh in Kickstarter.



LEO:  Now, 225 bucks for your SmushBox.



STEVE:  Well, yeah.  And it's, I mean, it's a real piece of equipment.  It's a network appliance.  It's a web server.



LEO:  Hey, I know.  It should be expensive.  But I'm just saying.  And giving them money does not guarantee you'll get one, as I've learned.  So you're funding the backing of this.  There's no guarantee anything will ever happen.  I just wanted to give people this disclaimer because even Kickstarter says we're not a store.



STEVE:  Right.



LEO:  You're supporting this development, but there's no guarantee you will actually get a project - get a product.



STEVE:  I would be a little more worried about the 26,457 backers of the 3D printing pen.



LEO:  3Doodler?  Yeah.



STEVE:  Yeah, I think it's very likely that anyone who wants a SmushBox is going to have one.



LEO:  I'm ordering one right now.  I don't even know why.  Maybe I'll just have it in my house.



STEVE:  It's just - it's cool, Leo.  Look at it.  Oh, my god.  It's a beautiful piece of hardware.



LEO:  That's what worries me.



STEVE:  No, it's real.



LEO:  Okay.  It is Mark Thompson, AnalogX.  He's the real deal.



STEVE:  Yeah, it's going to happen.  And as I was going to say, I would love - I already receive text messages now when someone buys a copy of SpinRite.  My phone goes yabba-dabba-do, famously.  It's funny when we're at a restaurant, too, and the phone suddenly does that.  People go, okay, this guy is...



LEO:  Yabba-dabba-do.  Do you get chills when they do that?



STEVE:  So I would like to be able to send messages back, have some, like...



LEO:  Oh.



STEVE:  Yes.



LEO:  Yeah.  I have no idea how I'll use this.



STEVE:  And this goes bidirectional.  Well, just exactly like you said, Leo, you could arrange - you could allow people to subscribe to text messaging notifications...



LEO:  That would be kind of cool.



STEVE:  ...five minutes before the show starts.



LEO:  And this needs a phone line?  What does it need?



STEVE:  No, no.  Just...



LEO:  T-Mobile SIM.



STEVE:  No, it's built-in.  It's ready to go.  It comes preregistered with a T-Mobile account.  So you tell them, you set up an account with them for 25 bucks a month, and you get unlimited texting, in and out, bidirectional, and then just click it onto your network.



LEO:  Well, there's still time, if you want to get a SmushBox.  I just bought the early SMuSh kit.  Does that mean I have to assemble this?  Should have read that more closely.  Some assembly required.  I'm not going to have to solder this sucker, am I?



STEVE:  No.  It's just...



LEO:  Like the PDP-8?  When they say "kit," I hope they mean - let's see.  You've selected - Kickstarter is really the first - but, yeah, full SMuSh kit, which includes activated SmushBox, installation and management software, cables, unlimited texting with unlimited keywords.  We'll also throw in one of our embroidered SMuSh hats.  That's what put me over the top.  I want the hat.



STEVE:  Maybe you can get a mini hat for your little Leo in front of you.



LEO:  No, because it's AnalogX I believe.  I believe.



STEVE:  I did the $225 package.



LEO:  That's the one I just did.  Yeah, there's still time to get in on that, if you hurry.



STEVE:  Yeah, 10 of 40 are left, 10 of 40 are left.



LEO:  Two people have done it since you started talking about it.



STEVE:  The SMuSh kit early.



LEO:  Yeah, the early SMuSh kit.  Which they say will be available in June.



STEVE:  I believe it.  I mean, there's the hardware.  Just scroll down.  Keep scrolling down, Leo.  They've got pictures of it all.



LEO:  Oh, yeah.  It used to be on Kickstarter you could do 3D renderings, and Kickstarter had to kind of put the kybosh on that, said you actually have to have a prototype, working prototype.  You can't just do a 3D rendering.  So what I could do is have people sign up, and then I would send you a text.  If it were 10,000 texts, would it get mad at me?



STEVE:  No.



LEO:  It says "unlimited texting with unlimited keywords."  What could possibly go wrong?



STEVE:  Well, and imagine...



LEO:  Until it's outlawed by the federal government.



STEVE:  You do a page on your site where someone creates, like, signs up.  And then they've got checkboxes for all of your podcasts.



LEO:  Right, all you want, right.  And we'll send out a SMuSh whenever it's your turn.



STEVE:  Well, no.  You have a checkbox for when the live recording begins and also for when the podcast is available.



LEO:  Oh, I like it.



STEVE:  Yeah.



LEO:  All right.  Radford, make it so.  See, I've got an engineer guy now.



STEVE:  And now you've empowered him with the technology for it to happen.



LEO:  So you've always been able to do this through the phone companies, but it's normally quite expensive.



STEVE:  And that's what I'm doing now.  I'm having my server send me email to my synchronized Verizon email address, and then that turns into a text message to my phone.  It's like, eh, okay.  It works.  But this is the way to do it.  And this is bidirectional.  I can't send it back, and this works both ways.



LEO:  We'll have several levels of SMS notification.  We'll have one when Leo enters the building.  We'll have one when Leo's actually sat down at the microphone.  We'll have one when the preshow begins, and we'll have one when the actual show begins, and then we'll have one when the show is out as a podcast.



STEVE:  Perfect.



LEO:  I like it.



STEVE:  And then you can do a survey of how quickly the checkboxes are turned on and then how quickly the checkboxes are turned off.



LEO:  I don't know what happened.  We had 20,000 subscribers yesterday.  No, I think this actually could be quite cool.  I hope they don't, like, it could be used for spam.  But I guess that's up to T-Mobile to police; right?  They would disconnect you if you start spamming.



STEVE:  Yeah, they would look at what they were doing.  And if they were getting complaints from people, then they'd say, oh, okay, this seems to be a problem.



LEO:  Yeah, this isn't okay.  Because I'm starting to get a lot of text spam now.  In fact, that's a security note.  I think CERT was warning people, 60 percent of all cell phone users now get text spam.  Most commonly it contains a link that, if you click the link, of course, you go to a page that usually has malware on it.  But sometimes it could be worse.  Sometimes it could, if you - I get one now every day saying we'll lend you money.  Great, thank you, just what I want.  And it says, "Text STOP to end message."  And I know that the temptation is to text them back STOP.  But one of the scams could be it's a $35 text message.  Right?



STEVE:  Oooh, yes.



LEO:  You have to be very careful because there are offshore companies that will, if you send a text message, charge you.  And so that's one of the things.  So CERT was saying, whatever you - just delete it as quickly as possible.  Do not click the link, and do not respond.



STEVE:  Good, I'm glad everybody heard that.



LEO:  And it's illegal to do this.  And JBR is saying, well, the carriers require that SMS senders actually honor the STOP requests.  But these guys are pirates.  They're fly-by-night.  I don't think that they're, yeah, oh, yeah, we're going to honor the STOP request.



STEVE:  And as soon as they get blocked, they'll just move identities.



LEO:  Just move to another - exactly.  The guy keeps calling me Michelle.  I don't know why.



STEVE:  That's your tipoff.



LEO:  I'm not Michelle.  I want to text him back.  Hey, it's Leo.  Would you mind fixing...



STEVE:  Maybe it's supposed to pique your curiosity.  Like, wait a minute, why?  I wonder what is the back story here.



LEO:  Yeah, who is this guy?



STEVE:  So Ron Thomas tweeted me the news, that I wanted to share, that Mark Russinovich's two novels, "Zero Day" and "Trojan Horse," are now available on Audible.  So for people who have not yet...



LEO:  Two great books.  Can't wait.  I just got "Antares Dawn."  So now you're using up all of my Audible credits.



STEVE:  Yay, yay, yay.  I'm so glad you're going to try "Antares," Leo.  It will not disappoint you.



LEO:  Awesome.



STEVE:  That's the next thing I'm going to re-read.  I've been itching to do that.  And also we seem to now have the Bad Programmer Joke of the Week.  It's like, okay, they're short, I can do that.  Remember we had the parity-based joke last week.  So now we've got:  Two bytes walk into a bar.  The bartender says, "Can I get you anything?"  One of them says, "Yes, make us a double."



LEO:  [Groan] It's a typecasting joke.



STEVE:  Exactly.



LEO:  Cast me a double, bartender.



STEVE:  You don't want to be typecast.  But sometimes, if you're a byte, you need to be typecast.



LEO:  You need to be cast.



STEVE:  That's right.  Because you're just not long - okay.



LEO:  Oh, lord.



STEVE:  And totally random, I know about this, I know this is random, but I tweeted this when I was still trying to get my breathing under control.  Saturday I saw "Olympus Has Fallen."



LEO:  What's that?



STEVE:  It is pure escapism, over-the-top action.



LEO:  It's a movie?



STEVE:  Yes.  It came out Friday.  The White House is under siege by foreign bad guys.



LEO:  Wow.  That might actually be true.



STEVE:  It was wonderful.



LEO:  Wow.  "Olympus Has Fallen."  Okay, great.  It's Morgan Freeman, they're saying.



STEVE:  Yup, and other people who don't really matter.  But they're in masks and running around.  It's pure - and I'm not saying it's a great movie.  Lord knows it'll never be winning any awards.  What I tweeted was, "Of LSV, it has tons of L and V and doesn't need any S."  I said, "Wow."



LEO:  I prefer my movies all S, no L and V, but that's just me.



STEVE:  Well, it's funny because there's - oh, I'm watching, among other things, I love "Justified."  And at the end of every commercial break, up comes their warning.



LEO:  Really.



STEVE:  And, you know, "LSV."  Which of course is language, sex, and violence.  And I jokingly say to Jenny, I said, "It has everything."



LEO:  This is what I'm looking for.



STEVE:  What more could you want?



LEO:  But it's a network television show.  How much LSV can it really have?



STEVE:  Oh, "Justified"?  You don't know about "Justified"?



LEO:  Well, what network is it on?



STEVE:  Fox.



LEO:  Oh, yeah, so maybe they can do more on Fox.



STEVE:  And it was made for Timothy Olyphant, who we all got to know in "Deadwood," HBO's "Deadwood" series.



LEO:  Oh, it's based on Elmore Leonard novels.



STEVE:  It's really good.



LEO:  Oh, it's FX, not Fox.



STEVE:  Oh, sorry, right, FX, right, right, right.



LEO:  FX.  Oh, I love Elmore Leonard.  He's very gritty.  Is it gritty?



STEVE:  It's very, yes.  And it's got lots of LSV.



LEO:  Really.



STEVE:  Oh, yeah, it's, I mean, everybody who's into it is really into it.  So maybe get the first - find the first season and check it out.



LEO:  Oh, yeah.  I'm sure I can watch it on...



STEVE:  You won't be disappointed.



LEO:  ...Hulu Plus or Netflix or somewhere, yeah.  It's a modern-day lawman.



STEVE:  Yup.  And he's just - he's ber cool.  He is just super cool.



LEO:  Is this the one in Vegas?  Is he in Vegas?  No.



STEVE:  No.



LEO:  That's a different one.  He's in Miami.



STEVE:  No.  The very first episode we have an opening scene with him in Miami that sort of sets us up.



LEO:  I see.  He's in Kentucky now.



STEVE:  Yes.  And he generally gets himself in trouble, and he says, well, it's justified.



LEO:  Oh, I like it.



STEVE:  Oh, it's good.



LEO:  Huge Elmore Leonard - have you ever read any of his novels?



STEVE:  No.



LEO:  You would like Elmore Leonard.  If you like this - he wrote "Get Shorty" and a number of movies, novels that were made into movies.  But, yeah, you get into Elmore Leonard, you will love - it's gritty crime stuff.



STEVE:  Ooh, that does sound good.



LEO:  I think you'll like - pick one up.  I'm sure it's on Kindle.  And I'll make you a deal.  I'll watch "Justified."



STEVE:  You'll be happy.  I think you'll like it a lot.  And I think we're in Season 3, so you've got three really good seasons.  Lots of content.



LEO:  Yeah.



STEVE:  So I had this email from Dario Matonicki.  He clearly had fun writing this.  This is actually dated Wednesday, March 27th.  So, wait, is that today?  Oh, yeah.  It was titled "My SpinRite Magic Moment."  And he said, "Hi, Steve.  I've been sitting on my copy of SpinRite for some time now, waiting for the moment where I can jump up and save the day, and today was that day.



"I arrived at my office this morning to a scene where a few IT chaps were gathered around a laptop with various versions of rescue disk software, eventually proclaiming the laptop deceased.  'It's pointless.  Even the BIOS is not seeing the drive,' one in the group proclaimed.  'This one is dead.'  'Sorry, bud,' others chirped in as they comforted the laptop's owner.  I turned to them and asked, 'What did you try?'  'We tried everything.  It's dead.'



"And there it was.  My SpinRite moment was standing right in front of me.  'Everything?' I said.  'Did you run SpinRite?'  The room was suddenly quiet, and I was in shock that none of these self-proclaimed IT boffins had a clue what I was talking about.  'Step aside.  Let me show you the magic of real craft.  Nothing is declared dead until SpinRite spins it,' I professed.  SpinRite CD in.  Power up.  SpinRite splash screen on.  Start recovery option.  'Detecting mass storage drives' message pops up on the screen and stayed there for a while.  'You see?  It's dead,' someone in the crowd shouted.



"I took a deep breath and gathered my thoughts and asked myself, what would Master Steve do?  Never give up, that is what Master Steve would do.  So I pulled the drive out of the laptop.  'We tried that already, too,' they proclaimed.  But I ran SpinRite on it outside of the troubled laptop, put the drive back in, powered it up, and voila, drive was recognized, OS booted, and the crowd rejoiced.  'How did you do this?  What is this SpinRite?'  Questions flew from all sides.  I handed a link to GRC.com and said, 'Here.  Get your copy of SpinRite now so you can save yourself when the time comes or be a hero to someone else in need.  Now go and make a few yabba-dabba-dos, for it's the best money you will ever spend.'  So, Master Steve, thank you for giving the world SpinRite.  May the Force be with you.  Dario Matonicki, Cape Town, South America."



LEO:  Wow.  South Africa, probably.



STEVE:  I'm sorry, South Africa.  I was just overwhelmed.  I was overcome.  Dario, thank you so much.



LEO:  That's a great story.



STEVE:  For the fun piece, yes.



LEO:  So I was just looking at Elmore Leonard's novels, trying to figure out which one I should recommend, and I realize, so many of his novels...



STEVE:  That they're all good?



LEO:  They're all good.  They've been - look it.  He wrote - see if you recognize any of the movies that came from this.  "Hombre," 1961, of course.  "Mr. Majestyk."  He wrote, let's see, "Bandits," which was made into a movie with - "Freaky Deaky," "Killshot," "Get Shorty" was made into a movie.  He's - "Cuba Libre," "Be Cool," great stuff.  "Mr. Paradise."  If you like "Justified," I bet you'd like his stuff.  He's a really great novelist, been at work since 1953.



STEVE:  As soon as - oh, that means that he just turned 60.



LEO:  No, no.  Wasn't born in 1953.



STEVE:  Oh, whoa, then he's a lot older.



LEO:  He's been writing since 1953.  Yeah, he's - I interviewed him.  He's a great guy.  Very much like his characters.  Bruce Willis, that's right, was in "Bandits."  All right.  I have got questions in front of me.  I bet you would like to answer some questions.  Would you?



STEVE:  That's why we're here this week, Leo.



LEO:  That's why we're here.  The "Listener Driven Potpourri," as Steve is wont to call it.  Question Numero Uno from Steve "The Evil Scotsman."



STEVE:  If that's what he calls himself...



LEO:  All right.  He's great.  He wonders what's up or down with his shields?  I won't do the whole thing as a Scotsman.



STEVE:  No, please, please.



LEO:  No, I promise.  He says - although it is tempting.  Steve, I was recently using your great ShieldsUP! test.  Previously, every test came back as fully stealthed.  But recently it's come back as stealthed apart from ports 135139, which were shown as, not stealthed, but closed.  At first I thought it was a problem on my end, so I went to my ISP's forums, and I asked if some users could do the same test, which they did.  Now all of their scans now come back as closed on those ports and stealthed on all others, when previously they were fully stealthed.  I have a feeling I know what's going on.



So then we got a hold of an excellent tech support person from our small Internet service provider, and they said, yes, indeed, we are blocking ports 135139, but we've been doing it for years.  And as far as they're concerned, nothing else has changed, and that's how the ShieldsUP! test results should have always looked.  But a lot of us from that forum run the ShieldsUP! test regularly, and the result, apart from these recent tests, have always been fully stealthed.  So we're wondering, did something change in ShieldsUP!?  Has it been tweaked, upgraded within the last few weeks or month?  Because that's when the majority of people agree they first saw a fully stealthed "passed" test was a month ago.  If the test has not been changed, then our ISP will look more deeply into it.  But they're going to the source.  Mr. Steve Gibson, what's the story, morning glory?



STEVE:  I did change ShieldsUP!.



LEO:  You blew it.



STEVE:  Actually, no.



LEO:  You know, it's funny, these ports are the - not blew it.  But these ports - you did it.  These ports are the original ports you started ShieldsUP! for, way back when.



STEVE:  Yes, those are the Windows printer and file-sharing service ports.  It's actually moved to port 445 is what Windows uses now.  But they used to use a combination of 135 and then 137, 138, and 139.  Never 136, but just I guess it's easier to block that range, so they just throw that one in for good measure.  What happened was...



LEO:  Those are the old - we called them NETBIOS ports.



STEVE:  Yes.  Well, yeah.  Precisely.  A couple weeks ago somebody in the GRC newsgroup reconfigured their router - they're, like, a Linux/UNIX person - reconfigured their router to respond to TCP SYN packets, that is, connection-opening packets, not by dropping the packet, but by sending back an ICMP destination unreachable.  That's ICMP we've discussed, back when we were talking about the underlying plumbing of the Internet technology years ago.  That's a very simple protocol in the same sense that UDP and TCP are protocols.  ICMP is, for example, what ping uses, where you just, when you ping a server, it's just you're sending one little packet out saying "ping," and if the server is there, it's supposed to send it back to you.



One of the things that can happen is that, when a port is closed, it declares itself closed.  Now, a normal TCP closed port will send back a reset, essentially rejecting your attempt to open it, to connect to it.  But it's also possible that it would send back an ICMP.  There is a message, port not available.  This came up because I was doing that for the UPnP exposure test that I added a couple months ago.  Remember when we had the revelation that there were all these Universal Plug & Play ports exposed.  So I quickly, like the day after the podcast, I added a new service to ShieldsUP! to allow people to check.  And we were north of 3,000 last time I looked.  Maybe we're at, like, 3,200 people have actually found themselves exposed.  So that's good.



But one of the people in the newsgroups reconfigured their firewall to send back ICMP port closed in response to TCP.  That's not the normal response.  But it can be done.  And I wasn't looking for ICMP ports, that is, ICMP packets coming back.  So there was some discussion in the newsgroup, well, shouldn't you really?  And at the time I was right in the middle of working on the server, and I said, well, how hard can that be?  So I spent a couple hours, and it turns out the architecture that I had, which I mentioned, for the Universal Plug & Play stuff, that was so easy to add because I've really got a very good architecture that I built when I rewrote ShieldsUP! the second time.  So it's like, oh, I know how to do this.



So I added some code to show when anything comes back.  I was already doing an omnibus collection of "anything."  That's where this true stealth label you get, if you're true stealth, it's because during all of the outbound probes, nothing ever came back.  But I didn't - I wasn't showing what was coming back, just whether anything was or not.  Now I'm showing which ports we hear from.



Now, what happened, this is a side effect that Steve the Evil Scotsman was the first to bring to my attention, which is people used to be stealth, but they weren't really.  But it wasn't - here's the dilemma.  It's not they who are not stealth.  They really are.  It's their ISP that is in front of them, from the standpoint of my ShieldsUP! testing, that is intercepting that port range and not dropping the traffic.  In traditional firewalls, you can have a rule, when the packet matches certain criteria, like it would be TCP port 135139, then what?  Well, then you could - normally you would drop the packet.  That is, you just drop it.



But there's another verb that firewalls can use which is "reject."  And so this ISP, and we have since learned other ISPs, are rejecting the packets, meaning they are sending something back saying this port is closed.  So they're not showing as stealth any longer on the ShieldsUP! test, that is, the end user is not, not because of them, but because of their ISP that is being noisy about its blocking of those ports.



So I'm not sure what I'm going to do about it.  I mean, I've got so many things that are backlogged that I want to get to.  I really don't want to do a major reengineering of ShieldsUP! right now.  So I'm tempted just to remove this.  On the other hand, it's providing some useful information.  What I really should do, and what I'm going to look at seeing if I can do without it sending me back months, is add another state of a port.  Right now we have open, closed, and stealth.  It would be nice to add "filtered," maybe a different color.  I'm sure it would be a different color.  And what it would mean is that we got something back from an IP not yours, which would probably mean it was the ISP sending back an ICMP, which would say, okay, this is not noise from you, this is noise from somebody between you and me, almost certainly your ISP.  If I can do that without needing to move heaven and earth, then I'm going to do that.



So that explains it, not only for the Evil Scotsman, but for any of our listeners who are ShieldsUP! users, now or immediately after hearing this on the podcast, I imagine.  And given the traffic on the website, I see that has already happened.



LEO:  Just for people's understanding, and you explain it very clearly on ShieldsUP!, why is it important that it be stealth, not closed?



STEVE:  I don't know that it is, really.



LEO:  Especially if the ISP is closing it; right?



STEVE:  It's something you could have, and it's cool to have it.  I mean, it's just sort of like, right now the Internet is being scanned for Universal Plug & Play ports and for telnet ports as a consequence of the last couple podcasts where we've reported on these things.  I think it's just nicer to not appear to be present at all.



LEO:  That was the idea of stealthing is that, some bad guy knocks, instead of saying "There's nobody home," which says in fact there's somebody here, we're just not letting you in, you just don't respond.



STEVE:  Yes.



LEO:  But if it's an ISP doing it, it's still on your IP address.  Although I presume the ISP does it for all IP addresses in their block; right?  Whether there's a machine on the other end or not.



STEVE:  Yes, and I'm glad you've raised that point because that doesn't say anything about you.  It's really talking about them, meaning their entire customer base.



LEO:  Now, whether the hacker is smart enough to know the difference, I don't know.



STEVE:  Well, now, the one argument has been that, if this blocking is occurring at the ISP's border, maybe users within an ISP can see each other's ports.  And so, if someone scanned their own IP neighborhood, then they would be scanning inside of that perimeter which is protected by the ISP.  So if somebody had ports 135139 open, ShieldsUP! previously wouldn't have been giving them any reason to worry.  Now at least they would know, oh, wait a minute, somebody else is blocking, so maybe I'm not safe behind that block.  So it's useful information.  Anyway, I didn't want people to be freaked out and confused, starting with Steve the Evil Scotsman.  Who will probably now be changing his email address.



LEO:  Christopher, who is not evil in the least, Christopher A. Hunt...



STEVE:  No.



LEO:  ...said I got this email from my credit union.  Actually my bank.  Well, credit union.  After having listened to the episode involving SSL Labs, I submitted my bank's URL, received a "C" or a "B" rating.  I forget now, but it had major frightening failures.  My bank now has an A rating with 90 percent or greater subdivision.  Thanks for your service to the community.  It's most appreciated.



Here's the email he got from the credit union:  Dear Mr. Hunt, thank you for your email regarding our rating at SSL Labs.  We have analyzed the result and, as a result, we've made changes on our website to mitigate the possible BEAST attack vulnerability, to bring our website up to an "A" rating.  Wow.



STEVE:  I know.



LEO:  That's why I like credit unions.  You know?  They're small and responsive.



STEVE:  Yes.



LEO:  The only item left open is the currently known and problematic RC4.  At this time there is no known attack that can take advantage of this vulnerability within RC4; and, until all major browser vendors, Apple being the only major vendor left, implement the fix, RC4 will continue to be used.  Again, thank you for bringing this - this is somebody smart.



STEVE:  Yes.



LEO:  Lee Anderson, network administrator, TIC Federal Credit Union, Columbus, Georgia.  That is good news.  Wow.



STEVE:  Yeah.  If you get email like that back from your financial provider, yes, you've found a good one.



LEO:  Feel good.  You know, everybody - I was unhappy with my bank, and I asked on Twitter, what do you recommend?  Universally, people who have credit unions are much, much happier with their banks.  They're nonprofit.  They're responsive.  That's a really good example.  Now, sometimes they're so small maybe they don't have good security.  This one does, anyway.



STEVE:  Yeah.



LEO:  Eric Cook, Millwood, New York, wonders about the scheme he cooked up for encrypting his tax information.  I love these homemade encryption schemes.  Let's see, what's the latest?  Love the show, long time listener, blah blah blah.  Been using a secure email program called Protected Trust, at ProtectedTrust.com, basically to send my tax information to my accountant.  It asks for a password.  It is encrypted.  The recipient has to plug in the password to decrypt and see the message.  So after sending the email - so it's a symmetric password, in other words.  After sending the email, I send a separate email a few minutes later with a password, unencrypted [chuckling].  I'm sorry.  Is this secure?



My rationale is the first email can only be read if it's intercepted, and they have the password.  By the time the second email is sent, the first should have arrived.  And even if it has been intercepted, they would not know what the password pertains to.  I do not think people are intercepting emails and saving them.  Is that even possible?  If so, the volumes would be so great, the likelihood of them connecting the two emails would be slim.  Am I correct in this, or way off the mark?  Thanks.



STEVE:  Well, okay.  So all of our listeners are...



LEO:  This is the problem with symmetric key crypto.  Right?  Back when you were Julius Caesar, and you wanted to send a message to the Persian king that was encoded, you had to send two separate messengers, one with the key and one with the message because you needed the same key to unlock that you needed to lock it.



STEVE:  Yeah.  Now, what I would say, from a security standpoint, the biggest vulnerability here is that all of the information required to decrypt the email containing obviously his tax information that he cares enough about encrypting to do so...



LEO:  Well, it's his Social probably in it.



STEVE:  It's all being send through the same channel.  So a bad guy monitoring just one channel gets everything that they need.  If you wanted to summarize the problem, that's it.  Now, there's a whole 'nother problem, which is what is ProtectedTrust.com.  Is it doing client-side, browser-based, pre-transmission encryption?  Or is it receiving it in the clear and encrypting it so someone else can't get it unless, I mean, the whole thing sounds kind of hokey.



But here's the smallest, easiest - because we want to provide something practical for Eric and anybody else who wants to do something like this.  I would say arrange a different channel.  Write down on a piece of paper, fold it twice, stick it in an envelope, and paper mail it, the password that you've chosen.  Or anybody legitimate who's in the tax accounting business is going to have a fax machine.  Write it out in big letters and fax it.



LEO:  That's a good idea.  It's a different channel.



STEVE:  Use a different channel, exactly.



LEO:  Somebody would have had to commandeer both to have a chance.



STEVE:  Right.



LEO:  Although this is the problem that public key crypto solves.



STEVE:  Absolutely does.  So if the tax accountant had a private key, then they could provide, to anyone wishing to submit secure email tax information to them, their public key.  In which case Eric would encrypt with a public key.  No force on Earth that we're aware of, even the NSA as far as we know, can do anything about that because that public key, the way that this would work is Eric would have some sort of an app that does this that generates a large pseudorandom symmetric key.  That gets encrypted with the public key of the recipient and then all of that sent off to the recipient.  And then, because they're the only people with the matching private key, they alone are able to decrypt that encrypted symmetric key to get the plaintext, the decrypted symmetric key, which they then use for their bulk decryption to decrypt Eric's taxes information.  So all of this is, like, all open source, all in the public domain, open.



LEO:  PGP is a great way to do this.



STEVE:  PGP, yes, exactly.



LEO:  That was what it was designed to do.



STEVE:  So there are secure ways to do it.  The only problem is he's saying I counted to 10 before I emailed my password.  It's like, okay, that doesn't work, even counting to a hundred, because the point is it's the same channel.  Use a different channel.  I realize it's too late for this tax year, apparently.



LEO:  It's probably okay, too.  I mean, come on.  Unless somebody's actively pursuing the fellow.



STEVE:  I know.  I know.



LEO:  But the public key just solves it.  It's so straightforward.  Instead of having a single symmetric key that both ends have to know, and so somehow this key must be exchanged securely, you have two keys, one that you can tell everybody.  That's what they use to encrypt.  One you keep to yourself, the private key that only can be used to decrypt.



STEVE:  Yeah.  It is so, so cool.



LEO:  It's brilliant.  It's brilliant.  It's a brilliant conception.  And if Julius Caesar had had that, he'd be alive today.  No.



STEVE:  And Rome would be a different place.



LEO:  Rome would be a different place.  Trey - oh, boy.  Trey Dismukes in Houston raised an - I'm sorry, Trey, for butchering your name.  Dismukes.  That can't be right.  Steve, regarding the trouble with having ISPs blanket blocking all UPnP UDP port 1900 traffic - right, Michelle?  Right - and how it might cause some potential issues with legitimate traffic, we've come a long way in the last 10 years of network security technology.  We can block much more granularly than just by a packet's destination and port number.  Oh ho.  On-the-fly pattern matching on the contents of packets using UDP 1900 can allow ISPs to block UPnP without affecting legitimate responses.  You talk about deep packet inspection.



STEVE:  Leo, you can make even something as dry as on-the-fly packet...



LEO:  Oh ho ho.



STEVE:  ...packet matching by port destination really come alive.



LEO:  Yeah.  Deep packet inspection, baby, heh heh heh heh.



STEVE:  Anyway, so Trey is exactly right, and I wanted to give him his day and to mention that he's completely right.  I wasn't assuming that on the behalf of ISPs.  Routers are often incapable, simple routers are - they excel at doing what they do very fast in order to keep up with the so-called "line rate," the rate at which the packets are flying in and out over the wires.  So some of them are only able to do a, is this bit pattern what I'm looking for, and if so.



But on the other hand, bit patterns exist inside packets.  And so he is correct that there is a, that is, you could look into the packet at more of the contents of the packet or, as you say, deep packet inspection, which is the formal term, see if this is, for example, random web traffic that just happens to be using port 1900, I'm sorry, or DNS that would be a typical client of UDP port 1900 because DNS tends to run over UDP, whereas web is over TCP, so that would disqualify TCP immediately, see if it's a DNS query.  Those are well identified.  And no person's browser, I'm sorry, no person's router would respond to a DNS packet on port 1900, probably because, from inside the network, it would just pass it right through.



So if you had the ability to do deep packet inspection, you could explicitly allow either DNS packets and block others, or better would be to see whether the packet is a UPnP probe and then drop it.  In which case you would be protecting your users, not wrecking up, not messing up any other traffic that's running over that port, and it would be workable.  I don't know if an ISP's going to care to do that, but Trey is right.  It's absolutely possible.



LEO:  And a very common feature in all big firewalls, big iron firewalls.  And would it be fairly easy to recognize an UPnP probe?



STEVE:  Yeah.  They have an absolutely definitive fixed format and - because I wrote one.  The ShieldsUP! system is a UPnP probe.  And I followed an absolutely rigid template that you could easily match on and say, whoops, we're not letting that one go by.  There's no point, there's no reason for that to ever be out on the public Internet.



LEO:  That's why a good ISP really is good.  You know?  Find a good one.



STEVE:  They're worth their weight in what you pay them every month.



LEO:  They tend to be, the big ones, like the big national ISPs, tend not to do a lot of that stuff because, well, for one thing, think about it.  If they turn off port 25 to block SMTP, for instance, they're going to spend a million dollars in support calls from people because they have lots of customers, and some percentage of them are going to say, what the hell?  So it's, you know, what are you doing?



STEVE:  It's like my own operations gal, Sue.  She uses a Cox cable modem.  Cox blocks port 25.  So she's unable to connect to GRC's server, so we had to set up an alternate port that she's able to use that Cox doesn't block.  And in fact I've got a RAID, I've got an email trigger on the RAID that I installed last time she had a problem, and it was very problematic getting it to be able to send email out of her computer because Cox was saying, no, we think you may be a spammer.  We're not getting spam get out.



LEO:  Drew Moseley in North Carolina offers a truly clever hack:  Hi, Steve and Leo.  Blah blah blah.  I like it.  He has <praise> blah blah </praise>.  I was reinstalling my mother's Windows laptop the other day, and it came time to install a PDF reader.  I immediately, immediately thought about downloading Foxit.  And then I had a revelation.  Why, there's already a PDF reader installed.  It's known as Firefox 19.  Since I was going to set her up with Firefox as her default browser anyway, and in the interest of not installing anything she wouldn't use, I decided to set up the file associations so that PDF files would launch Firefox.



STEVE:  Isn't that interesting.



LEO:  Yeah.  Didn't show up in the suggested apps.  Windows probably didn't know to include that.  But I was able to browse through the file system to select Firefox as the preferred app for PDF files.  And, voila, one less app installed that required maintenance updates, et cetera.  Admittedly, the PDF viewer and functionality in Firefox is new and thus likely less secure than Foxit.  But since Firefox will be installed regardless, I figured, a reasonable compromise.  Thanks for all you do.



STEVE:  I thought that was very clever.  And at least in Windows, when you right-click on a file, there's, like, "Open With" is an option in the properties that comes up.  And then you're able - it gives you some things that it knows can open the type of file by extension that you're opening.  But you're also able to browse for your own.  So he said, let me choose my own, and then he dragged through, scrolled through a list, found Firefox and said, yeah, open PDF files with Firefox.  And that's all you need to do because, when you launch Firefox and give it, at the end of the command, it treats that like a URL.  And when it sees .pdf it says, ah, I know how to show these now.  And so it turned Firefox, multipurposed it, essentially, turning it into his system's default PDF reader.  Which is very, very cool.



Now, I'll make a comment.  This gives me an opportunity just to say I'm still using Firefox's native, that is, newly native PDF reader unless I want to print.  It's pretty crappy when it prints.  It shows things on the screen pretty well.  Printing is challenging.  The nice thing is, when it comes up, there's like a "Download This" icon.  You can click on that.  And it doesn't download it again, it just pops up a "Save As" dialogue.  So then I'm able to save that PDF to my system, and then I open my normal system's PDF viewer, which is extremely capable, and then I use it to print.  It's also very slow to print.  So it's like, if I want to print it, I don't even try that in  Firefox, though I do like it for viewing PDFs.  Sort of in Drew's approach of just one fewer thing to have in a system is always good.



LEO:  From Bethesda, Maryland, Doug Zuckerman comments about Windows 2008 Server:  Hi, Steve.  I was just listening to the feedback show from a couple of weeks ago where you mentioned you'd finally replaced your creaky old Windows 2000 machine with 2008.  I just wanted to make sure to let you know that, if you chose 2008 and not 2008 R2, I would highly recommend upgrading to R2 ASAP.  I have found 2008 R2 to be a phenomenal server platform, and stability-wise it's a must-have over 2008, which has some weird bugginess, most of which was fixed in SP2, but it still falls short of R2 SP1, IMO.  I'm responsible - I believe if you write "IMO," in my opinion, you're supposed to write "IMHO," in my humble opinion.  I'm responsible for a few hundred machines - oh, that's why he's not so humble - nearly a thousand databases, and about 300TB of data at my job, so I've had a pretty good platform to test and develop an opinion on the matter.  So it's not so humble.



STEVE:  And I saw this, and I thought, okay, perfect opportunity for me to say I really am happy.



LEO:  You use R2, of course.



STEVE:  I mean, I am really - of course.  And I am really happy.  Actually, I first did only '08, 2008, because you know me, on the theory that, well, if it's newer, it's not better.  But shortly after I got the feel for that, I realized that its crypto support was still lacking.  It did not offer TLS 1.1 and 1.2.  And I thought, well, okay, it's a lot better than 2000.  But I felt like I was already behind the curve.  Now, what I have since learned and really appreciated is that Server 2008 is the server version of Vista.  Need I say more.



LEO:  And R2, is that Windows 7?



STEVE:  Yes.



LEO:  Ah, interesting.



STEVE:  Yes.  And in fact it is Windows 7 enough that I don't run Server 2008 R2 here at home where I do my development.  I'm using Windows 7 here at home, sort of prototyping it for the future day when it becomes my main workstation OS.  And again, I am so impressed and happy and pleased.  And so I've got IIS 7.5, the web server, running on Windows 7 because it is the same as the web server running under Windows 2008 R2.  So, Doug, I am with you a thousand percent.  I just wanted to say to any listeners who are Windows users or people and so forth, that that's the one.  I'm really pleased.  2008 R2.



LEO:  Careful, Steve.  You're only a version behind now.



STEVE:  I know.



LEO:  Oh, boy.



STEVE:  This is when I start catching up.



LEO:  Only one version behind.



STEVE:  However, I won't be moving soon.  So I'll start falling, I'll start drifting back, then, again.



LEO:  Question 7, Mark in Colorado, Colorful Colorado, says great coffee recommendation, Steve and Leo.  Not a technical question, but thank you for giving the great coffee recommendation in Episode 391.  I've been on Steve's no-starch diet for the last few months, have shed 47 pounds.  By the way, Steve, almost every day somebody comes to the studio and says thank you, I did Steve's diet, and I've lost.  And it's - weight loss is often in that 50-pound area.  It's amazing.



STEVE:  I know.  I hear it the same way, yeah.



LEO:  He said, this morning I weighed myself and was below 200 pounds for the first time in about a decade.  Still have a ways to go, but I decided to treat myself with a coffee.  That's such a great treat, isn't it?  Since I started dieting, I haven't had any coffee, tea, et cetera, and I wanted to make this a very special treat.  I remember you guys talking over your favorite coffee, so I went to GRC.com and went through the transcripts, decided to give Steve's recipe a try.  I went to the store, bought a Moka pot, M-o-k-a.  It's an old-fashioned Italian stovetop espresso maker.  Stopped by the local coffee shop and picked up the dark roast espresso coffee, whole bean.  After getting everything set up, I ground the beans, put in the water, and about seven minutes later I had the best cup of coffee I've ever had.  No need for sugar or milk or anything.  Thanks for the great show and great cup of Joe.



STEVE:  For what it's worth, Leo, I did follow your advice.  I gave the Trader Joe's Kona a shot.



LEO:  What did you think?



STEVE:  Bitter, compared to what I'm drinking.



LEO:  You know, it is a little bitter, I think, yeah.



STEVE:  Yeah.  I'm going to grind to - the grind that I have found, and send up to you Steve's coffee.



LEO:  Okay.



STEVE:  And do you still have the cute little five-cup Zojirushi Zutto, whatever the hell that thing is, that wacky little thing?



LEO:  Yes.



STEVE:  Is it at home or...



LEO:  Oh, I have everything at home.  I have many ways of making coffee.  But I'll bring it in here.



STEVE:  Okay.  I'm going to...



LEO:  Now, I have to say, bitterness in coffee is a result, not necessarily of the bean, but of how you brew it, as well, because you know, and I'm sure I'm not telling you anything you don't know, but...



STEVE:  Well, and, see, that's why...



LEO:  The extraction process, temperature, length of time and so forth, can bring out different tonalities like bitterness and acidity, things like that.



STEVE:  And this is why I asked you about that machine, because I have already got - I've got the exact quarter-cup measuring scoop for you.  I've got the sealed, airtight container for you.  I've got the beans.  I want to send you, as long as you've got that coffee pot, I have everything calibrated.



LEO:  Now, which one is it that I'm supposed to make, the stovetop espresso Moka pot style?



STEVE:  No, no, no.  It's the Zoritsu or Zor...



LEO:  The drip?



STEVE:  Yes.  You use the brown coffee paper, stick it in there, and it does a drip in about five minutes.  And I was at Starbucks two weeks ago with my coffee and with my regular friends there.  And they're the people who, like, one of them is very health conscious, and he puts so much sugar in it, he might as well just call it syrup.  So I got a couple of the little espresso paper cups from the barista, and I poured from my thermos into these espresso cups and said, here, guys, just try this.  And they couldn't believe it.  They said it doesn't even taste like coffee, meaning that they really don't like coffee until...



LEO:  It's good, right.



STEVE:  Yeah, it's that good.  It's just amazing.  So I just want - I want to bring you onto the team, Leo, by - I'm going to send you a whole little care package.



LEO:  I will gladly...



STEVE:  We'll see what you think.



LEO:  ...try it out.  I'm looking at this roaster, Tonx.  Have you ever heard of Tonx, T-o-n-x?



STEVE:  No.  No.  So roaster, you're saying.  That's...



LEO:  Well, this is what's interesting about this.  So a number of people that I trust recommended this, Tonx.  What they do is they send you, like, 12 ounces every other week.  It's a subscription thing.  But they express it after they roast it, so it's exactly like three days later, which is what you're supposed to apparently do.  And they do their own - I don't know.  It could be just silly.  You know, they pick the beans, and they carefully hand roast it, blah blah blah.  But I've heard very good things about that.  I don't know.  So I will try your beans.  I will try your beans.  We'll see.



STEVE:  I will provide my beans.



LEO:  Where do you get your beans?



STEVE:  Starbucks.  That's what's so beautiful.  It's the Starbucks espresso bean.  That's all it is.  Universally available, everywhere in the Galaxy.



LEO:  The only thing wrong with Starbucks really is not the beans, but they over-grind them for use in the coffee making.



STEVE:  That's why I've even found the proper setting on the machine.  It's like, okay...



LEO:  Grind is very important.



STEVE:  Here it is, baby.  Give this a shot.  I'm going to...



LEO:  Okay, all right, Steve.  We'll see.  Question 8 from Bismarck Public Library in Bismarck, North Dakota.  Vern Mastel writes and shines some light on the Telnet-pocalypse population:  Steve, last week, one of your final comments was "What are all of these boxes?"  I'll tell you, Steve.  I at the library here have a bunch of HP printers.  The standard in-service procedure is to turn off all the extra protocols (telnet is one) and password the printer.  But that's our procedure.  The default for these HP printers, telnet on, passwords not.  In the past four years I've changed all my network switches to managed HP units.  These come out of the box with telnet turned on also.  The network switches, again, add a password and turn off extra protocols.  Otherwise....  I know a number of sysadmins don't do anything like this because it's inconvenient.  Cisco switches, out of the box, telnet turned on.  I have nearly a hundred backup power supplies.  I install the APC network management card in all of my APC SmartUPS units.  Yep, default passwords, telnet turned on.  I use $30 IP print servers as pingable devices in my power monitoring system.  Telnet?  Of course.



Boy, this guy is - Vern, you're smart.  I'm glad you paid attention to this because I doubt anybody else is doing this.



I do not doubt that many, maybe all other brands of network devices also come out of the box with things like telnet turned on.  Oh, boy.



STEVE:  So I guess when a company, a big company, has a block of public IPs, and they're assigning IPs to all of their equipment, public IPs...



LEO:  They don't bother to NAT it.



STEVE:  You're right, they're not NATed.  Exactly.  And they're certainly not firewalling, obviously.



LEO:  Out on the Internet.  Hey, we've got IP addresses to spare.  Why should we put a router in?



STEVE:  Come visit.



LEO:  Come visit.



STEVE:  Come visit.



LEO:  But of course, as you say, if they're behind a router, it doesn't matter if these are open.



STEVE:  Right, you won't be seen from the outside.



LEO:  Of course, if your router has telnet turned on...



STEVE:  Or Universal Plug & Play.



LEO:  Right.  Or both.  From the Twitter comes this from @ChivalryBean in Portland, Oregon.  @SGgrc - that's Steve's Twitter handle.  If I understood right, my lone computer has a better chance of making a litecoin than a bitcoin.  Am I right?  By the way, Steve, check Mt. Gox.  Your 50 bitcoins are worth over four grand now.



STEVE:  Woohoo.



LEO:  You're rich, my friend.



STEVE:  Baby, free money.  I like it.



LEO:  But I want to make it clear because, first of all, people say, oh, TWiT, you guys never cover Bitcoin.  Yes, we do.  Steve did an entire episode that was so definitive, there's nothing more to say about Bitcoin.  So go back in the archives of Security Now!, and you'll find all of that [SN-287].  The other thing, though, I think we kind of implied, since we talked so much about bitcoin generation, that to play in the bitcoin space you need to be running a bitcoin mining operation.  That's not true at all.  Right?  I mean, it's a currency.  If you accept it...



STEVE:  Oh, oh, absolutely.  You don't need to mine bitcoin.



LEO:  You don't need to create bitcoins to use them.



STEVE:  There's some guy in Canada wants to sell his house for bitcoin.  No, I got a bunch...



LEO:  That's actually probably a very good idea, unless the market crashes, and then you're screwed.



STEVE:  Yeah.



LEO:  It's a little risky because the market is volatile.  But if you believe this is the future...



STEVE:  And if he'd sold his house for bitcoin a year ago...



LEO:  He'd be sorry.



STEVE:  ...when the price was $15, yeah.  This stuff really is appreciating.



LEO:  But you could have said that about gold.  It's a little risky.  Let's not recommend it as an investment.



STEVE:  Virtual, it's virtual.



LEO:  It's virtual.



STEVE:  Okay.  So @ChivalryBean, yes.  What's happened with Bitcoin, because clever as it is, it is based on well-understood cryptographic hashing, it is possible to incredibly accelerate that.  There are people who use graphics processing units, GPUs in computers, to do hashing very fast.  There are people who just build boxes of how many slots do they have that they can fill with GPUs to create little sort of homegrown mining machines to try to solve the hash puzzles at a competitive rate.  And that's the key, a competitive rate.  And then there are people like Butterfly Labs that used to sell machines like that.  Now they've got ASICs, Application-Specific Integrated Circuits, ASICs, which just takes it to another whole level.  Mark Thompson was telling me that, if you could get one of these Butterfly Labs devices, they pay for themselves in four days.



LEO:  What?  Really?



STEVE:  Yes.  They cost $25,000, but you will make $25,000...



LEO:  You're guaranteed to make that many bitcoins.



STEVE:  Because it's that fast.  And the point is it's competition.



LEO:  Till everybody else gets one.



STEVE:  Until everybody else gets one, exactly.  And then all that does is that ups the ante again.



LEO:  Again, we've talked so much about generating bitcoins.  That's irrelevant.  That's just - you no more need to do that than you need to be the U.S. Mint to use dollars.



STEVE:  Correct, correct.



LEO:  This is just a medium of exchange.



STEVE:  But there is an alternative that is becoming popular called Litecoin, which is what @ChivalryBean refers to.  And what's unique about it is it uses memory hard problems.



LEO:  Ah.



STEVE:  It does not use a hash.  It deliberately uses Scrypt, which we've spoken of.  Scrypt is the memory hard technology that I described which absolutely requires memory, which ASICs don't have in abundance, which GPUs don't have access to at the same speed.  So this sort of - this resets the bar.  If you wanted to play with mining a currency, even though it's not the bitcoin currency, it's the litecoin currency, that's l-i-t-e coin, the playing field has been leveled again.



Now, Mark Thompson, he and I were talking about this.  He says, well, of course, but nothing to prevent you from doing ASICs with lots of RAM.  Well, that's kind of true, not so much.  I mean, ASICs, I mean, RAM is a specialty, and our CPUs have it now, very inexpensively.  So the answer is yes.  Litecoin is starting over.  It's more like the days when I just stumbled on 50 bitcoin one morning.  It's like, oh, look.  And that has inflated to $4,000, as you just said, Leo.  So...



LEO:  4,500.  I just looked at Mt. Gox.  It's 80, oh, wow.



STEVE:  By the way, you know that it was the judgment from the U.S. Treasury Department that we shared.



LEO:  Yeah, boosted it up.



STEVE:  That's what did it, was like, people said, ya ha.



LEO:  But it's - 88 bucks.  But it's highly speculative.  I've got to say this.  This is highly...



STEVE:  Yes.  So, because you don't...



LEO:  Worse than investing in gold.  I mean, this is...



STEVE:  You don't want listeners to go put all their money into bitcoin and then have it crash.



LEO:  Oh, it's - how could it possibly go down?  Or sell your house for bitcoin.  It's highly speculative at this point.



STEVE:  But if you've got some free computers that are sitting around, and maybe it's a little cold, so you'd like the exhaust heat from them to help warm the house...



LEO:  Well, that's the other calculation you have to do.



STEVE:  Uh-huh.



LEO:  Is the cost of generating bitcoins may in fact exceed the value of the coin generated.



STEVE:  Yup.  When the probability is so low that you can get one yourself, you end up spending more on the power, the electrical power required to try hashing such a low probability to get a coin versus the value per coin, that it just, you know, the economics don't work.  And what we're seeing is a gold rush toward high-speed hashing.  They keep pushing that higher and higher.  So only the people that are now going to be willing to invest in ASIC-based multi-tens of thousands of dollars hashing custom hardware are going to be the miners who push the coin all the way, the rest of the way out.



LEO:  Just to explain this, it's like printing money.  The difference is Bitcoin has been carefully calculated so that only a certain amount can be printed.  There won't be an inflation because it reaches a cap in something like 10 years, or maybe sooner with this ASIC inflation.  But at that point it's just done, and there's a certain number of bitcoins, and it's done.  And if you think about it, because U.S. dollars are just purely imaginary, they're pieces of paper that are not tied to any intrinsic value...



STEVE:  It's just agreement.  When I go to a restaurant, I'm giving him or her, the server, or the owner of the restaurant ultimately, my agreement, here's something we've agreed on, and other people agree, so you'll be able to go buy something else with that.



LEO:  But it's imaginary.



STEVE:  The medium of exchange.



LEO:  And so are bitcoins.



STEVE:  A medium of exchange.



LEO:  But it does rely upon this agreement and this consensual hallucination, as well, that it has value.



STEVE:  So one of the cool things about bitcoins is that, because it's a digital currency, you can have I don't know how many decimal points, but 0.000000001 of a bitcoin.  And so in some future, a single bitcoin, which is now at $88, you say, will very likely be at $100,000.  But that's okay because you can trade in incredible fractions of a bitcoin to buy a candy bar.  You're not stuck buying a $100,000 candy bar.  You just can buy a 0.000000001 of a bitcoin.  And so the value scales nicely because it is digital.  It's a digital currency.



LEO:  I'm reading an excellent book.  After our conversation of last week, I realized I really had to read up on this.



STEVE:  I'm so glad.  I'm so glad.



LEO:  Yeah, it's called "The End of Money."  And it's easy, light reading.  But it's very interesting, and it really does kind of underscore, well, first of all the history of money is very recent and very fascinating.  It was the Chinese - Genghis Khan, the Chinese emperor Genghis Khan, who was the first to issue paper currency.  And when he first issued it, he said, well, this silk script is worth a certain number of Chinese coins, and we have them in the bank.  We've got them back here.  At any time you can deliver that paper currency, we'll give you the coins.  Because they had coinage, but it was the first paper currency.  And coinage is ancient.



STEVE:  It was probably just too heavy to carry around.



LEO:  Right.  Script made sense, right.  And but then, and this always happens, he got, you know, he said, hey, nobody really ever asks for the coins.  We could just print more of this stuff.  And they did, and they collapsed the economy, inflationary collapse because people realized it actually has no value.  And we haven't been tied to gold since Nixon.



STEVE:  And so in terms of what actually happened in the real world is some wise street vendor said, you know, I think, if you're going to pay with that flaky funny money, then I'm going to need twice as much of it, rather than if you pay with real money, because I'm not so sure that's worth anything.  Thus inflation.



LEO:  And it could happen anytime, anywhere, as we've learned in Cypress [laughing].  Oh, it's fascinating.  It's probably better not to talk about this.



STEVE:  Brazil had a problem, too.



LEO:  Oh, yeah.  It's probably better not to talk about it.  The consensual hallucination could be damaged.  It's fine.  It's real.  It's money.  But that's what - I think that's why Bitcoin kind of freaks people out a little bit.  Freaks me out because it's just as - it's no less imaginary.  But it's an extra-governmental currency, which I think is fascinating.



STEVE:  I do, too.  That's why we discuss it here on the "what do you want to know about the Internet" podcast.



LEO:  Well, because it's crypto.



STEVE:  Yeah.  Exactly.  That was the original impetus was this is - and it's cool.



LEO:  Right.



STEVE:  It was done so well.  And it leveraged, at the time, everything we already knew that we've covered in, like, crypto, fundamental crypto technology, this notion that the algorithm requires you to come up with a hashed value with some number of leading zero bits.  And it is increasingly hard to get more of the left-hand bits zero moving to the right.  It's just more difficult.  It's just more difficult, and there's no shortcut that we know of.  You have to just keep guessing about values that you apply to the existing bitcoin block in order to find the value that'll give you the hash with all these leading zeroes.  And the more you require of the zeroes, the harder it is to find that one unique value.  It's just, oh, it's just a brilliant concept.  And so simple, too, which is what makes it so elegant.



LEO:  But it has to be a mutual, consensual hallucination for it to be effective.



STEVE:  Well, if some guy is willing to sell, if he can, sell his house for bitcoinage...



LEO:  But understand, he's doing that as a speculator.



STEVE:  That means there's two lunatics.  No, wait a minute.  Yeah, I guess only one, really.



LEO:  One has to buy it.



STEVE:  Because some guy collected all those bitcoins in order to purchase the house.  And actually he collected many fewer of them this week than two weeks ago.



LEO:  Right.  Somebody has to buy.  Somebody has to sell.  And the problem is that most of the people who are doing this right now are in fact merely speculators.  They're not, in my opinion, they're not really...



STEVE:  Well, it's coming into currency.



LEO:  People, they're greedy.



STEVE:  There are more and more places where you can actually exchange from bitcoinage into the real world.  It's a trend.



LEO:  It's very interesting.  Steve Gibson, if you have questions for him, he's got answers.  Every other week we do a Q&A.  If you want to leave a question at his website, GRC.com/feedback.  Don't email him.  GRC.com/feedback.  You don't accept bitcoin donations, do you?



STEVE:  No.



LEO:  No.  He's got plenty of bitcoins.  He doesn't need anymore bitcoin.  He's rich.  You can also go to GRC.com to get SpinRite - that's the donation he wants - the world's finest hard drive maintenance and recovery utility.  But he also has some other stuff there, lots of free stuff like ShieldsUP!, the UPnP tester there, the probe.  It's all right.  That's one of the probes that doesn't hurt.  But it is good to know.  He's also got a lot of free software and, for this show, 16Kb audio versions, that's the smallest version made, and full transcripts, English language, written by a human transcriptionist.  GRC.com.



Now, we at TWiT.tv have the bigger audio files and the video files, as well, on demand at TWiT.tv.  We do this show every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1800 UTC on TWiT.tv.  Please join us.  We love having you live, watch the chatroom, interact with the chatroom.  But if you can't, as I said, on demand is always available after the fact.  And you can, if you're from Wisconsin, you're allowed to visit the studio at any time.  We had two different, independently different sets of Wisconsin visitors.



STEVE:  Amazing.  What a coincidence, yeah.



LEO:  Yes.  Somebody sent me an email, how much does it cost for tickets?  It's free.  And you get what you pay for, I might add.  And we will make you sign a two-page waiver of all your rights when you step in the door, just in case.  Thank you, Stevie.  We'll see you next week.



STEVE:  Thanks, Leo.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#398	

DATE:		April 3, 2013

TITLE:		Distributed Hash Tables

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-398.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm



DESCRIPTION:  After catching up with a busy week in the security space, we cover an intriguing topic in fundamental distributed Internet technology, Distributed Hash Tables, which is the somewhat awkward name for distributed database technology.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here.  We're going to talk about something that powers everything from Bitcoin to Tor to Amazon.  It's called Distributed Hash Tables.  Get your propeller hats on.  This is gonna be a doozy.  Security Now! is next.



LEO LAPORTE:  It's time for Security Now! with Steve Gibson, Episode 398, recorded April 3rd, 2013:  Distributed Hash Tables.



It's time for Security Now!, the show that protects you, your privacy, your loved ones, your money, your bitcoin, whatever you got online.  Here he is, the king, the king of all, the Explainer in Chief, Mr. Steve Gibson of GRC.com.  Hi, Steve.



STEVE GIBSON:  Hey, Leo.  Great to be with you again, as every week.



LEO:  You know, I mention Bitcoin because it's been really in the news of late.  They exceeded a billion dollars, a billion U.S. dollars in value.  Although that says more about how inflated the bitcoin has become as opposed to the actual value of it, or the amount of bitcoin in circulation.



STEVE:  Well, I'd be careful of the use of the word "inflated."  It's the value of the bitcoin because inflation implies a judgment, and it's a relative term.



LEO:  Of course.



STEVE:  So we know that the value of bitcoins is going to go up over time because, I mean, they've succeeded.



LEO:  Is it?



STEVE:  Oh, yeah.  Yeah, yeah, yeah.  It has to happen because...



LEO:  But there's more being made all the time.



STEVE:  But always less more.  So already the curve is...



LEO:  Less than the demand, you're saying.



STEVE:  Already the curve is flattening.  Actually, technically, the curve has always been flattening.



LEO:  Oh, I see what you're saying, yeah.



STEVE:  The rate of production has always been decreasing.  And it stops in 2040, and there will never be any more.



LEO:  2140.



STEVE:  Is it 2140?



LEO:  2140.



STEVE:  Oh, okay.  Well, we've got a while, a ways to go.



LEO:  Unless The New Yorker got it wrong.  And the reason I brought this up, there's an excellent article - there are two very good articles.  There's one in Medium.com by the financial blogger for Reuters that's kind of more about current events.  And then there's a very good summary article in this week's New Yorker about Bitcoin.  And more than anything, that tells me Bitcoin's real, if The New Yorker's writing about Bitcoin in a long-form article.  It's very interesting.  And we've talked about, in fact, this is the only show I think where you'll really hear a deep discussion of the math involved, why the crypto and the math works in Bitcoin.



STEVE:  Well, and some of the articles that have been written have not been as skillfully assembled, and they've talked about, oh, well, why would you trust a digital currency that just can be inflated?  It's like, okay, this can't be.  I mean, you can't - governments can print money.  There is an absolute fixed trajectory on the rate at which bitcoins will be created.  And that's set in stone.  That can't change.  And the only thing that makes this feasible is that, because it's digital, you can have an incredibly small fraction of a bitcoin in a transaction.  So it'd be like, if you could actually never have any more money made, yet we were continuing to create value which we wish to exchange with money, then pennies would become valuable again because they would have to be.  And there you would see inflation driven by the fact that the money supply is fixed, rather than it being as it is with governmental...



LEO:  You can always print more paper money.  But in the year 2140, approximately, there'll be 21 million bitcoins, and that's all there will ever be.



STEVE:  Right.



LEO:  It's kind of cool.  Kind of cool.



STEVE:  Yeah, I think it's very neat, from a technical standpoint.  And the fact that it has happened, I mean, this is now, I mean, you're right, the last week of press, one thing it's done is it's raised the price of the bitcoin above a hundred dollars now.



LEO:  Well, that was what was interesting about The New Yorker article.  She supposed, and there is some evidence to believe, that it was Spaniards who had lost confidence in the euro because of the Cypriot crisis and so forth, that had started buying bitcoin in great numbers and had driven the price up.  And it's now, believe it or not, it's been going up a lot, $137.  So your 50 bitcoins - you're a rich man, Steve Gibson.  You hold on to these.  But then there was the heist of half a million dollars worth of bitcoin.  Now it would be worth considerably more.



STEVE:  Well, and this is what we cover in the podcast.  We cover mistakes.



LEO:  Right.



STEVE:  Because, when you're dealing in a world of cyber, you make mistakes in cyber technology in the same way that you make mistakes if you don't have a good lock on your bank vault.



LEO:  And now we presume the mistakes are being corrected.  So this kind of heist won't happen again, I guess.



STEVE:  Yeah, and when there were...



LEO:  It's not like there aren't plenty of heists of cash, by the way.



STEVE:  Right, right.  When there were very few exchanges of bitcoin, then the probability of it being a large event and one of very few exchanges was greater.  As we get thousands of bitcoin exchanges, each exchange will be smaller.  And so even if one completely got compromised, well, it's like, okay, well, they made a mistake.  They're paying the bitcoin price.



LEO:  Right, the iron price.  It's fascinating.  But I'd leave that for you to investigate in a previous episode.  If you go to GRC.com or TWiT.tv/sn, you can listen to our entire episode where Steve really does explain, in a beautiful way, the ins and outs of Bitcoin.  And I think that that's probably going to be, for a long time, anyway, the canonical description of Bitcoin by a third party.  It's Episode 287:  Bitcoin Cryptocurrency.  And then I did enjoy - there's a good Wired article.  There's a good, as I mentioned, Medium.com has an article today, and The New Yorker has an article.  And if you want to know more, those are kind of the laypersons' discussions.



STEVE:  I see no reason why currency would be exempted from the phenomenon of the Internet and everything else that, I mean, the Internet, as it's becoming more pervasive, more and more of the real world is moving there.  I mean, many people do their banking online now.  And so why not have a coinage?  It's absolutely reasonable.  And the good news is we didn't have several really bad ones first.  It would have been bad if several currencies had not been well engineered, came out and, like, stumbled because they were badly put together.



In that podcast you cite, Leo, you can hear me being excited because, during the prior week in preparing for it, I taught myself what the technology was.  And I came away saying, oh, my goodness, they did this right.  This is so cool.  And so, I mean, so here, very much in the same way that there wasn't an Internet 1 that couldn't grow, and now we have Internet 2, the original Internet is the same one we're using today.  It has turned out to scale brilliantly because the foundation of it was so good.  And of course we've spent many podcasts in the past talking about that, explaining exactly why it has managed to scale the way it has.  Similarly, the bitcoin is the currency.  There will always be other wannabes, like there's already Litecoin we talked about last week.  But this one has made it.  And...



LEO:  It's possible for there to be multiple choices.  Or no?



STEVE:  Sure.  In the same way that there are...



LEO:  I mean, there's multiple national, governmental currencies.



STEVE:  Yes, exactly.  And there are people who say, oh, I don't trust the dollar anymore.  I'm moving mine over into the mark or the yen or the whatever.  So, yeah.



LEO:  You know, I think I should set up - we have a dollar donation system from PayPal.  I think I should set up a bitcoin donation system.  Why not?



STEVE:  Well, I think that absolutely makes sense.  The EFF had that for a while, the Electronic Frontier Foundation.  And they liked having it because they liked the concept.  But they took it down with an explanation that they felt, due to the level of their influence, they were endorsing bitcoinage.  And that made them feel a little uncomfortable.  My guess is, if they still had it today, they would probably not take it down.  I doubt they'll put it back up.  But now with the recent decision by the Treasury Department saying, yes, this is legal, folks, it's one of the things that really - I think that was the catalyst for what we've seen in the last month.



LEO:  Yes, yes.  It also established kind of a standard.  Some don't like the idea of any governmental regulation.  But at least it kind of said, you know, we're going to treat these as a certain kind of entity.  This is the real deal.  And by doing that, I think it did totally validate Bitcoin.  Totally validated it.  But this is not a show about Bitcoin, and I've just - I've derailed you.



STEVE:  Well, what we've been talking about is a distributed currency.  And today's podcast is about the technology of distributed databases.  And it's unfortunate that the way of indexing the database has become the way they are known because the way you index them is through what's called a "hash."  And so the technology for finding the data in the cloud is called a "distributed hash table."  So today's topic for the podcast is Distributed Hash Tables.  But that's a lot less dry than it sounds because this is actually - it's the fundamental solution which has been worked out for how you distribute a database on the Internet in a way that is robust, meaning that it's reliable and available.  And it is tolerant of pieces of the database coming and going at will, yet it all still works.  So there's redundancy built in.  It is also impervious to tampering by authorities.  The original centralized database that Napster used for its audio filesharing was vulnerable because the authorities could stomp on the Napster hub.



LEO:  Centralized.



STEVE:  It was centralized.  BitTorrent does use this technology that we'll talk about today, distributed hash tables and a distributed database.



LEO:  Oh.  So it is germane.  That's good.



STEVE:  Oh, yeah, yeah, yeah, yeah.  I mean, it is in use now.  We know that the Tor network, which is what put us onto this topic, is using it as their own directory and index because there is no single point of failure.  There's no one anyone can - any authority who wants to control it can grab in order to shut it down.  And even Amazon, it turns out, uses this technology for all of their big storage.  This is how Amazon stores things because they need high availability, redundancy.  They're inherently multi-datacenter cloud-based.  But what they looked at when they looked at their needs, they said, you know, SQL, the Structured Query Language, SQL, is really too heavy for us.  We don't need all of that kind of stuff.



When you think about going to Amazon.com, a web page is being assembled from a whole bunch of different stuff, is all being pulled together onto the page.  Well, it turns out that all of those little bits and pieces have tags, and somewhere there is an image, there is a blob of text, there's a this or a that, that is, that you find with that tag.  So a page on Amazon.com is just a list of tags.  And they use a distributed hash table, distributed database in order to instantly yank that together.  And we see every time we play with Amazon that it works.



LEO:  Steve Gibson at GRC.com.  His Twitter handle is @SGgrc.  There's some good news, for Cox customers, anyway.



STEVE:  Yes.  Well, what I like about this, and I didn't know about this, is that Cox - which is a major cable provider around the country, it happens to be my cable modem provider and others in Southern California - they have taken proactive responsibility for blocking the Universal Plug & Play port 1900 that we've talked about.  We've talked about the danger of an ISP blocking it because it uses the UDP protocol, which DNS also uses.  It might, if it was blocking it with sort of a heavy hand, it might also cause some DNS problems.  But technically, even those would be very transient, if anyone even noticed the problem at all.



And if users are using Cox's DNS, which was what you get when you sign up with Cox, unless, for example, you deliberately used OpenDNS or Google's DNS or override the normal DNS settings, then you wouldn't even have that problem because your DNS queries would not be attempting to leave the ISP and come back, where they might get blocked if they happened to have left from your port 1900 and they were trying to come back in to your port 1900.  That's the action that a block of port 1900 would close.  Someone found a page on Cox's website that shows a complete list, not of just UPnP that they're blocking, but everything.  And it's sort of nice to know that they've...



LEO:  No, that's a good thing to know.



STEVE:  Yeah.  In fact, Leo, if you click that link in the show notes, you can see that they're blocking port 25 on TCP.  They show the protocol is SMTP, of course, which we know, and they're saying they're blocking it to prevent SMTP relays, so to prevent their customers from relaying spam, if they have that.



LEO:  That's very common.  Most ISPs do that.



STEVE:  Yes.  And they're blocking 80 so that...



LEO:  What?



STEVE:  Because they don't want...



LEO:  But that's...



STEVE:  Well, yep, I know.



LEO:  That's because that's the inbound web traffic.  So you could send a web request and establish a conversation, but nobody can send one to you.  That means you can't run a web server.



STEVE:  Exactly.  Exactly.  Because when we initiate requests, we clients, clients begin issuing requests from port 1024 and upwards.  It technically can go all the way up to 65535, but normally it wraps around about 5000 for most purposes.  So they are blocking inbound port 80 to prevent people from running web services because that's prone to abuse.



LEO:  And it's good for business.



STEVE:  And that's just not, yeah, it's not - because of the service agreement with them, exactly.



LEO:  Right.  They say you can't run a web server, so don't try.



STEVE:  Exactly.



LEO:  And they'll block it, yeah.



STEVE:  And then they're blocking - they're famously blocking the traditional problematic ports for Microsoft, 135 through 139, and they talk about that.  Also 445, which is the updated Windows printer and filesharing port for Microsoft.  They're also blocking the SQL port, which makes sense, 1433 and 1434, just because for some reason many things you install these days will, like, bring a SQL server with them because they want to use it locally.  But in typical not-planning-ahead fashion, the SQL server advertises its services on that port.  And if you were not behind a router, then that port would accept SQL queries technically from anyone in the public Internet, which is really not what you probably had in mind.  So it makes sense that they would block that, too, basically protecting users from themselves.



And then finally port 1900.  And that's of course the Universal Plug & Play port.  What's interesting is that the person who posted this, or shared this, I don't remember now if it was through Twitter or on GRC's own newsgroups, I asked, I said, I wonder how long this has been going on?  And they got back to me and said they asked a Cox person, who didn't really feel like they had a definitive answer.  But they said "forever."  So, meaning at least not just in reaction to this recent report of the millions of exposed Universal Plug & Play ports on the Internet. But that's something that they, if we're to believe them, preemptively recognized as a problem and took care of ahead of time.  So I say bravo to them.  And very nice that they're publishing that.  I don't know what other ISPs do or don't, but it's nice that Cox is.



One thing I do know that an ISP is doing that I wish were not the case is that Comcast...



LEO:  Oh, my ISP.



STEVE:  ...has recently been found to be injecting, not only injecting JavaScript into the pages that people browse to, that is, so you go to any website through Comcast as your ISP, and when the page at Google or MSN or anything, Facebook, is returned to you, Comcast is using deep packet inspection technology to inject their own JavaScript into the page from the remote site.  And, I mean, that's annoying sort of just from a purist standpoint.  But, moreover, it's badly written JavaScript.



So, for example, one of the problems that JavaScript has is it's trying to - it's still going through growing pains.  We're at ECMAScript - which is like the formal name of JavaScript - we're aiming toward version 6.  And they're adding features to mature the language.  But one of the original concepts was, oh, anybody can write JavaScript.  Well, apparently anyone did.  This is very poorly written.  And, for example, unless you take extreme measures, all the variables in JavaScript are global, so that you have to be very careful when you are mixing canned JavaScript that there isn't a collision of variable names.  If there is...



LEO:  It's so annoying.



STEVE:  I know.  Then those various scripts that intended for these variables to be private to themselves end up sharing the value, so they're stomping all over each other.  Well, this JavaScript does that.  It has not been written so that it uses containment.  There's a technology called "closure" that existing JavaScript can use which is so complicated that it's got its own book.  There's a book that O'Reilly produces on JavaScript closures.  And it's on my "when I really have extra time to get to it."  I've used closures for my own code because I want to be careful about not doing this.  There were no closures used here.  So any variable names in the script that you have no control over, that the site you're visiting has no knowledge is being added to its pages it's sending to you, is potentially stomping all over the variables that they created.  And it's doing other annoying things.



The idea is that this is Comcast's means of informing you when you've reached 90 percent of their bandwidth allocation for you for the month.  So if you're going along, surfing the web, doing your stuff, at some point, hopefully very near the end of the month, up will come a popup on your browser from Comcast saying, notice, you have exceeded 90 percent of your monthly bandwidth allocation.  All of this...



LEO:  So that's the purpose of this?



STEVE:  Yes.



LEO:  But it doesn't happen until you've reached that?  Or is it happening to everybody?



STEVE:  No.



LEO:  Oh, okay.



STEVE:  Apparently it is not being injected until they need to give you the notice.  They're using old code.  They're using code they took from other sites whose licenses they're apparently violating.



LEO:  Oh, god.  Some moron did this.



STEVE:  Yes.  This was really...



LEO:  Probably a contractor.  Oh, I can do that for you, no problem.



STEVE:  Yeah, uh-huh, yeah.



LEO:  Yeah, I can set that up.



STEVE:  And then, while the page is there, even after you close the dialogue, there are - AJAX is a technology in HTML5 and beyond that allows the browser to initiate queries out to the hosting site.  And you're prevented, AJAX is prevented from sending queries anywhere else for security's sake.  You wouldn't want your browser to be off doing other things to other sites.  So they've got code in there such that every page with this script starts making queries back to the host every five seconds.  So if you're someone like me, who has lots of pages open, if Comcast were my ISP - they're not, but were they - then every one of those pages would have had the same script redundantly loaded into it, and they would all be generating outbound queries every five seconds.  So it's just bad.



LEO:  Stupid, stupid, stupid, stupid.  Stupid.



STEVE:  It really is bad.



LEO:  Gosh darn them.



STEVE:  Yeah.  What they should do is, if this is what they want to do, they ought to, at the beginning of a session where your bandwidth is exceeded, just bring up an intercept page.  We're all used to that when we go to Starbucks or any standard - like an airport where they say - your normal use is intercepted by a page that says agree to our terms of service if you want to use our free bandwidth, and disclaimers and all that yada yada.  And so they go, okay, yeah.  That's all they would have to do, just say, wait, stop, you're at 90 percent, wanted to let you know.  Click here for more information, click here to lift the ban, whatever.  And then use the Internet in an unmolested fashion.



This is a case, a further case for encryption, HTTP, because that they cannot intercept.  So this is another reason why the whole notion of us, the 'Net moving to SSL/TLS all the time is a good thing.  It prevents our ISP from monitoring what we're doing, seeing what's going on, and from modifying the pages that we receive on the fly.  Definitely an annoying thing.



LEO:  We've seen that kind of stuff before with, like, changing 404s into advertising and stuff like that.  But this is really terrible.



STEVE:  Okay.  Now, you've got to go to a page, Leo, that bit.ly link that I show.  I'll just say it to you, and you can click...



LEO:  Yeah, go ahead, [indiscernible], okay, now you can say it.  I mean, you can say it out loud if you want.



STEVE:  Yes, and I will.  It is - I tweeted...



LEO:  We don't want it to bring down the site before I get to it.



STEVE:  Before.  But for everyone who's interested, I created a shortcut to an otherwise very long URL, bit.ly/javaage, all lowercase, j-a-v-a-a-g-e.  Now, Leo, the right way to look at this, because it's a little confusing at first, is at 12:00 o'clock, 12:00 o'clock is sort of the start and the end of this pie chart.  And so as we go clockwise from the dark side to the lighter side of the colors, we are moving back in history.  This is a...



LEO:  It's a pie chart of versions of Java that was created by Websense.



STEVE:  Currently in use.  That's the key.



LEO:  And the biggest pie slice is October 2009, with 9 percent compared to 5 percent of the current version.  And 8.5 percent for the original Java 1.0.  Jiminy.



STEVE:  Now, how many, you know, there are pages tracking the days since the latest exploit.  Everyone, I mean, one of the things we spend an inordinate amount of time on because unfortunately it's important, is the incredible insecurity of Java.  And they are constantly producing emergency releases in order to fix the latest problem.  What this says is this is a population study based on the current version loaded into the browsers on the Internet.  So these are the versions of Java that are accessible for exploitation.



And looking at this chart, again, bit.ly/javaage, you have to just despair because it says that this stuff is not being updated.  I mean, this is where the exploits are coming from today more than anywhere else.  We're on Episode, what, 398 of Security Now!.  Back in the 100s we were talking about email spam, you know, don't click on the links in email.  And while that's certainly still true, this has all moved to the 'Net and to these vulnerable plugins, Java, Flash, and Acrobat, or Adobe Reader.  And so here we're seeing the truth of the fact that old versions never die, and they absolutely should.



Now, the problem is that only the new versions auto update.  So if you have an old version, it never had auto update technology.  I mean, even though arguably two years ago, as you said, Leo, the October '09, what, no, that's more than two years ago, that's four years ago.  But we've had Windows Update and automatic updates and updates, and look how many prior versions of Java there were before that?  That's v1.6.16.  They started at 1.0.  There were already tons of major and minor updates, yet no automatic update facility.  They were in denial that, like, oh, this will be the last bug.  No.  Then, we found the last bug.  This is, you know, this is it.  This was four years ago.  Oh, no.  This was the last bug.  We don't have to update this ever again.  Uh-huh.



So the problem is, these Javas will never change.  I mean, unless something somehow went through and swept them.  Now, I wonder how they're being invoked because certainly Firefox and Chrome are taking responsibility.  I guess IE - IE's taking responsibility for Flash now, but I don't think it does anything to warn you about antique Java clones, I mean Java versions, in IE.  And so my feeling is, since Java itself cannot, it is not taking responsibility for keeping itself current back before that technology was added, it's up to the hosts of the Java plugin to do so.



And we really need all browsers to be proactive about this and just stop allowing these noncurrent versions to function.  It's a trivial thing for them to do, to check the release version of the Java plugin which is trying to run in them and say, uh, wait a minute.  And we know that Firefox does that.  And I'm pretty sure that Chrome must be doing that, too, because they've been so proactive.



And as a consequence, at the moment, vulnerable version, the most recent release is 1.7.15.  And we already know - and the similar release on the v1.6 track is 1.6.41 - 93.77 percent, almost 94 percent of all browsers today are vulnerable to that exploit and all the previous ones.  



LEO:  Nice.



STEVE:  Yeah.  It's just - really, really, really you want to stay away from this.  Just be very careful of Java.



LEO:  Now, I have created a bitcoin QR code that I will now flash on the screen.  If anybody is so hardcore that they want to donate bitcoin to TWiT, this will go to our TWiT account.



STEVE:  I think that makes a lot of sense, Leo.



LEO:  We'll put it on the website.  You know, I'll be very curious as to how much...



STEVE:  Be a great survey, just to receive one.



LEO:  Yeah.  And, you know, even if we get a couple of coins, that's some money, isn't it.



STEVE:  Well, but remember, they can send you 0.0000000...



LEO:  And this QR code, you can, when you set it up, specify, I'd like one bitcoin.  I didn't say.  Donate whatever fraction thereof.  Send us a bitpenny, or whatever the hell they're called.



STEVE:  I think we're going to see hoarding going on because I'm sure not doing anything with my 50.



LEO:  I ain't spending any.



STEVE:  I'm sitting on mine, yeah.



LEO:  Yeah, I ain't spending any.  So if you have Bitcoin on your smartphone, you can actually use this to send bitcoin.  I'm told.  I have no idea.  Now, I couldn't find - I had created a bitcoin - in 2010 somebody emailed us, emailed me and said, hey, I'd like to give you a bitcoin - I wish I'd taken it now - if you have a bitcoin email address.  And I said, what's bitcoin?  So I set up a bitcoin - I was even doing some mining.  I wasn't as lucky as you.  Now it's not even worth doing it, right, you'd have to set up such a high-end machine.  But I couldn't find that old address.  Now, the key on this, right, is to back it up because that's your wallet, and that's it.  If you - your system's hard drive crashed, and I had a bunch of bitcoin in it, I'm in deep doodoo.



STEVE:  Yes.  Yes.  It's purely bits.



LEO:  It's just bits.



STEVE:  It's purely electronic.



LEO:  Okay.  So as soon as I have any coin in my wallet - I guess I should back up the number, whatever this is.  I don't even know what this is.



STEVE:  Yes, well, when we lose our checkbook it's okay because the bank is actually still holding our money.



LEO:  Yes.  There ain't no bank.



STEVE:  Not the case.



LEO:  No bank here.  Sorry.



STEVE:  So, no, this is good.  So something's disturbing.



LEO:  I'm thinking of yabba-dabba-do.  So every time a bitcoin is donated, a yabba-dabba-do.



STEVE:  Oh, I'll send you my WAV file.



LEO:  Yeah.  Go ahead, I'm sorry.



STEVE:  So something disturbing is going on with Apache.



LEO:  Uh-oh.



STEVE:  It was first seen last summer, August of 2012.  And it's becoming prevalent and now worrisome.  There have been several security researchers who've been following this.  And, for example, there was an infection of the L.A. Times, which we briefly mentioned last month, or, I'm sorry, February.  Seagate's media site, media.seagate.com, got infected last month, in March.  The symptom is that IFrames, which are "I" for "inline," inline frames are being conditionally injected into the pages being served by these infected Apache servers.  Every server that has been found that's been infected is running version of Apache v2.2.2 or later.  So that's one common factor.



The disturbing thing is no one knows how they are being - how these Apache servers are being infected.  But more than 2,000 servers have been.  And those 2,000 servers are hosting, because many of them are hosting multiple sites, virtual sites, they are hosting more than 20,000 websites.  So 20,000 websites, hosted by 2,000 web servers - and these numbers, of course, are rough, and it's difficult to find these, I'll explain why in a second - are infected.  And what's making this so difficult for investigators is what has been found in infected servers is a malicious Apache module.  So it's one module.  Apache is inherently module.



In the HTTP config file you have a whole batch of load module statements which, when the Apache service starts up, it reads the file to figure out what it's supposed to be doing, how it's supposed to be acting as a server.  And it sucks in all of these different modules, PHP and so forth, for offering the services that it needs.  One of these modules is malicious on these servers.  And it's in the so-called "Apache pipeline," which is the term they use for the request processing, the idea being that a module in the request pipeline is able to do anything it wants with every request made to the server.  So, and it has all the request headers that it's able to see.



So what the developers of this module have done is they have given it knowledge to thwart analysis.  It will never inject the malicious IFrame into the IP of any known security researcher.  So security researchers can't scan the 'Net.  They can't go to suspected sites.  When they go there, the site looks fine.  Somebody else goes there from a different IP, and it's not fine.  But way more than that.  They look at the user agent, which remember in the request headers is the claim that the browser makes about its heritage - is it Safari, is it Firefox, is it IE, and so forth.  So they're only selecting, currently, they're only targeting specific operating systems because one of the things in the user agent is typically this is the browser I am, and this is the OS I'm running on.  They're only targeting Windows for these particular attacks.



Now, again, the infected server could be running, and is typically running on Linux sites or on Linux OS, hosting Apache, which is then hosting either one to hundreds of websites.  But, for example, they blacklist search engine spiders.  So the search engines won't pick up the IFrame.  Again, as we've talked about before, that's been a very clever means of finding problems.  Remember, for example, that webcams were being indexed.  So you could just do a search and find all the webcams because they all had a particular user agent in their reply, and so anyone who was spidering the 'Net and collecting user agent strings could say, oh, here's all the webcams that you can log onto remotely without a password.



But nope, these guys don't do that.  They deliberately don't inject this IFrame for search engines.  They also use cookies to manage return visitors, and they look at their referrer header.  Remember the referrer tells a website where this query came from, where the user was when they clicked on something.  And so, for example, if you receive the URL of a suspect site, if you were a researcher, and say that you were using different IPs on the theory that maybe it's IP sensitive, which it is.  But so you were going to go to a different IP so that that wouldn't catch it.  And you enter the URL into the address bar.  Well, there's no referrer, so it'll be blank.  And this thing is smart enough not to inject.  It only injects if it knows that the link on a given search engine is valid for this site, and that means you're probably clicking the link, although it's spoofable.  But still, it's another level of filter.



So you can see that what we have - and this is why this has been sort of pernicious and persistent and slowly growing over time.  What it does, the IFrame refers people's browsers to additional malicious content that are on otherwise valid sites.  So other sites are infected with the actual malware that's going to infect your browser.  This whole system I've been talking about is the way of getting you essentially to visit a site you're not really visiting.  So if a bad site were infected, it's like, okay, if people go there, they'll get infected.  But if they don't go there, they won't.  Instead, other good sites, 20,000 of them, are now injecting an IFrame which induces your browser to go to the bad site to get itself infected.  And so this is sort of a delivery, sort of a second-order delivery system for that.



One of the things that's also been found on these compromised Apache servers is that the SSH daemon, the secure shell service, has been compromised.  A backdoor has been installed in every one of these machines that has been seen that allows remote attackers to access the machine, bypassing the regular authentication.  Thus, that's why you would want a compromised secure shell, so that you don't need to log on with real username and password and whatever other credentials.



But it does much more than that.  It captures any valid credentials which are used to log on and sends them off to a repository somewhere so that the attackers, having once compromised this machine, then get the valid credentials.  And what's often the case is that the same credentials are used on many different systems by common admins.  So this gives them a dictionary of username and passwords to try elsewhere to get in.  And so this thing tends to spread.



So they're monitoring anyone's login, that is, admin login.  And if anyone uses that login somewhere else - oh, and I guess the other thing that happens is it's often the case that someone will log into the system and then will secure shell from there to another system.  And that they capture, as well.  So they're able to monitor anyone using a compromised system to access and administer another not-yet-compromised system, in the process getting access to it, which is, again, the way this tends to spread.  So it is daunting.  It's known to be going on with Apache systems.  There are a couple researchers who have been tracking it.  There's a great blog called UnmaskParasites.com.  And Dennis, who's the - who runs that site, Unmask Parasites, has a blog.  And he wrote of this.  He said, "While this hack is not new, I could not find reliable information about how hackers break into servers and get root access.  The malicious modules are owned by root, and httpd.conf files can only be modified by root."  So that tells him, for sure, that somehow someone's getting root on these servers.



He said that, "At this point I can say that it doesn't look like a security issue of some control panel."  Remember we've seen that in the past.  He said, "The two infected sites I worked with had different control panels," Virtualmin on one and cPanel on another.  He says, "The malicious module doesn't come from Linux repositories," so that's not how it's getting into these machines.  He said, "So someone somehow breaks into servers with root permissions, which is quite alarming.  One of the servers had only one user" - it was a dedicated server - "used strong passwords, didn't allow remote root logins, used custom ports, and Fail2ban to prevent brute-force attack.  Nonetheless, it was hacked within one month, and its administrator could not find signs of the intrusion in log files, only legitimate logins."  And he says, "Of course root access gives you the ability to remove most possible traces."



So we'll keep our eye on this.  People running Apache v2.2.2 and older may want to check out UnmaskParasites.com.  There's much more there that's more specific to administering the site.  He gives a lot of scripts and specific things you can do to verify that the modules your system is currently using have not been modified and that no additional unknown ones have been added.  And it would certainly seem to be something worth doing because at this point it looks like there is an unknown means for root access, somehow gaining root access to servers.  And the people who are taking advantage of this are being so careful not to let this get found because they recognize this is the golden goose for them, and they don't want it to get loose and be closed.  So it looks like someone's taking very careful advantage of a currently unknown means of compromising Linux servers running this version of Apache, we don't know if it's through Linux or through Apache, and through where?  But we'll keep an eye on it.



LEO:  Yeah, that's how our servers got hacked was not through Drupal, but through modules, older modules that had been installed on top of the Drupal.  It's hard to keep track.  You have all these modules doing things.  And so you don't just have to watch your main code base, but all these little modules that are in there.



STEVE:  Yeah, have you looked at how quickly any apps in iOS get old?  It's ridiculous.  I mean, I...



LEO:  Yeah, they're updated all the time, yeah.



STEVE:  I'm being punished now for having played with so many of them.  It's like, oh, you've got 56 updates.  It's like, oh, my god.



LEO:  Yeah, I know.  You've got to do it every day.  Hey, I was running the Bitcoin QT software, which is kind of the default.



STEVE:  That's the one, yup.



LEO:  Yeah, kind of basic software.  And I was going into the settings, and I noticed this:  Map port using UPnP.  And that's checked by default.  Now it seems to be connecting, so maybe you don't have to.  Maybe it doesn't need the special port.  But I thought that was kind of interesting.



STEVE:  Anything that wants to be part of a network.  And Bitcoin needs to communicate with many other nodes in order to update itself, to bring itself current with the current hash history.  And then the idea is that, when it succeeds in minting a coin, it sends that news out, and it requires that other nodes confirm that it found the hash.  And so it's that communal agreement that runs the whole system.  So you cannot be a bitcoin miner on an island.



LEO:  And offline, yeah, yeah.



STEVE:  You've got to be part of the network.  And you're also, when someone says, hey, I got one, it's like, oh, crap.  Okay, let me see, and, you know...



LEO:  And now what do I do; right?  Yeah.  But we did get, apparently, somebody in the chatroom has given us, at least I haven't received it yet...



[Loud yabba-dabba do]



LEO:  Our first bitcoin has appeared, apparently, in the wallet.  So...



STEVE:  And that sounds like the right file.  Very, very familiar to me.



LEO:  So there you go.  Apparently I don't need UPnP unless I'm getting incoming connections.  I don't know what that means.  But I'm making outbound connections, obviously, to the Bitcoin servers.



STEVE:  Good, good.



LEO:  So that's all well and good.  And I've encrypted my wallet, and I'm backing it up.  I wish it said where the wallet was stored, at least on the Mac, and it's not immediately obvious.  I'll have to dig around because I'd like to put the wallet on a Dropbox, and then I wouldn't have to back it up; right?  As long as it's encrypted, having it in a Dropbox would mean it's on a bunch of machines.  It'd be pretty safe that way.



STEVE:  Yes.  And in fact I know that on Windows it's under appdata/bitcoin, and then it's like /wallet.  And it's a little - it's a collection of files that form the wallet.



LEO:  Can I double-click?  It'd be nice if I could double-click the wallet and start the Bitcoin that way, and then that way I could start it from any location.  I'll have to - I'll play around with it.



STEVE:  Yeah.



LEO:  But, yeah, it's nice, isn't it?



STEVE:  It's real.



LEO:  I'm already $50, what is it, no, more than $100 richer.



STEVE:  You're kidding.



LEO:  Of course, I can't do anything with it.



STEVE:  Wow.



LEO:  Well, somebody gave me a bitcoin.  That's a hundred, what is it, 113 bucks.



STEVE:  Nice.



LEO:  Very generous.



STEVE:  I'll give you a podcast instead.



LEO:  You have 50 bitcoins.  You could - you could - you could - we are going to put the bitcoin address, which is just a long crypto number, and the QR code to make it easier for you, so you don't have to enter it by hand on our website, if you want to donate bitcoins.  Thank you.  And thank you to - now, I forgot his name, it's DarkHaven or something like that, for our first bitcoin.



STEVE:  Nice.



LEO:  Yeah.



STEVE:  So I have an announcement.



LEO:  Uh-oh.  Are you getting married?



STEVE:  No, Leo.



LEO:  Having a baby?



STEVE:  Mmm...



LEO:  Okay.



STEVE:  Who's laughing in the background?  Somebody who probably is going to have a baby one of these days.



LEO:  Maybe.  It's our newlyweds in the room from Wisconsin.



STEVE:  So GRC is announcing today a new service.



LEO:  Whoa.  You are prolific all of a sudden.



STEVE:  I've been cranking away, baby.  I referred to this once, and it is now up and public:  GRC.com/fingerprints.  It's under the main menu under Services because it's a new service from GRC.  This is the thing that I talked about a few months ago.  It took me literally until yesterday to get it all nailed down, working perfectly.  This allows people to detect when somebody is intercepting their SSL, their TLS, their HTTPS connections.  And I'm really proud of it.  It will be here forever.  Of course it's free, like everything here at GRC.  And I think it will end up probably over time becoming popular.



The idea is that, if you are in a corporation that is secretly decrypting your SSL traffic, and you're connecting to the corporate server; and then it's decrypting your traffic and then inspecting it, filtering it, logging it, whatever; and then it's connecting to the secure service that you think you're connecting to, it's spoofing the certificate that you receive.  Well, it is impossible, thank goodness, to perfectly spoof a certificate from a remote server because the certificate contains, as we know, the remote server's public key.  And the public key matches the private key, and the private key is secret.  So nobody knows, for example, Google's private key.  Believe me, they're not letting anybody find that out because that would be the end of the world.  So that means that the authentic certificate from Google contains the public key, which we use for encrypting data to Google.



But a certificate which is spoofing Google, pretending to be Google, has to be offering us a public key that it says is from Google.  But it can't be the same public key as Google's because we don't know, because the person spoofing doesn't know Google's private key.  So that means that it is impossible for a certificate to have the same hash.  And so what all browsers allow you to do is to view the details of the certificate you have from a site.  For example, if you're looking at GRC.com, that page, GRC.com/fingerprints, will only allow itself to be displayed over a secure connection.  And so you can always right-click on it and do the View Certificate.



And all browsers, and on that page I give instructions for all the different popular browsers, step by step, here's where you can find the data, although the browsers don't hide it.  Normally it's right there, and it says "thumbprint" or "fingerprint."  And it's a series of 20 hex characters which is the - it's the hash that the browser just made of the certificate.  The certificate contains other internal hashes for their own purposes. But this is the hash of the certificate that the browser calculated to say this is the fingerprint of the certificate.  No one's ever really done anything with this before until now.



So the idea is GRC will make a connection for you.  I display a set of 11 different server certificates, just sort of the popular ones, Twitter and Facebook and WordPress and Tumblr and so forth, just sort of as a reference.  But so the idea is that GRC's servers are right on the Internet backbone.  Level 3 is a Tier 1 provider.  Nobody is filtering my connection.  So I create the connections and get the security certificates from those servers, or you can also enter your own custom one, whatever particular one you may care about, like your bank.  And so I will show you the authentic fingerprint of the real certificate.  And then you simply compare it with the one your browser shows you for the same site.  And if they're the same, you absolutely know, absolutely, that there is no interception going on.  And if they're different, then you need to be careful and maybe worry a little bit because, if you didn't know this was happening, then it raises some flags.



So I expect this to be a long-running and very useful service.  Anyone, anywhere, can instantly check, get from me, using this page, the authentic fingerprint of any site they wish and then compare it easily with the fingerprint that their browser shows them for the same site.  And if there's been a man in the middle attack, whether malicious or corporate or educational or your church or whatever organization, this is happening more and more because, as we've talked about, more and more sites are using SSL all the time for the sake of privacy and security.  But that's making people uncomfortable, that is, people who want to monitor and filter your traffic.



There's even a reference that gives you a sense for this on that page.  I found a blog posting a couple months ago from one of the companies that is doing this kind of - offering this service as an appliance, where they say that they've just now removed the LGBT filtering checkbox from their user interface in reaction to people complaining, apparently, that they were explicitly offering LGBT filtering and tracking of people using their service.  No, I'm not kidding.  It's bad, Leo.



LEO:  That sucks, yeah.



STEVE:  Yeah.  And also a dialogue there from the Windows, I'm sorry, the Microsoft product, which is a "Forefront Threat Gateway," they call it, which makes it very clear that they're "inspecting," as they call it, they're inspecting your HTTPS traffic.



LEO:  Oh, my god.



STEVE:  Yeah, a little inspection.  So...



LEO:  "Enabling inspection may have legal implications.  You should verify if using this protection is in compliance with your corporate policy."  Good lord.  Geez.



STEVE:  So we needed a way to quickly check to see if this is happening to us, and GRC offers that now.  So I'm really glad I did that.



LEO:  Excellent.  That's really excellent.



STEVE:  And this came from the mailbag, by the way.  I referred to this way back when.  Somebody wrote, one of our listeners said, hey, Steve, is this possible?  And it's like, oh, that's a good idea.  I like that.  And it's taken me quite a while, but it's done.  So it's there and always will be.



Also, just a little update.  The second most recent service offered was the addition of the Universal Plug & Play probe to ShieldsUP!.  And when I looked this morning, we were at 4,060 routers identified.  So it continues creeping up as more and more people find it.



LEO:  4,061 now.



STEVE:  Ah, good.



LEO:  One more.  Not mine.  One more.



STEVE:  Also some news.  We have a new Firefox.  When I saw this yesterday, I went over and did, under Help and then About, and that kind of kicks it into action.  It says, oh, you want to know about version.  And I was on 19.0.2.  And asking it about itself started it downloading a 10.3MB replacement, which it then updated.  Now I'm on version 20.  We have a couple new things that people will care about and a lot of little other things.



We have something new for Firefox, which is convenient, is per window private browsing.  So under the File menu there's the New Tab, to give you - obviously you want to open another tab.  There's New Window.  And then there's New Private Window.  So you are now able to just leave your existing session up and running, you don't have to shut down and restart for the whole browser to go into privacy mode.  And anything you do in that window is not recorded.  And there's a cute little purple Mardi Gras mask that appears in the upper right-hand corner of the window when that's the one that you're in, just to say, yep, we're protecting you.  Nothing gets written to the disk, no cookies saved, no history saved, and so forth.  So that's convenient.



There's also - they've updated the Download Manager so that it's got a better user interface, a better "experience," as they say.  And they have furthered their technology to prevent plugins from being able to hang the browser.  I haven't had that happen for me in Firefox for quite a while.  It used to happen.  It was annoying.  But now plugins can be expressly individually closed without needing to recycle the entire browser.



Then there's the regular security fixes, performance improvements.  They've added some more things to ECMAScript 6, so they're moving their support for that forward.  There's a new JavaScript profiler for people who want to improve performance.  And I got a kick out of this.  They've added a new HTML5 feature, Get User Media is the name.  And it implements web access to the user's  microphone and camera.



LEO:  Oh, wow.



STEVE:  What could go wrong with that [laughing].



LEO:  A la Flash.  Interesting.  Well, but that's probably maybe WebRTC or something like that.



STEVE:  Yes.  Yes.  They're moving toward being able to host real-time, like, chat.



LEO:  You can do that with WebRTC right now through Google.  So, yeah, that's interesting.



STEVE:  Yeah.  So that'll be a good thing.  I mean, again, I'm bullish, as I mentioned when I was talking last week about the asm.js work that they're doing that allows them to get very high-performance JavaScript without breaking compatibility.  I mean, I'm bullish about the browser as the future.  This is the cloud access platform.  So these are all good things they're doing.



LEO:  And I have to say, when it's open source, I have a little more confidence than when it's closed source, written by Adobe.  At least somebody's looking at that stuff.



STEVE:  Yeah.  And can fix it quickly.



LEO:  And can fix it, exactly.



STEVE:  Oh, and when I was - after upgrading I saw a notification that I hadn't - maybe I'd seen it before, but I hadn't mentioned it.  And that is, along the bottom it said "Firefox automatically sends some data to Mozilla so that we can improve your experience."  And then over on the far right was a button, says "Choose what I share."  And so I thought, okay, let's see what that is.  So I clicked that.  And all that did was open up the standard Options dialogue under the Advanced category and the Data Choices tab.  So anybody can see that anytime you want by going to the Options dialogue in Firefox, Advanced category, Data Choices tab.  And there are two things there.  There's telemetry, which was not checked, which says - which I respect, I'm glad they didn't - says "Shares performance, usage, hardware, and customization data about your browser with Mozilla to help us make Firefox better."  And then - and I turned it on because it's like, yeah, I want them to know I'm running with 85 tabs so they can think, oh...



LEO:  Right, there's somebody doing that.



STEVE:  We've got to handle these people.



LEO:  We've got an outlier here.



STEVE:  We've got to be able to make that scrollable.  And then the second one was Crash Reporter, which was turned on by default, which "Firefox submits crash reports to help Mozilla make your browser more stable and secure."  And that was on, and I left it on.  So those things are there.



Our prolific animator has continued animating old episodes, old but not dusty, still useful.



LEO:  They're all good still.



STEVE:  Yeah.



LEO:  This is an archive of brilliance.



STEVE:  So AskMrWizard.com, or AskMrWizard.com/securitynow.  Bob Bosen is running that show over there, and he's added Episode 11, that is Security Now! Episode 11 on Bad WiFi Security, and that's in five animated video segments; Episode 13, WPA:  WiFi Security Done Right, in two video segments; and Episode 14, VPN Theory, and he's only got the first of several segments complete so far.  But he's moving ahead.



LEO:  That's awesome.  That's great.



STEVE:  Doing animated video to supplement the podcast audio.  So, yeah.



LEO:  Wonderful.  Wonderful.



STEVE:  I think that's really great.  And I wanted to just check back in.  There's been a lot of activity in Mark Thompson and company's - I was calling it Smush.



LEO:  Yes.  They corrected us.



STEVE:  Smoosh.



LEO:  Smoosh.  It's a Smoosh Box, yes.



STEVE:  I didn't want to be smooching it, so I got Smush, no, Smoosh Box [SmushBox].



LEO:  By the way, I ordered one.  You know.



STEVE:  Yes, and Mark saw and was pleased.  And I don't think he'd heard the podcast at that point, but he has since.  In fact, he sent out a notice to all Kickstarter...



LEO:  They're so close, 15 days.  They're just 3,500 away from their goal.



STEVE:  Yeah, so they've got 16.4 something; right?



LEO:  Yeah, 16,446 out of 20,000 they want to raise.  So we're getting close to the Smoosh Box.



STEVE:  Yeah, and frankly, I don't think - this is not a do or die thing.  It's not like they're not going to make it if they don't...



LEO:  Don't say that.



STEVE:  Okay.



LEO:  Don't say that.  All the Smush Kit early backers are gone now.  They still have 35 of the $250 later backers available, and...



STEVE:  Well, and, now, that's significant because I got some feedback from our listeners.  Several people sent me links to services.  And so it's worth mentioning there are definitely services, there's actually many...



LEO:  Oh, yeah, will do this.



STEVE:  ...that allow you to, yes, allow you to sign up.  But what happened is Mark, for his purposes, was using a service that sold the phone numbers.



LEO:  Right.



STEVE:  And so Mark said, okay, clearly this doesn't work.



LEO:  Yeah.  You want to run your own service.



STEVE:  And that's the point is, yes.  And I've looked at pricing.  And they, of course, it's like for a while I thought, oh, look, I could put my website, give it to Amazon.  It's like, oh, no, no, no, no.  When you start doing the math, it's not feasible because they want to make money.  And of course these services want to make money.  They've having to pay something on the back end, so they're marking it up.



Now, one person sent me a link to hardware that their company uses.  Multi-Tech has something called the SF, Sam Fox, hyphen 100G.  And it is essentially what this box does.  So Multi-Tech has it, called the SF100-G.  I thought, oh, let's go look.  So Beach Audio has it for $388.46.  Gemini Computers at 374.  PLC Center for 451.  I don't think they're going to sell many of those at that price.  And eBay sold one just two months ago, middle of February, on the 19th, for $390.



So there does exist something that looks like this.  I have no idea in detail how it compares to what Mark and his group are putting together.  But we're getting it for more than $100 less than the best price here, when we get it for 250 bucks.  So I'm glad these guys have done something, and I think it'll be a long-term win for them.  And I'm excited to play with this thing.



LEO:  That's really cool.  Yeah, I am, too.  What we're going to do, so people understand, what I'm planning on doing, and I've already talked to my web team, and they seem to think it's doable, is set up a checklist, just like you would subscribe to a newsletter, but you could subscribe to text messages when Leo is in the building, the podcast could be beginning any minute now, the podcast actually began...



STEVE:  Hey, I - I need that, yeah.



LEO:  The podcast is done, and the podcast is produced and available for download, that kind of thing.



STEVE:  I love the idea of getting texts when it has been posted online.  That's great, yeah.



LEO:  Yeah.  So I'm trying to think, now, there are 25 shows.  There's probably two texts per show, "started recording" and "is available for download," and maybe one more on my shows where I'm actually - the preshow has begun.  So let's say three.  That's 75 different possibilities.  It's already way out of control.



STEVE:  Yeah, so it's 25 lines and three columns.



LEO:  Yeah.  Well, we'll put it on each individual page.  So if you go to TWiT.tv/sn there'll be a checkbox that says send me a text.  Now, we will, I promise, we will not harvest the phone numbers.  I don't want your cell phone number.  I don't want your stinking cell phone number.  And because we're doing it ourselves we can make that promise.  Nobody's going to see that number.  Except T-Mobile, I guess.  You have to use them as a service.  And then, I guess, if a thousand, 2,000, I mean, I don't know how many we might be sending out.  What if 20,000 people say we want to know when Security Now! is out?  We'll be sending 20,000 text messages.



STEVE:  Well, it's a flat rate, 25 bucks a month with T-Mobile, so...



LEO:  I think it's cool.



STEVE:  I think it's very cool, yes.



LEO:  Yeah.  And we might have some emergency messages that you - you know, when my salad is disappeared, things like that, that people...



STEVE:  Or if you have a power failure at...



LEO:  There you go.  But then the SmushBox will also be dead.  So that's not going to work.



STEVE:  Oh, yeah.  Yeah, yeah.



LEO:  We'll figure it out.



STEVE:  Put it on a UPS.  Put it on a UPS.



LEO:  Yeah, we'll take some votes for...



STEVE:  The cool, see, that's the other cool thing is that, if you use a service and your network connectivity goes down, you're screwed.  Not if you use a SmushBox.



LEO:  Right.  Right.



STEVE:  Because it doesn't use a third-party outside provider.  It is its own SMS texting provider.



LEO:  Actually, we put that on a UPS, and unless T-Mobile's towers are down, and they're just right outside the door here, we might be, even with a power outage, able to send a text out.



STEVE:  Yeah.  "We're still here."



LEO:  It doesn't receive text in any way.



STEVE:  Yes.  Bidirectional.  Yeah, so you can do all kinds of things.  You can have contests.  You can have special events.



LEO:  Oooh.



STEVE:  You can have text this code to this...



LEO:  Oooh.



STEVE:  Yes, yes.



LEO:  Oooh.  That's intriguing.



STEVE:  Yeah.  I'm going to use it to turn on my air conditioning.



LEO:  Oh, I can't wait till SmushBox.  Well, I hope - it looks like they might make it.  They're only halfway through, and they're almost all the way funded.  So that's good.



STEVE:  Yeah.  That just means all we need to do is spread the word because we want people who could use this to know about it.  That's the thing that's annoying about Kickstarter is when you show up too late, it's like, unh, can't - I wish I knew about this.



LEO:  You know what's funny, they're painting a beautiful mural on the side of the building over here.  And they had a Kickstarter project to raise the money for it.  I didn't even know about it.  Petaluma's largest mural, here we are across the street, didn't even know about it.  I would have publicized it.  Didn't even know about it.



STEVE:  I found a really fun - this is completely off topic.  But ThinkGeek on Monday, a special day for us all, and finally it's not Monday so we can actually believe something that we see, yeah.



LEO:  Thank god.  The worst day on the Internet.  I hate April Fools.



STEVE:  I know.



LEO:  Hate it.



STEVE:  So they were offering something so cool:  a $49 Play-Doh 3D printer.



LEO:  [Laughing] I used to have one of those when I was a kid.  You push the lever, and it extrudes the Play-Doh.



STEVE:  Well, this thing - and that, I'm sure, was the inspiration.  I tweeted the link to it.  If you look in my Twitter stream, you go to, what is it, bit.ly/sggrc, and that will find the link that I posted:  thinkgeek.com/product/f487.  I shared it on Monday because it was so well done.  I mean, it showed you the machine, takes two "D" cells, or maybe it was "C" cells.  It's got a little crank.  And it shows you, like it's printing a droid.  So it's a 3D printer, absolutely convincing-looking.



LEO:  [Laughing] It's so cute.



STEVE:  And it runs - oh, and you hook it to an iPad.  So your iPad is your - and there's free download software for your iPad.



LEO:  By the way, Steve, this is almost certainly an April Fool's joke.



STEVE:  No, Leo.  No.  I've got one on order.



LEO:  Really?



STEVE:  Yeah.  Click to buy it.



[Talking simultaneously]



LEO:  ...Play-Doh folks.  No, this isn't - no.  It's a joke.



STEVE:  Click the Buy It button.  Tell them you want one.  Because don't tell me you don't.



LEO:  I want one. Continue on, Steve.  I also want the - oh, look at this, Bare Paint Conductive Paint Kits.  That's cool.  The Moving Hand - Muscle Wire Moving Hand Kit.  The Auto Bacon T-shirt.  There's so many great things on here.



STEVE:  Yeah, they're good guys.



LEO:  Think Geek.  Love 'em.



STEVE:  So because it had a science fiction basis...



LEO:  Yes.



STEVE:  ...I went with Jenny on Friday to see "The Host."



LEO:  Is this a movie?



STEVE:  Yeah.



LEO:  Okay.



STEVE:  Well, kinda.  It was so bad, Leo.  Oh, goodness.



LEO:  Terrible, huh?



STEVE:  I've never put a review up on IMDB until now.



LEO:  That bad.



STEVE:  It was that bad.  And, yeah.  So, and I'm just warning our listeners, I care about you all...



LEO:  Don't go see it, huh?



STEVE:  Do not.  Do not see it.



LEO:  Here's one review that says, "It wasn't awful."



STEVE:  Keep reading.  Scroll down a little bit longer.



LEO:  Wow.  "'This movie is unimaginably awful.  Save your money,' Steve Gibson from the United States writes."  It was that bad.  Did you walk out?



STEVE:  No.  Jenny kept offering that we could walk out.  I was a little uncomfortable, feeling that maybe, if other people were actually enjoying it, they would think, why don't those two just leave, because we were groaning so much.  Oh, gosh.  It was just, I mean, the special effects were okay.  But the screen - the director wrote the screen - did the screenwriting, which is never a good idea.  And so...



LEO:  It's from Stephenie Meyer, the author of the Twilight Saga.



STEVE:  Yeah.



LEO:  "Choose to believe; choose to fight; choose to love."  Yeah.



STEVE:  I think that was, you know, yeah.  So anyway, don't go.  Oh, and Leo, boy have we got stuff coming.  We're going to have a wonderful summer.  And I have a guilty pleasure that I will probably afflict myself with on Friday, which is the next installment of "The Evil Dead" movies.



LEO:  You love those?  I've never seen any of them.



STEVE:  Oh, gosh, yes.



LEO:  I should watch those.



STEVE:  That's why I said it was a guilty pleasure.  You probably ought to watch them.  I mean, it's a cult win.  They are really funny.  I mean, they're gory, but with a serious tongue-in-cheek, I mean, like "Army of Darkness."  Did you not see "Army of Darkness"?



LEO:  No.



STEVE:  Oh, Leo.  Okay, well...



LEO:  Does that involve zombies?  Because I'm not a fan.



STEVE:  No, no.  Well, it wasn't zombies.  But it's really campy, tongue-in-cheek, over the top.  And Sam Raimi was the producer, and Bruce Campbell starred in all...



LEO:  I love Sam Raimi.  He's wonderful.



STEVE:  And Bruce Campbell starred in all three of the first ones.  He's not in this one.  And I'm looking forward to seeing it.  It was, I mean, back in the '80s.  So this will be a much updated, better, newer and so forth.  But anyway, we'll see how that goes.



LEO:  Okay.



STEVE:  And finally, a nice note on a serious note from Philip Cooke, who wrote, "A week ago I started my day with a Blue Screen of Death" - not the way you want to start your week - "advising that I had an unmountable boot volume."



LEO:  Oh, dear.



STEVE:  "Efforts by a Dell tech only led him to the conclusion that we should reformat the drive and lose all my data.  Nothing would recognize the drive, and all the chkdsk commands in the book could not even see it or result in anything but the same blue screen on every reboot, no matter how I started.  A Maxtor utility that I ran from a downloaded file advised me to return the drive for a replacement.  After getting estimates ranging from $400 to $2,700 to recover my data, and trying numerous other 'tricks,'" he has in quotes, "recommended by online chats, et cetera, I was fortunate to come across SpinRite.



"At first the glowing testimonials seemed just too good to be true.  And I will admit that I thought they may have even been fake."  Of course he doesn't know me very well, but that's fair enough.  He said, "So I invested the $89 and downloaded the file and fired it up.  At first I thought that it was going nowhere 'cause after four hours it still said 2% complete.  I figured I would leave it running over the weekend, and imagine my surprise when I came in this morning, saw the message that it had completed.  It booted up, ran chkdsk, and then started Windows.  All I can say is wow.  Thank you for taking the time to create this program.  It's bad enough losing data, but I also saved the hours it would have taken to recreate my desktop, links, et cetera.  Needless to say, I am impressed.  Philip Cooke."



LEO:  And image that drive right now, Philip.



STEVE:  Thank you, Philip.



LEO:  Immediately.  The chkdsk is superfluous after you run SpinRite; right?  It's just doing - it's kind of a poor man's SpinRite.



STEVE:  Yeah, well, it's something that Windows often kicks you into when it's thinking, wow, we just recovered from something.  Let's see if everything's okay.  So it just is a perfunctory...



LEO:  But if you've passed this, yeah, if you've passed the SpinRite test, there's nothing additional needed.  But Windows will make you do it, of course.  All right.  Time to talk hash tables.  Distributed, not just hash tables, distributed hash tables.



STEVE:  Yeah.  And again, I'm unhappy with the label that this has received because it sounds uninteresting.  Distributed hash tables is like, well, okay, I mean, and it's not even accurate because the hash tables are not distributed.  The hashing is the way you access or you index a distributed database.  So you'll see they got called distributed hash tables, we're calling them that because that's what you'll hear in the future.  This is a technology which is part of the Internet culture now.  We referred to it when we were talking about Tor.  As we know, BitTorrent uses it in order to create a database in the cloud.  It's the way that peer-to-peer networks and also networks that aren't concerned about a central authority shutting them down, which is one of the reasons people switch to a peer-to-peer model, but where, for example, in Amazon's case, they have something called "Dynamo."  Dynamo is their own proprietary database technology based on distributed hash table technology.



Okay.  So what does a hash have to do with a database?  What we know about hashes is that you can put anything into a hash function, and what you get out is a fixed-length pseudorandom pattern of bits, is probably the best way to characterize it.  We have talked, for example, in some cloud storage instances of, for example, hashing the contents of a file to create a key which would be then used to encrypt it.  And what's clever about that is then the file provides its own key, and only somebody else who has the identical file could hash that to get the identical key.  And then that's the way, for example, a shared hosting, a shared cloud storage system could receive files that are encrypted that it has no knowledge how to decrypt.  Anyway, so that's an example.



But the other thing you can do is you could take the name of an object and hash it and get a key, essentially.  And so that's what distributed hash tables do is they use a hash as - it's also sometimes called a "mixing function."  They just sort of mix the thing up into this random value.



Now, in the case of BitTorrent, you're wanting to identify files in a big database that various BitTorrent clients have.  In Amazon's case, they're wanting to - they've got a massive website with incredible number of images and blobs of text and user reviews and, I mean, just look at how complex a page on Amazon is.  Those are not pages that are created by some individual.  They're all dynamically generated by software.  And they're all pulled together from individual bits.



So Amazon uses their distributed hash table-based database in order to hold all of this.  And I've read their whitepaper on Dynamo front to back.  And their biggest concern is latency.  They absolutely know that they have to present a page fast.  Period.  No matter what.  And they've really gone out of their way to keep the latency of the delivery of their pages down.  Other applications of distributed hash tables may have different goals.  They may want much more redundancy.



So, for example, in a BitTorrent model, you have highly variable availability of this collective database as individuals on a whim come and go.  In Amazon's case, they have got fixed servers, and they want to be able to take a server down and have all of its data become unavailable, but have the whole system continue to function.  And if a server fails, even if it's a nonscheduled downing of the server, they want to be able to, similarly, have there be no effect.  But in general, because it's them in a datacenter that's cooled, and it's got power and everything, they don't expect unexpected events at the same rate as, for example, BitTorrent's individual nodes coming and going from the collective 'Net.



So the common concept here is that you use whatever tag it is to identify an object.  It might be one of those wacky-looking GUID, you know, Globally Unique ID, GUID strings.  It might just be the natural name of the file.  Whatever it is, you put it through a hash function in order to get the result.  Now, Amazon uses MD5 because for them it's good enough.  Now, notice, this is not an instance where the security of MD5 is a problem.  This is somewhere where actually the speed of MD5 is a benefit.  And the fact that it gives you 128 bits output is sufficient.  If for some reason you had an application where you needed more than that, SHA-1 gives you 160 bits, and SHA-256 gives you 256 bits.



So the goal, regardless of what hash you use, is you're going to get out this string of bits.  And the idea is that, and this is the key, and we understand listeners of the podcast will get it, that the point is, every time you put the same string in, you get the same pseudorandom pattern of bits out.  So that's the key.  The hash table, or the hash, it maps the input string into a pseudorandom output.  And it does it fairly.  And fairness is the key.  That is, that the nature of a cryptographic hash is that, if just one bit of the input changes, if in the name you changed this from redpixel, you changed it to redpixels, or you made a tiny change, every bit that you change on average inverts 50 percent of the output hash's bits.  So it is extremely sensitive to modification.



And the idea is that the hashing function, which is good, evenly distributes the results over the whole space.  If you were using, for example, MD5, like Amazon has, 128 bits is 340 billion billion billion billion combinations.  And the point is, obviously you're never going to have 340 billion billion billion billion servers to choose among.  But you're going to divide this large number somehow into the actual nodes in the network which contain pieces of your database.  And we'll talk about that in a second.



But the idea is that the hash function doesn't discriminate.  It's not going to choose some values over others.  And that's what makes it a good cryptographic hash and not something that someone whipped up in their basement thinking, oh, this is a really good function.  These are high-quality functions that guarantee an even distribution of results.  So how do we turn this long bit string of ones and zeroes into a selector of a node.  It's interesting, and this sort of harkens back to the oddness of the way the Internet works, where we've talked about how the genius of the Internet is that packets don't necessarily always get where they're going the first time, but the Internet layers redundancy on top of that in order to solve the problem.



Similarly, the designers of the distributed hashing index approach said, well, okay, if nodes are coming and going, then we don't know how many we're going to have at any given time.  So how do we divide the total key space, that is, the number of possible key outputs from the hash, into the number of nodes?  Because that's going to change.  And also, if we use the key to index, to point to a node, then if we add nodes, how do we, like, rebalance everything?  I mean, these are difficult problems when it comes to going from sort of the overall glossy, oh, look, let's use a hash, to fairly distribute storage responsibility across a number of nodes.



If you knew, for example, that you always had 16 nodes, say you had 16 nodes, but you just use the low 4 bits of the hash, it's that easy because 4 bits can have any of 16 values, zero through 15.  And so you use the 4 bits, the low 4 bits of the hash, to choose the node.  And problem solved.  Except what if there's 17 nodes?  Now you've got a problem because you were using 4 bits, and that only gives you access to 16 nodes.  But you've got another node, you'd like to use it somehow.



So what they decided is sort of bizarre.  The designers of these systems divide the total key space, the total space of the hash, which, for example, in MD5 is 128 bits, they may just choose, okay, say 32 bits out of that 128.  We know that 32 bits gives us 4.3 billion combinations.  So they then segment that into sort of ranges, some arbitrary number of ranges.  Again, way more than they actually have nodes.  And then they randomly - and this is the part that's a little, you know, creates some cognitive dissonance - they randomly assign these ranges to nodes so that, when a key is put through the hash, it results in a value that randomly - that chooses a node where the data will be stored.  But that node has been chosen in a random fashion.



The way this happens is, imagine a clock where the end connects to the beginning, like 1:00 o'clock, 2:00 o'clock, 3:00 o'clock, 4:00 o'clock, 5:00, 6:00, 7:00, 8:00, 9:00, 10:00, 11:00, 12:00, and 12:00 wraps around into 1:00.  So we have a circle, or a ring.  And the output values of the hash function essentially form a ring from all the bits are zero, like at 12:00 o'clock, and increasing value as we go around this clock face until we get to midnight, or back around to zero, which is all one bits.  So you can see how it's possible to map the values coming out of the hash into locations in a circle.



So the nodes choose some number of locations at random on the circle.  And the number of locations chosen is a function of sort of the, as I was mentioning before, BitTorrent would use a different sort of strategy than Amazon's Dynamo.  But it might be a hundred.  So just say a hundred.  And then the number doesn't matter, either.  So each node chooses a hundred locations at random around this circle, where the circle is indexed by the output of the hash.



And the way the logic works, because the spots on the circle that the nodes chose will almost certainly not correspond to keys that come out of the hash - because we're dealing with 340 billion billion billion billion possible keys.  So the idea is, when we want to look up which node contains the data, we run the name of the file we're wanting to look up through the hash and get out this 128-bit value which identifies a location on the circle.  We then go clockwise until we find the first node that chose that spot, clockwise from where we started, spot on the circle.  That's the node that we ask for the data.  And that gives - so that's sort of the primary owner of the data.  Redundancy comes from allowing some number of nodes in succeeding locations of that circle to carry copies.  So if we ask that first node and don't get a response from it, then we move, again clockwise, to the next spot on the circle that a node chose.  And it will have a copy of the data from the previous node.  So what this has done, wacky as it is, it works, is this allows us...



LEO:  That should be the motto of this show:  "Wacky as it is, it works."



STEVE:  Wacky as it is, it works.  So nodes appear.  And they say, hi there.  I want to participate in this wacky shared database.  So I'm going to choose a hundred spots at random.  Now, their responsibility is to begin carrying the data from the four upstream nodes; right?  Because all of the four upstream nodes are going to be relying on that node as successive levels of backup.



So a node appears, and it says, okay, here I am.  Oh, and there is a metadata communication in the network.  There's actual a protocol called "gossip," which is how the nodes talk.  They gossip among themselves, not in a big hurry, because there's so much resilience and redundance in the system that this is not important if the news of nodes coming and going doesn't propagate instantly.  It's all kind of very relaxed.  So a new node comes in and says, hi there.  Here's the hundred spots I've chosen, everybody.  So everybody update your knowledge of me.  And I'm going to go start copying, replicating, data from the four nodes that are counterclockwise upstream of me.



And so this node goes and asks the other guys for their data.  And again, it's not in a hurry.  It's redundant.  So it would like to get the data, and it will in time, and hopefully long enough to be of use.  And so the idea, then, is that clients, wherever they may be, who want to access the data in this database, they ask any one of these nodes - very much like a Tor node.  Tor nodes would be typical distributed database nodes.  They ask any of these nodes for the data.  That node that's been gossiping with the other nodes has a maybe up-to-date, maybe it's a little out of date, doesn't really matter, but it's got sort of the latest news in the gossip circle.  It hashes the key, uses its own most recent copy of the gossip news to identify where on the ring this would be, and that tells it which node is primary storage for the data.



It then asks that node for the data, saying hey, here's a key.  Do you have the actual data corresponding to this key?  And, if so, send it to this guy.  And if that node says nope, I don't have it, then we know that there are redundant copies.  Oh, and if the node doesn't answer at all, if it just disappeared off the network, it's like, oh, okay.  That begins to propagate the news through the gossip channels.  Meanwhile, we know that there are other nodes that have it.



And so what ends up happening is, with this very sort of lazy, relaxed, gossipy protocol, the data survives as individual nodes in this network come and go over time.  It's duplicated.  It's redundant.  Anybody can be asked for any data, and they more or less, enough, know how to find it.  And it's, again, it's crazy.  It's wacky.  But it works.



LEO:  Node roulette.



STEVE:  That's how, yes, that's how distributed hash tables and the databases behind them function.  It's a little unsettling for someone who likes to absolutely know where something is located.  But the advantage is chunks of this can just disappear, and it doesn't matter.  The whole thing continues.  There's no single point of failure.  And it can be tuned for speed.  It can be tuned for resilience.  It could be tuned for redundancy, whatever characteristics your particular application has.  And if you look at the Wikipedia article on distributed hash tables, there's a bunch of projects.  Apache has a project that is doing this, and Freenet, I think it is, is based on this.  And so it is a technology of the Internet.  I imagine we'll be talking about it in the future.  And of course Bitcoin is the same thing.  Bitcoin is a distributed network of individual miners, yeah.



LEO:  Yeah.  You don't have to be a miner to love Bitcoin.  And now that we can accept bitcoin donations, I love it, too.



STEVE:  [Laughing]



LEO:  Yeah.  So, Steve Gibson, there you go, distributed hash tables, it's all clear as mud.  And I hope everybody understood that.  And if you didn't, well, you know what?  You can listen to it again.  You could even read it because we've got text transcriptions of the show and 16Kb audio available at Steve's site, GRC.com.  We have on-demand audio and video, higher quality of both, available at our site, TWiT.tv/sn.



And if you go to GRC.com, do check out SpinRite, world's best hard drive maintenance and recovery utility.  Check out the new Fingerprints feature.  Check out ShieldsUP!, make sure your router is safe, all of that stuff.  Everything's free except SpinRite.  That's his bread and butter.  So support Steve because he does such a great job every week on the show.  We really are grateful to you, Steve.  And if you go to GRC.com/feedback, you can ask questions.  Steve will be doing a Q&A episode, security willing, next week.  Hackers willing, next week.  Thanks, Steve.



STEVE:  Thank you, Leo.



LEO:  A lot of fun.  We'll see you next time on Security Now!.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.






GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#399	

DATE:		April 10, 2013

TITLE:		Listener Feedback #165

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-399.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson's here.  He'll analyze Microsoft's monthly update.  We'll take a look at the end of life of Windows XP - we're counting down - and answer 10 of your questions.  It's all coming up next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 399, recorded April 10th, 2013:  Your questions, Steve's answers, #165.  It's time for Security Now!.  There he is, the man with a plan and a big mug of coffee.  That's bigger.  I don't understand.  Yours seems so much bigger than my Contigo.  Steve Gibson is here.  He's the Explainer in Chief, our security guru, the man who keeps on top of all the security issues and flaws and tells us about it, and teaches us about computing, crypto, even obscure things like Bitcoin.  You know, people ask me - hello, Steve.



STEVE GIBSON:  Hey, Leo.  Great to be with you again, as always.



LEO:  People ask me a lot, because there's been a lot of Bitcoin news over the last month, why don't we talk more about Bitcoin?  And I say, well, we do.  You're just listening to the wrong show because Steve is an expert.  And I want to thank you because you encouraged us to open Bitcoin donations on the website, and we do.  It's not up yet, but any day now.  I'll have to go engineer somebody.



STEVE:  We even have a - we have a Bitcoin section in today's Q&A podcast.



LEO:  Oh, good.  Yeah, we've got Q&A.



STEVE:  Because there's so much Bitcoin news, yeah.



LEO:  Cool.



STEVE:  So we're at Episode 399, one shy of the big four zero zero. 



LEO:  Wow.



STEVE:  So that's neat.  I'm going to be doing a little KTLA TV interview, thanks to Tom, who referred them to me, actually the day after next week's podcast.  So they want to talk about passwords.



LEO:  Oh, perfect guy.  You're the guy.



STEVE:  That'll be fun.  I have meant to thank Tom.  I'll do so.  So here we are again.  This is a Q&A episode.  We've got a bunch of questions, some that were quickies, so I put in 12.  But if we run long...



LEO:  We have time.  Come on.



STEVE:  We'll just stop when we run out.



LEO:  Take your time.



STEVE:  But we do have news.  The standard, almost constant start of every Security Now! podcast, of course, is what has been patched and updated.  This is - we're at the Wednesday after the second Tuesday of the month, so we're always talking on this Wednesday, relative to that Tuesday, about Microsoft.  We have nine sets, nine bundles of patches which remove 13 vulnerabilities.  It's not a big exciting one.  Nothing devastating.  Only two were rated critical.  Interestingly, one of them fixes two critical vulnerabilities which have existed since the dawn of Internet Explorer, never found before until now.  This is a rollup that goes back as far as IE6 because they figure nobody is running IE5.  I mean, I don't even think you can run IE5 anymore.  It takes you to a - when you launch it, it takes you to a page that Microsoft hasn't had for the last decade, so it can't even get going.  So everyone who wants to keep their Windows machine up to date should do this.



There's also a fix in the remote desktop protocol.  If it were a critical vulnerability in the server, that would be a cause for great concern because that could be really important.  This is over on the desktop client, however, so not such a big problem.  But still, you know, want to keep your machines patched, which all machines other than XP you'll be able to do for the foreseeable future.  XP, it turns out, had a pre-anniversary on Monday, two days ago.  We are on, as of April 8th, 2013, two days ago, there were exactly 365, well, depending upon where we are with Leap Year, I'm not sure, maybe there's a quarter in there or not, or an extra one.  But April 8, 2014 is the official end of Windows XP SP3 support.  So we XP users have one year left to move.  And I'll be moving to Windows 7.  I'm quite happy with Windows 7.  It's really perfect, too, because I get to avoid the horrors on either side, so...



LEO:  You mean Vista.



STEVE:  Uh-huh.



LEO:  And Windows 8.



STEVE:  Uh-huh.



LEO:  You know, 7, I've said for some time, couple of years now, is the best version of Windows, I think.  And I know you don't want to go to it right away because you want to make sure it gets a chance to patch and become solid.  And I think it's been out, what, for five years now?  How long as it been out?  Long time.



STEVE:  I'm just not in a hurry.  I have it running all around me.  I've got Windows 7.  I mean, Skype is running on a Windows 7 box right now, when I'm talking to you.  I've got one set up to sort of echo the servers at GRC because - and I did this sort of as a "Get to Know Windows 7," make sure I can do the things I need to on it.  I am a little concerned.  You remember Brett Glass, I'm sure, from the old days.



LEO:  Yeah, yeah.



STEVE:  Brett was a columnist at InfoWorld and is also a deep techie.  He said the same thing that Mark Thompson said of Windows 7, which makes me uncomfortable, which is, "How am I going to run my 16-bit code, which is still perfectly workable?"  I mean, like, I'm running Brief, which is 16-bit.



LEO:  Isn't there a compatibility mode of some kind?



STEVE:  Well, you know, there is.  You can look at the properties of an EXE, and there is a Windows XP compatibility mode.  And there's also some sort of a virtual machine thing.  But I don't know if just turning that on allows it to run 16-bit code.  If it does, then my only real concern is resolved.  But I've got a year to figure that out.



LEO:  Yeah, I don't know, actually, because it would need - it wouldn't be just tricking it into saying it's XP.  It would actually have to have a 16-bit DLL or something.



STEVE:  I think it has - I think it has - no.  I mean, yes, there's a bunch of 16-bit compatibility which has always been in Windows, which they explicitly removed from Windows 7.  And they said we've removed this.  But there was something you can do.  But it may be - it may require, like, running a virtual machine, I mean, going through all that.



LEO:  Well, you can do that.  If you have Windows 7 Pro, they throw in, just for people like you, Windows XP in a VM.  And somebody in the chatroom said the 32-bit version of Windows 7 will run 16-bit, but not the 64-bit of Windows 7.  That makes sense.  That's what they used the 64-bit for, right, was to say, okay, get ready, here it comes.



STEVE:  Yeah.  And, of course, that's the one you want because who really wants that 3GB working RAM limit anymore?  That's a reason.  And because, I mean, 8GB is so cheap these days.  And then there's - so I don't have to worry about it.



So anyway, also in updating news we have another Flash player.  IE and Chrome will both update for you.  Firefox is generally doing a good job about telling you when you've got an out-of-date version and will warn you.  So what I'm - and I was thinking about this relative to Java.  We were talking about Java.  Oh, and I should mention Java will be updated again next Tuesday.  So that'll be on Tuesday the 16th of next week Oracle will be rolling out their next fix for Java, which is nice because it means it's not an emergency.  They're saying, okay, we've got some things to fix, but you don't have to hyperventilate.



LEO:  Probably not.



STEVE:  It really does seem to me that what we're going to be seeing as a clear necessity while we've got these vulnerable plugins that continue to be problematic is, if they're not being proactive about taking responsibility for themselves, the hosts of the plugins, meaning the browsers, are going to have to take proactive care of their users, which means either updating automatically, which is probably the best solution...



LEO:  That's what Chrome does.



STEVE:  Or at least warning.  And IE10 now does, too.



LEO:  You know, I also think that - am I wrong, but I gather that of course bad guys are looking for third-party apps now because Windows is pretty well patched, and people are running software to protect themselves and so forth.  So they look for holes in third-party software.  But for the most part, it's browser plugins that are the real issue.  So...



STEVE:  Yes, we've seen a change.  We really have - for a while PDFs, remember, were just being attacked with abandon.  That just - it was really bad.  But...



LEO:  Because you could get a browser to auto-launch a PDF.  And if you had Adobe Reader installed...



STEVE:  And even your email client.  Your email client, too, so sending people phishing mail.  But Adobe, to their credit, they did implement sandboxing technology which has gone a long way, I mean, it took them forever, which is - we can hold their feet to the fire because it took them so long.



LEO:  It took Microsoft a long time to get Windows locked down, too.



STEVE:  Oh, yeah, yeah.



LEO:  It may just be this is kind of a hard thing to do without breaking stuff.  Right?



STEVE:  It is definitely - security, I mean, the subtitle of this podcast is "Security is hard," and only fun for we observers, not for those who have to worry about mistakes they may have made.  So, yeah.  But, yes.  So we're seeing a migration.  We'll be talking about some Skype malware which has now become another target, another vector through which this stuff can get in.



LEO:  And of course Microsoft wants you to keep Skype running all the time in the background.  That's the plan.



STEVE:  Well, why wouldn't you?



LEO:  Yeah, why wouldn't you?



STEVE:  So Comcast also has a page.  We talked last week about Cox having a page where they list all the ports they're blocking.  I'm still working on advances to the fingerprinting, the SSL/TLS/HTTPS fingerprinting technology, which has been a big hit over at GRC.  So I haven't yet been able to look at updating ShieldsUP!.  But what I want to do, remember what's happened is it's confusing some people because we're detecting when some ISPs send back notification of their own preemptive blocking of traffic prior to it getting to the user.  So what I want to do is to add to the "open," "closed," and "stealth" status, add a fourth kind of port which would be "intercepted."



LEO:  Whoa.



STEVE:  I think that's the perfect word.



LEO:  And you'd be able to sense that.



STEVE:  Well, that's the problem is not all ISPs do echo something, but some do.  So for those who do, now that I know they're doing it, I really can't say you're stealth.  I mean, you may be, but your ISP is not, even though it's not really you.  Anyway, it's confusing.  But I'm going to - yes, there'll be a fourth port state which will just provide more information to the user, and that's the whole goal, anyway.



LEO:  Cool.



STEVE:  So Comcast is not blocking port 1900, which we wish they were, the Universal Plug & Play port.  They're blocking the standard suspects:  25, of course, which is SMTP for keeping spam relays and spammers.  They're blocking UDP port 68, which is DHCP, and that makes sense.  You could just get up to mischief with that.  There's no reason for that to cross the border.  They are, of course, blocking Microsoft's famous NetBIOS ports, 135 through 139.  They're also blocking SNMP, which I thought was interesting.  That's the simple network management protocol, which can be used for configuring equipment, but mostly it's used for monitoring.  All kinds of routers and equipment publish their, like, counters so that you can query bites in, bites out, bite rates, and so forth.  You can actually pretty much probe the configuration of a router through SNMP if it is not secured.  And of course it's typically not, unfortunately.  So they're blocking that.



And port 445, which is the other Microsoft, the SMB protocol through which - which is file and printer sharing.  Then also RIP, which I thought was interesting.  That's the routing information protocol which routers use for exchanging their routing and updating their routing tables with each other.  So that makes sense, again.  I mean, I'm sure they have a way of securely moving that in and out of their own network for their own routers.  They would have to do that.  But it doesn't make sense for clients to need that.  And finally the SOCKS proxy port, 1080...



LEO:  Really.



STEVE:  ...is being blocked.  So, just because, again, more mischief that the hackers would use.  Lord knows what's got 1080 open.  Probably all kinds of things.



LEO:  Right.



STEVE:  And I saw a really interesting blurb that I thought, uh-huh, well, this is not really very surprising.  This is Verizon high-speed Internet, the Verizon DSL service, is beginning to roll out large-scale NAT for its users.  Which means - and this is something we could have anticipated.  We've talked about some ISPs doing it in the past.  So this is not the first.  But Verizon is switching.  And so they call it "CGN."  And they said in their explanation, "What is CGN, and how to opt out."



They said, "The number and types of devices using the Internet have increased dramatically in recent years and, as a result, address space for these devices is being rapidly exhausted.  Today's technology for IP addresses is referred to as IPv4 (Internet Protocol version 4).  The IP addresses aligned with IPv4 are expected to be depleted at some point in the near future."  Notice it was supposed to be last summer, but we...



LEO:  Someday.



STEVE:  Yeah, eventually we're sure we're going to run out.  "The next generation of IP address space is IPv6, which will enable far more addresses" - like five per grains of sand, anyway, "...to be assigned than IPv4.  Unfortunately, most servers and other Internet devices will not be speaking IPv6 for a while, so IPv4 will remain standard for some time to come.  During this transitional period, in select areas for high-speed Internet residential customers, Verizon will be implementing Carrier Grade Network Address Translation (CGN or Carrier Grade NAT).  Verizon FiOS and Verizon Business customers are not impacted at this time by the change.  This transition will enable Verizon to continue serving customers with IPv4 Internet addresses.  CGN" - again, Carrier Grade NAT - "will not impact the access, reliability, speed, or security of Verizon's broadband services."  In fact, and this is me editorializing, it will improve security.  "However, there are some applications such as online gaming" - whoops - "VPN access" - whoops - "FTP service, surveillance cameras, et cetera, that may not work when broadband service is provided via a CGN.  For our customers utilizing these types of applications, Verizon provides the ability to "opt out" of CGN.



So this is interesting.  What this says is they are - Verizon is looking at their overall IPv4 pool and seeing that they're having to begin prioritizing.  I would, I mean, the truth that is being said, not publicly but in internal meetings, is the techies are saying not everybody needs a public IP.  And they're right.  Your mother, Leo, may not need a public IP.  She wouldn't know if she had one or not.  And so Verizon is saying we've got to start prioritizing.  We want to give business-grade customers a public IP.  We want to give our FIOS customers a public IP.  So those who are paying more and need for various reasons a public IP are going to be able to keep one.  But a vast population of our customers simply don't need that.  And so the point is they will get a 10-dot IP.



So we've seen ISPs doing this before.  And the reason I mentioned it increases security is for exactly the same reason a NAT router ever increases security.  And that is that unsolicited traffic hits the NAT router and has nowhere to go.  So essentially that means that Verizon will have a router outside of everybody else's router, and it'll be sending 10-dot IPs to the residential customers, and their routers will then be turning those into 192.168 IPs.  So we'll have two layers of nonroutable IPs before you get out to a publicly routable IP.



So this is foreseeable.  This is a major ISP looking at their available pool of IPv4 space and saying, okay, we need to reclaim a bunch.  And this is a reclamation because right now they've got enough that all of their customers have had a public IP at their location.  So Verizon is going to reclaim massive swaths of public IP space, except for people who say, no, no, no, really, I know enough to know I need one.  I'm a gamer.  I need a VPN into my home network.  I have surveillance cameras all over.  I need to be able to get to them when I'm traveling to see what's going on and so forth.



So I think Verizon's acting in a reasonable and a foreseeable fashion.  I think it's very nice that they're allowing, on the granularity of the customer level, their individual customers to say, no, please, I know enough to know I need this.  And for people who don't, it's like, eh, you get a little more security because nothing unsolicited will ever hit your router again, all that noise, that IBR.  That's a term I haven't used for a long time.  That's the term I coined, "Internet Background Radiation," the worms that never die, still out there.  Code Red and Nimda are scanning around, looking for open ports.



LEO:  And they never will unless ISPs block those ports, like, everywhere; right?  Wouldn't they die after some sort of critical mass of blockage?



STEVE:  The problem is there's random things...



LEO:  Windows 95 machines that are sitting in a closet just continue to try to spread them.



STEVE:  Precisely, yup.  And you know Windows 95 never crashes, so it just keeps going.  I'm sure you heard about this.  A subcontractor that Walmart uses, VUDU, had a...



LEO:  Oh, unbelievable.



STEVE:  Yeah, a physical break-in to their facility which stole the computers containing hard drives with all of the account information of their customers.  Now...



LEO:  That's a physical break-in.



STEVE:  Yeah, exactly.  This is not - and this is what makes this different than what we normally talk about.  This is not the persistent threat coming from overseas anywhere.  This is somebody stole their equipment, their servers, or whatever it is they were using to maintain their account information.  Now, it's a little distressing that it took 16 days for VUDU to get their act together and send email.  Of course they just lost all of their databases, so they may not have known their customers' email addresses.



LEO:  Oh, maybe that's it.  Yeah, maybe that's what took so long.



STEVE:  Yeah, they had to, like, go back to their backups or something in order to find their...



LEO:  I got the email.  What they said is that it was only the last four digits of the credit card, thank goodness.



STEVE:  Yeah.  So what they said was we want you to know "that there was a break-in at the VUDU offices" - that's V-U-D-U, by the way, offices - "on March 24, 2013, and a number of items were stolen, including hard drives.  Our investigation thus far indicates that these drives contain customer information, including names, email addresses, postal addresses, phone numbers, account activity, dates of birth, and the last four digits of some credit card numbers.  It's important to note that the drives did not contain full credit card numbers, as we do not store that information.  Additionally, please note that, if you have never set a password on your VUDU site and have only logged in through another site, your password was not on the hard drives.  While the stolen hard drives included VUDU account passwords, those passwords were encrypted.  We believe it would be difficult to break the password encryption."



LEO:  By the way, they said "encrypted," but I didn't hear a word "salt" in there anywhere.



STEVE:  No.  Correct.  And we don't know, when they say that, we know they probably mean a one-way hash.  And we don't know what hash, or salted and so forth.  So it's good that they did something.  They said, "But we cannot rule out the possibility, given the circumstances of this theft."



LEO:  You know, it's so trivial to password-protect a hard drive.



STEVE:  Oh, I mean, this is - there's never been a better case study for TrueCrypt and whole drive encryption.  All they had to do was to do that, and they could just - they would say, well, okay, zero impact from the theft of our hard drives.  Zero.



LEO:  Yeah, because they can't get it.



STEVE:  Yeah.



LEO:  So stupid.  I mean, I do that on my portable drives because I figure I could leave it lying around, and I don't want anybody to get into it.



STEVE:  Yeah.  So they did something not quite right.  And they're, like, saying, oh, "We think it's best to be proactive and ask that you be proactive as well.  Security precautions:  If you had a password set on the VUDU site, we have taken the precaution of expiring and resetting that password."  But that's not true.



LEO:  What?  Really?



STEVE:  Because, well, because listen, then, to the instructions.  "To create a new password, go to VUDU.com.  Click the Sign-in button at the top of the page.  Enter your current username and password.



LEO:  Oh.  Well, then, if the bad guy has my password, that's all he has to do.



STEVE:  Yeah, exactly.  They did not expire.



LEO:  Pretty stupid.



STEVE:  Yeah, they did not expire and reset them.



LEO:  No.



STEVE:  They're just saying we're going to make you do that.  So it's like, okay, not so smart.



LEO:  What the heck?



STEVE:  Especially when they waited two weeks...



LEO:  Unbelievable.



STEVE:  Yeah.



LEO:  Well, I will go in and change my password and then kill my account because I don't really need VUDU.  It's like iTunes or any of these...



STEVE:  Leo, we need you to have VUDU so that, if I don't see...



LEO:  So I get the email.



STEVE:  Yes, so that, if I don't receive these letters, you will.  This was sent to me by a listener, and I thank you very much.  And they do offer - they're giving everyone a free one-year protection by something called AllClear ID.  Unfortunately, it's probably a scam, too.  I'm sure...



LEO:  I'm sure Walmart owns it.



STEVE:  And it's probably to get people addicted, hooked into the service.



LEO:  Yeah, automatic renewal, yeah, yeah.



STEVE:  Exactly, yeah.  So we do have an interesting little bit of news about a forthcoming Firefox.  We've already talked about 22, which is somewhere in the early summer.  This is v23.  I get a kick out of the fact that they know that the pre-beta will be released next month on May 17th.  I don't know, how do you know that?



LEO:  That's how you get developers to commit to a release date.  That's how that is.



STEVE:  They must have a crystal ball.



LEO:  Okay.  We're committed now, kids.  We're in.  



STEVE:  And the final release will be occurring on August 6th, just for all of you who would rather wait.



LEO:  Okay.  All right.



STEVE:  What's different is that, in Firefox 18, which is a couple versions ago, I think we're all on 20 now, Firefox 18 introduced one of those settings that's, like, there's a bazillion of them.  If you go about:config, there's so many that you can't even begin to look through them.  You have to then use the search box to kind of begin to narrow them down.  So, but that's cool.  They had a setting they added called security.mixed_content.block_active_content. So again, security.mixed_content.block_active_content.  That was - they put that in there so that people could poke around with it and experiment.  With v23, which we'll all officially get who are on the release channel on August 6th, in a couple months - well, actually May, June, July, oh, no, more than a couple months.  It'll be in beta, pre-beta for quite a while.  It'll be for the first time turned on by default. What that makes is that insecure - so insecure scripts, style sheets, plug-in content, inline frames, web fonts and web sockets will be blocked on secure pages.



Now, okay.  This is not - if you went to an insecure page, nothing happens.  But there are websites that are - the page itself is delivered securely, but then they contain non-HTTPS links to insecure content.  Now, browsers have long been able to and often would pop up a mixed-content warning.  Mixed content just means the page is secure, but this page is asking me, the browser, to retrieve some other objects to populate the page which are not secure.  What should I do about that?  So Firefox has just been permissive and warning.  They're going to stomp on that now.  Now, this is not display content like images, videos, or audio.  So that's important.  This is active content that's going to be blocked.



So I think this is a nice step forward for security.  They're announcing this.  They're trying to make developers aware because this will break things.  I mean, this has the potential to break some sites that are actually not operating as securely as they should.  So breaking shells is how you get eggs.  Or something.



LEO:  You can't make an omelet without breaking some proxy servers or something.



STEVE:  That's what I was looking for.  Now, there was a bunch of noise about iMessage this week.



LEO:  Oh, yeah.  This was a fake, I think.



STEVE:  Yeah.  And I'm not even sure what was going on.  But as...



LEO:  I can tell you what - I can fill you in.



STEVE:  Fill me in.  Fill us in.



LEO:  CNET kind of misunderstood a DEA alert that was sent out to police departments saying, if you see some holes in the data request SMS messages from carriers, you should just know that that's probably iMessage because that data is encrypted, not unencrypted.  And CNET interpreted that to mean, oh, good, use iMessage because the police can't read it.  But of course Apple will happily hand over the contents of your iMessage upon request by police.



STEVE:  And we know that they do have the messages because, if your phones are off, and you turn them on, you then receive your backlog of iMessages which Apple had been storing for you.



LEO:  And maybe they even save them if you delete them.  We don't know because Apple doesn't say.  And we know that Apple can get into them because of course they can recover your password.  So even though they may be encrypted on Apple's servers, Apple has the password.



STEVE:  Well, yeah.  And they've never documented the protocol, which is more worry than not.  Bruce Schneier in his blog, as always, succinctly cut through this.  He wrote, "The U.S. Drug Enforcement Agency has complained," he said, "(in a classified report, not publicly) that Apple's iMessage end-to-end encryption scheme cannot be broken.  On the one hand, I'm not surprised."  This is Bruce Schneier talking.  "I'm not surprised.  End-to-end encryption of a messaging system is a fairly easy cryptographic problem, and it should be unbreakable.  On the other hand, it's nice to have some confirmation that Apple is looking out for the users' best interests and not the governments'."  And he fixes this in a second.  And he says, "Still, it's impossible for us to know if iMessage encryption is actually secure.  It's certainly possible that Apple messed up somewhere; and, since we have no idea how their encryption actually works, we can't verify its functionality.  It would be really nice if Apple would release the specifications of iMessage security."



And then to that he added an edit on Monday.  So several days later he said, "There's more to this story:  The DEA memo simply observes that, because iMessages are encrypted and sent via the Internet through Apple's servers, a conventional wiretap installed at the cellular carrier's facility" - exactly as you said, Leo - "isn't going to catch those iMessages along with conventional text messages.  Which shouldn't exactly be surprising.  A search of your" - and I love this.  Bruce says, "A search of your postal mail isn't going to capture your phone calls, either."



LEO:  Exactly.  It's looking in the wrong place.



STEVE:  "So they're just different communications channels.  But the CNET article strongly implies that this means encrypted iMessages cannot be accessed by law enforcement at all."



LEO:  Not so.



STEVE:  "That is almost certainly false."



LEO:  Apple even says in their terms of service, we will turn your stuff over.



STEVE:  Yes.  And he says, "The question is whether iMessage uses true end-to-end encryption, or whether Apple has copies of the keys."



LEO:  But we know they do.



STEVE:  Yes.



LEO:  Because they can recover your password.



STEVE:  Yes.



LEO:  Right?  Doesn't that mean that they...



STEVE:  They could be using ephemeral keys and giving us what's called "perfect forward secrecy."  And in fact the protocol, there has been some reverse engineering done of a version of the iMessaging protocol on a Mac, where the guts were more accessible to the guy doing the reverse-engineering.  And what he discovered was an amazingly complex mess.



LEO:  Good.  Or it might be good.



STEVE:  So, I mean, it has got certificates flying back and forth and all kinds of stuff.  So if nothing else, if somebody really did go overboard, and of course that's not always a good thing because it's more easy to make mistakes in something complicated than in something simple.  And in this day and age, as Bruce says, end-to-end encryption is trivial.  You do a Diffie-Hellman handshake to exchange a key, nobody in the middle is able to intercept that as long as you've got authentication of the endpoints.  And presumably that's easy to have now, too.



LEO:  Yeah.  So in a way that kind of - the complexity of what they've implemented kind of lends one to think it's not very good.



STEVE:  Yeah.



LEO:  As opposed to good.  Since it would be very simple to implement it well.



STEVE:  Yes.  We now have a...



LEO:  I would think a company like Apple would just prefer not to know.  Like just do it right, and then you can say, I don't know.  We don't know.  Go away.  Wouldn't that be easier for Apple than to say, all right, I got a subpoena, let me go look.



STEVE:  Well, and I didn't cover it this week in my notes because I forgot about it, actually.  But I'm sure you saw in the news Google really fighting back.



LEO:  They do.



STEVE:  Which is nice to see.



LEO:  I'm proud of them, yeah.



STEVE:  Yes, I am, too.  They are saying no to these warrantless requests for information.



LEO:  And to their credit, they have a - this is very un-Apple-like.  Google has a transparency report they publish and lets you know how many requests they get, how many they've turned down, how many they've accepted.  They can't, unfortunately, because of the Patriot Act, they cannot reveal raw numbers on certain requests.  But I think Google does the best of anybody, at least - and Twitter's now doing this, too, by the way - at least letting people know what's going on, what governments are asking for what information.



STEVE:  Yeah, because as citizens we need the information.  We need the feedback in order to vote intelligently.



LEO:  Exactly.



STEVE:  That's the way democracy works.  So speaking of democracy, we have a Bitcoin section, Leo, because there's enough Bitcoin stuff going on.



LEO:  I love it.  Because I have bitcoin.  I'm interested now.  Suddenly I'm interested.



STEVE:  Do you know that a 42-year-old media entrepreneur named Jeff Berwick is going to be bringing bitcoin ATMs to a city near you soon?



LEO:  Yeah.  Well, to a couple of countries where they don't like the currency anymore.



STEVE:  Yup.  Cyprus is getting one, as is L.A.



LEO:  Oh, that's interesting.



STEVE:  L.A. is probably just because people are hip, I guess.  The article in CNN's Money section said that Berwick expects to put the first ATMs in Los Angeles and Cyprus in the next...



LEO:  So how does this work?  I give him money and he gives me bitcoin?  Or I give him bitcoin, he gives me money?  How does this work?



STEVE:  The machine is connected to the 'Net.  And so you're able to transact your bitcoinage with cash, cash of the local currency.



LEO:  Wow.



STEVE:  Yeah.



LEO:  Wow.  So it knows.  I'll have to enter my passphrase or what?  How do I identify myself with bitcoin?  Is it a...



STEVE:  You'll have to have your Wallet online and appropriate security.  But the idea would be, if you have bitcoinage in an online account, then you will be able to go to one of these machines and get money.



LEO:  Wow.



STEVE:  Isn't that cool.



LEO:  So I want to thank the 19 people who have given us bitcoin, totaling now a little over one whole bitcoin.  I said we'd have it on the website, and I thought we would, but Radford didn't implement it.  So I will ask him where the hell it is.  For those of you wanted to give us bitcoin, I apologize.  But I will - I can show you the QR code again, if that helps.  You know, 19 people did this.  This is what's going to be on the website eventually anyway.  And I'll paste into the chatroom this bitcoin address.  So this long - it's not hex.  It's a long number and alphabetic string is my bitcoin identifier; right?



STEVE:  Yes.  That is a globally unique ID of you.  That is, that's what makes you anonymous.  You're just that to the bitcoin system.



LEO:  Oh, now I'm not so anonymous anymore.



STEVE:  Well, yeah.



LEO:  But you can make many of these.



STEVE:  Yes, you can have - exactly.  Yes, you can have as many of those as you want.  And there are people who looked at the anonymity, and I've seen things, "Bitcoin's not as anonymous as you think" and so forth.  But you have the facility for doing that.  Unfortunately...



LEO:  A donor would be anonymous to me, though; right?  I can't tell who they are unless they say so because they're donating from their Wallet, which I don't know who that is.



STEVE:  Right.



LEO:  And that's probably more important to them.



STEVE:  And of course the bad guys are involved.  We've seen, I'm sure people have seen, I mean, in fact the currency has fluctuated because of major break-ins that have occurred in some of the various exchanges.  It never really seems to dent the coinage very much.  It recovers pretty quickly.  And I think, as I said, once there are many more exchanges, and ATMs on every corner, people won't care that much.  And it'll also distribute any damage far more widely and broadly.



But there is now malware that is getting installed via Skype.  Skype messages come up asking you to click on something, something alluring.  And among other things, Kaspersky discovered last Thursday a Win32 trojan they named Jorik.IRCbot.xkt.  And what's funny is it installs a bitcoin mining engine on the user's machine and, not surprisingly, pins the CPU at a hundred percent.  So you're suddenly thinking, gee, why is my Internet so slow?  And why is my mouse not really keeping up with my movements and so forth?  Well, yes, it's because your computer is frantically and somewhat fruitlessly attempting to mine bitcoins.  So it joins you to a large bitcoin mining operation and saturates your CPU.



I don't imagine it will stay hidden on anyone's machine very long because the only chance it has of mining with any chance of success, I mean, and which is diminishingly small, we'll cover in a second, is really burning up cycles.  Maybe if your screensaver were on, and it came to life, that would help it stay hidden, if anyone even uses screensavers...



LEO:  It goes to a hundred percent right away; right?



STEVE:  Yeah, just pins it.  It's like, okay, whoa.  Now, several people mentioned that - because you and I were talking about inflation, and we were misusing - we were using the wrong term.  With bitcoin value jumping, that's deflation.



LEO:  Deflation, right.



STEVE:  Yes.  James Parsons, @PolicyEconomy, tweeted me.  He said, "Bitcoin deflation, not inflation.  Bitcoin is currency.  1 BTC buys less stuff is inflation.  1 BTC buys  more stuff is deflation."



LEO:  Right.



STEVE:  And at midday Monday, a bitcoin was at $194.73.  This morning when I looked it was at $232.



LEO:  Holy mackerel.



STEVE:  With the last 24-hour maximum at $266 per bitcoin.  So it has been going up dramatically.  But what I thought of when I saw that was this changes the mining equation dramatically.



LEO:  That's right.



STEVE:  It really does.



LEO:  It makes it more feasible.



STEVE:  Go look at that link before I mention it, Leo, that's right there.



LEO:  Yeah.  Go ahead.



STEVE:  Just so you can bring the page up.  These guys, ButterflyLabs.com, they are the people who are - and they've got an ASIC, an Application Specific IC, a little, cute little black box, the Bitcoin Miner, which is available for preorder.



LEO:  It's cute.



STEVE:  It is.  It's got a little red button there, little red dot saying I'm cranking away here.



LEO:  Mining.  Mining.



STEVE:  Okay.  This is 50 gigahashes per second.



LEO:  Is that fast?



STEVE:  50 billion hashes per second.  It blows everything else away.



LEO:  You're kidding.  It's only 2,500 bucks.  I could be rich.  All I'd need to do was get, what, two bitcoins, no, 10 bitcoins, and I'd be...



STEVE:  Actually what's interesting is that I could take the 50 I made, sell them now, and buy four of those with a couple grand left over.  So, now, the problem is this is not - you and I are not the first people to have this idea, Leo.



LEO:  Yeah.



STEVE:  But my point is that, with this kind of deflation of the bitcoin, it means that these machines are incredibly cheap in bitcoinage relative to their ability to mint coins.  The other thing it means is that all this will do is instantly change the landscape of how difficult it is for the rest of us to make bitcoins.



LEO:  By the way, you don't have to cash in your bitcoins.  You could just pay for it in bitcoins.  They take bitcoins.



STEVE:  Of course they do.



LEO:  [Laughing] But I think some of this is speculative, that people are figuring that the value of bitcoins is going to go up a lot; right?



STEVE:  I think that's certainly the nature of speculation.



LEO:  It's speculation, a lot of this.



STEVE:  Yeah.  I would say, if you look at the curves right now, they're just too new.  I mean, this thing is just going up crazy.  And as I said to you before we were recording, I think it is so fun that we and our listeners are getting to participate in this.  We covered it years ago.  I turned on just a regular i7, a core i7.  It woke up after two days, and there was 50 bitcoins.



LEO:  Stop telling people about that.



STEVE:  Those were the days, my friend.



LEO:  Those were the days, yeah.  It not going to happen now.



STEVE:  That's not the case anymore.  That won't work.



LEO:  By the way, bitcoin now is down to $140 at Mt. Gox.



STEVE:  Wow, that's an amazing drop.



LEO:  It's extremely volatile, you should realize.



STEVE:  I looked this morning, it was 231.



LEO:  Yeah, it's extremely volatile.



STEVE:  What does Mt. Gox - across the top it'll show you the low in the last 24 hours.



LEO:  Yeah, the low is 111 bucks.



STEVE:  Okay.  And the high is still...



LEO:  The high is 266, yeah.  You saw the high.  Weighted average, 219.



STEVE:  Well, and remember what happens.  When these kind of highs hit, people cash out.  There are people who are saying, whoo, I'm leaving now.  And so they sell off...



LEO:  It's like the stock market.  You get sell-offs.



STEVE:  Exactly like the stock market.  And that depresses the currency for a while.  And it'll come back.



LEO:  So Radford just came running in.  The bitcoin QR code on our website is now up.  So go to TWiT.tv, the front page there, and wait till the rotator comes around.  And now I think we're going to get tons of bitcoins.  Tons.



STEVE:  I do really, really think it's cool that we covered this back when it was just nascent, when it was happening.  We talked about the technology.  I said this thing works.  And in the fullness of time, I mean, during the podcast we're getting to see the birth of a currency, a virtual Internet currency.  That is just really cool.  We have a Q&A question about some consequences, which I'll wait to get to, which is sort of interesting.



LEO:  Good.



STEVE:  Mark and his team at SmushBox achieved their goal.



LEO:  Yay.



STEVE:  Days ago.  Last time I looked, again, a few hours ago, they were at 132 backers.  They were at $26,165, with a target of 20K.  So they've exceeded their target.  They've got nine days to go.  Now, Leo, since you are a frequent and somewhat bruised Kickstarter user, click that link there in my show notes because this is very cool.  If you did not know before about Kicktraq.com, K-i-c-k-t-r-a-q dotcom, it is wonderful.  And look at the charts that these guys show you.  So this is a site that monitors Kickstarter projects...



LEO:  This is good.



STEVE:  ...and shows you all kinds of cool stuff, and even, like, worst case and best case projected into the future, based on where you are now, where they will probably be at time of final closure of the project.



LEO:  That's neat.



STEVE:  So, very cool.  Kicktraq, t-r-a-q, dotcom.



LEO:  Cool.  Yeah, I just got an email from my Pebble watch saying, well, because you ordered color, we've had some trouble.  Would you like black instead?  And I said, yes, just send me something, anything.  Anything.  Everybody's already reviewed it and decided it's junk anyway.



STEVE:  Oh.  Speaking of junk.



LEO:  Yes.



STEVE:  I'm sorry that I ever mentioned the remake of "The Evil Dead."



LEO:  Oh, yeah.  See, it got terrible reviews.  I was wondering what you thought.



STEVE:  Oh.  I walked out, Leo.



LEO:  Oh, dear.  Oh...



STEVE:  The setup was fine.  Then trouble began to happen.  And after about 20 minutes of just really pointless interhuman brutality, I mean, some I just closed my eyes and waited, listened to the soundtrack to wait for it to be over.  I just thought, what am I doing?  Why am I doing this to myself?  This was - I'm not a, like, I don't like that kind of movie.  I don't ever go to see those kinds of movies.  This was awful.  I called it - I tweeted.  I said, "The 'Evil Dead' remake:  I walked out.  A pointless, brutal gore fest.  None of the original classic movie's charm, fun, wit and humor."  And I have to say, "The Evil Dead 2," which was the one that then led into "Army of Darkness," it really is funny.  I mean, it doesn't take itself seriously at all.  It's just wonderful.  It's why it's a cult classic.  But this remake, oh, wow.  I mean, I know there's a market for people who want to go for some reason and see this just incredible gore.  That's not me.



LEO:  They said it was gory, modernly gory.  Yeah, yeah, yeah.



STEVE:  Oh.  Oh ho ho ho.



LEO:  Yeah.  Oh, well.



STEVE:  But I mean, oh, yeah, anyway, I've said enough.



LEO:  I saw "Justified," by the way.  I watched the pilot, and I enjoyed it.  Now, is the pilot typical of the whole season?



STEVE:  Yes.



LEO:  Often pilots are different from what happens when they get a green light.



STEVE:  No.  This thing stays good.  We're in I think our fourth season.  It's got a fifth season already set up.



LEO:  It was very funny.  It was very funny.  I enjoyed it.



STEVE:  No, but this is - it is, in fact, I've seen some feedback from our listeners who have gone through the first season, and they just - they can't wait to get more.  So I can vouch for it.  It's terrific.



LEO:  Good.



STEVE:  In nerd humor, Simon Zerafa, who tweets often, sent me something that he found.  I asked him where he found it, and he couldn't really track back its provenance.  But I kind of thought it was just clever.  He said, "Password must contain a capital letter, a number, a plot, a protagonist...



LEO:  I saw that [laughing].



STEVE:  ...with some character development, and a surprise ending."  That's a good one, yeah.



LEO:  I love it.  It is funny.



STEVE:  Now, here's 90 seconds, Leo, of - if you want to just inject this video into the broadcast, our audio listeners will be able to hear it.  They won't be able to see it.  I did tweet this link because this is wonderful.  And, you know, Shatner, I just take my hat off to him.  He's a class act.



LEO:  He is very funny.  So it's "Shatner vs. the Gorn."  Let me turn on my - is there audio?



STEVE:  Yeah.



LEO:   Is there - oh.  This is your review?  Wait a minute.  Wait a minute.



STEVE:  No.  It's a...



LEO:  Oh, no.  I got your review of "The Host" for some reason in that link.  Let me go to your Twitter.



STEVE:  What?



LEO:  I think there's...



STEVE:  Oh, my goodness, you're right.  It's a bad link.



LEO:  Yeah.  It's a bad link.



STEVE:  Wow, sorry about that.



LEO:  So let me go to your Twitter, and I'll get it from there [t.co/4JU3LYcMeu].



STEVE:  Yeah.  The Twitter is bit.ly/sggrc, to remind our listeners, if you want to quickly grab...



LEO:  It's kind of a long way to go.  You could just go to Twitter.com/sggrc.



STEVE:  Yes, you could.  But, okay.



LEO:  He makes bit.lys out of us all.  All right.  Let's just see here.  I'm going to scroll down.  "The Evil Dead."  "Only one year left."  "Why didn't I think of that?"  "Wonderful time sink."  Here you go, 90-second short, "Shatner vs. the Gorn," rated T.  Oh, it's a game.



[CLIP] WILLIAM SHATNER:  You keep getting me killed.  I thought you had my back.



[CLIP] THE GORN:  [Grunting]



LEO:  You've got to see this to appreciate it.  Apparently he's playing a videogame against the Gorn, but with a Gorn.  He punches the Gorn.  The Gorn punches back.  Now they're in a very slow-motion Gorn battle.  William's almost 90 now, I think.



STEVE:  Oh, it was just his birthday, by the way.



LEO:  Would be 80-something; right?  He's doing pretty good for - oh, he boxes the Gorn's ears.  Now they have to take a break.  So I guess this is a videogame.  This is an ad for it.  He's 82.  There you go.  Pretty good for an 82 year old.  That was a recreation, Trekker John Slanina says, that was a recreation of the actual battle - wait a minute.  Let's go back.



[CLIP] WILLIAM SHATNER:  Now you're over-acting.



LEO:  Clinch for clinch, slowly work their way through it, of the actual battle from whatever the first generation...



STEVE:  Yes.  Any serious Trekkie will remember Kirk battling the Gorn where the Gorn is extremely butch.  It's a lizard creature.



LEO:  It's like Godzilla, a little bit.



STEVE:  Yeah, it's God- but it moves very slowly.



LEO:  Right.



STEVE:  So, you know, Kirk runs around in circles and dances and bobs and weaves, and the Gorn picks up large foam rocks and throws them, and they sort of bounce unconvincingly as Kirk dodges them.  And then finally he, like, hits him simultaneously on the sides of the head, which it turns out the Gorn has very sensitive ears.  Who knew?



LEO:  He boxes the Gorn's ears, and it's all over.



STEVE:  Anyway, so anyone, if you're a Trekkie, and you didn't see my link in my tweet to our listeners, I'm saying you really - you need to go find this because it's a treat.  And Shatner at 82, I mean, he's not taking himself seriously, and it's a great little piece.  So 90 seconds, worthwhile.  And while I was going through the Q&A bag, I did see, not a SpinRite note, which is normally the way I sound when I'm getting into a SpinRite, but just a note from Tony Fishpool in Dartford, England, who said, "Wow.  Just finished 'Wormhole.'  Read all three books in less than a week.  All three were page-turners.  Thanks for the tip, Steve," said Tony.  And I just wanted to remind our listeners, they are up on Audible.  "Wormhole" is the third book in the Rho, R-h-o, Agenda trilogy.  So our listeners have really been enjoying it.



LEO:  Neat.



STEVE:  And I do have a - now, this is one that, you know, I would say I'm not making this up, but we know I'm not making this up.  But you might think, okay, really?  Steven C. Zimmerman sent, and we received, on the 7th of April, on Sunday, a SpinRite testimonial.  He said, "What a superior program, Mr. Gibson.  I work for an international communications corp., and one day a young fellow was complaining about his wife's computer.  It had just failed, and all of the recent pictures of his wife's father, who had just passed away, went with the PC.  I asked him if I could take a look at it.  He said, 'If you can recover those pictures, I'll give you this car.'  It was a 1997 Honda Civic Coupe.  Well, to make a long story short, SpinRite 6 did its thing.  And not only were the pics recovered, but the whole PC is renewed."



LEO:  And I have a new car.



STEVE:  "I gave him the PC, and he signed over the title."



LEO:  That's awesome.



STEVE:  "So, Steve, I can thank your hard work for my current mode of transportation - 31 mpg and still going strong.  241,000 miles on the 'Black Beauty.'"



LEO:  Aw.



STEVE:  Steven Zimmerman.



LEO:  He took the car.



STEVE:  So, Steve, thank you.



LEO:  Nice job, Steve.  Nice job, Steve.  And now we return to Security Now!, already in progress.



STEVE:  In progress.



LEO:  I've got questions for you, Steve.  You ready?



STEVE:  You betcha.



LEO:  You feel good?  You feel smart?



STEVE:  Ready to go.



LEO:  Let's go with question Numero Uno of our listener-driven potpourri #165, a quickie, a Twitter question from @DanLoFat, which is either a Chinese name or he's been on that low-carb diet or something, I don't know, a diet, in Chicago.  Steve, is there a way to mint bitcoins using distributed computing, like through a home network?



STEVE:  You could certainly have more machines running the bitcoin mining process.  But there is, by the nature of the way it works, there is no way to pool their computing resources.



LEO:  Ah, interesting.  You can't - it's not threaded.  You can't thread it.



STEVE:  Correct.  Even bitcoin mining pooling, which is a new thing that has arisen, because the chance of an individual scoring a bitcoin has continued to drop as the number of people minting them has increased, the percentage, the chance of getting one has dropped.  So what people have done is they've agreed to pool their resources.  And the idea is that, when anyone in the pool gets a bitcoin, they will divide them evenly based on the amount of computing power they have put into the pool.



LEO:  It's like when the office buys a lottery ticket.



STEVE:  Yeah, exactly.



LEO:  Yeah, and you share it based on how much you put in.



STEVE:  Which is nice.  So it's suddenly not an all or nothing, but it's a, oh, look, I got - so, and the larger the pool is, the greater the chance that the collective resources of the pool will score one bitcoin, which everyone then shares proportionally.



LEO:  And that's the smallest denomination you get in mining is a bitcoin?  One coin?



STEVE:  Yes.  One coin per solution to the hash.  And that problem keeps increasing.  But also remember that every four years the amount you are awarded is cut, is also cut.



LEO:  So that's why you got 50, because you got in early.



STEVE:  And today you only get 25 when you solve the problem.  So every four years that's cut in half.  And so that will keep going down as the difficulty also keeps going up.



LEO:  And as I've learned, because people are donating bitcoins to us, you can donate any fraction of a bitcoin.  Bitcoins can be divided kind of infinitely.



STEVE:  And that's why they have a future.  That's why, for example, I've got 50 bitcoins, apparently now worth, depending upon what time of day it is, either $12,000 or six.



LEO:  Promise me you won't jump out of a window if there's a bitcoin crash.  That's all I ask.



STEVE:  Nah, [mumbling].



LEO:  @ChivalryBean raises a point, though, with bitcoin mining, which is it's not really the cost of the hardware, as you can see.  The hardware can be expensive.  But it's the cost of the energy you use to run that hardware, and also energy used to cool the server room.  He says:  Is there any way to measure that energy use on his computer?



STEVE:  And you know, that prompted me, because this is something I think our users, our listeners would be interested in, there is a surprisingly inexpensive meter, which Amazon sells for $17, called Kill A Watt.



LEO:  It's a great thing.



STEVE:  K-i-l-l A W-a-t-t.



LEO:  Love it, yeah.



STEVE:  And what's cool about Kill A Watt is you plug it into the wall, and then you plug something, an appliance, into it.  And you're able to tell it what your electric company charges you for electricity, either across 24 hours or evening versus day if you've got the kind of billing where your power costs less at night than it does during the day and so forth.  You're able to put that into it.  And it will first measure the gross total electrical usage of whatever it is you have plugged into it and convert that to pennies, convert it into your currency.  So you can actually see what this device - so, you know, it might be like a refrigerator.  And a refrigerator doesn't draw energy constantly because it's thermostatically controlled, so its compressor switches on and off and on and off and on and off.



So this thing actually measures the instantaneous energy usage and then accumulates it over a growing period, and you're able to look at it and say, oh, this is how much this costs me per month to have this thing on.  So you could certainly plug your bitcoin mining box in and figure out if it's time to unplug your bitcoin mining box based on how much it's mining for you.  So Kill A Watt, 17 bucks at Amazon.



LEO:  Good deal.



STEVE:  Yeah.



LEO:  And we've talked about those, I think on the Giz Wiz, and you even used them and so forth.  So, yeah.  David Johnston, Sydney, Australia, asks:  Do you mean to say the RC4 implementation in TLS is broken?  Hey, Steve.  Love the show, blah blah blah.  I now feel bad for having written that [chuckling].  Regarding the recent...



STEVE:  That's nice.



LEO:  I know, I like that.  Regarding the recent news involving RC4 and TLS, does this mean that TLS fails to warm up the cipher?  I regard failing to warm up the 256-bit array is failing to correctly implement the cipher.  So is the situation actually one of widespread implementation failure?  And, if this is true, I'm bewildered, as every textbook says the cipher needs warming.  Also it should be noted that a warm-up run of 256 operations was only ever the recommended amount.  I use 1024 just to be sure.  I don't know if anyone had fully determined that 256 was enough before now.  Do you know where that number, 256, originally came from?  Thanks for the great show.  Dave Johnston, Sydney, Australia.  What the hell's he talking about?



STEVE:  So, okay.  What we talked about, I think a couple weeks ago, was the cryptanalysis of the use of RC4 in SSL/TLS/HTTPS, the secure web communications, where if there was some way to cause the browser to repetitively emit exactly the same query, then because the same plaintext was being delivered over and over and over, the slight statistical variances at the beginning of RC4 would show themselves.  And it turns out it was much worse than was believed.



So what happened is that RC4 was really badly implemented in the original WEP WiFi encryption.  There, there was no warming being done.  And so it was really bad.  There were bad keys.  And there was very - the keys related to the pseudorandom bitstream coming out of the cipher strongly.  So they fixed that by warming it up a little, but not enough.  They thought at the time it was enough, but no one really looked at it to say is 256 - is discarding the first 256 bytes from the cipher enough?  I don't know why they didn't do 1024.  David is doing 1024.  I'm proud of him.  We all wish that the world was doing 1024 because all of us are having to put RC4 at the top of our server list in order to avoid the BEAST attack, which attacks unless you don't have RC4 as the preferred cipher for the server to choose among those the client is making available.  Unfortunately, it's not as strong as we wish it were.



So what we really need to do is move ourselves away from SSL 3.0, which is the same as TLS 1.0, and get up to 1.1 and 1.2 universally, which does no longer have the problem that the BEAST attack uses.  Then we'll be able to pull RC4 down off the top of the list.  Or we could do another version of TLS, although I don't think anyone wants to, where we just warm RC4 up further in order to get the non-sufficiently pseudorandom off the front of the key stream.  So it's just they didn't look close enough.  They thought 256 ought to be plenty, but they didn't really analyze it.  When they did, they said, oops.



Now, again, remember, it takes, what is it, 2^40, like 2^40 identical queries from the browser.  2^32 is 4.3 billion.  So 2^40 is an additional 256.  That number seems high, so it may be less than that.  I'm not quite remembering the number.  But still, it's a disturbingly low number from crypto standpoint, meaning that it's a theoretical vulnerability.  And here we are.  We have to have RC4 first in order to avoid BEAST.  But we're not happy with RC4 being chosen because there's a theoretical problem.  So right at the moment we're in this awkward place of not really having something that - any solution that works as well as we would like, until we get clients and servers that are able to move to the newer versions of the TLS protocol.  Whew.



LEO:  Whew.  Would it be better to pick a random number of times to warm it up between 256 and 1024, something like that?  Or does it matter?  There's no recycling in the warm-up, is there?



STEVE:  If you chose a random number, then you would need to transmit that to the other end so it knew how to...



LEO:  Oh, okay.  They both have to do the same.



STEVE:  Exactly, they have to be synchronized.



LEO:  Got it.  Opher Banarie, a regular in many of our shows, including the Giz Wiz, as well as apparently Security Now!, in Chatsworth, California, has some thoughts about defeating employer spying:  As a longtime SpinRite owner, listening to Security Now! since No. 1, Numero Uno, I must speak up about defeating employer "spying" approaches.  While we could debate the pros and cons of employers implementing systems that can track employee activity on company computers and networks, there is one obvious element:  They can.  Not only does the technology exist, it's legal for them to do so.  Most employers now have a policy statement about limiting employee use of computers to company business.  Many of these policies include termination as a consequence of violating the policy.



Rather than defeating such systems, maybe people need to ask, hey, if I'm so worried that my employer might see what I'm doing during office hours, maybe I shouldn't be doing it.  I understand how your advice is helpful in public access locations.  But in the office, it's pretty obvious we should be working on company business.  He does have a good point.  I have to agree with him on that.  Right?



STEVE:  Yes.  And...



LEO:  As a boss.



STEVE:  So I guess my branching-off point here is to say, I'm not suggesting that it's wrong.  I've never suggested it's wrong.  I'm only, as always, looking out for the end-user.  And I just want the end-user to be informed.  So I'm not, I mean, at no point, for example, is my SSL fingerprinting meant to say this is bad for employers to be doing this.  I'm just saying I would like to empower users to know.  And I've said on this podcast before, every such - all of the machines being monitored should have a half-inch-high strip permanently affixed to it that says all of your Internet communications within this company and on this machine are subject to monitoring for the protection of the company, for antimalware filtering and so forth.  So act accordingly.  I mean, it ought to be right there.



But the problem is you get into this situation where the management doesn't feel comfortable being that blatant.  Or maybe they add the technology just to sort of test to see how it goes.  And it's like, oh, well, we'll tell people later if we end up keeping it, so forth.  It's like, eh, I just want to empower people.  So I completely understand that, in the era of malware, as we end up with HTTPS everywhere, always having secure connections, not just during login, but all of our communications, a company needs to be able to filter what comes in and out of their network onto their machines.  After all, the machine is the terminus of this.  And so I get that.



All I want is for the end-user to be able to see.  And in fact, I would argue that my stuff helps people know that they are being monitored so they will respect their employers' intentions for the way the computer network would be used.



LEO:  Yeah, I mean, speaking as a business owner, I'm liable for stuff people do on my computers.



STEVE:  Yup.



LEO:  And if they're surfing porn, and somebody sues us for harassment, it's our fault.  So we don't monitor because I trust my employees, but I would - when I've been an employee, I've assumed that anything I'm doing is visible on the corporate network.  Just assume that.  If you want to check out through Steve's systems, check out whether they are monitoring it or doing a man-in-the-middle on the SSL certificate, that's fine.  But assume, you should assume you're being monitored.



STEVE:  Yeah.  Back when I had 23 people, there were some embarrassing things that got - that came out of the printer.  We had a - it was back in the days of network-shared printers.  And I think on email the print button was right next to the next message button or something.  And, oh, there were some interesting things coming and going.



LEO:  Yeah.  Just assume that, I mean, there's a legal responsibility.  And of course I've always said that employers have the right to do that.  You're not going to win in that case.  And it'd be prudent to just assume it.  Right?



STEVE:  Yup.



LEO:  I think.  Mike, anonymous for reasons that will become clear to all, received an odd UPnP result on your tester.  Steve and Leo, long-time Security Now! listener, love the show.  Couple of weeks ago I ran the UPnP scanner while at work.  I can't figure out how to interpret these results.  The test reported that we did respond to the probes.  However, the IP reported was 10.1.1.1.  I'm thinking we're vulnerable, but I wanted to get your opinion on the results first before telling the appropriate people.  I'm sure our security team will be keenly interested if we are indeed vulnerable.  We found out about six months ago we had a breach and that the bad guys had been in there for quite a long time.  Whoops.  So they locked the wrong door.  Thanks for all you do, and all the advice and insight you've given over the years.



STEVE:  Okay.



LEO:  What is the 10.1.1.1 result?



STEVE:  Well, Leo, if you bring up Google and search for "UPnP test" and look at the first link that comes up, guess who?



LEO:  UPnP test.  Good job, Steve Gibson.  You're No. 1.



STEVE:  But...



LEO:  And then who's No. 2?



STEVE:  But, no.  No. 1, it's not the test, it's the sample page.



LEO:  Oh, that's funny.  The Google result says "UPnP rejected."  So if you click that, and you thought that you were being tested, that's - oh, it's good you put a banner up there now.  This is good.



STEVE:  Yes.  That big red banner, you cannot possibly miss the fact.



LEO:  That's cool.  And it even scrolls along with it.  That's good.  Nice job.



STEVE:  Thank you.  I did that...



LEO:  A little CSS, baby.



STEVE:  I did that yesterday morning.  Somebody - I had a Twitter conversation.  I mean, I would have been puzzled by Mike's comment even now.  But a guy named Ryan and I went back and forth night before last because he was actually trying it, saying, Steve, I'm sure my IP is not 10.1.1.1, and so forth.  And so finally, when there were about three or four tweets back and forth, and he said, oh, I figured out, he says, I got the link from Google, and it's the sample page.  He's like, ohhh.  And so, yes, I immediately...



LEO:  Well, you were smart enough to use 10.1.1.1 for your sample IP address, which is good.  That's kind of a hint there; right?  Because that's an unroutable address.  That's a reserved address.



STEVE:  Right, exactly.  Well, actually it's my own internal network.  And I forced that IP, which is not a machine, so that it would not respond to anything, in order to generate that test and capture the screen and so forth.  So anyway, so, yeah, I put up - so, Mike, the answer is, and I did respond to Mike already when I saw his email, that was the sample page.  I immediately put up a banner to notify all future visitors because there had been some confusion, and I just didn't realize, I wasn't worried about it until I saw that Google had indexed me in the No. 1 result when you look for UPnP test.



LEO:  Good job.



STEVE:  Yeah.



LEO:  Now, you know about robots.txt; right?



STEVE:  Yeah.



LEO:  You could exclude that page in robots.txt so that Google wouldn't index it in the future.  But you don't want to hurt your result, though, so...



STEVE:  Well, what I need to do, right now I'm unhappy because you've got to go, to get to that test, you have to go down in through ShieldsUP!, and you get this weird-looking URL which is uncomfortable.  And I just need to make it...



LEO:  But Google spiders through it; right?  So I don't know why it used that as the result, however.  That's odd.



STEVE:  Yeah, yeah.



LEO:  Anyway, I'm glad we could clear that up, and good idea with the banner, that's cool.  Guy in Nottingham, England, found a - I know it's "Guy" because he's in Nottingham.  If it were in Paris, France, it'd be "Gi" - found a port opened by his TV box?  Running ShieldsUP!, I noticed port 1024 was open, something I've never had before on my occasional checks.  I looked at my router and found that port 1024 was being forwarded to 8081 on the IP for my new TV recorder box.  This runs a new service, YouView, here in the U.K. which includes Internet on-demand TV.  I scanned the open port 8081.  It reported a service called - this is scary - blackice-icecap running.  Now I'd be running for the dictionary.  Should I be worried about this activity?  Thanks for the great informative show.  I've learned lots over the years.  I wish I could say I grasped everything fully.  Oh, and my router does not have the UPnP problem.  Whew.  So thanks for yet another great tool.  By the way, that's at ShieldsUP! at GRC.com, if you want to test.  Regards, Guy, Nottingham, England.



STEVE:  Okay.  So here's what's happened.  He's got a TV recorder which is using UPnP the way it was intended to be used, to open a port through his router for itself.  So, and this looks like it's, I mean, it's interesting that it's 1024.  That's the lowest number non-service port available.  So it must have said give me whatever port you've got now, and the router said, well, we're starting off at 1024, so here you go.  And then what that allows is for incoming unsolicited traffic to go through the NAT router and get to this box.  8080 is sort of the traditional alternate port from port 80 for the web.  HTTP protocol runs on port 80.  But that's down in the service port range, those ports from 1 to 1023.  And in the UNIX world, only services running as root are able to create listening ports down in the service port region.



LEO:  Below 1024.



STEVE:  Right.  So users who want to, like, run their own server, needed to use ports above 1024.  And so it just became common to use 8080.  So this use of 8081 is related to that.  It's obviously one more than the traditional 8080.  What's significant is this notion of blackice-icecap, when he said "I scanned the open port 8081, and it reported a service called 'blackice-icecap' running.  Should I be worried about this activity?"  No.  What is meant here is that, in the dictionary of what ports different things use, port 8081 was once used by a firewall called BlackICE.



LEO:  BlackICE Defender.  I remember it, yeah.



STEVE:  Yes.  And so ICEcap was some facility that they had which it chose for itself port 8081.  In the same way that FTP chooses 21 and web servers use 80.  So if you had port 80 open, it would have said, oh, you have a web service running.  This one had 8081, so it's, oh, you've got BlackICE ICEcap running.  Well, no, you don't.



LEO:  It's just a lookup.  It just says this is one thing that uses that.



STEVE:  Traditionally that's been the port, exactly.  And when somebody updates their list, they'll say, oh, you must have whatever that is running on his TV recorder box.



LEO:  Yeah.



STEVE:  Yes.  So anyway, you might try disabling UPnP, if this worries you.  But this does mean that incoming traffic is always able to go to this TV recorder box.  And the only concern would be if it has not been written well, somebody  might be able to maliciously take it over and then use it to gain access to your network.  So that's always the concern of allowing devices to map ports through to themselves, is then anybody on the outside can get to those devices.  And that's a cause for some concern.



LEO:  It's easy to think of why it might do that.  The service might be pushing TV Guide updates down.  Instead of having the machine pull, which it wouldn't have to open a port for, it's pushing it to the machine whenever it's got an update, things like that.



STEVE:  Right.  And so the machine would be advertising to some central server, hey, whenever you've got something for me, this is where I am, at this IP and this port.



LEO:  They may even register it.  That may be part of the deal when you get the device.  Advait in India wonders, why not cloud your servers?  You've been sharing the news and adventures of setting up your new servers.  But I was wondering, why do you do it yourself?  Why don't you virtualize your new servers?  Have them reside on some cloud service like EC2 or Rackspace, which you talk about all the time?  Or something similar.  In this day and age, why mess around with managing your own hardware when you can just have them be virtual machines up in some cheap, highly reliable, highly redundant cloud service?  Blah blah blah, effusive praise, SpinRite owner.  Advait.



STEVE:  Well, so the answer is, probably more than anything, control.



LEO:  You're a do-it-yourself kind of guy.



STEVE:  Well, and in some areas I'm a control freak.  And, for example, we constantly report here on this podcast of breaches of people's networks and systems that affect all their customers.  And I run an eCommerce system, selling SpinRite.  And I'm not willing to release responsibility, which I'm fully willing to take, by sending all this off to some virtual cloud and then have Amazon say, oh, we're really sorry.  We thought that the virtual machines were insulated from each other.  And we've already seen instances of cross-virtual machine contamination in these shared hosting systems, where they weren't as isolated as we believed.



So my feeling is I could see, maybe, eventually I want to do web-based forums.  That's one of the things I want to set up in the future.  And there's no way I'm going to put those on GRC's main server.  I'm just not comfortable with so much of somebody else's code running on the same box as my core services and my eCommerce stuff, all of which I've written myself from scratch.  So I could easily see hosting that somewhere else.  Except that now I've already got a rack and bandwidth and everything at Level 3.  So I'll just give it a physically separate machine and isolate it on the network so that no leakage can occur between boxes.  So since I'm already committed to having my own stuff, as you said, Leo, I am a do-it-myselfer.  I love that aspect of working on this stuff.



LEO:  Yeah, it's how you learn.  It's a good way to learn.



STEVE:  Yeah, yeah.  And I have to say, too, my experience has been it's not necessarily cheaper.  They're there to make money.  And I have a very nice fixed-price contract with Level 3.  I buy it on the so-called - my bandwidth on 95/5, which is to say that they take the highest 5 percent of my usage through the month, and they charge me for 95 percent of what that is.  And that is, if it's over my cap, which is 10Mb.  And so I spike, you know, 50Mb and so forth higher all the time.  But it's people downloading all the podcasts at once and so forth, and then it sort of settles down.  So that our average ends up being probably about half that, around 5Mb.  And so that gives me the flexibility to offer good bandwidth and good responsiveness, yet at a price that makes sense for me.



And I just, in my experience, when you start really trying to source things from Amazon, what was it, oh, I did, I put all of our audio up there.  I do have all of our audio backed up, but it's not coming from there.  I did have it coming from there, and it was expensive.  So it's not cheap to actually be using that bandwidth in the cloud.



LEO:  We should point out that Steve's kind of like half cloudy.  He's not running the servers out of his house.  As you can tell, he's got what's called a "colo," where you buy the hardware and put it in there, but you're in a network operations center run by another company.



STEVE:  Yes.  They provide power, air conditioning, and security.  And basically so I have a full rack over in Tustin.



LEO:  So you are in the cloud, it's just that you're buying your own hardware and running and managing it.  You're managing your own servers.  We do the same thing.  We lease servers from SoftLayer, but we manage them ourselves.  There is another level above that where you can get managed servers.  And then there's finally this new thing, which Rackspace, Amazon, Google and others are doing, where it's kind of all virtual.



STEVE:  True virtualization.



LEO:  It's fully virtual.  You don't know or care about the hardware.  And in fact there's certain advantages to this because the hardware is distributed often geographically.  So if there's a power outage in Seattle, it may not affect you because your servers are all over the place, and if there's a failover it's all distributed.  But I don't think, Steve, you're telling people, oh, you should do your own eCommerce solution, either.



STEVE:  Oh, no, no.



LEO:  Steve knows what he's doing.



STEVE:  No.



LEO:  And this is a unique situation that is not typical by any means.



STEVE:  We were being pursued by Digital River.



LEO:  He wrote his own software, folks.



STEVE:  And they finally called Sue, after we didn't return their messages or anything.  And they got Sue, my operations gal, on the line.  And she finally said, look, he's writing - I think this was when I was in the process - "He's writing his own eCommerce system."  And the guy at the other end of the phone said, "Oh, no, no, people don't write those."



LEO:  Somebody does.



STEVE:  Apparently.



LEO:  Did she tell him he's writing it in assembly language?



STEVE:  He would have...



LEO:  He would have said, "No.  Who am I talking to here, George Morrow?  What is this?"  Yeah.  I mean, so this is a unique situation.  And in fact I think you would counsel that, unless you really, really, really are experienced in this, you should not be writing your own eCommerce solution.  You should be using an eCommerce solution from a trusted provider who knows what they're doing.  These things are nontrivial.



STEVE:  And the last piece I would mention is I don't know that I even could host GRC because GRC is very special.  We've got custom-made UDP packets and TCP packets and all kinds of low-level networking stuff coming and going out of our systems.  It took Level 3 a while to get used to me.  They were saying, uh, Steve, what's going on over here?  And then now they all know, okay, just leave him alone.  He's kind of strange, but he seems to be doing a good thing.



LEO:  I remember when Kevin Rose set up Digg for the first time.  They had the colo.  They had a cage, just like you.  And they bought hardware, and they brought it in, and they installed it.  But that was how you had to do it in those days.  And I'm sure with Milk and his later enterprises, nowadays when you start up an app or you start up something else, you generally do run it on a cloud.  It's cheaper to start up that way.  And you can scale it up as needed and so forth.



STEVE:  Yeah, and for most people's servers, I think that's a perfectly acceptable solution.



LEO:  Oh, yeah.  Oh, yeah.



STEVE:  You just sort of create the service, and then you upload the content, and now you've got a site.



LEO:  Most people don't need dedicated servers.  They certainly don't need a colo.



STEVE:  Right.  But that's nothing like what GRC is doing, where I'm doing low-level network packet...



LEO:  Well, Steve's his own sysadmin.  I used to be my own sysadmin.  And I have - it's been a lot of trouble.  But I did it because I wanted to learn.  And I did.  I learned how to use cPanel and all that stuff.  I did a great job.  I see you looking at the clock.  Don't worry about that.  Let's continue on.



Brent in Illinois has a question, as long as we're talking about your servers:  I thought I heard you mention sometime back you were using one of the BSDs - OpenBSD, FreeBSD, NetBSD, one of those.  Recently I heard about your server upgrade.  You said you went from Windows 2000 to Windows 2008 R2.  So what do you use?



STEVE:  Both.  This is an instance of the proper tool for the proper purpose.  I am a FreeBSD person.  I was turned on to FreeBSD by Brett Glass, who I mentioned before.  Brett said this is the one you want, and I think Brett was right.  I love FreeBSD.  I've got a FreeBSD server running at Level 3, also one here.  At Level 3 it is my OpenVPN terminus.  So I run OpenVPN on that box.  But also I run INN, the traditional NNTP, the Network News server which hosts GRC's newsgroups.



LEO:  I didn't know you were running that on NNTP.  That's hysterical.



STEVE:  Oh, yeah.



LEO:  You are very old school.



STEVE:  Yeah, we've got a very active, super useful group of gurus who hang out there.  It's news.grc.com is the machine.  And so that's a FreeBSD box.  So I use the appropriate one for the appropriate application.



LEO:  It's UNIX.  It's strong.



STEVE:  But I don't code to it as much because I'm a Windows developer.  So I'm comfortable over on Windows.



LEO:  Scott Elsdon in New Zealand wants more of the missing bits, he says:  Steve, I really enjoy the chatter between you and Leo.  And while Security Now! is essential, I heard in it that you talk to Leo before the show for half an hour about sci-fi, books, TV shows and coffee.  These I miss.  I'm in New Zealand.  Listening in to the pre-show is hard because of the time difference.  I guess it's real early in the morning when we do the show.  I've missed these recently in the main show.  Is there any chance that the half-hour could be distributed also, as a chat show, or Steve and Leo's missives?  Missing some good sci-fi recommendations, et cetera, I'm sure.  Plowing through "The Second Ship" now because of your mention and love it.  You know, we...



STEVE:  So, Leo, you mentioned that one of your streaming carriers...



LEO:  Justin.tv.



STEVE:  That's the one.



LEO:  Yeah.



STEVE:  Records everything.



LEO:  Yeah.  So it records it in chunks.  So you can go to a specific time, and you can watch - they archive it, and you can watch again, as if we were offering it.  We don't - there's no reason really to offer it because it's hit or miss.  Sometimes it's got great stuff in it.  A lot of times, like today, it didn't have a whole lot in it.



STEVE:  Eh, not so much.  So you go to Justin.tv and, for example, look at the 11:00 a.m. Pacific time.  And there you would see about a half an hour, typically, of us adjusting ourselves and getting ready and talking about whatever.  Knowing, frankly, that it's a little - we're less formal because we're not in the official podcast at that point.



LEO:  Well, and it's - my goal, and I'm not making a secret of it, is I really like having all of that stuff because I want people to watch live.  I want people to kind of get conditioned to watching what we do live.  And so I'm not averse to having some content that isn't available for download.  We make the shows proper available for download.  But I think that my goal is that you watch everything, not just the shows, but the making of.  You're watching the making of, really.  So if you like watching Steve adjust himself, you can do that.  Justin.tv/twit/videos.  People make highlights, which is kind of cool.



But you can see all - you can see past broadcasts, and you can see highlights.  I'll get emails all the time, people say I highlighted this portion of it or that portion of it.  In fact, if that's something you would like to do, you could make a highlight, Scott, that says this is the pre-show, the Security Now! pre-show, and make that be a highlight.  It's easy to do.  It's just basically doing the time codes.  And then others could see it, as well.  Somebody may already be doing that.  So that's the best way to do that.  I can't make a show out of everything. And I do appreciate the time difference.  I understand that.  We're kind of set up to be in the afternoon in the U.S., for the most part, and early evening.



STEVE:  So Leo, this next question is our last one because I also have a rock underneath my right contact lens.



LEO:  Oh.  I, oh, heavens.  Heaven forfend.  Well, let's quickly get Rob Altenburg - is that the one you'd like me to do, about bitcoin taxation?



STEVE:  Yes, yes.



LEO:  He's an attorney in Pennsylvania.  Now that the Treasury Department has given bitcoin a stamp of approval, the next big think is, well, what's the IRS think?  In the U.S., "any accession to wealth," that's the term of art, is considered in calculating income tax unless it falls under an exception.  Wealth earned from bitcoin mining or speculation should be taxed.  The big question is how, and when.  The rules depend on what bitcoins are considered.  If the IRS thinks it's a foreign currency, one set of rules might prevail.  If it's more like gold, commodities, or stock certificates, other rules might apply.  Also, it's not just bitcoins.  These questions apply to in-game currency on MMOs, too.  Why should we say money from real world work is taxable but money from in-game work isn't?  He says:  I'm a lawyer, but not a tax lawyer.  By the way, that's why people like Bitcoin, because it's anonymous.



STEVE:  Well, at the moment it's off the radar.  And, like, for example, purchasing on the Internet used to be nontaxable.  Amazon famously began taxing.  And it wasn't that it was always tax-free.  It was that consumers were responsible for reporting their purchases and taxing themselves.  And of course few people were doing that.  So Amazon said, okay, well, we're going to take responsibility for that.  I mean, and this brings up an interesting point, I thought.  I got famously those 50 bitcoin which, depending upon when you check, are worth maybe $12,000.  Well, where did that come from?  I mean, is it free money?



LEO:  It's taxable, I can promise you.



STEVE:  [Laughing]



LEO:  When in doubt.  They want their cut.



STEVE:  There is no doubt.  Now, I have held it for more than a year, so maybe that means it's a long-term capital gain.



LEO:  I don't think it's taxable probably until you turn it into greenbacks.



STEVE:  Oh, I hope not because otherwise - Leo, I formatted my hard drive.  It was the saddest event, you know.



LEO:  Gone.  Yeah, you might have made a mistake talking a lot about your Wallet.  But otherwise they'd have no way of knowing; right?  I mean, it's just a number.  You're a number, not a man.



STEVE:  Men, men, men.  So maybe they'll just do a hands-off.  But I don't think so.  I think, ultimately, I think we're going to see legislation.  Mark my words, my friend, it's going to be legislated.  That's the way our government is going to get around to dealing with this because...



LEO:  It's such, you know what, it's such a tiny amount at this point that I don't think there's going to be...



STEVE:  I hope not.



LEO:  You've got years before this gets on everybody's radar.



STEVE:  Don't wreck our fun.  Don't wreck our fun, government.



LEO:  Steve, they just figured out the Internet exists.  It's going to be a while.



STEVE:  Yeah.



LEO:  And you can pay them in bitcoin, see how they take that.  Wouldn't that be interesting.  Pay your tax in bitcoin.



STEVE:  Oh, good point.



LEO:  Right?



STEVE:  I made it in bitcoin.  You can have it in bitcoin.  Here's a code.  Here's my QR code, IRS annoying person.



LEO:  Right.



STEVE:  There you go.



LEO:  Well, so somebody's saying when it's converted to greenbacks.  But remember, if bitcoin is considered just like a foreign currency, there are tax rules.  If you make - when I make Canadian dollars, I don't have to convert them to U.S. dollars before they're taxable.  Oh, no, my friend.  They want their share.  They want their share.



STEVE:  And it's not really work product, either, because I know, for example, from my experience with community property, having been married, that the work product of each person in the marriage inures to the benefit of that communal entity.



LEO:  Well, but so does money made from investments and so forth.  So I think that that counts.



STEVE:  But not inheritance.  Inheritance you didn't work to get, so that's actually sole and separate.



LEO:  Ah, interesting.  That's yours.  Hey, I want to thank Mark Class for sending us more...



STEVE:  Or it's at least less hers.



LEO:  These are our - yeah, right [chuckling].  These are our...



STEVE:  Oh, now I'm in trouble.



LEO:  We've got our new 8-bit TWiT pens.  They come in four colors.  And...



STEVE:  What?  What?



LEO:  He sent this.



STEVE:  Oh, you're not kidding.



LEO:  No.  This is Mark Class makes these.  He's a - what is the name of his company?  I have it here somewhere.  Worldwide Pens.  Three colors.  Oh, and a stylus.  One of them's not a color at all but just a stylus for your tablet.



STEVE:  Leo, you have binary combination.  Three colors gives you eight.



LEO:  Uh-huh.  There you go, because I can color over.  And these little TWiT Wipes.  If you come to the TWiT Brick House, we don't send them out.  You have to come here and visit.  But visitors, thanks to Mark Class of Worldwide Pens...



STEVE:  You have TWiT Wipes?  I don't think I want to know about that.



LEO:  No, these are good.  They're microfiber lens cloths.



STEVE:  Goes with the Man Pack.



LEO:  Yes.  I'll put one in a pocket right here.  Steve Gibson joins us each and every week, Wednesdays, 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 1800 UTC.  I'm sorry, 1900 UTC now, thanks to the time change, at TWiT.tv.  Do watch live.  We'd love it if you watch live.  And that's how you catch the before and after.  But if you can't, we do make on-demand versions of the show available, of all our shows, audio and video.  In this case, TWiT.tv/sn.  And Steve has the special edition Security Now!, the 16Kb audio for the bandwidth-impaired and the beautifully handwritten transcriptions by Elaine Farris that are so perfectly spelled and annotated.



STEVE:  And speaking of Elaine, it is her birthday today.



LEO:  Happy birthday, Elaine.



STEVE:  Happy birthday.  And the transcript, she warned me, since she's got family descending on her, may be a day late.  But they will never be a dollar short.  So not a problem.  Happy birthday, Elaine.  Enjoy your birthday.  [Thanks, guys.  Elaine]  You're probably exhausted now that you've gotten to the end of this podcast.



LEO:  She didn't hear our greetings till she was finished typing.  You can stop now, Elaine.  You can all stop watching, ladies and gentlemen.  Although This Week in Google's next.  And you know who's going to be on Triangulation this afternoon?  Brewster Kahle, I know you know that name, of the Internet Archive.  He created a company called WAIS, a database company which he sold for some money to AOL some years ago and decided to devote his life to philanthropy.  He created the Internet Archive to archive all of the Internet some years ago.  They save terabytes every - I think every month.  Maybe even every day.



STEVE:  That's amazing.



LEO:  Isn't it incredible?  And it's such a great idea.



STEVE:  Oh, and I'll tell you, it's very embarrassing, Leo.



LEO:  Wayback.org if you want to see how Steve's site used to look.



STEVE:  Oh, my god, don't go.



LEO:  The Wayback Machine is a...



STEVE:  Do not.  Do not look.



LEO:  ...feature of the Internet Archive.  Everything lives forever, Steve.  Just remember that.



STEVE:  Oh, I'm so sorry.



LEO:  Yeah, yeah.  Hey, yeah, Archives.org, not Wayback.org.  Thank you so much, Steve Gibson.  We will see you next time on Security Now!.



STEVE:  Thanks, Leo.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.










GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#400	

DATE:		April 17, 2013

TITLE:		VPN Solutions

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-400.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with a wild week of security events, we revisit a topic from the earliest episodes of the Security Now podcast:  Virtual Private Networks.  This coincides with the introduction of a new sponsor on the TWIT network, proXPN, a VPN provider that truly looks like the right choice.



SHOW TEASE:  It's time for Security Now!, our 400th episode.  Let's celebrate with Steve, talk about Java - yes, there's another update - talk about security and a little intro to VPN systems.  It's all coming up next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 400, recorded April 17th, 2013:  VPN Solutions.



It's time for Security Now!, the show that protects you, your loved ones, and your privacy online.  And it's all thanks to this man here, the Explainer in Chief, Steve Gibson of GRC.com.  Steve joins us every week.  Hi, Steve.



STEVE GIBSON:  Hey, Leo.  Great to be with you again, as always, for the Big 400 episode.



LEO:  What?



STEVE:  Yeah.  400 weeks we've been doing this.



LEO:  Celebrate good times.  I think I'm going to light up a cigar.



STEVE:  And you've been here for most of those, yeah.



LEO:  But by the way, if you're listening, John, I mean Paul, Paul Mentocides [sp] or Mintisitis [sp], who sent me this contraband, I am very happy.  I'm a happy, happy man.



STEVE:  Cuban contraband.



LEO:  Cohiba Behike from Havana.  Wow.  "Cohiba Behike es la mxima expresin en sabor y aromas del Habano."  It smells like Havana, is what they just said.  So that's good.  And also did you know, Steve, that not only is this the 400th episode, but it is also the eighth anniversary of the launch of the TWiT Network.



STEVE:  No kidding.



LEO:  April 17, 2005, our very first TWiT episode aired.



STEVE:  Wow.



LEO:  The one that I recorded at the bar at the 21st Amendment Brew Pub.



STEVE:  I remember that, yes.



LEO:  Yeah, with Kevin and Patrick and Prager and Patrick's wife.  And that was the first TWiT, TWiT 0.  We actually didn't even have a name for it at the time.  We called it The Revenge of the Screen Savers, I think.  So Dane Atkinson's here, who is a wonderful friend of the show.  He used to be at Squarespace.  He has a new company which is going to be advertising soon called SumAll.  And he brought me a lovely Pauillac.  Actually he brought us a couple of Bordeaux and, wow.  You like - I know you're a burgundy fan, Cabernet fan.



STEVE:  Yup.



LEO:  But you must like Bordeaux.



STEVE:  Yeah, yeah.



LEO:  They're maybe a little lighter than the big heavy reds you like.  But, boy, these are good.  And then also a Malbec, which I'm sure you like Malbecs.



STEVE:  Yes, yes, yes.  I've heard John speak of that also.



LEO:  From Argentina, yeah.  So thank you, Dane.  Thank you, Paul, who sent me these cigars.  Didn't know it was going to be our fifth anniversary.  And congratulations to you for your 400th episode.  Wow.  Eighth anniversary.  Correct me, thank you.  Eighth anniversary.  Oh, wow.



STEVE:  Yeah.



LEO:  All of that.  Now, today what are we going to do?



STEVE:  I want to talk about, sort of revisit the question of virtual private networks.  VPNs was a topic that we covered extensively, speaking of nostalgia and the birth of TWiT things.  Episode #14, the 14th week we were doing this, the topic was Virtual Private Network Theory.  #15 was VPN Secure Tunneling Solutions.  Then we had our very first listener feedback episode ever on Episode #16.  And then I continued with Episode 17 was on - and we had fun with these acronyms.  I remember we were tripping our tongues with PPTP and L2TP and IPSec and so forth.  So that was Episode 17.  And then we introduced the world to Hamachi.



LEO:  Oh, yeah.



STEVE:  And actually, I mean, this was a huge deal.  Episode 18 was called Hamachi Rocks.  And I remember that Dave's wife was giving him a hard time.  Dave was the creator of Hamachi.  And she was like, okay, you rock.  And he's like, okay, well, yeah.  And then 19, Episode 19 was VPNs Three, where we talked about Hamachi, one that had surfaced called iPig, unfortunately named, and then OpenVPN.



And so I chose this week to sort of just take a snapshot of where we are.  There's been some - of course, I have mentioned my interest in developing something because I felt that there was a need, yet I was put off by this continual grumbling in law enforcement about their not being sure that they feel good about not being able to decrypt things on the Internet.



But this also connects with the TWiT Network having a new sponsor, which you'll be talking about in the middle of the show, a company called proXPN.  I've had a chance - I was told about a month ago that this was going to happen.  I told the guys in our newsgroup, the GRC newsgroups about it.  And they've all been playing and have nothing but good things to say.  I've had a chance to do some reconnaissance, and I'm very pleased that we have somebody, I mean, to me I think this is a perfect marriage of the show and a sponsorship, and one that, from everything I've seen, just looks like something we can, in fully good faith, recommend to our listeners.



LEO:  Good.



STEVE:  So I wanted to sort of, like, we haven't talked about VPNs almost at all since back then, episodes 14 through 18.  So I wanted to sort of do that.  There's been evolution in one important area, which is in the development of the flashable routers with DD-WRT and the Tomato firmware, both which support OpenVPN.  And this new sponsor of ours, proXPN, is an OpenVPN solution provider.  So it all really fits together synergistically.



LEO:  Good.  Good, good, good.



STEVE:  And of course this also ties in with the worry that people have had that their local networks may be spying on them.  Remember I introduced this notion of certificate fingerprints two weeks ago.  We're more than 40,000 people have availed themselves of that, more than 2,000 a day now, this new service at GRC.  And one way to thwart that kind of spying, if it's a concern, is - actually THE way to thwart it is with a VPN.  So everything kind of all comes together here.  So I'm really glad.  And of course we had a crazy week of news.



LEO:  So I noticed a Java update again.  What?



STEVE:  Well, yeah.  Now, remember the last...



LEO:  Is this their regular update?



STEVE:  Yeah, last week we told our listeners to expect something on Tuesday.  We had the standard second Tuesday of the month update from Microsoft.  And by the way, that was a catastrophe because it turns out that one of the patches was causing Blue Screens of Death for users of Windows 7 and some third-party software that was...



LEO:  I think Kaspersky, mostly Kaspersky; right?



STEVE:  Yeah, and there seemed to be some Brazilian connection, too.  I don't think it has anything to do with your cigars.  But it was, somehow it was reports from Brazil, for some reason.  So it was Kaspersky's A/V that was for some reason colliding.  But enough people had it that Microsoft removed the link and withdrew it in order to figure out what it was that was going on.  And so I can't really fault Microsoft, I mean, this is something it would have been better to know about before.  But interaction with a few vendors' software is, if the vendor software, like what Kaspersky's done with their A/V tool, is to be very intrusive, that is, like sink their hooks deep into the system in order to monitor things.  For example, this is just sort of tangential, but related, people were complaining that their SSL certificates were not matching when they were using Kaspersky's A/V.



It turns out Kaspersky installs a certificate authority and intercepts secure communications on the client machine.  So, I mean, it's doing that kind of traffic inspection on behalf of the user.  But that breaks SSL validation, which is really not good.  For example, you're no longer going to see any of your enhanced extended validation (EV) certificates.  Those all get lost because you've got - essentially you've stuck an HTTPS proxy in your computer.  So that's an example of how deeply this thing is sinking its hooks into people's computers.  And so you really can't fault Microsoft for doing something deeply which in some way is conflicting with some assumptions that third-party software made.  I would really blame it more on the third-party software not being compatible.



So anyway, they pulled that back and warned people to uninstall it if they hadn't - or not to install it if they hadn't installed it, but even to uninstall it if they had, just to be safe.  What I heard from many people was this didn't come out for a day or two afterwards; they had already installed the patch, being responsible patchers; and everything was fine.  So for those where it didn't cause a problem, it's probably not going to cause a problem.  But it certainly was a surprise for some people.



But what happened with Java was big news.  And last week we said expect an update from Oracle on Tuesday, which was yesterday, April 16th.  My favorite headline I termed the Oxymoronic Headline of the Week.  And this was the Reuters coverage of this, Reuters news service.  They said, and I love this:  "Oracle fixes 42 holes in Java to revive security confidence."  It's like, what?



LEO:  Hi, I feel better.  32?



STEVE:  Yeah.  42.



LEO:  42?



STEVE:  42 holes, yes.  And then it gets worse because...



LEO:  How could it get worse?



STEVE:  The executive vice president, Hazan Rizvi, he was quoted in this article saying, "The patch fixes 42 vulnerabilities within Java, including 'the vast majority,'" which is to say not all, "'the vast majority' of those that have been rated as the most critical."



LEO:  Why, almost all of them.



STEVE:  Yeah.  He says the company specifically states that the 39 called-out bugs "may be exploited over a network without the need for a username and password."  And then, unfortunately, he says, "Although not all known problems are being fixed with the current patch" of 42, "there are no unpatched problems that are being actively exploited."



LEO:  Well.



STEVE:  So there are unpatched problems.  There are problems we know about, but no one's gotten around to exploiting them yet.  So we've fixed the 42, 39 of which were being remotely exploited and required no username and password.  So all of this is a nightmare except that they finally made a change proactively.



Now, some time ago they added a checkbox in the Java security settings panel that people could uncheck to disable Java in the browser.  And so that was a good move.  What they've done now is they have added checking for signed Java applets, which is a really nice move forward.  Now, you could argue, and I'm sure people will, that it's not difficult to sign a Java applet.  However, to have a correctly signed applet, it's very much like having a correct security certificate on a website.  That is, you need a certificate authority, like a VeriSign or a DigiCert, one of those guys, or unfortunately the Hong Kong Post Office.  But somebody that your browser knows and trusts signs the certificate, which is then used to digitally sign the Java applet.



So this is very much like drivers now in Windows need to be digitally signed.  You just can't have a random driver that Windows will install.  We've said no more, that there's too much exploitation of that going on.  That's not okay anymore.  So finally, Oracle has added the same technology, very much like what Microsoft calls Authenticode.  The apps that I have been publishing recently are all Authenticode-signed, just because it's the right thing to do.  You want people to be able to verify - essentially the operating system is able to verify the identify of the signer.



Now, there are different levels of signing.  That is, you could have a self-signed certificate rather than a CA, a certificate authority-signed certificate.  So you'll get a dialogue box.  There's a number of different dialogue boxes that Oracle pops up, depending upon sort of the degree of trust that it's able to ascertain the applet has.  So you can force it past an unsigned applet.  But you get now a new dialogue, and that's the key.  You actually get a pop-up presentation from Java itself saying this is what we know about the applet you are trying to run.



Now, that's huge because it used to be, I mean, it was day before yesterday, 39 different problems in Java could be exploited with no user intervention, making them critical.  So no user intervention is gone because of this change that Oracle has finally made to Java.  So this is really, really big.  In fact, Kaspersky looked at the statistics and said that Java was the vehicle for 50 percent of all cyberattacks last year in which hackers broke into computers by exploiting software bugs.  And that 50 percent was followed by Adobe Reader, which was involved in 28 percent of these incidents.  And then Kaspersky says, to give us some more perspective, Microsoft Windows and IE were involved in about 3 percent.  So that really shows you how this terrain has shifted.  Four years ago, it was all IE.  I mean, IE...



LEO:  That's a huge difference.  It's amazing.



STEVE:  It is, yes.



LEO:  Four percent?



STEVE:  Yeah, three.  Remember?  And so there's been a dramatic change as the browser has really been made vastly more secure.  I mean, it takes Microsoft a long time to get there, but they did.  And we could argue, too, it's taken Oracle a long time to get here.  But they've made a big change.



So one thing that our listeners can do, I have an unsigned Java applet.  It's safe.  It's benign.  It's my Big Number Calculator that I put up on GRC.  It's under the Other menu in GRC's main menu, Other and then Big Number Calculator.  I use it because I want to know the exact number that 2^128 is for cipher stuff and crypto things.  It's very handy for calculating ridiculously large numbers.  It just makes my little HP calculator smoke.



LEO:  But it's written in Java.



STEVE:  It's written in Java.  So it is cross-platform, cross-browser, which is the reason anyone writes in Java is to have cross-platform compatibility.  The point is that it is a perfect example of an unsigned applet.  So you can go to GRC's, under the Other menu, Big Number Calculator, and see what happens after you update Java.  And you can see it will invoke this dialogue saying, whoa, hold on, wait a second, this applet that you're wanting to run is not trusted.  Now...



LEO:  Of course I don't have Java installed.  So I just get "missing plugin."



STEVE:  I was just going to say, I tried all of this yesterday, and I got what you really want to get, which is there's no plugin available to do anything with what it is you're trying to do.  That's really...



LEO:  That's even safer.



STEVE:  That's really what you want.  So actually I had to - because Safari also updated, 6.0.4.  We'll talk about that in a second.  But so in order to experience that, I was forced to install Java on a MacBook and update Safari because I wanted to see what Apple had also done, which was coincident with this.  And so but I started off the same way, Leo.  Oh, this requires a plugin that you don't have in order to go.  It's like, yes, that's really the result that you want.



So anyway, this will end up being huge.  It is the fact that browsers would silently invoke Java behind users' backs that was the problem.  And Oracle kept having that checkbox on for the browser plugin by default.  And when you install Java, it installs the plugin.  So we were just going around in circles.



Now, it is still a problem that there is a lot of old Java.  Remember that we showed last week that pie chart which was really disturbing...



LEO:  No kidding, yeah.



STEVE:  ...with how much old Java there still is.  And the old Java had no auto-update facility.  So the old Java is staying old, and it is staying in people's browsers who don't know any better.  And so this 50 percent isn't going to go down to 3, like IE has, anytime soon.  There just isn't a way to get those old ones fixed.  I mean, the only thing you could do would be to have a site that used Java to fix old Java.  But then people would have to go there to get fixed.  And they're not going to a fix-it site.



So, I mean, there just isn't - I don't know how you do this except to, as I have said, for browsers to take responsibility.  But they're also using old browsers.  So these are just systems that are never being updated.  They're old, and they're just going to be a problem until they collapse of their own age, I suppose.



LEO:  Sigh.  Hey, can I ask you a security - oh, go ahead, finish.  Then I'm going to ask you, when it's appropriate, a security question.



STEVE:  Oh.



LEO:  Yeah.



STEVE:  Well, this is the right podcast for that.



LEO:  You're the right guy; right?



STEVE:  So Apple also updated Safari and did something wonderful.  They gave us sort of the equivalent of NoScript's per-site blocking of Java - now, this is not JavaScript - Java natively in Safari.  So Safari now has a site-by-site permission Java applet execution facility.  When you do something with Java, and again you can use GRC's site as an example, as a test bed, you're able to - it brings up a dialogue, that is, Safari itself does, saying hi there.  You wanted to run Java.  Okay.  Here's what we know about it.  And do you want to run it this time only?  And there's checkboxes for don't ever bother me on this site again.



So this allows corporate users, who have to have Java enabled, and assuming they're also Mac corporate users using Safari, to permit Java on their own corporate Intranets, where it's arguably safe, but not on the wider Intra- Internet, sorry, Internet, external WAN, Internet, where they then have the option, if they encounter Java, to do something.



So this, again, this is a big step forward for locking this stuff down.  I think everyone has been trying to avoid involving the user and more pop-ups and more dialogues.  We know it's not a perfect solution.  We know that unaware users are going to go, oh, fine, click, okay, okay, I just want - I want to get the page I'm trying to get to.  Okay, okay, okay, okay, whatever it takes to just push through those pop-ups.  But it is a worthwhile barrier for us to erect.



So it's good that this is finally happening.  Like, my hat's off to Oracle.  They're under tremendous pressure to fix this because it's significant.  If you're the producer of software which was responsible for half of all exploits on systems globally, that's not good.  And again, unfortunately, they're never going to be able to fix a lot of those because they're never going to get updated.  But it's an improvement.  Now, you had a question, Leo?



LEO:  Yeah.  Well, just, you know, I got this new phone, I was showing you before the show began, from AT&T.  And I noted they did something which I thought was kind of odd.  There's a sticker on the back that has the IMEI, the serial number and the SKU and so forth.  Is that in any way a security flaw, to have on the back of the phone the IMEI publicly readable?  That's the identifier that goes to the phone.



STEVE:  I don't think so because you can always get that from inside the phone, too, poking around.



LEO:  I should just take the sticker off, maybe.



STEVE:  Yeah, yeah, I would say.



LEO:  It's because on most phones you take out the battery, and it's under the battery.  But you can't do that on this HTC one.  So I guess they put it right on the - but I don't - it shouldn't be in - but a bad guy having the IMEI doesn't mean anything; right?



STEVE:  And it's not clear - I guess the only time you need it is when you're initially setting up a subscription service, where the vendor, whoever it is, AT&T, T-Mobile, whomever, needs it in order to synchronize things.



LEO:  I'm going to take it off.  It's ugly.



STEVE:  I would remove it.  And I'm sure that it's available inside by browsing through properties of...



LEO:  Oh, I'm sure it is, yeah.





STEVE:  Of the phone properties, yeah.



LEO:  All right.  I'll just take it off.  Thank you.  It's nice to have your own personal security expert just...



STEVE:  Get rid of it.



LEO:  ...waiting in the wings.



STEVE:  Well, so also in the news is an interesting new botnet which has been attacking WordPress blogs.  It turns out that...



LEO:  Lots of them.



STEVE:  Yes.  Well, 90,000 websites at this point are estimated to have been taken over.  And the number is as big as it is because it is wormlike.  That is to say that, once a WordPress blog is compromised, it begins performing outbound scanning, looking for other WordPress blogs to compromise.  Thus, a worm.  That's what a worm is.  So there is a 90,000-website-strong botnet which has been built simply by carrying around the thousand most common passwords.  And it tries to log on, when it finds a WordPress blog on the Internet, it starts using those passwords to try to log in.  And unfortunately, enough people are using "monkey" as their password...



LEO:  Hey.  You just gave mine away.  That's not nice.



STEVE:  Or "password," or "9999999" or "admin" or whatever, that it's just not difficult to get in.  So, I mean, evidenced by this because to do a brute-force, across-the-Internet login, I mean, what - the first thing that I'm noting is, wait a minute, no lockout?  So they can - you can log in, you can attempt to log in a thousand times to the WordPress administration panel?



LEO:  Yeah, yeah.



STEVE:  And it doesn't ever say, uh, stop it?



LEO:  No.  Well, they've updated their authentication, but the older WordPress is - yeah.



STEVE:  Well, good.  So it's good that they did.  Anyone running a WordPress blog, it's funny because I was also doing some research when I was poking around seeing what had been written about this.  Brian has his blog hosted by WordPress.  And he said, you know, Word Press blogs just like this one.  We know, however, that Brian Krebs has a bizarro password that no one is going to...



LEO:  One would think he'd change, not only the password, but the login.



STEVE:  Yes.



LEO:  I mean, you leave it as "admin," you're just making it possible for people to bang on it.



STEVE:  But Leo, it's nice to be able to remember it.



LEO:  I changed mine.  Don't bang on my blog.  It's already changed.



STEVE:  What's my username?



LEO:  Yeah.



STEVE:  Okay, now, when this news broke, this next item, it generated massive traffic.  And it may not have been true as it was written.  And of course The Register carried it, so - and they never updated their story with the, well, maybe we were wrong about this.  The story was that at the Hack in the Box security summit recently - this is like late last week in Amsterdam - a security researcher, Hugo Teso, who's with the company N.Runs, and he's also a commercial airline pilot, he spent three years buying used commercial-grade airplane equipment off of eBay and using flight management software, simulation software, on his PC, which is said to involve, to reuse the same code as the cockpit instrumentation hardware.  And he ended up developing two tools.  He dubbed it SIMON, S-I-M-O-N, and that may be an acronym for something, but I didn't run across that.  But it runs on Android in his app called PlaneSploit.  And he demonstrated taking over full control of the in-flight flight systems and pilots' displays.



LEO:  That doesn't seem like a good thing.



STEVE:  No, no.



LEO:  Holy cow.



STEVE:  It even said, "The hacked aircraft," I mean, we're talking about a Boeing something or other.  I mean, "The hacked aircraft could even be controlled using a smartphone's accelerometer to vary its course and speed by  moving the handset around" in the air.  So not only can you...



LEO:  That's like an RC plane.



STEVE:  I was just going to say, not only can you control your quadrocopter four-propeller floating platform, but you can also control the Boeing 707 that you're riding in at the time.



LEO:  Wow.



STEVE:  So the story goes that he looked at - Teso's presentation says he looked at what's called the Automatic Dependent Surveillance-Broadcast - which is ADS-B, Automatic Dependent Surveillance-Broadcast - system that updates ground controllers on an aircraft's position over a 1Mb per second data link.  This has no security at all, he found, and could be used to at least passively eavesdrop on an aircraft's communications and also actively interrupt broadcasts, or feed misinformation.



He says also vulnerable is the Aircraft Communications Addressing and Reporting System, which is the acronym we've seen before, ACARS, A-C-A-R-S, the communication relay used between pilots and ground controllers.  Using a Samsung Galaxy handset, he demonstrated how to use ACARS to redirect an aircraft's navigation systems to different map coordinates.  And he said, "ACARS has no security at all.  The airplane has no means of knowing if the messages it receives are valid or not.  So they accept them, and you can use them to upload data to the airplane that triggers these vulnerabilities.  And then it's game over."



The story says that Teso was also able to use flaws in ACARS to insert code into a virtual aircraft's flight management system.  By running the code between the aircraft's computer unit and the pilot's display, he was able to take control of what the air crew would be seeing in the cockpit and change the direction, altitude, and speed of the compromised craft.



So after all of that, I mean, this came out with huge news coverage.  It's like, oh, my god.  So then EASA, E-A-S-A, which is the European Aviation Safety Administration, and the U.S. FAA, the Federal Aviation Administration, both said that this was done using simulation software, which is the case.  And they all deny that this would work on real aircraft.  And their official statements read like total butt-covering mumbo jumbo.  I mean, when you read what they wrote, it's like, okay.  Because they're all now actively working with Teso and his N.Runs security firm to understand what he did and whether in fact they are, or not, vulnerable.  But it wouldn't be at all surprising to me, unfortunately, if what we're dealing with are pre-security-conscious protocols that were designed 20 years ago, and we're still using them, and we have never retrofitted them because nobody wants to do what they don't have to do.



And so my own take, looking at all the news, is that he found something, and that they're running around frantic.  They're denying it because they have to, officially.  Oh, and by the way, he deliberately did not disclose all of the details.  He demonstrated what he had done and what he could.  But being a responsible researcher, he didn't publish the source code for everyone to go and see if they can load PlaneSploit into their own Samsung Galaxy phones and, you know, because they're not happy about the airport they're going to be landing at.



LEO:  Hey, let's go somewhere else.  What do you say?



STEVE:  Yeah.  Looks like bad traffic on the freeway outside of that airport.



LEO:  Wow.  Wow.



STEVE:  Yeah.  So I wouldn't be surprised if there is crappy security on this stuff because, unless you have to do it, we've had these systems now, these avionics systems, for decades.  And why would they have bothered?  You have to upgrade everything, Leo, and isn't that a problem?  Because, you know, it costs money.



LEO:  Right.



STEVE:  And you won't do it unless you have to.  One of the things that has arisen from my talking about SSL Labs, which is that company that I've mentioned that allows you to check the security being offered by many websites, is I've had a lot of feedback from people saying, oh, my god, I can't believe how insecure my bank is.  So again, unless people are forced to fix these things, they don't fix them.  And look, how many stories have we covered that have exactly that as the key, I mean, as the underlying problem, is that, oh, well, yeah, it wasn't patched.  Oh, okay, well, or it used weak security, so they were able to get in.  Right.



And I just wanted to give a tip of the hat to a browser we rarely talk about, and it's unfortunate, and that's Opera.  Opera's been around for years.  We've talked about Opera Mini a couple times in various contexts.  But I had an occasion to be using it because I've been doing a lot of work with certificate stuff recently.  And in fact I have a whole new breakthrough in verifying server certificate technology, like sort of a next generation beyond the fingerprints concept, which is in response to confusion that the fingerprinting was caused by servers like Google and Amazon, where they've got their huge global networks and don't always return the same certificate.



So I've removed Amazon, for example, from my list of default servers that we generate fingerprints for and expanded a section at the bottom of the page explaining why you could get false positive mismatches.  But in the meantime I have completely solved that problem.  So I'll have something new soon.



But in the process I needed - we were looking at public keys that certificates used.  Firefox shows theirs.  But IE showed a different one.  And the problem is that Chrome reuses Internet Explorer's certificate management, so it was also showing something different than Firefox.  And I was trying to filter through the noise, figure out what was going on.  And I thought, well, I wonder about Opera.  So I fired up Opera, that had been languishing for years.  And it's very nice.  And in fact, I wrote the numbers down.



LEO:  [Chuckling]



STEVE:  I don't have them in front of me.  But Chrome now takes about 250MB.  When I launch Chrome with, like, just www.google.com as one tab, I watch memory drop by 250MB.  It has become a bloated pig.  It is ridiculous.  A quarter gig of RAM for a browser to show me a page with nothing on it?  That's obscene.  And by comparison, Opera is 50, so one fifth the RAM consumption of Chrome.  Chrome, I mean, I love Chrome.  I know you do, Leo.  I'm still using Firefox.  And because we watch Firefox so closely, we watch them fight memory consumption.  I mean, it's so easy for these things just to grow and grow and grow as they add technology.  And it's difficult to keep that footprint down.



Yet here's Opera, very quiet, in the background, and actually more secure than any of the others.  I think I probably need to explain that in a future podcast.  But as I've been learning in the last couple weeks, Opera had been taking proactive measures that nobody else has been taking.  For example, we talked about the problem with the 40-bit encryption, and why we were - web servers have moved 40-bit encryption to the top of the list because the cipher block chaining has been found to be susceptible to the so-called BEAST attack, B-E-A-S-T.



But the problem with 40-bit encryption was, as we covered not long ago, that it uses a stream cipher, which is why it's not subject to the BEAST attack.  But the problem is that it uses the RC4 cipher that now had been further statistically analyzed.  And remember that there was a chance, if you somehow could induce your browser to, like, be doing something in the background with a tab you weren't looking at, generating a lot of traffic, it would be possible to decrypt the beginning of the browser headers, which contains the session cookie, and that would allow a hijacking attack.



Well, Opera fixed this a long time ago.  They proactively generate, they deliberately don't allow their browser to produce the same content at the front of each query.  So it's been immune to this forever.  Nobody really knows about it.  I had to go digging around.  It's like, what?  Wow, that's very impressive.  So anyway, I'm impressed with it.  And, boy, it's really nice to have it launch so quickly and not chew up a quarter gig of RAM just showing one page.



LEO:  Now, one thing that's interesting.  They have announced, I don't think it's happened yet, that they're moving to WebKit.  They're going to use a different engine on Opera.  I don't think they're doing that yet, though.  It's the same engine that Chrome is based on.  So all of your love may be...



STEVE:  Well, and that actually - yeah, we'll see what happens with that, you're right.



LEO:  Doesn't mean it'll be bloated because Chrome does other stuff.



STEVE:  It probably demonstrates how difficult it is to maintain a completely separate, state-of-the-art web page rendering facility.  I mean, this is hard.  I mean, it is - look, I mean, basically we're moving the OS into our browser.  We're giving, with the advent of HTML5, incredible levels of capabilities in our browser.  And, for example, the need for plugins is arguably going away.  JavaScript is becoming a very fast execution environment.  We no longer need Flash in order to play movies.  Now browsers can render video and audio files natively.  And on and on and on.  And really nice animation stuff, like I created early last year in JavaScript.



And this is a perfect segue into something where I just kind of winced.  The news was Adobe says it will contribute to Google's Blink browser engine.  And I just thought, oh, please don't.



LEO:  Don't contribute.  No, thank you.  Thank you, Adobe.  No, thank you.  I'm going to bring you one of my famous squirrel pies.  No, thank you.  We've made these for years, they're well beloved.  You know, Chrome does have Flash built in.  That's one of the things which I suspect adds to the bloat that Google does.



STEVE:  Well, and in fairness to Adobe, they have been participating in WebKit development, and they've been a useful contributor...



LEO:  I'm sure they'll be fine.



STEVE:  ...to the project.  So, yeah.



LEO:  So this Adobe Blink, the fork that Adobe's doing, I'm told by the chatroom Opera is also adopting.



STEVE:  You mean Google Blink.



LEO:  Google.



STEVE:  Yes.



LEO:  And so this is - so Adobe will help with Google Blink, and apparently Opera's going to use Blink.



STEVE:  I think it must have been Opera.  I remembered that there was another browser that said we're going to follow Blink also.  So that would make sense.  It'll be interesting to see what happens when Opera adopts Blink, how that changes everything I just said about Opera, to make it more Chrome-like.



LEO:  One of the things about Blink, and one of the reasons Google says they went to Blink, is because WebKit has support for all sorts of stuff that you don't need to support - different hardware platforms, different processors - because it's an open source project.  And they can eliminate...



STEVE:  Ah, so they'll be able to - they'd pare it down.



LEO:  They said something like 15 million lines of code.  So it might actually help your bloat.



STEVE:  Yay.  That would be really good.  It's just, boy, it's gotten big.  Just as we were talking last week, we were discussing the collapse that was occurring as we were talking in bitcoin value.



LEO:  [Whistling] Plummet.



STEVE:  It was at $90 this morning when I checked in order to update my notes.  I tweeted a really nice article.  Gizmodo produced a terrifically accurate, which I don't often say because, I mean, it's difficult to be terrifically accurate.  This was.  And this is Gizmodo.com.  You might want to bring the page up, Leo.



LEO:  Sure.



STEVE:  Gizmodo.com/5994446.  And to any listeners - so it's Gizmodo.com/5994446.



LEO:  All right.



STEVE:  It's just a nice page that explains what's happened in hardware.  And tons, well, not tons, but seven or eight really nice pictures of crazy mining farms.  Like the top of the - the image at the top of the page, you can click on that in order to get an enlargement.  And it shows, I don't know, I didn't count them, but this vast array of little things, little boards, all cabled into some bizarre KVM octopod, I mean, like a hundred or so individually little things, all cranking away, trying to solve hashes.  So I wanted to recommend this article in Gizmodo, Gizmodo.com/5994446.  It's a great piece.



And shortly after we were talking about this, Leo, Mt. Gox shut down bitcoin trading for 12 hours, just in order to, like, stop...



LEO:  Didn't they have a security issue?  Wasn't that what prompted the plummet?



STEVE:  No, in this, I mean, they have had some, but in this case it was following the value collapse in bitcoin.  They just said, okay, wait, we're going to stop here.



LEO:  Like the market does.  They just put a halt.



STEVE:  Yes, exactly.



LEO:  A halt on trading.



STEVE:  And Mt. Gox is - 70 percent of all trades go through them.  So, I mean, they're the big guy right now.



This is my last mention of my weekly mentioning of the SmushBox, which both you and I are Smooshed or Smushed or...



LEO:  They're oversubscribed.  They've done very well.



STEVE:  By more than 50 percent, yes.



LEO:  Yay.



STEVE:  When I looked, they had $33,000.  They were looking for 20.  And we've got only, what, 46 or 45 hours left, so just shy of two days left, then this shuts down.  I'm almost wanting another one for home.  And I definitely will have one at the GRC servers I'll have to do all kinds of fun things with.  But since I know Mark, I'm sure I can get another one, so that'll work.  But anyway, they are oversubscribed by more than half.  And we're all going to get Smush Boxes, whether we like what they're called or not.  You can call yours anything you want.



LEO:  Smoesh.  Smoesh Box.



STEVE:  This is the best thing.  This is just funny.  This is wonderful.  The acronym is, and you might want to bring it up, the URL that you can see right there in my show notes, Leo.  The acronym is Completely Ridiculous And Phony CAPTCHA that Hassles for Amusement:  C-R-A-P-C-H-A.  In other words, CRAPCHA.  So Crapcha.com presents you with some really pretty funny CAPTCHAs.  And for all of us who have been faced with these things, where we're looking at it going, okay, you know, I am definitely human, I checked recently, and I cannot type that in.  I'm sorry, I don't know if that's a one or a lowercase "L" because it's smooshed in against the...



LEO:  [Laughing] These are not intended to be entered by any human.



STEVE:  Oh, no.  You can't enter them.  They're just wonderful, though.  It's just somebody who said, okay, let's have some fun with this.  So we will create the CRAPCHA, C-R-A-P-C-H-A dotcom.  Everyone should just go take a look when you get a chance because it's, I mean, and it's very reminiscent of things we've seen, and you're looking at it, going, okay, just give me another one.  I'm not even going to try that.



LEO:  [Laughing]



STEVE:  Coincident with today's...



LEO:  [Laughing]



STEVE:  I know.  They're great.



LEO:  I hate CAPTCHAs.  And we already have established they do nothing.



STEVE:  What is that black thing?  Is it like a flying saucer or...



LEO:  It's a smudge.  It's a smudge.  Oh.  Oh.



STEVE:  Someday we'll be looking back, on Episode 800 we'll be looking back and going, yeah, remember when we were talking about that?



LEO:  I'm going to put this on my web page.  Because you can.  They give you embed codes.



STEVE:  Yes.



LEO:  So you can put this in your web page.



STEVE:  Yeah, it's wonderful.



LEO:  How do I type that?  What?  What is that?  A fishbone?  What is that?



STEVE:  [Laughing] So our friend, Mr. Wizard, has updated his animations, also meant to correspond with today's topic on VPNs.  He's fleshed out his coverage of our original Episode 14.  Now, remember, these are animations, computer animations to go along with the podcast.  So the multi-animation series he has for Episode 14 and also for Episode 17, which covers the point-to-point tunneling protocol, which I'll be talking about here in a minute, PPTP, and also IPSec, IP Security, VPNs.  So I wanted to give people a pointer to that.  Remember, that's AskMrWizard.com is his site.



And, okay, now, Leo, you haven't seen this, and I'm reluctant to take the time to embed this in the podcast, but I really want to.  This is Ellen DeGeneres, who did something just brilliant last week.  Or, no, wait, this week.  It might have been Monday.  It's on her own YouTube channel, on Ellen's YouTube channel.  And it is extremely funny, and it's about passwords [t.co/TfrjlZcOOa].



CLIP/ELLEN:  I was looking around through the channels, and I saw this.  I really love infomercials.  I don't know if you love them as much as I do.  But I found one, it's a new product that I want to share you.  And, you know, if you have a hard time remember your online passwords, a lot of people have a lot of different passwords.  This is going to solve your problems.



CLIP/MALE VOICE:  Online passwords.  There's just too many.  And who can remember all those tricky combinations?  So you stick them on your monitor, or you hide them in a drawer.  But not anymore.  Introducing Password Minder, the personal log book that takes the hassle out of passwords.  Forget about sticky notes or scraps of paper because Password Minder has been specifically designed to organize and safely store passwords.  You'll find them in an instant and never lose a password again.



LEO:  It's like a notebook.



STEVE:  All it is is an address book.



CLIP/MALE VOICE:  ...Password Minder.  The alphabetical listing organizes all your usernames and passwords...



LEO:  My mom uses something, oh, a little less organized than this.



CLIP/FEMALE VOICE:  I don't have to worry anymore about security or identity theft.  I now have all my passwords in one place.  It's great.



CLIP/MALE VOICE:  If you have passwords, you need Password Minder.  So call now and get your very own Password Minder book for just $10.



CLIP/ELLEN:  That's real.  That's real.



LEO:  That's real?  That's real?



STEVE:  Yeah.  But wait, no, keep going, Leo.



CLIP/ELLEN:  Wait.  You're telling me I can keep all my passwords in one place?  In this right here?  And it's only $10?  For half the price you could write all your passwords on a $5 bill.  This is insane.  Does this seem safe, to keep all your passwords in one place?  In a place that's labeled "Internet Passwords"?



[Talking simultaneously]



STEVE:  Keep going.  Keep going.



CLIP/ELLEN:  I mean, what if someone gets their hands on your Password Minder?  So I came up with this.  It is Ellen's Internet Password Minder Protector.  And what you do - yeah.  You put it in here.



LEO:  And you lock it.  Actually, that's not so bad.



CLIP/ELLEN:  You close it.  And then it has a built-in combination lock right there, you see, on the side.  And I know you're thinking, Ellen, what if I forget my combination?  Well, if you order now, I will include this, and you can put it in there.  It's the Password Minder Protector Minder.



LEO:  It's the Internet Password Minder Protector Minder.  A little book to put your code in.



CLIP/ELLEN:  That's one place to keep your Password Minder Protector combination.  And I have one more special offer.  If you don't feel like writing down your passwords, send them to me, and for $10 I'll write them down for you.  Don't worry about sending me your credit card information.  I'll figure it out.



LEO:  Oh, that's pretty good.  I love it.  I love it.  You know, I've been doing that with my mom, today, this morning.  She has all of her passwords in a document on her desktop called Passwords.doc.  On her computer.



STEVE:  And my oh my, your mom is so sweet, Leo.  I saw her sitting in your studio last week.



LEO:  She's wonderful.  So what we've been doing, and it's an interesting experiment, I installed LastPass on her computer, and we're going to put it on her phone and her iPad, as well.  And I said, okay, now you only have to remember one password from now on, Mom.  But you do have to remember this one.  She starts to write it down.  I said no.  You have to remember this one.  And everything else will be safe.  So she starts to - so I said - so we came up with a process, a mnemonic process that she can recreate her password each time.  I won't go into details about...



STEVE:  Yeah, because your name is not long enough for her to use as her password.



LEO:  Oh, you don't even want to know what she used.  It's a dictionary word.  Well, I mean, that's the password to protect her computer.  And then on the computer there's Passwords.doc.  So it's not so secure.  Anyway, we're putting them, all the passwords in there.  And then one by one, slowly over time, she's going to go to her websites.  We changed the bank password, changed the passwords to something generated by LastPass, something long.



STEVE:  Good, good.



LEO:  Her bank will not - will only allow letters and numbers, less than 15.  But so we did that.  But everywhere else I said check, make sure you have letters, numbers, upper and lower, special characters.  And let's make everything 16 because why not?  Make it 16 characters because you don't have to remember it, so let's make it nice and long.  So it'll be a little process.  And I'll be getting a few phone calls.  And of course I put her LastPass password in my LastPass so it knows.



STEVE:  So you can recover...



LEO:  So I can be...



STEVE:  You can be her password recovery.



LEO:  I'm her Password Minder Minder.



STEVE:  So any of our listeners, I really...



LEO:  That was funny.



STEVE:  You ought to see it.  I did just tweet it recently, so you can find the YouTube link [t.co/TfrjlZcOOa].  I would imagine you could just go to YouTube and put Ellen's Password Minder Password Minder.



LEO:  It's on her website.  If you go to Ellen's website you can see it.



STEVE:  Oh, okay.  Yeah, it's a great piece.



LEO:  It's awesome.  Awesome, awesome.



STEVE:  And I had a nice, speaking of great pieces, a note from a listener of ours, Stephen Adams, who sent, "Steve, I just wanted to say, wow.  I've been a Mac user exclusively for better than 10 years and have not had access to any Windows machines in at least that time, only Mac and Linux."



LEO:  Wow.



STEVE:  "When I heard on the podcast that it was possible to use VirtualBox to run SpinRite, I was very excited.  I've been extremely busy, but sat down this morning to make it work, and it did.  Amazing.  SpinRite is now running on my iMac" - and he says "(2011)," so it's a recent one - "in a virtual machine booted from an external drive.  I don't expect it to find anything, but you never know.  And certainly, as has been testified to so many times, running it for maintenance purposes is always worthwhile.  Great job.  Thanks a bunch.  From a faithful listener since Episode #1.  That would be 400 episodes.  Signed, Stephen."  So thank you, Stephen...



LEO:  Very nice.



STEVE:  ...for sharing your VirtualBox success on a Mac.  That's actually happening a lot now.  People have picked up on that and are playing with it on their Mac, which is cool.



LEO:  So when we talked to this new advertiser, proXPN, when we said to them, well, I love the idea, we've talked about VPNs before, Virtual Private Networks.  But we've got to get Mr. Gibson to approve it.  We gave it to you to take a look at it.  ProXPN.com/twit is the URL for our special offer.  And you said okay, yes?



STEVE:  Yes.  They're based...



LEO:  It's using OpenVPN; right?



STEVE:  Yes.  They're based in the Netherlands.



LEO:  Oh, wow, I didn't know that.



STEVE:  Yup.  They clearly, in my opinion, have their hearts in the right place.  They look like they are here for offering what VPN users want, which is someone who can terminate their VPN connections somewhere and be both global and often local and trustworthy.  So they have server locations in Dallas, Los Angeles, Seattle, and New York in the U.S.  So, what, the Southeast, the West, the Northwest, and the Northeast.  So pretty much good coverage of the U.S.  And that's important, as we'll be talking about here in a minute, because when you have a VPN connection, it needs to go somewhere.  And some VPNs are used, for example, to straddle corporate offices and satellite offices in order to allow entire remote networks to participate as if they were all in the same network, even though the traffic is actually bouncing around routers on the Internet.  So there is the network straddling aspect.



But the other application, the typical end-user application, the one I have been interested in, is where you're somewhere unsafe.  You're in a hotel.  You're in a Starbucks with famously open WiFi.  And we know that the term "open" is really, it's both good news and bad news because none of your traffic is encrypted in there air there.  So what you need is you need a VPN to protect that jump where your traffic is exposed, but it needs to connect to somewhere.  So the idea is that you could use something like proXPN.  And I've looked around.  Remember we talked a long time ago about HotSpotVPN.  And there's been some coverage of this stuff.



But I looked, and I like these guys, honestly, better than anybody I've seen.  Outside the U.S. they've got locations in London, Amsterdam, and Singapore.  And they're deliberately about the notion that people need privacy because, I mean, as a VPN provider that's what they're going to be about, and avoid censorship, avoid filtering, avoid any kind of exposure to your connection.  They offer a free service which is capped at 300Kb.  So it's a bandwidth cap, but it's free for life.



LEO:  Wow.  That's really good.  I mean, and 300Kb is enough for when you're at the coffee house, and you want to check your email, or you want to do some browsing.  It's not enough for streaming, but it's enough for basic Internet access.  That's great.



STEVE:  Yeah, well, and I like it, too, because it allows - and clearly this is meant to be a loss leader.  It's to get people in...



LEO:  Yeah, they want you to pay for the full version; right?



STEVE:  To get people into the fold.  Now, if you do the free service, that's OpenVPN only, meaning that, specifically - so it's both bandwidth capped and only the OpenVPN support.  When you subscribe to their service, which they show it as 6.25, I think it is, or, yeah, 6.25 a month and that's $75 a year.  But apparently you can get it on, like, on a month-to-month basis.  So, like, 6.25.  And they support both credit card and PayPal.  So they do allow you to use PayPal to keep your credit information safe.  And for first-time signers, they offer a seven-day money-back guarantee.  So you can sign up, you can use it - and you can sign up through PayPal and try them for a week and just say, after a week, contact them and say this isn't what I expected, or I just wanted to see what it was about.  I really didn't want to go any further.  Please refund my 6.25.  And they'll do so.



I'll be talking a lot here in a minute about OpenVPN itself.  It happens to be what I'm using.  I have OpenVPN clients installed on all my laptops, and I run OpenVPN servers both in my home network and in the GRC network.  I mean, it is that secure.  It is that safe.  I have OpenVPN servers running, protected by certificates.  And so, I mean, I'm confident in it being safe.



LEO:  Well, let me do the ad.  And then...



STEVE:  Well, yes.



LEO:  Thank you for checking it out.  So it is, it's a global VPN, which is nice.  Works with almost any Internet connection.  You're getting a secure encrypted tunnel through which all of your online traffic passes back and forth.  You notice that it's using a 2048-bit encryption key, and the tunnel itself is 512 bits.  Which is adequate; right?



STEVE:  Yup.  It's actually way, way more than adequate.



LEO:  It's way more than adequate.  Any online application, including your web browser, your email, your filesharing, basically everything, instant messaging, it's all going through that encrypted tunnel.  So everything you're doing while you're using proXPN is hidden, even disguising your physical location as it passes to their servers.  They do offer, for the paid version, PPTP, as well, if you need to use that.  So I mean, there are lots of reasons you might want to use this.  You don't have to worry about your ISP's six strikes rule.  You can eliminate any concerns about filtering, blocked websites, bypass geographic restrictions.



STEVE:  They have Tor support also.



LEO:  Tor support.  Software for Windows and Mac gives you more advanced control.  For instance, you can select the programs and ports you want to route through proXPN.  But it also works with iOS, Android.  There's no app required for that.  World-class support.  So here's the deal.  We're going to give you 20 percent off.  You get the free - you can do the free version up to 300Kb.



But if you want to do the paid version, go to ProXPN.com/twit.  ProXPN/twit.  As you mentioned, normally $75 for an entire year for the pro version.  If you go month to month, it's 10 bucks month a month, 9.95 a month.  But our special offer will save you 20 percent off the lifetime of your account forever.  Not the first year, forever.  It's SN20.  So at that point, using the yearly plan, you're talking 5 bucks, less than 5 bucks a month.  And of course you cancel within seven days, as you mentioned, for a full refund.  So 20 percent off for life, ProXPN.com/twit.  But you have to sign up for the premium account and use the code SN20.  I'm going to sign up right now because that's half what I'm paying for my current VPN solution.  And of course, again, while they are a Dutch company, they have servers all over the world, including the U.S., and you can choose that.



STEVE:  Okay.  So a couple clarifications.  In fact, we'll just start talking about VPN stuff now.



LEO:  Good.  I'll take down the lower third, and you may go.



STEVE:  The PPTP protocol is not OpenVPN.  So there's two that they offer.  You only have access to OpenVPN for their free service.  The reason the paid service gives you both is that what you really want for mobile, unless you happen to have an OpenVPN client in your mobile phone, but people don't right now, but iOS supports PPTP VPN natively, as does Android.



LEO:  Oh, so that's why they offer it.



STEVE:  Yes.



LEO:  I get it.



STEVE:  Exactly.  So you sign up, and you get unlimited bandwidth globally for both protocols, OpenVPN, which you would install and use on any Mac or laptop, or even on your home machine.  I mean, if you wanted to do stuff that your ISP couldn't see, that nobody could see, where suddenly your location was no longer where you are, but whatever server you have chosen to use, you can install this on your regular desktop system at home and VPN all of your network use through proXPN.  And at the same time, when you are at Starbucks with your iPad or your iPhone, where you're using their WiFi connection, which is not secure, you can go right into the iOS control panel.  There is built-in support.  There's, like, VPN, and you choose one of three types.  PPTP is the middle type.  Put in your username and password, and you're connected through your mobile device with no additional client needed.  And so that's why that's so very cool.



Now, okay.  So, let's see.  As I was saying before, the whole concept is one of tunneling.  And I would recommend, if any of these terms that I use are foreign to people, we really, back at the dawn of this podcast, Episodes 14 through 19, covered this technology very carefully.  The idea is that you can establish a connection between endpoints, that is, between you and somewhere else, or also, as I mentioned, between two complete networks with multiple systems.  You establish a connection.



And then, in the same way that our browser uses SSL to encrypt the data which is flowing through that connection, including the use of certificates, which provide strong authentication that someone connecting to you actually is who they say they are, you establish an encrypted channel, and then the regular network traffic is pushed through this tunnel so that the world can see pseudorandom noise passing through the air if it's WiFi, or out of your cable modem and through your ISP.  It's exactly as if you had a secure connection to a remote website over SSL.  But in this case the link is using encryption, yet all of the network traffic, whether it's encrypted or not, is encrypted.  And so that's the key.  Nonencrypted network traffic like email, which is often not encrypted; also your DNS use.



Remember that when you, even though you may be going to websites which are SSL, you are often making queries to DNS.  And DNS is not encrypted;  It uses UDP protocol.  And so anyone monitoring your use of DNS is able to see which domains your computer is looking up.  And that's why this notion of all of your network traffic being funneled is crucial, because that means that, when your computer looks up DNS, that query goes out through the encrypted tunnel to the other end, comes out, goes and finds a DNS server, gets the answer, and sends it back through the encrypted tunnel so that essentially you just completely go dark relative to any external network traffic that your computer may have.



So there have been many VPN technologies that have been developed over time because this concept of creating a secure tunnel is sort of - it's fundamental to the - it's like a fundamental technology of what we could do once we have a public network.  And we're saying, well, it's nice that we have a public network.  Look how amazing it is.  But, for example, a corporation might want to have satellite offices.  And rather than having their traffic insecurely go across the Internet, they might want to essentially graft their satellite offices onto the main corporate network.  So a VPN connection between a VPN server in the corporate environment and a remote satellite office essentially gives everyone in that remote network IP addresses on the corporate network.



Think about that again.  So it's not like you have separate IPs.  You're actually grafting all of the network traffic across the Internet as if you were plugging into a router or a hub at the corporate headquarters.  And so, similarly, when you bring up a VPN link, your computer's IP address changes to an IP that is assigned to it by the other end of the link.  So it may be that they are using, for example, 10-dot network IPs.  So that, for example, whatever, you were 192.168.something.something, you bring up this VPN tunnel, and you will find that you have a virtual interface on your computer which allows traffic to be routed to it.  And it may have an IP, 10-dot something.  Or they may well be slicing off IPs from their own publicly routed IP allocation.



So the notion of an encrypted tunnel can be - that's sort of basic foundation.  We've talked in the past about point-to-point tunneling protocol, which is the one which has succeeded, sort of at the corporate level.  You can get - Cisco routers will support point-to-point tunneling protocol as their native one.  So, for example, if you wanted to create your own VPN and could configure a Cisco router, you could set it up so that it supports incoming point-to-point tunneling protocol connections.



The problem with using PPTP is that it is possible for people who wish to block the use of VPN connections to readily do so because PPTP uses well-known ports that aren't like web traffic or email traffic.  And that's also the case with another common and supported by Windows mostly, L2TP is a Layer 2 Tunneling Protocol, another one offered by Windows but not as common and popular as point-to-point tunneling protocol.



So you're out and about and in a roaming mode.  You have a couple choices.  One would be that you connect to a service provider, an OpenVPN service provider, using OpenVPN.  But yet another possibility, or something that gives you some additional flexibility, is it's now possible to use OpenVPN servers that are built into any of the firmware that can be flashed into consumer routers.  The most popular OpenVPN solution uses DD-WRT as its firmware.  And the Linksys Cisco E4200 V1 router is the one that most people are really comfortable with using DD-WRT.  Over on the Tomato side, the Tomato firmware, ASUS has a router.  The RT-N66U uses the Tomato firmware.  And people are liking that best for OpenVPN.



So the idea there would be that, if you're using DD-WRT or Tomato on one of the routers that supports it, and you've got it set up and compiled with OpenVPN, then your router itself is a server offering OpenVPN connections from the public Internet.  So you have a choice of, for example, if you're out roaming around, you could use a VPN service like proXPN when you want access, anonymous access to the world.  But then you also have the flexibility, with the same OpenVPN client, to connect securely to home, and then your system, wherever you are, becomes an extension of your home network.  You are on your home network.  You get a 192.168 home IP.  And it's like your computer were plugged into your hub and with complete security.



So, for example, you could connect to there and print something on your home network printer.  Or if you've got filesharing and a bunch of shared directories, or you've got your NAS, your Network Attached Storage box there at home, all of those resources become available to you using an OpenVPN client on a system that supports it, and an OpenVPN endpoint server in specific router firmware that has been flashed.  There are routers you can get now that are pre-Flashed with DD-WRT and the Tomato firmware, so that you're able to use them without going through the flashing process, if you're not comfortable doing that yourself.



But what we've seen is we've seen over the last eight years that the OpenVPN technology has continued to mature and become extremely stable.  I mean, it's, as I said earlier, it's the VPN solution I have chosen, and I am using.  I don't roam often away from home.  But, for example, all the times that I've been up doing the podcast from Leo's place I've been able to check in.  And a couple times I've had some server issues while I was out roaming, and I had to connect into my network at Level 3 and be there as an admin.  And so OpenVPN was the way I did it.



So that's the whole story, Leo, about where we are these days with VPNs and all the many options which are open to people, both using OpenVPN and PPTP.  We've got a Q&A episode next week.



LEO:  Next week, right.



STEVE:  And so I would encourage our listeners who are interested, who may have been, like, waiting for the right VPN service to come along.  From everything I've seen, proXPN looks like the right solution.  And you know me.  I would not be saying this unless I had checked them out and believed it.  I see no downsides.  But if anyone has questions or feedback or experiences, GRC.com/feedback, and maybe we can talk about them next week.



LEO:  Excellent.  When you're at GRC.com, make sure you check out, of course, all the great stuff Steve gives away, including ShieldsUP!.  And don't forget, of course, to buy a copy of SpinRite, right now.



STEVE:  Keep the lights on.



LEO:  Make a yabba-dabba do, yeah.  Episode 400.  Congratulations, Steve.  That's fantastic.  By the way, we do this show every Wednesday, 11:00 a.m. Pacific, 2:00 Eastern, 1800 UTC on TWiT.tv.  Watch live.  You'll see some interesting things you won't see in the edited version.  And of course, if you can't watch live, you can download a copy anytime, TWiT.tv/sn, or get those 16Kb audio versions Steve makes available, plus pure text transcriptions, the smallest version of Security Now!, on his website, GRC.com.  Thank you, Steve.



STEVE:  Thanks, Leo.  Great to be with you, as always, and we'll talk to you next week.



LEO:  Take care.  Happy 400th.



STEVE:  Yeah, thanks.



LEO:  I'll send you a Cohiba.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#401	

DATE:		April 24, 2013

TITLE:		Listener Feedback #166

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-401.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson's here.  But there's another Java exploit?  How could this be?  How could this be?  We'll also talk about his favorite new sci-fi for the year - so far - and a little Bitcoin conversation.  It's all coming up next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 401, recorded April 24, 2013:  Your questions, Steve's answers, #166.



It's time for Security Now! the show that protects you - that's how the song goes, isn't it?  [Singing] Security Now!, the show that...



STEVE GIBSON:  It's always sort of a long fadeout, and sort of a chorus-y sort of effect, too.



LEO:  You know, it's funny - Steve Gibson's here, the Explainer in Chief, the host of our show, man at GRC.com.



STEVE:  I just happen to be present for this one.



LEO:  It's amazing.  I turn on the mic, and there he is.  Every Wednesday just you're there.  But we've been using that same theme song now for 401 episodes.



STEVE:  Why change it?  It's just fantastic.



LEO:  Yeah.  I mean, it's identified with the show.  I mean, I suppose we could update it.  It is six, seven years old now.



STEVE:  No.



LEO:  But why change it?  Why change it?  Steve, today's a Q&A episode, yes?



STEVE:  It is.  We've got a typical weekly roundup of interesting events that have occurred, a little bit of follow-up from our listeners about their experiences with proXPN, and somebody's 85-year-old mother had her laptop saved by you know what.  And then a bunch of questions.  So a great podcast.



LEO:  I set up my 80-year-old mother this morning.  You know she's visiting this month.



STEVE:  It's funny, I was thinking about your 85-year-old mother when this guy was talking about what a super techie his was.  And I thought, oh, just like Leo.



LEO:  Yeah.  Mom's really quite good at this.  I set her up with Skype on her new Galaxy Note II and her iPad, and we're going to put it on her laptop.  And I have it on my phone.  And she said, wait a minute, you mean we - she says, why do people have telephones?  I said, that's a good question, Mom.  You notice I don't have a phone.  Oh.



STEVE:  And you know, it's true.  Landlines really are disappearing.  Those days are...



LEO:  The only reason I said she should probably have a landline is for 911.  Especially as an elder.  You know, you want to make sure that, if you can't talk, you can pick up 911 and go [distressed groan], and they know where you are.



STEVE:  Well, I still have a fax machine.  And I've got...



LEO:  Oh, that's true.  If you have a heart attack, you're going to fax them.



[Laughter, Steve and Leo making machine noises]



LEO:  Wait a minute, a fax is coming in.  It looks like there's an emergency.  Well, there was an emergency.



STEVE:  It's funny because I've kept my line because I really want the higher quality.  But when you're talking to somebody on the other end who's always on a cell phone, well, there's the problem.



LEO:  Cell phones sound terrible.  But Steve, notice how high the quality is on Skype.  I mean, it's better than phone.



STEVE:  Oh.  It is.  It's...



LEO:  And you know, all of the carriers are now introducing - some of them call it HD Voice.  They're going to be using LTE to do higher bitrate voice on cell phones.



STEVE:  Ahh, yes.



LEO:  I think T-Mobile's the first to launch this, to roll this out.



STEVE:  And you know that's all being funded by what they charge for text messages, which is the most ridiculous profit, I mean, zero bandwidth required for a text message.



LEO:  If you pay 20 cents a text message, which is the going rate...



STEVE:  Oh, you went over your - you went over your limit this month.  Oh, my god.



LEO:  It's $1,500 a megabyte.  A megabyte.  But most people now have unlimited text.  And that's what's happening is with Apple Messages and Facebook Messenger, people are using their data now for messaging.  And I think that business is almost gone, I really do, for the phone companies.  So, question and answer.  We've got news to talk about.



STEVE:  Yup.  I put Java at the top again, but go ahead.



LEO:  Oh, come on.  Really?



STEVE:  Oh, I know.  Yeah, Adam Gowdiak's at it again.



LEO:  My mom said, "Somebody sent me some Flash in my - something called a Flash, says I need a Flash video in my email, and I want to watch it."  And I said, "Mom, there's a reason Apple does not put Flash on that computer.  I would probably forego it if you can possibly live without that video, which is probably spyware anyway."  Steve Gibson's our hero, the king of security and privacy.  Let's get some Java news?  Oh, no.



STEVE:  Yeah.



LEO:  Oh, no.



STEVE:  Okay.  So we have good news, which is the first use of the non-autorun features in the latest version of Java, which it's good that they put in because we've already found a need for them, unfortunately.  It's been a week.  And our intrepid security pioneer, Adam Gowdiak, whom we've spoken of many times, is the CEO and founder in Poland of Security Explorations.  And that's certainly what he does.  He made a post on Monday to the Full Disclosure mailing list, which is where he puts his stuff, saying, "It can be used to achieve a complete Java security sandbox bypass on a target system."



LEO:  Oh, criminently.



STEVE:  "Successful exploitation in a web browser scenario requires proper user interaction.  A user needs to accept the risk of executing a potentially malicious Java application when a security warning window is displayed."  So it's good news.  I mean, first of all, yes, there are more problems with Java.  No one expected that there weren't going to be.  Even Oracle said two weeks ago, or one week ago, that there were still unpatched problems, but as far as they knew they were not being exploited.  So Adam found yet another new problem, sent proof-of-concept code to Oracle in order for them to be able to duplicate it and ultimately fix it.  So it's a problem that there's this bypass.



I wanted to take this moment, though, to talk about sandboxing because remember that the fundamental problem with sandboxing is that we are - we're trying to constrain something powerful inside an artificial barrier.  So the challenge is not to let this too powerful thing outside.  So we're seeing now the problems with Java are ways to penetrate the sandbox.  Which we might be tempted to say, well, okay, so what's the point of having it?  Except one of the things that has happened that is something you don't notice until it's been a while is all PDF exploits instantly ended when Adobe added the sandbox to the PDF format.



So there's an example of a very, I mean, a truly successful change which I want to acknowledge because it's important for security theory, and also we've beaten up on Adobe so much over the years.  This made a difference.  We were talking about PDF exploit after PDF exploit.  I mean, it was what Java has become a year ago, and it was the instant that they announced their sandboxing technology, PDF exploits just vanished.  We haven't spoken of one for quite a while.  And it was that event.  So tip of the hat to Adobe for doing it.  It certainly took them a long time, and they resisted, probably just natural hubris, believing that, oh, well, we'll just get these last few bugs fixed, and then we'll be okay.



LEO:  Of course.



STEVE:  Uh-huh, yeah.  But yay for the sandbox in Reader and Acrobat because it has made all the difference.  And I would just say that Java is dramatically more complex, dramatically bigger.  I mean, it is a full-strength, full-function language.  And the idea of hosting that on a browser is insane.  And although I don't have it in my notes here, I have picked up on some little blurbs that, for example, the Scandinavian countries that have been strong users of Java, for example, we had a lot of feedback from listeners who say, well, my bank requires me to use Java.  The banks are dropping it.  They are saying, okay.



LEO:  Good, good, good, good.



STEVE:  Browsers are becoming Java hostile.  The security community is Java hostile.  We need to re-implement this in some other platform.



LEO:  It strikes me that Java feels old-fashioned when you see it in a bank.  I mean, it just feels like an old-fashioned thing.



STEVE:  Well, it's got a great place for multiplatform desktop applications.



LEO:  Minecraft.  It's great, yeah.



STEVE:  Yes.  There it makes sense.  But not on a web browser.  That's just the wrong place.  And this really annoyed me.  I picked up the news from the Commissioner of Data Protection and Freedom of Information in Hamburg, Germany, did you see this little blurb about Germany slapping Google?



LEO:  Oh, I did, yeah.  They slap them all the time.



STEVE:  Well, this was, of course, and the reason I'm bringing this up is we've covered it so extensively.  This was the inadvertent collection of unencrypted WiFi data by Google's Street View cars as they roamed around Germany, well, all of Europe and the U.S., I mean, everywhere.  And we know, we absolutely know that this was inadvertent.  The forensic studies were done.  We talked to the guy who, well, I mean, people talked to the guy who grabbed the code out of the open source community, dropped it in because it did more than what he needed, but also what he needed, and it happened to also be logging all of the WiFi packets.  And some of them happened to be encrypted when people were broadcasting, I mean, they were broadcasting their data in the clear.



LEO:  Right, right.



STEVE:  So it's like, okay, well, we know that Google - this wasn't some scheme.  This was just inadvertent.  So the good news is German law prohibited a fine of more than 145,000 euros, which is currently $189,000 U.S.  And what annoyed me was that this Johannes Caspar said that the fine was far too small to act as a deterrent.



LEO:  Oh, yeah.  It's cigarette money for Larry Page.  It's nothing.



STEVE:  Well, yeah, it's 0.002 percent of Google's...



LEO:  They make that in an hour.



STEVE:  Google's $10.7 billion net profit for 2012.



LEO:  Maybe 10 minutes, even.  I don't know.



STEVE:  But the notion that a fine would be a deterrent suggests that Google wanted to do this, and now, ooh, it was too expensive for us to do that.  What?



LEO:  No.  It's ridiculous.  Europe doesn't - the Europeans, in particular the Germans, do not like Google.  And they're very privacy, you know - and this is where sometimes you can go too far on the privacy thing.



STEVE:  Well, I'm glad that Europe is as privacy concerned as they are because I wish...



LEO:  But let's be realistic.



STEVE:  I wish the U.S. were more.  But so if any of that leaks over here, that would be good.  But this is just ridiculous.  I mean, I'm sure he's a bureaucrat.  He has no idea about the technology, and he assumes that it was some plot on Google's part to collect this data, which they have no interest in whatsoever.  We know that.



LEO:  The German Bundestag voted to prevent Google from linking to newspapers.  The newspaper publishers were complaining that Google was stealing their content by putting them in its search results.



STEVE:  After they put it up on the web.



LEO:  Yeah.  So there's a certain amount of unclearness about this whole thing, I think.



STEVE:  Yeah.  Would you like anyone to find your articles?



LEO:  Well, that's the problem.



STEVE:  And see your ads on your website?



LEO:  Yeah.  Rupert Murdoch said the same thing, and he blocked Google from searching his properties, I think, in the U.K.  And after about a year he said, you know, never mind.



STEVE:  That didn't work out so well.



LEO:  Please index our sites.  Please.  We beg of you.



STEVE:  Yeah.  So speaking of Google, some very clever malware authors managed to sneak some bad stuff into the Google Play app store.  This came to light late last week.  Apparently, no one's exactly sure what the count is, somewhere between two and nine million malicious apps were downloaded.  And the way this was done was clever.  This was in 32 apps, spread across four different developers.



LEO:  Oh, I didn't realize this.  Oh.



STEVE:  Yes.  They were always intended to be malicious.  But they weren't when they submitted them.



LEO:  So individually they weren't?  Or did they update them?



STEVE:  Exactly.  They updated them.  They waited months.  So they submitted them to the store, 32 different apps, all submitted to do random, presumably useful things.  I mean, apparently nine million people thought so, up to nine million.  And then they bided their time for several months...



[Homer Simpson's voice in background]



LEO:  Never mind.  That was my yabba-dabba do.



STEVE:  ...and said - was that Homer?



LEO:  It was.  I'm so sorry.



STEVE:  That's all right.  And then after a few months they slipped in malicious updates that were causing those apps to contact remote servers every four hours to send back harvested data, including the device's phone numbers and the IMEI numbers, which we were talking about last week.  You peeled the label off the back of that phone because also it's built in.  And in some cases they were also causing the devices to then download the AlphaSMS trojan, which sends text messages on behalf of the user to numbers that incur charges, heavy charges.  So anyway, I just thought that was interesting.  So here - so basically what's happening is the bad guys are smart.  We know the bad guys are essentially the same people as the good guys, they're just bad.  So they're as smart.



LEO:  [Laughing] There's the same intellectual capacity.



STEVE:  Exactly.



LEO:  Just a moral compass that is lacking.



STEVE:  They took the other branch in the road.



LEO:  Yes, yes, the fork in the road, yes.



STEVE:  And so we have the Spy vs. Spy sort of scenario, the white spy and the bad spy.  And so the bad guys look at the security models, they look at the protections and the barriers, and their whole mission is, hmm, how can we sneak past this?  And so, oh, let's put out a bunch of good apps, and then they'll go bad after a while, after we've built the trust of users and acquired a reputation and no one's had a problem with them.  And so this subverts things, like the how long has this been published, because we tend to mistrust brand new things.  So let it age for a while.  So we trust it.  And, ooh, look how many people have downloaded it.  It must be okay.



So they used all of that sort of natural reputation that apps get over time, just by waiting, and then they slipped the bad stuff in.  Of course Google immediately yanked them, as soon as this malicious behavior was detected.  But they had their day; they had their 15 minutes.  So I thought that was interesting.  I mean, it's like, where there's a will, there's a way.



Now, really, really good news.  Not only just granularly good news, but industry-wide.  And so we're tempted to use the acronym OTPMFA, which is actually two acronyms.  OTP is One-Time Password, and MFA is Multifactor Authentication.  Because we had last week Microsoft announcing that they were adding two-factor authentication to their stuff, Microsoft Account, whatever that is.  And then, just in the news, I think it was yesterday, or maybe today, this morning, Twitter has said - I guess they posted a job listing in February specifically saying we want somebody with expertise in multifactor authentication.



Now, what's really encouraging is that Microsoft's multifactor authenticator - they of course have one for Windows Phone which is called Microsoft Authenticator.  It is standards compliant.  There's an RFC 6238 which is the specification for a time-varying one-time password.  And we talked about this years ago.  I mean, here I'm holding up my still-going-strong little gray football that we talked about, which is a time-based multifactor authenticator.  And right now I just pushed a button, it says 901668, which I can tell everybody because it expires in 30 seconds, and then it's going to change to something else.



So the good news is we are, I mean, this is really beginning to happen.  We've got Google.  There are Bitcoin exchanges.  Facebook, Yahoo!, Amazon Web Services, Dropbox, DreamHost, Blizzard's Battle.Net, Valve's Steam, and LastPass.  Not only are they time-based one-time tokens, one-time passwords, but they are all based on the same standard.  So what I'm excited about...



LEO:  Oh, I didn't know that.



STEVE:  Yes.  They are all cross-compatible.  You can use Google's Authenticator to log into Microsoft.



LEO:  Yeah, I do that.  And I use Authenticator for LastPass, for Google, obviously.  That's really handy.



STEVE:  Yes.  And so we talked a long time ago about the problem, we called it the key ring problem, of needing to have a whole bunch of different key rings, or a key ring full of individual tokens, one for each service.  And we were praying that that was not going to happen.  The model that VeriSign worked on was their proprietary model, where only they would know what the serial number was of your token, and they would provide the authentication service.  What I remember hearing was they were extremely expensive to use.  I mean, yeah, you've got VeriSign's name and everything branded all over your stuff, but ouch.  Pricey.  So here we finally have moved to, I mean, this is exactly what we want, which is an open platform.  It's device-based.  In Microsoft's case, they will send you a one-time password via text message, or you can use the Authenticator.



LEO:  That's great.



STEVE:  And there are also some very nice-looking iOS apps.  I can't speak for the Android.  I haven't gone over and looked.  But, for example, I just was poking around to see what was out there.  There's something called HDE OTP for iPhone and iPad.  What I like about it is it shows you a screen of all of your different one-time passwords, all changing at the same time.  So you can sort of scroll through the various accounts that you have established, and it shows some sort of a little meter with the one-time password expiring, how much longer it will be valid.



LEO:  Yeah.  That's what Google Authenticator does, too.



STEVE:  Yeah.



LEO:  So I have my LastPass and my Google in there, and there's a little clock running out, and then there'll be a new one in a few seconds.



STEVE:  Right.  Really, but what's so nice is that these things are...



LEO:  So this is an open standard.  I didn't realize that.



STEVE:  That's what's so cool.



LEO:  So everybody should use this.



STEVE:  Yes.  In fact, I looked around for any announcement about what Twitter was doing, and I couldn't find anything.  It's probably a little premature.  But they'd be crazy - and that's my point is with this much inertia now, why would anybody create their own nonstandard one-time password solution?



LEO:  Right.



STEVE:  They're just - there's no need for it.



LEO:  Good, I hope not, yeah.



STEVE:  Yeah.



LEO:  Well, it's also good for us because I don't want to carry multiple dongles or have multiple apps.  I can have one app that has all my one-time passwords.  That's beautiful.



STEVE:  Right.  Right.  Anyway, I'm just - I'm delighted because this is a great development.  Now, it's worth mentioning that it's not a perfect solution.  That is, you still have the problem of real-time interception.  In fact, that's why I deliberately read that number out, was I'm sure people are going, wait a minute, Steve, you just gave us your number for the next 30 seconds.



LEO:  And I just gave out my LastPass and Google numbers, too, onscreen.



STEVE:  So that's an example of the remaining vulnerability in this system.  We've seen instances where a CAPTCHA can be cracked in real-time by sending it off somewhere to a CAPTCHA cracking farm or people who are needing to solve CAPTCHAs for some other purpose, and so they're - and that's an instance where a bot is essentially able to use a human as its worker in order to solve a problem that it can't solve.  It is possible to do, I mean, in theory to do a real-time man-in-the-middle crack where you would intercept somebody's submission of their currently authentic and correct one-time password and block their submission, log on as them, and grab their session.



So it's not absolutely perfect, but it is a huge step forward because, I mean, for example, it completely, as long as there aren't other problems, if people's passwords get loose, well, that's no longer enough.  If you have an email account, which is typically your username and account identifier, and your password, historically that's all that's been needed to break in.  So we understand that this raises the bar in a very useful fashion.  And, yay, we've got a standard, which is...



LEO:  Yeah, god, I hope Twitter does this.  I hope they're sincere about - or this isn't just a rumor.



STEVE:  They have to.  No, no, Twitter's definitely doing it.  But the question is will they be compliant.  And I can't imagine...



LEO:  They'd better be.



STEVE:  ...that they would, like, make people go out and get their own app.  That would be just crazy at this point.



LEO:  Crazy talk.



STEVE:  And I think, my point is we have so much inertia now that it's a fait accompli, essentially.  It's going to happen.  This is the way we do this.



LEO:  Right.



STEVE:  Also there was some concern, and I think it was already out by last podcast, but I didn't have a chance to get to it, I wanted to address it, and that's the concern about a design flaw in 1Password, which is a very, very popular...



LEO:  Very popular, yeah.



STEVE:  ...password manager.  It's interesting to discuss here because of what the problem was.  The guy who is developing the HashCat system, we've talked about him in the past, it's oclHashCat-plus.  This is the GPU-based, massively fast, password-cracking, hashing system which supports an incredible variety of hashes and crypto standards.  He decided to add support for TrueCrypt cracking in his HashCat system.



Now, what that means for us is that there will be an open source brute-forcing technology specifically designed for TrueCrypt.  But TrueCrypt is only as strong as the password.  We've spoken of that often.  There was the famous case of somebody in Brazil, the Brazilian authorities were unable to crack the drive because it was protected with TrueCrypt, so they sent it up to the FBI here in the states, and the FBI couldn't make any more of it because the person had used a really, really strong password.  So the fact that we're going to get cracking for TrueCrypt is interesting, and it advances HashCat's breadth of coverage, but it doesn't - it's not a concern unless you've got a too-short TrueCrypt password that would make it vulnerable.



LEO:  This is true in general, isn't it.  I mean...



STEVE:  Yes, exactly.



LEO:  ...there are rainbow tables and other systems that will crack bad passwords.  But a long random secure password, the kind generated by 1Password or by LastPass or KeePass, you'll be fine.



STEVE:  Right.  And so I wanted to make sure, though, because when I talk about TrueCrypt cracking, there will be people who will, like, oh, my god, TrueCrypt has been cracked.  It's like, no, no, no.  It's just making more available the technology for doing that, but that's been around already.  So one of the TrueCrypt algorithms which famously protects TrueCrypt is AES, the Rijndael cipher.  And this developer did not have support for AES in his GPU technology.  So he said, okay, I've got to add GPS cipher handling.  Which means, for example, the key setup for AES, where you take a small key, the AES 128-bit key, and expand it to much more data because each round of the AES cipher uses a different chunk of key-derived material.



So he had to write a bunch of GPU accelerator code specifically to support that, which he had never done before.  So he said, okay, if I'm going to do that, what's around that uses AES that would be simpler to do before I tackle the whole TrueCrypt problem?  And he said, oh, 1Password.  1Password is a pretty simple, straightforward encryption system.  It uses PBKDF2, the password-based key derivation function, in, like, many thousands of iterations.  So it's been well designed by guys who know crypto.  And what that produces is an AES key.  So he already - oh, and it uses SHA-1, the hash, in its PBKDF2 algorithm.  He already had SHA-1 programmed on his GPU.  So this was beautiful because to do TrueCrypt he needed all kinds of more stuff.



And he thought, okay, I'm going to get the AES code all working just using 1Password.  That caused him to look deeply into the algorithms that 1Password was applying, and he found kind of a mistake.  The idea was that 1Password would verify a password was correct by running the submitted, the user-submitted password thousands of times through the PBKDF2 algorithm to so-called "password strengthening," basically to slow down any brute-force attack.  But they needed a 128-bit key for AES and another 128-bit initialization vector for the cipher block chaining that they use.  Well, that meant they needed 256 bits.  But SHA-1 produces 20 bytes, which is only 160 bits.  So you needed to use the SHA-1 hash twice.



Well, what it turned out was that it actually wasn't necessary to, in order to check whether a password was correct, to do the entire setup for decrypting the password.  And so essentially what this news was of a design flaw amounts to maybe one or two bits of entropy lost.  Meaning maybe it's half or a quarter as hard to brute-force crack the password.  And in practice, that  means that it probably won't take you 376 years to crack it.  It might only take you 192, or maybe 96.  People vary in their estimations.



The point is it hasn't dramatically hurt 1Password.  There was in fact a discovery that, due to the way they were authenticating passwords, it wasn't as hard from a brute-force cracking standpoint as it was believed to be, but only by a factor of maybe either two or four, depending upon some optimizations that may be available.  So it's like, okay, a tempest in a teapot, I think.  I mean, they're going to fix it.  Mostly it was users being worried that this meant 1Password was cracked now and dramatically less safe than before.  That's not the case.  Absolutely not the case.  So just a bit or two worth of strength weakening, and nothing more than that.  So 1Password users should not worry.



LEO:  Good.  That's a relief.



STEVE:  And same, yes, same advice applies, as always, which is use a good, strong password, and you'll be as safe as you can be.



LEO:  Let the password programs generate the passwords.  Although the issue with 1Pass and KeePass and LastPass is, that's the one password you want to memorize.  So you don't want to make it too cuckoo.



STEVE:  Yes, yes.  Or...



LEO:  By the way, it's working great with the experiment with my 80-year-old mom using LastPass.  It's working great.



STEVE:  And you helped her to come up with a neat way to remember a cuckoo password.



LEO:  I gave her a mnemonic.



STEVE:  Yup.



LEO:  And it's not easy, but she can reconstruct the password in her head.



STEVE:  Every time she needs it.



LEO:  Every time.  She actually memorized it.  And I think it's 16 or 20 - it's long.  That's the nice thing about a good mnemonic, you can make it long.  And as we know, I think we know from your password padding exploits, that longer is better.



STEVE:  Yes.



LEO:  Yes.



STEVE:  Yes.  Okay, now, I have to apologize to the people who were confused, and there were some last week, by my discussion of the point-to-point tunneling protocol, which proXPN supports in addition to OpenVPN in the paid-for model.  And I should mention that a lot of the other VPN providers do also.  And that's the sort of the de facto protocol that all the mobile devices use.



LEO:  Yeah.



STEVE:  But it's not nearly as secure as SSL, which is what OpenVPN uses.  And I just, you know, I know that.  We've talked about it often.  But I didn't say it again last week.  And so that's my apology is I should have explained that when I was talking about, for example, using it to protect yourself at Starbucks, whereas in an open WiFi environment, if you had no protection, everything you're doing is in the clear.  Well, so any encryption is way better than none.  And PPTP is natively available as the VPN protocol in iOS and Android and other mobile devices.  So you don't have to install anything in order to get it.



But we also talked last summer about Moxie Marlinspike's announcement, and it was in early August, I think, of his Cloud Cracker.  And what Cloud Cracker does is you can capture point-to-point tunneling protocol traffic and submit that to - you run it through a little open source app first to extract some of the handshake details that it needs.  You submit that to Cloud Cracker along with $200, and a couple days later it will give you back the result of essentially cracking what is a 56-bit DES key.



So the problem with PPTP, the point-to-point tunneling protocol, is that it's normal encryption technology.  And mutual authentication is based on, I mean, it's old.  It's NT4 and Windows 98 era.  So, I mean, it's not surprising that it's a little creaky.  But that's also why it's so ubiquitous.  It's available everywhere.  But you do need to use it with caution.  And so that's the point I wanted to make that I should have made last week.  And so I apologize to our listeners who said, wait, I mean, I got a lot of mail saying, wait a minute, you said it wasn't safe to use it.  Uh, okay, so, right.  It's old.  And 56-bits is no longer enough protection.  And Moxie now demonstrates that for $200 he'll crack it in about a day.



LEO:  Wow.



STEVE:  So if the model, if the attack model was that the entire communication session, at least starting at the beginning, because you have to have the initial handshake, and then you of course would want to keep capturing the traffic in order to be able to decrypt what had happened, if you captured all of that and then ran it through the pre-processor and submitted it to a DES cracking system, and there's one online that you can rent for 200 bucks, then a couple days later you can decrypt that traffic.  So that's the downside of point-to-point tunneling protocol.



But the other thing that came to light that I was not aware of last week, and many people made me aware of it, is that there is an official OpenVPN client from the OpenVPN Project on iTunes.  And so you can use OpenVPN on your iOS devices, and presumably Android, although I haven't looked, just as easily as you do use OpenVPN client on your laptops.  So there is no need to use point-to-point tunneling protocol.  And anyone who is put off by the fact that all their traffic could be captured and could be decrypted in a couple days, by all means, definitely I'm glad that people held me to account for this because we've discussed all this before, and I sort of assume that this is...



LEO:  Some people don't listen to every single episode, Steve.



STEVE:  Yeah.  I assume it's in our knowledge base.  But anyway, so I should have said it last week, and I apologize for not doing so.



We've had a mixture of feedback.  I got a lot, there was a lot of Twitter activity.  Someone, Ryan Jones, whose description calls himself an IT professional from New York City metropolitan area, co-host and producer of the Fifth Down podcast, which I guess that's a football reference?  He said, "Loving #proxpn," and that's all he said.  And then Erik Chavez, who tweets as @homesicktxan, he tweeted to the proXPN people, who by the way do answer their Twitter feed, I've been seeing a lot of back and forth chatter with them, said "Signed up for one year of @proXPN thanks to @leolaporte and @sggrc.  So the promo code is good for subsequent renewals?"



LEO:  Right.



STEVE:  And they responded, "Yes, it's for subsequent renewals, too."



LEO:  It was a lifetime promo code, lifetime...



STEVE:  Ah, and then he said, "Great speeds so far."



LEO:  Good.



STEVE:  Now, I've also heard people say not so great speeds.  I've heard - I saw somebody else say that his YouTube seems to be playing much faster through proXPN.



LEO:  That does not seem right.  But okay.



STEVE:  So your mileage will vary.  And I did see some people complaining that the free use was just driving them crazy with dunning them to upgrade to the paid model.  That's the one complaint that I did mention last week which I did see online in a forum somewhere.  I have still not had a chance to play with it myself.



So again, it is what it is, but that's the - and so we've had generally positive feedback except that people were saying, wait a minute, I didn't think PPTP was secure.  And now people know exactly what the nature of its insecurity is.  It's way better, if you don't have OpenVPN, than completely unsecure WiFi in an open WiFi mode.  But if you're trading state secrets in a mode where your traffic might be captured, and Moxie Marlinspike is going to earn $200 from someone for cracking your traffic, then by all means it's not safe enough.



And I did get a nice follow-up from Shannon Coleman, who said, "Thanks for the Opera suggestion on Security Now!."  And Shannon said, "Much better than Chrome!  LastPass support with an add-on and native side tab support."  Now, I did not know about native side tab support or LastPass.  So I'm glad for both.  I'm still sitting over here on Firefox and very happy.  But, boy, Opera really did impress me, as I mentioned last week.



LEO:  I'm going to have to try it now after all you've said about it.  And this is big.  Having LastPass is critical for me.  I won't use a browser that can't support LastPass.



STEVE:  No, it's not possible to use, I mean, I don't know what any of my passwords are anymore.



LEO:  Right, you're not supposed to, right.



STEVE:  I mean, yeah.



LEO:  Yeah.  Yeah.



STEVE:  Yeah.  Okay.  A little sci-fi break.  Oh, my god, Leo, this summer, oh, it is just a gala of science fiction.  I'm just, like, a pig in you know what.  I am so happy.  I just look at these previews and just think, oh, yes, bring it on.  So Friday "Oblivion" opened.  I've already tweeted twice about it.



LEO:  Is this the Tom Cruise one?



STEVE:  Yes.



LEO:  Okay.  Okay.



STEVE:  Yes, yes, yes.  And no spoilers.  You will never, ever hear a spoiler from me.  Think about it.  When I've been talking about science fiction books that I've loved, I've managed not to give anything away.  So I loved the movie.  I mean, it's not an incredible, ground-shaking, you know, like when we first saw "Star Wars" or "E.T." or something.  But...



LEO:  "The Matrix."  That was the one that, when I saw that, I walked out of there, my jaw on the floor.



STEVE:  Dazed, yes.



LEO:  Yeah, yeah.



STEVE:  So this isn't that.



LEO:  And Morgan Freeman's in this one, too.



STEVE:  But it's great.  I've seen it twice, in fact.



LEO:  What?  Now, is it based on a sci-fi novel or...



STEVE:  No.  I asked Jen because she generally knows these things, and she said no.  And I then spent the next - I guess I spent, what morning was it, maybe it was Saturday, reading the negative reviews of the critics.  And some people just hated it.  And it's like, okay, I mean, I understand, I mean, some people seemed to have something, a problem with Tom Cruise himself.  I don't.



LEO:  I don't like Tom Cruise, but I can - but, you know, "Minority Report" was good.  He's done some great sci-fi movies.



STEVE:  Yeah.  I wouldn't say this is great; but, oh, it's a visual feast.  It is beautifully visual, and the sound design is really exceptional, too.  They've got a bunch of drones who just make really wonderful sounds when they're, you know, just sort of - sort of an advanced R2-D2 sort of thing.  And anyway, I loved it.  And about 30 minutes in I whispered to Jenny, I said, "I'm going to see this again immediately."  Just because I wanted to experience it again.  I mean, I'm that way.  I own a lot of these movies on disk, and I'll own this, just because after it's been long enough I will watch it again, in the same way that I'll read a book, a sci-fi book that I've already read, I'll read it again just to bask in the suspension of disbelief.



LEO:  The guy who directed "Tron Legacy," which was also beautiful, not a great movie, but beautiful looking, did this one.  Rotten Tomatoes, 56 percent from critics, that's pretty poor, that's a splat; 68 percent of users.  So I think you're not alone.  I think people liked it better than the critics liked it.



STEVE:  Yeah, and it did dominate the box office.  It did just shy of $40 million in its opening week, which is better than both of Tom's previous movies combined.  So, I mean, it's like, if you don't want to see it, you won't have to wait long for something else really good because "Elysium" looks fantastic with Matt Damon.  We of course have "Into Darkness," the next...



LEO:  I'm glad sci-fi is back.  I am glad it's back, yeah.



STEVE:  Oh, my god, yeah.  Oh, and we've got that cool, what is it, the Earth one, "Back to Earth" or "Old Earth" or whatever it is ["After Earth"], and that's I think Will Smith and his son and, oh, anyway, it's going to be a summer of wonderful movies.



LEO:  It's based on a graphic novel, apparently, that the director wrote.  Oh, is he the guy who did "300"?  He is, isn't he.  He's the guy did "300."  The Chicago Sun-Times says, "If nothing else, 'Oblivion' will go down in film history as the movie where Tom Cruise pilots a white, sperm-shaped craft into a giant space uterus."



STEVE:  Oh, I was afraid that that was the guy.  I read that on Saturday morning.



LEO:  Not good.  Richard Roeper, though, said that this is "the sci-fi movie equivalent of a pretty damn good cover band."  I don't know what that means.  But he does give it - he does like it.



STEVE:  Yeah.  So here's my point.  And we went with some people who I think are not sci-fi people, and they were, like, eh.  And I just thought afterwards, okay, well, they just don't like science fiction. 



LEO:  So you have to like sci-fi.



STEVE:  Just drape a phaser over anybody, and I'm happy.



LEO:  Yeah.  I love sci-fi.



STEVE:  Yeah, I do, too, obviously.



LEO:  Yeah, yeah.  All right.



STEVE:  So, but, you know, it was great.  Maybe people could wait till it comes out in some other format, if they're really not avid.  But...



LEO:  But wait, though.  Is this a big movie you want to see on a big screen with surround sound and thundering...



STEVE:  I think so.  I saw it the second time in a smaller theater, and I missed the impact of the sound.  And, I mean, because this was - there's a lot of sound in this.  And I just think it was a fun - I think it was absolutely worthwhile.



LEO:  Not worth waiting, then, till DVD or whatever they call it.  Used to be wait for DVD.  Now I guess it's wait for Netflix or I don't know, wait for on-demand.  But not worth it, it sounds like.  So go see it.



STEVE:  And by the way, did you see that Netflix has already recouped their entire two-season investment in "House of Cards"?



LEO:  Yeah, yeah.  So did the stock market.



STEVE:  Oh, wow.



LEO:  Netflix, because they now have more subscribers than HBO, I think that they...



STEVE:  Yes.



LEO:  You know, last summer when Netflix - people were really critical of Reed Hastings, the CEO of Netflix, said he made a stupid move by splitting the DVD by mail from the streaming and...



STEVE:  I remember that.



LEO:  ...and charging people extra, and everybody said how stupid they were.  I said, wait and see.  Reed is not a dumb man.  This is a very, very smart CEO, one of the smartest out there.



STEVE:  Didn't they go back on that decision, though?



LEO:  They changed it a little bit.  But you know what, do you have DVD by mail with them?



STEVE:  No.



LEO:  No, nobody does.



STEVE:  No.



LEO:  Those 30 million subscribers, streaming.  He was pushing, and I think people complained, but in the long run they won.



STEVE:  Oh, so he was trying to move his customer base over to online.



LEO:  Yes.  The reason is the Hollywood folks are squeezing him and won't let him have movies.  They won't let him have - there's a 30-day delay after the movie comes out.  They're giving it to on-demand services first, blah blah blah.  They were squeezing him.  And so the DVD by mail business was dying.  And people said, well, the streaming stuff isn't as good as DVD by mail.  So he really needed to - he's pivoted.  The company's pivoted.  And what they've done is they've become a content creation company, and - like HBO.



STEVE:  Yes.



LEO:  And I'm a believer.  I have never given up on them.  I always thought their model was very good.  Too bad I don't like [indiscernible].



STEVE:  "House of Cards" was great.



LEO:  Wasn't it amazing?  I can't wait to see Season 2.  Is it out yet?



STEVE:  No.  I was so happy that they had a second season.  Already paid for.  I mean, they've already produced it.



LEO:  I know, it's done.



STEVE:  It's done.



LEO:  Kevin Spacey will be on when Season 2 comes out.  I've already extracted a promise from our friend the producer, Dana Brunetti.  He said we'll get Kevin on.  I tried to get him on when it first came out.  He said, you know, "He's exhausted.  He's on vacation.  Do you want to do it when Season 2 comes out?"  I said yes.



STEVE:  That would be cool.  I remember when you had him on The Screen Savers.



LEO:  Yes.  Kevin's a geek.  Big geek.



STEVE:  Yeah?



LEO:  He loves this stuff.



STEVE:  Yeah.  Okay.  So energy storage update.



LEO:  Okay, good.



STEVE:  Many people also tweeted.



LEO:  I need to know about this.



STEVE:  Also tweeted.  What happened was the publication "Nature Communications" came out with an article celebrating a breakthrough in chemical battery storage, so not supercapacitor, but chemical battery.  And I have and I have read and studied the complete article.  It's titled "High-Power Lithium-Ion Microbatteries from Interdigitated Three-Dimensional Bicontinuous Nanoporous Electrodes."



LEO:  Oh, that.



STEVE:  Yeah.  And it's cool.



LEO:  Okay, good.



STEVE:  Now, what I love about this is - so the problem with traditional electrochemical batteries is that they are electrochemical.  That is, in order for them to be charged and discharged, you have to have the migration of physical ions through the electrolyte between the battery's two electrodes.  That is, physical migration, so it takes time.  And that physical migration creates resistance.  And so what this ends up meaning is that the battery can only be charged and discharged at a certain rate.  And if you push it too far, then it begins to get hot.



And of course we've famously seen all kinds of battery explosion problems over the years.  That's what happens is these batteries end up being pushed too hard.  That's what supercapacitors don't have.  Supercapacitors are just two electrodes super close together with as much surface area as possible, and then you just pile on the electrons.  So there, there is no, by definition, there is no resistance at all.  But you're not storing the charge electrochemically.  You're storing it electrostatically, so just in an electrostatic charge.



The problem with supercapacitors is, in order to store a lot of power in the capacitor, you need to have a lot of voltage.  That is, you pour the electrons onto one of these plates, pulling them off of the other, which creates a tremendous need for there to be essentially like a spark between them.  So there's a dielectric which insulates them.  And that's the challenge is to have a supercapacitor with a large plate area where the plates are incredibly close together, yet the dielectric strength insulates them against the incredible voltage difference.  And that allows them to store power.



But when they store that power, it's available virtually instantly.  That is, I mean, that's one of the dangers is, like when you're driving a car around with supercapacitors, you definitely want to make sure you've got fuses all over the place so that it just doesn't suddenly unload all at once.



LEO:  You know, this is - people say, oh, gosh, well, I'm never going to use it because of that.  But all of these systems are, if you think about it, you can't push a car around without a lot of energy stored somewhere.  And the sudden release of the energy, whether from gasoline explosion or from sudden discharge of a supercapacitive battery, is going to be disruptive to the space-time continuum.



STEVE:  Yeah [laughing].  There was a car project that Ben Rosen, a famous venture capital guy, invested huge amounts of money in, where their energy storage was a spinning flywheel.



LEO:  Right, right.



STEVE:  He had a flywheel spinning in a vacuum chamber, and he electromagnetically coupled the spin so that he would pour power in and spin this thing up and then actually run the car on the mechanically stored energy of the spinning flywheel.  And the great problem was, if it ever got loose, it was like a whirling dervish from hell.  I mean, it would just chew anything to pieces.



LEO:  Right.



STEVE:  And so there again...



LEO:  It's going to always - I don't care what you use.  It's always going to have - because you don't move a car around for a few hundred miles without storing a lot of power, a lot of energy somewhere.



STEVE:  Huge, a huge amount.  Okay.  So get a load of this.  What these guys did was they dramatically improved on existing, all existing electrochemical battery technology.  So this is significant.  They created electrodes.  One of the things you need is you need electrodes with high surface area.  That is, you want, like, well, they call it "nanoporous."  You want to think of it sort of like an incredibly porous sponge, so that the electrode itself has a very, very high surface area, so that it's in contact with a large volume of electrolyte.  What that means is, first of all, it lowers the resistance because you've just got so much electrode surface in contact with the electrolyte.  And it also means that, if you're able to get these electrodes close to each other, that the total electrode distance, the separation is low.  That lowers the ion transit time.  Remember, that's the problem with electrochemical cells is they have to physically move ions through this goop.  So having large surface areas and closely spaced electrodes solves those problems.



So the way they made these is so cool because we can all visualize this.  They started with microspheres, polystyrene, like a volume of microspheres held in a colloidal suspension.  So just like mixed in a goop, or like these microspheres.  And they came up with a way of making them self-organize.  Everyone's sort of familiar with, like, when you put billiard balls in a rack, how all the balls are able to pack.  And if you think about it, you can pack another layer of spheres exactly on top of that layer and so on.  So it's possible to create a solid array, almost sort of like a crystalline lattice, of spheres.



So what these guys invented was a way of evaporating the suspending fluid, which contains all these spheres, so that, as the fluid evaporates, the surface tension meniscus at the boundary of the fluid automatically organizes the spheres into a solid array.



LEO:  Whoa.



STEVE:  I know.  It's so cool.  So it works.  So now they have...



LEO:  That's surface tension at work.



STEVE:  Yes, exactly.  Surface tension is your friend.



LEO:  Yeah.



STEVE:  So now they have an array of spheres that are densely packed, touching each other on 12 sides.  So it's intimately arranged.  They then electrochemically plate this spherical array so that - and when you think about it, if you think of spheres, they're touching, but there's also spaces in between; right?  There's also - there's, like, the nonspherical areas, the sort of funky triangular curvy-shaped areas, if you can visualize that, that is all the air, all the air spaces that exist where the spheres are not in this array.



So they electrochemically plate this array so that all of the areas that are essentially the air get plated.  Then they have an agent which is able to dissolve the polystyrene spheres.  So after they create and after they plate all of the exposed surface area of the spherical matrix, they then essentially remove the spheres from the middle of it.  They dissolve the spheres out of it, leaving this amazing - oh, oh, I should say one thing, I forgot one step is when they've got the spherical array, they heat it up, and the spheres soften a little bit.  And so the spheres deform and come into greater contact with each other, and that changes the overall shape in a way that is beneficial to them.



Then they dissolve the spheres out of this so they end up with what they called a "scaffold."  If you can picture this, this is a scaffolding of essentially the spherical, but now a little bit deformed, outlines of the spheres, all interconnected in a solid piece.  So it is a nanoporous mesh.  And that is the basis for their electrodes.  They then plate one of them with a negative electrode substance, and the other one with a positive electrode substance.  They've come up with a production methodology that allows them to do this in a production mode.  And they end up with, and this is what's amazing, is electrochemical cells which can charge and discharge at the rate of a supercapacitor and store on the same order of energy, hundreds of times more energy per volume than traditional lithium-ion batteries.  And so it is a breakthrough.  Now, the one glitch, Leo...



LEO:  There always is, isn't there.



STEVE:  There's always a glitch, is it doesn't cycle very well.  If you charge it and discharge it and charge it and discharge it, when I was - I was all excited as I'm reading the paper.  And then it's like, whoa.  I mean, it loses, like, 16 percent of its capacity after the first cycle, and it goes downhill from there.



LEO:  So this is nice, but it works once, is what you're saying.



STEVE:  Well, today.  I mean, this is also, you know, they're publishing their research.  This is a really interesting, possible-to-fabricate technology that outperforms every other, I mean, there have been people who've tried to do nanoporous electrodes of various sorts.  This just blows past them all.  So this is a huge step forward.  What it does represent today, it is not only more rapid charging, but also much greater total energy density.  And so there are applications, for example, think a pacemaker, where you want - and that's really how they're selling this now.  Remember it's called "high-power lithium-ion microbatteries."



So they're not suggesting that this is going to replace the high-end lithium-ion cells we have in our electric cars today.  But they're saying today it is vastly superior to existing battery technology for, like, implantable medical devices, where you're not having to charge and discharge on a daily basis.  So the cycle life of the battery is not a problem.  And this allows whole - basically it changes the terrain for medical implantable devices and also long-term remote sensors, or maybe, for example, satellites, where they've got exotic power supplies now that are arguably maybe not safe because they typically use radiation sources.  You could probably replace them with these kinds of batteries and be vastly less expensive, lower technology, and also long-term sustainable.  So very cool.



LEO:  Someday.



STEVE:  Yes.  So this is just a step forward.  And we still don't know whether supercapacitors are going to get there before nanoporous, multidimensional, continuous, spherical-derived, electrode-based batteries.  But this is a nice step forward.



LEO:  I'm just really glad that they're working on this stuff.  That's the key.  They must be, of course.  This is huge.  Because we've essentially created, and smartphones are the perfect example, but cars are another really good example, highly sophisticated mobile technology that has outpaced battery technology by a century.



STEVE:  Yes.  And in fact the article starts, in its abstract at the beginning, talking about how, despite the fact that microelectronics has enjoyed incredible scaling factors in capability and size, batteries have not changed all that much.  But imagine if they could just solve the cycle life problem, and there's no reason to believe they won't be able to, imagine that our smartphone batteries still, well, they charge in a few minutes, and they last a week.  I mean, and they're no bigger.



LEO:  Okay.  Thank you.  I'll take two.



STEVE:  Yeah, I know.



LEO:  Yeah.  I mean, I have this phone; I love this phone.  But especially because I'm using it so much, it goes half a day.  That's no good.



STEVE:  No.  We need to fix that.



LEO:  Yeah.



STEVE:  Speaking of fixing that, I got a nice note, dated  April 10th, so, what, two days ago...



LEO:  Well, except that this is the 24th of April, but other than that, yes.



STEVE:  Two weeks ago.



LEO:  Welcome to [inaudible].



STEVE:  And I just saw it in my mailbag.  He [John Moehrke] said, "SpinRite saved my 85-year-old mother's laptop."



LEO:  Oh, this is like my story, yeah.



STEVE:  He said, "My mother is a true geek grandma.  She's been an early adopter of the Internet back in the '90s, so I'm not surprised that I, too, am a geek.  I have provided Security Now! some feedback on the topic" - and he gives a URL.  He has a blog, healthcaresecprivacy.blogspot.com.  So I guess healthcare security and privacy.  He says, "It never is good when a security geek has a family member hit by a security or privacy failure."



LEO:  Yeah.



STEVE:  Many of our listeners know about that.  He says, "Well, it happened.  My mom's laptop stopped and would not reboot.  Absolutely dead.  Being the good geek grandma that she is, off she went to buy a new computer.  She was perfectly happy dumping the old computer.  She wanted a faster, sleeker, and less noisy computer.  She had no backup and actually was okay with the loss of information.  Well, I was not satisfied with the lost data, so I got myself a SpinRite license and set it running on her laptop.  It found the hard drive and got stuck at 0.032 percent."  So clearly right at the front of the drive.  He said, "I left it run, and it was still running days later.  I moved the laptop out to the cooler temperatures of the garage in Wisconsin.  Not cold, but floating above freezing."  He says, "Yes, I shut it down to move it."  He says, "There I left it running, and running, and running.  Four weeks later it finished."



LEO:  She bought a new computer by this time and has forgotten this other computer for a long time.  But okay.



STEVE:  He says, yeah, he says, "FOUR," all caps, "weeks later it finished.  It recovered ALL," all caps, "of the photos and documents on her old machine.  I delivered them to her last weekend, a full CD-ROM full.  Thanks for a fantastic and persistent product."



LEO:  Isn't that awesome.  Yup, it is persistent.  And sometimes a month is not - is like, that's nothing.  It could go for - what's the longest you've ever heard of a SpinRite running for before it completed?



STEVE:  Well, the problem Leo, is that if people drop it out of a four-story building, and it hits cement, that is, drops the drive, and so now it shakes when it powers up, and you can hear the rattly bits inside, well, SpinRite will try.  But, you know - and it'll try till you say, okay, I don't know, but this is not going anywhere.



LEO:  But there are cases where it's just a lot of really unreliable sectors, and it could recover them.



STEVE:  SpinRite tackles them one after another, and it will work on it until it gets it.  And if you want your data back, SpinRite will not give up before you do.



LEO:  Amazing.  Amazing, amazing, amazing.



STEVE:  We're just now getting to...



LEO:  Oh, we got time.



STEVE:  ...listener questions.



LEO:  We've got time.



STEVE:  No, no, no, Leo, I mean, we've had a wonderful podcast so far.  We're an hour and 13 minutes in.  So let's just go until 1:00 o'clock, and that'll still give us an hour and a half of podcast.



LEO:  We just had a lot to talk about.



STEVE:  There is.  There was a lot to discuss this week.  And I'm sure everyone's had a good time so far.



LEO:  Yeah.  Well, we'll get as many as we can in here.



STEVE:  Yeah.



LEO:  We love our questions.  You can go to GRC.com/feedback, by the way, to get your questions answered from Mr. Steve.  And he picks usually around 10.  We'll get to as many as we can today, to answer in our Listener-Driven Potpourri #168.



Vince Reimer, Vancouver - and this is interesting because I have one of these.  He wants to know about his Nest hacking his nest:  Steve and Leo, enjoy the show very much.  Been listening since Episode 1.  Have had success with SpinRite and haven't had one cold since I started on Vitamin D.  So thank you.  That reminds me, I've got to get my Vitamin D for the day here.



I recently bought the super-cool Nest thermostat.  I have one, too, and I bought one for Lisa.  I'm buying one for everybody I know.  I love these things.  I hooked it up, and it wanted to know if it should go online and check for updates.  How cool is that, I thought, and readily gave it my WiFi password, assuming it was an innocent cul-de-sac on my home network.  Then I got to thinking about the new smart electricity meter that had been installed by the power company with at least the incipient ability to talk to my future Internet-savvy fridge and air conditioner via my existing house wiring.  I then wondered if it could talk to my smart appliances.  And since my Nest knows my WiFi password, have I not created a hole in my home network security?  What do you think?  I know this is just a curiosity.  But you have touched on interestingly edgy topics before, so I thought I'd ask.  Sincerely, Vince.



I hadn't really thought about that.  I have a smart meter on my - well, I think there's a lot of paranoia about these smart meters that the utilities are installing.  Or is there?



STEVE:  Well, okay.  So I think the right attitude to take is that everyone is probably trying to do the right thing.  There have already been articles about the lack of security of the smart meters.  And you could have predicted this.  I mean, I'm sure our listeners who've been with us from the beginning, when they heard about smart meters, they rolled their eyes and thought, oh, this is not going to turn out well.  And sure enough, they have, at least first-generation, really crappy security, easy to crack, I mean, I don't know what moron in this day and age could design something like that, that wouldn't be right initially, because again, a lot of these problems we know how to solve.



For example, we were talking about the one-time passwords.  It's like, no one should invent a new algorithm for that.  We've got that.  That's done.  Just use the one that everyone else is using, and you get all kinds of economies of scale.  So don't go and reinvent that.



Similarly, we know how to do security for something like a smart meter.  But apparently, for whatever reason, that's not what happened.  Similarly, the Nest is, I'm sure, designed to be secure.  The question is, did they get it right?  Because, for example, routers were designed to be secure.  And we know how many millions of them are exposing the Universal Plug & Play protocol to the public interface, which is totally insane.  So there was a mistake.



So giving the Nest access to your network is probably okay, but it's arguably creating an opportunity for a problem to be exploited.  So I know that you're able to access the Nest from the Internet.  You can get pictures of it.  You can change your settings.  You can do things.  Presumably it connects to Nest Central, and then you log into their website, and there's some communication.  But that's creating a connection out of your internal network, where the Nest exists.  And we know that it's microprocessor based, and it's smart.  And we have seen instances where people are downloading trojans into people's routers.  So you've got the same potential.  Again, I don't want to upset anybody or scare anybody.  I would say, if you hooked it to the Internet to update its firmware, then...



LEO:  It's always online.  It's always online.  So it's getting the weather for my locale.  In fact, I'm just - I just turned the heat down.



STEVE:  Ohhhh.



LEO:  You think of it as a little computer; right?  It's getting on your WiFi.  I just turned the heat down.  I can turn it up.  My mom's at home.  If she's cold, she can call me.  I can say, yeah, I'll turn up the heat.  And I can just turn it right like that.  She's probably wondering why the furnace keeps coming on.



STEVE:  Leo's at work playing with his new toy.



LEO:  I'm playing with my toy.  So that's why it's online.  And, yes, of course getting updates.  But, I mean...



STEVE:  So what I was going to say was...



LEO:  ...lots of devices get on the network; right?



STEVE:  Yeah.  What I was going to say was, if you don't use the online features, then take it offline.  Just standard security precaution.  You close the ports you don't need rather than leaving them all open.  If it doesn't need to be on the 'Net, if you're not using those network-enabled features, then tell it, like change your network password so it no longer knows what it is, or erase it from it, if you can do that.  So, I mean, that's just what I would do.  Presumably they did everything right.  But now you're depending upon them to have done everything right.  And we know that hackers apparently have a lot of spare time on their hands.



LEO:  Right.  Right.



STEVE:  And it represents another, yet another target.



LEO:  Most of the features, I mean, there's a lot of features of the Nest.  A great many of them want to be online.



STEVE:  Yeah.



LEO:  I mean, it really...



STEVE:  Well, and you know, Leo, that was on purpose.  I mean, that was - how are you going to sell, what is it, $300 or something?



LEO:  Yeah, 250, yeah.



STEVE:  I've got one, too.



LEO:  Oh, you do.



STEVE:  It's still in its box.



LEO:  Oh, okay.



STEVE:  Oh, yeah.



LEO:  I can lock it with a numeric locking PIN in an allowable temperature range.



STEVE:  Oh, that keeps the hackers from turning your heat up.  That's good.



LEO:  Yeah, I mean, I'm not sure what they're going to do with a Nest, to be honest.  All they can do is turn the furnace on or not.



STEVE:  No, clearly when they were trying to leverage a $250 thermostat, they sat around thinking, okay, how can we justify this price?  We've got to give this thing features that, you know, just coming out of its ears.



LEO:  Well, and it does.  It has some really, really great - it learns.  It's got a motion sensor, so it knows when there's somebody in the house.  It learns your settings.



STEVE:  I just like to look at it.



LEO:  It's beautiful.



STEVE:  It's just gorgeous.  Oh.



LEO:  And really, seriously, if they get into my Nest, all they can do is turn the heat on or off.  And you can block that.  But I can see...



STEVE:  No, no.  No, no, no.  If it knows how to - if it's on your network, and they get into it...



LEO:  Oh, they can get the password from it, I guess, yeah.



STEVE:  Well, then they have access to your network.



LEO:  Right, right, right.



STEVE:  So, I mean, I'm not saying that's a likely...



LEO:  How about putting it on a guest network or a separate access point or something like that?  Would that...



STEVE:  That would work, for example, if you had arranged your home so that you had two WiFi systems, a trusted and a visitor WiFi, and the visitor WiFi was strictly - had no other access to the other systems in your home, then absolutely put the Nest on the visitor channel, yup.



LEO:  Okay.  Okay.  That's easy enough.  Question #2 - we're trucking along here.  Trey Dismukes in Houston wonders about faked website fingerprints:  If someone's running an HTTPS proxy on me, what's to stop them from altering the fingerprints you display on the fly?  It seems like this tool would be more useful out of band.  Perhaps an iOS app that will return the fingerprint when I enter the URL.  He's talking about your fingerprinting app at GRC.com.



STEVE:  Right.



LEO:  Or even an SMS short code I can text to a URL that will respond with the fingerprint.



STEVE:  So that's certainly a good point.  I do talk about it and address it at the bottom of the page [grc.com/fingerprints.htm].  Everyone should know I'm hard at work on a next-generation solution for this.  It's been a big hit.  People really like the idea of being able to check for anyone intercepting their secure traffic.  However, there have been problems with just sort of confusion.  Some people wonder, they worry if the fingerprint is case sensitive, whether the hex being uppercase ABCD and F - wait, ABCDE and F - whether it matters that it's upper or lowercase.  It doesn't.  And so on.  So I've got something that's very cool coming out soon.  But I've been thinking about this problem of we're relying on a potentially intercepted connection to report on connection interceptions, which is obviously a Catch-22.



LEO:  Hmm, yeah.



STEVE:  And then I thought, wait a minute.  What about the EV certificates, the extended validation certs?  Because I'm all EV, and my site shows up as green on all the browsers now that support EV, and in fact they all do.  And so I did some exploring.  And it looks like, and I still have to verify this, Firefox and Opera and Chrome on Windows all - and probably Chrome on Mac - still adhere to the fundamental principle of extended validation certificates, which is that they are special.  They build into the browser an awareness of which certificate authorities' root EV certificates are valid for signing, and that can't be changed.



Unfortunately, Microsoft somehow didn't get the memo.  They completely screwed up extended validation.  There are even links that Microsoft has in their Knowledge Base about how you can make your corporate server come up green.  And it's like, oh, no, that's, I mean, now it means nothing.  If certificates not issued by EV certificate authorities can be made to show green on Internet Explorer, then IE is broken for extended validation completely, meaning that it's spoofable.



But the point is that the good browsers that have adhered to this cannot be fooled.  So what this means is, if you go to GRC, and you're seeing green, there's no way that a proxy can intercept that for Firefox, Opera, and Chrome because they understand extended validation means what it's supposed to.  And so that's one thing, the extended validation is something that no proxy which is intercepting SSL can spoof.  It is unspoofable when it's implemented properly.



So that's, I mean, what that also means, if you know that your bank is extended validation, all you have to do is see that it's green on one of the good browsers that correctly handles extended validation certificates, and you know you're safe.  So I'm going to be adding, among other things, a display for extended validation so that you know if your bank is supposed to be EV, so that when you go there you can see if that's what you're getting.  Which is a good thing because that will push the use of EV certificates, which are substantially more secure for exactly this reason, than non-EV certs.



LEO:  Leo Laporte, Steve Gibson.  We can be a little late for This Week in Google.  Let's do a few more, what do you say?



STEVE:  Okay, sure.



LEO:  You up for it?  Kris Ackermans in Kortenberg, Belgium shares a wonderful tip for running 16-bit code on Windows 7 64-bit:  Just heard you mention your concerns about running - you use Brief, which is not only 16-bit, it's DOS. 



STEVE:  It's real 16-bit.



LEO:  It's real.



STEVE:  It's actually maybe 14 or 15-bit.



LEO:  Plus a parity bit - 16-bit programs in Windows 7 on Security Now! 399.  Best way to do this is to use the XP compatibility mode infrastructure.  Now, to do this, by the way, Steve, you have to have Windows 7 Professional, the business version.  But install Windows 7 32-bit in the VM instead of XP.



STEVE:  Is it Pro or Ultimate?  Isn't there an Ultimate also?



LEO:  There's Ultimate will do.  Yeah, I think Ultimate will have it.  Ultimate must have it.  It has everything.  But the Pro will also have it, Professional.  It was deemed, this XP emulation was deemed a business feature.  So you're going to get the high-end business version of Windows 7.  But he's saying don't use - so what you're going to get is, what is it, Virtual Drive, Microsoft's VM solution [Microsoft Virtual Machine], and a copy of Windows XP.  But he's saying install Windows 7 in the VM.  You could actually do both if you wanted to.  The advantage to any other VM solution is the programs installed in the VM appear on the Start Menu of the host as all other programs do.  And you only see the program's window.  You don't get this big Guest OS window.



He says, I've been using a 16-bit accounting program like this since the IT department moved us to Windows 7 64-bit some years ago.  So he's saying you can run Windows 7 64 as the main OS, use the VM - you could run XP, or you can run, if you prefer a more modern, you could run Windows 7 32-bit in the VM.  And essentially that gives you a 32-bit window.



STEVE:  That's really interesting, too.  What I love is that they did it right, the way - I think it was Parallels who first showed us this.  I know that we talked about Parallels years ago...



LEO:  On the Mac, yeah.



STEVE:  ...on the Mac, where it just looks like you have Windows sort of like cohabitating with your Mac.  So all you're seeing is the hosted application window sitting there without the whole - for example, I'm still using VMware as my go-to VM manager.  And it's an environment that encapsulates everything, and then you work within it.  But I love the idea that you could just launch an app and sort of behind the scenes it's actually firing up a 32-bit OS that supports 16-bit apps and then runs the app in that.  So thank you very much, Kris.  I'm glad to know that's possible.  I'm sure that's what I'll be doing - for my DOS apps, of course.



LEO:  Yeah.



STEVE:  Yeah.



LEO:  You can have a command line.  It's okay.  Jehan Procaccia, or Jehan Procaccia - I have no idea how you pronounce this.



STEVE:  You did a good job of that. 



LEO:  I made it up.  But that's - okay.  No one knows except Jehan how much I'm butchering his name, Jehan Procaccia.



STEVE:  And his mother knows.



LEO:  His mom.  Mom's going, Jehan...



STEVE:  But she's probably not listening.



LEO:  Why he say your name so bad?  He's in Paris, France, and he wonders about bitcoin losses.  Leo talked recently about backing up his bitcoin wallet.  What would happen to the overall amount of bitcoin on the planet if one loses one's wallet?  As creation of Bitcoin is limited in volume and time, will those lost bitcoins be allowed to be recreated, or are we going to have this kind of coin drain?  Thanks for the good job, and blah blah blah.  I wonder that myself.  What do they do about that?



STEVE:  Yeah, and, you know, this whole recent bitcoin frenzy that we've been going through the last few weeks has spawned everybody with an opinion about what bitcoin means.



LEO:  Even Paul Krugman is writing about it in The New York Times.



STEVE:  Yeah.  I tweeted about a neat article, and I did get a piece back from a listener who said, oh, Steve, you've got it all wrong.  Here's a link to somebody who really knows what they're talking about.  Read this.  And so I've emailed the link to my iPad, so I will probably read it tomorrow.  I didn't have time while I was doing the podcast prep.  Because I'm interested in what people think about this.  But there is this notion, like a concern, which is valid, which this listener asks about, which is sort of like the evaporation of bitcoins, because there is no way to ever recapture bitcoins which are in wallets that are lost.



LEO:  Lost or hoarded, for that matter.  I mean, if there's somebody sitting on them...



STEVE:  Well, if they're hoarded they're - well, okay, out of circulation.



LEO:  Out of circulation for whatever reason.



STEVE:  Out of circulation is different than destroyed.  Because, if it's destroyed, it is gone forever.  There is absolutely no way, because your entire evidence of your ownership is the signed crypto chain in your wallet, I mean, that's what you have that you're trading.



LEO:  That's why I use Carbonite.  Now we're really talking some value on the hard drive, literally.



STEVE:  Well, and I think that's exactly the point, is when people understand that there is no one you can go to to recover your bitcoins if you lose them, they're just gone.  I mean, it's like burning paper money.  If you throw paper money into the fireplace, you can't go to your bank or Uncle Sam and say, oh, gee, I burned a stack of money.  And they're going to go, uh-huh, sure you did.



LEO:  But the difference is the money supply can be fixed because the bank can print more.



STEVE:  True.



LEO:  You know there's a huge - there's god knows how many billions of pennies are out of circulation.  But the government just makes - don't worry, we'll make more.  You can't make more with bitcoin.



STEVE:  Well, and so the countervailing aspect to that is that you can divide bitcoin down to microscopic size.  I really ought to know how many zeroes there is.  It's like 12 zeroes, you know, 0.000000000000 of a bitcoin you're able to transact with.  So I just think this is going to end up regulating itself.  People who lose them, oh, well, that's too bad.  But the market will set the value based on the active trading.  So if people are hoarding them, they'll just be out of circulation, and the market won't account for those.



LEO:  This is the complexity of macroeconomics.



STEVE:  Oh, yes.



LEO:  And unless you're a...



STEVE:  It's no wonder everyone has their own opinion and a different...



LEO:  Yeah, if you're not a trained economist, it's kind of hard to understand how all of this fiat currency works and everything.



STEVE:  And actually, Leo, I don't think they know, either.



LEO:  No, they're making it up.



STEVE:  I think they get degrees - yeah.



LEO:  They're making it up.  I'm just trying to look through...



STEVE:  They're wrong as often as they're right.



LEO:  Yeah.  Oh, yeah, we know that.  In fact, did you see, there was a Paul Krugman article about some economists, I think they were at Harvard, who published a paper that was taken as gospel forever after that said that the federal deficit cannot exceed 90 percent or some disastrous crisis will happen.  And so that Congress and everybody have been saying, you know, blah blah blah.  It turns out they made an error in the Excel spreadsheet.  They finally - they didn't want to publish the spreadsheet.  They didn't want to publish it.  Finally they gave it away, and people said, wait, you've got a - there's a mistake in here.  It's like...



STEVE:  I love that peer review.



LEO:  A literal error.  And it's become gospel.  And it's a typo.



STEVE:  Wow.



LEO:  I just love this stuff.  It was a great article.



STEVE:  And their common sense didn't lead them to the correct result.  They believed their formulas over what their gut told them.



LEO:  Well, exactly.  Not only their gut, but evidence.  Because in fact - I think it was the other way around.  I think their gut told them, and they wanted the model to match what they thought was the case.  And in fact they were wrong, and history has proven them wrong, but...



STEVE:  That's what we call bad science, Leo.



LEO:  Yeah.  Yeah.  It's really interesting.  The article was published April 19th in the Opinion section of The New York Times.  It's Paul Krugman, who is a Nobel winning economist.  He talks about two Harvard economists, Carmen Reinhart and Kenneth Rogoff.  Their paper was called "Growth in a Time of Debt," and it said there's a tipping point for governmental indebtedness.  Once it exceeds 90 percent of GDP, economic growth just ends.  So you can't owe too much because then it will just kill it.  And then it turns out, well, um, well, uh, there was a typo.



STEVE:  We meant, in our formula we had, we had M4, and we meant M5, so...



LEO:  And then they said, but we really never said this 90 percent threshold.  And of course, you know, they have admitted there was a little - you know, math is hard.



STEVE:  Yeah, well, economic science is an oxymoron.



LEO:  Fascinating stuff.  Fascinating stuff.  Just amazing.  Gosh, you know, it's amazing we survive as a species.  Joe Rodricks - one more.  We'll do one more.  How about it?



STEVE:  Okay.



LEO:  Do you want to pick one?  There's six remaining.



STEVE:  Oh, there is one, yeah.  There's something that I had intended to get to, where is it, No. 8.



LEO:  All right.  Brandon Brimberry.  You just like his name.  Brandon Brimberry in Indianapolis.



STEVE:  I am a fan of alliteration, yes.



LEO:  Leo Laporte and Brandon Brimberry - wonders about the Butterfly Labs scam:  What's the story on Butterfly Labs?  I only know about it because I heard it on the podcast.  Are they really going to ship their hardware on their website?  This is the company that was making bitcoin mining hardware; right?



STEVE:  Okay.  So let's get the question done, and then we'll...



LEO:  Yeah, then we'll explain.  The price and the specs seem too good to be true.  Currently, if someone bought the 5 gigahash model on their website, with the current bitcoin valuation at $274 [coughing extravagantly] - that's not quite the right - not now.



STEVE:  Oh, that was last week.



LEO:  Yeah, that was last week before the crash.  At the current difficulty level and coin minting rate...



STEVE:  That was an hour ago.



LEO:  Yeah, it was an hour ago - that miner would make around $900 a month.  What's your opinion?  Are these boxes going to ship?  Is the whole company a scam?  I ordered one, so your opinion is very important to me.  I think they're shipping, I think they started shipping this week.  I thought I read that.  Also I noticed on their site they take PayPal and bitcoin.  That's like the snake eating its own tail.  I like the bitcoin idea, but it just dawned on me, if they never plan to ship any hardware, and they take bitcoin, hey, there's no governing power to give bitcoin buyers their bitcoin back, says Brandon Brimberry, bitcoin miner.  What do you think?



STEVE:  Okay.  So here's the deal.  I have no information about, like, what the future holds.  What we do know is, in the past, they have been real.  They have shipped FPGA-based, high-performance bit-mining boxes.  Lots of people are using them and very happy.  That's why their credibility for their announcement of a super-galactically, screamingly fast, ASIC-based bit-mining box held so much sway.  So what they've done is they've gone from FPGA, field programmable gate arrays, where you basically take a generic software-configurable hardware, an FPGA.  They were using that to outperform the GPU, the graphics processing unit-based bitcoin mining hashing systems.  Then they said okay, we've pushed FPGAs as far as we can.  The way to really make screaming mining machines is an application-specific IC, meaning we're going to design our own integrated circuit from scratch.  Now...



LEO:  Is that hard to do?



STEVE:  Well, it's another - yes.  It's another scale of difficulty.  All kinds of things can go wrong.  So it may have been too great a stretch for them.  Apparently, because I did do some poking around when I saw Brandon's question - because I should also mention this is representative of many of our listeners who are wondering if Butterfly Labs is a scam.



LEO:  Well, I even see on the bitcoin forums considerable chatter about that.



STEVE:  Oh, huge amount, yes.  And I have to say I was in a position once, I was going to ship SpinRite 3.  SpinRite 2 existed; I announced SpinRite 3; we sent out the upgrade announcements.  And just as I was getting ready, Microsoft released DOS 6, which incorporated compression in the OS, which SpinRite was completely incompatible with.  And I thought, well, I can't ship it.



LEO:  That was a nightmare.  I remember that compression, OS-based compression.



STEVE:  Oh, Leo.



LEO:  Oh, what a nightmare that was.



STEVE:  It was a disaster.  But for me it meant...



LEO:  Thanks, Microsoft.



STEVE:  ...that I had all this money from people who desperately wanted SpinRite 3, and I never shipped it.  I shipped SpinRite 3.1, but I was six or seven months late.  We kept offering people their money back, and they said, I don't want my damn money back.  I want SpinRite.



LEO:  Just give me the program, yeah.



STEVE:  And but I couldn't ship it if it was going to be incompatible with DOS.  So anyway, I will never again, I mean, I learned my lesson.  My column in InfoWorld was suspended because people were saying, how can Steve be writing a weekly column if he hasn't shipped SpinRite?



LEO:  Yeah, get to work, Steve.



STEVE:  Like, yeah, that's a good point.  So my gut says that these guys just got in over their head.  Apparently they have this backlog.



LEO:  It is delayed.  It's delayed; right?



STEVE:  Oh, seven months.



LEO:  Oh, okay.



STEVE:  Apparently seven months.



LEO:  It's not shipping.  I was mistaken.  Something else was shipping, some other bitcoin...



STEVE:  So seven, yeah, well, there is.  There's, like, is it Avalon?



LEO:  That's the one that shipped, yeah.  Yeah, yeah, yeah.



STEVE:  And it's a nice-looking unit.  But this thing outperforms Avalon's.  So if these guys can get it out the door - and, I mean, I'm sure somebody - I'm surprised they're not communicating better.  They ought to be better communicators.  I saw somewhere that they had 35,000 units on backorder.



LEO:  Ohhh.  Now, were they taking the money?



STEVE:  Yes.



LEO:  Oh, see.  The thing on a preorder to do is to say, we'll get your order, but we won't charge you.



STEVE:  Yeah, well, they probably needed the money.



LEO:  Yeah, they were financing the research.



STEVE:  To finance the development of this.  So my sense is...



LEO:  That's what Kickstarter is for.



STEVE:  Yeah.  My sense is these guys are probably real.  But they are probably in trouble.  I have a feeling that they're not sleeping.  I wasn't sleeping either when I was really under the gun.



LEO:  Well, that's because you're honest.  Who knows whether they're sleeping.



STEVE:  Yeah, I just - I guess I want to believe that they're okay.  I don't have any specific knowledge.  But there must - it must be that there have been journalists who have interviewed the executives to get the whole story.  So the whole story must be available somewhere, but I don't have it.  I just know that, when they get this thing out, if they do, the ASIC approach raises it to the entirely next level of hashing performance.



LEO:  But somebody has to design this integrated circuit, and it's nontrivial because it's application specific.  I mean, you're building it into the silicon.



STEVE:  Yeah.  It's way, way, way easier today than it was 10 years ago.  There's all kinds of engineering support.  They can take their designs, and there's automation to create it.  And the problem is, when you get your first builds, maybe there's some bugs in the chip.  There may be some mistakes that all of the simulations you ran didn't reveal until you actually had it.  So I just think they're probably really behind the eight-ball and doing everything that they can to get this thing done.



LEO:  Just ask Jeri Ellsworth.  She knows how hard it can be.  Hey, Steve, the leaf blower brigade has arrived, so I think this would be a good time to wrap things up.  Steve Gibson is at GRC.com.  That's his website.  And that's where you'll find, oh, my gosh, so much stuff.  First of all, SpinRite, the world's finest hard drive maintenance and recovery utility, now at Version 6.0.  So those Version 3.0 days, they're long gone.  And by the way, so is operating system-based hard drive compression, thank god.  What Microsoft didn't realize is hard drive capacities were going to increase vastly.  You didn't need to compress the hard drive.  It was because - they were doing it because there was a commercial program, I'm trying to remember the name of it, that did it.  Remember that?



STEVE:  Theirs was DoubleSpace.



LEO:  DoubleSpace.



STEVE:  And Stac.



LEO:  Stac was the big one.  And so Stac started doing it, and Microsoft said, oh, we'd better do it.  DoubleSpace and Stacker.  Stacker.



STEVE:  Stacker, yup.



LEO:  Stacker.  Oh, boy.  Remember those days.  Bad old days.  They made drives so unreliable.  Anyway, when you get to GRC.com, there's all sorts of free stuff you could check out, including, of course, this show, 16Kb audio and transcriptions available there.  We have full bandwidth audio, video as well, at TWiT.tv/sn for Security Now!.  And of course if you subscribe you can get those on demand, every time there's a new episode.  iTunes and all the other places have it.  When you have a question for Steve, don't ask him in email.  Send it to - just go to GRC.com/feedback and fill out the form there.  That's the only way you'll get him to respond.  And he does it by answering these questions.  We have others.  Maybe we'll just use it next time.  Do you know what you're going to do next week?



STEVE:  I don't yet.  But I'm sure, I mean, there's so much going on...



LEO:  No lack.



STEVE:  ...that I have a whole backlog of things to talk about.  But something may come up in the meantime.  So we'll just play it by ear.  I'm sure we'll have a good podcast.



LEO:  We'll talk next week.  Every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1800 UTC for GRC and Steve.  Thanks, Steve.



STEVE:  Thanks, Leo.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#402	

DATE:		May 1, 2013

TITLE:		BitTorrent Sync

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-402.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with the week's security news, Steve and Leo examine everything that's currently known about the recently released "BitTorrent Sync" peer-to-peer file sharing and folder synchronizing application.  Everything seen so far looks 100% correct and VERY useful.



SHOW TEASE:  It's time for Security Now!, ladies and gentlemen, our May Day episode, with Steve Gibson.  We're going to talk about something new from BitTorrent that actually sounds amazingly useful:  BitTorrent Sync.  Some security updates, too.  It's all next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 402, recorded May 1, 2013:  BitTorrent Sync.



It's time for Security Now!, the show that covers your security and privacy online with this guy right here, the Explainer in Chief, Mr. Steven "Tiberius" Gibson.



STEVE GIBSON:  Oh, tease me, Leo.  We have another Star Trek in about two weeks.



LEO:  I know.  I have to throw that at you.  Oh, that's right, this is going to be the...



STEVE:  I think it's May 17th is the date.



LEO:  The solar flare...



STEVE:  Not that I'm counting or anything.



LEO:  The sun flare Star Trek.  Reboot.  I'm excited.  Looks good.  Everybody's loving the trailers, anyway.



STEVE:  Well, and J.J. does such a good job with these.  I mean, he's turned them from sort of slow-moving, intellectual, thoughtful sci-fi into real action movies and has consequently really broadened the audience.



LEO:  Right, I agree.  I can't wait to see what he does with Star Wars.  That's going to be amazing.



STEVE:  What?



LEO:  Isn't it J.J.?  Yeah, J.J. Abrams is directing the next Star Wars.



STEVE:  Well, how - what next one?



LEO:  What next Star Wars?  Oh, you're not up on this, huh?  So Lucas...



STEVE:  Luke is in his retirement?  He's a retired Jedi?



LEO:  Well, Lucas sold the franchise to Disney.  Remember that?



STEVE:  I remember.



LEO:  Okay.  So Disney's already signed J.J. Abrams to do - I'm not sure which episode it'll be.



STEVE:  I do remember that, now, too, yeah.



LEO:  Yeah.  And all of the originals will make appearances, obviously as old men and women.



STEVE:  Maybe Jar-Jar could be in a casket.  That'd be...



LEO:  Princess Leia:  "I did a lot of coke in my middle years, but I'm back.  Help me, Obi Wan Kenobi.  You're my only hope."  And it'll be fun.  It'll be fun.  There's something about Harrison Ford, he just - he has a crazy look in his eyes all the time.  Am I not right?  I'm not wrong?



STEVE:  I watched him on "42," which was a great movie, by the way.  I did enjoy that.  That was last Friday.  This Friday, of course, we have "Iron Man 3" coming out, so...



LEO:  Yeah, I'm looking forward to that.  Looking forward to that.



STEVE:  Did really well in its European release, just made huge money.



LEO:  Yeah, people are raving about it.  There's something about Harrison Ford now.  I don't know, just looks like he's got crazy eyes.  There's just something about him.  He's scary-looking.  Maybe it's that smile.  Anyway, let's get to the - you know, we're not here to discuss Star Wars.



STEVE:  They're not going to get Harrison Ford in this Star Wars.



LEO:  Apparently they are.



STEVE:  No.



LEO:  Everybody.  Luke, everybody.  They're all signed.  That's the scuttlebutt.



STEVE:  Okay, that would be fun.



LEO:  But they won't be the stars.  It'll be just like Leonard Nimoy was in the last Star Trek.



STEVE:  They'll all be in wheelchairs.



LEO:  So...



STEVE:  That, yeah, anyway, never mind.



LEO:  Anyway, never mind, no.



STEVE:  Let's do a podcast.



LEO:  Let's do a show.  And this is a show about security.  What are you going to do today?  I think you said - did you say BitTorrent?



STEVE:  I did.  We've never really talked about BitTorrent  except as it relates to peer-to-peer filesharing technology through the last, what, seven or eight years of the podcast.  But they have released something last week which was - which they began - we began to hear rumors about it a couple months ago, in January.  And it generated so much buzz among our listeners as relayed to me through Twitter that I decided I had to go take a look.



And from everything I've seen, they've done everything right.  This is BitTorrent Sync.  And the compelling aspect of it is that it uses no third party.  It is not a cloud storage solution.  It allows individuals or ad hoc groups to create their own drive synchronization networks using the well-proven BitTorrent peer-to-peer technology, the NAT traversal, I mean, all the things that make BitTorrent work, they've moved over into sort of a standalone sync client that is cross-platform, runs on everything.  The security looks very good.  We'll get into it in detail.  But I think this is a strong contender for a great solution for people whose need fits what this does.  So there was so much interest, I thought, well, let's talk about it from a security standpoint.



LEO:  Yeah, because it could be a free replacement for Dropbox, for one thing; right?



STEVE:  Yes.  Yes.



LEO:  But we've got to think about what we're doing here.



STEVE:  Yup.



LEO:  This is certainly a crowded category.  Good.  And of course we've got the security updates.  Boy, I'm just looking.  And there's one big one that we really want to talk about.  So, Steve, let's get into the tech news, or the security news.



STEVE:  We have some hacks of the week, as we almost always do.  Probably people know, although I didn't mention it last week - I'm not sure if it happened after last week's podcast.  But there was a hack of the Associated Press Twitter account where someone tweeted, so essentially on behalf of the Associated Press, that there had been a bomb at 1600 Pennsylvania Avenue.  And the U.S. stock market...



LEO:  Crashed.



STEVE:  ...immediately crashed.



LEO:  Yeah, yeah.



STEVE:  It was a spike.  It recovered a few minutes later, after it became clear that this was a false report.



LEO:  It's programmed trading.  I mean, it's so fast now, it's not a human doing it.  It just happens, you know.



STEVE:  Right.  So there were bots that were monitoring the Associated Press feed, and they triggered on keywords, "White House" and "bomb," and...



LEO:  Sell!  Sell!



STEVE:  ...immediately sold off a lot of stuff.



LEO:  Yeah, yeah.  Understandably, frankly.



STEVE:  So the lesson here, though, which is really important, obviously, is that something that began as just sort of a, like, oh, you know, I just had a great hot fudge sundae, has become a major artery for mission-critical communications.  I mean, Associated Press is sending out news on their accounts.  So the security of those becomes important.  And this was a group called the Syrian Electronic Army that took credit for last week's hack.



Well, they're back, and this time they claim to have hacked 11 of the Guardian's accounts.  The Guardian is, of course, a very large U.K. newspaper and media outlet.  Twitter immediately suspended most of the Guardian's accounts.  And then they have been proactive, really for the first time, where they have gone out and contacted major news organizations around the world who have Twitter accounts and use them for these sorts of purposes and to, like, work with them to verify their security and explain to them that this has really become important.  And of course we do know that Twitter is adding - is now - there was a job offer out, I think it was in February, looking for a programmer to implement multifactor authentication, and we know it's coming for Twitter.  So that's all good news.  And we're assuming that it's going to be using the standard OATH technology that we talked about at length last week.



So, yeah, I mean, this is the - I think what happens is we're seeing a common sort of trend again where Twitter was in its infancy years ago.  People got accounts, and they weren't important.  So they used bad passwords, weak passwords, back when they didn't matter.  Then, over the years, Twitter has become a force to be reckoned with, significant content carried, yet the accounts were never updated.  So they're still using the weak passwords that you may have been able to justify five years ago.  Now you really can't.  Now...



LEO:  I think you're charitable.  I don't - I think you're being kind.



STEVE:  This is how it happens, Leo.



LEO:  I guess.



STEVE:  This is why somebody still has "monkey" as their password.



LEO:  Yeah, but there's no reason, if you're the Guardian, to have weak passwords.



STEVE:  But my point is that...



LEO:  They thought it was meaningless.  I understand, yeah.



STEVE:  ...unless somebody says, unless someone goes through and does an audit and a sweep to, like, force an analysis and change - and everyone's busy.  They've got other things to do.  So people say, how can this have happened?  Well, it's just that once upon a time it wasn't important.  We've seen this with personal computers where people used to say, oh, I don't really need any security on my PC because I don't do anything.  Nothing's important.  And then they begin doing their online banking, and important things creep into an environment that never had the security that it needed in the first place.  So this is how people get into trouble.



LEO:  Do you think - do they say that they admit it was a password hack?  Or was there something more sophisticated?



STEVE:  The presumption is it was just guessed.  Maybe a social engineering thing.  They don't really tell people.



LEO:  Yeah.  I think there's something.  I don't - yeah.  I bet you, because you just, you should - if you're the Guardian, you use strong passwords, even on dumb accounts, if you're going to be the Guardian.  I think they got hacked.  They, you know, I got, from a friend, I got a direct message - it had to be because it was somebody I followed - saying, hey, you've got to see this, click this link.  I clicked the link, and it went to tvvlitter.com.  And if you look up close, you know, you don't look closely, it looks like Twitter.  And it had a Twitter login page.



STEVE:  [Laughing] 



LEO:  And, now, I wasn't fooled by it, fortunately.  But I bet you people are routinely fooled by that.  And I think that there's a lot of - I think there's a lot of stuff like that.  I really do.



STEVE:  Yup.



LEO:  So I - who knows.  We don't know how they got hacked.



STEVE:  Yeah.  Living Social also got hacked.  Now, in this case it was a loss of their entire database, 50 million names, email addresses, birthdates and encrypted passwords.



LEO:  Unbelievable.



STEVE:  Yeah.  And the good news is that the financial information was stored separately, so it was not taken.  But this was a full breach of their database with 50 million of their subscribers, their users' content stolen.  Everyone was advised to change their password, of course.



LEO:  Are they forcing them?  This is similar to - it's happened now several times to various people, but...



STEVE:  Yeah.  And it did - what I read was they were advised to change, rather than, I mean, and that's the same thought that I had, Leo, was it didn't look like all passwords were immediately rendered obsolete, and they were required to change them.  So...



LEO:  That's what happened with Dropbox and Twitter.  It's what they said was happening with VUDU.  But VUDU asks you to log in with your regular password first.



STEVE:  I know.  Oh.



LEO:  So I'm not - I'm thinking it's not exactly the same.  You can call it a password forced change, but not really. 



STEVE:  Right.  Right.



LEO:  So we'll see.



STEVE:  So there was something in the news that a number of our listeners sent that was worth, I thought, sharing.  And it was covered by a number of outlets.  And I found, like, the best story by Ryan Gallagher in Slate magazine, this was a couple days ago, about the FBI's decision to urge legislators to change the law to allow fining Internet companies who resist the FBI's requests for essentially monitoring people of interest.  And I would paraphrase this except Ryan drops a bomb toward the end of this which took my breath away a little bit.  So I just thought I would share this - it's not very long - with our listeners.



Ryan wrote, and this is in Slate, "Bad news for telecommunications companies:  New details have emerged about the FBI's efforts to upgrade its surveillance powers, and the feds' latest idea is to heavily" - and get a load of the formula here later - "fine firms that don't comply with eavesdropping requests.



"Last month I reported that the bureau said it was having a hard time monitoring services like Gmail, Google Voice, and Dropbox in real-time when attempting to spy on criminals.  The FBI's general counsel Andrew Weissmann revealed in a speech that a 'top priority' for the Bureau in 2013 was to reform surveillance laws in order to force email, cloud services, and online chat providers like Skype to provide a wiretap function.  The 1994 Communications Assistance for Law Enforcement Act (CALEA) already allows the government to mandate Internet providers and phone companies to install surveillance equipment within their networks.  But it doesn't apply to third-party providers like Google or Facebook, which has led the Bureau to claim that its ability to monitor suspected criminal conversations is 'going dark.'"  And the FBI of course famously refers to it as the "going dark problem."



"Now, according to the Washington Post, the feds have prompted a government taskforce to draft a proposal to update CALEA and the 1968 Wiretap Act to put more pressure on companies that do not currently fall under the scope of those powers.  This could involve, the Post reports, 'a series of escalating fines, starting at tens of thousands of dollars, on firms that fail to comply with wiretap orders.'  If a company fails to comply with an order in a set timeframe, it would 'face an automatic judicial inquiry, which could lead to fines.  After 90 days, fines that remain unpaid would double daily.'"  So...



LEO:  I don't think that's so different, though, from, say, contempt of court fines at the judge's discretion.  If you get a court order - which they're saying this is a wiretap order; right?



STEVE:  Yes.



LEO:  If you get a court order and ignore it, you're always subject to contempt of court.  And the judge can determine that.



STEVE:  The problem is the technology, though.  One of the things that differs here between what was done before was remember that the Internet service providers were paid to have this equipment installed.  And apparently here the idea is that they will - these third parties would be compelled to comply with the requirement, even if they don't have the technological infrastructure in place to do so.  So the concern is that it could force them to implement this in a slapdash fashion.



LEO:  Interesting.  Even before there's a subpoena or a wiretap order.



STEVE:  Well, they would have to be ready for this.



LEO:  Right.



STEVE:  You know, and we've already - we know, for example, that Google is - we talked about it last week - is actively resisting these sorts of things, saying, you know, no, we're not going to simply accept this.



LEO:  But they don't resist court orders.  They resist requests.  They immediately comply on a court order.



STEVE:  Correct.  Correct.  In fact, the EFF has a great page that we'll be covering here in a minute, that shows who does what for us.  Anyway, I'm just going to finish this real quickly.



LEO:  Sure.



STEVE:  It says, "The FBI's controversial proposal is reminiscent of what other countries have recently considered.  Governments in the United Kingdom, Canada, and Australia have each sought similar surveillance authority.  Last year, the British government published a draft Internet snooping law that would have enabled legal action and penalties against companies that did not comply with surveillance requests.  But the proposal appears to have been killed off due to political infighting and public opposition.  Canada's web spy law was also canceled after an outpouring of criticism, and in Australia the government's surveillance plans have been delayed."



So we're seeing governments having a problem getting these laws through.  And, I mean, we're sympathetic to the FBI's need to be able to watch what's going on in the case of bad guys.  And we've talked often about the fundamental tension between that and individual civil liberties and our feeling of our right to privacy.



So finishing, this says, "If other countries' experiences are anything to go by, then, the FBI's efforts will certainly not have a smooth passage into law.  Aside from privacy and civil liberties concerns, the Bureau will face tough opposition from companies concerned about the potential security risks posed by building in so-called surveillance 'backdoors' for monitoring purposes, which can be exploited by hackers.  For that reason alone, the FBI can be sure that not all companies will play ball if it tries to rewrite CALEA in a way that would strong-arm companies into complying with eavesdropping.  The CEO of encrypted communications provider Silent Circle told me" - the writer of this column, Ryan - "last year, for instance, that he would 'rather shut Silent Circle down than ever allow a backdoor or be bullied into an "or else" position.'



And then here's the coup de grce:  "In the meantime, however, the FBI does have some options on the table if it wants to spy on Skype calls or get transcripts of Gchats in near real-time.  The Bureau has a sophisticated spy trojan that can covertly infiltrate a computer to gather all kinds of data, take snaps of a suspect through their webcam, record passwords, and gather logs of conversations, as a judge in Texas disclosed last week in an order denying the tool's use."



LEO:  Well, of course.  If the bad guys have it, you figure the FBI just, hey, we could use that.



STEVE:  So reading that, I said, whoa, whoa, whoa, whoa, what?  And it turned out that Ryan reported on this on April 25th.  He said - and this is "Judge Rejects FBI Attempt to Use Spyware to Infiltrate Unknown" - and get this - "Unknown Suspect's Computer."  And so on Monday of week before last, "a judge denied an FBI request to install a spy trojan on a computer in an unknown location" - and apparently, like, not known to the FBI, and I think that one of the problems with the FBI's request in this case was it was just too broad - "in order to track down a suspected fraudster.  The order rejecting the request revealed that the FBI wanted to use the surveillance tool to covertly infiltrate the computer and take photographs of its user through his or her webcam.  The plan also included recording Internet activity, user location, email contents, chat messaging logs, photographs, documents, and passwords."  So now we know what this tool can do.



"As the Wall Street Journal reported, Houston magistrate Judge Stephen Smith said that he would not approve the 'extremely intrusive' tactic because the FBI did not know the location or identity of the suspect..."



LEO:  Yeah, that seems fair.



STEVE:  ..."and could not guarantee the spy software would not end up targeting innocent people.  Smith wrote in a 13-page memorandum" - so anyway, this goes on to explain that now we know what the FBI's spyware trojan looks like, and that they apparently have some means, we don't know what - the sense I got was that they were going to send an email to an address that they had, and that's the reason that they didn't know who or where it was going to go.  So essentially they wanted to - they were asking the judge for permission to infect an email account and then get evidence on who was behind the email account, which must have been anonymous.  And so this would be, you know, this would de-anonymize them by taking pictures of them through their webcam and also rummaging around in the hard drive.



LEO:  Here's the encouraging thing.  And thank you, Judge Stephen Smith of Houston.



STEVE:  Yes.



LEO:  The system worked.  The judge did the right thing.



STEVE:  Yes.



LEO:  The courts had to get involved.  And this is why those secret courts, the FISA courts and lack of court supervision is so scary because...



STEVE:  Well, yes.  And what Google fights is the request for information and stating in the request that, oh, and you can't tell anybody that we asked you to do this.



LEO:  Patriot Act.  Patriot Act requests.



STEVE:  Uh-huh.



LEO:  And FISA courts and all that.  The secret stuff is what - and the fact that this was exposed because a judge - because it's a public proceeding, is fabulous.



STEVE:  Yes.



LEO:  That's what we want.



STEVE:  Yes.



LEO:  So it did work in this case.



STEVE:  Some transparency.



LEO:  Yeah, transparency, yeah.



STEVE:  So - oh, and of course this relates to the prior story by noting that, if in some cases it is not possible or convenient to intercept the encrypted data in transit, then the FBI potentially has the means to get it at one end or the other of the channel.  So if you get the trojan on the individual's machine, then you're recording what their Skype is sending before it encrypts it and sends it out.  So there's that alternative also.



LEO:  Great.



STEVE:  So PayPal has become the latest single sign-on provider.  They announced a couple days ago that they are now, too, supporting OAuth, which we'll be careful to differentiate from OATH.  Remember that OATH is the standard one-time password technology that we talked about extensively last week and how it's looking like everybody is lining up behind that single standard, and that's really good.  But they're supporting OAuth, which is the technology we've also discussed many times.  That's, for example, where you go to a site, and it says "Sign on with your Facebook account."



We've talked about the concern of OATH hacking - I'm sorry, OAuth hacking - where, for example, if people get used to this, a malicious site could say "Sign on with your Facebook account" and bounce you, just exactly as you were saying, to a URL that, given a cursory observation, looks like it's Twitter.com or Facebook.com, but is subtly different, and prompt people to enter their username and password.  So there's some - I'm a little nervous about that aspect of OAuth.  I love the idea of minimizing the number of times that you need to create separate accounts across the Internet.  And I like the idea of PayPal.



Now, what's interesting is that I watched - there's a video that PayPal has up describing what this is.  And they're trying to spin it differently.  They're saying, well, this is not a social networking single sign-on.  We're a financial payment social sign-on.  And so in their example they've got some, like, high-end designer baby clothes website that they use in their example.  And so you go to this site, and you have the option of creating an account with them, or log on with PayPal.



And so what's not clear to me is how that's dramatically different from the pay with PayPal which we've had and enjoyed all over the Internet for several years.  I mean, I love it when I'm going to - when I'm buying something from a site that I may never come back to again, I really don't want to create an account.  I really don't want to give them all of my financial information.  I would much prefer bouncing through PayPal and having PayPal transfer the money to them so that it's somewhat anonymous.  PayPal will provide - I guess I provide my information.  So this is a little bit more like Google because...



LEO:  Yeah.  It's a single sign-on.  I think that makes sense because you trust PayPal for the payments.  We'll take one step further and use it for your login, as well.



STEVE:  Yeah.  And I think, though, that because one of the things that's been nice about Google Checkout is that Google Checkout will, for example, also fill in or populate or provide all of your shipping information.  So you don't even have to fill that out.  Whereas purchasing with PayPal used to be only the money, and you still had to provide that.  But I'm sure...



LEO:  Yeah, that's right.  It was a separate log.



STEVE:  Yes.  But I'm sure from this that PayPal will now provide the full population.  So this is a little bit more like a response to Google Checkout, which does more of the work for you than PayPal used to.



LEO:  Well, but it's more than that.  It's also a response to Facebook and Google's single sign-on.



STEVE:  Yes, exactly.



LEO:  And I think it'd be - the theory being, well, you trust us enough to give us all your financial stuff.  So certainly you would trust us to take good care of your login, as well, maybe more so than Facebook certainly.  And possibly Google.  I bet you Apple, you know, the next one for this is Apple.



STEVE:  Yup.



LEO:  Because Apple with iTunes also has all your information.



STEVE:  Oh, my goodness, yes.  Yep.  It makes lots of sense.



LEO:  In fact, there's been some talk about the next iPhone having more identity features.  You know that Apple bought AuthenTec, the fingerprint reading company, for more than $300 million.  And there is some thinking, I wouldn't be surprised, some rumors that there'll be a fingerprint reader in the next iPhone.  Now finally Apple's Passport might actually get credit cards.  And suddenly be not only a single sign-on, but authentication, biometric authentication, second-factor authentication.  That's an interesting, I mean, if anybody could do it kind of in one swell foop...



STEVE:  Yup.  Yup.



LEO:  ...it would be Apple.



STEVE:  Yup.



LEO:  But that's all rumor.  And you don't deal in rumor.



STEVE:  We don't.  We wait.



LEO:  We wait.



STEVE:  Okay.  So that link there, the bit.ly link, you should bring it up before I mention it because we know what happens.



LEO:  Done.  Go ahead.



STEVE:  Really nice page.  I created a bit.ly link [bit.ly/whyback].  "Why" stands for "who has your," and then "back."  So it's bit.ly/whyback, Who Has Your Back.  And the EFF put together a really nice summary page showing, from their standpoint, we know that they're really, really strong civil libertarian, user rights, user privacy protection.  And we're glad to have them because somebody needs to fight back so that there's some balance of power here...



LEO:  You bet.



STEVE:  ...in the inherent tension that we're going to have.  There's some interesting little bits here.  For example, MySpace - okay.  So there are, for those who can't see it, there are six categories that companies are rated in:  requires a warrant for consent; tells users about government...



LEO:  For content, not consent.  Requires a warrant for content.



STEVE:  Oh, for content, sorry.  Warrant for content.  Yeah, thank you.  Tells users about government data requests; publishes transparency reports; publishes law enforcement guidelines; fights for users' privacy rights in courts; and, finally, fights for users' privacy rights in Congress.  Now, I just did a quick little summary, noting that MySpace and Verizon are zero.  No stars.  Nada.  They don't do anything.



LEO:  Nothing.  They don't do diddly.



STEVE:  Nothing good for us.



LEO:  There's only one five - six-star, which is interesting.



STEVE:  Two.  There are two.



LEO:  Two.  Oh, yeah, two.



STEVE:  AT&T and Apple don't do much, frankly.  They both get one star out of those six categories.



LEO:  The star they get for is lobbying.



STEVE:  Yes.  Four companies - Dropbox, LinkedIn, Google and SpiderOak - are nearly everything.  They get five stars.  And then the two companies that are six-star winners are Sonic.net and Twitter.



LEO:  Yay.  Sonic is located up here in Sonoma County.



STEVE:  Very impressed.



LEO:  My good friend, Dane Jasper, runs it.



STEVE:  Wow.  I mean, that's not - it's not easy to get six stars on this because you've got to be...



LEO:  Dane is very committed to this stuff.



STEVE:  ...fighting, fighting for user rights in court and lobbying Congress.



LEO:  No, that's the only Internet service provider on that list with that kind of record.  He's a small, independent Internet service provider.  But not so small.  He's slowly working his way nationwide, and I'm really proud of him.



STEVE:  Well, I'm impressed.  So if our listeners are curious, bit.ly/whyback, who has your back.



LEO:  Yahoo!, by the way, one star, only in the fights for user privacy rights in courts.  Although that's a good one to have a star in.



STEVE:  Yeah, if you had to do one, you know.  They may not be so - they're not busy telling everyone what they're doing, but they're rolling up their sleeves when they have to.  Meanwhile, our listeners continue playing with proXPN.  And somebody assembled an interesting blog post with detailed instructions for configuring iOS's native, well, not native because it's not part of it, but it's an official OpenVPN client for iOS.  And so I also created a bit.ly shortcut [bit.ly/iosopenvpn].



LEO:  Oh.



STEVE:  Yeah.



LEO:  Because we had to use PPTP before; right?



STEVE:  And of course the concern is, even though I would argue that it's not a huge problem that, as we talked about, you could upload someone's captured traffic and pay $200 to Moxie Marlinspike, and he would - I think that's who it was.



LEO:  Yeah, I think it was, yeah.



STEVE:  And he would decrypt your traffic for you, given a couple days.  I mean, it's way better in open WiFi to have encrypted traffic with a PPTP tunnel using effectively 56-bit encryption, which is not enough bits anymore these days.  But still, it's better than zero.  But the OpenVPN, the official OpenVPN project does have an iOS client.  And this guy did a blog posting where he figured out how to, like, the details of the OpenVPN config file and so forth. So that's bit.ly/iosopenvpn, all lowercase, iosopenvpn.  And that'll bounce you over to his blog post, for anybody who is interested.  And then you have the benefit of full OpenVPN security, which is state-of-the-art enciphering and crypto.



LEO:  That's cool.  Very cool.



STEVE:  I had a couple little blurbs about one-time password multifactor authentication, or as we refer to it here, OTPMFA.



LEO:  [Laughing]



STEVE:  Someone tweeted me, @SGgrc.  He said, "I had to stop using Authenticator because over time they kept telling me my codes didn't match, even if I used the original setup key."  And so I just, I didn't respond to that person.  I don't think he was following me, so I was unable just to send him a DM, and I can't follow everybody because I'm up to about 35,000 followers now.



So I thought I would say on the podcast, in case he's listening, and for anybody else, if you're using time-based one-time passwords, it's important that your clock is correct.  Because that's the synchronization mechanism.  It's very clever because time, as long as we're all using the same reference, we're all going to have the same time.  And individuals are then separately responsible for having their clocks correct.  But if you do, then suddenly everything works.  And your little device, plus or minus the difference in your time, will be showing, will be generating the same key that somebody else with the same key as yours would generate given the same time.



So if you're a day, if your, like, calendar is wrong, if you've got the wrong year or the wrong month or the wrong day, then it's not going to work.  And you wouldn't want it to work.  But that's something I really hadn't explicitly said before that I thought was important to mention.  There's the sequential code generators that we've talked about.  But what's in vogue now are the time-based authenticators because they don't require a single central server, which the sequential code technology essentially does.  They just require everybody is in agreement about what time of day it is.



So that's your responsibility.  Otherwise, you can't authenticate.  But generally that's pretty easy.  Cell phone systems have that built in.  GPS has that built in.  There's NTP, Network Time Protocol on the Internet that allows your computers to synchronize.  I mean, it's hard not to know what time it is.  Maybe what day it is is sometimes confusing.  But pretty much what time of day.



LEO:  Anybody really know what time it is?



STEVE:  Yeah.



LEO:  Anybody really care?



STEVE:  And then a really interesting comment was somebody asking about reusing their Blizzard Authenticator.  And that brings up - that brought up another point that I had never discussed explicitly, was here's a problem.  We're talking about - we talked about - there was one that I ran across last week that I shared that I liked, it was an iOS application, because it showed you all of your different OATH, the time-varying, one-time passwords, the six-digit guys, changing at once on sort of a big scrolling screen.  And notice, though, that every provider has their own.  So you'd have one for Apple.  You'd have one for Microsoft login.  You'd have one for Blizzard, blah blah blah.  One for Google, of course, and so forth.



Well, so he's saying, well, wait a minute.  Can't I reuse my Blizzard Authenticator?  Well, now we're back into the sort of the equivalent problem of reusing the same password on multiple sites.  The problem is that, if you did allow a physical, like a single instance of authentication to be used on multiple sites, that would require that you gave the same secret key to all of those sites.  So all of them could simultaneously predict the same code showing in your authenticator, whether it's Blizzard or whatever.



And the problem with that, if course, is that, if one of them got their 50-million-user database stolen, with everyone's authenticator master secret, then suddenly they could attempt to use that to log into impersonate you on any other sites that you were sharing the same secret with.  So we know that's a bad idea.  The model that this is obsoleting, effectively, is the VeriSign model, where only VeriSign knows the Blizzard Authenticator master key.  And then everybody who wants to authenticate to you asks VeriSign, is this the proper token?  VeriSign looks it up and says yes.  But no one who wants to authenticate gets your master key, only the result of a test for equality.



So but the good news is that's not the model that has ended up being dominant.  I think that's good because I just didn't like that concentration of power, and the fact that it was very expensive to ask VeriSign to do this.  I mean, they've got a lot of infrastructure they have to support.  It can't be free, and it really isn't.  So here, at the cost of every single person you want to authenticate receiving a separate master key or negotiating with you a separate master key, the beauty of that is, even though you've got a scrolling list of authentication codes, none of them are the same.  And if any one or two of them did happen to leak, all the rest of yours are still safe.  So you really don't want to share and reuse those master codes.  You want to - it's easy to make them.  And it's kind of fun to have them all on a screen changing at once.  So, yeah.  I like it.



LEO:  Yeah.



STEVE:  And yesterday was a big day, Leo.



LEO:  Yes, I know.  Historic, even.



STEVE:  Historic.  And did you look at the page?  The site was down most of yesterday, and it's up now.



[info.cern.ch/hypertext/WWW/TheProject.html]



LEO:  You mean it's still online?  It's not like an archive?  Oh, that's neat.



STEVE:  Yes.  They brought it back for the 20th anniversary.  So you'll want to click there and poke around a little bit.



LEO:  I did.  It's open, yeah.



STEVE:  Okay.  It's open.  So this is the 20th anniversary was yesterday of the world's first world wide web site, the first web page.  And it's sort of, I mean, it is, it's exactly what you'd expect.  It's mostly text.  I think it's all text, in fact.  And it's, this is a hyperlink.  If you click the hyperlink, then you'll go to a different page.



[Steve and Leo expressing surprise and delight]



STEVE:  And anyway, it's...



LEO:  Remember that we were using Archie and Gopher when this came out.  In fact, it was Gopher that this was kind of the most like, except that you could use a mouse and click a link.



STEVE:  Yes.



LEO:  Instead of picking an item from a menu.



STEVE:  So 20 years it's been.  Wow.



LEO:  It's very Gopher-like.



STEVE:  20 years.



LEO:  It's amazing.  It really is.



STEVE:  So our AskMrWizard.com has asked me to let everyone know he just finished another eight of his animated videos.  And this is a very cool, classic Security Now! series, back on Episodes 25, 26, and 27.  So this is February 2006, not long after the first web page was created.



LEO:  [Laughing] It was close.



STEVE:  And I shudder to remember what my website looked like.  This is Episode 25 was How the Internet Works, Part 1.



LEO:  Oh, neat.



STEVE:  And those were three classic episodes - 25, 26, 27.  And Bob is going to fully animate all three of those episodes with a large series of video because he considers that this was the foundation upon which so many of our subsequent podcasts had been based, as we've talked about the technology of the Internet and how it works and what happens when it doesn't and so forth.  So it's AskMrWizard.com.  There's a link there, or you can go /securitynow to go right to the Security Now! page.  And it's Episode 25, How the Internet Works Part 1, and a bunch of videos there.



[askmisterwizard.com/EZINE/SecurityNow/SN025/SN025All.htm]



And I just thought I would update everybody on my own research that I've been working on the last week on certificates, the public key infrastructure certificates.  I've been continuing to do research following the release of GRC's fingerprints page [grc.com/fingerprints.htm], which has become very popular.  We're getting about 1,500 users a day.  It's sort of settled down to that.  The idea being, remember, that this allows you to check the fingerprint hash of certificates that you receive from remote websites from your vantage point and compare them to GRC's vantage point, in order to detect anyone who might be intercepting your connections.



One of the things that I realized, I think this was - I may have mentioned it last week, but I wasn't sure about it.  I remember this was - I was beginning to rant on Internet Explorer last week, and believe me, they ended up deserving it - is the potential power of extended validation certificates.  The EV certificates are those ones that all the browsers give extra attention to.  GRC is an EV site.  And in fact, probably by this time next week we will be 100 percent SSL.  I'm going to make the switch to HTTPS everywhere, essentially force the display of all of our pages to fully secure, just so that you always know that GRC should be EV.  That's important because, for browsers that have not totally screwed up extended validation, and as far as we know only Internet Explorer has completely rendered it useless, all the other...



LEO:  Geez.



STEVE:  I know.  It's unbelievable.  But I've read the source code of Firefox and Chrome/Chromium.  And they both did it right.  We have every reason to believe that Opera has done it right because they're really security conscious.  And I assume that Safari has, but I have not been able to verify it.  The problem is, both in the case of Opera and Safari, I don't have the source code, and I don't have good contacts to, like, the actual guru who could tell me what they're doing.  I've reached out to Opera but haven't heard anything from them.



LEO:  Can you presume, because they're using WebKit, that whatever is in WebKit, which Chrome uses also, as well as Opera and Safari...



STEVE:  No.



LEO:  No, it's something on top of?



STEVE:  Yeah.  What Chrome does, Chrome has an explicit policy of using the security foundation of whatever platform they're on.  So, for example, when you're in Chrome on Windows, and you say "browse certificates" or "show me certification information," you get the Windows certificate UI that is identical to what Internet Explorer shows you on Windows.  If you're in Chrome over on Mac, on the Apple Mac platform, OS X, you get exactly the same dialogues that Safari shows you.  So what the Chrome guys have done is they've tried to use the existing security and certificate infrastructure.  Now, in the case of Windows, Chrome did the right thing.  So here's what's going on, is the way extended validation certificates are supposed to function is they're supposed to actually mean something.  I mean, they're supposed to...



LEO:  Well, that seems fair.



STEVE:  Wouldn't it be nice?  They certainly are - they mean a lot to my pocketbook because I'm paying for them.  In response to that, there is much more verification of my and my company and my website identity going in, before in my case DigiCert checked me out and validated me and issued an extended validation certificate.  They are always for a shorter length of time.  You cannot get them more than two years.  The actual policy recommends one year.  But it's like, oh, no, please don't make me do this every year.  So it is two years.  But no longer than that.



The weaker form of certificate is typically called a DV, Domain Validation.  And there are even some, like StartSSL is a certificate provider, that'll just give you a free one for a year, and they just sort of say, okay, put your thumb on your wrist.  Do you feel a pulse?  Okay, good.  We'll send you a certificate.  So we would really rather have more verification than that.  Extended validation is that.  But the question is, how do we keep it from being spoofed?



And what is so cool about both Firefox and Chrome for sure, but absolutely definitely not for Internet Explorer, is that they have in their code, in the code of the browser, is the hash of the EV root at the beginning of the chain of trust that signs the certificate.  So in order for the green EV to turn on in Firefox and in Chrome, and that's Chromium whether it's over on Safari or Linux or anywhere because it's built into the code, I've carefully read the source code in Chrome, is there is a serial number, it's called an OID, an Object Identifier, in the EV certificate, for example, that I have, that I received from DigiCert.  Firefox looks at this OID, this Object Identifier, and then looks up in its internal database, that is, it explicitly does not use the public key infrastructure, this is outside of PKI, because unfortunately we can't trust PKI enough.  It is subject to manipulation.



For example, somebody could put fraudulent certificates in your root store of your computer, and we know that happens.  In fact, two AV utilities, BitDefender and Kaspersky, do this.  They intercept all SSL HTTPS communications on behalf of their users, and all EV verification disappears because they're in the connection, and the certificate that the browser receives is not the authentic one.  So that's one of the consequences of using those features in those AV tools.



But in this case, for example, with Firefox and Chrome, they verify the hash of the root signer of the chain of trust of the certificate, and only if it matches will they turn this on.  By comparison, Internet Explorer is broken completely.  It is useless.  There are pages on Microsoft's site showing companies how they can give their own websites extended validation green coloring, just by clicking a few buttons.



LEO:  What?



STEVE:  Yes.  It's unbelievable, Leo.  It's like, oh, look.  Everyone wants to have EV.  So...



LEO:  Simulate it.



STEVE:  It is, it's completely broken.



LEO:  That's horrible.



STEVE:  It's unbelievable.  It's like, oh, wouldn't you like to have that on your Intranet site?  And one of the great contributors in the GRC newsgroups did in fact run a simulation of creating a fraudulent certificate and got IE to turn green with a certificate that he made himself.



LEO:  Self-signed.



STEVE:  So it is, yes, it is completely useless.  Internet Explorer's indication of extended validation means nothing, unfortunately.



LEO:  Wow, wow.



STEVE:  Yet the good news is Firefox and Chrome did it right.  And I would love to hear, if there's anyone who has contact with Opera, I'd love to know what they are doing.  And the same goes for Safari.  We have to assume nothing until we know for sure.  But so the point is, if you're using Firefox or Chrome, and this shows green, then what you are guaranteed of, you don't even need fingerprint matching, in those browsers you are guaranteed there is no middleman.  There is no man in the middle.  There is no interception of your traffic.



Now, the problem is not everybody is using extended validation yet.  The good news is banks tend to be.  So you may find that your bank is.  GRC is.  So if you're using those browsers, and you go to my site, to GRC, and you go to the Fingerprints page, I am now showing which sites use EV.  So the point is the problem is, since not everyone's using EV, you don't know if you should be getting an extended validation indication from any random website you visit.  But you can go to GRC, to the Fingerprints page, put in the site, bring it up, and I will show you if that site should be extended validation.  And then, if you go there, you absolutely want your browser to show you extended validation from that site.  And if it's not, then something is in the way.  And if you're using Internet Explorer, don't bother with any of that.  It is broken.



LEO:  Well, that - okay.  So Microsoft's been making - and this is Internet Explorer 9 and 10?



STEVE:  All of them.  It's, I think, from 7.  From 7 on they brag, there's like all kinds of links showing you - and I'm going to do a full page to explain this and cover it on my site.  And I will link to these things where Microsoft is saying, oh, wouldn't it be fun to have extended validation on your own web servers?  Here's how you do that.  And essentially you can just make some changes to the registry to clear your own certificates as EV, and then IE turns green.



LEO:  Wow.



STEVE:  Which means it means nothing.  It's completely broken.



LEO:  That's a really strong argument against using IE, I've got to say.



STEVE:  It really is.  I mean, it's awful.



LEO:  Yeah [whistling].  Unbelievable.



STEVE:  And finally, I keep seeing people asking about recovering SSDs with SpinRite.  And so I found a great testimonial where Robert Osorio, who's a listener of ours, asked the question and referred to the podcast.  So I just wanted to share this once again because he does a great job of covering it.  And he said, "Steve, just to let you know that you can add me to the list of SpinRite users who have found SpinRite useful for reviving SSD drives.  I'm an IT consultant and have been using SpinRite for a couple of decades."  So, yes, back actually before the first web page existed, we had SpinRite, because it is more than 20 years ago that SpinRite 1.0 was created.



And he said, "I have an older Intel X25-M SSD drive that was the boot drive from my main workstation.  I recently upgraded to a much faster SSD and relegated the old Intel drive to a laptop.  However, in time, I started getting OS issues that, on a spinning drive, would have indicated bad sectors and would have had me running SpinRite on it immediately.  Since this was an SSD, I thought all I could do was update the firmware - which I did, and it did help for a while - or just write off the drive.



"Then I heard you mention on a recent podcast that running SpinRite Level 1 on an SSD could help, so I gave it a shot.  It made a dramatic difference, and now this drive is running smoothly.  I have now run SpinRite Level 1 on all my SSDs and will continue to do so on a regular basis for preventative maintenance."  He said, in parens, ("I religiously run SpinRite Level 4 on all my spinning drives every six months or so, as well.)"



He said, "I did want to get a clarification from you, and I'm sure other listeners would appreciate this, as well.  You recently read a testimonial from someone who recovered an unreadable flash drive using SpinRite on Level 2, and you indicated that was a valid procedure.  Am I correct in assuming, then, that it's okay to run Level 2 on an SSD or flash drive for preventative maintenance?  Or should I use Level 1 for preventative maintenance and Level 2 for data recovery only?



"My concern is avoiding excess writes, which would prematurely wear out the memory cells, thus your admonition against running Level 4 on solid-state media since it performs aggressive writes.  Reading from your documentation, it appears that Level 2 is only performing writes if it recovers data from a damaged sector and then has the drive relocate it.  As such it seems that Level 2 is not much more aggressive on writes than Level 1 and should be safe to use on a regular basis on SSDs.  Thanks again for a great product and a great podcast."



And, yes, Robert, that's exactly right.  So the difference between Level 1 and 2 is that 1 is prohibited from ever writing.  I just sort of thought, back in the dawn of SpinRite, that that might be useful for some reason, like you could - there were instances back then where, if a drive was really misaligned, then writing could rewrite the data in the misaligned location and cause more trouble.  So I thought, well, let's just have the option of an absolutely read-only phase.  So 1 absolutely will not perform a write command on the drive.  But Level 2 is essentially the same.  It does a read pass of the drive.  And, if there's a problem, it performs data recovery and will then rewrite the recovered data and only the recovered data back into that location.  So it is very gentle on SSDs, and that's what I would recommend actually over Level 1.



The reason he got improvement with Level 1 was that running SpinRite on the drive, as we've discussed before, showed the SSD that it was having problems and allowed the SSD to fix itself and perform hidden relocation of its sectors.  And in his case it wasn't necessary to perform any writing to it, it just sort of said, look, wake up.  Here's what's going on.  It's time to take some action.  And the SSD did.  But Level 2 is generally what I would recommend.  And it does perform recovery and even speeds them up.



LEO:  There you go.  From the horse's mouth.  I mean, no one knows how SpinRite works better than that guy.  He wrote it.  In assembly language, my friends.



STEVE:  Yup.



LEO:  So BitTorrent we all are very familiar with.  I think sometimes people think of it as a pirate service.  That's not the case.  In fact, when we first started doing podcasts, this show and TWiT, we distributed them via BitTorrent because I couldn't support the bandwidth for the thousands of downloads.  Still is probably the No. 1 way Linux distributions are sent out.  But it's also used for piracy, and I think BitTorrent is at great pains to kind of shed that image.  And they've been adding some interesting features.  And this is the newest, BitTorrent Sync.



STEVE:  Well, yeah, there's a BitTorrent Labs that sort of works on various projects that are related to their technology and leveraging the wealth of experience that they have with peer-to-peer problems.  We've talked about some of the challenges associated with hooking up two machines in a direct peering relationship located anywhere on the Internet.  You and I are conversing right now over Skype, which is a peer-to-peer network.



LEO:  Right, good point.



STEVE:  And we've established a direct UDP protocol connection between our two computers, despite the fact that we're both behind NAT routers.  Now, we did learn that it is better to map a port through and assign a static port so that we avoid the sometimes necessary relay of our traffic which results in far less useful connections between us because of just latency in a real-time stream that we need in order to have the quality that we want.  You really want to minimize jitter.  And so a direct connection is the way to do that.



But it is a challenge to establish a direct point-to-point connection in the modern network.  If in fact the Internet was different, if it turned out to be the way the original designers intended, where every endpoint on the 'Net had its own unique IP, and there were no NAT routers, then this problem would have been much easier to solve.  But that's not the way things turned out.  And in fact we talked a couple weeks ago about an ISP that's I think going to be moving, by default, a large class of its users behind their own ISP-level NAT router.  So the idea of NAT traversal is of increasing importance.



What BitTorrent has done, and the reason it's exciting to me, is they've done this in several places, from a technology standpoint, I think exactly right.  Which is what they have made available absolutely free.  There's no gotchas.  There's no we want to install McAfee Security Scan or the Ask Toolbar or any of that nonsense.  This is absolutely free.  I should mention it's currently at alpha stage, although upwards of 20,000 people and more are using it and loving it.  They've got an active forum.  So remember, it is still in its early stages.  And even since its first release, it's acquired a bunch of additional features, so features are still being rolled out.



What I like about this is that what you download is absolutely independent of any third party.  This does not require a phone home to BitTorrent or to anything.  It is a freestanding peer-to-peer client which leverages all of BitTorrent's proven technology, adding a layer of security, of explicit security that I'll talk about in a minute, which has never really been important for the normal public BitTorrent network because it was all about sharing files with people you didn't know, and it was on you to make sure that what you got was not malware, and it was what you were looking for.



So in their explanation of this, they explain that it is unlimited, secure, and we'll define some of these terms here in a minute.  But unlimited secure file syncing.  Useful for remote backup.  Useful for transferring large folders, I mean unlimited-size folders, of personal media between users and machines, editors, collaborators, whatever.  And I'll explain what the security model is and what the granularity model is so that people understand how much flexibility they have.  I think this is going to be a win.  I think this is going to be very popular.



LEO:  Well, and it's free, which I think is...



STEVE:  And it's fast.  The reports have been this thing screams.



LEO:  Really.



STEVE:  And, well, and there's no cloud involved.  So unlike Dropbox, it's not going somewhere else and then having to come back down.



LEO:  But I also don't have to worry about somebody else having it.



STEVE:  Precisely.  Nobody else ever sees it.  So I'm in contact with the guys there.  They're aware of this podcast.  I've had some interchange just this morning back and forth with the right person.  What I don't yet have is the full technical readout at the level of detail we need.  I gave them the example of LastPass, where Joe was so forthcoming, like we got the complete technical readout on the technology, so I was able to audit it.  We were able to look at it and say, yes, I can bless this.  This is absolutely done right.  This looks like it's absolutely done right.  And I think we're going to get all of the technical details because they seem very willing to share that.  I don't yet have that.



LEO:  So I'm installing it now.  And you can either do the standard setup or say "I have a secret."  Secret would be because you set it up on another device.  This is really elegant.  I think this is - boy.



STEVE:  Oh, I know, Leo.  It's going to be a great solution.  So you keep playing with it, and I'm going to keep...



[Talking simultaneously]



LEO:  Yeah, I'll have it installed by the time...



STEVE:  [Laughing]



LEO:  Oh, I just showed a secret.  I should go back.



STEVE:  That's all right because...



LEO:  It's okay?



STEVE:  You can spin those any time you want, yes.



LEO:  Okay.  I'm going to make a new secret.



STEVE:  So they talk about how it's unlimited and fast file syncing.  They compare it to Dropbox, but secure.  Dropbox of course is famously, eh, not so much.  No third party.  No storage limits.  No limits of any kind.  I should mention I did see a mention of a million files.



LEO:  Okay, that's probably enough.



STEVE:  That's enough.  In one folder.  I think it kind of begins to bog down and consumes a lot of memory if you give it a folder with a million files.  But fundamentally no limit.  It is a folder-syncing utility, and they say the bigger the better.  It is designed for huge, uncompressed files.  So, I mean, it just loves big files.  I remember seeing that there's a 4MB blocking factor.  So files smaller than 4MB are just treated as one big blob, and they're immediately shot out to all the synced folders when that file appears in a folder.  Files way bigger than that are chopped up into 4MB blocks, and they're synced at that level.  So if one block of a much larger file changes, only that one 4MB block is resynced.



Now, in addition - so the model is that of a secret.  You mentioned the secret before.  When you are setting up a folder to share, BitTorrent will randomly, pseudorandomly generate a large text string which is the secret.  And there's, you know, I want every detail.  And so sometimes they - and they're sort of - they made this easy to understand, and they sort of dumbed it down for people on their website.



Sometimes they talk about a 21-byte key which is then base-32 encoded in order to make it readable by people.  So 21 bytes is 168 bits, which is like Triple DES.  But don't worry about that because this is all AES encryption.  Except they use a 256-bit AES key, they say, somewhere else.  So the secret seems to be 168 bits, but somehow we need 256.  So maybe, and they talk somewhere about the key being the root, that is, the secret being the root of the key.  So there's another 88 bits we need.  So  maybe - we just don't know.  They could be hashing.  They could be appending 88 bits to the 168-bit secret-derived key.  It's not clear.  But the good news is everything I'm seeing says they have implemented good security.



So you create this long pseudorandom secret.  You don't have to use theirs, either.  You can use your own.  But there the advice changes, and they talk about a base-64 string that should be longer than 40 characters.  So I need the technology from them in order to exactly understand what's going on, in order to be able to describe it to our listeners, who care about and understand this kind of stuff.



LEO:  You get some interesting things, too, by the way.  You get just the regular secret, but a read-only secret, and then a one-time secret.



STEVE:  Yes.  Now, the way you...



LEO:  Now, presumably I can just change these at any time.



STEVE:  So the way those work is a read-only secret is something you would - okay.  So first you create a secret for a folder.  Now you then install this somewhere else, or you want to share this with a - that folder with a friend.  So you arrange to give them the secret.  There's no username.  There's no password.  And they make the point, and I agree, that these pseudorandom secrets are stronger than a username and password.  And in fact this is the same technology I ended up settling on for CryptoLink when I was doing my brainstorming for what I was going to do there.  CryptoLink was going to essentially embed a pseudorandom key and then also generate one for the user.  I mean, that is the right way to handle these kinds of encrypted connections.



So the idea would be you give a buddy the same secret.  Now, yes, it then is incumbent on us about moving that secret to the other person in a secure fashion.  So you could use something like AxCrypt, or you could chop it up in pieces.  You could fax it to them, blah blah blah.  They talk about base-32, which I assume they chose because that's probably case insensitive.  They don't say that anywhere, but base-32 means that we would be using 5 bits out of a character.  So probably A-Z, independent of case, gives us 26 possibilities, and then 0-7, for example, gives us 8.  So 26 and 8 - what?  Wait.  26...



LEO:  Math is hard.



STEVE:  26 and 8.  Somehow you need 32.  And so that means that the secrets are probably case insensitive.  So you could fax it to somebody.  You could dictate it over the phone.  You could encrypt it using AxCrypt and then email it to them, somehow get that to them.  Then what happens is the clients in the network are able to find each other based on the shared secret.  So this is a shared secret technology.  Because you've got two BitTorrent sync clients, no matter where they are in the world, if they have the same secret, they are able to find each other.  And the traffic that they exchange goes directly, point-to-point, between them and is encrypted using a key derived from that secret.



So that was another one of the key phrases I saw that leads me to think these guys did it right.  They're not actually using the secret directly.  They're deriving the actual interchange key from the secret.  We don't know how.  It would be nice to know how.  So that's the normal, full-access, read-write secret.  It's also possible, as you saw, Leo, to give somebody a - they call it, a little confusingly, one-way synchronization.  That's, I mean, what it really means is it's a read-only secret, meaning that you give it to somebody, and they use it to synchronize a folder that they have.  But it's read-only, which is to say one-way sync.  They're able to - their folder will contain everything your folder has, but it doesn't go in the other direction.  They are unable to change the contents of yours.  So that's very useful.



Then they have something they call a one-time secret, which is also a little odd.  The idea is you're able to generate it on demand, and that one-time secret can be either a full read-write secret or a read-only secret.  And that you give to someone with whom you don't want to share the master secret.  And the limitation on it is that it must be used within 24 hours.  Now, they don't explicitly say it except one place.  And again, it'll be good to have this all clarified.  But what it sounds like is the secret, it's not that the secret - the key dies after 24 hours.  But when it's used, it allows the holder within 24 hours to obtain some sort of a master secret copy from the master secret holder.  And that does not expire.



So there also doesn't seem to be sort of like a secret management system.  I got the sense that if, for example, if you ever wanted to rekey, you would need to change the master secret on all of the folders that you wanted to keep synchronized.  That is, so there's no way to, like, revoke somebody's rights.  Which I think is a reasonable tradeoff.  This system could get very complicated pretty quickly.  You can synchronize as many folders as you want.  You are able to exclude folders and files using wildcard pattern matching in a file that you put in the folder, saying, you know, and so the client will see that and not synchronize files that you specifically tell it you don't want synchronized, either explicitly by filename or by wildcard matching.



There is an Advanced tab that gives you the ability to enable or disable Universal Plug & Play management of your router.  So as is the case for the normal full-strength regular BitTorrent client, the BitTorrent Sync client is able to communicate with a UPnP-enabled router and ask it to open a port through to it to help with NAT traversal.  But you can disable that if you like and set up static port mapping.  You can assign BitTorrent a port to use and set it up that way.  It is cross-platform.



Oh, I should also mention that you can establish explicit bandwidth throttling.  The normal case is just to use all the network bandwidth.  People in the forums have talked about setting it up on their LAN and experimenting with it.  And they drop monster files in a folder, and it just, bang, appears in the other machine almost immediately.  Small files are instantaneous.  And in one case a 3.5GB file took a minute or two to transfer.



So clients on the same LAN will discover each other using a LAN broadcast, again, all tied to the secret.  The nice thing is the secret is the master key for this global BitTorrent sync network.  And that's the way everything is glued together.  So you do have bandwidth throttling, separate for uploading and downloading, if, for example, you just want your data not to - or if you're, like, synchronizing huge files, but you still want access to your network while this is going on, or you're trying to do online gaming or something.  We've talked about how network saturation with buffer bloat can ruin real-time gaming performance.  So you're able to put in a throttle.  There's no schedule-based throttling.  But those are the kind of things we may get in the future.  And I have seen requests for that in the forums.  And no quality of service management yet, but that's the kind of thing these guys are clearly able to do.



It's multiplatform.  It requires on XP you have to have SP3, and only 32-bit of XP.  It will not run on the 64-bit version of XP.  It will run on both 32- and 64-bits of Vista and Windows 7.  Runs on Mac OS X from Snow Leopard on.  Runs on Linux with kernel 2.6.16 and later, for the ARM, the PowerPC, the 386 and the 64-bit platform.  So they've got that covered.



LEO:  That's good news because it means it probably could be ported to mobile devices quickly.  It currently doesn't...



STEVE:  It's coming.  It's coming.



LEO:  Yeah, it doesn't have any mobile support right now.  And that's...



STEVE:  No, it doesn't.



LEO:  ...an issue.



STEVE:  Yes, although it's on its way.  It has absolutely committed, they are working on iOS, and there will be iOS and Android clients.  So those are coming.  And it was supposed to be this week, but I didn't see it, because I found a posting from the BitTorrent guys late last week, a lot of people were wanting it on FreeNAS.  It is compatible with Linux-based NASes, and they have said they have it running on FreeBSD and PC-BSD, which brings it out on - which means that it will be running on FreeNAS.



LEO:  Having it on a network-attached storage device is very intriguing.



STEVE:  Oh, Leo, it's perfect.  So now, so the idea would be you stick it up on FreeNAS...



LEO:  You can have NASes synchronize with each other.



STEVE:  Yes, yes.



LEO:  Offsite and onsite.



STEVE:  Yes.



LEO:  This is going to really put a lot of companies out of business, I think.



STEVE:  I think it's wonderful.  You set it up with network storage.  You map a static port through your router.  Now everyone is able to find it.  The peer-to-peer discovery, basically they're leveraging everything that they've learned from their years of using BitTorrent.  I mentioned that a local LAN is able to use subnet broadcasts in order for clients to find each other.  When two peers discover each other, they then immediately exchange their knowledge of all other peers.  So the network tends to be strong and robust and sort of self-healing.



If you have a known, like, static port, static IP and port number, you can use the UI to set that.  So, for example, if you - and I didn't see any support for Dynamic DNS.  That would be a nice thing to add because many NAT routers will support DynDNS.  And then you could use DynDNS and a port number so that any roaming clients always could find your NAS at home for syncing.  But so you're able to use it that way.  They do have a distributed hash table system within the BitTorrent client network.  And you can also use a BitTorrent tracker in order to help find each other and to act as a...



LEO:  Oh, how interesting.  You can use a tracker?



STEVE:  Yes.



LEO:  Hah.  Wow.



STEVE:  And they actually recommend that over dynamic hash tables, just because it's faster, and it helps with NAT traversal.



LEO:  This is going to be - this could be a wonderful piracy tool.



STEVE:  And as the absolute last resort, they will relay traffic.



LEO:  Really.



STEVE:  If there's no way for two clients to connect directly, and that's really what you want for speed, but if it just - if it can't happen, then they will relay your traffic, your encrypted traffic for you.  They have no idea.  For them it just looks like pseudorandom data because everything is protected by apparently a per-session negotiated key based on the shared secret.  So I can see people synthesizing really ad hoc complex networks of arbitrary folders shared among their devices, their offices and satellite offices, home and work, and among their friends, simply by generating these large pseudorandom keys, sharing those, and suddenly your folder contents is shared.  I mean, there have been times I've wanted to send Jenny something big, and there just isn't a good, easy way to do that.  Well, now there is.  And it's free, and looks robust, and it looks like they've done security in the right way.



LEO:  Traffic is encrypted.



STEVE:  Yup.



LEO:  So it doesn't matter where you're using this.  You don't need a VPN tunnel or anything like that. 



STEVE:  Nope.  So, for example, you're at Starbucks, and you've got this running on your laptop, and eventually on your mobile device.  And you simply - you're looking at a folder which is kept synchronized to your folder at home.  And it's peer-to-peer over the Internet.  The finding each other has all been worked out and solved.  And essentially you're creating little independent networks that are not reliant on any central phone-home headquarters.



LEO:  Wow.  Is it open source?



STEVE:  Not open source.



LEO:  Interesting.



STEVE:  And I'm okay with that because - as long as it's open protocol.  I mean, for example, you know, Joe at LastPass just was completely open about what he's doing and how it works.  And it was because of that that I was able to analyze everything he did and say, okay, I'm using this.  They nailed it.  I don't doubt that these guys have, too.  But all the words they're using, all of the phrases and so forth, look like they've done it right.  But it would be nice to have all the I's dotted and the T's crossed, to know, like, what's the length of this, how are the per-session keys derived from the shared secrets.



LEO:  Is there an API?  I mean, could you write an open client?



STEVE:  Don't think there is yet.



LEO:  There's not an API.



STEVE:  And I don't - and again, remember, this is still very early.  This is only a week old.  It just came out...



LEO:  It's from their labs, yeah.



STEVE:  Yeah.



LEO:  And it's already quite mature, in a way.



STEVE:  I know, it looks great.



LEO:  I've just installed it.  What a great way to share stuff fast and easily with yourself or others.



STEVE:  Yup.



LEO:  Very cool.  So you get it, it's kind of a long URL, but if you go to labs.bittorrent.com, I think you'll find it.  I just googled "BitTorrent Sync."



STEVE:  That'll - it'll get you right there.



LEO:  Got me right there, yeah.  Very good.  Very good.



STEVE:  I think we have a hit on our hands, Leo.



LEO:  Yeah.  Yeah, and if I were Dropbox, MegaUpload, some of those people, I'd be a little worried.  I don't think that the consumer products have to worry too much because this is a little geeky.



STEVE:  Once upon a time the cloud providers offered the allure of terabytes of storage.  Now everybody has terabytes of storage.  I mean, what we need is to get this stuff synchronized, and this provides that.



LEO:  Right.  Very neat.



STEVE:  Yeah.



LEO:  Steve Gibson's at GRC.com.  That's where he hangs out.  That's where you'll find BitTorrent - BitTorrent.  No.  SpinRite.  There's no BitTorrent there.  SpinRite, the world's finest hard drive recovery and maintenance utility.  All the freebies he gives away, his passwords, Perfect Paper Passwords, padding and all of the stuff, all the security information.  Of course ShieldsUP!, which you really should use right now for the UPnP tester.



STEVE:  Yeah, I think we're on the high side of 5,000, we were getting close last time I looked, different people who had Universal Plug & Play exposed on the public WAN side of the network.



LEO:  Vulnerable systems, yeah.



STEVE:  Yeah.



LEO:  He also puts 16Kb audio versions there for people who really don't have a lot of bandwidth.  It's not the greatest sounding, but it's there, the content's there.  And the smallest version's the English-language transcript that he offers, as well.  That's at GRC.com.  We have, of course, larger files, the higher quality audio and video, available at TWiT.tv, which is down right now, I know.  It'll be up momentarily.  We're just doing a little maintenance.  TWiT.tv/sn for Security Now!.  You can also subscribe.  In fact, that's a good idea if you want to get every episode.  All the podcast aggregators support Security Now! and all of our TWiT shows.  We do this show every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 1800 UTC on TWiT.tv, so you can tune in and enjoy live, if you want. 



STEVE:  We'll have a Q&A next week.



LEO:  GRC.com/feedback for the questions.



STEVE:  Yup.  Send me questions.  Maybe play with BitTorrent sync and, if you've got some questions, let me know.  I will - I don't know how soon the guys there will get a protocol white paper assembled.  But I've got a dialogue open with them.  And they seem accessible to that.  So I think we're probably going to get that.



LEO:  Cool.  Thank you, Steve.  What a great subject.



STEVE:  Thanks, Leo.



LEO:  Thank you for joining us.  We'll see you next time on Security Now!.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#403	

DATE:		May 8, 2013

TITLE:		Listener  Feedback #167

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-403.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here.  We've got a lot of security news.  You know, the usual warnings and so forth.  Plus some great questions and answers from you, our audience.  Stay tuned to Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 403, recorded May 8th, 2013:  Your questions, Steve's answers, #167.



It's time for Security Now!, the show that protects you and your loved ones online, your privacy.  And there he is, the man who does it all for you, Mr. GRC, Gibson Research Corporation head honcho, Steve Gibson.  Hey, Steve.



STEVE GIBSON:  Yo, Leo.



LEO:  Yo, Steve.  We've been having fun talking about sci-fi and Nimoy and Spock and all of that before the show.  But we'll get to that in a little bit.  We'll get to it in a little bit.  This is a Q&A episode.



STEVE:  It's a Q&A episode.  If we have any listeners who are, I guess, live listeners, or who will listen, well, yeah, it pretty much has to be live, KTLA is airing throughout the day the little piece, the segment I did with them about forming proper passwords.



LEO:  Oh, good.



STEVE:  I started - Elaine, actually, I got a text from Elaine this morning.  She said, "I heard your voice from the other room."  And I thought, you know, she probably knows my voice better than anybody else.



LEO:  She does.  She listens to you more than anybody.



STEVE:  Exactly.



LEO:  Elaine is the woman who transcribes this fine show each and every week.



STEVE:  Yup, and is forced to sit and listen to this, whether she wants to or not.



LEO:  [Rewind sound] What did he say?  [Rewind sound]  What did he say?



STEVE:  We've actually had some great referrals to her from the show.  That is, our listeners who have heard about Elaine have found her...



LEO:  She's getting something from it.  Good!



STEVE:  Yeah, yeah.



LEO:  She should give you a discount.



STEVE:  So that's neat.  And I guess everybody's happy about that.  So, and she of course is.



So, yeah, we have a Q&A.  We've got - I've pushed the questions that we didn't get to two weeks ago into this one because they were good and worth talking about, and then filled in with some others that were in the mailbag.



LEO:  Excellent.



STEVE:  And of course we've got our week's news.  Okay, now, the No. 1 most tweeted, like "Steve, what does this mean?" tweet that I got over the week, all was from basically an overhyped headline on a story.  The headline was "Government Lab Reveals It Has Operated Quantum Internet for Over Two Years."



LEO:  Is it me, or should we expect better of the MIT Technology Review?



STEVE:  I know.  I know.  Well, and frankly, the MIT Technology Review, you would think that it would be hardcore.  It's really just a fluff rag.



LEO:  It is.



STEVE:  I mean, it's not anything that...



LEO:  Jason Pontin has turned it into a piece of crap, to be honest with you.



STEVE:  Yeah, it's really too bad because this got everybody excited [gasp], what does this mean?  Well, it turns out - so it's like, okay, I'll find out.  It's very disappointing.  So, okay.  So here's the idea.  The idea with so-called "quantum communications" is that it is utterly secure.  It is more secure than any cryptography because, after all, there is a key somewhere; and, if the bad guy knew the key, unlikely as that may be, then they can decrypt what you've got.



Quantum communications, the whole concept is the act of receiving the information changes it.  So the idea is you cannot tap a quantum communication, which is being done by photons over a fiber optic cable.  The whole deal is that any - the act of observing the information, in a quantum physics sense, makes that event detectable.  I don't know if it collapses the state, or if it alters it.  But there is absolutely, I mean, the physicists know it cannot be intercepted or eavesdropped on.  Well...



LEO:  That's the Heisenberg Uncertainty Principle.  Is that?



STEVE:  I don't know if that's Heisenberg because that's, you know, we don't know if - wait, no, there's Heisenberg, and then there's Schrdinger.



LEO:  Schrdinger's cat.



STEVE:  Yeah.



LEO:  That's the two states.



STEVE:  Where you're not sure what the state is in until you observe it, and then it collapses the state.



LEO:  Yeah, the idea is that any observation changes an object.



STEVE:  Right, right.  And we do know that - we do know from current quantum physics that that is the case.  So what has been done is a quantum link has been set up that allows information to flow.  And the problem is an Internet requires routing.  And no one has been able to figure out how to do a quantum router.  And you could argue that a quantum router breaks the security because routing requires looking at the address and then sending it out in the proper direction.  And the act of looking at the address means that now you have - you've penetrated the security of the link.



So the way they solve that is they use a hub instead of routing.  So, like, so all of the nodes have a fiber optic connection into a hub.  So, first of all, now we don't really have an Internet.  Now we have a hub, which is not nearly as exciting because they don't know how to do quantum routing.  And you could argue that you can't.  Then the problem is, to have it be really secure, they would have to have it go in both directions.  But that would require two links, and that would double the cost.  And so they said, well, we don't want to do that.  Well, okay.



So what they've ended up doing is they have - so what they ended up doing, I mean, this is sad, is they send a one-time pad down the quantum link to the hub, and that's what the hub uses to send data back over a conventional network.  So, eh, it's like, okay.  So basically what they did was they used sort of existing technology to enhance a quantum connection, and then again existing technology to, like, allow it to be actually useful for something.  Basically this is like a strained way of generating some news, it seems to me.  But who cares about this?  Now, also - and so, now, it is true, we know about a one-time pad.  We've talked about that.



LEO:  And that's an effective technique.



STEVE:  Very effective.  Now, you do need really good random numbers, or why bother, once again.  So one assumes that all of the senders are using not-pseudorandom algorithmic numbers because, if they are, then that's a weakness.  But they're actually generating, they're like diode noise or thermal noise or quantum noise or any of the truly chaotic processes which we now know how to harness and refine into very high quality, truly random numbers.  So the idea is that it's sending those down the link and then presumably storing them locally.



Then the hub gets them and then XORs the data it wants to send back with that one-time pad.  And when it arrives, then the node re-XORs it with the buffered one-time pad.  And it's like, uh, okay.  I mean, so you cannot intercept the optical link because it uses fancy quantumness downstream.  And you can do whatever you want to with the upstream traditional link because it's truly noise, absolutely undecipherable.  And you can't get the one-time pad because you can't intercept the downstream link that carries it.



However, the security of the hub must then be infinite.  That is, all, I mean, if you compromise the hub, the hub has all of the one-time pad information and all of the interchange information, and it is essentially the router.  So it's like, eh, okay, well, anyway, that's what it is.  It's nothing.



LEO:  [Laughing]



STEVE:  It's a science experiment in a lab, and who cares?  I mean, it bears no practical application, and it doesn't mean that [gasp], you know, there's a quantum Internet operating in secret somewheres.  It's like, no, because unfortunately the quantum technology is too good.  It's so good you can't route it because to look at it, in order to route it, wrecks it.  So, yeah, nothing.



And back to Monday news:  IE8, only IE8 has a bad zero-day flaw which is being exploited in the wild, and people are being told to stop using IE8 who are concerned about this.  Interestingly, it doesn't affect 6 or 7, or 9 and 10.  Just 8.  And people like me are stuck on 8 because XP won't let me use 9 or 10.  You don't get that until you go to Vista or Windows 7.  So, but I'm not using IE for anything anyway, so it's not a problem.  But there is a - this was found by seeing it in the wild in watering hole attacks where specific industries - in this case it seemed to be government, American government employees and contractors working in the nuclear research sector, and Europeans working in defense, security, and aerospace industries.



What happened is some sites that those types of people tend to frequent were infected and were bouncing them to another server to install the Poison Ivy trojan that we've talked about.  It's been around for a long time.  And it's very good at thwarting AV products.  It's able to avoid detection of all but two major antivirus products.  And this was allowing whomever it was who was wanting to gain access to this sort of demographic of target to get into their machines and siphon off presumably nuclear research sector information.



So that's been going on.  And Microsoft has confirmed the problem, issued a security announcement, and told everybody, well, you shouldn't be using IE8, after all, so stop it.  And they'll presumably fix it here in our next probably Patch Tuesday.  I don't know that this is dire enough.  However, it is in the Metasploit Framework, so commonly available now, and there is no fix.  So as we know, a lot of the world is still using IE8.  A lot of the world is still using XP.  So there's a big chunk of target for exploitation until Microsoft does get this fixed.



And another major ISP, British Telecom, announced in this past week that they're going to be rolling out Carrier Grade NAT also.  This was covered by TechWeekEurope, that covered their press release.  And I thought their press release had some interesting little nuggets in it.  Just the beginning of it said, "CGNAT" - that is Carrier Grade NAT - "is a response to the dwindling" - so this is their official, this is British Telecom's official statement about how they feel.



"CGNAT is a response to the dwindling number of Internet Protocol (IP) addresses available under IPv4, the version of the protocol used across the vast majority of the Internet today.  While IPv6, which offers many more IP addresses, has been defined for more than 20 years, a broad implementation of it across the Internet appears to be nowhere in sight, forcing service providers to explore techniques for keeping their IPv4 customers connected.



"IPv6 landscape" - oh, I'm sorry, that's an insert.  It says, "The technique has been criticized because it imposes certain limits on users by virtue of the fact that their broadband connection no longer has the use of a fixed unique IP address, but is rather sharing an address with other users - in BT's trial, up to nine other users.  This means, for instance, that users cannot serve content to the wider Internet from servers on their home network; and BT admits that it can also affect activities such as online gaming and dynamic DNS services.



"Defending its trial, PlusNet" - the subset of BT that's doing this - "pointed out that NAT is commonly used on LANs within homes and businesses, which mostly present one IP address to the wider Internet.  Home routers use NAT, and BT has pointed out that NAT is also 'standard practice' for mobile broadband providers, who have had to accommodate large numbers of new connected devices.  Critics, however, responded that mobile Internet services lack the flexibility that, until now, has been standard with ordinary broadband services."



So anyway, we see another major organization saying, okay, we're running out of IP space, and our subscribers are on IPv4, and they're not ready to move, so we can't move.  So...



LEO:  Wasn't it, like, the British government that had all those - that big Class A or whatever it was?



STEVE:  Yes, it was a 16 million, it was a Class A network that they were just using internally.  Just, oh, doot doot doot.



LEO:  Come on, BT, talk to them.



STEVE:  Yeah.



LEO:  It's your own people.



STEVE:  And it was like the people in charge of paint or something.  I mean, it was not...



LEO:  They weren't using this.



STEVE:  It was like, come on, what?



LEO:  Oh, boy.



STEVE:  Yeah.  Okay.  So Syria is back on the Internet.



LEO:  Oh, boy.  They were off?



STEVE:  Yesterday, 19.5 hours yesterday, starting 18:45 UTC on Tuesday.  They just - I've seen the chart.  And it just went - it's like someone pulled the plug somewhere.  What they say is that someone pulled an optic cable.



LEO:  Oh, please.



STEVE:  I know.  I know.  This is not the first time Syria has had problems.  In fact, it was a 19.5-hour, or it was a several hour, rather, outage - several times in the last year there have, you know, they've sort of just dropped off the 'Net and then come back.  So we don't know why.  The state-run Syrian Arab News Agency (SANA) posted on sort of a banner at the top of their site, they said:  "Internet services back to normal across Syria after repairing optic cable malfunction."  And "malfunction" was not spelled correctly in their banner, but we knew what they meant.  So it's like, okay.  Who knows?  Maybe, I mean, we don't know.  But anyway, they're back.



LEO:  Yeah.  Remember Egypt did that during the upset.



STEVE:  Yeah.



LEO:  And it's not unusual for governments to say, gee, if we only didn't have an Internet, everything would be so much better.



STEVE:  So, yeah, people couldn't be tweeting and...



LEO:  Couldn't be talking to each other and that sort of thing, yeah.



STEVE:  ...making all this mess.  Okay, so I wanted to let everybody know that HoneyWords is on my radar, and I've got it set to discuss in a couple weeks, once you're back, Leo, because...



LEO:  Where am I going?



STEVE:  Aren't you leaving next week?  You're not here next week.  I thought you were going somewhere.



LEO:  News to me.



STEVE:  No?



LEO:  I won't say I'm not.  I don't think so.



STEVE:  I thought we had Iyaz set up to do the podcast.



LEO:  Oh, because of Google I/O.  Yeah, yeah, you're right.



STEVE:  That would be it.



LEO:  Somebody, John came running in, said you're not here next week because of Google I/O.  Yes.  That's right.  Okay.



STEVE:  Anyway, so we were familiar with honeypots, and I think might have been our first podcast was the classic "HoneyMonkeys" [SN-002]...



LEO:  Yeah, "HoneyMonkeys," yeah.



STEVE:  ...that we had a lot of fun with.  Well, now we're going to do HoneyWords.  But it's an interesting concept that Ron Rivest, the "R" of RSA, has assembled.  It's a 19-page research report, so it won't fit in a little "top of the show" piece.  So we'll do a podcast on it because there are many really interesting ideas.  The short, very, very, very short version is that online services would plant, not only fake accounts, but fake passwords, thus HoneyWords, mirroring real ones in people's accounts, so that if their database ever got loose, and people went to cracking it, if the cracked HoneyWords were ever used, it would be like a canary in the coal mine.  It would be an immediate alert that somebody, that somehow their encrypted password database had gotten loose, and somebody was encrypting it - or was trying to decrypt it.



So anyway, but there's many subtleties and interesting parts to this.  So, and a bunch of people have been tweeting me, saying, hey, is this good?  So we're going to - it is really interesting, so we'll give it a podcast in a few weeks.  I just wanted to let everybody know.



GRC has some news.  We passed the 5,000 mark in finding exposed Universal Plug & Play ports for people.  So I'm really happy we've got that service.  GRC is now also - I've joined the ranks of sites which are 100% HTTPS.



LEO:  Yay.



STEVE:  You can no long - yes.  You can no longer get a page that is not secured at GRC.  I did that over the weekend.  Then I added the HSTS facility.  That's the HTTPS STS is - I'm blanking on it now.  Secure transport?  Wait.  STS.  I've said it so many times, and the headers are...



LEO:  Supersonic transport?  Oh, no, that's something else.  That's another STS.



STEVE:  No, STS, transport security something.  [Laughter]  Come on.  Somebody...



LEO:  The chatroom will know.  Socket.



STEVE:  No.  STS.  It's source code or...



LEO:  Hyper Secure Transport Stuff.



STEVE:  No.



LEO:  Strict Transport Security.



STEVE:  There it is, Strict Transport Security.  Thank you, whoever that was.



LEO:  That was Encoded Reality.



STEVE:  So here's the deal.



LEO:  And JBR.  And Strength.



STEVE:  And this is very cool.  So if someone makes a connection, for example, to a site that really wants to be secure, like mine, over non-SSL, then what my server will do is immediately send back a 301 redirect saying, no, please make this connection over a secure connection.  The problem is that they're initially able to make a connection that is not secure, and a man in the middle could, and we've talked about this before, could arrange to strip off the HTTPS outbound query, changing it to HTTP in order to still try to make the service usable.  I am blocking that. I refuse to offer any content over HTTP.



But the cooler thing to do is to declare to the browser that it has the permission to upgrade all HTTP links to HTTPS.  And the way you do that is everything that GRC now sends back has a header added, Strict-Transport-Security, with a lifetime of one year, in seconds.  You can specify the max age.  And so what that does is that informs all the browsers that support it - and I know that Firefox, Opera, and Chrome do.  I haven't seen whether IE does.



But so what happens is the browsers, anyone who visits GRC, for example, with Firefox, Chrome, or Opera, those browsers see that header and essentially cache that information, that is, semi-statically permanently remember that GRC has said that for the next year we're not changing our policy.  Any connection that you start to make that is not secure, you have our permission to upgrade to secure.



So what's cool is that no user is going to put in https://www.grc.com.  They're just going to put GRC.com.  If they've ever been to GRC in the last year, then the browser will remember that, hey, this is - well, and every time they go another year gets added, essentially.  That expiration gets updated.  So they're just instantly moved to a secure connection.



And then we went one step further.  I also shot the guys at Google a note asking them to put GRC.com and www.grc.com into Google's base code so that, even absent that first contact with GRC, Google knows, that is, Chrome knows that we want security.  And the Mozilla people pull from the same configuration file that Chrome does.  And although it's not yet out in the normal release channel, the file's already been updated.  GRC is there.  So that, even on a new machine, the very first time you use Chrome, it'll just know GRC is HTTPS all the time.



So this is what a growing number of security-aware sites are doing.  For example, I saw LastPass.com and www.lastpass.com are already in the list, as are a number of other sites.  So this is something where the browsers over time are learning that there are sites that are all about security, and they're never to establish a connection that's not.  So that was neat.



Oh, and there's a new page on GRC that will be of interest to existing SpinRite owners.  Two Sundays ago a SpinRite user tweeted me a photo, just a screenshot, of his SMART page, the S.M.A.R.T., Self-Monitoring Analysis Reporting Technology page, and was concerned by what it showed.  And it was such a perfect example of sort of everything going on at once on that page, that I thought, okay.  This is a great - this is a teachable moment.



So I created a new page at GRC.com which is just /sr for SpinRite, /smart - and it's also in the main menu under the SpinRite category - which is a complete explanation and tutorial about everything going on on that S.M.A.R.T. system monitor page that SpinRite has.  So I know that some people have wondered, you know, what does all that mean?  And so now it's - because that's completely new in SpinRite 6, and there's a lot of information there [/sr/smart.htm] that I think people will find interesting.



LEO:  Some people in the chatroom are saying, well, when's TWiT going to the HTTPS?  Is there a compelling reason for us to do so?



STEVE:  No.  There really isn't.  I've got so many pages that have to be delivered securely, you know, the Perfect Passwords page, the Password Haystacks page, now the Fingerprints page.  Oh, and I forgot to mention, what's really cool is it used to be that my technology that I had deliberately switched people back, sort of in old-school fashion, back to non-HTTPS when it wasn't needed.  Well, Google quickly saw that I was sending out the Strict-Transport-Security header.  And if you just put GRC into Google, I'm of course the first thing that comes up.



And there were four links there.  Only two of them used to be HTTPS, and that was the Perfect Passwords and the Password Haystacks.  The other one was DNS Benchmark, and another one I can't remember.  Now Google has already seen what's going on and updated all of its links for the pages.  It still has nonsecure for the default root page, but I imagine it's just a matter of the index getting updated.  So Google is quickly seeing, oh, look, let's just change GRC over to HTTPS.  But so it's really - it's a site like LastPass or a site like mine.  I would argue that banking sites ought to just broadcast their security all the time.



LEO:  Oh, yeah.  For sure, yeah.



STEVE:  So sites that are about it being very important that transactions never be eavesdropped on, essentially doing what I've done really narrows the attack surface.  I don't know, it's hard to imagine now how somebody could wedge themselves in, especially that we're an EV site.  And we now know that the EV display for Firefox and Chrome will not come up if there's a man in the middle because the certificate is being checked also internally by the browser, not through the regular public key infrastructure.  Thus you can't spoof it with a fake CA certificate in the machine.



But to answer the question, really, sites that are not about security, really, there's really no benefit.  And it is administrative overhead.  And notice now that I'm committed.  I cannot now not ever have security at GRC because I've declared to the world that we will always have HTTPS.  So I'm never going to let my certificates expire, that's for sure. 



LEO:  Also we'd have issues with, as somebody pointed out in the chatroom, mixed content, those mixed content warnings because we pull content from insecure sites.  So if we were secure, that would confuse the hell out of people.



STEVE:  Yes, and, for example, on the Security Now! page, we bounce all of the links through Podtrac for Podtrac tracking.  And so I don't, for example, I have a media server, media.grc.com, and that's why I did not do - you have, with Strict Transport Security, you can say GRC.com and all subdomains.  But I explicitly did not do that because I need media.grc.com to be able to be accessible over a nonsecure channel because Podtrac doesn't support HTTPS redirection, only HTTP redirection.  So there are some places; but, you know, for MPEG-3 files and so forth, that's fine.



LEO:  Any advantage, our chatroom's asking, to protecting from DDoS?  Does it kind of slow down attacks?  I don't think it would.



STEVE:  No.  And the arguments against SSL, as we've talked about, from a computational burden standpoint, have really been diminished by state caching.  It's only when you initially negotiate your very first connection with a site that there is the asymmetric, the public key expensive processing moment, essentially.  And then, from then on, all subsequent SSL connections are able to use the cached credentials that each end has.  So the client says, hey, I've been speaking to you recently, server.  Here's a token that represents the conversations we've been having.  The server checks to see if it has it; and, if so, it's a super fast connection.  So it's really even not a slow thing to do anymore.



LEO:  All right.  So I'm not going to do it.



STEVE:  No.



LEO:  But you should.



STEVE:  Yeah.  Oh, I'm really - I just feel good.  It's just it was a, like, "what am I going to break" sort of concern that I had because, I mean, I had - I was explicitly moving things back and forth between secure and not secure.  So it was - I was holding my breath this weekend.  But it went very smoothly, and now all of our pages are secure.



LEO:  Yeah.  I got it.  Right out of the bat.  Now, the other question is, we get a lot of bots registering accounts on our wiki.  This is always a problem when you have a wiki is that people try to spam it.  It wouldn't make any difference there.  Do bots not want...



STEVE:  I would imagine bots are probably secure-aware.  That was one of my concerns in the old days was that search engines were not all able to spider into secure pages.  And then another problem was that some sites have a lot of scripting.  So essentially, in the same way that, like, news sites have had paywalls, sites have inadvertent scripting walls because you can only get to their content if you run JavaScript.  And so search engines were, like, hitting that and going, whoa, we're not going to run JavaScript in order to spider this.  Good luck.  And so that problem has been solved over time.  So, yeah, I don't think you'll see any real advantage.



LEO:  Yeah.  Good to know.



STEVE:  So in Totally Random section, I got a tweet from Donald Holben, who said that he wanted to decommission some drives, and he scratched the surfaces like crazy in order to do so.  And he tweeted me a picture of a drive, the surface was just - you could hardly even see it, it was so scratched up.  But one thing I noticed was that he did not pull the magnets.  And so in Totally Random section I wanted to say to our listeners, hard drive magnets are the coolest things you will ever play with.



LEO:  Always pull the magnet.  What kind of magnet is it?  What's so special about it?



STEVE:  What's so special is they are the most bizarrely strong magnets ever made.



LEO:  Are they rare earth, or what else...



STEVE:  Yes.  They are...



LEO:  Neodymium?



STEVE:  They are hyper rare earth.  So the idea is that you've got - you have two magnets that are being held apart.  And what moves inside them is the coil that runs the head positioner.  So this is the head-positioning servo coil.  And so what happens is the electronics puts current through the coil to generate a magnetic field which needs something to act against.  What it acts against is the magnetic field created by these permanent magnets in the hard drive.  And so there's been a huge need to create the strongest magnets possible to generate the highest gauss field in order to generate the greatest acceleration and thus the lowest seek times with the lowest input power.



So the point is you could always get this thing to generate a higher acceleration by putting more power in, but that's one of the most expensive things that a drive does is seek the heads.  So if you have a stronger magnetic field, then less input power will generate more physical torque in order to create acceleration.  The point is huge economic need for creating strong magnets.  And, oh, baby, these things, they are just bizarre, they are so strong.  So they're in every hard drive.  If you are ever decommissioning a hard drive, don't forget to get the magnets out because...



LEO:  Is it dangerous?  Is there anything I should...



STEVE:  Oh, they are.  They're...



LEO:  Don't swallow them.



STEVE:  Don't get them, you know, don't swallow them.  Take off, if you have a mechanical wristwatch, put that in the other room.  But, I mean, and when I said "yes" to your "are they dangerous," it's that you can pinch yourself.



LEO:  Right.



STEVE:  I mean, if you got them, and they pinched some skin, they would just - they are so determined to get themselves together that - or if you reverse them, they generate such repulsive force, it's freaky how strong they are.  I mean, you can spin one a foot away from the other, and it's like they're linked.  They're really cool.



LEO:  Well, that's the danger, I know, of these rare earth magnets and these, neo, what is it, neodymium, is that, if you swallow - kids might swallow them.  And it can pinch your intestine and cause a blockage and things like that.



STEVE:  Yeah.  There was a problem, there were - ThinkGeek was selling Buckyballs, which are...



LEO:  Yeah, they put - turned them off.  I have them.  I love them.



STEVE:  Yeah, they're very fun.  But again, they are swallowable.  And these really aren't.  They're sort of kidney shaped and maybe about an inch or an inch and a half long, depending.  So they're, you know, you wouldn't think, oh, I'm going to swallow this.  But still, they're very cool.  And maybe you've got old drives around that are dead.  And so...



LEO:  It put Buckyballs out of business, by the way.  They had to - they went belly up.



STEVE:  Wow.



LEO:  Yeah, isn't that sad?



STEVE:  It is sad.



LEO:  Yeah, they were basically forced out of business by...



STEVE:  Wow.  Okay.  So I tweeted yesterday probably the best ad that, I mean, the responses to the tweet were "Best ad ever."  And for those who do not follow me on Twitter, I created a shortcut, as I do, bit.ly/snnimoy.  So that's Security Now! Nimoy, N-I-M-O-Y, as in Leonard Nimoy, of course, snnimoy.  This is the new Spock, Zachary Quinto, and Leonard Nimoy in an incredibly wonderful Audi commercial.



LEO:  Shall we play the ad?  I mean, it's two minutes long.  Three minutes long, at least.



STEVE:  Yeah.



LEO:  You want to play it.  All right.



STEVE:  Yeah.



LEO:  Here you go, ladies and gentlemen.  Spock and Quinto.  And this is an unpaid, unsolicited ad.



NIMOY:  Hello.



QUINTO:  Check.



NIMOY:  Check and mate, my young friend.



LEO:  So Quinto and Spock, actually Quinto and Nimoy, are playing chess.



QUINTO:  How about another challenge?  Want to play a round of golf at the club and get some lunch?  Whoever gets to the club last buys lunch.



NIMOY:  Stand by to have your wallet emptied by a tractor beam.



QUINTO:  Anything's possible, but probably not that.



LEO:  So Quinto goes to his Audi S7.



STEVE:  We should mention that our commentary doesn't do it justice.  Everybody has to go...



LEO:  No, you have to watch it.  But there's no many audio listeners and transcription readers that we'd better explain it.  So he pops his clubs into the S7, no problem.  Nimoy's got a Mercedes, and profanity ensues when his clubs don't fit in the trunk.  Quinto turns on his GPS, which pops out of the dash.  Leonard, meanwhile, is buckling his clubs into the passenger seat of his Mercedes.  I'm sorry to have to do this.  It just - but we have, I have to comment.  Otherwise the audio listeners just will hear music.



NIMOY:  [Singing a hobbit song]



STEVE:  Yeah, I think maybe they just have to get online, though.



LEO:  Well, we have to acknowledge that 90% of our audience is not seeing this.  Apparently this is a song that Leonard Nimoy actually recorded some years ago.



NIMOY:  ...Bilbo Baggins, the greatest little hobbit of all.  Yeah.



LEO:  Like the lens flare.  Very J.J. Abrams.



NIMOY:  Go, Bilbo.



QUINTO:  Call Leonard.



NIMOY:  Hello?



QUINTO:  Hey, where are you?



NIMOY:  Use your sensors.



QUINTO:  No need.  I'm already here.



NIMOY:  You're there already?  I feel like I'm stuck in a black hole.



QUINTO:  No worries.  I can practice my swing if you need to pull over and take a nap.



NIMOY:  Smartass.



LEO:  Leonard pulls up at the club, trapped in his car.



NIMOY:  [Coughing, choking] I have been, and always shall be, your friend.



QUINTO:  Really?



NIMOY:  I had you.



QUINTO:  Nice try.  You lose.



NIMOY:  No, no, no, I definitely had you.



QUINTO:  Not for a second.  Obviously, you're buying lunch.



NIMOY:  Technically we're not inside yet.



LEO:  And he gives him the Vulcan pinch and knocks him out.



NIMOY:  I'll see you inside.



LEO:  And Quinto's left lying on the ground.  That is an awesome ad.



STEVE:  So, huge number of Star Trek references throughout.



LEO:  So which - that was the movie, right, where Nimoy dies...



STEVE:  That was the one that predated "The Search for Spock."  Oh, wait, I guess it was "The Wrath of Khan" that was...



LEO:  It was "The Wrath of Khan."  So that was...



STEVE:  At the very end where Spock sacrifices himself:  "The needs of the many outweigh the needs of the one."



LEO:  Right, the terraforming has gone terribly wrong or something.



STEVE:  Well, the probe is going to explode and kill everybody who's within its range.  So, yeah.



LEO:  Of course he comes back because you can't really have Star Trek.



STEVE:  No.



LEO:  I wonder if he thought he would...



STEVE:  And he's still having so much - he's still having so much fun.



LEO:  Yeah, yeah.  What a great ad.  Many agree.  Perhaps the best ad ever.



STEVE:  Bit.ly/snnimoy, Security Now! Nimoy, and everybody can see it for themselves.  It was great.  Now, The Onion, of course, is well known for having a lot of fun spoofing things.  There was a note that appeared in The Onion from Karen Seubert, who's the privacy and security expert for Chase Bank.  And she says, "At Chase Bank, we recognize the value of online banking.  It's quick, convenient, and available any time you need it.  Unfortunately, though, the threats posed by malware and identity theft are very real, and all too common nowadays.



"That's why, when you're finished with your online banking session, we recommend three simple steps to protect your personal information:  Number one, log out of your account.  Second, close your browser.  And then, three, charter a seafaring vessel to take you 30 miles out into the ocean, and throw your computer overboard.  Yes, online banking security is as easy as one-two-three.  Chase is committed to making your banking experience enjoyable, trouble-free, and, above all, safe."



LEO:  Love it.



STEVE:  "Which is why you should strike your computer with 20 to 25 forceful blows from a pipe wrench as soon as you reach international waters, toss the plastic and metal shards into the sea, and then immediately sink the ship you're on.  And then, once you dive to the sea floor, grab the scattered computer pieces, and shove them all inside living clams, you'll be able to rest easy knowing you're banking smarter and safer with Chase."  So thanks to The Onion for that.



And lastly, the first season of a show on FX that I very much enjoyed is over, and I can recommend it without hesitation.  It's called "The Americans."



LEO:  Oh, yeah.  I was wondering what you thought of that.



STEVE:  Extremely good.  IMDB gives it an 8 out of 10.  It has been renewed, and I imagine they're going to keep it going for a while.  It stars Keri Russell, who we know.  J.J. Abrams likes her a lot.  So, for example, he was the creator of "Felicity," and so she was the Felicity character for four years on that show.  And of course J.J. used her briefly at the beginning of "Mission Impossible 3."  She was the agent who ran around a lot and died after the first 10 minutes of the show.  So she didn't last very long on that.



LEO:  He liked her, but not a super lot.



STEVE:  She was an original Mickey Mouse Club person and has a very long filmography.  She plays with Matthew Rhys, who we've only really seen him briefly.  He was best known playing Kevin Walker on the "Brothers & Sisters" Sunday night soap that was on for a number of years.  Anyway, season one is finished.  Number two is coming.  And I'll give just a sense for it.



The description that they have for the show was "The Americans is FX's period drama about the complex and complicated marriage of two KGB spies posing as Americans in suburban Washington, D.C., shortly after Ronald Reagan was elected President.  Philip and Elizabeth" - played by those actors - "have a network of spies and informants under their control, while their two children, 13-year-old Paige and 10-year-old Henry, know nothing about their parents' true identity.  Even though Philip's growing affinity for America's values and way of life leads to tension with Elizabeth, who is quite gung-ho Mother Russia, the two must work together to keep the FBI from discovering who they really are."



And I have to say I love the show.  It was really compelling because it was very well written.  It was not in a hurry.  It wasn't - I saw a criticism that it wasn't enough James Bond.  But the fact is, there was plenty of stuff going on.  I mean, it was exciting.  But it mostly is a study of, I mean, really written as if it were true, of this is what, if you assume the setup, this is what these people would really be going through.  And I really liked it.  So it gets a Steve Gibson 100% recommendation as something that people may want to take a look at when it's on Netflix or at your favorite media outlet, whatever that is.



LEO:  BitTorrent.



STEVE:  Yeah.  I hesitated to say...



LEO:  I know what you were thinking.  Your favorite pirate media outlet.



STEVE:  And I did have a nice note from a John Cole.  And I think I pronounce this Gifu City, Japan.  He said, "Dear Mr. Gibson, I just had to tell you what happened because I'm so amazed again."  He said, "On another desktop computer I ran two other registry cleaners and then noticed in the ReadMe file of one that definitely does not clean out Windows registry entries to any degree, and recommended Microsoft's RegClean for that.  I ran it and found some registry problems left by the two other reg cleaners and backed them up with no problem.



"So I decided to run Microsoft's reg cleaner on another older desktop, and somewhere along the way it seemed to have frozen up.  I read the ReadMe file there, which says that sometimes RegClean may appear to have stopped, but is actually working.  Hmm.  So I waited and waited.  I finally ran another instance of RegClean to check out if it would stop at the same point, and it did.  So I rebooted, thinking that would clean up the ongoing confusion, but...."  And we know where this is headed.



"Upon reboot, after entering the BIOS password, Windows started coming up normally, but the red LED indicating reading to the hard drive stayed lit for more than three minutes, while normally it takes only 20 seconds or so.  I waited longer, telling myself this must be a fluke, and it'll be okay.  Well, I got tired of waiting and finally realized something was wrong. So I ran SpinRite at Level 2, my first time to do this.  I've always run Level 4 in the past.



"In the initial window that comes up, each sector was processed, but no sector came up recovered or bad or unrecoverable on that window.  After the operation finished, on another window I saw many ECC corrections and other things, but I don't know exactly what those mean."  Of course we've taken care of that now with the new screen that I just mentioned earlier.  Anyway, "After SpinRite scan I rebooted.  And just like magic, everything is back to normal, a good boot and Windows XP running perfectly again.  I don't know exactly what it is that SpinRite does, but I know it does it extremely well.  I can't thank you enough."



LEO:  It's magic.



STEVE:  "When I purchased SpinRite, I thought it was a bit expensive.  But it's paid for itself many times over.  P.S.:  I listen to you and Leo every week, and I love the show."  So, John, thanks for sharing your story.



LEO:  Gifu Prefecture.  Prefecture.



STEVE:  Ah.



LEO:  Yeah.



STEVE:  Okay.  Now...



LEO:  We got - go ahead.



STEVE:  Lastly, lastly...



LEO:  Yes.



STEVE:  This also generated a huge feedback, mostly from people saying, what, Steve?  You're saying SpinRite can't fix that one?  This is the "I really want my data destroyed" photo of the week.  And there's the link, Leo.  You can click on that.



LEO:  Let me go pull that up.



STEVE:  This was somebody who was determined not to have  his hard drive data read.



LEO:  Did he take it on a boat, bang it 45 times, and then...



STEVE:  I think he almost followed the Chase security...



LEO:  That platter is pretty - it looks like he could - he's made an ashtray out of the platter, actually.



STEVE:  Someone said, "Steve, you could just steamroll it and then SpinRite would probably be able to run over it and fix it."



LEO:  Actually, yeah, I mean, I think you really still need to do something to make that unreadable.  I don't know.



STEVE:  Anyone?  Anyone?  Actually, you can see that he forgot the magnet.  The magnet is sitting there on top.



LEO:  Which one is the magnet?



STEVE:  That's that kind of curved-looking thing held between four dots in order to hold it in place.



LEO:  Yeah, this thing here. Huh.  All right.



STEVE:  Yeah, it's very cool.



LEO:  That's that magnet.  Get the magnet while you can.



STEVE:  Get the magnet out.



LEO:  I'm going to go take apart some - we got any extra hard drives lying around, John?  Let's just pry them open and take the magnet.



STEVE:  They're fun.



LEO:  Leave the gun, take the magnet, as they said in "The Godfather."  All right, Steve.  Questions and answers.  Are you ready, sir?



STEVE:  You betcha.



LEO:  All right.  "The Wrath of Khan."  It was the, what was it, the Genesis device?



STEVE:  Yes, the Genesis probe...



LEO:  The Genesis probe.



STEVE:  ...was the thing that was - or I think they also called it the Genesis device.  That was what, when it went off, it was going to reconfigure all the matter within its range, and so you had to be out of that nebula where they were setting it off, or you'd be toast.  And so Spock had to get the engines back online, he had to stick his arm down some horrible...



LEO:  Sacrifice himself.



STEVE:  ...radiation thing.  Yeah. 



LEO:  But then came back, and so everything is fine.  That's why the reboot is so great.



STEVE:  He just - he looked great in that ad, Leo.  He was, you know, I think, well, we've got plenty of more Nimoy here in the future.



LEO:  Plenty more Nimoy.



STEVE:  And then speaking of which, Kirk looks fantastic, too.



LEO:  And Shatner, too, yeah.



STEVE:  Shatner's in great shape.



LEO:  That shows you, when you do what you love, you stay young.



STEVE:  Well, it's the time travel.  That's...



LEO:  That'll do it, yeah.



STEVE:  If you have time travel, you can do all - you can play all kinds of games like that.



LEO:  Question #1 from Joe Roderick, Massachusetts.  He wonders about the value of stealthing IPv4 ports:  I love the show, thank you, et cetera.  I'm wondering what the virtue is in having stealth ports these days.  My understanding is, when you're stealth and somebody pings the port, no response.  Nothing to attack here.  Move along.  However, with IPv4 nearly full, are there really any attackable IP addresses that have no device behind them?  In other words, hackers might just assume, hey, it's an IP address, there's going to be a computer there.  With IPv6, of course, so many ports, many of them, most of them, a vast majority of them will be unoccupied.  What do you think?



STEVE:  Well, that was an interesting idea, I mean, the idea being that, okay, if IPv4 is all allocated, then you pretty much know there's something there.  Okay.  But then I love the idea that, well, wait a minute, what about with IPv6?  Well, yes.  When you have a 128-bit address, which is what IPv6 gives us, then it is no longer feasible to scan the address space.  HD Moore scanned - recently he's been scanning a lot, the Internet often, finding all kinds of things.  But that's exactly the point.  The fact that there are all these devices available, visible on IPv4 says - and they're being discovered by spiders and by scanners - says you really don't want ports open.  You want to be stealth.  So then the question is, is it worth saying I'm here, but my port is closed, or I'm just not here at all?



Stealth doesn't cost anything.  It's not like you have to pay annually to be stealth.  It's just a matter of not sending anything back when someone sends you a probe saying, can I connect to this port?  You can say no, or you can just ignore them.  And so all stealth is is just ignoring them.  So why wouldn't you?  So it's like...



LEO:  As we know from this British, whatever, post office, there are plenty of places that aren't using all their IP addresses.



STEVE:  Yes.  Exactly.  And in fact, the blocks that are still unknown are known.  I mean, sorry, the blocks that are still unused, unallocated, nonpublic, are known.  For example, nobody is going to scan the 10-dot chunk of 16 million addresses because there's nobody there.  That's been reserved.  And the fact is, as IPv6 begins to roll out, the people who care about such things will know which blocks of IPv6 have been allocated to whom.  So there will be allocation maps available, saying, if you want to scan, these are the blocks you would scan.  And there'll be all kind of leakage of which IPv6 addresses are in use.



For example, right now every server gets all the IP addresses of everybody who contacts it.  So if, in some future world, maybe not this one, IPv6 ever does exist, it'll be easy to start building logs of what IPv6 blocks are apparently allocated based on traffic coming into servers.  So it's really never going to be a mystery.  Even vast as the IPv6 space is, we'll be pretty much - there'll be lists and well-known, these are the ranges that are alive, and the vast majority of the space will always be empty.  And again, stealthing is free.  Just don't say anything.



LEO:  Right.



STEVE:  Yeah.  Just ignore the nonsense that's coming in.



LEO:  Why respond?



STEVE:  Right.



LEO:  David Riggleman in Indianapolis suggests that the SSL Labs report doesn't tell the whole story:  Thanks to your recommendation of SSL Labs, I ran a report on one of the banks I use, Huntington National Bank.  They are a larger bank in the Midwest, and I was shocked when they had a grade of F because they supported SSL v2.  I immediately contacted customer service and eventually reached the IT department.  After some investigation, it turned out that the bank's main page did support SSL v2, although they did plan, there was a plan in the works to drop it, but it hadn't yet been carried out.  However, and this is important, that's different from the server being used for online banking.  I reran the SSL Labs test, and this time the grade returned was a C.  I presume he put the banking URL in instead of the front page address, which is of course what you should do.  Anyhow, I wanted to make you and possibly others aware the grade they see from SSL Labs when first visiting a site might not tell the entire picture.  Thanks for the great show.



STEVE:  Yeah, that was a great note.  Many people - first of all, the SSL Labs referral has been really useful.  I've had a lot of feedback from people who, frankly, stunned me with how quickly their banks did reply, credit unions and banks and so forth.  I think it's just, it's so easy to be concerned by a grade of an F, and SSL Labs will give anybody who has SSL v2, because there are so many exploits possible against v2 of SSL, an immediate flunking, failing grade.  So many people said, my credit union had an F.  I told them.  The next day it was a B.  And it's like, wow.  Okay.  I mean, but not just once.  Over and over and over and over.



So I've really been impressed with the power of the visibility.  And of course banks are going to be more concerned about their reputation.  So the idea that someone is rating their security an F is going to get the attention, you know, is going to shoot through at lightspeed to the IT department.



But the point that David makes is a good one, and that is, you absolutely - and many people have been confused in the same way - absolutely have to make sure that you are testing the proper domain because you might have BofA, for example, dotcom, and but when you actually do online banking, it's onlinebanking.bofa.com, which is an entirely different network or server or whatever.  That's the security that you want to test, not just BofA.com.  So definitely important to make sure, as you also amplified, Leo, that they're checking the right domain.



LEO:  Yeah, that makes sense.  Lance "The Paranoid Cheapskate" Reichert, who is enjoying the muddy season of upstate New York, wonders about the security of new era common interfaces.  He says, I'm looking for a Drobo to use with one dedicated computer which will remain turned on, attached to the Drobo all the time.  This would be the server.  And one or more computers will share the Drobo through that server over a network.  There seem to be three interfaces for the Drobo family:  Thunderbolt, USB 3.0, and Ethernet.  Ethernet is definitely not what I want, since I want a single machine to own the device array, but I'm unsure of the security aspects of the Thunderbolt and USB 3.0 ports.



In the past you have mentioned that DMA ports like Firewire make it theoretically possible for a physically present intruder to peek into a running system and retrieve keys to encrypted drives.  Do either Thunderbolt or USB 3.0 leak that kind of access?  If the server PC lacks an integral USB 3.0 port, would adding a USB 3.0 interface card give that Firewire-like access to internal memory?  Same question for Thunderbolt adapters.  Thanks.



STEVE:  Great question.



LEO:  Do you have to freeze the memory in order to read it?  I mean, isn't it, like, complicated?



STEVE:  Actually, not for Firewire.  He's remembering correctly that Firewire, unlike USB, any version of USB, Firewire is a DMA interface.  And here's the key:  So is Thunderbolt.  So...



LEO:  That's for maximum speed, I would guess.



STEVE:  Well, what it is, is instead of it being a...



LEO:  Oh, it's peer to peer as opposed to master/slave.



STEVE:  Yes, exactly.



LEO:  Yeah, yeah, client-server, yeah, yeah.



STEVE:  Exactly.  So the Thunderbolt device, just like a Firewire device, has access to all of your system's memory.  And it does that in order to be a so-called master on the bus and essentially be able to transfer its data into the system memory without any intervention, like without having to be continually polled by the processor running in the device.  So it's able to get much - that's the way it's able to get much higher throughputs is you're able to tell the device, send your stuff to this block of memory, and it does it autonomously.  In order to do that, it's providing both the address and the data through the interface which gives it access to everything.  Now the specification for Thunderbolt gives it unfettered access.



But we have seen that in Firewire, and I'm sure in Thunderbolt, the implementation may put boundaries on the region of memory that it's able to access for the sake of security.  So if Lance is concerned, I would choose USB 3.0 over Thunderbolt from a security standpoint because Thunderbolt does have some potential concerns.  And especially if it's running on Windows.  I don't know if this is - if he assumes it's a Mac.  Maybe it's on a Linux box.  But you'd want to make sure that it was bolted down from a security standpoint because the Thunderbolt can potentially access all of your memory, just like Firewire.



LEO:  I'm not sure I'd do what he's saying to do.  I'd just get a NAS.



STEVE:  Yeah.



LEO:  Okay.  But anyway...



STEVE:  But for whatever reason, that wasn't what he wanted to do.



LEO:  That's what he wanted to do.  Maybe he has a Drobo lying around.  Gianpaolo Racca in Italia wonders:  OpenVPN build or buy?  Hey, Steve, thank you for your show.  I heard the last - I can't.  I won't do that.  I heard the last, 400th, episode, and it made me think.  It's been a while since I started considering a VPN service.  I own a home router flashed with Tomato.  So my question is, my only concern is privacy of mobile data.  And since I saw there's an official OpenVPN client for iPhone, can I set up my own VPN network, then route my mobile traffic through that, through my system, to the public Internet?  Not just to save money, but also to learn something and not have to switch VPN if I have to access my home network.  What do you think about that?  Thanks, and keep on rocking.



STEVE:  Answer is one word:  Yes.



LEO:  Yeah.  Good idea?



STEVE:  That's a perfect solution.  Use Tomato.  Tomato supports the OpenVPN server.



LEO:  Is it pretty easy to use?



STEVE:  Yes.  Yes.  It is very simple to use.  And you can - if you also use ipchains, I believe that's what it is, you're able to have multiple ports that all feed into the port that serves OpenVPN.  The advantage of that is that you have a much better time getting out of whatever network you're in, onto the Internet, and over to your home.  For example, you might use port 80 because OpenVPN is an SSL VPN.



So I think OpenVPN, it's been a while, it's like 11 something is the default port, 1191, or I don't remember now.  But I would say also use, like, port 80, maybe 443.  Use some common ports that are typical web ports.  Those are probably not going to be blocked outgoing, like from Starbucks, for example.  So then you'd be able to use your iPhone to connect to your own router at home.



When you do that, you'll get a 192.168 IP address, literally an IP address on your home network.  And then it will route your - then you'll be able to talk to your home devices.  You'll see them just like you're on your home network.  But any external traffic will go right back out to the public Internet.  So that's a terrific solution.  So that's many more than one word; but, in one word, yes.



LEO:  Yes, plus annotations.  Joseph in Los Angeles wonders whether Carrier Grade NAT, or CGN, is more anonymous:  Is Carrier Grade NAT more private?  Is there a way for the ISP to uniquely ID a user except by modifying the HTTP_USER_AGENT on a non-SSL session?  How would an ISP respond to a warrant in that case?  Could they?  The RIAA must hate this idea.



I don't want to sit behind a 10.x.x.x IP.  But I think for my wife, kids, and friends, it's a great idea - except when they have a problem and call me for help.  I hope the CGN only blocks inbound ports and not outbound ports.  You'd better explain.  I don't understand what he's talking about at all, Steve.



STEVE:  I could hardly even hear you, Leo.  Is my audio coming through to you okay?



LEO:  Yeah.  Sorry.  Maybe I should talk louder.



STEVE:  No, it was Skype.  It was bad, bad, bad.



LEO:  So what is he - can you just explain what it is?  What is CGN, anyway?



STEVE:  So this is what we were talking about that BT telecom and Verizon also announced that they were going to be doing soon, and that is Carrier Grade NAT.  So the idea is that they're a NAT router.  Your ISP is a NAT router.  And so what he's wondering is, is there a way for the ISP to uniquely identify their user in traffic that they can see?  So that's why he says "non-SSL sessions" because the ISP is unable to see into that traffic.  And so what he's wondering is, is once CGNAT, Carrier Grade NAT, comes into use, organizations like the RIAA will no longer see per-customer IPs that they then ask the ISP who was your customer with this IP at that time?



So the problem is the ISPs are keeping records.  And so they will know what non-routable IP and routable IP was in use.  So my guess is we don't - we probably don't get, like, an increase in privacy as a consequence of our ISPs using NAT for us.  It's probably still possible for an external organization that wants to track down people who they presume or believe are acting illegally.  I'm sure there'll be a way for ISPs to say, oh, yeah, that was this customer of ours.



LEO:  Of course.  All the RIAA does anyway is contact the ISP and say this is what we know.  Tell me who it is.



STEVE:  Right.  But, I mean, his...



LEO:  So presumably the ISP knows exactly who it is.  That's the only question.  If the ISP didn't know, then they couldn't say anything.  But they know.



STEVE:  Well, it does require additional recordkeeping on the ISP's part because now the ISP has to know, not only which private IP they assigned, but which public IP that was mapped to, because somebody on the outside sees the public IP, not the private IP.  So, I mean, it will definitely require the ISP to, like, to maintain that mapping, which right now they don't have to maintain.



LEO:  So a privacy-inclined ISP could say, hey, we're not going to log this information, so when we get a subpoena we won't be able to do anything.



STEVE:  Yeah.  I mean, think of it exactly this way.  It's like, imagine you have, like right now, you've got your normal NAT router in your household, and somebody on the outside says, hey, your IP was doing such and such.  Well, and if you had a household of six people, there's no way of knowing which one of those people was the one.  Except, if you used things like time of day and...



LEO:  Say, hey, who was using the computer at 4:00 o'clock yesterday?  You're in trouble.



STEVE:  So you see what I mean.  Then that router obscures the identity behind it.



LEO:  Sure, that makes sense.



STEVE:  And so the identity stops at the NAT router.  So what CGN, Carrier Grade NAT, does is it pushes that NAT router boundary out to the ISP.  So now everyone behind that is obscured.  So it does increase the level of obscuration.



LEO:  Obfuscation.



STEVE:  Obfuscation.



LEO:  Obfuscation.  So Greg - in Montvile, Montville, must be Montville - Ohio wonders about proXPN servers.  I assume you'll be answering a lot of questions about proXPN on Security Now! next week.  We should say, if you're tuning in, that is the sponsor for the show.  Here's mine:  While software such as this provides a secure connection between me and one of their servers, the endpoints, what about the connection between proXPN and the site I'm trying to access?  My Internet traffic has to exit that VPN tunnel before it goes to its final destination.  Won't it once again be vulnerable at that point?  And won't proXPN know everything I'm doing on the Internet because they're acting as an intermediary?  Why should I trust them any more than I trust my ISP?  Or is my understand of how this works incorrect?



STEVE:  Well, okay.  So we're back to the same problem we've talked about often relative to, for example, the Tor network, the so-called Tor exit nodes, where because everyone who's using Tor has their traffic essentially concentrated from all over the Internet down to just squirting out of a few exit nodes, you would think, logically, that those would be prime targets for monitoring.  So in theory Greg is right, that traffic is being routed in full crypto tunnels to the proXPN servers, and then at that point decrypted and released onto the Internet.  So those servers represent all of the traffic concentration points of all of proXPN's users.



LEO:  It has to exit somewhere, otherwise you wouldn't be able to - unless you had VPN directly to the website.  But as far as I know, nobody does that.



STEVE:  Well, that's the advantage to having it at home is that then your traffic goes to your house and then is emitted from your house, rather than being aggregated by a big server in the cloud where it's all coming in and out with everybody else's.  On the other hand, there's a ton of traffic coming in and out of those servers in the cloud, so that's - so your traffic is mixed in with those.  But I guess my point is that the use model is a little different.  Greg sort of is thinking, well, wait a minute, why would I use this at home?  Well, I don't think you probably would unless you wanted to obscure your traffic from your ISP, as you were saying, actually, as one of your use cases during the - when you were explaining about proXPN earlier, Leo, that would be something you could do is use proXPN to keep your ISP from snooping on you.



LEO:  For the six strikes law, for instance, yes.



STEVE:  Yes, yes.  But the real advantage, I think, is for a road warrior who's out in hotels, who's traveling, who wants to encrypt their traffic.  So if you were saying that, you know, you lived in California, and you were in New York, well, you could set up a tunnel all the way back to your home in California.  But if proXPN has a server in New York, you're going to get much better performance using a VPN server close to you.  So again, it's a set of tradeoffs.  It's an option that you would have.  But there are many use cases and many different ways you could connect a cryptographic tunnel, either to home or to a central point.  But it's absolutely true that there is some inherent concentration of data in any of these cloud-based servers.



LEO:  Yeah, and presumably the RIAA would, instead of sending a note to your ISP, would send it to proXPN.  But I don't know whether proXPN would be able to tell who was using what when, or, I mean...



STEVE:  Well, and what logging they do.  I know that a lot of our very savvy users were asking proXPN, because I saw this Twitter traffic going back and forth, which country's laws do you follow?  And the answer was we follow the laws of the country in whose - where the servers are located.  So for U.S. servers, they follow U.S. laws; and for foreign European servers, they follow the laws of the country where the servers is.



LEO:  They're a Dutch company.  Am I right?  I can't remember.



STEVE:  Yes, or The Netherlands, yeah.



LEO:  The Netherlands, yeah.  Well, I'll have to look at the site, and we'll ask them.  But meanwhile, Kent is next on the docket here.  He says he's located somewhere on that third rock from the sun and wonders, when is a router too old?  Hi, guys.  Insert nice gratuitous comments here.  I'm wondering, how old is too old for a router to still be safe?  I've been running a old D-Link DI-604 with its final firmware.  It hasn't been updated for several years.  So I'm wondering, is it still safe to use such old hardware to protect my LAN?  Or should I start shopping for some shiny new one?  And, if so, what would you recommend?  I don't use WiFi as I don't ever see it as being totally secure.  What do you think about firewalls that use old PCs, like pfSense?  Signed, Kent.



STEVE:  Okay.  Well, we're asking the wrong person whether you should upgrade something that's working just perfectly for you.



LEO:  [Laughing]  Yeah.  Steve is the guy who uses old technology.



STEVE:  Yeah.  I've still got cranks on the sides of my machines, and they just run.  As long as the watch springs don't break, we're all fine.  I think there is no reason.  If the router does what you want; if you don't, for example, want to switch to Gig Ethernet, which is probably not supported, well, I'm sure it's not supported by the DI-604; if you're happy with the Ethernet, if you're happy with the speed, if you're happy with the features, if you don't want WiFi, I mean, we see instances where the new stuff is where the problems are.



LEO:  Right.



STEVE:  I mean, it probably doesn't have Universal Plug & Plug.  Yay.



LEO:  Yay.



STEVE:  So, yes, stick with it.  I see, you know, again, I'm probably the wrong person to ask.  But I see no reason to change it until you need some features that it doesn't offer.  And old PCs make really great routers, although they're just much less of a sort of a tiny, turnkey, low power consumption box.  They've got fans and power supplies and so forth.  So, I mean, I think running a PC makes sense, if you've got one, and you like the flexibility of having more of a Linux-based, bigger iron solution.  But it's definitely - there's just more to it than a cute little router running in the corner.



LEO:  Mark Prescott, Calgary, Alberta, Canada, has some terrific input about Butterfly Labs and bitcoinage:  Steve, I just finished Episode 401 of Security Now!.  I thought I'd send you two thoughts on the Butterfly Labs question.  Butterfly Labs has produced and shipped some Jalapeno units.  My impression is the majority of these units went to bitcoin review sites, but some likely have gone to paying customers.  To my knowledge, no other units have been finalized.



According to their statements, BFL has run into problems developing the ASIC units, as you suspected, in a few areas, namely power consumption, heat generation, and the amount of processing power they can get onto a single chip.  This has resulted in price changes, expected output for the units, and changes in the casing and fan assembly.  Quite frankly, I believe them, but that doesn't change the fact that they're facing an uphill challenge which could result in orders not being fulfilled.  That's his speculation, by the way, not something coming from Butterfly Labs.



STEVE:  Right.



LEO:  Second, your final question on Episode 401 referred to the ability of a 5GHz per second - I'm sorry, giga what?  "GH."



STEVE:  Hash.  Gigahash.  Gigahashes.



LEO:  Gigahash per second Jalapeno unit being able to create $900 of bitcoin in a month at the present time.  I just wanted to clarify that, while this is true, it doesn't really have any basis in what will happen when the units are officially released and widely available.



STEVE:  Right.



LEO:  The reason is difficulty.  The difficulty of mining bitcoins adjusts every 2016 blocks, roughly every two weeks, to keep the rate of bitcoin generation consistent.  That means the total network hash rate, currently about 80,000 gigahashes per second, is used to determine that difficulty.  So as these units start being spread out on a widespread basis, the difficulty is going to rise proportionately and ensure that the bitcoin production of these 5 gigahash units will not result in $900 a month worth of bitcoins being produced unless the value of bitcoin rises dramatically.  Which of course it might.  Or if you're like, it's like a pyramid scheme.  If you're the first one to get it, you're going to make more money than the later people.



STEVE:  Exactly.  Exactly.



LEO:  Keep in mind a large portion of the current network hash rate is derived from GPU-based bitcoin miners, which have much worse megahash per second per dollars and megahash per second per - what's "J"?  Jalapeno rates?  What is this?  You're starting to lose me.  What?  Joule.  Oh, because we're talking about heat use.



STEVE:  Oh, energy, yes, energy usage, yes.



LEO:  Megahash per second per joule rates.  Obviously we've got a bitcoin miner in the audience here - than even the Jalapeno unit.  This means that as the cheaper units become available, it will become economically nonviable to mine with GPU miners, and everyone will be using the Butterfly Labs or similar ASIC units.



STEVE:  Yup.



LEO:  Yeah, because that will be the standard.



STEVE:  It's just going to push everybody in that direction, and a lot of people will no longer be able to play.



LEO:  The end result:  The entire network hash rate will likely depend almost entirely on the cost, initial hardware and cost of running, of whatever the most widely available mining hardware is.  That is, $500 worth of hardware/power will now likely produce the same amount of bitcoins as $500 worth of hardware/power in a year or two.  That's good logic.  Its just the nature of bitcoins.  That make sense?



STEVE:  Very nice piece of work.



LEO:  Yeah, yeah.



STEVE:  So thank you, listener.



LEO:  That's how it's designed.



STEVE:  Yup.



LEO:  Hi, Steve, says Volker Nebelung in Bonn, Germany.  Nebelung, isn't that a - I think that's from Wagner ["Der Ring des Nibelungen"].  He reports weird ShieldsUP! results:  Steve, I used your port scanner tool today in my new router FRITZ!Box 7360 SL - der FRITZ!Box - and I'm getting very weird results.  Both links show images of two scans of my IP address.  I'll show those in a second after I finish reading this.



Every time I scan, ShieldsUP! shows different ports - oh, weird - as closed or stealth.  Additionally, the closed ports are always appearing in a certain pattern with a diagonal line of closed ports shown in the screenshots.  Is this a bug in the port scan, or is my router actually responding with weird port information?  Thanks for answering, Volker.  What?



STEVE:  This is a wonderful and very interesting question.  We encountered this immediately after I added that new feature to ShieldsUP! where it was being smarter about not detecting stealth when things were not stealth.  Remember that I added its ability to understand ICMP echoes coming back from closed ports.  Originally ShieldsUP! would send out a TCP SYN, and it was only looking for a SYN/ACK or a TCP reset, the reset saying go away, we're closed here.  But the other thing that a TCP port can send back is an ICMP packet saying port not available.



Now, here's the gotcha.  The rate at which ICMP packets will be sent is limited.  The Internet specifically rate-limits ICMP traffic.  So you can't have, like, ping floods and other sort of bad situations where ICMPs would start flying around the Internet and, like, never go away.  So what's happening is the reason Volker is seeing this strange pattern is ShieldsUP! is sending out probes at a certain rate.  And his new FRITZ!Box is not stealth.  The way it's currently configured, and he can probably change the configuration, it is responding with ICMP packets.



But either it or a router along the way is saying, wait a minute, you're trying to send back too many ICMPs.  We're going to drop some of these.  So that's why ShieldsUP! is not receiving all of the echoes back.  It's not seeing all of the ICMP packets.  So sometimes it'll see closed, and sometimes it'll see stealth.  The ports are really closed, but we just can't get all that information back.



[http://imageshack.us/photo/my-images/832/ohnetitelf.png/]



[http://imageshack.us/photo/my-images/407/ohnetitelt.png/]



LEO:  Wow.



STEVE:  So what you end up with is this weird pattern.



LEO:  That's cool.



STEVE:  Yeah, it really is cool.



LEO:  That is really cool.



STEVE:  Yeah.



LEO:  Amazing.  Couple of tweets for you.  Dale in Fresno, wondering about re-using the Blizzard Authenticator dongle.  Re-using it.  Is the authenticator dongle which Blizzard's selling at their website usable for more than one site?  They are selling them for $6.50 each, which seems to me a great price [bit.ly/10RQX89].  We were talking about how authenticators, it's kind of a standard now.  Is it using the standard?  Do we know?



STEVE:  Yeah.  Okay.  So I feel like maybe I - because I saw a lot of questions like this, and I feel like maybe I rushed through explaining that.  The problem is that, if you were to - behind every authenticator like the Blizzard Authenticator is a symmetric key.  That is, there is a key that goes along with it.  Users who set up software authenticators, like with Google and Amazon and Microsoft and Twitter and so forth, users who set those up see those keys.



But in the case of Blizzard, for example, what you have printed on the back is just a serial number, and the key is secret.  You never know what that key is.  And that's what the authenticating organization, maybe it's Blizzard is authenticating themselves, or maybe it's VeriSign, as is the case, for example, with the original PayPal and eBay footballs.  So a third-party knows what that key is, and they will not tell you.  They won't give you that key.



So the model for the authentication that Blizzard offers is of an authentication service where you ask the third party what code the authenticator should be showing.  And you're never able to, like, give that to someone else.  You'll never know what the code is.  And so you can't provide it to someone else.  But more importantly, in this model, you really don't want to because, if you provide it to multiple people, and any of them gets their database hacked, and of course databases are being hacked all the time, unfortunately, then your secret code for your one authenticator gets loose.



And it's very much like using the same password on every site.  We know you don't want to use the same password on every site because, if it gets loose, then you can be logged in, people are then able to use that same password to impersonate you elsewhere.  Similarly, you do not want to reuse, ever, the same authenticator code on multiple sites.  So you really have to think of the Blizzard dongle as first-generation technology.  It's cool, but it's hardware.  And, frankly, we've already moved past that.  We've moved past hardware dongles.  We're now into software dongles, essentially virtual.



LEO:  I love the Google Authenticator.



STEVE:  Yes.



LEO:  It's just fabulous.  And so help me understand, then, what's happening.  Because with the Google Authenticator, it's software running on my phone, Android or iPhone.  And when I want to add...



STEVE:  It knows what time of day it is.



LEO:  It knows what time of day it is, okay.  So when I want to add an account, I can enter in some numbers or scan a barcode, which is what I always do.  Currently mine has three.  It has Google, LastPass, and Outlook.com.  All three of them are using second-factor authentication.  I've turned that on.  And by the way, I saved those bar codes, you're probably not supposed to, but I saved them in LastPass.  So if I want to add a new phone, because I'm always using new phones, I have the barcode.  I just take a picture of it.



STEVE:  Nice.



LEO:  And so that's great.  So what is in that barcode?  Is that a serial number?



STEVE:  Yeah, well, that is the private...



LEO:  That's the key.



STEVE:  That's the private key that the agency authenticating has given to you in the form of a 2D barcode.  And then...



LEO:  So that's what you want.  That's the problem with the Blizzard Authenticator.  It's the same key all the time.



STEVE:  Exactly.



LEO:  In software, my Google Authenticator can have as many keys as I add.



STEVE:  Yes.



LEO:  And so I look, and I get three different codes, depending, and I just pick the one that I need.



STEVE:  So this solves the problem of the so-called key ring.  We talked about we'd like - oh, we hope, years ago, when this was just emerging, we were hoping that we weren't going to have a big key ring full of individual dongles, each with their own code.  And this has been solved, thanks to the proliferation of smartphones.



LEO:  And everybody should be using this because this is now a standard.  It's not a Google standard.  Others could make an authenticator that would work exactly the same.



STEVE:  Yes.  The one thing I think we're going to see, and this is premature, but I think there's a way to leverage public key crypto, and we're not doing that yet.  This is all symmetric, private key crypto.  That is, that key is secret, and you need to keep it secret.  But I think there's a way, when we take this one level up in complexity, and I kind of think that's where Google is headed.  We'll have to see how this evolves.



LEO:  And that's why I'm proper to keep my QR codes locked up in LastPass because that's the key to the kingdom.  Anybody could then...



STEVE:  Yes.



LEO:  ...add that to their authenticator.



STEVE:  And you're exactly right about wanting to keep those because that allows you to clone those.  It's funny, someone sent me a picture of three different phones, side by side, all showing the same code.  And that person said, well, so much for authentication.  It's like, no.



LEO:  That's the point.



STEVE:  That's what you want.  All three have the same code.  They all think it's the same time of day.  So they're all going to show you the same result.



LEO:  They're behaving properly.



STEVE:  Yup, exactly.



LEO:  Otherwise it wouldn't work, if it wasn't always - yeah.  No, I do, because I've always got a new phone; right?  So I just install Authenticator.  I scan in those codes.  It couldn't be easier.



STEVE:  Flash the barcode, yeah.



LEO:  I just think everybody should do this.  It's just...



STEVE:  It's a win.  It is the right way for now.



LEO:  It's awesome.



STEVE:  I think it won't last.  It's going to - we're going to already obsolete that soon.



LEO:  Really.



STEVE:  But for now it's absolutely the right way.



LEO:  With some sort of identity feature where I'll have - because I'll have my private key, and I'll give out my public key.



STEVE:  Exactly that.  Exactly that.



LEO:  Okay.



STEVE:  Exactly that.  Right now we don't have the horsepower.  But we will shortly.



LEO:  This is great.  I love it.  I have to say.  I feel so much more secure.  And I wish everybody would.  I turn on second-factor now anytime I can.



STEVE:  It's the right way.



LEO:  Oh, yeah.  That's great.  It just gives you peace of mind.  Anne Stellingwerf, @AnneSt on the Twitter in Apeldoom, tweets - and I'm surprised we didn't get any questions, this is the first question about BitTorrent Sync, which we covered last week, the one and only question:  If there's no authentication on BitTorrent Sync, isn't it insecure?  Because I can try keys and download people's files anonymously, in other words, brute-force the key.  How is uniqueness of the generated key guaranteed?  Generating a duplicate key would lead to downloading someone else's files.  She's got a good point.



STEVE:  Yes.  Absolutely does.  And it's funny because I went back and forth in Twitter trying to explain that, if the key was four characters, then we would have a problem because that's just not - that's not enough bits.  But we believe, and we don't have the full technical readout from them yet, but I'm sure we're going to get it, it's too - we believe that it is a root key of 168 bits.  Now, we're just - people are bad at understanding probabilities.  But that means there are 2^168 possible keys.



Now, that happens to be, I'm not doing this in my head, I did this ahead of time because I knew you were going to ask me this question, Leo, 3.74 x 10^50.  Okay.  That's three, and 50 zeroes, 3.74 and 50 zeroes.  I mean, so yes.  We definitely need good pseudorandom generation.  I mean, for example, if you wanted to use your own key, you could use the Perfect Passwords page at GRC, which generates incredibly, very high-quality, pseudorandom keys.  But the beauty is we are hiding in this vast key space.  2^168, that is a huge key space.  And it is true...



LEO:  Somebody in the chatroom said 300 trillion trillion trillion trillion.



STEVE:  Yeah.



LEO:  I don't know if that's right, but it sounds like it to me.



STEVE:  It sounds right.



LEO:  It's the right order of magnitude.



STEVE:  And so, but, I mean, yes.  If you, I mean, imagine, think of it as 168 random bits, like pennies, heads or tails, 168 of them.  And you have to have every single one exactly right.  Well, the fact is that is an incredibly vast key space.  So, I mean, for example, it is much more secure than a username and password.



LEO:  What?  Oh, that's interesting.



STEVE:  A username and password, think of the total number of characters.



LEO:  There's potential collisions there, too, aren't there, after all.



STEVE:  Yes.  There are many fewer characters in a username and password.  And the beauty of this is there is no central repository.  If you had accounts, you'd have to have an account center somewhere.  This is just saying that we're going to have so many bits that you can just pick one at random out of the air, and it is vanishingly small chance of ever colliding with someone else.  Of course, if you did, you'd know instantly.  But it's just not going to happen.  It's just not going to happen.



LEO:  Wow, that's really - so collisions are possible, but highly unlikely.



STEVE:  Ridiculously unlikely.



LEO:  Like the universe is going to end unlikely.



STEVE:  I mean, just like, yeah.  It won't even get started, Leo.  And we forgot to mention the "Ender's Game" trailer while we were recording.  So I just wanted to let our listeners know, "Ender's Game" is a fabulous sci-fi by Orson Scott Card.  It's a classic sci-fi concept and story.  There is now a trailer.  I'm sure people can Google it and find it.



LEO:  Oh, it's easy to find.  That's how I found it.  It's on YouTube.



STEVE:  Harrison Ford stars.  It's coming out, I believe it's November 1st of this year, so the beginning of November of 2013. Go find the "Ender's Game" trailer.  Oh, goodness, it looks wonderful.



LEO:  And we have verified it is spoiler free.



STEVE:  Yes.



LEO:  And we do recommend, though, at least I do, read the book.  You have till November to read the book.  Because...



STEVE:  The book will be better.



LEO:  ...one or the other's going to spoil it for you.  So be spoiled by the book, the original.  Although some people prefer the spoilers to be delivered in visual form on a screen.  And if that's the case, then don't read the book.  But one or the other is going to spoil it for you.  Really, really good.  I can't wait.  Looks awesome.



Steve Gibson is the man at GRC.com, the Gibson Research Corporation.  That's where you'll find SpinRite, his bread and butter, the world's finest hard drive maintenance and recovery utility.  If you have a hard drive, you must have SpinRite.  But you'll also find lots of freebies there as Perfect Paper Passwords; Password Padding, which has really changed my life.  All my passwords are super long, thanks to Steve.  Lots of information there, including ShieldsUP!, the absolutely must-use Plug & Play detector, the probe to make sure your router is safe.  GRC.com.  16Kb versions of the show are also lurking there somewhere, as are text transcriptions by Elaine Farris.



And I should point out that, if you have a question for Steve, we'll do another Q&A episode in a couple of episodes.  GRC.com/feedback is the place to leave those.  Don't email him.  It's not allowed.  We keep bigger quality, higher quality versions, larger files, on our site, TWiT.tv/sn, both audio and video.  Or subscribe, and you'll get it every single week.  You could pick the form you prefer.  Steve, I thank you.



STEVE:  Thanks, Leo.



LEO:  See you next time on Security Now!. 



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#404	

DATE:		May 15, 2013

TITLE:		EFF: How Facebook Monetizes

SPEAKERS:	Steve Gibson & Iyaz Akhtar

SOURCE FILE:	http://media.GRC.com/sn/SN-404.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with the past week's updates and security news, Iyaz and I share information presented by the Electronic Frontier Foundation (EFF) which describes how Facebook manages the privacy interactions with their third-party data warehouses and advertisers.



SHOW TEASE:  Coming up to Security Now!.  Leo's out, but Steve is here to give us the updates on Java, the new Firefox, and to find out how you're making Facebook a lot of money, and more.



IYAZ AKHTAR:  This is Security Now! with Steve Gibson, Episode 404, recorded May 15th, 2013:  How Facebook Monetizes.



It's time for Security Now!, the show that helps you stay safe online.  And Leo's obviously not in.  I'm Iyaz Akhtar, and thankfully I'm joined by the star of Security Now!, the mustachioed master of security, Steve Gibson.



STEVE GIBSON:  Hey, Iyaz.  Great to be with you today on Episode 404.



IYAZ:  404.



STEVE:  The "missing" Security Now!.  The "not found" page of Security Now!.



IYAZ:  But this episode is findable, anyway.  It's not going to be 404'd.  We've got a full episode coming up.  I'm a little fried.  I'm going to get that right out, tell people right in the beginning, because this is hour, what, five of broadcasting for me.  So thankfully Steve's here, and he's the real expert about everything.  We've got so many things to talk about, a lot of news coming up.



STEVE:  Okay, that's true.  So what would the second Tuesday of the month be without Microsoft patches?  In fact, it would be probably an impossible second Tuesday of the month without Microsoft patches.  Ever since they started doing this, they've never missed a second Tuesday of the month.  And so certainly that's no difference now.



Now, we talked last week about a brand new, just discovered, zero-day vulnerability that affected only Version 8 of Internet Explorer.  Not 6 and 7, not 9 and 10, only 8.  So Microsoft released, I think it was later that day, later Wednesday, they released a hotfix that sort of mitigated the concern.  But the good news is they were able to get a patch, a full patch out for that by today.



So they fixed 33 vulnerabilities yesterday on Patch Tuesday for May, including this zero-day flaw.  They did it actually in two pieces.  They probably already had a cumulative update for IE in the pipeline tested and ready.  So the zero-day flaw patch exists in a second update, and probably it makes sense that it's just for IE8, so you only need that one if you're using Internet Explorer 8 on your system.  Otherwise they fixed some problems in Windows, in Microsoft Publisher, Word, Vizio, and Windows Essentials.  So sort of your standard, run-of-the-mill Patch Tuesday, not as dramatic as some that we've seen.



One thing that I got a kick out of, though, was our friend Brian Krebs, who covered this Patch Tuesday as he always does.  On his website he posted an open sort of side note to Microsoft.  He just sort of, he said, "Dear Microsoft:  Please stop asking people to install Silverlight every time they visit a Microsoft.com property.  I realize that Silverlight is a Microsoft product, but it really is not needed to view information about security updates.  In keeping with the principle of reducing the attack surface of an operating system, you should not be foisting additional software on visitors who are coming to you for information on how to fix bugs and vulnerabilities in Microsoft products that they already have installed."



So I thought that was - it's a very good point because I have had Microsoft saying, oh, like on a system that's recently set up, or one that you're curating carefully that doesn't have Silverlight installed.  It's like, eh, no thank you.



IYAZ:  As [indiscernible] in the chatroom is saying, you do need Silverlight for Netflix.  And because you're going to be waiting a long time for those patches to download, you might want to watch a movie at the same time.  So you should get Silverlight as soon as you can.



STEVE:  Yup.  So also, as has been happening synchronized with Microsoft, Adobe updated Flash, Reader, and Acrobat.  No real big news there.  Flash fixes 13 vulnerabilities.  Of course IE10 and Chrome will both update themselves automatically.  You might need to restart the browser in order to get them to go and bring themselves current, depending.  But basically just Flash Reader and Acrobat updated from Adobe.



I didn't check to see, after I restarted Firefox, that it had updated to 21.  But I'm checking now.  And, yup, sure enough, 21.0 just came out.  This fixed a couple problems.  There was a privilege escalation that Mozilla had been worrying about in their own maintenance service, which v21 of Firefox fixes.  And then they also closed three critical holes, a couple which were remotely exploitable.  So not huge and dramatic, but Mozilla's Firefox now moves to v21.



IYAZ:  So you're telling me I should really update my Firefox 3 installation that's been sitting around because I haven't touched it since Firefox 3.  I just leave it there in my applications folder because you might never know when you need it.  Now it's up to 21.  Okay.  This went right past me.



STEVE:  Your go-to browser is what, then?



IYAZ:  Chrome.  I use Chrome.



STEVE:  Oh, you're okay if you're Chrome.



IYAZ:  Almost exclusively.  Almost.



STEVE:  Yeah, you and Leo are both Chrome people.  I'm still - I love the add-ons that are available for Firefox, and I'm a major tab user.  And I just like - I think I have, like, 87 tabs open right now.



IYAZ:  I got so burned by Firefox and Mozilla constantly saying, yeah, we'll fix that memory leak problem.  We'll fix that.  We'll fix that.  We'll fix that.  After a while I just kind of got, yeah, sure, you're going to fix that.  That's totally going to be fine.  I'm not going to have my system overheating because Firefox or Mozilla promised me again.  I guess the boy who cried wolf, or Firefox in this case, has happened.



STEVE:  Yeah, I understand that.  They really did make an improvement in 17 was where - they began to beta their improved memory management in 14;  17 I think they pretty much nailed it.  And frankly, I was just saying the other day that Google's Chrome really has become a hog of memory.  I mean, you launch Chrome, and it's just, if you watch your memory consumption, it just squats down on a huge chunk of RAM.  So I imagine they'll get to it.  I like Chrome a lot.  But I do wish they were continuing to fight back against that tendency to bloat it.  So those are, however, Google's Chrome and Firefox are my two favorite browsers.



So in the news, I guess it was late last week, there was some interesting coverage about a report which was circulating of law enforcement having a seven-week wait for Apple to crack iPhone encryption.  Now, that surprised everybody because we were assuming, I think it was when we went to iOS 4, that we knew that they deliberately took advantage of - wait a minute.  Maybe it's iPhone 4.  I'm getting my iOSes and my iPhones confused.  But remember that they added hardware encryption in the phone hardware itself, which allows them then to do real-time decryption without any software overhead.  And at that point, and we have covered this in detail explicitly in the past, it's possible to get your iPhone to be encrypted.



So it raised some concern.  And the problem is we don't really know in exact detail - Apple has the technology.  It's not completely open how it functions.  We know that they have the keys to our storage in iCloud.  That's well known.  The presumption is, though, that a well-encrypted iPhone is uncrackable.  Then we hear that there's a seven-week waiting list.



So to me it seems that it's probably a brute-force attack on the hardware.  Certainly Apple has full knowledge and access to the phone hardware technology.  So maybe there's a waiting list because it takes that long to brute-force access to the phone.  Or, that is, it takes long enough that there's a huge demand from law enforcement to get into suspects' or captured iPhones and find out what they've got inside.  But it's a little bit of a concern that Apple is there; although Apple, as other companies do, are complying with government requests for information.  So I guess if Apple has a way of cracking it, then they'll say, well, we'll do what we can, but it may take a while.



And when I looked this morning, I saw the news that Syria had disappeared from the Internet once again.  Two weeks ago they dropped off for almost a day.  And I think they had just come back online when we were doing the podcast two weeks ago.  Last I heard they had disappeared again.  We heard two weeks ago that it was some sort of a fiber optic cable problem in Syria.  It's like, well, okay.  Leo wasn't buying that story.  He felt it was clear that it was the Syrian government had some political reason for taking them off the 'Net.  We don't know.  But they're gone again.  Or at least they were as of 7:00 a.m. Pacific time this morning, 10:00 a.m. back on the East Coast.



IYAZ:  I'm sorry I missed it.  Was there any official explanation?  Was it cable again?  Or is this supposed to be government intervention once again?



STEVE:  I haven't checked for the last few hours, but they just - all we know is that Google services disappeared.  Social networking services disappeared.  There's something called - I think it's a Google service called Voice to Tweet or Speak to Tweet or something, which provides a means, maybe using phone technology, I think it might have been Speak to Tweet.  Cell phone technology is then translated into tweets in order to still allow some access to Twitter, presumably, from inside a region which does not have Internet access.  I did not have a chance to pursue that.  But that apparently is something that Google did two weeks ago and was going to be doing again.  So who knows if they're still off, and how long.



IYAZ:  According to gmiola in the chatroom, he gave us a link saying that Syrian Internet is back up.  Links to Syrian networks have been restored at 18:26 Damascus time, outage duration 8 hours and 25 minutes.  And there's some charts over at Renesys.com/blog.



STEVE:  Okay, great.



IYAZ:  Thank you for that in the chatroom.



STEVE:  Yup, so we're back.  Or they're back.  Okay, now, this was very disturbing.  The "H" security guys, the H-Online, a well-known, U.K.-based security firm that we refer to from time to time, did some research to verify a report that they picked up on.  The report was from someone saying that links they had sent, that is, this reporter had sent to someone else, were visited by Microsoft.  So in order to verify that, the Heise Security group, they created some secure links, and they went to the trouble of embedding logon information in the links which they then sent through Skype chat to another user while monitoring the servers that those links referred to.  And sure enough, a short time after that, an IP registered to Microsoft in Redmond accessed the resources behind those.  And they were HTTPS secured links.



So this is sad.  Apparently they asked Microsoft what was going on.  Microsoft says, well, read the Terms & Conditions.  We reserve the right to scan Skype chat for spam.  And so apparently that's how they were justifying following links that were not related to spam activity, not phishing, just private HTTPS links sent in a Skype chat.  Some server on Microsoft followed them and pulled the resources.  And in this case the link contained all of the URL tail information required to authenticate a user for a secure logon, which Microsoft's query accomplished.  So that's disturbing.  That says...



IYAZ:  Is there any positive look at this?  Microsoft, they're trying to get away from spam in Skype.  But if they're reading everything, that seems like there's - I'd think there would be a huge backlash based on this information being out there.



STEVE:  Oh, my god, they follow - yes.  They're following links that people are sending to each other over Skype conversations.  So first of all we know that it is - this notion, Skype originally had extremely good security.  I mean, it was amazingly strong.  And we know that it was also point to point.  There was no ability to intercept Skype connections because it was direct user to user.  Sometimes, when NAT traversal could not be accomplished, then you'd have to have a third-party relay, and that's what the Skype technology called it, a relay server, so that both of those users could access the relay, and it would relay the traffic.  But that was typically just another user.



So what we now see is that, at least in the case of chatting, Microsoft is monitoring and reading everyone's chats and going so far as to follow links which have nothing to do with Microsoft, nothing to do with spam or phishing, they're just going there.



IYAZ:  This sounds horrific.  I mean, the things...



STEVE:  Really, really wrong.



IYAZ:  Since Microsoft bought Skype, the infrastructure has changed so that we have a lot of this information going through Microsoft at this point.  I wonder if a lot of this has to do with compliance with other countries that love to eavesdrop when it comes to Skype communications.  And we've always heard the story of BlackBerry when it comes to countries constantly trying to get them to unencrypt things.  And they're like, we can't do that.  We just don't have the ability.



STEVE:  Right.  Because the BlackBerry technology was well designed, and it was point to point.  It was phone-to-phone encryption, and only those phones knew how to decrypt the session that they'd negotiated with each other.  But obviously Microsoft has broken that, and we just - so the takeaway here is, first of all, this is important to know.  And anyone should consider Skype charts are now being surveilled 100 percent by Microsoft.  So you just can't use them for anything that you want to be secure.



There are some secure chat technologies, and people have been asking me about them.  I think now it's time to go check those out and do some TNO analysis - that's an acronym we coined here, Trust No One - to verify that they are secure alternatives because certainly for chatting, at least, you need it.  You and I are operating over Skype right now.  It's a great service, the best that TWiT has found for solidly connecting people in a reliable fashion.  But it certainly is no longer private.



IYAZ:  Well, it's a good thing we're live streaming, as well.  I don't think we have an expectation of privacy necessarily.



STEVE:  No.



IYAZ:  But the chats, that just sounds crazy that that's happening.



STEVE:  And verified.  I mean, the H-Online is a great group, and they have verified this is going on.  And in fact you can probably google their piece because it was titled "Skype With Care:  Microsoft Is Reading Everything You Write."  And they verified it.  Ugh.



Speaking of expectations of privacy, The New Yorker magazine just brought online an anonymous dead-drop system.  The Verge covered the story.  And it's interesting because just in the news also was the Associated Press's outrage over the admission by the Department of Justice - actually the DoJ confessed to this.  They sent a letter to the AP saying that they had been, for several months - and I saw the word "20," and I saw a number "100" in different reports.  So spying on at least 20 Associated Press reporters' telephone calls for several months last year, which really upset the Associated Press, you can imagine.  Apparently this was regarded as a really over-broad surveillance of their organization.  And Lord knows what information was discussed not relevant to any investigation that the Department of Justice had because they just threw this broad - they got a judge to issue the warrant which allowed them then to secretly tap the phones of these AP reporters.



But anyway, so it was interesting that, just while this was happening, The New Yorker opens what they call "StrongBox."  StrongBox is a Tor-based, secure, encrypted, anonymous dead-drop facility which allows people to share messages and files anonymously with writers and editors of The New Yorker magazine.  It was actually designed by Aaron Swartz, who we'll all remember unfortunately committed suicide.  And in fact it was ready to roll out late last year, but Aaron's death put sort of a pall on the project and halted it.



It's based on DeadDrop, which is open and free on GitHub.  So although developers and users are cautioned that it's not turnkey at this point, it does take someone who really understands the system to set it up.  It's based on three servers, two to do the work and a third one that monitors in real-time the operating security of the other two.  And essentially somebody that wants to send something with absolute security, encryption, and guaranteed anonymity uses a client which accesses the Tor system to hide their identity.



When they essentially create this drop, they're given a random string which is their ID that allows them to then identify themselves as the submitter of the information, completely anonymously, so all The New Yorker sees is this information which they receive.  They get it encrypted, and it is then decrypted on a - they get it as an encrypted file, and it is then decrypted on another machine not connected to any network.  So, I mean, they really designed the security.  Aaron used some very security-savvy people to design a provably secure, provably anonymous means of sending information to The New Yorker.



And of course this solves the problem, for example, here that the Associated Press is worried about.  Of course the AP is, as would any news organization be, concerned that the government spying on them means that people will be afraid to have conversations with their reporters for fear that they're talking to Big Brother and Uncle Sam at the same time.  So this system allows people to report things to The New Yorker knowing that they're remaining anonymous.



IYAZ:  So things would remain absolutely secure, that if somebody blew the whistle on a company or some other activity, that no matter what, even if there was spying going on, you would never be able to, and the government would never be able to, backtrack to the originator.



STEVE:  Yes.  Oh, and The New Yorker is able to have follow-on conversations that are also anonymous, all using this ID, which is the only means of someone identifying themselves.  So they're completely off the grid and, as you say, able to provide information.  And The New Yorker can't give the government anything it doesn't have.  And it would have no idea who this was who submitted the information.



So it's interesting.  The problem is there is very strong technology available now.  So this is the kind of reaction that you would expect to see as a consequence of what people perceive as abuse by the government of their surveillance powers under the Patriot Act.  It's like, okay, fine.  If that's what's going to happen, we can roll out more technology to protect people who still want to be able to have a relationship with us and not worry about being compromised.



IYAZ:  Is this something that a number of other organizations are going to adopt, as well?  Or is this just The New Yorker for now?



STEVE:  I'll bet you we see everybody with a system like this.  It'll get proven.  Now The New Yorker has a means of soliciting this information in a way that people who want to submit things know is safe for them to do so.  So that's a competitive advantage as a news reporting agency.  Absolutely, other organizations are going to say, hey, we want one, too.  And there it is.  It's called DeadDrop.  It's on GitHub.  You need some expertise to set it up, but the work is done.  So I'll bet you we're going to see all news organizations at some point, of any size, that offer this kind of anonymous submission of files and information.



Okay, now, get a load of this.  Oracle is changing their Java version numbering scheme, I kid you not, because there are too many updates to count using their current system.



IYAZ:  Wait.  Wait a second.  There are too many updates?  So instead of just trying to keep track of that, it's changed the number system?



STEVE:  Yes.  Yeah, well, the problem was they had some scheme with the way they were allocating version numbers.  But the need to increase the version numbers for updates, it sort of swamped the plan that they had for the way they were going to number things.  So they've had to change their updating scheme because they're patching Java so often.  So in the new system they have so-called "planned feature updates," which will now jump by 20s.  So it'll go, like, Java Version 7 Update 20.  Then it'll go to 40.  Then it'll go to 60.  And then their plan is that what they call "critical patch updates," or CPUs, those will be numbered by fives in between.  So 25, 30, 35, and then 40 would be the next major planned feature updates.  And that, then, that gives them room within the critical patch updates to have 6, 7, 8, 9 before they have a 10.  So they've literally expanded the way that they number Java versions specifically to accommodate the fact that they are having to update it so often.



IYAZ:  At some point they just have to call it Java Infinity, don't they?



STEVE:  Yeah.



IYAZ:  Because it's going to constantly be updated.  Just say latest, yes or no.



STEVE:  I thought it was interesting, too, to listen to some of the questions at Google I/O about the tension that now unfortunately exists with Java and Android on the Google side and Oracle's management of Java over on their side.  So that's - but apparently no one's that concerned about it.  They're convinced it's going to work itself out one way or the other, so...



IYAZ:  The chatroom is making jokes of making it like an Apple style thing, like they should stop calling it iPad 3 or iPad 4.  They should call it "The New Java."



STEVE:  Yes, "The Current Java," and don't worry about any of those other ones.



So yesterday, on what is today, today's the 15th, so it would have been May 14th, there was some sad news over in Bitcoin world.  We've been following bitcoinage a lot recently just because it's been interesting and fun.  Ars Technica reported that the Department of Homeland Security, our DHS, is alleging that Mt. Gox, which is the leading bitcoin exchange, is an unlicensed money exchanger dealing in crypto currency.  And what happened was Mt. Gox had an account over at - do you pronounce it Dwolla?  Dwolla?  D-W-O-L-L-A.



IYAZ:  I've heard Dwolla.  Just, yeah.



STEVE:  Dwolla, which is a major - which is a licensed currency exchange that allows - it's sort of like a PayPal sort of organization that allows people to move money back and forth between each other using Dwolla accounts that look very much like phone numbers.  And that's your account number.  Well, Mt. Gox had an account with Dwolla and a bunch of money there.  And the Department of Homeland Security has seized all of Mt. Gox's money that was resident at Dwolla.



In the warrant, a special agent with something called Homeland Security Investigations, HSI, stated that there's probable cause to believe Mt. Gox is engaged in money transmitting, which is an official term, without a license.  That's a crime, so says this agent, punishable by a fine or up to five years in prison.  The warrant goes on to demand that Dwolla hand over the keys to account number 812-649-1010, which is owned by a Mt. Gox subsidiary.  And quoting from the warrant, it says:



"Mt. Gox acts as a digital currency exchange where customers open accounts and fund the respective accounts with fiat currency, which is then exchanged into crypto-currency by Mt. Gox.  The crypto-currency is known as 'bitcoin.'  'Fiat currency' simply refers to any money that a government has declared to be legal tender.  The exchange is bidirectional and allows customers to also exchange bitcoins back into fiat currency, and then withdraw those funds.  The exchange of fiat currency and bitcoins incurs a floating flat fee," I'm sorry, "a floating rate fee charged by Mt. Gox and is determined by the customer's aggregate amount of funds exchanged on a monthly basis."



So that was from the warrant.  It remains to be seen what happens next.  I was curious, and so I went over to see what had happened to bitcoin price.  It did get pushed down from - it's been floating around about $120 in the last few days.  It was pushed down, depressed to about $105, but has since rebounded nearly back to where it was.  It's about $115 per bitcoin now.  So it didn't - it wasn't considered a devastating blow to the bitcoin.  We'll just have to see how this plays out and how it goes.



IYAZ:  We were talking about this on today's Tech News Today, earlier this morning.  And we were talking about the reach of the Department of Homeland Security, if they can even go out and do this, and why they'd bother to go this far to go to the - actually going up against Mt. Gox, why they're going after the exchanger instead of the actual person, just how hard it is to find out data on anybody who owns a bitcoin.  You have to go all the way to the exchanger.



STEVE:  Well, and you would think this would be more of a Treasury Department thing, rather than Department of Homeland Security.  And I thought that the Treasury Department just said that this was legal.  But it must have been that it's legal from - I think that the paper, as I recall, it was about a month and a half ago, and that's one of the things that surged the bitcoin the way it did was Treasury said, specifically said that this kind of exchange was legal.  Maybe, however, it was legal for users and not for money transmitters.  And they're saying that Mt. Gox is a money transmitter.



And I do know that there was an agent who deliberately created evidence that DHS went after.  That is, somebody set up an account with Mt. Gox, and an agent set up an account with Dwolla and then did move funds back and forth in order to generate a trail of evidence that was then used in order to issue this warrant and stomp on Mt. Gox.  But obviously they're also confiscating funds, which is a concern.  So anyway, we'll have our eye on this and see how it plays out.



Last week, in pure miscellany, and it was following from a tweet, I talked about how amazing hard drive magnets were.  Those are the magnets that are in all hard drives now, which are the head-positioning magnets.  In all hard drives there's a servo arm, or a head-mounting arm, which is pivoted on a bearing.  The backside of that has a coil, which is energized.  And the coil, the magnetic field from the coil, pushes against the magnetic field being generated by these magnets.  In order to minimize the amount of electrical power needed, you want the strongest fixed magnetic field possible.  So as you can imagine, no expense has been spared by drive manufacturers creating the strongest magnets they know how to make.  And oh, my goodness.



And so what I was saying last week was anybody decommissioning a hard drive, it's worth taking the lid off and taking it apart just for - even if you only do it once - to experiment with and play with the magnets that are inside.  But you need to be careful because they are super strong.



So today we have a link, and I forgot to tweet this.  I will tweet it as soon as we're done here so people can find it because - oh, wait, I did tweet it.  I already tweeted it yesterday.  So it's in twitter.com/sggrc.  You can find the link in my Twitter feed, or you can also go to that archive of my tweets which is archived by Security Now! episode, and that's bit.ly/sggrc.  So you can easily go back to Security Now! Episode 404 to find the tweet just before that.  Anyway, the point is that the question was how many hard drive magnets are required to stick a young boy to the side of a steel shipping container?  And the answer is 20.



IYAZ:  Twenty.



STEVE:  And we have a picture of some guy who has his son stuck to a shipping container.  Apparently under the son's clothes, his pants and his jacket, are 20 hard drive magnets.  And then Dad lifted his son up and pressed him against the shipping container, and there he stayed.



IYAZ:  So either this is the greatest dad in the world because he has a kid that wants to do an adventure, or this is the worst dad in the world, who is sticking his kid to boxes, giant metal boxes.



STEVE:  Actually, if you - yes.  If you look through the guy's blog, it's clear that he's the greatest dad in the world [bit.ly/128TXYZ].



IYAZ:  Good.



STEVE:  He's done some other things, like he's had all kinds of fun with cardboard boxes.  And he's had his kids building forts and cutting holes and drawing on the outside and sticking their faces through the holes and all kinds of fun stuff.  So this is definitely a neat dad.  So the answer is 20 magnets will allow you to stick your son to a steel shipping container.



IYAZ:  So, folks, if you've got a bunch of hard drives, I think there's a whole - there could be a whole cottage culture on this whole thing if you go Etsy and create these coats for children.  Because I know there are plenty of parents out there who want to just take - I'm thinking about my two year old.  Like, huh, maybe I could easily tell him to stay in one location.  It'd be like a timeout jacket.



STEVE:  Actually many people said, hey this would be a great way to have timeout for your kid.  Just lift him up and stick him against the wall.



IYAZ:  But they might try to get timeouts because it's so much fun.



STEVE:  So I got a nice note from a listener of ours who specifically said "I want you to read this on Security Now!, Steve."  The subject was YASSS, Y-A-S-S-S:  Yet Another SpinRite Success Story, from Christian Alexandrov, who's in Sofia City, Bulgaria.  He said, "Hi, Steve and Leo.  I want to share this story with Security Now! listeners and viewers.  Usually I use SpinRite to help other people.  This time I needed SpinRite to help me.  This time SpinRite pulled my butt out of the fire," he wrote.  "Thanks to you, Steve, I have a lot of RAM."  And I thought, okay.  He said, "A friend of mine was over, and we were having fun with my PC.  Suddenly the PC froze; and, seconds after, we got the BSOD," the infamous Blue Screen of Death.  He says, "I rebooted the PC.  It did not boot.  It gave me the BSOD saying 'Unmountable boot volume.'"  Oops.



IYAZ:  Oh, jeez.



STEVE:  "He challenged me, saying that if I fix it without the PC leaving the room, he will give me a brand new kit of 16GB of RAM - four modules, 4GB each, Kingston DDR3 133MHz RAM with eight-year warranty."  He says, "If I lose the bet, I lose my PC."  So Christian writes, "Bad bet.  My butt was on fire because of the chance of losing my PC.  My files?  I have three redundant backups, updated every Sunday, all on various media, one offsite.  I can get my data anytime, anyplace.  Hard disks fail.  This is why I have backups.  But this is also why I have SpinRite.



"I took my case with CDs and booted the SpinRite 6 CD.  I saw him worried.  He was worried while looking at SpinRite's progress.  And his worry increased when he saw DynaStat window popping out while SpinRite chews on a sector.  After two hours of chewing, SpinRite gave me the green 'R' icon, fully recovering the sector, and quickly processed the rest of the hard drive.  After SpinRite finished the task, I rebooted the PC.



"While the PC was booting successfully and fast to desktop, I was unpacking my new RAM.  He asked me why I unpacked the RAM.  I said, 'This was the bet.'  While he verified that all works fine now, he just said, okay, fine, have it, it's yours.  He left disappointed, and I left with a lot of RAM.  Thank you, Steve, for this incredible program.  And thank you, Steve and Leo, for this great podcast, in this case Iyaz.  I wish best of luck to GRC.com and TWiT.tv from a happy SpinRite user."  So Christian, thanks for sharing your story.



IYAZ:  You don't get a cut of that, Steve.  Do you get, like, 2GB of RAM sent to you because he used one of your programs?  Kind of that Apple model of, hey, you used my thing, give me a piece.



STEVE:  Actually, the fact that I can share the story is all the reward I need.



IYAZ:  Anyway, Steve, what's up next?  We've got Facebook Monetization, is that right?



STEVE:  Yeah.  The EFF, our friends who are really doing a great job of watching our back, the Electronic Foundation - wait.



IYAZ:  The Electronic Frontier Foundation?



STEVE:  I can never get that right.  It's, yeah, Frontier Foundation, Electronic Frontier Foundation, whose subtitle is "Defending Your Rights in the Digital World."  They put out a really nicely assembled exposition that was titled "The Disconcerting Details:  How Facebook Teams Up With Data Brokers to Show You Targeted Ads."  And I thought this was just - it's such good information, with enough technical meat that I thought it would be an interesting topic for the podcast, to give people sort of a look into how Facebook interacts with third-party data brokers.  And we'll describe what those are.  And it's not all bad news.  I studied what they wrote.  And I'm not horrified by what Facebook is...



IYAZ:  There's a glowing endorsement that's going to be on the front page of Facebook:  Steve is not horrified.



STEVE:  I'm not horrified.



IYAZ:  Steve Gibson.



STEVE:  And normally I am horrified by these sorts of things.  I'm not horrified in this case because Facebook, of course, is massive.  With everybody now who's active in social networking circles, it's like - and you even see corporations saying "Go to our Facebook page."  I was watching some little video about some wacky new car that gets 65 mpg on the freeway, and they're hoping to get off the ground.  And they didn't say "Go to our website," they said "Go to our Facebook page."  And it's like, well, okay, this has obviously happened.



The point is that Facebook has already been under scrutiny, so we know that they're going to go to some efforts to protect the privacy of their users.  And we know that organizations like the EFF are going to be watching them closely, as are others.  So they're trying to figure out how they can monetize their service while at the same time protecting the privacy of their users.  So what I want to do is share this page with people, and we'll stop from time to time and discuss what we learn as we go along, Iyaz.



IYAZ:  Okay.



STEVE:  So it starts saying, "Recently, we published a blog post that described how to opt out of seeing ads on Facebook targeted to you based on your" - okay, now, this is critical - "how to opt out of seeing ads on Facebook  targeted to you based on your offline activities."  So think about that for a minute.  That means that it's not things you do online, but it's that your offline persona in the real world somehow is known to Facebook and/or Facebook advertisers, so that that's where the targeting happens.



"This post explained where these companies get their data, what information they share with Facebook, or what this means for your privacy.  So get ready for the nitty-gritty details - who has your information, how they get it, and what they do with it.  It's a lot of information, so we've organized it into a FAQ for convenience."



So the EFF poses this question:  "What are data brokers, and how do they get my information?"  EFF answers the question:  "Data brokers are companies that trade information in people that trade in" - I'm sorry.  "Data brokers are companies that trade in information on people - names, addresses, phone numbers, details of shopping habits, and personal data such as whether someone owns cats or is divorced.  This information comes from easily accessible public data, such as data from the phone book, as well as from less accessible sources, such as when the, yes, the Division of Motor Vehicles sells information like your name, address, and the type of car you own.



"As Natasha Singer of The New York Times described in her portrait of data broker Acxiom" - and that's with a - they stuck a "C" in there, A-C-X-I-O-M - "last year [quoting The New York Times article], 'If you are an American adult, the odds are that [this Acxiom Corporation] knows things like your age, race, sex, weight, height, marital status, education level, politics, buying habits, household health worries, vacation dreams, and on and on.' Data brokers make money by selling access to this information."



So data brokers, their business is to build databases on actual people, on real-world physical people.  And so their whole economic model is to make money selling access to that.  They have all this organized and online and accessible in some means.



IYAZ:  This is intriguing.  So these guys stand right in the middle between the DMV, I guess, and Facebook, something like that?



STEVE:  Well, we did have - we covered some time ago, I think it was in Florida, an instance of the DMV being caught, essentially, making revenue selling this arguably private government database information for money to third-party data brokers, to these sorts of organizations.



So the article continues:  "Some companies deal specifically with regulated business purposes, such as helping employers run background checks on job applicants.  Other data brokers sell or rent the data for marketing purposes.  But details about where these companies get all of their data are still fuzzy.  Rep. Edward Markey and Rep. Joe Barton" - one a Democrat and one a Republican - "and six other lawmakers sent open letters to data brokers last year demanding answers about their business practices.  The letters asked the companies to 'provide a list of each entity, including private sources and government agencies and offices, that has provided data from or about consumers to you.'



"The companies gave vague responses.  For example" - and I would call these "non-responses."  Basically they said none of your business.  For example, in its 30-page response, Acxiom, the company we were describing before, stated:  "This question calls for Acxiom to provide information that would reveal business practices that are of a highly competitive nature.  Acxiom cannot provide a list of each entity that has provided data from or about consumers to us."  So basically they're refusing.  Congress says what are you collecting, and the commercial organization says we're not going to tell you.  The FTC has since opened an inquiry into data brokers because of concerns over privacy.



So then the next question in this FAQ is "Is there a government surveillance aspect to this?"  To which EFF says:  "There are government surveillance relationships to both data brokers and social networking sites that users should know.  Many data brokers work closely with the government.  For example, the FBI has been paying Atlanta-based ChoicePoint for access to its extensive database in order to screen for terrorist threats and for other purposes.  And Acxiom worked with authorities after September 11th to track down 11 of the 19 hijackers and then continued to provide assistance to government agencies such as the TSA.



"We also know that the government looks to Facebook and other social media sites for a range of purposes, both for criminal investigations and much more.  EFF and the Samuelson Law Clinic at UC Berkeley School of Law filed suit in December 2009 against a half-dozen government agencies for refusing to disclose their policies for using social networking sites.  We found lots of evidence of the U.S. government using social media sites for data-gathering, including that the U.S. Citizenship and Immigration Services uses social media sites to evaluate citizenship requests, and that the Internal Revenue Service is poking around social networking sites to investigate taxpayers, and that the DEA is looking at social graphs of connected friends in order to map out associates of those sought in investigations."



So I guess this says that the government and the investigative arms of the government are not ignorant of and blind to the vast amount of information, I mean, I know that there's been lots of discussion about just how especially the younger generation just pours all of this information about their life into Facebook.  And they're doing it just to share and to be connected and so forth.  But all of the social graphs that can be generated from that are being data mined for purposes that the people sharing the information probably didn't intend.



IYAZ:  I mean, if they're publishing the stuff online and putting it out there publicly, they're probably not thinking of the repercussions of, like, mining this data.  Because I've been thinking of this data, it's just a lot of people just in a vacuum.  There's just their own information out there, not realizing that everything is linked together.



STEVE:  Yes.



IYAZ:  Like when you click your friends or you're clicking your interests or whatever it may be, it's creating this image of you.  And the fact that these government agencies get the information from the social networks without even breaking any laws, it's very simple.  If it's public they can use it.



STEVE:  Yes.  And we also know that, for example, employers have started to use all of the accounts that prospective employees have in order to do background research on individuals when they're considering them for employment.



So now the question:  "What information is flowing between data brokers and Facebook?"  EFF answers:  "Facebook's new ad targeting program works with four data brokers:  Acxiom," who we've been discussing, "Datalogix, Epsilon, and BlueKai.  Companies who want to advertise on Facebook can use the data" - so we've got three entities.  We have companies who want to advertise, and Facebook, and then these data aggregators who know about people in the real world.  So "Companies who want to advertise on Facebook can use the data controlled by these data brokers to build custom groups and then show those groups targeted ads on Facebook.



"Certain technical steps, as well as Facebook policies, limit how much identifiable information flows between the data brokers and Facebook.  Facebook did not explain the details in its recent note, saying only, 'the process is designed so that no personal information is exchanged between Facebook and marketers or the third parties those marketers work with.'  A slightly more detailed, if somewhat outdated, explanation can be found in its description of Facebook Exchange.



"Here's how it works in practice for Acxiom, Epsilon and Datalogix," so the first three of these four data brokers, leaving BlueKai out for treatment in a second.  "Under the new program, a company can approach a data broker, say Acxiom, and ask for a particular audience list, for example, a list of people interested in buying family cars."  Now, it's a little creepy maybe, but Acxiom can actually answer that question.  It's like, give me a list of all the people interested in buying family cars.  Wow.  Anyway, but apparently that's what Acxiom can do.



"Acxiom then would create a list of email addresses for everyone in their database interested in buying family cars."  So Acxiom knows all of these people and has their email addresses.  "Acxiom generates cryptographic hashes of those email addresses and sends those hashes to Facebook."  So, and this is why, as I said, I'm less than horrified.  I mean, there's still a lot - there's a lot about us that is known by these organizations, but there are nice barriers.  There are walls that have been built to provide some protection.



"So Acxiom generates a population that fits a certain demographic that an advertiser wants, collects all the email addresses and hashes them, and provides Facebook with the hashes.  Facebook, in turn, creates cryptographic hashes of the email address of every Facebook user."  Okay.  So Facebook maintains hashes of all of their users' email addresses.



"Wherever the hashes Facebook creates match the hashes Acxiom created, Facebook identifies that user as part of the target group.  Any hashes that don't match are discarded, not used to form the audience.  In this way, Facebook doesn't collect a list of email addresses of people who don't have accounts on Facebook."



So that's a good point.  So Facebook is, I mean, notice that Facebook does know who these users are because they have the user accounts, they've got the users' email address, and they've got a hash of the email address.  But the idea is that Acxiom will have, sort of in terms of a Venn diagram, Acxiom will also have lots of other email addresses that Facebook knows nothing about.  And so these will be - so by both of them performing a hash of the email address, all they can do is say, oh, look, we know the email address and you know the email address.  That's the only way the hashes can match.  So no one is getting information about the other's email addresses that are not an overlap, outside of the Venn diagram overlap.



IYAZ:  I mean, it sounds, like you were saying, not horrible.  It does sound a bit sleazy. 



STEVE:  Well, yeah.  But we're going to be monetized, so this is how they're doing it.  So "Any hashes that don't match are discarded, not used to form the audience.  In this way, Facebook doesn't collect a list of email addresses of people who don't have accounts on Facebook."  And of course, similarly, Acxiom gets no email addresses from Facebook either.



"Of course, it might be possible for Facebook" - it's a bit more than "might be possible," it absolutely is possible - "for Facebook to recover the email addresses using something like a brute-force attack."  Well, that's not necessary because Facebook created the hash in the first place, and they know what hash is associated with which email address.  And they say, however, "the company has a policy against engaging in such an attack."  Well, if their policy says we won't brute force, that's useless because they don't need to brute force, as we just said.  They created the hash, so they know what's on the other side.



Now, continuing, "The company that first requested the ad will then provide Facebook with a specific advertisement, for example, a family car advertisement, and Facebook will display the ad to the group that was created with Acxiom's data."  That is, that data in the intersection of the Venn diagram.  So what this achieves is you're a Facebook user, and even though none of your online behavior is indicative of an intent to purchase a car, by magic you're getting new car ads because some other company has been tracking you in other ways that they don't disclose to anyone, including the government, and they know that about you.  And so they're able to arrange to show you an ad on Facebook that relates to something going on in your offline physical world.



"Facebook will likely be able to glean certain information about the user based on what is being advertised," obviously, "for example, ads showing baby clothes might indicate the individual has or is expecting young children, regardless of what the Facebook user posted on her profile," relating to young kids.  "Facebook will also know whether the individual interacted with the advertisement."  Which is a good point.  Facebook knows if you click on the ad or do whatever the ad wants.  "Facebook then provides the company with an aggregate report about how its ad performed" - obviously once shown to this target audience - "which might include information about how many people clicked on it, their locations, ages, genders, et cetera."  Again, I'm sure anonymous, but still demographic profile to close that feedback loop because certainly Facebook has that information.



"While Facebook may be taking steps to limit identifiable data flowing back to the data brokers," and I would agree they are, "the result for users could be eerie.  Users might find themselves seeing advertisements that are based on actions they took in the real world as well as personal facts about their life and circumstances that they have been careful not to put on Facebook."



And then talking about just this fourth of the four data brokers that Facebook is known to be working with is BlueKai.  Well, so, they're still - they're also in the business of aggregating information and selling their databases to Facebook and, of course, other companies, as well.  So this is BlueKai, B-L-U-E-K-A-I.  And we've heard about them before.  They've been around.



But "For BlueKai it's an entirely different process.  Specifically, BlueKai" - and I'm again reading from the EFF's great posting about this - "places tracking cookies on an individual's computer and uses those cookies to collect information about what pages that person visits."  So this is old-school traditional DoubleClick.net-style tracking cookies.  So that means BlueKai has relationships with other websites all over the Internet who have agreed to put a web beacon, a pixel, essentially, that refers to a BlueKai server.  And that will carry a cookie which is uniform for a given user and allow BlueKai to track the user's movement across the Internet.  So this is the whole third-party cookie problem that's well understood.



Continuing from the EFF, BlueKai "uses those cookies to collect information about what pages the person visits in order to show targeted advertisements.  BlueKai shouldn't have any email addresses to share with Facebook."  And it says, parens, "(In its privacy policy, BlueKai says that it is working to build a comprehensive online database 'with utmost attention and diligence to ensuring your anonymity and privacy.')"  Uh-huh.



"In this case Facebook is using a process called 'cookie matching.'  Here's how it works:  Companies will start by approaching BlueKai and asking it to show an advertisement to individuals" - okay.  So BlueKai is an advertiser in addition to a data aggregator, whereas the first three we talked about are only brokers.  They sell the information, and that allows an advertiser to have the ad placed on Facebook to a demographic overlap that was obtained from the broker.  BlueKai is an advertiser in the same way that DoubleClick is.  And so it's BlueKai's ads which are scattered all over the Internet, which is allowing them to track individuals.



So here's how cookie matching works:  "Companies will start by approaching BlueKai and asking it to show advertisements to individuals who, for example, visited the websites of hotels in San Francisco.  When an individual logs into Facebook, Facebook uses an HTML pixel web bug with an HTTP redirect to allow Facebook and BlueKai to process the tracking cookies they have set on the user's computer.  If a BlueKai tracking cookie is in place, the cookie will be used to look up what sort of sites were recently visited, what interests are associated with that account, and what kind of purchases BlueKai believes the user might be planning to make.  BlueKai will then communicate to Facebook which audience to place the user in.  The company that originally requested the ads will provide the advertisement to Facebook."



Okay.  So essentially what's happening is BlueKai in this instance is not an advertiser on Facebook, yet they need a way of being a third-party cookie to Facebook's user.  So Facebook hosts a BlueKai pixel which serves to allow BlueKai to obtain the information.  This HTTP redirect, that's a means for Facebook to communicate to BlueKai and then back to Facebook to get this information from BlueKai, which then BlueKai uses to tie to all of the other websites that this Facebook user has visited.  So that sort of - that's the means of breaching otherwise some separate spheres that there will be no communication between.  So this is deliberate on Facebook's part in order to link the information.  And then the advertiser provides the ad to Facebook, and then it inserts it on the pages of those users that BlueKai says it would be relevant to.



So "As before, Facebook provides the company with an aggregate report about how an ad performed, which might include information about how many people clicked on it, their locations, ages, genders, et cetera.  And, as with the other data brokers, Facebook would likely be able to glean certain information about the user based on what is being advertised," if it chose to look.  And we really don't know one way or the other whether Facebook cares.  "The end result for users is still somewhat disquieting:  Websites you visited when you were not logged into Facebook will be used as the basis for showing advertisements on Facebook.  This will happen whether you are logged into Facebook or not, and regardless of whether you consent to tracking or not."



So then the EFF asks, "What does opting out mean?  In our prior post," the EFF writes, "we emphasized that the only way for individuals to get out of this program was to opt out.  This means individually opting out on each of the data aggregators' websites of these affiliated data brokers," and EFF writes, "a Byzantine, multistep process.  It also means that you will need to learn careful self-defense to protect yourself from BlueKai tracking you around the web.  We recommend you use a tool such as Ghostery (now available on Firefox, Safari, Chrome, Opera and IE), or Abine's DoNotTrackMe (available in Firefox, Safari, Chrome and IE), or" - and, frankly, this is what I use - "AdBlockPlus with EasyPrivacy Lists."  Which I find to be wonderful.  "See more comprehensive instructions in our '4 Simple Changes to Stop Online Tracking'" posting, they say.



"Note that opting out of data brokers doesn't mean your data is actually removed from their lists.  Instead, it just means your data is suppressed and hopefully won't be included in the data sent to Facebook.  Please note also that going through the complex process of opting out of Acxiom, Datalogix, and Epsilon, as well as using a cookie-blocking tool to ward off BlueKai's trackers, may not be enough to protect your privacy from this targeted advertising program.  There is nothing to prevent Facebook from engaging another data broker in this program in the future, in which case you'd have to opt out of that data broker, as well.



"You could attempt to opt out of every data broker," meaning on the Internet, they say, "but this is a Sisyphean task.  It would be hard, or potentially impossible, to know if you managed to opt out of every single existing data broker, and quite difficult to know if those data brokers ever refreshed their data sets and added you back in. Furthermore, some data brokers may not offer any form of opt out.  And even if you managed to get out of all the existing data brokers, newly formed brokers could always appear and list your information."



So finally they say, "Does Facebook have standards for companies who want to work for them?"  And the answer, which is refreshing, is "Yes," and it just made those standards public.  It's good that Facebook published a note explaining some of the minimum standards data brokers must achieve in order to work with Facebook, although some of those standards are inadequate.  Here's what Facebook said:



"Inline Transparency.  Users will be able to navigate using a dropdown menu to arrive at a page that identifies the company that was responsible for including them in the audience for the ad."  Which is fantastic.  I want to see that.  "Facebook will also provide a centralized list of the third-party data brokers participating in the program.



"Control Over Ad Display.  A user will be able to ask Facebook not to show a particular ad again, or not to show any ads from that company.  Participating companies must also provide on their 'About this ad' page an opt-out of future targeting by that company."



IYAZ:  But Steve, doesn't - by opting out and doing these measures, doesn't that give Facebook more information about the ads you want to see and not see?



STEVE:  Well, I mean, I guess I like the fact that, I mean, this is arduous.  That's the problem, is all of this is opt-out rather than opt-in.  But that's the way it's going to be.  I don't think we're ever going to see this become an opt-in process, although the EFF would certainly like to see that.  So yeah, you are, you're right.  Certainly by any interaction you're providing Facebook with more information about yourself.



It may just be, I mean, I guess Facebook must be saying to users, look, if this ad upsets you for some reason, like, I mean, arguably there's some invasion of privacy here.  I mean, because things you do in the real world are now being brought into Facebook, and Facebook knows what ads you are being shown.  So in that process your information is being disclosed about you to Facebook by virtue of what ad, what group you are now part of.



So this is Facebook clearly trying to minimize that somewhat, after the fact, unfortunately.  If you say "I never want to see that kind of ad again," then they're giving you some control over that, over essentially the upset that the presentation of this ad, which well could surprise people, could be creating by saying, okay, don't worry, you'll never see that ad again.  And as you say, they are getting some information about their user.



EFF says, "Enhanced Disclosures" is also part of what Facebook has publicly said they're going to require.  "Companies participating in the programs are supposed to expand their public knowledge centers so users can learn how data is collected and used."  Well, okay, they're not telling the federal government when our Congressmen ask, so I guess we can hope they're going to tell random end users when we go to their websites.  Good luck on that.  "This includes explaining what types of information they collect and general information on what their policies are relating to the sharing of that data."



And "Data Access Tools.  Facebook stated that each of its partners 'is working to develop'" - uh-huh - "tools that will help people see audience segment information that the partner has associated with them."  That'll be a little disquieting.  "The tools are also supposed to let users exercise control over that data.  We saw the first example of this with Acxiom, which recently announced it would allow users the ability to access information about what categories of data are associated with them and make updates to those categories."



So the EFF says:  "We think this is a good start, though we'd like to see stronger standards such as augmenting the Byzantine opt-out systems with respect to the clear Do-Not-Track opt-out signal, with a commitment to allow users to know what data a company has on them and what other entities have received that data.  But publishing public standards was a big first step in the right direction.  By creating a public policy for the minimum privacy standards companies must meet in order to work with it, Facebook incentivizes up-and-coming data brokers to improve their privacy practices in the hopes of one day earning a contract with Facebook."



And hear, hear.  I completely agree with all of that.  This is why it's like, okay, these are good things.  And clearly Facebook is recognizing that in order for - they need to be perceived as not being an abuser of all the information which they're now aggregating and collecting and maintaining on their subscribers.



IYAZ:  And with all the stories of Facebook and privacy concerns, the idea that Facebook would never want to lose a user, the fact is they're collecting this data that people voluntarily give them.  And if they have to deal with any bad press about dealing with companies that are monitoring your offline life, they are going to do their best to make sure that people believe that they can trust in Facebook.



STEVE:  Yeah.  We're also seeing a trend in this direction.  Look at some of the things we just learned that Google is doing, like analyzing all of the photos you took during a vacation and finding, I mean, like, literally doing photo analysis to spot the Eiffel Tower and to spot specific monuments and points of interest and recognizing those.  That all goes into metadata about you.  That's amazing.  So we are really seeing deeper levels of data mining happening as the means for these companies to offer services that they think are valuable.  And of course monetize their user bases, as well.



So EFF asks, "Will Facebook show me targeted ads on sites other than Facebook?"  And the answer is, "Right now, Facebook displays ads when users are on Facebook, or sometimes when users are using Zynga and logged into Facebook.  However, Facebook has reserved the right to show advertisements to users when they are not on Facebook."  So all of this technology could follow you away from Facebook and create a longer reach, essentially, for Facebook.  "Furthermore, Facebook is currently ignoring the Do-Not-Track signal.  So while we are urging individuals to turn it on, just turning it on is not yet enough to get out of this targeted advertising program."



And, finally, "What should Facebook be doing differently?  There's a lot Facebook should be doing differently," says the EFF, "when it comes to this new targeted advertisement program, such as stopping the program."  [Laughter]  Okay, good luck with that, EFF.  "No. 2, making the program opt-in instead of opt-out."  And we know that's never going to happen.  Or, "Short of doing these things, Facebook has many ways it could address the privacy concerns of users.  Here are a few suggestions:



"1.  Respect Do Not Track.  Facebook and data brokers should respect user wishes by committing to respect Do Not Track.  This means not tracking users who transmit the DNT:1 signal" - which is a browser header we've talked about often on this podcast - "and interpreting that signal as an effective opt-out of this targeted advertising program.



"2.  Facebook could use its market power to prompt participating data brokers to improve their practices."  That's certainly true.  "While Facebook doesn't have ultimate control over how these data brokers operate, it does have an extremely powerful role to play in the data economy.  Through negotiating its contracts with data brokers, it can insist that these companies meet basic standards for respecting the privacy choices of users.  For example, Facebook could require that all data brokers it works with provide users with a way of accessing their profiles and correcting inaccuracies and should ensure that a Do-Not-Track setting in the user's browser corresponds to opting out from tracking by that data broker.  Facebook could also require each data broker to commit to not using data collected during the opt-out process" - which is sort of what you were referring to before, Iyaz - "for unrelated activities and to discard all unnecessary data once the opt-out is complete."



And, finally, "3.  Facebook and data brokers could work together to create a single opt-out process.  Anyone who is trying to opt out of this new targeted advertising program will see how complex it is.  Users should not need to follow a complex process in order to opt out, and Facebook should use its place in the market to push for improvements.  Facebook could set an important floor that could incentivize up-and-coming data brokers to improve their privacy practices in the hopes of one day earning a contract with Facebook."  Which is a bit of a repeat of the text above.  "Data brokers who are keen to prove themselves capable of self-regulation should welcome this major step forward for transparency and choice.



"In March of 2012," so a little over a year ago, "the Federal Trade Commission released its final report on digital consumer privacy issues, which included a recommendation that the data broker industry create a central website that would explain the access rights and other options, for example, opt-out choices available to consumers, and which would provide links to exercise these choices.  EFF applauded this move but wished that the industry would go one step further and provide users with a single website through which users can opt out of having their data listed by any online data brokers," so a central clearinghouse, essentially, like the single Do Not Call list that we've had for telemarketers.



"Now is the time," says the EFF, "to make that a reality.  Facebook could easily ask that companies who want to engage with them in showing advertisements agree to coordinate on such a hub website.  Notably, the Privacy Rights Clearinghouse has already gotten things started with its Online Data Vendors List.  Unfortunately, for now, the only advice we have for users is try to opt out of everything and stay vigilant."



So I'm glad we have the EFF.  They pull this sort of information together, and they - I mean, knowledge is power.  And so understanding what's going on and helping to publicize how this kind of tracking works is super useful.



IYAZ:  I think people will be just shocked to know that there's all this offline data collection at all, the fact that these exist.



STEVE:  Yeah.



IYAZ:  And then there's no actual statements by these companies how they're doing this.  And then that they link to your online life, the fact that EFF is shining a light on it is fantastic, although I'm very curious if we'll ever get something as easy as a one-site opt-out process.  That's be amazing.  Then again, the Do Not Call list sounds insane, but it does exist.  So maybe there's a chance.



STEVE:  Yeah.  And what I think we're going to be seeing, I mean, now all the browsers support Do Not Track.  The detractors say, yes, but it's optional.  No one has to abide by it, et cetera.  Well, yes, but it's a chicken and egg.  You couldn't have legislation requiring its honoring until the browsers made it available.  And there was that kerfuffle briefly about Apache not honoring it because there was one particular developer had a bug about Microsoft's IE10 he felt was like turning it on by default, even though in fact anyone setting up IE10 does see that, and it's well explained, like, what this means.  Now that the browsers all have it, we might see some movement in Congress to simply require that it be honored if it's turned on.  And ultimately I think that's what we're going to get.



IYAZ:  Well, that was quite the educational episode of Security Now!.  Every episode of Security Now! is like this.  It's just it's explained to you simply.  If I can understand it, I'm sure you guys are following along just fine, thanks to Steve.  Steve, where can people find you on the web?  Like maybe GRC.com?



STEVE:  GRC.com.  And next week we will have a Q&A episode.  And so our listeners pretty much probably have it pounded into their brain by now, but we are always getting new people, so GRC.com/feedback.  You can go there to that page and send me a question about this or anything else that's on your mind.  I go through the mailbag just before the podcast and pull out questions.  And I imagine Leo will be back next week, so we'll go over that then.



IYAZ:  He ought to be.  Now, at GRC.com you actually have transcripts of each episode of Security Now!.  That's right; right?



STEVE:  Right.  As soon as you guys get this thing posted, I grab it and squeeze it down to our 16Kb version.  I also have an archive of every podcast we've ever done, all 403.  This one is 404.  Elaine has a satellite link because she's somewhere out in the boonies, and so she is one of these bandwidth-constrained people that Leo talks about when he talks about our 16Kb version.  So I immediately get that uploaded to GRC, and Elaine grabs that one to conserve her bandwidth and then does a transcription of the episode, which I typically post the next evening or sometimes Friday morning early, if Elaine ends up being up too late for me to get it that night.



IYAZ:  You can also find show notes at TWiT.tv/sn.  And normally we do the show on Wednesday at 11:00 a.m.  Today was a special occasion because Google had their I/O presentation, pushing the show a little late.  And Leo should be back next week.  Thank you so much, Steve.



STEVE:  Hey, Iyaz, thanks for standing in.  It was great.  I'll see everybody next week.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.










GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#405	

DATE:		May 22, 2013

TITLE:		Listener Feedback #168

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-405.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson's here.  We're going to answer some questions from the listeners, talk about the recent security news, and a whole lot more.  Will you stay here?  Because Security Now! is coming up next. 



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 405, recorded May 22, 2013:  Your questions, Steve's answers, #168.



It's time for Security Now! with Mr. Steve Gibson, the Explainer in Chief, the guy who protects our privacy and security online.  Hey, Mr. G.  How are you today?



STEVE GIBSON:  Hey, Leo.  It's great to be with you again for Episode 405.



LEO:  405, wow.



STEVE:  You missed the missing Episode 404.



LEO:  Did we just skip right over that?



STEVE:  404 not found.  Actually it would have been fun, although it would have been a constant source of concern for people who are like, I mean, we would have been getting email for the rest of our lives.  Hey, where's Episode 404?  It's like, okay.  So anyway, Iyaz and I had a...



LEO:  It's like a hotel that doesn't have a 13th floor, you know?



STEVE:  Exactly.  Iyaz and I had a great time last week, and I know you did at Google I/O.



LEO:  I had a blast, and I got me one of them Chromebook Pixels.



STEVE:  Yup.



LEO:  Yeah.  That's about all I can say about it.



STEVE:  So this is a Q&A episode, our #168.  And I've got some interesting news.  We didn't have a huge news week.  The thing that really excited me, I couldn't believe it when I caught up with this news.  This apparently was - it's a few months old, so it's just as well that I hadn't mentioned it before because it turned out to be too good to be true, kinda.  And that is that our friend Jonathan Mayer, who is not - Jonathan Mayer or Mayer, not the vocalist, but the security guy, the security and privacy guy at Stanford.  He's the person who reversed the mistake that Adobe made, essentially.  And we've talked about Jonathan through the years because he's been very active in privacy.  He reversed the mistake that Adobe, I'm sorry, not Adobe, Apache, the Apache server made on the fact that it was going to be removing the presence of the DNT header from IE10 because somebody at Mozilla who was also, or I don't know if they were at Mozilla, but one of the other people involved in the Apache project just decided they wanted to punish Microsoft for not getting sufficient end-user permission.



Anyway, I installed, and we talked last week about the most recent release of Firefox, v21.  So when I saw that Firefox v22 would be by default blocking third-party cookies, I was very excited because that's big.  I mean, that's huge.  And it may be a bridge too far.  It may be more than we can get, but we're getting very close.  Right now the only browser that does this is Safari.  But that's saying a lot.  I mean, Safari blocks third-party cookies by default.  So that's a big deal.



So Jonathan blogged in February of this year, so several months back, that this had been submitted into the flow of Firefoxia, which is moving forward, and it would be coming out in version, yes, in v22 of Firefox.  He said - and this was on the 22nd of February.  He has WebPolicy.org is his blog.  And the title of the blog was "The New Firefox Cookie Policy."



He said, "The default Firefox cookie policy will, beginning with release 22, more closely reflect user privacy preferences.  This mini-FAQ" - and I'm just going to read two, the first two - "addresses some of the questions that I've received from Mozillans, web developers, and users.  First question:  How does the new Firefox cookie policy work?  Answer:  Roughly, only websites that you actually visit can use cookies to track you across the web.  More precisely, if content has a first-party origin, nothing changes.  Content from a third-party origin only has cookie permissions if its origin already has at least one cookie set."  Now, we'll come back to that in a second.



And then, second question:  "How does Firefox's new policy compare to the other major browsers?"  So his answer was "Chrome:  Allows all cookies.  Internet Explorer:  Cookie permissions vary by [the so-called] P3P compact policy," which is something we've discussed in the past.  But continuing, it says, "In practice, almost all third-party tracking cookies are allowed.  And Safari:  First-party content has cookie permissions; third-party content only has cookie permissions if the content already has at least one cookie set.  In short, the new Firefox policy is a slightly relaxed version of the Safari policy."



So I was very excited.  This got into my notes late last week, and I was excited.  And then I saw an update, let's see, yesterday, 5/21, also Jonathan's most recent posting said, well, it explained that the CTO of Mozilla had said he wants to wait for one more cycle.  Now, I picked up on this because it was all over the place.  It was BusinessInsider.com talked about it, AdExchanger.com, I mean, Firefox changing their policy to block third-party cookies is regarded as a big deal.  IE has tried a couple times.  Some betas of IE did have third-party cookies initially blocked.  No one ever seems to make it out of the gate.  Something happens.



And so it just must be that somewhere there are major advertising gods that descend on the hapless web developers who are trying to ship a browser like Safari, which in all of its incarnations acts this way, and they get stopped.  So I'm holding my breath that this can happen because Jonathan's feeling is that it is necessary to go further than the Do Not Track request and actively decline to accept cookies from sites you don't visit.  And that's the way Microsoft has - I mean, sorry.  That's the way Apple expresses it and Mozilla expresses it, very cleanly.  Do you want to accept cookies from sites you don't visit?  And it's easy to say, uh, no, why would I want that?



LEO:  The reason the Mozilla's delaying it is because of false positives and false negatives.  Do you not buy that as a...



STEVE:  [Strangled sound]  They're - yeah.  I mean, maybe.  Jonathan's argument is, well, this is the way Safari has always worked, and it doesn't seem to be a problem for the entire - anything anywhere in the Safari ecosystem.  Now, there is...



LEO:  Well, you might have a problem.  Don't you serve images from a separate server than your main server?



STEVE:  Yeah, but it's got nothing to do with cookies.  Cookies are just for tracking.



LEO:  Well, sometimes people use cookies in that.  That was the example that Mozilla gave, Brendan Eich gave.



STEVE:  So, okay.  There is a subtlety that's interesting, which is that - and this is something I've looked at extensively.  Five years ago I wrote that cookie forensics - a set of cookie forensics pages.  And we deeply characterized all the different browsers.  Not a single one of them was bug free.  We were looking for, like, cookie handling bugs.  Every single browser had problems.  Things like you could sneak a cookie through in the favicon query, and the browser wasn't blocking that, little freaky things like that where, if someone knew about these things, and presumably everyone does, although they don't talk about them, you could arrange to get cookies in.



One browser, and I believe it is only IE, has an - because for a while there were some smart security people at Microsoft.  It notices what's called the cookie's "context."  That is, it notices if you acquire a cookie in a first-party context.  It flags the cookie has having been acquired in a first-party context.  And then it will not send it back in a third-party context.  Which is very cool because the problem with the Safari approach and this nascent Firefox approach is that it is still very easy to sneak - it's very easy for third parties to sneak tracking cookies in.  All they have...



LEO:  But, see, that's the other question, is if you do this, doesn't it just force them underground and to use other methods to do the same thing?



STEVE:  Perhaps.



LEO:  At least with a cookie I know it's being set, and I could check it.



STEVE:  My feeling is I think Jonathan is right.  People don't want tracking.  And it is only by virtue of the default setting that third-party cookies are enabled.  And if they were just disabled, the world wouldn't collapse.  The advertising ecosystem would not die.  Everything would be just fine.  And there would be less tracking and profiling on the Internet.  Obviously it's something I have no...



LEO:  There would be less analytics, and a lot of the free content that you enjoy would go away.  But that's okay.



STEVE:  I don't think any of it, no.  My point is...



LEO:  Doesn't that kill Google Analytics?



STEVE:  Nothing would change.



LEO:  Does that kill Google Analytics?



STEVE:  No, because Google Analytics is hosted on the pages and is making queries itself.  And it's running script in your browsers.



LEO:  JavaScript, right.



STEVE:  Yeah.  So it's got a grip on everything going on.



LEO:  Yeah.  I mean, if it doesn't break that kind of analytics, it's not as much of a problem.



STEVE:  It's not going to break anything.  None of this breaks anything.  This is just advertisers not wanting any pushback at all.  And they're obviously very powerful since only Apple seems to have pulled this off.  We'll see whether the Mozilla folks are able to do it.  It would be wonderful if they did.  Remember that there's a - I've got a graphic on my site, on the browser statistics page of the cookie pages, that shows, from all the visitors, we have about 66,000 unique visitors a week, and it shows across the browsers who has third-party cookies enabled.  And the bar for Safari is completely - stands alone compared to all the other bars, just because that's the default.  And it would be wonderful if Firefox had the guts to pull this off, did, and then maybe Opera could follow suit, and then finally IE would be the odd man out.  It'd be really interesting to see if Google ever makes this change because of course advertising is their entire revenue model.



Now, last week, I don't know if you picked up on this, Leo.  I was wishing that I had you and Iyaz both, just because this was interesting.  But you may have seen it go by because there was a lot of attention given to this.  It was discovered - and in fact Ars Technica picked up on it days later, which gave it several more news cycles.  It was discovered that links people send each other in Skype chat messages are visited by Microsoft's servers.



So the Heise Security that we've spoken of often was the first official security company to pick up on this.  They deliberately set up some links, even including logon material in the URL, and used Skype chat to send this to someone and then monitored their logs.  And sure enough, a few hours later, a server in Redmond with an IP allocated to Microsoft's network visited those links.  Ars Technica picked up on it, duplicated the experiment, and verified it.  And there was of course lots, a whole flurry of back-and-forth from this because people were upset that Microsoft was following links that were being sent in Skype messages.



And the point that I intended to make last week when we talked about this was, well, and there were people saying, well, you know, Microsoft is doing this to remove spam from Skype and to control the content.  Their EULA states that they have the right to scan messages and so forth.  And so my takeaway was just to note that they are able to do this.  I mean, it's not like they could or they might, it's that they are.  So I just wanted to come back and dot that "I" and cross the "T" that it's not why they're doing it or what they're doing with it, but just absolute evidence that Skype chat text messages are being read in Redmond.  It's not like they're being kept encrypted, or they will only decrypt them if the government requires them to and so forth, but that they can.



Which is a segue into next week's podcast because there is a very nice-looking, very secure chat technology, chat system, called Cryptocat:  C-r-y-p-t-o dot c-a-t.  And so they've published everything, enough that I can do a full analysis of its security.  So that will be the topic for next week because, in response to last week's discussion of this, there was just a bunch of email in the mailbag and through Twitter saying, okay, is there a secure chat solution?  And I believe there is.  We'll have the full readout about Cryptocat next week.



LEO:  But this doesn't necessarily speak to voice calling on Skype.  It's the messaging, the text messaging.



STEVE:  Correct.  Correct.



LEO:  And it's unclear where this all happens.  It could be, it probably is part of Microsoft's attempt to prevent the spamming of malware through links.  So it's probably, what they think it's likely doing is it's checking it against Microsoft's Site Advisor database.  



STEVE:  Yeah.  Although it is doing it with several hours of delay.  So...



LEO:  Well, there's a lot of people doing it.



STEVE:  I was going to say, if there's a backlog...



LEO:  The other issue is it's not clear where the request is coming from.  It could be coming from, for instance, the receiving client, that Skype could be then unencrypting, looking at it and saying, okay, I see - and in fact this seems like a likely scenario.  I see five links in this message.  Let me run a scan against these links against Microsoft's Site Advisor to make sure they're not malware.



STEVE:  Yeah.  That came up.  And unfortunately I don't remember what the argument was.  I think that somebody checked for that and ruled that out.



LEO:  I think we don't know.  All they know is there was a hit.  They don't - they created a phony page, and they got a hit from Redmond.  And the only way that that link was disseminated was through obviously not encrypted Skype transmission.  I think the real issue is the larger issue, which is that it's clear then that Microsoft could in theory see everything.  Maybe they're only checking those links for malware.  There might be, for instance, a regular expression parser and a Skype engine, recipient engine that says I see a URL here, let me check it against Site Advisor.



STEVE:  Right.



LEO:  So I just don't want people, I mean, the real issue is the potential that Microsoft could be spying on you.  And as a lot of people pointed out, hey, that's what happens with closed search software.  If you think about it, any client you're running on your computer, if you don't see the source code, could be doing anything.



STEVE:  Well, and that's why a solution like Cryptocat, which is open source and multiplatform, I mean, for example, I'm still waiting to hear back from the BitTorrent guys on their protocol.  We have a couple - we have a question or two in this week's Q&A that are addressing questions about BitTorrent Sync.  And it's like, well, we've gone as far as we can at this point, until we get a readout.  Everything looks good.  But I need the details in order to see whether I can say yes, given what we know, they absolutely did everything right.



Also there's been all this brouhaha about the Department of Justice and the Associated Press.  And the first stories that I read said that the DOJ had the conversations that the Associated Press reporters were having.  And later stories corrected that.  So I wanted to update our coverage and say, yes, that's correct, all they got, what the Department of Justice got, and it was their confession, I mean, they wrote a letter to the AP saying, by the way, we have all of this.  Way after the fact, but they did acknowledge that, that it was phone call records, that is, who the AP reporters called, not the content of their conversations.  So I just wanted to correct that.



And then I looked at this, and I thought - I just shook my head.  I thought, well, this is not going to be a surprise to any of our listeners.  So I called this the "Uh-huh" news of the week.  And this was picked up - this was in BBC Business News.  The title was "Contactless 'Charging Errors' at Marks and Spencer," which is a chain of stores in the U.K.  And so the story is some Marks and Spencer customers have told the BBC of cases where the chain's contactless payment terminals have taken money from cards other than the ones intended for payment.  So these are near field communications cards.



And so the story, to give our listeners a sense for this, it says, "Cards are supposed to be within about four centimeters of the front of the contactless terminal to work.  But some customers say payments have been taken from cards while in purses and wallets at much greater distances.  M&S, which is Marks and Spencer, said its systems had been extensively tested and were robust.  Marks and Spencer recently rolled out the contactless payment system to 644 U.K. stores.  The system uses something called near field communication to identify a card and take payment.



"Rosemary from Sussex got a shock when she tried to pay by chip-and-pin at her local store.  She believes her contactless Smile card was much more than four centimeters away from the terminal when she visited Marks and Spencer in Chichester in April and tried to pay with her regular Lloyd's debit card.  She told BBC Radio 4's Money Box program, 'I put my card into the reader, and the assistant was asking whether or not I wanted cash back.'  She said, 'Before I could answer, the transaction came up as complete, and the till issued a receipt.  So I hadn't put in a PIN at all at that stage.  I queried it with an assistant, and she looked rather puzzled and looked at the receipt and compared it to my card and realized that the numbers didn't tally.'



"Rosemary, however, recognized that the four digits on the till receipt belonged to a different Smile card she had in her purse, which she was holding in her other hand.  She had not realized until then that this card was able to make contactless payments.  Even when she realized it could, she thought her purse was about a foot or more away from the terminal when the payment was taken."



So anyway, this story continues, talking about other M&S customers who found double payments on their bills from Marks and Spencer where somehow a card that they had not intended to use purchased the item, then they purchased it again with the card they had intended to use.  So this is the fundamental problem with radio is that it's just not precise enough.  In order for the receiver to be robust and sensitive enough to pick up the card with sufficient reliability in any orientation, it's going to have to be sufficiently sensitive to be able to pick up the card in an ideal orientation further away.  And it's just a bad idea.  This whole notion of, oh, the magic of it just being nearby and working is crazy.



LEO:  Well, and that's why they limit the transactions to 20 pounds, and they require a PIN.  I'm not sure what happened with the PIN on this one.  Maybe somebody saw the PIN.



STEVE:  Yeah, apparently - yeah.  Apparently didn't need it.



LEO:  Yeah, but it does, though.  Somebody saw the PIN, probably.  I would guess.  Not always.  So Craig B. says that does not always require a PIN.  I thought that was the general idea, but maybe not.



STEVE:  I think, I mean, again, there's this aspect of glamour where they want it to be magical, where you just sort of wave the card by the terminal, and it's like, oh, the money jumps across.



LEO:  That's why you want a PIN.  That's why you'd like to have a PIN.



STEVE:  Exactly.  Also another very highly tweeted note came from the runner-up, essentially, in Intel's International Science and Engineering Fair.  And the only thing I could think is this is another example of a really good PR firm at work.  Because this thing was just - it got an amazing amount of coverage for really a non-event.  Now, I guess the event is that the woman who or the young woman...



LEO:  It's a girl, that's why, a young girl.



STEVE:  Okay.  And she's 18, yes.



LEO:  Yeah, yeah.  And so that's cool.



STEVE:  So she's 18, and so she did something working in a nanotechnology lab where she produced a supercapacitor.  And, I mean, I'm not taking anything away from that effort at all.  That's not what I mean.  But the headlines were "18 year old's invention can recharge a cell phone in 30 seconds."



LEO:  Right.  I saw that, too.



STEVE:  Which is nonsense.



LEO:  Yeah.



STEVE:  And it's like, okay, no.



LEO:  Well, what if you built the supercapacitor into the phone and then charged it and then had it trickle-charge the lithium ion or something like that?  That's what - I got the impression she was putting the supercapacitor - I don't know.  I didn't read it very closely.



STEVE:  No, I mean, this was just...



LEO:  We've talked about this before.



STEVE:  Yeah.  All this was, was this was a story about someone created a supercapacitor.



LEO:  Except that she didn't.



STEVE:  And it's like, okay.  And she's an 18-year-old girl.



LEO:  Right.



STEVE:  And so I think that's great.  But there was a sense of this was actually revolutionary, and it came from an 18-year-old girl.  And it is actually, as far as we know, not revolutionary.



LEO:  You've been talking about - you talked about this two years ago.



STEVE:  I know.  It's a nice supercapacitor.  So...



LEO:  All right.  So she didn't do anything new.



STEVE:  No.  She's just young, and so...



LEO:  Well, it's a good story.



STEVE:  Yeah.



LEO:  And you know how sometimes the press doesn't really know that this isn't new.



STEVE:  No.  And so what happened is our listeners tweeted me like crazy.



LEO:  Because we know you're interested in supercapacitors.



STEVE:  Absolutely.  And so thank you for that, and just so everyone knows, we now have another supercapacitor in the world.  Okay.



LEO:  I have my supercapacitor screwdriver that charges very, very quickly.



STEVE:  Oh, I mean, yeah.  And I'm not buying an eCar because I'm waiting.  I mean, we're seeing - we talked about it in the last couple weeks.  We're seeing tremendous effort now expended in electrochemical storage and electrostatic storage.  These are going to move forward.  And the nature of a car is that you can't just swap out the energy source with a better one.  It'd be like, you know, is your car diesel or not?  I mean, you've got to give it the proper kind of fuel.  And you just can't change your mind.  So anyway, I'm waiting because I just think we're still on - we're on the cusp of a real breakthrough in some sort of car, you know, automotive-compatible energy storage.



LEO:  Right.



STEVE:  And that's good.  I did see a weird note about - I don't remember what country it was.  Somebody was talking about storing excess energy by pumping the air out of a container at the bottom of the ocean.  And the idea would be they would, like, pull the water out of the container, and then the ocean's pressure to get back in the container would run turbines.  And it's like, well, okay, there's an innovative...



LEO:  But that's a battery.  That's not a creator of energy, that's a way of storing energy.



STEVE:  Correct.



LEO:  Because you have to pump the energy - to pump the stuff out uses the energy.



STEVE:  Exactly.



LEO:  There's lots of - this goes back to the Greeks.



STEVE:  Yeah, and, well, in fact, there have been efforts to, like, pressurize, to store air under pressure in the ground and then have it come back out.  It's like, okay.  I don't know how you plug all the leaks.  You know, gophers are going to have an interesting life.



LEO:  If you think about it, if you hand-cranked water up into a tank, you're storing the energy that you used to hand-crank it up, and then at a later time you can release that energy by releasing the water and having it turn a little water wheel.  And there you go.  You're invented the battery.



STEVE:  Hydroelectric dams.  How do you think those function?



LEO:  There you go.



STEVE:  There we go.



LEO:  There you go.



STEVE:  So AskMrWizard.com is still cranking away.  He wanted me to note that he finished Episode 26, 13 videos for Episode 26.  That was one of our classic How the Internet Works series.  So for those of you who have been enjoying the AskMrWizard.com series, if you go to AskMrWizard.com/securitynow, that'll take you there, and he's got a bunch of links.  So he's got both Episode 25 and 26, and I assume he's working on 27 because it was, I believe, a three-part series where we covered sort of, like, the entire fundamental architecture from packets to routing to ports and everything, about how the 'Net works.  And he's animated graphics to go along with it.



LEO:  And he puts ads.  Just so people understand, he puts ads in it.  This is why he's doing this.



STEVE:  Oh.  I didn't know that.  Okay.



LEO:  Yeah.  He's making a little money on it.  That's all right.  That's completely legitimate. 



STEVE:  Yep.  So do we.



LEO:  Yeah.



STEVE:  And I did tweet a project that I thought was very nice.  So it's a Kickstarter project.  It's called "meta," m-e-t-a, "the most advanced augmented reality interface."  And I don't know if meta is an acronym.  Maybe most, then - I don't know.  I don't see how you can get META out of the Most Advanced Augmented Reality Interface.  But they are very nice-looking glasses, and they've put together a compelling video, and they've got a bunch of smart augmented reality people on the team.  The idea being you've got essentially what looks like a stereo camera looking down in front of you.  And what's so cool is you can use your hands to manipulate stuff in the air in front of you.  And there's one great picture on there that shows a person putting his hand out, and each of his fingers is circled with a different color.  And then in the video he's, like, moving things around.  And they show a bunch of people messing around with some architecture, changing the planting of palm trees by reaching out into space and moving things around.



So anyway, I thought it's just cute and cool.  And I tweeted it, so people who follow me already know about that.  But those listeners who don't, and there are many more of you, I wanted to sort of bring that to your attention [kck.st/12rTG3J].



Now, Leo, Star Trek.



LEO:  You went to see it.



STEVE:  Oh, my goodness, yes.  Opening day.



LEO:  Oh, good.



STEVE:  Now, what I'm seeing is - I've looked at all the reviews.  I've read all of the blog posting comments.  And I completely, completely get it, that there are purists who will never, apparently, forgive J.J. Abrams for not being Jonathan Frakes.  And they will not forgive what's his name, our new Kirk, I can't think of his name...



LEO:  I can't remember his name, either.



STEVE:  Yeah.



LEO:  He's good.  I like him.



STEVE:  Yes, he is.  Well, for not being Jean-Luc Picard, for not being Patrick Stewart.  There were, like, the thinking man's...



LEO:  Chris Pine is it, yeah.



STEVE:  Chris Pine, yes.  There were the thinking man's Star Trek movies.  And...



LEO:  I like them as the young, I mean, that's what's cool about it.



STEVE:  Oh, Leo.



LEO:  The young Spock and the young - it's like watching the, what is the Looney Tunes that has the little kids?  Animaniacs?  It's the Animaniacs Star Trek.



STEVE:  I love these.  I mean, and I tweeted...



LEO:  Tiny Toons, there it is.



STEVE:  I was exhausted after two hours of watching this.  I mean, it was fantastic.  I loved this new movie.  So, I mean, it is an action sci-fi adventure movie.



LEO:  No spoilers.



STEVE:  No, I'm not, I'm being very careful not to say anything.



LEO:  No, you would never do that, yeah.



STEVE:  No, I would never do that.  And for those people who see it, I will say I was a little disquieted by some of the decisions that were made.  But...



LEO:  Oh, there's some massive plot holes.  But that's okay.



STEVE:  Yeah, yeah.



LEO:  But, you know, what do you expect?



STEVE:  It was a great movie.



LEO:  It was fun to - it was exciting.  And what you can't get over, and I think this is - to me, this is the whole appeal of all the Star Trek movies, going back to the first one, is kind of the thrill of seeing these characters we love again.



STEVE:  Yes.



LEO:  And that, you know, I remember the first time Kirk and Spock, the originals, Shatner and Nimoy, walked onto the big screen because it was many years after the TV show.



STEVE:  Oh, oh.



LEO:  And it was just like, "Oh!  Old friend!"



STEVE:  [Laughing] Yes.



LEO:  And this has that same kind of thing.  And they're smart, J.J.'s smart enough to throw in a lot of references to older stuff.



STEVE:  Oh, you're right.  There's plenty of that for us.



LEO:  That's what makes it fun, yeah.



STEVE:  And the point I made to some people who I was talking to was, look, this is for making money.  I mean, this is to make...



LEO:  What?  No.  They make money?



STEVE:  Fundamentally, this is about money.



LEO:  That's what tracking cookies are for.  They've got to stop this!



STEVE:  [Laughing] And so he's creating a popular movie with broad appeal.  A good friend of mine took his mom, and his mom loved it, and now she wants to see the first one and also one of the older original movies that shall not be mentioned.  So, and I must say, I give credit to somebody because there were some things I read in anticipation of this that were clearly deliberately misleading about the plot.  And I thought, oh, good for them.  They had me completely going off in the wrong direction, thinking that I knew something about it, and I didn't.  So that was good.



LEO:  You know who I liked best?  I shouldn't say "best," but who I really am enjoying is Bones in this.



STEVE:  Yeah, he's good.



LEO:  He's really good.  And of course Scotty is fabulous.



STEVE:  And Bones is...



LEO:  Bones is Bones.  "I'm a doctor, Jim, not a...."



STEVE:  Yes.  "Goddammit, I'm a doctor, not a..." whatever.



LEO:  We won't say it.  I don't want no spoilers.



STEVE:  Yes.



LEO:  "I'm a doctor, Jim."



STEVE:  Okay, now, I know you're seated.  You're on your inflatable ball?



LEO:  I'm on my ball, yes.



STEVE:  Okay.  Because this is so painful, Leo.



LEO:  Oh, no.



STEVE:  But I really do...



LEO:  Well, it's good I'm on my ball, then.



STEVE:  This is so painful.  This is thanks to our friend Simon Zerafa, who somehow finds what we would call humor.  This is just awful.  I mean, this is so awful I had to share it.



LEO:  Oh, great.  Thanks.



STEVE:  An SQL query goes into a bar.



LEO:  Oh, no.  Yes.  I like it already.



STEVE:  So we have a SQL query goes into a bar, walks up to two tables and asks, "Can I join you?"



LEO:  Oh, that's pretty good.  You know what?  I like it.  Can I - goes to two tables and says, "Can I join you?"



STEVE:  Can I join you.  So for those who don't get it, it's like, oh, that's okay, you're not supposed to.  For those who do, ouch, you know, I apologize.



LEO:  I still think that the Little Bobby Tables xkcd comic book is the best...



STEVE:  Yes, that was really...



LEO:  ...MySQL joke I've ever seen.



STEVE:  It's brilliant.



LEO:  I'll just show it, for those who haven't seen it, it's xkcd No. 327:  "Hi.  This is your son's school.  We're having some computer trouble."  "Oh, dear.  Did he break something?"  "In a way.  Did you really name your son Robert '); DROP TABLE Students;--?"  "Oh, yes.  Little Bobby Tables, we call him."  "Well, we've lost this year's student records.  I hope you're happy."  "And I hope you've learned to sanitize your database inputs."  [Laughing] Robert'); DROP TABLE Students;--?



STEVE:  Very clever.



LEO:  [Laughing]



STEVE:  Very clever.



LEO:  There's something about MySQL jokes that just crack me up.



STEVE:  Okay.  So rarely do we ever hear any complaints from people that SpinRite did not spend long enough on their drive.



LEO:  No, I've never heard that.



STEVE:  No.  So Charles in Sydney asked me, he says, "Hi, Steve.  I refer to a recent podcast where a SpinRite user said it took SpinRite four weeks to recover his mother's drive.  I recently ran SpinRite on a 60GB PS3 disk which was having problems, and it only took one hour to run and told me that I had one unrecoverable sector.  Why didn't SpinRite take longer to try to recover this sector?  I assume it was because it somehow knew that, no matter how hard it tried, it wouldn't be able to recover it.  Is that right?"  And he said then, "By the way, SpinRite fixed all the problems..."



LEO:  Well, that's why.



STEVE:  "...I was having with the PS3 disk, and everything works perfectly now."



LEO:  Oh, okay.  Horrible.  What a fate.



STEVE:  Charles, I'm sorry that it didn't make it feel like it was working harder to recover your drive.  I actually saw a slowdown in sales after that four-week story because I think people were like, wait a minute.  This thing takes four weeks to recover a drive?



LEO:  Oh, no, no, no.



STEVE:  It's like, no, no, no.  No.  I mean, it will - and I once said it will take as long as you want it to.  But in this case it didn't need any more time, so it didn't take any more time.  So Charles was right.  SpinRite did figure out that it was - it did everything it was possible to do on that sector, fixed his drive, and only took an hour.  And it only typically takes a few hours.  So, no, no.  Not a few weeks.  A few hours.



LEO:  It's related to how hard a sector might be to recover and how many bad sectors there are.



STEVE:  Actually, one of the - yes.  One of the problems is that, if a transfer ever creates an error, the formal specification says I have to tell the BIOS in the motherboard to reset itself.  Some BIOSes take a long time to do that.  So that process slows things down.  So Charles had a motherboard that was quick to reset, and so it didn't take SpinRite that long to get through it.  And it's one of the things that I will definitely be looking at in the future, seeing if I can speed it up for everybody by not using the BIOS any longer, which will - everyone will breathe a sigh of relief.  But for what it's worth, typically it doesn't take four weeks.  It typically takes hours.



LEO:  Do you work on UEFI computers?  Because now all the new Windows 8 machines I think are UEFI, not BIOS.



STEVE:  Yeah, we do.  We've never - because UEFI boards are out there.  They all have a BIOS emulation layer.



LEO:  Anyway, right.



STEVE:  Yes.  So they can...



LEO:  So you can do an N13 or whatever it is you do.



STEVE:  Yep.  We still work just fine.



LEO:  All righty, Stevie.  Got some questions for you, Steverino.  This comes to us from Dorset.  And he wants to make sure we pronounce it right, so Dorset, England.  Andrew Stevenson.  He says that apparently you've come to the attention of the NSA.  Oh, how exciting for you, Steve.



STEVE:  Oh, you, too, Leo.



LEO:  Me, too?  Oh, crap.



STEVE:  Oh, yeah.



LEO:  I just wanted to drop you a line and say that a recently declassified NSA document has appeared online that directly links - oh, god - directly links to GRC and features ShieldsUP! and Security Now!.  The document also names both of you.  Oh, double crap.



I was reading a Wired article about the tips NSA has on spying using Google - that's on the Wired magazine's Threat Level blog, which is really great reading.  Linked from the article is the following 640-page, 40MB PDF, "Untangling the Web," from the NSA.  If you go to page 583 - hard-coded page, not the PDF reader page - you'll see a graphic of ShieldsUP!.  Page 605 also references the Security Now! podcast.  So we've got a shortened link:  goo.gl/fNDka.  The author of this document has been redacted.  But we know he's a fan.  Publication date also unclear, although February 2007 was the date of last modification.  Well, that's cool.  I really like that.



STEVE:  It actually - so, okay, a couple things.



LEO:  Did you go read it?



STEVE:  Oh, yeah.  So here I'm holding up a picture.



LEO:  "Untangling the Web:  A Guide to Internet Research."



STEVE:  Yes.  And I really would commend this.  First of all, 40MB, it's a huge thing because it's scanned.  So it's scanned images and compressed PDF.



LEO:  Lots of paper, yeah.



STEVE:  Yes.  But apparently it was classified.  Now it's got - and it used to say "For Official Use Only," and that's now been crossed out of the entire document.  And it's got a Doc ID 4046925.  But the thing that was most flattering is there's a chapter, the second reference down on the documents page 605, which is not the physical page but the actual number on the page itself.  It's a chapter titled "General Security and Privacy Resources."



And it reads, "The best defenses against the many dangers lurking on the Internet are awareness and information.  Because security and privacy threats are so pervasive and increasing in number and potency, staying on top of threats and means of protection is crucial.  Steve Gibson, rightly famous for his ShieldsUP! website and free software," and then it says, "e.g., Unplug n' Pray, launched a new service with Tech TV's Leo Laporte in 2005.  Every Thursday afternoon," and originally we were Thursday afternoons, "they create a 20- to 25-minute," and originally we were less than half an hour, "audio column about personal computer security called Security Now!.  The topics covered include Personal Passwords," he says, "(a must-read), NAT Routers as Firewalls (another must-read), HoneyMonkeys (no, I'm not making that up)," he has in parentheses, "Unbreakable WiFi Security, and Bad WiFi Security.



"The audio broadcasts are archived in several formats, including a text file, a PDF version, and an HTML web page.  There's also an option to receive an email reminder whenever the page is updated.  Gibson has the ability to cut through the jargon to explain these topics clearly and to offer practical advice on how to handle personal computer security issues."  And then they have a link, Security Now!, GRC.com/securitynow.htm.  So...



LEO:  Wow.



STEVE:  Wow.  That was very cool.



LEO:  That is really neat.



STEVE:  And for what it's worth, this is, I mean, it is a fabulous resource for, I mean, as many people have noted, this stuff tends not to age.  The stuff we were talking about at the beginning of the podcast, Episode 1, 2, 3, 4, 5, I mean, HoneyMonkeys maybe a little outdated now, but it was a fun podcast anyway.  But the essence of what it takes to understand security is timeless.  And this is a great PDF for people to scroll through.  And clearly the person who brought this to my attention, Andrew Stevenson - thank you, Andrew - had to have gone through it page by page, and he stumbled on references to our work here.



LEO:  That's really neat.



STEVE:  So that was very, very cool.



LEO:  Well, and now that we've come to the attention of - yeah?



STEVE:  It was funny, too, like, I tweeted this to my followers.  And I got back a lot of, like, oh, well, very much like your reaction, Leo, when it's like, uh, you've come to the attention of the NSA.



LEO:  We're in a database somewhere.



STEVE:  That's a good thing?



LEO:  They're watching now.  So, hi.  And maybe they're learning some things, which is good, too.  Next from Matt, also in England, in London - that's pronounced lawn-dawn - says, Steve, you forgot to secure your cookies.  So he's got a long little clip here.



STEVE:  Well, yeah.  What he did was - first of all, he's right.  I made a big point a couple weeks ago of talking how I went to HTTPS exclusively.  One attribute which cookies can receive is called "secure."  So in the set cookie header which the - the so-called "reply header," the reply meaning that the server is replying to the client's query.  In the reply header you specify the cookie's name and then its value.  You can also specify the path, which is to say for all future queries that are subsets of this path, that is, within this path, return this cookie.  But you can also say "secure=1."  And what that says is only send this cookie in the event that you have security established.  That is only over an HTTPS, which is an SSL/TLS connection.



And he's right.  I have not gone back into the source of my so-called "net engine" code and added that everywhere.  And I should.  So as it turns out, nothing I'm doing requires secure cookies.  My entire eCommerce system is cookie free.  It operates with no cookies enabled.  And I can maintain session status and so forth without cookies.  So the only reason I have any cookies was for that analysis system which allows me to generate statistics because I was curious to see how people had their browsers set and how different browsers were acting and so forth.  And I've just let it run for the last five years because I already had the technology in place.



But Matt, you're right.  He also noted, or in these reply headers, somebody had suggested I add - and I think it was in our newsgroups - an X-Frame-Options header, which is very cool.  One of the things that can happen to a website is that it can be loaded into another site's frame.  So some other site would be actually hosting GRC in a frame.  Essentially, it's sort of a way of stealing our content.  And there are security implications, obviously, to that.  I want someone to come to GRC in order to get GRC's stuff, rather than run us in a frame and perhaps play some games with users.



You can actually have your server send a response header that's X-Frame-Options, and mine is set to Same Origin.  And essentially that prevents GRC from being framed in somebody else's site.  So the browser sees that and will not - it will refuse to - and all the browsers support this now for a long time.  The browsers will refuse to present content from a different origin if the server says only show this in the same origin.  So it's an additional way of enhancing security, which I'm glad to do.  And I'm going to go back and add - turn security on on my cookies because there's no reason not to have that turned on.  So thanks for the heads-up, Matt.  And everybody should.



LEO:  Third question from London.



STEVE:  Wow.



LEO:  Richard King in London had his alarm bells go off.  Hello, Steve and Leo.  Long-time British viewer.  That's in England.  The InfoSec Europe Expo has just been held here in London, and I've received loads of freebie updates. Here's one from WickHill.com.  It's their SSL Intercept demo.  He said, it made my alarm bells go off.  I completely follow your Trust No One - I'm just making people - all of our U.K. followers are just hating this right now.  I completely follow your Trust No One, and I think I understand your teachings on SSL/TLS; that is, my PC checks the SSL cert, its authenticity, et cetera.



The thing is, for this SSL Intercept - this thing is for SSL Intercept, and it says it's a couple of devices that intercept the SSL/TLS stream, decrypt it for reading, then send it out via a second device which re-encrypts the stream.  It doesn't say it uses its own SSL Cert, nor that you have to install it into the browser of every PC as a Trusted Cert.  And it says the process works in both directions.



Now, in your recent episode you explained how IE can be tricked into turning green and cause us to trust a spoofed EV cert.  Maybe now it's just sinking in.  Shouldn't we be paranoid about this thing?  How can this be trustworthy? Surely this is a man-in-the-middle scenario?  Imagine I am at work or somewhere, and I have not been informed that this is in place.  I try to buy my copy of SpinRite with my Visa card.  And while I'm imagining the Yabba-Dabba Doo sounding in your office, this device is decrypting my Visa details and reading them.  Hmm.  If this is the case, then the SSL/TLS model or its implementation is broken, and we need something new.  Or have I got this wrong?  Please tell me I've got it wrong, Steve.  Can you explain, please?  Many regards, and keep up the excellent work, both GRC and TWIT.  Richard King, near London, England.



STEVE:  Okay.  So...



LEO:  I imagine you clicked this link.



STEVE:  Oh, yes.  And there's a nice, yeah, you can click the link, and it shows you a product which is being offered.  It's exactly as he explains.  There's one device that does the decryption.  And from their diagram it looks like they're not trying to be in the antivirus, spam, and content scanning business.  They allow an intermediate device to do that.  And then you go back to another one of their devices, which reverses the process, exactly as Richard says, and reencrypts is so that it goes off to the Internet.



So I don't mean to beat a dead horse.  I know we've talked about this a lot.  But it is central to the security of the Internet is SSL, the transport layer security, HTTPS and what that means.  So there is one fact that Richard didn't address.  He mentions that they don't say that your PC checks their cert or how authenticity is verified.  The SSL ecosystem, the so-called PKI, the public-key infrastructure, is not as broken as this makes it seem because they have left out the fact that your browser must first trust this vendor to issue any certificate it pleases.



Well, that's the horrible breach.  That's the problem, is if they can get a certificate into your computer that allows them to synthesize certificates on the fly, and your browser to trust those.  So that's the gotcha.  That's why this is generally - this is not going to happen if he's out roaming around in a coffee house or outside of his corporate environment because the IT department first has to put a certificate into every employee's computer, which can happen transparently when they log in, for example, to a - Microsoft has this technology, Active Directory, and also Group Policy systems, which are enterprise network management technologies.  So Microsoft can just slip a certificate in without you knowing the wiser because that's what their technology allows, making it appear transparent.  But if you were somewhere else - and that requires that your computer be configured and log into a so-called domain controller within a Microsoft network in order for all this to happen.



But in general, if you had a noncorporate machine, if you just brought a laptop in from home, hooked it up to the network, and tried to go outside over a secure connection, you would immediately get a notice, like I'm sure we've all seen before, where your browser says, whoa, this site is not trusted.



And in fact I think under Google, if you do that on Chrome, it says something fun, like, "Get me out of here," and it comes up all red.  And it's like, there's just no - it's very hard to push yourself through that warning because Google makes it very clear that you don't want to proceed.  Firefox brings up something similar, where it's like, I know what I'm doing.  I want to go anyway.  But so it is that kind of notice that you would normally get unless there's been somehow some preexisting modification to your laptop.



So this is the system that we're using.  It's the best anyone has come up with.  The extended validation, I don't know if I've mentioned yet that there's a new page on GRC that I finished a couple weeks ago specifically discussing exactly how the enhanced validation EV certificate technology works, and why we have confirmed that you can trust that in Firefox and Chrome.  I know that I talked about this before.  The page is finished.  It's up in GRC's main menu, and it's easy to find.  It's under the - I think under the Research tab.  So it's not as bad as Richard worried.  You will get a notification unless you have essentially turned the configuration of your machine over to somebody who controls it.  And then, obviously, all bets are off.



LEO:  And I would presume this is really for business, right, to monitor employee traffic, that kind of thing.



STEVE:  Yeah.  And there have been...



LEO:  You know they do that.  I mean, this has been around for years.



STEVE:  Yes.  Yes.  I've had some pushback from corporate IT who said, gee, Steve, you're painting this in a real dark fashion.  I mean, this is just so that bad stuff doesn't come in over secure connections.  We want to be able to scan our network to protect our employees.  No one is looking at their mail.  Nobody is looking at their Visa credit card payments.  And I completely agree.  My position is users should know that their credit card information is being decrypted and scanned.  That's all I want.  I just want users to understand that.  They can decide, then, if they would rather wait till they go home to purchase something online because...



LEO:  I wish they would.  Please don't be shopping on my company time.



STEVE:  Exactly.  Exactly.  So that's all.



LEO:  That's my job.  I do the shopping on company time.



STEVE:  Exactly.



LEO:  Yeah.  And we, you know, the courts have upheld this.  We've mentioned this many times.  You're using company resources.  According to the law, which by the way differs for analog traffic to digital traffic.  The law isn't quite fair in that regard.  But from digital traffic the law has always said, and courts have upheld, that employers have every right to monitor what you do.



STEVE:  Yeah.  And we just - I'm all about empowering the end-user.  And so this is a way for people to verify.



LEO:  Yeah.  And there's a lot of good reasons why a company needs to do that, not just malware.  There's all sorts of good reasons.  And if a company does do that, they should really have an Internet policy that states that clearly, I think.  But they're not obligated to.



STEVE:  No.



LEO:  Marsh in Sacramento wonders if Chrome has changed something.  Hmm.  Long-time listener, love the show.  Steve, I know you're a Google Chrome user, and the last few months there's been a change to the way Chrome works for me.  I wonder if you've seen the same change because it sounds like the kind of thing you'd scream about.  A few weeks ago, random words on web pages started highlighting themselves.  These become links to ads of various types.  It's very annoying.  Also, sometimes I click a link on a page; and, in addition to going to the link, a new browser tab opens, taking me to a survey page.  Is this a Chrome thing, or have I been infected by some adware?  Thanks, Marsh.



STEVE:  So what I know is that it's not a Chrome thing.



LEO:  It's not Chrome.



STEVE:  And I have seen sites, not specifically under Chrome, but in probably Firefox...



LEO:  All browsers.  It works on all browsers.  This is a crappy advertising model.



STEVE:  Yes.  And I knew that you would know about it, so I turn this over to you, Leo.



LEO:  Well, it's just I hate it.  When I see this on pages, I never go back.



STEVE:  Right.



LEO:  But it's a way of embedding ads.  You'll highlight words kind of at random.  And the thing is, it's deceptive, in my opinion, because it looks like a - it breaks the Internet, the agreement about what the Internet does.  It looks like it's a hyperlink, and when your mouse hovers over it, you get a pop-up ad.  Whenever I go to a page that does that, I just leave immediately.  I think it's disgusting.



STEVE:  And so it must be that the site...



LEO:  JavaScript on the site.



STEVE:  Yeah.  So the site has chosen this approach to monetizing itself.



LEO:  Right.



STEVE:  And I agree, it's really intrusive.



LEO:  Just vote with your feet.  I presume that the survey is exactly the same kind of thing.  And JavaScript can do this.  This is a, you know, on mouseover, pop up an ad.  That's an easy thing to do.  There are a lot of sites that do it.  I wish they wouldn't.  I understand they need to monetize.  But I think that this is a very intrusive and unpleasant way to do it.



STEVE:  So my guess is that Marsh has just been, by happenstance, choosing sites - he says "run across sites" - that are doing that.  And so as you say, go somewhere else.



LEO:  Yeah.  And NotScripts will stop this.  My attitude is it's better to go somewhere else than to respond, retaliate by consuming their content and turning off their monetization.  That's the deal with the devil they made.  So you go somewhere else and read the content.  It's never - it's yet to have been on a site that I have to read, I can tell you that right now.



STEVE:  Yeah, exactly.  It's some link you happened to choose through Google.  And it's like, oh, okay, I'm not going to in there in any longer.



LEO:  The other potential possibility is that it is some malware on his system.  And that could very well be.



STEVE:  Absolutely.



LEO:  NoScript, or NotScripts in Chrome would block that.  And I would check for malware because that sounds like the kind of thing malware might do.



STEVE:  If suddenly - okay.  If you go to GRC, and you see any of that nonsense...



LEO:  Exactly.



STEVE:  Then you know, yes.



LEO:  If you're on TWiT and you see it, then you know that it's something in your computer, not Chrome, that is infecting your system.  That's a good test.  Neither you nor I do that.



STEVE:  Oh, my goodness.  And that would never happen.



LEO:  I wouldn't dream of it, yeah.



STEVE:  Unh-unh.



LEO:  Dan in Canada Dan in Canada offers a terminology correction:  Steve, just an FYI.  You know, I knew when you did this, and the chatroom mentioned it.  It's not important.



STEVE:  I know.  But I figured, what the hell.



LEO:  It's worth a correction.  In modern Linux systems, the userland tool to control the firewall is iptables.  Ipchains is what you mentioned, was Linux 2.4.  So in 2.2 it was ipfwadm.  Then it was ipchains.  And actually I'm more familiar with ipchains.  I messed with it back in those days.



STEVE:  As did I.



LEO:  Currently, yeah, currently it's iptables.  When I heard you say "ipchains," I knew what you meant.  I don't think that's a big deal, but there's the correction.



STEVE:  For what it's worth, if anyone - I thought it was - the only reason, actually the additional reason I wanted to mention it is that what iptables, assuming you are at Linux 2.6 and later...



LEO:  And you should be because there's horrible holes in earlier versions.



STEVE:  Yes.  It does allow you the flexibility of accepting traffic on an incoming port and translating the packets so that they essentially are going to, they're mapped to a different listening port.  That's cool because, if somebody had, for example, iptables running along with OpenVPN on their own little blue box fanless consumer router, one of the tricks to making sure you're able to reach your OpenVPN server running at home is to have it listening on many different ports because, for example, you might be somewhere which is blocking the default OpenVPN port so you can't get out.  But it will allow you certainly to surf to a web server.



So you want OpenVPN also listening on port 80.  You're not going to run a web server.  You're actually running OpenVPN.  But what iptables allows you to do is to have incoming, essentially to listen on port 80 and accept incoming traffic on port 80 and map that over to 1190 something.  I think I'm remembering 1191 or 1194, whatever the standard OpenVPN port is.  And the idea is you could do this multiple times.  So from the outside your IP address is listening to a number of different ports.  And that maximizes your likelihood of being able to, wherever you happen to be, get a connection through to your home router.  And then that of course allows you to get out to the Internet.



So iptables is what you want.  I was just worried that someone might be digging around looking for ipchains and go, oh, shoot, I don't have it.  Well, I meant iptables.  So thank you, Dan.



LEO:  Everybody knows that.  You know what, that's how you know you're a Linux veteran, when you say "ipchains."



STEVE:  [Laughing]



LEO:  Or what was the bootloader before GRUB?  God, the one we all used for years.  I can't remember.  But, see, when you say stuff like that, they go LILO.  Yeah.  If you say, hey, I use LILO, and we know you mean GRUB, but it just makes you sound like a vet.



STEVE:  Actually I still have LILO on my - yeah.



LEO:  Yeah, you see?  Let's see here.



STEVE:  Because this machine goes running forever.



LEO:  [Geezer mode] Yeah.  That's right.  LILO Loader.  [Normal mode] Keenin in Lynnwood, Washington thinks that 50 digits - 50 digits - see, I've been listening to rap music too much.  50 digits should be fine.  Give me 50 digits.  Steve and Leo, in Episode 403 you mentioned 3.7 X 10^50 when talking about the apparent minimum number - what's wrong with me? - of possible keys available in BitTorrent's new Dropbox-like service.  You know what, Steve?  That's a really, really big number.  To put some perspective on how big a number with 50 digits is, 39 digits of precision in the value of Pi is sufficient to calculate the volume of the known universe to the precision of one atom.  Wow.



[en.wikipedia.org/wiki/Pi#Motivations_for_computing_.CF.80]  



STEVE:  Yeah.



LEO:  That's obscure knowledge.



STEVE:  Isn't that cool?



LEO:  Yeah.



STEVE:  That just - that one caught me by surprise.  I said, okay, we've got to share this with our listeners.  We don't yet know, as I mentioned before, what the protocol for BitTorrent Sync is.  And I went looking just to make sure last night they hadn't posted it behind my back and hadn't bothered to tell me.  I really think their communications guy was so good when I first talked to him that he will drop me a note when they have a spec ready.  And they have said they're going to make that public, and they need to.



What we know is that at least part of - we know that somehow it uses 256-bit keys, but that some user-controllable part of that is 168 bits.  So that's 2^168 possible user controlled-bits.  And we don't know what the rest are, where they get the additional bits to pad that out to 256.  That's awaiting the spec.  But my point was that two - and what I said on the podcast, 2^168 is approximately equal to 3.7 X 10^50 because we can all visualize decimal numbers maybe more easily than bits.  168 ones and zero bits, we know that's a lot.  But we also know 3.7 X 10^50 is a number with 50 zeroes.



So what I liked about what Keenin said was that you only need 39 decimal digits in the precision of the value of Pi to be accurate enough, as you said, Leo, as you read, to compute, to calculate the exact volume of the known universe to within the precision of a single atom.  So we've got 11 more digits precision than that.  And I think that would allow people to hide their user-defined password without worrying about collision.  And that's the concern people have, is how do we know we're not going to collide?  And it's just there are so many of them, the likelihood is vanishingly small.  And we'll wait to see, we really need to see more about the protocol.



LEO:  Everybody in the chatroom thinks I'm having a stroke, and that's why I can't talk properly.



STEVE:  Oh, Leo.



LEO:  But I can tell you - and this, actually everybody should know this.  And as you and I age, Steve, we should know this, and our loved ones should know this, the three signs of a stroke.  If you think somebody is having a stroke, remember STR.  You should ask them to smile because, if you have a stroke it'll be like half - it looks funny.



STEVE:  You're losing control of your facial muscles.



LEO:  Right.  Ask them to speak a simple sentence.



STEVE:  Sally sells sea shells by the sea shore.



LEO:  And then - that's S T, Smile Talk.  And then R, ask them to raise both arms.  Okay?  So I'm okay.  I'm not having a stroke.  And then if you want another one, if you want extra help, ask them to stick out their tongue.  And then if the tongue is crooked, that's also another indicator.



STEVE:  Ooh, interesting.  How about maybe...



LEO:  Okay?  Everybody should know these.  Pardon me?



STEVE:  Yeah, let's not have strokes.



LEO:  No, let's not.  But the reason I mention this is because, like a heart attack, prompt intervention makes a huge difference.



STEVE:  Yes, it does.



LEO:  In this article the doctor said, if I can get a stroke victim to the hospital within an hour of the stroke, I can reverse all damage 100%. 



STEVE:  Wow.



LEO:  So there you go.  So I just gave you a very important public service.



STEVE:  And you sound fine, Leo, now.



LEO:  And I'm not having a stroke, I don't think.  I hope.  But I have lost - in the process of doing that, I lost the questions.  So let's get them back here.  Hold on a second.  We were on No. 6 - 7, here we go.



STEVE:  Yes, we're now on 7.



LEO:  David Merillat - I'm going to say it like that.  Could be Merillat - in Rochester, New York has some thoughts about carrier-grade NAT and privacy from the RIAA:  Steve, I was just listening to today's podcast and heard you deal with the question, "Will CG [or carrier-grade] NAT [network address translation] shield my IP address from the RIAA [the Recording Industry Association of America]?"  I think I've got all the acronyms.  Oh, no, IP is Internet Protocol.  There we go.  I think you missed an - well, there were four acronyms in that sentence.



STEVE:  And you want to prove to us that you have not...



LEO:  And I have not had a stroke.



STEVE:  That's right.



LEO:  Holy cow.



STEVE:  We're with you now.



LEO:  Will CG NAT shield my IP address from the RIAA?  I think you missed an important point in your discussion.  ISPs already share IP addresses between their customers using DHCP.  That's true.  Unless you have a static IP, you may get an IP address change at any time.  But only one customer can use any given IP address within the DHCP lease period, often 24 hours.  ISPs are switching to CG NAT merely because they can't get enough public IP addresses anymore, so they need to share a single IP address among several customers simultaneously.  Just as your router does in your home.



So in order to determine where a connection came from down to the level of an individual ISP number, the RIAA will need to record, not just the IP address, but also the source port, which will be chosen by the CG NAT.  The ISPs in turn will have to log, not just what public IP address their customer was using, but what ports, as well.  If the ISP assigns each port dynamically when a connection is established, this means they would have to log each connection and would actually be able to verify the individual connection that the RIAA was complaining about.



Another CG NAT strategy is to assign each customer a range of ports for an IP address.  With this strategy, the ISP doesn't have to log significantly more information than they have to do without CG NAT.  In either event, this level of logging is quite possible, and so I agree with you.  CG NAT doesn't protect peer-to-peer filesharing users from the RIAA.  I detect a total of 27 acronyms in that letter.



STEVE:  Okay.  So he makes some great points.  And one thing we encountered was interesting, and that was - I think it was in the original announcement, which I think it was Verizon was the first instance where we encountered this.  The second one was with BT, British Telecom, was announcing that a class of their customers were going to be doing this.  The AT&T carrier-grade NAT made a comment about only using eight customers per IP.  And that sort of set off a little ding for me because what they could do is, much as David said, certainly there is a record-keeping process that ISPs now have to record which of their customers have which IPs at which time.  Both internal and external, that is, they're having to - the ISP has to know what their, well, if you don't have NAT, the ISP has to know what public IP they have given to their customers at what time.



Once they have NAT, then they need to go to the extra step of mapping, of keeping track of the mapping between customers' internal private IPs and external public IPs because the only thing the RIAA or the MPAA or anyone else will see is the public IP which no longer is assigned to a single customer.  But this notion of port ranges I found very interesting because, as we know, for example, Windows only uses 5,000 ports.  Although there are - the port number itself is a 16-bit quantity that runs from 1 to 65535.  Windows itself begins assigning so-called "client ports" up above the server port space.  The server port space is 1 to 1023.  So the first connections that Windows starts issuing to client programs making remote requests is port 1024.  And it goes from 1024 up to, what is it, 1024 to 6024.  That is, the first 5,000 ports.  And then it wraps around.  But UNIX systems often just keep on going.  Windows never has done that for whatever reason.  You don't really need...



LEO:  I didn't know that.  That's really odd.



STEVE:  Yeah.  You don't really need all those ports.  The only time you would ever run out is if something was holding lots of connections open.  And there's also, when you shut down a TCP connection, there's a wait period which the TCP/IP stack enforces so that you don't reuse the same port because you might have old packets drifting around the 'Net which come in, and that would confuse the stack with a new connection between the same endpoints.



So there's like - it's called TIME-WAIT.  And if you ever do like a netstat in a command prompt, you'll see typically lots of things that say TIME-WAIT.  And that's the stack just saying, okay, we're kind of reserving this for a while until we've given it a few minutes.  Then we'll free that up again.  And those sort of disappear.



But so the point of all this is that it would be very possible, and it'll be interesting as more information comes to light, for an ISP to map sets of their customers to blocks of external ports so that the RIAA, as David says, now would need to record, not just the IP, but the port number.  So the good news is they're going to have to do some scurrying around in order to do that because it's no longer the case that just the IP would disambiguate - I got to use that word during the podcast.



LEO:  Congratulations.



STEVE:  So I'm definitely - I'm stroke-free.  And so they would need to use port ranges in order to determine which of a set of customers was using that IP at that time.  So anyway, there's still a lot we don't know.  Interesting speculation about how this is all going to turn out.  But it absolutely is true that just the IP will no longer be enough to identify a person behind carrier-grade NAT.  And I think that's good.  I like having people have privacy.



LEO:  Question 8 is Jim, who wishes to remain anonymous - I'm going to have some more chili - in Toronto wonders whether whitelisting means you can ignore patches:  



Steve and Leo, I work for a major Canadian bank which shall also remain anonymous.  Our branch workstations run Windows in a very tightly locked-down configuration.  Non-admin personnel have extremely limited privileges.  Internet access is tightly controlled.  USB ports will not mount external storage of any kind.  DVD drives are disabled.  Anti-virus software is very aggressive, and so on.  All the configuration is also continuously monitored so, if someone happens to turn off any of the controls, the monitoring software turns it back on within seconds.  Our security department reviews all Microsoft patches and ensures they're all pushed down to the workstations.



I was in a meeting recently, and they were talking about implementing whitelisting.  Not only will they whitelist software, but also URLs for Internet Explorer.  Now, here's my concern:  Someone said that with whitelisting and everything so tightly locked down, well, we won't need to apply patches regularly.  We can save them up and apply them, oh, I don't know, once every year or so.  I don't know - maybe every decade, just depends.



STEVE:  I've given away the punch line.  Go ahead.



LEO:  I don't know about you, but that statement scared the willies out of me.  You've mentioned on this podcast numerous exploits that are remotely triggered.  I'm not really in the position to question the approach because my responsibility is solely for the applications that run on the desktop.  But there are around 1,000 IT professionals in my building alone.  The decision on when to apply patches will be made by a different department, and the corporate culture here is very siloed.  It could be career suicide for me to try to tell another department how to do their job, even if I'm right in the long run.  Am I being over-paranoid, or does whitelisting really reduce the urgency to apply patches?



STEVE:  First of all, whitelisting is wonderful.



LEO:  What is whitelisting?



STEVE:  The idea is it's - okay.  Blacklisting would be you identify programs you definitely do not want to allow to run.  Whitelisting is the reverse.  Okay.  So first, in blacklisting, the idea would be that the default is to run everything except those programs.  In whitelisting, the default is to run nothing except the whitelisted programs.  So you reverse the model.  The good news is that's great for security because random people cannot bring potentially dangerous or privacy- or security-compromising software into the corporate environment and run it.  Their computer will say, eh, that's not whitelisted.  You need to go to IT department to get permission to run Quicken to do your accounting on your machine at work, for example.  So it really gives tremendous control to IT.  And it's great for security.  But as to whether that means you need to minimize patching?  Oh, my goodness, no.  They're completely...



LEO:  They're unrelated.



STEVE:  They're orthogonal to each other.  They've got nothing to do with each other.



LEO:  But we're secure, Steve.  We really are.



STEVE:  Yeah, we're, hey, we whitelisted Adobe Flash.  What could go wrong?



LEO:  What could possibly go wrong?



STEVE:  And of course we need to read PDFs.  We whitelisted Acrobat.



LEO:  Reader, yeah, yeah.



STEVE:  What's the problem with that? 



LEO:  No problem.  Java, we might need that, too.  Let's whitelist that, too.



STEVE:  Yeah.



LEO:  Hey, just to cheer you up.  So anyway, your answer is obvious.  I don't know how we get this guy - maybe he's a whistleblower.  He could send us...



STEVE:  Well, maybe these examples are so obvious that he can work this through the system, put it into an anonymous note that he leaves on...



LEO:  Well, he does say he's in charge of desktop; right?  So he could say, look, that's fine, but you must not whitelist Java, Flash, or Reader.  And then they'll say...



STEVE:  Or they're going to whitelist it, but those you must update because we all know those you must update.



LEO:  Right, right.



STEVE:  And maybe they'll kind of get a clue that, oh, gee, even though we whitelisted those, it doesn't mean that we no longer have to update our software.



LEO:  It's magic.



STEVE:  But I do salute this group for whitelisting.  It is a pain in the butt because essentially it locks down everyone's machine so that it could only do, like, only run approved things.  But it's great for security.  However, it's not a panacea.  There's another word now that shows I have not had a stroke.



LEO:  Wow, you've disambiguated panacea, and I think there's no stroke in your future.



STEVE:  Hey, so what were you going to say about making me happy?



LEO:  Good news.  Twitter has just implemented two-step authentication.



STEVE:  Yay.



LEO:  You can turn it on and go to your account settings in Twitter, require a verification code when I sign in.  You'll add a phone, and they'll text you a code.



STEVE:  Nice, nice.



LEO:  I wish they'd support Google Authenticator, but they, that's...



STEVE:  Wait, wait, wait.  You're saying they're not?



LEO:  Well, I don't know if they are.  They text you a code.



STEVE:  So, okay, so it's just a...



LEO:  Well, I'll sign up, and I'll let you know.  But right now it's just we text you a code.



STEVE:  Well, that's better than nothing.



LEO:  Yeah.



STEVE:  Yeah.  I think maybe they're worried that - okay.  Giving users an option would be nice.  But clearly they're looking at the nature of their demographic and saying, well, we can't ask Granny to do Google Authenticator.



LEO:  It's not Granny.  It's the 14-year-olds that use Twitter.  Granny doesn't use Twitter.  Granny's on Facebook.  We now found that it's really kids...



STEVE:  14 year olds are going to end up with embedded OAuth, like, in their wrists at some point.



LEO:  Chip 'em.  Chip 'em all.



STEVE:  Exactly.



LEO:  Chip 'em all.  Another listener requesting anonymity, also in Canada.  This is really an international show here.  Steve, I wanted to alert you to a unique solution to poor grades on SSL Labs that has been employed by two Canadian banks.  I think we mentioned that TD...



STEVE:  Many times.



LEO:  TD was one of the banks that didn't do so well; right?  Block SSL Labs from scanning them.  Yay.  TD Canada Trust (TD.com), and the Canadian Imperial Bank of Commerce (CIBC.com) are preventing SSL Labs from scanning, period.  Wow.  That's one way to fix the problem.



STEVE:  Yeah.



LEO:  Initially, SSL Labs would show an alert, at least for CIBC.com, that indicated something along the lines of "We have been asked not to scan this domain any more."  Now, the page simply says, "Unable to test the requested hostname."  I think this practice, effectively silencing criticism instead of addressing it, is reprehensible.



On the bright side, their major competitors, Bank of Montreal and the Royal Bank of Canada, both get glowing A's.  They have not suppressed SSL Labs scans.  Shame on TD and CIBC.  Wow.



STEVE:  Yeah.  I just, yeah, this is one annoyance with SSL Labs.  Well, and it's not an annoyance with them.  They're doing a great service.  They do offer a "We will agree not to scan" service.  I implemented the same thing on ShieldsUP! when I got a complaint from the U.S. Postal Service that employees apparently within the postal network were using ShieldsUP! and complaining about the fact that there were open ports.  And so the U.S Postal Service said  we don't want you probing our ports.  This is a decade ago.  But I still have - I have a small list of domains that I have agreed that I - and what I do is I try to punish them.  I say we have been - "Administrators of your network have asked us to please not scan their ports.  Take that for what it's worth."



But it's sad that TD.com and CIBC.com would choose to block SSL Labs rather than just fix their servers.  They're getting F's because they've got SSL - they're still supporting SSL 2.0, and people are - their hair's on fire.  I mean, there are so many problems with SSL 2.0 that it's too easy to play interception games with that.  Completely different from certificate abuses that we've been talking about.  If you have SSL 2.0, SSL Labs gives you a big red F.  And that's what these guys are doing.  So they said, oh, don't show that anymore.  And to their credit, I mean, I understand the position SSL Labs is in.  If you've got somebody saying don't scan us, then you have arguably an obligation not to probe them.  Sounds like, though, maybe they've gone, the target domains have gone further and are blocking the source IP of SSL Labs' scan.



LEO:  They're not using the system that SSL Labs set up, they're just blocking it.



STEVE:  Right.  They're just saying, eh, stop probing us.



LEO:  That's easier.  By the way, I'm just checking on Twitter, there's a checkbox, "Require verification when I sign in."  And it says "You need to add a phone to your Twitter account."  This isn't on by default, but if you use Twitter - there have been so many hacks of Twitter.  Even my account I think was hacked once.  Not due to any flaw of mine, but actually a Twitter support person had a very poor password, and somebody got...



STEVE:  It'll be interesting to know because I've got a bunch of iPads that all have Twitter, various types of Twitter clients, persistently logged in.  It would be interesting to know whether it's possible to, like, force a reauthentication when you turn this on, or if it's only for logins going forward.  We'll know by next week.  And I'm sure our listeners who are curious will be finding out when they're hearing this.



LEO:  Moving along to what looks like, sadly...



STEVE:  No. 10.



LEO:  ...our last question from Nick Donnelly, also in London, well, via Saigon.  So that's a new country.  He wonders about BitTorrent Sync:  Love the show.  Long-time listener, and much more secure for it.  By the way, somebody in our chatroom suggested we should have a second podcast called Security How!.  And I really like that idea. It's all about what to do.



STEVE:  Yeah.



LEO:  Wouldn't that be good?



STEVE:  We could just read - we could read a chapter of the NSA document every week.



LEO:  Yeah, every week.  Nick says:  Love the show, long-time listener - oh, yeah, I read that.  But I could always read it again.  Love the show.  Long-time listener.  I listened with interest to the piece on BitTorrent Sync, the vast address space and the probability of brute-forcing a key.  I suppose the question is based on current technology.  And let's say there are a million keys in use.  How long would it take to be able to brute-force a key at random and get hold of somebody's files, say using a single laptop, or a 100-machine server farm?  A week?  A decade?  A million years?  I also find it helpful to frame the number of keys relative to the number of grains of sand in the world, or atoms in the universe.  Which is it?  Hey, that's too much work.  Here's to the next 400 shows.  Steve?



STEVE:  So this was sort of a placeholder for me to say what I ended up already saying, so I preempted myself earlier, that we just don't know anything more than everything I shared in our first discussion about BitTorrent Sync.  I can't wait to give it a podcast because it is such a cool service.  What I do think it is safe to say, though, is that these keys are not brute-forceable.  The only way to brute-force a key is to - brute-force means try.  You try them all.  You start at AAAAA, well, start at A, then go through to Z, then, well, and so forth.  So you'd have to be brute-forcing a long key.



And the problem is this is inherently a network transaction.  The beauty of the fact that there is no central repository, I think that's what unnerves people.  They like the idea of, like, this is my username.  Does anybody have that yet?  Oh, no.  Okay.  Then that's my username, and here's my password.  Well, the fact is we see constantly these databases being breached.  So you don't want that to be anywhere.  You don't want there to be a central repository of usernames and passwords.



The beauty of this, and this is why, from everything I've seen, this whole system seems so well designed, is that you come up with this really long, super-secure token which is hashed down to something, we don't know if it's 160 something or 256 or what it is because we don't yet have the spec.  But we're hoping that's still on the way.  And then you submit that to a distributed directory, which is going to take time.  So you don't want there to be a typo because it's going to have to go out into the Internet, across the 'Net, poke around, do whatever it does, and, like, find the other machines which it believes has this key and then put you in touch with them.  And then you try to negotiate an agreement based on a shared secret which is this key, and then you connect.  There's no way to do that fast.



And so this is not brute-forceable.  That's one of the fundamental aspects of this.  And I don't think I explained that well enough because we weren't trying to attack this yet.  We need to have a spec in order to really say, okay, if we were the bad guys, what would we do?  But all appearances are that there isn't a way to use - to, like, test billions and trillions of these things per second.  And even if there were, we're at 10^50.  So a billion is nine zeroes.  A trillion is 12 zeroes.  So, okay, take those off, and now you've still got a lot of seconds remaining from your 50 zeroes.  So I think we're okay.



LEO:  Oh, you can calculate the volume of the universe.



STEVE:  Down to a single atom.



LEO:  Down to a single atom.  And all you need is 50 digits.



STEVE:  Yeah.



LEO:  Of Pi.



STEVE:  Actually 39.



LEO:  39 digits of Pi.



STEVE:  So 39 digits of Pi.  And we've got 50 digits.



LEO:  And we got 50.



STEVE:  Then, yeah, we're okay.  Just choose a good, well, actually, I'm not even sure you choose it.  You can submit something.



LEO:  No, no, no.  You can roll it.  But it gives you a random choice each time.



STEVE:  Yes.



LEO:  I don't know how random it is.  That's another question.  But all of these things, you know, potential flaws, but without the spec you just don't know.



STEVE:  Yup.  So we're going to shelve this for the time being until we get a spec.  And then we're going to have a wonderful podcast dissecting BitTorrent Sync.



LEO:  I love it.  I haven't converted to it, but I love the idea.  And I have it installed on all my machines.  I just haven't - I use Dropbox, and Dropbox works, and it's kind of done, and I don't really need to do anything about it.



STEVE:  Yeah.  And it fits your security needs.  Whereas crypto...



LEO:  Yeah, I'm not hiding anything.



STEVE:  Yeah, exactly, exactly.  And next week is Cryptocat.  We will analyze the security technology, so maybe - I'm not sure how much of a propellerhead spin this will be.  But I know we'll have fun talking about an absolutely bulletproof, secure, multiplatform, cross-browser, very nice, from everything I've seen, well engineered, super-secure chat system, Cryptocat.  Crypto.cat.



LEO:  Interesting.  I can't wait.



STEVE:  Episode 406.



LEO:  Yeah.  I mean, I don't need secure chat, but...



STEVE:  Yeah.  Again, lots of people want it.  And so I think we're going to have it.



LEO:  Yeah.  I use, you know, the other issue is that Google has now rolled out Hangouts in a global way.  And that's a message system I think a lot of people will be using.  What is .cat?  Do you know?



STEVE:  Good question.  I don't know what top-level domain that is.



LEO:  What country would that be?



STEVE:  It's kind of cool that it - yeah.  I like that their - there's one is cr.ry.crypto.



LEO:  Cryp.to, yeah.



STEVE:  Yes, exactly.



LEO:  And "to" is Tonga.



STEVE:  Yes, exactly.  And so I thought that was...



LEO:  .Cat is Catalan.  Which is a province in Spain, but is also a - it's really intended to highlight the Catalan culture and language.  Barcelona is in Catalonia.  And it's a different language.  It's not Spanish.



STEVE:  Very cool that [indiscernible] .crypto.



LEO:  Yeah.  It's not territorial.  It applies to the whole Catalan-speaking community.



STEVE:  And I guess we have Castilian, and that must be a different one, also.



LEO:  Castilian is - it's traditional Spanish.  And Catalan is really not that much like - it's Spanish-ish.  But it's very different.  And if you go to Barcelona...



STEVE:  That's why people are keeping it alive.



LEO:  Oh, you're going to get in trouble.  There's a big Catalan separatist movement.  You don't want to mess with the Catalans.  They're great.  And believe me, if you ever go to Barcelona, you'll have a deeper under- you should go.  You and Jenny.  Can you take a week off and go to Barcelona?



STEVE:  She's my traveling girl, so...



LEO:  She will love this.  She's been.  She must have been.



STEVE:  She's in New York right now and has been having a ball on Broadway.  So...



LEO:  Oh, now, see, why didn't you go with her?  Steve.  You don't like musical theater?  You're not a musical theater guy, are you.



STEVE:  Although I have to say...



LEO:  You'd love "Spamalot."  You'd love "The Book of Mormon." 



STEVE:  We both enjoyed "The Great Gatsby," speaking of...



LEO:  Oh, you liked it.



STEVE:  Yeah.  I mean, I didn't love it.  I loved Star Trek.  But I liked it.  I liked it.  I thought it was fun.  I think I liked the first half better than the second half.  It kind of slowed down.



LEO:  Yeah, Sarah Lane fell asleep in the second half.  By the way, there is a...



STEVE:  She's on some strange drugs right now.  She's like...



LEO:  Maybe that's it.



STEVE:  She's like - she's like, it was so funny...



LEO:  She's like me, probably.  She's having a stroke.



STEVE:  Staring at the screen.



LEO:  It's Meow.cat.  Look at this.  Meow.cat.  There's a website.





STEVE:  Aw, cool.



LEO:  That's a name.  All right.



STEVE:  Okay.



LEO:  Thank you, sir.  This is...



STEVE:  Goodbye.



LEO:  Well, not quite yet.  I do want to mention that we do Security Now!...



STEVE:  Oh, please do.



LEO:  ...every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern time.



STEVE:  Help me pay my bills.



LEO:  1800 UTC.  You should go to GRC.com and buy a copy of SpinRite.  Help Steve pay his bills and get a yabba-dabba doo as a thank-you in his office there.  We heard a Star Trek sound earlier in the show.



STEVE:  Ah, yes, that's the hailing whistle.  Yes, I had that set to one of my incoming emails.



LEO:  [Whistling]



STEVE:  Yup.



LEO:  That's a good idea.  I'm going to do that on my phone, have that be incoming email.  I like that.



STEVE:  That's good.



LEO:  Yeah.  Let's see.  You can also get, while you're at GRC.com, 16Kb versions of the show, that's the smallest audio format, and text transcriptions written by an actual human being, Elaine Farris, who does a great job.  Hi, Elaine.



STEVE:  She's actually superhuman, Leo.



LEO:  Superhuman.



STEVE:  Really, yeah.



LEO:  Fastest fingers in the West.  You also can get all sorts of other free tools like, well, ShieldsUP!, now recommended by the NSA.  You should put that right on the front:  "As recommended by the NSA."



STEVE:  I guess that's good.  I might probably just stick with this.



LEO:  If you want full-quality audio, or even video of the show because Steve is good-looking today in his specs, you can get those at our site, TWiT.tv/sn.  And the HoneyMonkeys episode of Security Now!, by the way, is SN-002.  I thought it was one, but somebody told me in the chatroom it was two.  [SN-001 is "As the Worm Turns."]



STEVE:  I did, too.  And how many times do we regret not numbering from zero?  I mean, that's a mistake you could only make once.



LEO:  We can go back and make No. 0 and just pretend.



STEVE:  Yeah, I don't know what we were thinking, yeah.



LEO:  And of course wherever podcasts are you could subscribe to, like iTunes you can get a copy automatically every week when we put it out, which would be very nice.  We will see you next week, next Wednesday, Mr. Gibson.



STEVE:  Yes, you will.



LEO:  And with any luck we'll be talking about Cryptocat.



STEVE:  I hope so.



LEO:  If we're not talking about it, something horrible has happened in security and privacy.  Thanks, Steve.



STEVE:  Thanks, Leo.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#406	

DATE:		May 29, 2013

TITLE:		Chatting Off the Record With OTR

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-406.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After covering the week's security news, Steve and Leo examine an interesting security protocol  known as "Off The Record" (OTR) which has been specifically designed to protect conversational privacy, both as it happens and also in the future.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here.  And coming up in just a bit, we're going to talk about a new chat protocol that's absolutely secure and private - OTR - and an implementation from the Cypherpunks called Cryptocat, plus all your security news.  Security Now! is next.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 406, recorded May 29th, 2013:  Off The Record With OTR.



It's time for Security Now!, the show that covers your security online, your privacy online, science fiction, coffee, yerba mate, and anything else that is going through the brain of this man, our Explainer in Chief, Mr. Steven "Tiberius" Gibson.  Hello, Steve.



STEVE GIBSON:  That would be kind of cool, if that were my middle name.



LEO:  You can take any middle name you choose, and I think you should take that name in honor of Captain Kirk.



STEVE:  I think that would be okay.  So we have a neat episode.  We've in the past talked a lot about the fundamentals of security, sort of the building blocks.  And, for example, we often refer to PGP as a popular means of protecting, for example, email communication, Pretty Good Privacy, Phil Zimmermann's famous protocol.  But there are some problems with what it does and the way it works.  For example - well, we'll get into that.  But what I want to talk about this podcast is the protocol that under...



[Talking simultaneously]



LEO:  Underlies.  Under...



STEVE:  Underpins, underpins.



LEO:  Underpants, yes.



STEVE:  Yeah, well, we knew it was under.



LEO:  Okay.



STEVE:  Beneath the Cryptocat web chatting service, which is known as Off The Record, OTR.  And Off The Record is really what I want to talk about, which is more interesting.  Cryptocat is a super simple, low friction, easy to use, easy way to get into this concept of OTR, Off The Record, protocol usage.  Yet it turns out that this Off The Record protocol is the key and the cool part of Cryptocat.  Those guys, the Cryptocat guys, have just done a nice implementation of it.  But, for example, it exists, it is available as a plugin for almost all mature IM chatting clients.  You can get it for XChat and for all the rest.  We'll sort of enumerate those toward the end.  And the way it operates, the way it was designed, and the features it deliberately provides are just, I think, fascinating and form a perfect topic for a security-based podcast.



LEO:  No relation to the CueCat barcode scanner.



STEVE:  None whatsoever.



LEO:  No, no.  Just Cat's in the name.



STEVE:  Yeah.



LEO:  All right.  Good.  Well, this will be fun.  I have - we just have one proXPN commercial.  So why don't we - I know you have security news.  So why don't we do that, and then we'll do the commercial before we talk about Cryptocat.



STEVE:  So probably, I don't think there's been anything that's been more tweeted in a week.  Actually it's only been three days.  It feels like longer than that.  Ars Technica, you may have seen this, Leo, or probably received your own share of tweets about it, did on the 27th a story titled "Anatomy of a Hack:  How Crackers Ransack Passwords."



LEO:  Oh, yeah.  This scared me, actually, because they were talking about how a 16-character basically random password was cracked in an hour.  And I just thought, oh, boy, I'm glad Steve Gibson is here to talk about this.



STEVE:  And thus the reason so many people tweeted, because they wanted to make sure that I knew about it.  And absolutely.  So in their headline they said, "How Crackers Ransack Passwords Like...," and then they gave the example of "qeadzcwrsfxv1331."



LEO:  That's a pretty good-sounding password.



STEVE:  It's like, yeah, that would - you'd think that would be strong enough.



LEO:  Yeah.



STEVE:  But it fell to these people.  So I just tweeted the link to this [ars.to/15iZSgq], although you could also - the URL under the ArsTechnica.com domain is how-crackers-make-minced-meat-out-of-your-passwords, all hyphenated.  So I'm sure Google, if you put how crackers make minced meat out of your passwords, would take you to the article, or you just go to...



LEO:  Well, also it's right on the front page right now of Ars because it's such a good...



STEVE:  Well, and that would be it, too.



LEO:  ...topic, yeah, everybody wants to read it.



STEVE:  So a couple things.  First of all, it's a three-page read.  I recommend it to our listeners because there's a lot of information there.  Now, one of the things that we will spot, we listeners of this podcast, first of all, is that they chose to use as an example the weakest possible password-hashing technology.



LEO:  Oh, MD5, yeah.



STEVE:  Yes.  So...



LEO:  Well, they even say that.  They say due to flaws in MD5 this is easier.



STEVE:  Well, so, yes.  I mean, so, yeah, they do explain it.



LEO:  Acknowledge it, yeah.



STEVE:  But that's still what they use.  So while acknowledging it, it's really important to understand that these were unsalted.  It was the worst hash that nobody uses anymore.



LEO:  Although I should point out, I think it was - who was it that was using this unsalted fairly recently?  I mean, people do, websites do use it.



STEVE:  Right.  But one of the things that has frightened people are the benchmarks that Ars Technica ran.  And so it's important to recognize that all of this is a function of the technology, that is, the technology here is MD5 with no salt and no strengthening, which is to say no iterations.



LEO:  And physical access to the password database, the hash database, so that you can run many, many, many brute-force attacks on it in a second.



STEVE:  Now, now, okay.  With that said, though, I mean, there's still a lot of value in the article.  So I don't mean to in any way discount the article.  It is absolutely worth reading for a couple takeaways that I thought were interesting.  First of all, as in these three pages, the author, who interviewed three different hackers - one whose name they never knew, he remains anonymous, using, I don't remember what his handle was, Pixel or something - interviewed them while they were working.  They were all working with their preferred cracking tool, which is the open source, freely available, oclHashCat+, which has its own web page and features.  It's a multi-parallel GPU.  It can scale to 128 simultaneous GPUs, Graphics Processing Units, in a monster system.  It doesn't - you don't just, like, load it up and go.  You interact with it, which was one of the interesting aspects.



LEO:  Although that third hacker was using, like, one kind of a PC with a 7970 card.  Radix wasn't using exactly the high-end stuff to crack it; right?



STEVE:  Well, exactly.  In fact, none of them had super large hardware.  They did, in fact, they commented at one point that, because they didn't have access to their normal cracking box, their strategies were a little different.  They might have been a little...



LEO:  Basically normal computers with Radeon cards in them.



STEVE:  Yes.  Yes.  None of them were high power.  So again, that helps to offset the fact that it was MD5, no salt, and no iteration.  So it's pretty much just straight, put a string in, almost instantaneously, well, yeah, I mean, virtually instantaneously, get out the MD5 hash, and then see if it's in the list that you're trying to crack.



So the really interesting thing that the article explains is the strategy that these three guys deploy.  They have word lists, so naturally the first thing they do is just run their word list through the hash that they know the site is using, the hash algorithm, which in this case is MD5, no salt, no iterations.  That instantly turns their word list into a set of 128-bit, because that's the size of MD5's output, 128-bit hashes, which they then cross-reference with the hashed stolen or leaked whatever password database to see if they get any hits.  And, you know, bang.  Each of them, because they're working from their own password lists, they get varying numbers of collisions.



LEO:  One list has a billion passwords on it.  I mean, it's huge.  So you're going to get some collisions.



STEVE:  Yes.



LEO:  Because a lot of people use sexymonkey123.  That's for sure on that list.  And if they used it in this particular database, it'll work; right?



STEVE:  Well, and, so, yes.  So it's worth reading the article because they do a number of things.  For example, they'll take their word lists, and they'll just use them like that.  Then they'll do the sort of things we would, if we were scratching our head thinking about it, we would  try.  Like then they add - they try all different four-digit combinations appended to the end.  And bang, another couple thousand are found that way.  Because somebody says, you know, sexymama4267.  And they think, oh, no one's going to ever get that.  Well, yeah.  That came right after 4266.  So that wasn't that hard to find.



But the thing that I really thought was most interesting - oh, and they did make the comment that, in this case, they did not know from which site this list came, probably to protect the site.  I mean, we don't know really what the history of this password list, of the password database was that these guys were cracking.  But they made the point, obviously, that if you knew where this came from - and normally you would because you're trying to crack passwords for that site.  You know that you've got the database from some site.  So that's the point is that you would look very closely at the password policy, that is, the password acceptance policy of that site.  So if that site says your passwords must be 10 characters or greater, well, they're not going to try any six-character passwords, or seven or eight or nine.  That's just - they're not going to.



But they didn't have that in this case.  So they did try some - they're, like, I think some of them had, like, every possible six-character password, just bang.  And they ran that through the thing, and that took an hour.



LEO:  Geez Louise.



STEVE:  And it found some.  And then they concatenated them.  They tried word mixtures, and that found a bunch more.  But the coolest thing of all was that, once they had found, oh, 6 or 7,000 passwords, they actually run a Markov chain, a Markov modeling against the passwords they have found because what the professional crackers know is that, for a given site, for whatever weird reasons of, like, the psychology of the people collectively going to a given site, the passwords they choose tend to be similar.  Which I thought was fascinating.  So it's like the site influences the passwords you create to some degree.  Or your choice to go there may be, if you're bringing a pre-prepared password that you use, unfortunately, across many sites, who knows what it is?



But what they have found is that, if they analyze the passwords they have easily cracked for statistical differences, the number of characters, the number of uppercase, the incidences, the location of digits in the password, if they look at the passwords they have cracked, it gives them a strong advantage against the ones they have not yet cracked.  Which I thought was, oh, that's just so cool, I mean, that that actually works.  And so they did that in this process.  And so they used, like, their standard approaches to get thousands of more readily cracked ones.  Then, looking at what those were, they then modified the guessing.  That is, their results from the early cracking, the easy cracking, fed backwards almost evolutionarily to drive the next generation of guessing.



And HashCat+ does all this.  I mean, it's interactive.  At one point one of the guys was doing something, and he said, well, that's going to take 20 hours, but this was like a real-time interview mode.  And then he said - so he aborted that after a few minutes because it wasn't finding much, or the rate at which it was finding them didn't impress him.  And so he said, okay, stop that, and let's go try a different direction.  So anyway, terrific article.  And thank you, everybody, for sending it to me.



LEO:  What's the takeaway on this?  I mean, websites obviously need to use stronger hashes than the well-known, broken MD5.



STEVE:  Yes, yes.



LEO:  They need to salt them.  But if a web - but you don't control that.  I mean, when I log into a site, A, I don't know it.



STEVE:  Right.



LEO:  I might be able to infer it from their policy.  But I don't know it.  And, B, we don't control what they choose.  I can't say to them, well, I'm not going to use MD5.  Would you use something else?



STEVE:  So nothing we saw in this article said that I was wrong about Haystacks.  Which is not to say that somebody should use a simple repeating pattern as their entire password.  But the whole concept of Password Haystacks was to push you out, to make it easy to make a much longer password than you would normally ever have.  Yes, it's true, completely random passwords are best.  That's the takeaway.  And in any scenario you want as long a password as the site will let you use, and it wants to be completely random.  Which means you cannot remember it.



LEO:  But it is a hockey stick when it comes to password length.



STEVE:  Yes.



LEO:  And they do show that graph.



STEVE:  Yes.  I was going to have you bring that up ahead of time because that's sort of like, okay, I rest my case on length.  They call it "hitting the wall" of password length.  As it gets longer, it just goes exponentially straight up in the amount of time it takes to crack these.  So that was my recognition, which is why I created the Password Haystacks concept, was start with a good password and then pad it.  Make it longer.  Because remember, they don't know.  They don't know anything about what you've put in until they find it.  And if you make it longer, they're just - they're not going to find it.  But the way the Ars Technica article ended was saying nothing beats really long, totally random.  Nobody can remember that.  So, and Ars Technica said we will shortly be doing a series on password reminder programs a la LastPass and 1Password.



LEO:  Does this change how I think about LastPass?  Because that's the one password, you know, I have to remember one password.  I use LastPass to generate 16 or longer character passwords, random ones, for every site I join.  But I do have to remember one password.  That's the LastPass password.  And for that I make it long, but I use a mnemonic.  Is that - should I worry about that?



STEVE:  Well, and remember, one thing we do know about the LastPass guys is they're on top of this.  They're not using MD5 with no salt and no iterations.



LEO:  Good point, yeah, okay.



STEVE:  So they recognize that they're holding a massive asset in the form of all of their customers' passwords.  But we're encrypting them before LastPass ever gets them.  So LastPass never gets them in the clear.  Remember that all the sites we go to, they get them in the clear, and then they hash them to store them.  So there's a vulnerability right there.  LastPass, it's client-side encryption, really good client-side encryption.  And they recently beefed up their PBKDF2 iterations.  I think they recommend, is it 500, I don't remember now, but that's something...



LEO:  5,000, I think they said.



STEVE:  So you're able to set that and crank it up as high as you want.  So that happens in your browser.  Then it gets sent there.  Then they salt it and further mix it and, I mean, because they don't want the responsibility of having all this.  So my feeling is, while it is true that we end up with a rather complex and sophisticated chain of security, and we know that that's always dangerous, we're storing really good passwords in a secure manner with something like LastPass, which you and I have both chosen after really looking at it carefully.  So Ars Technica's going to follow on this story by essentially going where we've already gone and saying the best passwords are long and random.  So if you can use those, you should, and you need to use some sort of password minder to manage that for you.



LEO:  LastPass does so many great things now.  It's gotten better and better.  They've even got - if you put a credit card number in there, they'll do, for free, you get some credit card watching features.  They remind you now - and this has become an annoyance, but it's a good thing.  If it says, hey, you know, you use the same password on this site as you use on other sites, they'll let you know now.  Which is great.



STEVE:  Yes, they will audit your own use and say, oh, you know, you ought to maybe fix this.  It's like, ooh, thank you.



LEO:  But the more I use it, the happier I am.  It's just a great product.



STEVE:  Yeah, it's the right thing.



LEO:  Yeah.



STEVE:  So Amazon has joined the team, or the league, of OAuth 2.0 site logon providers.  For example, log on with your Facebook account.  Log on with your Google account.  Log on with your Twitter account.  Now you can log on with Amazon.  And when I heard that this morning, I immediately checked, and sure enough, they are - I was hoping they didn't just invent some random thing themselves because that would be dumb, and they didn't.  They used OAuth 2.0, which is the technology we've covered in detail.  We did a whole podcast on the way that technology works so that you're at some random site, you don't want to bother creating an account there because you just want to post something to a blog, or you want to buy something, but you don't want to go through all of the account creation headache.  And they offer you the option, log on with Amazon.



And it's like, oh, I'm an Amazon user.  So you just push that button.  Either you're already logged into Amazon, or you bounce over to Amazon, log in with your Amazon credentials, and then the OAuth protocol working behind the scenes is able to provide an identity and whatever information the site has requested from Amazon.  For example, they want - Amazon might do all of your purchase processing, but you want to provide your address and some information about yourself so you don't have to provide that all to the site.  So that's now available from Amazon.



LEO:  Oh, I just updated my Amazon password because that's probably a good thing to make sure that's secure now; right?



STEVE:  Yeah.  And again, mark my words, every time on this podcast we have said something is going to happen, sometimes it takes a year or two, but then it happens.  We are going to see an abuse of this.  We are going to see sites saying, oh, log in with Amazon.  And you're going to click the button, and you're going to be bounced to a fake Amazon site.  That is - this is bound to happen.  That is the problem with OAuth.



So when you're using any of this "log on with the high-value site credentials you already have," really look at where you're going.  I mean, this is where you definitely want to see the extended validation coloration.  Hopefully the site you're logging into offers that so you can verify you're at them.  You want to look at the URL carefully to make sure that it's www.amazon.com, and it's not amazin.com or amazon.cat or something.  I mean, look carefully because this is going to happen.  And we don't want our listeners to get bitten by it.



LEO:  I wish they would adopt two-factor.  They probably won't because they're trying to sell stuff, right, and they don't want to put speed bumps in.



STEVE:  Well, they have two-factor now on a lot of their other services.  Not on their - I don't know if it's on their main buy a book.



LEO:  No, not that I know of, yeah.



STEVE:  But Amazon is supporting the proper OTP, the one-time password, two-factor, multifactor authentication for their S3 and web services and all kinds of stuff.



LEO:  Oh, good.  Oh, good.



STEVE:  So, yeah, they're definitely there.  I wouldn't be at all surprised if they - they're probably just working it out, and then if they - I wouldn't be surprised if they move it forward.  That would be good.



LEO:  Yes, it would.



STEVE:  And Google announced something interesting, that actually what is, I mean, it just sort of seemed random to me.  But then in looking at the details I thought, oh, there's some teachable bits in here for our listeners.  And that is, Google has formally put out the word that they're going to be updating all of their SSL certificates.  They figure it's time now to move from 1024-bit public keys to 2048-bit public keys.  So they're doubling the public key length, which ridiculously exponentiates the security of the public key.



It's like, it's not - public keys, remember, don't scale their difficulty as quickly as much smaller symmetric keys do.  That's why a smaller symmetric key, like an AES key, could be 128 bits or 256; whereas we need 1024 or 2048 bits in a public key.  So the key length, I mean, if you had a key length like that for a symmetric key, well, there are no ciphers that operate on symmetric key lengths that long.  You just don't need them.  But you do in a public key.  But still, this is great that Google is saying, okay, you know, these 1024-bit keys are seeming a little old.



But what was really interesting was that they were pre-announcing this to the developer community because it turns out many people have taken some shortcuts which could, if Google changed their certificates, could break authentication.  But that's what the whole public key infrastructure, PKI, is designed to allow us to do.  GRC, remember, I famously left VeriSign and went over to DigiCert, and I'm super happy for that.  Nothing broke.  And I upgraded my certificates to EV.



In fact, I just did that the other day for some other, some subdomains because I wanted to go 100% EV at GRC.  Again, nothing broke.  But it turns out that there are things developers could do that are essentially taking shortcuts.  And apparently Google is aware of this and would like to say, look, if you've done these things, well, it's on you because we're going to give you some notice.  So, for example, Google said, quoting them:



"For a smooth upgrade, client software that makes SSL connections to Google must" - and this was bold underlined italics must - "perform normal validation of the certificate chain."  It's like, okay, well, who wouldn't?  Well, we're about to find out.  Also "include a properly extensive set of root certificates contained.  We have an example set which should be sufficient for connecting to Google in our FAQ.  Note:  The contents of this list may change over time, so clients should have a way to update themselves as changes occur."



Okay, well, there they're just talking about the root certificates.  So they're saying do normal validation, that is, don't do something screwy.  And we'll talk about what that would be.  Have a mature set of root certificates, meaning that Google's new certs are going to be signed by some major root certificate authority, like a DigiCert or a VeriSign or whomever.  So you need those root certificates in order, you know, like a mature set.  It may be that some people just have, for example, only have the one root that currently signs all of Google's certificates.  And then, if Google were to change its provider of its certificate, then that would break software that was, like, highly Google specific.  So Google is warning people, saying, eh, don't do that.



And then they also said:  "Support Subject Alternative Names (SANs)."  Subject alternative names are - that's the technical term for one certificate being able to provide coverage for multiple domains.  For example, I have at GRC one certificate.  And the formal name, the so-called "CN," the Common Name on the certificate is just GRC.com.  Yet the certificate is valid also for www.grc.com.  And had I anticipated it, I would have also put media.grc.com in there.  And you can have many.  And those are called "alternative names for the subject," so thus "subject alternative names."  And the idea is that it's very practical to obviously have just one certificate that covers many domains, rather than having to have individual certificates per domain.



So this all exists in the very common certificate standard now, which is v3, Version 3, for this certificate standard, the public key infrastructure.  And it's been around forever.  But some clients may not know that SANs, the Subject Alternative Names, are really now important to support.  For example, Google may not have been taking advantage of that in the past.  Google is saying, they're broadcasting in advance, we intend to do that now.  Everybody else has been doing it for two decades, so we'd like to, thank you very much.  Please make sure that, if you've got any strange clients that are lagging way behind, they understand to look in the subject alternative name field if they see - because we may be providing a certificate whose common name doesn't match.  And we're going to be relying on the client to accept, to look in the subject alternative name field for that match.



And they said:  "Also, clients should support the Server Name Indication (SNI) extension," and I'll explain that in a second, "because clients may need to make an extra API call to set the hostname on an SSL connection.  Any client unsure about SNI support can be tested against" - and then they give the URL - "https://googlemail.com.  This URL should only validate if you are sending SNI."



Now, what SNI is, is another very cool extension which again has existed for quite a while, and adoption of it has been slow.  The idea is that - and Leo, we've talked about this before.  In a hosted website model, there's been a problem of each domain, each SSL needing to be associated with a single IP address.  And the idea being that the client does a DNS query, for example, on, say, well, I'll use myself again as an example, GRC.com.  That gives an IP address.  And it then connects to the server at that IP and will only accept a certificate that says GRC.com.  But as we know, there are hosting providers who have a huge number of websites all sharing a single IP.



Well, the way that works for web browsers is in the query header they have a host header that says this is the host that I'm wanting to connect to at this IP.  And so that allows a multidomain hosting provider to hook that client up with the proper server because the client is saying I want this hostname at this IP.  Well, what SNI does, Server Name Indication, that's similarly a way for the client in the initial SSL negotiation, in exactly the same way, for it to say this is the host I am hoping to connect to at this IP.  Remember that this is important because we were talking about the client's query and the query headers, where that host header is.  But that's in the actual dialogue after the security connection is established.



So the point is that's too late for the SSL protocol to receive the information.  It needs it in that first packet the client sends to the server, saying I'm wanting to negotiate a connection with this server.  So Google is saying that they're going to be in the future, they have not been already, they're going to be relying in the future on clients saying this is the Google domain we're wanting to connect to at this IP so that the proper certificate - and the idea is that the server then has a bunch of certificates that all might be served at that one IP.  And it chooses, the server chooses which certificate based on what the client has said it's asking for.



So again, these are all standards that have been around a long time.  But, famously, software is slow to update, and it doesn't if it doesn't need to.  And Google is saying, eh, you know, some of these things may break.  Finally, they said, "On the flipside" of here's all the good things, they said, "here are some examples of" - remember we talked about, like, they said you must properly validate the certificate.  And it's like, well, okay.  Who wouldn't?  Well, apparently people don't.  So they say, "Here are some examples of improper validation practices that could very well lead to the inability of client software to connect to Google using SSL after this upgrade."  And so the first one is, they said, for example, do not do this.  And that's "matching the leaf certificate exactly, e.g. hashing it."



So, okay, now, get this.  Apparently, as we know, the right way - by "leaf certificate" they mean the server certificate, the last one in the chain.  Apparently there are some clients which know what the Google certificate is, and they just have a hash for it.  And so they don't do any public key chain following.  They don't do what you should, which is take the Google certificate and then build a chain back to a valid root certificate that you have in your local root store, and then make sure that every certificate in the chain has signed the successive one so that you trust every linkage.  And since you trust the root, you trust the leaf.



Well, apparently not everyone does that.  They just say, oh, look, this is Google's certificate.  We're just going to remember that.  And Google is saying, obviously, when we change our certificates, the hashes of those certificates are going to change, and so suddenly you're not going to be able to make a secure connection because you were, like, doing some lazy ass way of SSL.  So my opinion is you deserve what you get, if that's what you're doing.



And then they say also, "matching any other certificate, even a root or an intermediate signing certificate exactly," in the same fashion.  I mean, yes, I mean, nobody should be doing that.  But apparently Google believes some people are.  Or "hard-coding the expected root certificate, especially in firmware."  Google says:  "This is sometimes done based on assumptions like the following:  the root certificate of our chain will not change on short notice."  And the fact that it never has doesn't mean that it's not going to.  And apparently Google plans on that happening.  Or making an assumption:  "Google will always use Thawte as its root CA.  Google will always use Equifax as its root CA.  Google will always use one of a small number of root CAs."  Google is saying don't make any of these assumptions.  We're planning to break all of these.



LEO:  We're wily.



STEVE:  Or "the certificate will always contain exactly the expected hostname in the common name field, and therefore clients do not need to worry about SANs."  So, and then finally, "the certificate will always contain exactly the expected hostname in a SAN, and therefore clients don't need to worry about wildcards."



So basically Google is saying, look, we're aware that shortcuts have been taken, and we're about to break all of those.  So get your acts together.  If you want to be able to establish secure connections to us, just do it right, 100% right.  Basically what they just gave us was all the things not to do and the things you need to be able to support.  And all contemporary SSL systems have been doing this for years, for decades.  So it must be weird little boxes in the closet, you know.



LEO:  Yeah, as always.



STEVE:  We often talk about boxes in the closet.  And Google is saying, you know, we need the freedom to change.  And in fact Google maybe sort of boxed themselves in a little bit by not having changed before.  Like they are rigorous with the way their decisions have been made.  If they always were using the same root CA, then someone could go, eh, well, you know, we'll check the chain, but we're only going to import the root CA that Google uses because that's Google's root.  And Google is saying, eh, no.  I can't wait to see who they switch to.  That'll be really interesting just to know, to wonder what their logic has been.



LEO:  They probably have a randomizing Python script that just picks one.



STEVE:  Yeah, I imagine they'll be dealing, I mean, they're going to certainly care about security.  They're going to want to get a really good provider.  It'll be fun to see.



LEO:  Do you think they have, like, a lot of certificates?



STEVE:  What they have is special.  They have a certificate that lets them make their own.  And that's special.



LEO:  Ah.



STEVE:  So if you look at a Google chain, they are signed, I think, by Equifax.  But they have a signing certificate from Equifax.  So Google is minting their own certs at will for all of their various domains and subdomains.  And, I mean, they're a global network.  It's much easier, and actually it's safer, to use multiple certificates scattered around because if one ever did get compromised, the rest of their network would not be compromised.  If they used one certificate globally, oh, goodness, I mean, if that ever got compromised, it would take the whole world down, their whole world.



LEO:  And then Larry keeps that certificate-maker in his pocket so that no one can get it.



STEVE:  Believe me, it has got to be guarded.  There's probably some serious technology surrounding that.



LEO:  We'd love to see that.  They're never going to say because they don't want anybody to know.



STEVE:  Yeah.  But it's - ultimately they - so they're being - their certificate is signed by a major root, like Equifax.  And but it uniquely has its own signing capabilities.  So Google can mint their own certs for whatever duration and reasons they wish.  And they have that privilege because they're Google and trusted.



LEO:  I want to meet Gozer, the Keymaster, the guy who holds that cert.  There's this one guy, and you have to go to him and say, hey, can I come over at 3:00 o'clock this afternoon?  I need to mint some certs.  



STEVE:  It would be a...



LEO:  It's a perfect breath mint.



STEVE:  Be nice to have.  So I tweeted this yesterday just because I thought it was very cool.  And I wanted to give a shout-out about it to our listeners.  It's called - it's on Kickstarter.  It's a Kickstarter project, lots of time to get in if you were interested [kck.st/154D8Ba].  It's called Linkbot, L-i-n-k-b-o-t.  And so the URL is linkbot-create-with-robots.  It's just a very cool project.  They come up with a modular robot module, essentially.  It's a common block with Bluetooth.  It's rechargeable.  It's got blinky lights.  It's got a beeper so it can make sound.  I think it's got two motors that operate independently.



And the idea is that you can stick these things together and make robot arms and make caterpillars and things that walk and do stuff, all just sort of in an erector set kind of mode.  It's Arduino compatible.  It's got a cool feature where you can, like, if it was articulated, if you had like a multi-joint thing, you can move it to a position and then say, okay, remember this, and then move it again and then remember this, and move it again and remember this.  And then it'll go back and follow that whole sequence for you without any programming.  And it's all open source.  There is a programming language that it's tied into.  Anyway, it's just very cool.



So I wanted - I did tweet about it yesterday.  For those who follow me, you already know.  But Linkbot, Create With Robots over on Kickstarter just came across my radar, and I wanted to share it with people.  And I have a neat story from a friend of the podcast who has written before, Robert Osorio, who's in Lady Lake, Florida.  He wrote, he said, "SpinRite Resurrects Dying SSD."  This is not something we've heard about before.  And actually the way this SSD is dying is frightening.  And it's interesting that it even can die in this way.  So listen to this one.



He said, "Steve, the other day I got a really nice example of SSD resurrection by SpinRite.  A client gave me a year-old, so not very old, Dell XPS 17 with an SSD boot drive that took seven-plus minutes to boot.  And when it finally did boot, it ran horribly slow, with long pauses at the desktop.  The Windows Event Log showed multiple disk errors, and the Dell hard drive diagnostic confirmed the drive was bad and gave me an error code.  And since it was still under warranty, I had a replacement coming via overnight shipping.



"However, I really wanted to image the drive, if possible, since there was a lot of specialized software on this laptop, and it was a mission-critical system.  A fresh OS install would have been a long and tedious ordeal in this case.  Needless to say, all attempts at imaging the drive had failed when it encountered errors.  I ran SpinRite Level 2 scan on the drive, and it detected around 12 unrecoverable bad sectors.



"After running the scan, the drive booted instantly into Windows.  It also allowed me to create a drive image using an Acronis Boot CD, which I subsequently recovered to the replacement drive, so all was well.  To show how bad a condition the drive was in, I ran a Level 2 scan three more times just for fun, and each time SpinRite detected even more unrecoverable sectors in different locations.  Thanks for a great product.  Bob."



So this is interesting because this says that - remember that the cells in an SSD, the bit cells are - they're so-called MLC, multilevel cells, in these consumer large SSDs.  So essentially it's a capacitor which stores an analog voltage.  If it's a two-bit cell, it'll store four different voltage values, which means it could be zero, it could be one third, two thirds, or full.



And so the problem with multilevel cells as opposed to single-level cells is you have three thresholds where you need to detect the voltages, rather than just one.  In a single-level cell, you'll either have a zero or a one, zero voltage or full voltage.  And then you have a - technically, typically, half of that is the threshold.  If it's below that, then you know you got a zero.  If it's above that, you've got a one.  Because the idea is this will, over time, these capacitors tend to discharge.  And they last a long time, but that's the technology is just charge stored in a capacitor.  And so the multilevel...



LEO:  I had no idea it was that simple.



STEVE:  Yeah.  And so the multilevel cells, the reason you would store, obviously, four voltages is to get two bits per cell.  That instantly doubles the density of your SSD.  You can go from a 128GB to a 256GB.  So that's really valuable.  But the problem is you need to store two bits, meaning four values.  And now you've got three threshold levels.  Is the voltage above two thirds?  Is it below two thirds but above one third?  Is it below one third but not zero, and so forth.



So what is happening on this particular one, I mean, this is - it's good that he's - this is definitely defective.  It is dying as we watch.  I mean, remember that SpinRite is running through and reading the value from the cell.  If it's enough uncorrectable, if it requires enough correction, then that sector will be swapped out, and another different one will be put in.  But these things are dying, like, hour to hour.  So he didn't wait too long getting - running SpinRite on this and then immediately doing an image in order to get this moved over to a new drive.  And it's really interesting to see an SSD that is in this bad shape after apparently only a year.



LEO:  I don't think that's common.  And most of the drives nowadays are MLC.  It's hard to find SLC SSDs.



STEVE:  Yeah, that's all I buy is SLC because of course I'm the SpinRite guy.



LEO:  Where do you - is that the Intel?  Where do you get that?



STEVE:  Mine, I bought OWC, a beautiful...



LEO:  Well, I did, too, but it's an MLC card that I got.  I got the Accelsior.



STEVE:  Well, mine were the individual drives.  And I've looked - but they're still small, also.  I mean, I didn't get multi terabyte.  I'm down, because, remember, I'm in assembly language, so none of my stuff is big.



LEO:  You don't need a lot of space, yeah.



STEVE:  Right.  So I think these are, like, 60GB drives.  And I'm running them in RAID 6, so I'm only getting 40GB.  But that's way more than I need for my server because the server runs on, like, 2GB.



LEO:  But I suspect that a lot of the issues with MLC have been solved because it really is hard to get SLC.  But I don't know.  Even some of the...



STEVE:  Well, high-end...



LEO:  I got a pretty high-end card that's - it's MLC.  From Other World Computing, yeah.



STEVE:  Yeah.  For what it's worth...



LEO:  Oh, you get the Enterprise, probably; right?  That's what you're getting.



STEVE:  Yes, they are the Enterprise...



LEO:  Yeah, that's why they're MLC.  SLC.



STEVE:  Way, way more expensive.



LEO:  Yeah, yeah, sure is.  Never mind.  We're talking 50GB for $300, $6 a gig.



STEVE:  Yeah, I paid that.



LEO:  Yeah, yeah.  And for that you get SLC.



STEVE:  Yeah, Enterprise class.  And then I put in a RAID 6, so I got 100% redundancy.  Any two of those can die, and I'm still just fine, so, yeah.



LEO:  That's Steve, right there.



STEVE:  But I don't have to worry about my server anymore.  That's all taken care of.



LEO:  Yeah, that's right.  Oh, that was for your server.  Well, that makes sense, yeah.



STEVE:  Oh, yeah, yeah, that's for the GRC, that's my...



LEO:  Oh, no, that makes a lot of sense.  You wouldn't want to do that necessarily on a computer, you know, a laptop.



STEVE:  That would be overkill.



LEO:  Yeah.  So CueCat is an IM, instant messaging solution?  Is that right?



STEVE:  Okay, so, yeah.  Let's frame this properly because I started off putting too much emphasis on Cryptocat. Cryptocat is definitely fun, definitely worthwhile.  It's a web browser plugin and also available apparently as a standalone Mac app.  You have to have 10.6.6 or later.  But it's also available as a plugin for - and I'm trying to look through my notes.  Where is it?  There it is.



LEO:  Chrome.



STEVE:  Chrome, Firefox, and Safari.  And I did install it on Firefox to play with it.  It's a cute little tiny thing, 635K.  And then you have to restart Firefox, and then you're there.  So Cryptocat is a browser plugin-based secure chat system.  And now we're going to spend the rest of this podcast explaining what secure chat is because it's different than, for example, PGP-style secure email.  But so what I like about Cryptocat is that it lets - it's, like, almost no installation, and bang, there you are able to set up a chat relationship with anybody else in the world, and it is utterly secure.



It is - there is - okay.  And I have to define what "secure" means because, again, I'm using secure chat in a way that I haven't defined yet.  But what I like about - the reason Cryptocat is fun is it's just zero friction to get into it.  You load a plugin, and bang, you're going.  So if there's anybody you want to do chat with, you can.



On the other hand, it turns out the underlying protocol, which is what I find interesting, I mean, the client there is very nice.  The underlying protocol is where the meat is, and this is where the use of the word "secure" comes into play.  And the protocol is widely available.  It's all over the place.  It's been around some - Ian Goldberg is one of the coauthors of the protocol.  He's been in math for a long time.  He's now a cryptographer.  He was - we once mentioned him because he's the guy that realized that Netscape Navigator's random number generator for its SSL connections was no good, and that completely crippled the security of Netscape Navigator's early SSL.  That was Ian who figured this out in his early 20s.  But he's delivered some papers about this from at least dating back to '05.



So this OTR, that's the name of the protocol, Off The Record, and as I mentioned at the top of the show, it is already widely available, so you can use it in existing instant messaging clients.  You would obviously need to use it at each end.  And in fact it refuses not to have the other end being used if it's being used.  The site where all of this can be found, and links, is Ian's site, which is Cypherpunks.ca, C-y-p-h-e-r-p-u-n-k-s dot ca, Cypherpunks.ca.  And /otr, sorry, slash Off The Record.  I think if you just go to Cypherpunks.ca, it tells you you need login credentials, and so you want to go to /otr, which is a non-protected directory on that server.



So Ian I looked at, like, so who is this guy.  For three years in high school, so for I guess his last three years of high school, he was a member of Canada's team at the International Math Olympiad where successively he brought home a bronze, a silver, and a gold medal.  He got his bachelor's in pure math from University of Waterloo in '95 when he was 22 years old, and that's when he uncovered the crucial flaw in Netscape Navigator's SSL random number generator.  This is the random numbers that protect the choice of key when you're negotiating your symmetric cipher, and we all know that crypto needs really high-quality random number generators.  It turns out that Netscape Navigator's wasn't very good.  We've talked about that on podcasts in the past.  This was Ian who found this.  Then he went on to get his PhD at Berkeley with a thesis titled "A Pseudonymous Communications Infrastructure for the Internet."  Today he's back in Waterloo as an associate professor and university research chair, and teaches some courses every quarter in security and privacy.



So, okay.  So what is secure chat, and how does that differ from, for example, secure email?  What's the problem with secure email?  Turns out there are some characteristics of secure email which you may not want in chat.  For example, the way - we're familiar with PGP.  And in general we're familiar with the typical secure crypto technology.  Often in crypto protocols we talk about actors Alice and Bob, you know, A and B.  And so Alice and Bob are our two guys.  And so, for example, Alice and Bob each have public key pairs.  And we're talking about the normal PGP model, the traditional protect your email communications.  So they generate a public key pair.  They keep their private keys private, and they make their public keys widely known.



And Alice wants to send Bob a message.  So she uses her private key to sign the hash of her message.  And since only she has her private key, then only she is able to sign the hash of her message.  So then, after signing it, she knows she's going to send it to Bob, and Bob has published his public key.  So she uses his public key to encrypt the key that she uses to encrypt her message and sends that off to Bob.  Well, only Bob knows his private key.  So he's the only person who's able to decrypt the key that Alice used to encrypt the message.  So he uses his private key, decrypts the key that Alice used, then decrypts the message.



Now he wants to authenticate that it's from Alice.  So she signed the message with her private key, which only she knows.  So he verifies the signature using her public key.  And if it verifies, he knows that only the matching private key could have been used to sign it.  So that's our standard, here's how we authenticate and we encrypt, that is, we get privacy in something like PGP.  That's the technology.  And so, like, okay, that's everything we want; right?  Well, maybe.  But we can do better than that.



And that's what these guys recognized when they created this notion of a secure chat protocol because, what if Bob's computer was grabbed by a bad guys?  Maybe by criminals, by competitors, or I don't want to call the FBI "bad guys," but the point being that these two people, Alice and Bob, want to keep their communications private for whatever reason.  So if the computer were subpoenaed by a three-letter initial organization or grabbed under the Patriot Act...



LEO:  The NFL?



STEVE:  [Laughing]  Right.



LEO:  CIA.  NSA.  FBI.



STEVE:  NSA, CIA, FBI, one of those guys.



LEO:  Yes.



STEVE:  Then the point is that all of Bob's keying material can be recovered, and then they're able to do everything that Bob was originally able to do.  And that's the key, originally able to do.  So that means that they can decrypt all of his past messages to learn their content.  So there goes their privacy.  And they can also learn that Alice provably sent them because the same strength of authentication that operated at the time the message was received persists.  And that's key.  So they not only know what Alice sent, but they can prove she sent it because Alice's key is public, and only somebody who had the private key could have signed those messages.  And that's absolute mathematical certainty.  So this is a problem.  We can do better.



So imagine just a chat, a conversation in a quiet room.  Alice and Bob talk.  No one else can hear them.  So they have privacy.  No one else knows what they say.  No one can prove what was said, not even Alice and Bob, after the fact.  Their conversation itself is ephemeral.  It's happening, and they're each present, nobody else is, and they can assert whatever they want to, but that's not proof.  So we say that such conversations are "off the record."  I mean, there's even legal standing for an off-the-record conversation.  You have an off-the-record conversation with a reporter, and that means something legally.  He's like, you're not recording this, this is off the record, not for attribution, blah blah blah.



So how do we achieve that, a different set of goals than, for example, secure email?  We want a secure chat.  So what does that mean?  That means a technology we've discussed before known as Perfect Forward Security.  That's the term used where no subsequent disclosure of cryptographic keys can disclose anything that was previously encrypted under those keys.  So that's very cool.  That's not what PGP has.  PGP does not give you perfect forward security.  As we said, if Bob's keys got loose, or Alice's keys got loose, their conversations are decryptable.



So we need something which is ephemeral, something which is not going to last, on purpose.  It's there long enough for the conversation, but inherently not long enough for a record.  But the other thing which these guys have done which is very cool is deliberate repudiable authentication.  You want to be able to repudiate the dialogue, meaning that you want to be able to say, "I didn't say that," and for there to be no way for anyone to prove you did.  Which, again, that's what a conversation between two people in a quiet room with no eavesdropping gives you.  Even the other person, the other party in the communication can allege that you said something.



LEO:  I repudiate you.



STEVE:  You can deny it.  You can repudiate that assertion.  So we're not talking about this casually, though.  We want this in, like, technology.  Okay.  So Perfect Forward Security means, technically, that a future key compromise must not reveal past communication contents.  So we do that by using so-called "ephemeral" or short-lived keys.  And what's cool about this dialogue, that is, this protocol, is they are constantly negotiating new keys and discarding the keys they have just used.



It turns out that what they use is a Diffie-Hellman key exchange, which we've also discussed in the podcast in the past.  That's the cool concept where it doesn't matter which sequence you exponentiate in.  They each create random numbers.  They raise a prime number to this random number power.  They take the result mod another prime number, keeping just the residue, just the remainder, essentially.  That they send to the other person.  And the other person does the same thing and sends their residue to the other person.



So they exchange their residues.  Then they each do the same thing again.  And they arrive at an identical result.  Yet nobody monitoring the conversation, nobody intercepting this exchange of residue can recreate this common number they got because each of them keeps their own secret.  They only exchange the residue from the use of that secret.  And that, because of taking something to a high prime power and then taking the modulus to another prime, all you get is the remainder.  That's one of these hard problems.  You can't go backwards.  Like a hash that throws away lots of information and distills it, this is a different kind of distillation process.  But it's very fast to do.



So this Diffie-Hellman exchange you can do per message on the fly, which is exactly what these guys do.  Every time, as you're chatting back and forth in the chatroom, each side is continually generating another Diffie-Hellman exchange key and sending it along with the chat payload to the other side.  They're always keeping the current and the next key present.  But they're always retiring and, like, deliberately deleting, they're overwriting in memory and deleting the previous key.  So they're constantly retiring the previous negotiated keys.



Also, there is a public key technology here because the one thing the Diffie-Hellman key exchange doesn't do is authenticate.  Notice that, if there was a man in the middle, he could exchange keys with Alice and then exchange - or exchange mod residue with Alice and turn around and exchange modulus residue with Bob and set himself up as, you know, pretending to be each other for the other and insert himself in the middle.



So you do use, in this protocol, and it's spelled out, there is a public key component where they use their public key only for authentication, not for signing.  And that's the key.  The mistake, such as it is, that PGP makes is that Alice signed her message using her private key, so it was non-repudiable.  Someone could say this came - this was signed by Alice a month ago.  Doesn't matter that it was a month ago.  She signed it.  So, and it's because she's using her private key of her public key pair to do the signing.  This protocol specifically does not do that.  What this protocol does is sort of interesting.



Once you've got this key agreed, they hash that to get the encryption key, and then they hash that again, that is, they hash the encryption key to get, so it's derivative, to get a keyed hash.  We've talked about keyed hash, so-called "message authentication codes," MACs.  The idea is that a message authentication code is a keyed hash which is like a digital signature that is also based on a key.



So since both sides have - they've used Diffie-Hellman to exchange and get a big key.  They then hash that to get the encryption key, which they'll encrypt their messages to each other with.  And remember that they are, on the fly, they're discarding these.  So those do not persist.  Which means that no future compromise of anything they do, even other conversations with other people or the same people, that will never allow previous conversations to be decrypted because this is per event keying, essentially.



But how do you get authentication?  How do you know this is really from each other?  You've got - I would say, well, the fact that you can decrypt it and get something meaningful, only somebody who had the key could encrypt it, but that's not good enough for cryptographers.  They want an actual authentication.  So you hash the cipher key to get this so-called - the MAC key.  And they each do that.  So they each have the same MAC key, the message authentication key.  And so they simply hash their message with the same message authenticate key, and append the result to the message, which they then encrypt and send to each other so they can provably authenticate.



But notice what happens.  Since they're using the same hash, they're not using each other's signature.  They're deliberately using the same hash.  That's exactly like Bob making something up that he says Alice said.  But if it's in this communication, he had the hash.  And that's all you - and he had the cipher key, meaning he has everything necessary to forge a message from Alice.  Meaning that you can demonstrate mathematically that, unlike PGP, where only the other person can be shown to be the provable creator, this Off The Record protocol creates identical cipher material on each side, making them equal in the conversation.  Meaning that there is no way for Bob to ever assert that Alice sent him something because he has an equal ability to create the same message that Alice sent.



And then they go - these guys go one step further, and that is, as they are retiring the cipher keys, they're always creating new ones.  And as soon as they receive a message under the new key, they overwrite and discard the previous one.  They also send, they deliberately send the previous message's hash key as part of the following message, just to sort of put it out there in the public, to sort of further say anybody who wants to can forge the previous message.  They can't forge the current one.  They can forge the immediate previous one.  And so they attach that authentication key just to sort of thumb their nose at anyone trying to make a case from the data which has been exchanged by deliberately giving away everything necessary to forge the previous message.  And that's Off The Record protocol.  Simple.



LEO:  Yeah.  While you were doing this we had a kind of a back-channel chat going, and I started it in Chrome, and I exited the Chrome chat.  The chat persisted and then went into the Mac app, and everybody's still in there.  And it's pretty nice.



STEVE:  Yeah, well, so that's an implementation which I can recommend.  The guys that are doing it have gone through a full audit.  They had a full code audit.  All of their code is open source, available for people to look at.  It's also multi-language.  They've got, I don't remember, it's like 30-some-plus languages.  Even Esperanto.  It's like, what?  Who actually speaks Esperanto?  I guess there actually is a community of...



LEO:  I don't think there's, like, native Esperanto speakers.



STEVE:  No, well, apparently there are people who are...



LEO:  There are people who embrace it.



STEVE:  Okay, they're well-embraced Esperantans, yes.  So, yes, you can use Esperanto, if you wish.



LEO:  Awesome.



STEVE:  For Cryptocat.  Anyway, so I know our audience.  There will be people who love the idea of being able to use either existing chat clients, for example, when I get into the TWiT chatroom, I use XChat as my little Windows chat client.



LEO:  Love it, yeah, yeah.



STEVE:  Yeah.  XChat supports this protocol.  XChat supports Off The Record protocol.



LEO:  Oh, that's neat.



STEVE:  And so you could use XChat.  And also there are a number of Jabber clients.  And so this is Jabber compatible.  Is there something called Pidgin?



LEO:  There's Pidgin, which is a multi-client or multi-protocol client for Windows.  And, I think, for Linux.



STEVE:  And this is also, it is a Pidgin plugin.  There is a plugin for Pidgin.



LEO:  Irssi supports it, as well.  There are quite a few chat sites.



STEVE:  Yes.



LEO:  Yeah, that's good.



STEVE:  Yes.  So anyway, so now, I mean, this is the technology.  The technology is nailed.  And as I said, I know our listeners.  Among our population here are people who just, I mean, actually there's something cool about just, even though you don't need it, just knowing that this thing is so insanely bulletproof that nobody can eavesdrop on it, unlike Skype Chat, we know, which Microsoft is logging in the clear and has the ability to send us the history on a new machine that is set up, so obviously they have our chat.  Just the idea that you could have a point-to-point conversation with absolute security in a browser plugin, as we've said, Chrome, Firefox, and Safari.  So that's it.



LEO:  It's neat, yeah.



STEVE:  Yeah, they nailed it.  They really got it.



LEO:  Yeah.  So you can download it, but you could also use it as a plugin in existing chat clients.



STEVE:  Yup.  And again, it's Cypherpunks.ca/otr, for Off The Record.  In fact, I think in the PDF I sent you I called it OTP because, of course, One-Time Passwords.  But no, OTR, Off The Record.  We're getting our acronyms confused.



LEO:  Yeah, the Cypherpunks have been around for a long time and actually are a really great group.



STEVE:  Yes, and this Ian and his gang who have put this together. 



LEO:  Well, that's neat.  Be nice if you had a plugin for Skype, but you don't.  So you just have to, if you want private chat, use something else.



STEVE:  Yeah, I think Skype, I mean, now I'm seeing commercials on, like, ads on Skype.



LEO:  Well, Microsoft is really pushing it heavily.  And, you know, but we use IRC, which is completely in the clear and open, and anything we do on our chatroom is logged and visible, and you would never expect it to be private; right?



STEVE:  No.  Also I should mention that the Cryptocat folks are very close to releasing mobile clients.  So there will be iOS and Android versions of Cryptocat also available.



LEO:  You know what would be really interesting is to see Google support it with their new Hangouts chat.  I bet you there's a Jabber plugin for it.



STEVE:  Yes, yes, there is Jabber support.



LEO:  Be really nice to see Google do that.  And if you could flip a switch in Google Hangouts to do that, boy, that would really change the world.



STEVE:  Bring down the cone of silence.



LEO:  Yeah.  Just say, yeah, call it the Cone of Silence.  That's good.  Steve Gibson does this show every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 19:00 UTC on TWiT.tv.  We want you to watch live if you can, always fun.  Then you could try out things like the Cryptocat chat.  We were - there were about 15 people saw me start it up, joined us in there.



STEVE:  Oh, cool.



LEO:  It was kind of fun, yeah.  But you can also get on-demand audio and video after the fact.  Steve hosts the smallest version, the 16Kb audio version on his site, GRC.com.  Right next to that you'll find written-word transcripts, written by a human being, Elaine Farris, so they're very good.  And so that's a great way to read along as you listen along.



While you're at GRC.com, don't forget to try SpinRite, world's finest hard drive maintenance and recovery utility, and all the freebies Steve offers.  This would be a good time to visit the Password Haystacks page, among others.  And if you have a question about anything you heard today or other shows or just something you just read online, like that Ars Technica article, Security Now! feedback is GRC.com/feedback.  And we'll answer 10 questions next week.



STEVE:  Yeah.



LEO:  If the world of security permits.  If there's no breaking news.  So Security Now! feedback is at GRC, Gibson Research Corporation, GRC.com/feedback.  Steve's on Twitter as @SGgrc.  And what else?  I guess that's about it.  If you want full quality audio or video, we've got that at TWiT.tv/sn.



STEVE:  When you went to Cryptocat, did you just go into the lobby as a chatroom?



LEO:  There isn't a lobby.  What happens, you know, I downloaded the Chrome plugin, but I also installed the Mac plugin.  If you want to see, I'll show it to you.



STEVE:  Well, there actually is a lobby.  If you...



LEO:  Ah.  Well, see, now, that raises an issue because, if you know the name of the chat, you can enter the chat.



STEVE:  Yes.  And but they also, if you click, there's a field - you have to poke around there.  But you're able to get your own information.



LEO:  Yes.



STEVE:  And you can click a button.



LEO:  You can offer that to somebody, say let's do a private chat.



STEVE:  Exactly.  But it's fun because they have, and I didn't mention this, there is a multi-party variant of this.  And so they've extended this Off The Record protocol, which is inherently a point-to-point two-party exchange, there is a multi-party variant, which they're working on.  And that's what they're using in this chatroom where you can go if you just use lobby.  If you hover your mouse over...



LEO:  So lobby can be a chatroom, as well.  So I'm in the lobby now.



STEVE:  Yeah, it's sort of a default.  I was just going to say, though, if our listeners wanted to chat with other of our listeners, it's very quiet.  I've been logged in there for a day and just, like, one or two people come in and don't say anything, and they leave.



LEO:  But that's where you would find somebody and then create a private one-on-one chat through that.



STEVE:  Yeah.



LEO:  Is that the idea?



STEVE:  Yeah, well, or you'd probably - somehow you do need to exchange your keying material off-channel.



LEO:  Ah.  So I've just posted my fingerprint, which is visible in the client, for private conversations, and then a group conversation fingerprint.  That's the one I guess we're in.



STEVE:  Exactly.



LEO:  So I'd somehow supply him with this number, this key.



STEVE:  And that would allow him to find you.



LEO:  We'd have a private chat online.  Yeah, no, it's very cool.  And then once you're in the lobby, of course, you can chat with somebody else, but you can also leave the lobby and go to another chat.  We had a Security Now! chat.  And they were fun.  There are people in there.  It looks just like IRC.  Not, you know, I mean, it's kind of rudimentary.  You can't control the font or the colors, although there's a - I found a CSS file and a resources package.  You could probably modify it and hack around.



STEVE:  Mostly it's super secure, so that's so cool.



LEO:  Yeah, it's nice.



STEVE:  Yeah.



LEO:  Thank you, Steve Gibson.  We'll see you next week.



STEVE:  Thanks, Leo.  



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#407	

DATE:		June 5, 2013

TITLE:		Listener Feedback #169

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-407.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here.  We'll talk a little bit about security news.  There's some sci-fi news, some reviews.  Steve likes to throw those in.  And your questions, Steve's answers, BitTorrent Sync and other topics, coming up next on Security Now!.



LEO LAPORTE:  It's time for Security Now! with Steve Gibson, Episode 407, recorded June 5, 2013:  Your questions, Steve's answers, #169.



It's time for Security Now!, the show that protects you and your loved ones online, protects your privacy, all thanks to the fellow we call our Explainer in Chief.  That's me, he says.  Steve Gibson of GRC.com.  How are you doing, Steve?



STEVE GIBSON:  Hey, Leo.  It's great to be with you again, as always.



LEO:  Good to see you.



STEVE:  Shouting to each other at about a 500-mile distance.



LEO:  Yeah, that's unfortunate. 



STEVE:  Thanks to Skype, where it's just like you're in the same room with me.



LEO:  Does your T-shirt say anything, or is it just blue?



STEVE:  It's the - I didn't realize this was the Mt. Fuji, this Atari logo.  It was actually Mt. Fuji.



LEO:  Which is...



STEVE:  Yeah, it's very cool, yeah.



LEO:  Nolan Bushnell was actually a really cool guy.  The word "Atari" itself is a term from the game of Go.



STEVE:  Atari, yes.



LEO:  Yeah.  So he's an interesting feller. 



STEVE:  So we have a Q&A this week, as always, great feedback from our listeners, comments, questions, thoughts, observations, worries, concerns, all the standard things you would expect from a security-oriented audience.  And some interesting news bits.  I'm going to share a couple, the meat of a couple interesting articles, and we've got a really interesting video I want to put into our record from this morning's "Today" show.  There is a mysterious new way that bad guys are opening cars with apparently zero effort.



LEO:  Oh, great.



STEVE:  Yeah.



LEO:  It's probably the more high-tech, fancy cars.



STEVE:  Oh, yeah.



LEO:  Oh, yeah.



STEVE:  Yeah.  Like I said, if it can go wrong...



LEO:  It will.  We've learned - if you've learned nothing from this show, you've learned that much.



STEVE:  It's why I love my - like I said before, I've got what I think is an '04 little 300 Series Beemer, which is coming up on 10 years old and just where I like it because I'm thinking, okay, they can't get me.  My car's too stupid to open its doors.



LEO:  You actually have to...



STEVE:  I want a dumb car.



LEO:  Think about a key.  I mean, that's such a primitive thing, this specially shaped piece of metal that has to...



STEVE:  Yeah.  The little wiggles absolutely do nothing.  I think they're just there to pacify us.



LEO:  Turn the tumblers in just such a way that the lock goes.



STEVE:  I don't think it does that anymore.  I think that mostly it just wiggles, and then there's a whole electronic communication going on.



LEO:  It's a serving suggestion.



STEVE:  Even a decade ago they'd figured that much out.



LEO:  Steve Gibson, let's see here.  What do you want to start with?  You want to start with this car thing?



STEVE:  I do.  And the reason it works for the podcast is the audio is descriptive enough that the people who are not able to see it are able to hear it because the story explains itself.  And I've also just tweeted the link [on.today.com/15ByCtB] to the story which appeared on the "Today" show this morning.  And it's very apropos to this podcast.



LEO:  They're stumped, police say, by the mystery car thefts.  I think we're going to have an ad here, so let me just, yeah, we'll just sit and watch that for a little bit.



STEVE:  Do, do do, do do.



LEO:  Dee, de do do do.  I should have started it earlier.  I should know better.  I should know better.



STEVE:  Yeah, so we'll look at this and then talk about it.  I have a theory about what's going on which appears to be more than anybody else has at this point.  But just based on the evidence.



LEO:  Well, that's the thing.  We know the symptoms.  We don't know the cause yet.



STEVE:  Right.



LEO:  Here we go.



[Clip]



SAVANNAH GUTHRIE:  We have a Rossen Reports crime alert to tell you about this morning.  A new wave of auto thefts that police, frankly, can't figure out.  Today national investigative correspondent Jeff Rossen's here with more.  Jeff, good morning to you.



JEFF ROSSEN:  Hey, Savannah, good morning.  This is a real mystery.  Look, when you lock your car, and you set the alarm on it, you think your car is pretty safe.  But as you're about to see, criminals have designed a new high-tech gadget giving them full access to your car.  Police are so baffled, they actually want you to watch this video to see if you can help...



LEO:  They've got video.  That's the thing.



STEVE:  Yes.



LEO:  Because every garage everywhere has security video now, so they know it's working.



JEFF ROSSEN:  Long Beach, California.  Watch as this thief moves in.



LEO:  So it's a late model SUV.



JEFF ROSSEN:  Approaching this locked SUV in a driveway.



LEO:  He walks up to it.



JEFF ROSSEN:  Police say he's carrying a small device in the palm of his hand.  You can barely see it.  But he aims it at the car and pops the lock electronically.  He's in, with access to everything.



LEO:  Oh, look at that.  The light comes on.  The door opens.  It says come on in.



JEFF ROSSEN:  No commotion at all.



STEVE:  Probably a nice little chime.



LEO:  No alarm.



JEFF ROSSEN:  Then his accomplice shows up...



LEO:  Wait a minute, they're doing multiple cars.  Holy cow.



JEFF ROSSEN:  ...and hits another car using that same handheld device.



LEO:  Holy cow.



JEFF ROSSEN:  Long Beach Deputy Police Chief David Hendricks is mystified.



CHIEF HENDRICKS:  This is bad in the sense that we're stumped.



JEFF ROSSEN:  You're stumped.



CHIEF HENDRICKS:  We are stumped.



LEO:  So we don't have to show the whole thing.  What do you think the - what do you think's going on here?



STEVE:  There's another example.



JEFF ROSSEN:  He says it's almost like the thieves are cloning your car remote, which is virtually impossible to do.  Here's why:  On most cars, when you hit the unlock button, it sends a code to the car.  That code is encrypted and constantly changing and should be hackproof.



LEO:  Is it a standard rolling code?  Or are they doing some...



JEFF ROSSEN:  ...figure out a way to crack it.



STEVE:  It is probably a sequential one-time.



LEO:  Right.



JEFF ROSSEN:  Jim Stickley is one of the country's leading security experts.  He's watched the tapes, and he's stumped, too.



JIM STICKLEY:  This is really frustrating because clearly they've figured out something that looks really simple.  And whatever it is they're doing, it just takes seconds to do.  And you look and you go, that should not be possible.



JEFF ROSSEN:  It's happening from California to Illinois.



LEO:  What I want to know is what makes?  What models?



STEVE:  I think he's - he's about to tell you.



MICHAEL SHIN:  I felt pretty unsafe.



JEFF ROSSEN:  That's Michael Shin.  His home security camera caught this crook breaking into his Honda Accord using a similar device.  But you'd never know it.  He looks like the owner of the car...



STEVE:  Sure does.



JEFF ROSSEN:  ...unlocking the doors remotely and silently.  The thief stole cash and an expensive cell phone.



MICHAEL SHIN:  It was shocking.  It just opens magically without him having to do anything.



JEFF ROSSEN:  Adding to the mystery, police say the device works on some cars, but not others.  These thieves try to open a Ford SUV and a Cadillac.  No luck.  But this Acura SUV and sedan pop right open.  And they only seem to strike on the passenger side.



LEO:  Oh, that's interesting.



STEVE:  Yup.



JEFF ROSSEN:  Investigators don't know why.



CHIEF HENDRICKS:  We've reached out to the car manufacturers...



LEO:  That's really interesting.



CHIEF HENDRICKS:  ...the manufacturers of the vehicle alarm systems.  And so far nobody seems to know what the technology is.



JEFF ROSSEN:  That says a lot about how sophisticated these criminals are.



CHIEF HENDRICKS:  When you look at the video, and you see how easy it is, it's pretty unnerving.



LEO:  Well, the criminals probably aren't that sophisticated.



STEVE:  Exactly.



LEO:  But they're probably buying them from somebody who is, obviously; right?



STEVE:  Yes.  There's no chance that these random schmoes who are in stealing people's cell phones and spare change... 



LEO:  Yeah, they don't look that smart.



STEVE:  And also no one is actually stealing the car.  At the top of the story they called it "car theft," and so it's car contents theft.  So this is not dealing with the ignition system, apparently.  My theory is, based on looking at the videos, that they're doing some sort of a high-energy transfer, whether it's magnetic or electromagnetic or radio.  They seem to have to get very close.  No bad guy would want to be in physical proximity if they could avoid it.  If this thing worked 10 feet away...



LEO:  They'd open the door first, right.



STEVE:  Exactly.  And a radio would allow them to do that.



LEO:  So they do have to get right up next to it, it looks like, yeah.



STEVE:  Yeah.  And we know that cars are now covered with microprocessors.  And something seems to be about the passenger side.  My guess is it's simpler on that side.  That is, there is nothing there, no other fancy electronics, not maybe as much as over on the driver's side.  Just, I mean, there's probably a network which is connecting to the mechanical door lock there.  And so they're - my guess is that this is some sort of a device which is generating a signal that is able to penetrate the relatively thin sheet metal of the car door and confuse the electronics, which is - basically it's a network controller.  All of these cars now are based on - we talked about the CAN, C-A-N, network that they run on.  My guess is they're just able to, like, overpower the normal signal and say, you've just been told to unlock yourself.  And so the door says, oh, and unlocks.



LEO:  A lot of cars' alarm will go off even if you just unlock the door.



STEVE:  Yes.



LEO:  You know, if you don't have the right key, the alarm will go off.



STEVE:  Yeah.



LEO:  So they must be doing more than just simply pulling, you know, if you were - let's say somebody left the window open, and you could reach in and pull up the lock on the door and get in.  In most cases the alarm would still go off.  So they're bypassing more than the...



STEVE:  Well, maybe...



LEO:  They're more than just a magnetic thing.



STEVE:  It may be an unshielded area where they're able to gain access to the car's network and say, we've just told you to unlock.



LEO:  I think it has to be that.  Otherwise the alarms would go off.



STEVE:  And I think, though, that it is the case that our cars are using a non-repeating, sequence-based, one-time passcode.  That's what this alarm technology is, which is why thieves even who copy the signal that your key emits can't use it again.  It's exactly like our event-based, one-time password system.  They're not doing that.  This is not a crypto attack.  I think it's actually attacking essentially underneath the crypto level at the car's network level.  So anyway, I'm on record with my guess.  I'm sure in weeks coming we will, you know, sooner or later some guy's going to get caught, and this will get out into the news.  I hope that we see a news story, and it's not all hushed up.  But as you said, Leo, bad guys are buying this somewhere online.  This is coming from overseas, and it's like, oh, get this.  And I was reminded of - you've probably seen those generic TV blasters that, like, turn off any model, make or model by sending all the off codes possible.



LEO:  Right.  I have one of those on the - the Galaxy S4 and the HTC One both have TV, seriously, they both have TV RF remote control devices.  And you could pretty much walk into any bar and turn off anything from your phone.



STEVE:  Probably use IR.  IR is...



LEO:  That's why I said.  What did I say?  IR, that's what I meant.



STEVE:  Yeah.



LEO:  Somebody in the chatroom suggested, this is an interesting thought, that it might be somehow related to the setting, and my car has this setting, that automatically locks the doors when you get to a certain speed and unlocks them when you arrive.  And if you perhaps had that setting on your car, you might want to turn off that unlock setting.



STEVE:  Well, the advice is, and at the moment I don't think there's - I didn't have any time to do any research because I just saw - this thing came in this morning.  I'm sure before long we will know what makes and models are vulnerable.  And the takeaway for the time being is, even more than usual, do not leave valuable stuff in your car because, if you've got a late-model something or other, seems like SUVs and seem to be Asian makes of cars.  I think they were Hondas and Acuras and so forth.  It didn't like the Ford or the Cadillac for whatever reason.  Maybe we just have thicker sheet metal, who knows.  But anyway, it'll be fun to see what this ends up - what it ends up being.  But, you know, protect yourselves.



So speaking of protecting yourselves, this isn't really news, but I thought it was just sort of an important reminder.  The Zeus trojan is still out and about.  I was reminded of it by Nicole Perlroth, who writes The New York Times BITS column.  And we've talked about the Zeus trojan.  That's the banking trojan.  Essentially, it seems to be unsquashable.  It is - probably because it's just so lucrative.  It is backed by, we believe, Russian organized crime bad guys.  And it is thriving on Facebook.



Apparently people are, like, posting fake Facebook profiles containing links that install the trojan in your machine.  And unlike other trojans, this thing goes stealth until it sees you doing electronic banking to one of a growing number of banks that it, quote, "supports," unquote, in which case it's able to intercept your keyboard and do pre-encryption capture.  And we've talked about this in the past.  For example, it can even modify the login forms, adding fields like Social Security number, which is not on your bank's normal form for logging in.  They add it in order to capture that information because that's valuable for resale for identify theft purposes.



So this is an extremely sophisticated trojan specializing in intercepting banking transactions and then sending this information off to organized crime groups in Russia.  And it's on the rise.  I mean, it peaked just last month, in May, largely finding, like, its sweet spot over on Facebook.  So just to - I don't know how you protect yourself from this except to keep the latest antivirus and maybe just try not to click every link that is offered.



LEO:  Usually these Facebooks, they either come in on your wall with a link, or they come in as a message with a link.  And a lot of times, I mean, in the past what we've seen is you'll get a message - from a friend, by the way, because it has to be...



STEVE:  Yeah.



LEO:  A friend who has been compromised.  And the friend's message will say something like, "Hey, I got video from you last night; oh, man, are you in trouble," and a link.  And the link, of course, is malicious in some form.  Sometimes what it does is it pulls you to a page that looks like YouTube, but then it says, oh, you need to update your Flash.  And then you, because we all see that all the time, go, yeah, yeah, yeah, update it, update it.



STEVE:  Probably true.



LEO:  And of course what you're not getting is Flash.  You're getting the malware in a package that looks like a Flash installer.



STEVE:  Yes.



LEO:  So, yeah, be careful about links.  Be careful about installing software from those links, especially.



STEVE:  Yeah.  So the EFF, our illustrious defenders of public trust focusing on the Internet...



LEO:  Love them.



STEVE:  I know.  And we got a - they actually pop in here a couple times because they're back taking bitcoin once again.



LEO:  Oh, really.



STEVE:  Yeah, with a really cool story.  But this one first really caught my eye.  The story was titled, from the EFF, "Computer Scientists Urge Court to Block Copyright Claims in Oracle v. Google API Fight."  The subtitle was "Dozens of Industry Leaders Argue APIs That Are Open Are Critical to Innovation, Interoperability."  I'm just going to share the story:



"Dozens of computer scientists urged an appeals court today" - and this I think was May 30th, so just last week - "to block the copyright claims over application programming interfaces in the Oracle v. Google court battle," and this is over Java, "arguing that APIs that are open are critical to innovation and interoperability in computers and computer systems.  The Electronic Frontier Foundation represents the 32 scientists - including leaders like MS-DOS author Tim Paterson and ARPANET developer Larry Roberts...."



LEO:  Tim Paterson's still around, wow.



STEVE:  Yeah.



LEO:  Wow.  Wasn't he Seattle DOS, CDOS?



STEVE:  Yes.  That's where Gates bought DOS...



LEO:  Yeah, bought it from him, yeah, wow.



STEVE:  ...from Tim, yeah.  Didn't pay him very much.



LEO:  No.



STEVE:  That's another story.  Anyway, "...in the amicus brief filed in the U.S. Court of Appeals for the Federal Circuit today.  The group urges the court to uphold a decision from U.S. District Judge William Alsup finding that APIs are not copyrightable," which that's good news, "explaining that Oracle's attempt to over-extend copyright coverage in its case against Google was irreconcilable with the purpose of copyright law and the nature of computer science.  "'The law is already clear that computer languages are mediums of communication and aren't copyrightable.'"



LEO:  Yay.



STEVE:  Yes.  "'Even though copyright might cover what was creatively written in the language, it doesn't cover functions that must all be written in the same way,'" that's exactly the right language, "said EFF Staff Attorney Julie Samuels.  'APIs are similarly functional.  They are specifications that allow programs to communicate with each other.  As Judge Alsup found, under the law APIs are simply not copyrightable material.'



"Furthermore, as the scientists explain in today's brief, the real-world ramifications of copyrighting APIs would be severe.  All software developers use APIs to make their software work with other software.  For example, your web browser uses APIs to work with various computer operating systems so it can open files and display windows on the screen.  If APIs are copyrightable, then developers can control who can make interoperable software..."



LEO:  Oh, I love that.



STEVE:  "...blocking competitors and creative new products."



LEO:  Yeah, yeah, thank you.



STEVE:  And then again, "'Without the compatibility enabled by APIs that are open, we would not have the vibrant computer and Internet environment we experience today, with new products and services routinely changing the way we see and interact with the world,' said EFF Fellow Michael Barclay."  Continuing, "'APIs that are open spur the development of software, creating programs that the interface's original creator might never have envisioned.  We hope the appeals court rejects Oracle's appeal in this case to protect technological innovation.'"



And, you know, hear, hear.  So what's happening really does upset me because Oracle is trying to close the Java API against Google.  Yet the entire value of the Java API has been its openness.  The only reason that Java even matters today, that it's on those three billion devices that we keep being reminded of painfully, is because it was an open interface, and anyone could write to Java who wanted to.  Now Oracle is trying to say to Google, oh, no.  People can write to the API, but we're not going to let you implement the API.  They're trying to maintain control of it.  And so that's just - that's really bad news.



There, for example, there are - it's like FreeDOS that is a DOS clone.  It's completely written from scratch, no Microsoft copyrighted code in there.  Yet it implements the DOS API, allowing DOS-generation applications to run just as if they were on MS-DOS.  And there's something that's called ReactOS, which is a written-from-scratch Windows API clone that I've been watching for a few years, and it's coming along.  And then we have POSIX and the UNIX API.  I mean, these interfaces have to be kept available and open.  And really it's the creator of it trying to have it both ways.  They're trying to create the benefit of the initial openness and then come along later and say, oh, nobody else can use it.



So this is important, and I'm really glad that the EFF is there to establish some precedent.  And, I mean, I'm almost glad that Oracle and Google are having this battle now because we do need some legal precedent established, hopefully in the correct direction, going forward.  Because what we're seeing is we're seeing that innovation is slowing down.  Major organizations like Microsoft and Google, I mean, they've been on the other side of these things, too.  And Oracle, they're now trying to use the copyright system and the patent system to obtain material wealth in absence of ongoing innovation.  And we need to keep this in perspective.



So we talked last week, one of our top of the podcast stories, I went into detail into the announcement that Google had made about the way they were going to be changing their certificates.  And what has popped up on the news, actually Sophos is the one story that I saw, but it looks - I think a number of people carried it, was that my version of IE, IE8, which is the last one I am able to run on XP - now, this is not a big problem for me because I don't use IE.  I use my Firefox, or I use now Opera I've really kind of fallen back in love with because it's so lean and mean, or Chrome.  I mean, IE is the last browser that I will use.  It does not have Server Name Identification, SNI.



And that's that feature - someone tweeted since last week, and I didn't confirm this, but the tweet was that SNI was actually relatively recent.  It was added to the SSL/TLS spec in '06, says the tweet.  I'm not stating that myself, but that's what the tweet says.  If so, it's like well, okay.  I guess recent is variable.  That's seven years, which ought to be enough.  It's not enough for IE, but it is enough for everybody else.



So any state-of-the-art browser will already support this SNI.  That's the thing that allows multi-hosting on a single - multi secure hosting on a single IP, server name identification, SNI, where that, as I mentioned it last week, that first packet that the browser sends identifies the site that is the domain name of the server it wants to connect to at that IP.  It has to be in the first packet because the second packet, which is the first packet being returned by the server, has to be the certificate for that site.  So the browser has to identify the site it wants immediately so that the certificate can be chosen from an array of them that are available to a multi domain hosting server, all at that one IP.



Normally, it's okay to wait until the protocol-level transaction underneath, that is, in the secure tunnel after the SSL/TLS transaction has been set up.  Not, however, if you've got multiple domains all sharing a single IP because the server doesn't know which one of the many the client wants.  Well, so it turns out XP has no IE available to it which has SNI enabled.  But if you're running Firefox on XP or Chrome or Opera, that is to say, anything but, you're fine.  And this would only be a problem with this one particular domain on Google.  Notice that there's a lot of XP still around.  Nobody's running IE later than 8 because you can't.  And this doesn't seem to be a big problem already.



So it will start to be a problem for this particular set of people and multi domain hosting, and it just sort of came up because of Google's mention of it.  So I'm staying on XP.  Actually, when I rebuild my system, I'll rebuild my system, and I will absolutely be switching to 7.  I'm completely comfortable now with Windows 7.  So I'll be...



LEO:  Oh, aren't you a daredevil.



STEVE:  I'll be catching up.



LEO:  Have you ever used Windows 8 at all?



STEVE:  Actually, no.  I have never touched it.  I just know it's bad.  Actually I've listened - I've watched you trying to use it.  There was that one show with Paul...



LEO:  Yeah, Mary Jo, yeah...



STEVE:  And Mary Jo where you were, you had it, and half of the show was, okay, now, wait a minute.



LEO:  Yeah.  What, uh, I do what?  I did this?  Huh?



STEVE:  I go on the right, and I slide over to the left?  What?



LEO:  Oh, dear.



STEVE:  And then I did love - I did love that great - Chris.



LEO:  Chris Pirillo showing his dad, yeah.



STEVE:  Yes.  And the dad, very unscripted, finally saying, are they trying to sell Apple Macs?



LEO:  [Laughing] I should ask Chris if his dad - what his dad ended up using.  That's a good question.



STEVE:  Never, never had...



LEO:  Never, never, never.



STEVE:  Hopefully I won't have to.  I'll just...



LEO:  Skip ahead.



STEVE:  It's the every other OS phenomenon.  I mean, they ought to just stop, Leo.  Aren't they done?  I mean, what more do we need?



LEO:  I do wonder, sometimes, if there is - at this point you're changing for change's sake.  Now, Office, that happened with Office, like, eight generations ago.



STEVE:  Oh, yes.  When they dropped the menu and went to that whole...



LEO:  It's change for change's sake because we have to give you a new version or you won't buy it.  Well, there's a fairly significant revision coming in the fall that might make Windows 8 more tolerable.  We'll see.



STEVE:  Is that the 8.1 or Windows Blue or something?



LEO:  Yeah, yeah, Windows Blue, 8.1.



STEVE:  I only know about it because I keep listening to you and Paul talking.



LEO:  Thank you.



STEVE:  And Mary Jo.



LEO:  We're glad you do.



STEVE:  So I just wanted to mention that LinkedIn has finally joined Twitter and Evernote offering second-factor authentication.  LinkedIn has had big problems in the past with people hacking accounts.  So they've added second-factor authentication.  The bad news is, I don't know what it is with Twitter and LinkedIn, that aren't going the right way.  Oh, by the way, I've also been loving listening to you loving the whole Google Authenticator style...



LEO:  Oh, that's so great, yeah.



STEVE:  I mean, you know, we talked about it on this podcast, what, six or seven years ago.  We were ahead of the game, of course.  That's our job.  And now here it is in the real world.  And, I mean, it is really cool, to be able to bring that up and have these ever-changing numbers. 



LEO:  Fabulous.



STEVE:  I just - and so the problem is people are reporting that they're now getting SMS spam after using LinkedIn's second-factor authentication.



LEO:  Oh, tell me it isn't so.



STEVE:  Hey, I know, I know.  And weren't you also complaining that there was - I think after you used - you set up Twitter's, and you started getting, like, unwanted stuff.



LEO:  Yeah, that's not - and I wonder, it may be the same thing with LinkedIn.  What it was is, in order to use Twitter's authentication, you had to register a cell phone number with Twitter.  And by default...



STEVE:  Of course, to get SMS.



LEO:  Yeah.  And by default, Twitter then starts sending stuff to your cell phone, like messages.  And you could turn that off.  I just hadn't had a cell phone registered with it yet.



STEVE:  Okay.  Okay.



LEO:  And maybe that's what happened with LinkedIn.  But that, again, argues for using Google - or not, it's not Google, but using an authenticator, because then you don't have to set it up for a cell phone.  You don't have that whole issue.  And I'm not giving you anything.



STEVE:  TOTP, Time-based One-Time Password, TOTP.



LEO:  Yeah.  And then I could have one app that had it all.



STEVE:  Right.



LEO:  You know, Facebook uses their own authentication built into the Facebook app.  That's their way of making you have it.  Twitter you have, you know, it sends you a text.  It's the only way to do it.  I'm not sure what else LinkedIn does.



STEVE:  Yeah.  So I'm hoping that Twitter and LinkedIn will get with the plan.  Maybe they just feel that requiring people to have an app is too high a bar, and they just want to ease them into it, figuring that, well, everybody has a cell phone, we'll just send them an SMS message.  Isn't that just as good?  And it's like, well, okay.  The good news is were moving towards a standard.  We're really seeing everyone rallying around.



Oh, and by the way, I had my first experience using Pay With Amazon, worked frictionlessly, a couple days ago.  I was very pleased.  I went somewhere, it was JR.com, the big electronics retailer.  And there it was under their button, was Pay With Amazon.  It's like, ooh, cool, let me see how this works.  And it was fantastic.  It was as good as using the Google Pay service.  So I was very pleased with it.



LEO:  Makes sense.



STEVE:  Now, EFF.



LEO:  Yes.



STEVE:  We'll remember with a little sadness back in 2011 they stopped accepting bitcoin donations.  And it was - I was only sad because it was them pulling back from - okay.  Their feeling at the time as they expressed it was, and we covered this on the podcast, they worried it was being seen as an endorsement of bitcoin.  And they felt uncomfortable then making that endorsement.



However, that Treasury Department financial document a few months ago that we also talked about, that we were overjoyed about, that solved their problem.  That said to them, okay, users of bitcoins, which is different than people who are exchanges, we know that that can be apparently problematic if you're not official with the U.S. Treasury, that apparently users are okay.  So they have resumed accepting bitcoin donations through a service called BitPay, which is one that they have chosen.



Now, the headline was interesting because they said, "This week, the Electronic Frontier Foundation received a generous donation of 726 bitcoins," worth currently $95,000 and some change in U.S. dollars.  And then they said, "See the blockchain transaction here."  And they gave a link with the whole bitcoin crypto deal at Blockchain.info for the transaction.  And they said, "This is in addition to over $7,000 USD we've received through bitcoin donations in the last couple of weeks."



So what's interesting about this is it's their own bitcoins coming back.  What happened was, back in 2011, when they decided to suspend accepting bitcoin donations, they had a repository of bitcoins.  And I think I remember the number at, like, 37 or 35,000 back then, BTC, which they donated to the Bitcoin Faucet.  Just figuring, hey, you know, we're not - we don't feel comfortable exchanging this for dollars.  So, but we want to support the community, so we're going to dump this on the Bitcoin Faucet.  And we talked about the Faucet back in our original Bitcoin podcast.



LEO:  I interviewed the guy who did it.  We had a Triangulation episode with him.



STEVE:  Cool.



LEO:  Yeah.



STEVE:  Yeah.  And that was just...



LEO:  It was just to prime the pump.



STEVE:  It was, yes, it was a site you could go to, and it just gave you a piece of a bitcoin.  Just like, here, here's a bitcoin, just to kind of get you started so you could kind of see.  It was cool.  So what happened was there had begun to be a problem with the Faucet and fraud.  People were attacking it and trying to pursue and trying to perpetuate fraudulent transactions.  So the guy closed down the Faucet.  And he said, okay, sorry, but we can't do it anymore.  Apparently there's a Minecraft Faucet somewhere.  And he gave a bunch of bitcoinage to - he donated...



LEO:  Interesting.  We're talking about Gavin Andresen, by the way...



STEVE:  Yes, yes.



LEO:  Who's now chief scientist at the Bitcoin Foundation.  That's why...



STEVE:  Oh, good.



LEO:  Yeah.  He's like the frontman.  He's one of the few people who's ever emailed with Satoshi Nakamoto.  I think he might be Satoshi Nakamoto in a Keyser Sze kind of way.  But I don't know.



STEVE:  So anyway, so in his distributing funds, the Minecraft Faucet got some.  He also kindly paid off some of the major mining groups that took a financial hit during that recent fork in the bit chain where there was that chain fork that we covered on the podcast.  He helped to give them some relief.  And he gave 700 of the bitcoins essentially that the EFF originally donated back.



LEO:  Wow.  Gavin.  Good man.



STEVE:  So it's now worth $95,000.



LEO:  That's putting your bitcoins where your mouth is.



STEVE:  Very cool, yeah.



LEO:  For him.



STEVE:  And this is totally random, but I thought it was fun.  There is an iPad app, and it's apropos to the podcast, an iPad app called the iHeart Locket Diary, which the picture is adorable.  It shows, I don't know, maybe a six or seven or eight year old youngster, female, a girl, wearing her locket around her neck.  This thing produces a coded audio sequence which the iPad can hear and unlock her secret personal diary.



LEO:  What?  Ohhhhhh.



STEVE:  And I just think that's really neat.



LEO:  [Vocalizing coded audio sequence a la R2-D2]



STEVE:  Yup.  And so it's her little techno secret that she wears around her neck, so very much like an old-style diary key.



LEO:  That is so cool.  I'm getting one of those.



STEVE:  There's another button that allows you to hide or reveal your secret writing.  So you can press the other button, and then again [vocalizing], and then your writing mysteriously - your secret writing appears, allowing you to hide your annotations from Mom and Dad.  So I just thought that was way cool.  Just a neat...



LEO:  I want.



STEVE:  A neat, neat application of technology.



LEO:  I love it.  That's great.  That is so cool.  I love it.



STEVE:  I thought you would like that one.  And now we have the dumb security story of the week.  Arguably, unlocking passenger doors without needing a key or needing some sort of a weird thing might be dumb.  This is arguably dumber.  This is courtesy of our frequent contributor Simon Zerafa.



This was a posting on a web app security group:  "Our state's Governor's Office recently started a health clinic for state employees.  This clinic, run by a third party, set up a website to allow users to set up appointments at the clinic and to provide private health information.  When setting myself and my family members up, I was startled to receive a warning saying that the password I wanted to use was not available."



LEO:  [Laughing] You mean somebody else used it?



STEVE:  "And I needed to choose another one."



LEO:  What?



STEVE:  "Understand that this wasn't because I failed to meet the password criteria, but because that particular password was already in use."  And then he explains:  "In fact, I wanted to use the same password for my children's accounts, since they are under age, and I will be setting up their appointments anyway."  And it sounds like he chose a very secure password, very random, lots of random gibberish.  And so he says, "I entered the same password as for my account," so it accepted it the first time for him.  Then he received, he says, "and received this error message, 'That password,' and then it put it up on the screen...



LEO:  No.  It showed it to him?



STEVE:  Yes.  So they had stored it.  They had not hashed it.  There it was, "'...is already in use.  Please choose another.'"  He says, "I raised my concerns about this to the third-party provider, and was told they are requiring 'unique usernames and passwords for enhanced security.'"



LEO:  Oh, yeah, that makes it more secure, sure.  Especially when you show it to them.



STEVE:  "I replied that, since the web application is helpfully telling me that a password is already in use, and would also tell me that a username is already in use, I could develop a dictionary attack to build a list of known passwords and known usernames, put the two together..."



LEO:  Unbelievable.



STEVE:  "...and be able to access accounts.  This would provide me with Social Security numbers and health-related private information about other users.  I raised this issue with our state security officer, who told me that they were told not to comment.  Am I out of line here?"



LEO:  Oh, wow.



STEVE:  "I'm a UNIX server admin, not a security pro, so I am certainly not up to date on best practices for web apps.  But this 'unique password' idea strikes me as a severe problem."



LEO:  It bothers me.  What do you think it means?  So I don't - what would they be using as a password technology if they couldn't have duplicates?



STEVE:  Well, okay.  They could be using - they're not.  They're not doing any of this.  But, like, trying to give them, like, the benefit of the doubt, they could be using a salt and a hash and see a collision of the hashes and then say this password is in use.  But again, who cares?  They shouldn't care is the point.  But we know they're not doing that.  Nor are they using a unique salt because then even the same password with unique salt would give them - would not give them the same hash, in which case they could not detect a duplicate password, and passwords would automatically be allowed.



But they're not doing that.  And the fact that they are, later, when a separate account is being set up, later - oh, and obviously with a different username, because otherwise you'd be - you would have a username collision.  So they are clearly storing the passwords in the clear because that's the only way they could be returning it - well, okay, wait a minute.  That's not true.  They could be holding it...



LEO:  Yeah.  They could have run the hash on it, saw the hash collision, and then have just been storing that password because you just entered it.



STEVE:  Yes.



LEO:  And said, hey, you know, this thing, we already have that one.



STEVE:  So as a user convenience they might have been sending back to you the password you just gave them because there was a hash collision.  And so they're saying it's in use.  So maybe...



LEO:  But what would the harm be in a hash collision?



STEVE:  None.  Zero.  Leo, no.  I mean, it's, you know, you want, I mean, we know how many people use...



LEO:  First of all, they're highly unlikely; right?  How likely is a hash collision?



STEVE:  Well, presum- well...



LEO:  I guess for monkey123 it's going to happen.



STEVE:  Exactly, yes.  So the hash collision is as likely as the password being hashed, assuming that they're either unsalted or a static salt and not a dynamic salt per account.  It'd be nice, what you'd like to use is like a hash based on the account name, which then hashes the password, and then they're going to all be different.  So then you would not detect a collision.  And there's no - no one has ever - no one before has ever seen a requirement that your password be unique.  Which tells you this not a good idea.



So, yeah, if anyone is listening who happened to have implemented that system or is at the state where this person was, change this.  This is bad.  And we do know that word of these bad things gets out.  I've been very impressed by the response of banks, most banks, in the wake of the SSL Labs revelation that their SSL security rated an F.  Many of them have immediately fixed their servers because it's not hard to do.  It's a few minutes of some admin just removing SSL 2 support, which is typically a config file, and moving one cipher up to the top in order to prevent you from having the BEAST attack.  No biggie.  Just have it done.



LEO:  Here's an interesting thought.  Somebody in the chatroom said, you know what they're doing?  They're using your password as the database key, and they can't have duplicate database keys, so they want each password to be unique.



STEVE:  Could be.  That's, actually, that's not a bad thought.  The actual collision creates a technological problem.



LEO:  A technical difficulty, yeah.



STEVE:  Yes.



LEO:  Like that.  Whatever it is would be bad.



STEVE:  Wow.



LEO:  Unbelievable.  Unbelievable.



STEVE:  So a little sci-fi movie and TV news update.  Jenny and I saw "After Earth."



LEO:  Oh, boy, are the reviews bad.  12% on Rotten Tomatoes.



STEVE:  I know.  12%.  I think it's a five dot something on IMDB.  We didn't hate it.



LEO:  Because you missed it.  What, did you go?  You really went?



STEVE:  Oh, no, we saw it, we saw it.



LEO:  And you didn't walk out on it.



STEVE:  Knowing how bad it was.  The problem it had, I mean, it wasn't wonderful.  It wasn't a state-of-the-art killer amazing sci-fi movie.



LEO:  This is the Will Smith/Jaden Smith adventure.



STEVE:  Yes, yeah.  And afterwards Jenny was puzzled as to why it had been so roundly hated.  And I said, well, what I read, because I read all the hateful reviews first, and the people who most disliked it were upset that there was no surprises.  That is, you did know, and this is not a spoiler because, I mean, it spoils itself.  You know right off the bat what the movie is about, and so what the kid's mission is, because Dad's legs are broken, and the kid's got to go on a long trek.  And so that's the movie.  But it was, you know, it wasn't horrible.  So for what it's worth, I don't if it's worth what movies cost these days because they're getting pretty expensive.  So I'm still liking "Oblivion" as my really, really, really enjoyed it movie of the summer.  And I can't wait for "Man of Steel."  That's my...



LEO:  Yeah, I'm excited about that one. 



STEVE:  Breathless for that one.  We also saw "Now You See Me," which was with the magic act with Jesse Eisenberg.



LEO:  Yeah, I want to see that.  Was that good?



STEVE:  Something felt missing.  I think it's one of those where the movie was too long, and the editors really had to cut out for length.  As it was, it was over two hours long.  I think it was like two hours and 12 minutes or something.  But it was just - it felt kind of uneven.  It's like, wait a minute, how did we get here?  We just sort of seemed to miss a big chunk.  And it was like, yeah, it was okay.  Seemed to be heavy on sort of fancy special effects, but light - and, like, just sort of drama and music.  I don't know, I was less impressed by it than I was hoping to be.



LEO:  Too bad.  That sounds like one that I'll wait for DVD.



STEVE:  I think you can.  And I wanted to tell people who have been following this series, "Falling Skies" restarts this weekend, for its third season.  And it's one that has held me where both "Revolution" and "Defiance" have lost me.  What we're sort of seeing are these attempts at sci-fi where they're desperately trying not to spend any money, and unfortunately they're succeeding, generally.  So they're just sort of cheesy.  They've got some special effects, but they're not very good.  And they're trying to use people who are not - can't act, really, and trying to create drama from the setup.



And, eh, I just - but I'm now watching the end of the second season of "Falling Skies" - it came out on DVD, naturally, just before the third season starts - because I had stopped watching it.  But then a review that I read said that, you know, the second season really did pick up and got really good.  And I have to say I'm having a hard time not watching it.  I mean, I'm really enjoying Season No. 2.  So for anyone who may have given up on it, or if you've been waiting for Season 3, I wanted to let people know it is starting.  And you can find it at the torrent closest to you, whatever that may be.  It's on TNT.



LEO:  Or TNT, which is a - isn't that a free channel?



STEVE:  Yeah.  Yeah, it's available anyway.



LEO:  Maybe it's a paid cable, I don't know.



STEVE:  And so rather than talking about SpinRite this week, because everyone knows about SpinRite...



LEO:  They'd better.



STEVE:  It recovers disks and kicks butt and so forth.  I just - this sort of just - I was tickled by this because as I was going through the mailbag yesterday, I saw, "Curse you, Steve Gibson."  And I thought, well, okay, that'll get my attention.



LEO:  Yeah, that works.



STEVE:  It's like, what?  And so he says, "Steve, I'm a constant listener to Security Now!, and I have a bone to pick with you.  Back in March you recommended a book called 'The Second Ship.'"  And it's like, yes, that's the - I did, I recommended the Rho Agenda, R-h-o.  The Rho Agenda is the trilogy.  "The Second Ship" is the first of those.  I think "Immune" is the second one.  Anyway, so continuing, he says, "I had a few extra credits sitting in my Audible account, so I tried it.  It was so good, I ended up listening to all three books in a row" - in this case it's r-o-w - "over three weeks of driving back and forth to work.  That put me behind in my Security Now! and Windows Weekly podcasts, but it was worth it.



After finishing the third book, I started listening to Security Now! again, and in the next episode you recommended the 'Gibraltar Earth' series of books.  I hesitated to try it out of fear of getting further behind in the other webcasts, but figured what the heck.  After starting 'Gibraltar Earth' I quickly realized I was going to get further behind in Security Now! and Windows Weekly.  The 'Gibraltar Earth' series was great, and three weeks later I finished those three books."



LEO:  Wow.  This guy listens a lot.



STEVE:  "I have started back up with Security Now! and, curse you, heard you recommend the Antares Trilogy."



LEO:  Oh, no.  Antares, yeah, yeah.



STEVE:  The Antares Trilogy, which, oh, my goodness, that's the next thing I'm going to read.  And in my case it's in print.  I really miss that trilogy.  In fact, I'm going to start soon, I think.  He says, "You are killing me.  I'm going to resist temptation for now and get caught up on Security Now! and Windows Weekly.  Thanks for the recommendations and for making me fall way behind in listening to your podcasts.  If you do mention this on the webcast, I am sure I will not hear it for a month or so as I am way far behind and need to get caught up."  So Scott Maser is in Colorado Springs, driving to work, listening to the sound of our voices, Leo, and you and Paul and Mary Jo.  So once he gets caught up, I do, Scott, I do recommend, I will say it again, the Antares Trilogy may be better than all those other...



LEO:  Really.



STEVE:  Oh, I - yes.  If I were to say, if I were to recommend one book for people to start on, this is Michael McCollum at SciFi-AZ.com.  He's there.  You can get them in eBook and print, and they're non-DRM'd, which I really appreciate.  It's like that's the way he wants to do it.  He wants to trust people.  They're all now on Amazon, in Kindle format also.  And they are all on Audible.  When they first began to appear in Audible, someone sent me a note saying, hey, Steve, Michael McCollum's books are appearing on Audible.  And I shot a note to him because I edited for him.  I was the first person to see his latest book and edited that, and it was actually extremely clean, edit-wise.  And so we had a conversation.  And he said, yes, they're all, you know, all of my books have been picked up and are going to be converted to Audible.  So...



LEO:  You know what, they have, because they've got "Gibraltar Earth."  They've got the Antares series.  Now they also have "Life Probe" (Makers Book 1), "The Sails of Tau Ceti," "The Clouds of Saturn," "Procyon's Promise," "Thunderstrike!."



STEVE:  So good.



LEO:  Eleven books.  They've been recording like little demons.  Wow.



STEVE:  If you have time, and it won't upset your podcasting experience, the Antares Trilogy.  Is it "Antares Dawn," I think?



LEO:  That's Book 1, yeah.  It's in my library.  You know, I was trying to figure out why the Rho Agenda was in my library, "The Second Ship."  And now I realize it's because you recommended it.  See, I'll listen to you, Steve.  I haven't gotten around to listening to those.  Are you ready for some questions?



STEVE:  Let's do it.



LEO:  Let's do it.  Starting with Richard Eaton, who says GRC.com is being blocked:  Steve, I tried and rejected another VPN solution called Astrill, A-s-t-r-i-l-l.  After numerous support emails, finally a level four support rep told me that GRC.com is blocked by Astrill.  Thus, if you want to use it with that website, you're going to have to exclude it using Site Filter.  Well, hey, at least they give you a way to do that.  You can say, okay, I want to see GRC.com.  So I had to "de-tunnel" GRC.com.  What they are hiding?  Actually, the question is, does this have to do with you?



STEVE:  Okay.  So this is relevant not only for Richard but for all VPN users.  And I've seen some questions raised about proXPN that is one of the sponsors of this podcast, as we were talking about at the top of the show.  What happens when - and this is something many people, security-aware people do when they're using a VPN.  They bring up the VPN, and then they go to check shields.  They go to ShieldsUP!.



LEO:  Oh.



STEVE:  At GRC.com.



LEO:  Okay.



STEVE:  Now, when you do that, the IP address that GRC and ShieldsUP! sees is the VPN server.



LEO:  It's not seeing you, right.



STEVE:  Exactly, where your traffic is emerging.  Now, what that often means is that there are ports open on that server on purpose.  For example, it may also be their web server, so they're using, like, proXPN.com, that may be a server which was also the VPN server and the web server.  So, yeah, it's going to have port 443 and 80 and maybe other ports open.  Or if it's not a web server, they could deliberately have their VPN client configured to accept incoming traffic on port 80.  For example, I'm using that port on some of my IPs where I've got an OpenVPN server present because it is - it's very easy to get out of other networks where port 80 is your destination port.  So they could be accepting incoming VPN client connections on that port.  Thus it's not a web server.  It's the web server port, but behind that is their OpenVPN service.



So everybody who has wondered really need not worry.  You'll see that the IP that we're showing is not your ISP's, probably, what is it, 24 dot something or whatever IP that you see if you go to GRC when you're not through your VPN tunnel.  The IP that GRC's ShieldsUP! service shows will be the IP of them.  And that's what anyone outside on the Internet will see as you because your traffic is being tunneled from that IP.  Then it's encrypted and tunneled to your actual IP.



Now, as to why these guys are blocking us, it can only be for this reason, and that is, just tech support.  Too many people were asking, hey, why are there ports open when I'm using the Astrill VPN, and I'm going to GRC?  Unfortunately, Astrill, instead of, like, I don't know, giving them a notice or something - I guess you really couldn't give anyone a notice, you just have to block them - they've just blocked GRC.  So you cannot test your shields.  And they figure, well, that's better than having - than worrying people or having the tech support burden.  So apparently it's possible to, with that VPN client, say do not tunnel the following URLs or IPs or something.  And so that traffic won't go through the tunnel, it'll go direct.  And then you're not going through the VPN, and then GRC sees you, not the VPN IP.



But anyway, that's what's happening.  It's understandable.  It's nothing to worry about because, again, it's not you, your ports being shown.  It's the VPN server's ports.  And I can see where it could cause a tech support problem.  I know, I mean, I've witnessed it confusing people in my Twitter feed who are asking proXPN support people, why are ports open when I'm using your VPN?



LEO:  Why, why?  Yeah, that make sense.  Some other VPNs may do - does proXPN do it?



STEVE:  Yeah.



LEO:  They do, oh.  Trevor Green in London, U.K. wonders about SSL Everywhere - or Mostwhere.  Steve, I was listening to Security Now! in the archives when you talked about Firesheep - remember that?  Those were the good old days - and how it makes session hijacking easy.



STEVE:  Life was so simple.



LEO:  Ha ha ha, those days.  We take credit card payments on our website, so our team has implemented SSL encryption everywhere.  Enter the SEO guy.  Our SEO guy insists we can use HTTP until the user needs authentication, then switch to HTTPS with HSTS for the remainder of the session.  Steve, his idea sounds plausible.  Authentication cookies are still only transmitted over SSL.  But I'm sure I'm missing something.  Will his idea work?  Why are people recommending SSL everywhere?  Is it because it's necessary or because it's simple?  And I'm going to add the question, why does the SEO guy care?



STEVE:  Correct.  First, that's one thing that hit me was he said that the Search Engine Optimization person cared whether they were secure or not.  Well, maybe 15 years ago.  But all search engines can crawl secure pages just as easily as non-secured pages.



LEO:  It's not a message to a search engine anymore, oh, don't crawl me.



STEVE:  Correct.



LEO:  Put that in the robots.txt, if you want that.  But they're going to crawl into the SSL.



STEVE:  So, Trevor, here's the reason, and this is important.  It is in the transition from nonsecure to secure that games can get played.  So if you have a man in the middle, which is entirely possible with HTTP, I mean, the ways to do that are legion.  It can be ARP spoofing.  It can be somebody with a simple utility in an open WiFi coffee shop network, for example, who's able to intercept all the traffic.



So they're intercepting the traffic in the clear, and they see the page coming where the user wants to log on securely.  And since it's over an insecure connection, they simply strip out the S's.  They remove the - and the man in the middle removes the "S" from the end of HTTP on all the URLs and even the form submission URL.  So the user, who just assumes that they're being provided security, has your site security stripped from it before - and never able to come up.  So they get a form, not over SSL, and they fill it out, and they submit it, and all their login information is captured by the guy in the middle.  You have to have security up from the beginning or verifiably before you - with transport, with HSTS style so it can't be removed, well before you start the login process.  So it's just better always to have it.



And the problem is, if you ever don't have it, you can never be - you can never get it.  So if you ever allow it not be secure, then from that point on, if every interaction is filtered, then normally when you're at a site, like the first person, the first thing someone's going to do is to log in.  They're going to log into Facebook.  They're going to log into eBay.  They're going to present their credentials.  Now, maybe here, in this model, it says you take credit card payments.  So there's a lot you can do on the site before you switch into that.  But it's just safer if you're always HTTPS so that there's no way somebody can wedge themselves in and then strip out the attempted conversion to HTTPS connections.



LEO:  Good stuff. 



STEVE:  And what you really want, you want to use that HSTS header and tell the browser we're always HTTPS for the next year.  Or whatever.  It's like, for a long time.  The browser will remember that, and then it helps the user to stay HTTPS.  This behavior is quickly becoming the standard.  It's going to take a while.  It's going to become the standard.  You might as well be a leader in that.



LEO:  Somebody said maybe because it slows down page loads.  That doesn't slow it down appreciably on modern servers.



STEVE:  No.  Again, that's 15 years ago that was a problem.  Now it's only the first connection where there is a public key negotiation.  All current clients and servers cache the credentials that are established securely so that all subsequent connections come up just as fast under HTTPS as under non-HTTPS.



LEO:  And it's not going to add more than a second; right?



STEVE:  Not even a second.  It's not going to add 100 milliseconds.



LEO:  Unless you have some crappy server that's way overloaded or something.  UWACES - I don't know what that means - in Shanghai, China asks:  Are my ShieldsUP!?  Hi, all.  Long-time listener and, idiotically, a first-time user of ShieldsUP!, your wonderful service.  I live in a house with three people and seem to be the only one concerned about security, privacy, and redundancy in our home.  In an attempt to help with our technical problems, I started to look into our Internet and realized the tangle of wires kicked under the desk in my dad's office was not the same as the theory I had spent so many hours learning.  But I didn't fret.  I went to look at your site, and I used the relatively simple, as compared to the jumble of wires anyway,  ShieldsUP! service.  The result concerned me.  The results, your text summary below, showed most ports being closed.



Now, back to the jumble of wires.  Here's what we have:  a residential gateway for the DSL line, which is connected to a switch, which is hooked to a router for each floor of the house.  Wow, this is elaborate.  This is the reason for my confusion:  Every router has its own settings for the way that it looks at the WAN.  So how do I know which router is the correct one to stealth the ports on, or is it in fact the dinky residential gateway which, by the way, I can't change out?  Now, remember, he's in China.



STEVE:  I know.



LEO:  Two ports open, 1,045 ports closed, nine ports stealthed.  The ports that were open are 23, which is...



STEVE:  Telnet.



LEO:  ...telnet.  Ooh, that's not a good one to have open.



STEVE:  Not good.



LEO:  And 80, which is web surfing.  And then a bunch of stealth ports including the SSL ports.  Which probably shouldn't be - well, I don't know.



STEVE:  That's probably ISP is blocking them.



LEO:  Oh, that's China.



STEVE:  Yeah.



LEO:  That's China.  And of course the NetBIOS, which should be stealthed.  What do you think?  What's your diagnosis?



STEVE:  And 21 is FTP.



LEO:  FTP, okay.



STEVE:  Yup, and then he's got the standard Microsoft ports - 135, which is NetBIOS, 137, 138, 139, 445.  So, okay.  So here's what - I thought this was sort of an interesting configuration.



LEO:  Yeah, yeah.



STEVE:  First of all, so it sounds like there's a gateway, a DSL gateway going to a switch.  And then he didn't say how many floors.  But let's say three floors.  So, and each floor has its own router.



LEO:  Wow.



STEVE:  And because - and I think that's the configuration because it says each has its own settings for the way it looks at the WAN, which probably means that there are three public IPs, one for each router, rather than, for example, a single public IP on the DSL router.  I don't think it's a DSL router.  I think it's a true DSL gateway, which is probably just bridging the DSL over to Internet.  Then it's switched so it goes to individual routers.



So, UWACES, what you need to do is try ShieldsUP! from each floor.  You tried it from apparently one router, and you got a particular set of results which were some concern, and I think should be.  You really don't want, if this is in fact your IP and not an ISP that is doing NAT for you, that is, you ought to look to see whether the WAN IPs are public IPs, or are they, for example, 10-dot, or 17, or, I'm sorry, 10-dot, or was it 172 through 17 something, you know, the various private ranges.



LEO:  192.168, you mean?



STEVE:  There is that also.  But there's also a middle-size one that's like one - I can't, it's been so long since I've looked at that.



LEO:  Oh, yes, if you get - if you can't - yeah, yeah, yeah, yeah.  Unroutable.  Oh, I can't remember it, either.  But I know what you mean.



STEVE:  It's like - yeah.



LEO:  172.16 through 30, according to...



STEVE:  Yeah, there you go, exactly, thank you.



LEO:  That sounds reasonable, yeah.



STEVE:  So if those are the WAN IPs, then your provider is doing NAT, in which case the port 23 and 80 are its ports that are open.  But if your WAN IPs are public IPs, routable IPs, then you need to go to each router in turn, run ShieldsUP!, and see what the results look like because then ShieldsUP! will be actually showing you these ports which are open and closed are your router itself.  So then you want to go, you want to reconfigure each router, turn off the web server if there is one, turn off the telnet port, basically secure the WAN side on each one.  But you will need to do it on all three of your floors since apparently each floor has its own router.  And the results you get from ShieldsUP! will probably differ depending upon the router configuration per floor.



LEO:  That makes sense.  It's the router that you're connecting with at any given time.



STEVE:  Yes, yes.  And apparently his household has more than one.



LEO:  It's complicated, of course, because we don't know what's going on in China as far as the Internet access.



STEVE:  Right, right.



LEO:  Sam in Dallas commented about blocking third-party cookies:  I'd love to be able to block all third-party cookies (I use Chrome), but it does break some sites.  I'm job hunting, for instance, right now, and most companies bounce you over to an external job listing service.  Blocking third-party cookies tends to break those.  I've tried whitelisting the sites, but there are so many, it's just - it's too much of a pain.  Plus, I tend to forget about it and then wonder, why is this site not working?  So he's just turning them on.



STEVE:  Well, this is interesting.  I mean, it's unfortunate because we are beginning to see, as we've discussed on this podcast, and I'm promoting it, this default blocking of third-party cookies.  Safari comes that way from Apple and always has.  And I've always loved it for that reason.  And Firefox is struggling with the politics of making that same decision.  But it was interesting, from Sam, to hear that he's had experience with some sites that break when he's got third-party cookies disabled.



My take is third-party cookies should have never been.  This is an abuse of cookies.  This is not the way they were meant to work.  They were meant to be a stateful relationship with the site you're visiting.  It's a side effect, a side effect consequence of ads that they're able to also use cookies.  This was not what cookies were meant for.  So unfortunately, because this notion of third-party cookies didn't exist initially, some sites have assumed that they will be enabled, in the same way that some sites are now assuming JavaScript is enabled.  And I'm seeing many signs, because of course I run with JavaScript by default disabled, thanks to NoScript on Firefox, I'm seeing notices saying this site only works with JavaScript.  Turn it on.  And then, if it's worth it to me, I do.  It may very well be that we get to the same point where sites begin to say, this site requires that you accept third-party cookies.  Please turn them on.  And then I imagine at that point browsers will give us a way to do so.  So it's really a function of the fact that they've always been on.



And so it doesn't sound like there's a commercial incentive in this instance.  If it's some sites bouncing him over to job listing engines, it sounds like it's just they've assumed the presence of third-party cookies, and they're relying on that as some glue between sites, and turning them off is breaking that glue, which they've relied on.  And this, you know, it may be the reason that we don't see everybody running with them disabled under Safari.  There is a percentage of people using Safari who have turned third-party cookies on, presumably because they found out that they did need them.  But still about 80 percent run with them off.



LEO:  So I'm thinking about what the scenarios could be that a site could legitimately want third-party cookies.  And this would be a very - this one's a good example because you're referred to a job listing site from a - you go to visit a site.  You're referred to a job listing site.  The job listing site might do something, maybe collect information, and then send you back to the originating site.  Is it not conceivable that there would be some third-party cookie exchange here?  Maybe the job listing is embedded in the first-party site, that kind of thing?



STEVE:  Well, the problem is that you don't, you definitely don't need third-party cookies.  It was probably just a convenience.



LEO:  Okay.



STEVE:  For example, when you go to the third-party site, the HTTP header, the referrer header, provides any information that the site wants about where you came from, for, like, linking you together.  So it's easy for the site that referred you to the third-party site to send you back there afterwards.  But they may have chosen to use cookies instead.



LEO:  Right.  Not necessary.



STEVE:  So without really digging into the technology, it would be hard to dissect what the problem is.  It certainly isn't necessary.  It's just the way they chose to do it.  And turning it off was, I mean, the good news is, if third-party cookies start being off more and more, the people who implemented the site technology could say, oh, this is generally no longer reliable.  Let's do this without third-party cookies.  And they certainly can.



LEO:  So there's no technical, you can't think of a technical scenario where you'd need third-party cookies for a legitimate reason.  



STEVE:  No.



LEO:  Because that's not how cookies were designed.



STEVE:  Right.



LEO:  They were designed to be first-party.



STEVE:  Yes, they were designed to allow you to maintain a stateful relationship with a site you were visiting.  So you could log on and stay logged on, query to query, as you moved through those pages.  It was the whole concept of third-party advertisements which were being hosted by the first-party site.  Suddenly it's like, oh, wow, those ads are putting cookies on my computer.  That wasn't what the guys who did cookies ever intended. 



LEO:  No, in fact they were very explicit that no third-party could read your first-party cookies.



STEVE:  Exactly.



LEO:  Which I think tells us that the intent was very clear that this kind of thing not happen.  Question 4, I'm sorry, 5, Andrew Hallmark in Cambridge, United Kingdom wonders about the Quantum Internet:  Steve, I'm a computer science student.  When I heard you talking about the problems implementing quantum internet, that's when it hit me:  Why can't we use some kind of envelope system that will contain the quantum data, and the only thing the routers will see will be the address on the envelope, thus maintaining the quantum state but still sending it to the right place.



I've no detailed knowledge on physics in general, but I'd like to hear your opinion on this idea since I am currently thinking about starting physics in September.



STEVE:  Well, first of all, Andrew, go to physics.



LEO:  Really.



STEVE:  Oh, my goodness.  I just think physics is so great.



LEO:  Me, too.



STEVE:  I loved it in high school, and at Berkeley I was in engineering physics, which was like the tough one, the Physics 5.  And, oh, goodness, it was just a joy.  And it's so applicable to everything that we run into later in life.  I've really found my interest and love of physics to be worthwhile.



In this instance, what we're dealing with is bizarro physics.  I mean, you know, classic mechanical physics is almost intuitive.  There is nothing intuitive about physics at the quantum level.  It is just insane.  And I don't see how it would be possible to create an envelope because we're actually taking advantage of, like, the simplest aspect of the nature of quantum communication, which is the act of observing the quantum data changes it.  And that change can be detected.



And so I just don't, I mean, it's an interesting concept, but I think you've formed some semantics that just don't make sense in the actual physical world.  This notion of putting an envelope around the quantum data, I don't know what that means.  The quantum data is the data that you're transferring, and the whole - the beauty of the elegance is that it cannot be eavesdropped upon.  There's no way to - and this was when we were talking about an Internet, it's inherently not Internetable because the Internet is about routing.  And the moment you intercept the quantum data, this optical connection, with a router, it is the terminating endpoint.  And then you've broken, essentially, your envelope at that point.  And you could put it in - you could re-envelope it and send it back out.  But then the point is that that router represents a point of vulnerability.



So by all means, I couldn't recommend physics more highly.  I think it's, I mean, it sounds like you're a computer science and physics interest, which would be a great combination.



LEO:  Long as you got the math.



STEVE:  Yup.



LEO:  Got to have a lot of math for that.  Brian Tanner in Southwest Wyoming notes you could store energy by pumping water uphill, too.  And I think I was referring to that when I was talking about the old school methods.  This isn't the one I've seen, but it's the same idea, and he points us to a website, ConsumersEnergy.com.



STEVE:  I tweeted the link to this earlier [bit.ly/1b4psXV].  So if anyone's curious, you can look at my Twitter feed, Twitter.com/SGgrc.  I really like this, Leo.  It's just it's a large reservoir deliberately elevated above Lake Michigan.



LEO:  You pump it up, the water up into there.



STEVE:  Yeah.



LEO:  Using energy.  And that's - the energy's reclaimable when you let the water flow back through.



STEVE:  And did you see the diagram down below, where...



LEO:  Oh, yeah, there you go.



STEVE:  Yeah, it's just beautiful.  But, I mean, it's able to supply energy for 1.4 million people, generates some huge amount of gigawatts of power.  I was just stunned.  There's, like, eight pipes that come down from above, from the elevated reservoir, that are 24 feet in diameter.  You could drive a semi through any of these eight pipes.  So massive water flow to spin turbines, which run generators, which then double as motors.  And so during the night, or at off-peak times, they use power which is less expensive to pump, basically to pull water out of Lake Michigan and pump it uphill into this huge ecologically friendly reserve, essentially.  And then, during the summer months, during peak energy use, when energy is more expensive,  they minimize their external energy consumption by allowing the water to run back downhill.



Anyway, I thought it was obvious.  But this is just really, really elegant.  I was, as I looked at the page and read more about it, it's just like, well, this is just beautiful.  Sadly, it was done back in 1969 to '73, this whole thing was constructed.  And you just don't see us doing things like that these days because they're expensive.  And this is just - it's beautiful and elegant and, you know, bravo.  And I did get some other tweets from people who saw this tweet and said, oh, yeah, we've got one around the corner from us.  So they do exist in various places.



LEO:  Sure they do, yeah.



STEVE:  But I just wanted to sort of point it out.  I thought it was very nice.



LEO:  Neat idea.  Andrew McGlashan in Melbourne, Australia wants to talk about - and worry about - BitTorrent Sync some more.  He says:  Here's my problem.  Any newly created generation of a standard user-generated secret may collide with any other existing secret and, depending on how well they are generated, may collide more frequently then would be predicted assuming 100% entropy.  And for a breach of privacy you don't need to find any one specific collision, you just need any collision.



If someone else recreates the identical secret, they will see the collision and be able to see your files immediately.  You'll get no notice.  You have to watch all connections to your machine constantly to see the new connection - too late, your files are owned.  Sure, finding someone specific's target secret is virtually impossible.  That depends on good secret creation, of course.



Now, just because it's likely to take a zillion years to guess your target secret, it can occur on the first try.  At least for additional security you can use 40+ Base64 characters if you choose.  So I'm advocating for an option to unlock to allow new connections.  You monitor for the new connection - that's a good idea, actually - and accept it by arrangement.  The other end gives you another secret, and you store that to allow both the original secret and the special access allowed secret to connect to your sync.  Then you relock the system to only allow those that have already been granted access.



This actually is a clever addition, if you're worried about this.  This way, you can vet every new possible connection, one at a time, in a very secure fashion.  No one can gain access to your shared sync without you accepting them deliberately, and your own secret becomes very, very private indeed.  No one seems to get this.  It would make the whole sync situation secure.  Without the lock/unlock option, you have no real choice other than to make sure that you encrypt everything yourself before you place it in your sync folder.  A TrueCrypt volume will suffice, if well secured.



I fully understand that, if you find a physical house key at a major train station, it would be futile to try that key in every house lock until you found one that opened.  But that's a different problem, and house keys only have so many tumbler combinations.  In the house key scenario - we don't have to go on and on about the house key.



STEVE:  Yeah.



LEO:  Because it's completely not analogous.



STEVE:  Okay.  So...



LEO:  What's your answer?



STEVE:  So Andrew is among the people who are unnerved by the idea that nothing protects them other than that no one has guessed, they hope, their BitTorrent Sync secret.  And the fact that there are three times 10^50 possible secrets doesn't put them off any.  They say, well, but what if someone did guess it?  And it's like, okay, I mean, there's no arguing that.  And first of all, we're still waiting for the protocol disclosure.  There does seem to be additional bits.  Somewhere they're using 256.  It seems that 168, I think that was the number, come from the user-provided key, but the balance of those making up 256 come from somewhere else.  We don't know where else.



So I'm still feeling it's a little premature to, I mean, we really can't audit the security of BitTorrent Sync until we have the protocol.  And we do not have that yet.  All we have is them saying, this is in beta.  Here it is.  Have fun.  And I think it is, given that you've got good entropy, and he says, yeah, but what if you don't, it's like, well, yes.  If everyone uses the same key, then that's a problem.  But we're not arguing that.



And notice that, if you - the problem with the lock scenario is that somebody would try to use a key, and they wouldn't be able to because they would be told that, well, sorry, that network is locked.  Well, now they know that there is a network at that key.  And then they have to just keep trying it until they find it unlocked.  And then you're back in the same situation.  So, I mean, the truth is it's larger than three.  I think it's 3.1 or something times 10^50.  And remember that was - you only needed, well, anyway, we talked about the number of molecules in the universe.



LEO:  It's hard to figure out, yeah, yeah.



STEVE:  All that.  It's just it's a ridiculously large number.  It is never going to happen.  Never, never, never.  But people just cannot be comfortable with that.  It's what I'm seeing.  And so I almost agree that - and even as you were reading it, this lock/unlock thing made sense to you.  It felt - you were more comfortable with it.



LEO:  You just do it because it gives you...



STEVE:  Yes, I think from a psychological...



LEO:  People aren't going to adopt it from a psychological point of view.  People don't understand the math.



STEVE:  I think that's the case.  From a psychological standpoint, it's just - it unnerves people that there isn't a separate username and password.  We like username and password, rather than just a really monster long password that is both.



LEO:  The BitTorrent Sync guys are just obviously too attached to the cleverness and elegance of their solution and not recognizing that normal humans might just want something else.  But you raised a very interesting point, which is it does send a signal:  There is something here.  It's locked.



STEVE:  Yes, yes.



LEO:  So that, I mean, I think it makes it less secure.  I think that that's the truth of it.



STEVE:  Yes.  And the fact is, how do you do this without any central management?  That's the problem.  The reason username and password works is you're always - there's a central manager.  And we know how well that works.



LEO:  Yeah, yeah.



STEVE:  Because, I mean, how many passwords are being blown by a hash...



LEO:  Do you think that this could be a system used more widely?  I think that people, look, people don't understand probability.  So it's going to be something that bothers people.  There's no way around that, even if they understand the math, and even if the entropy is very, very good indeed.



STEVE:  I actually agree that, I mean, okay.  Am I using it?  No.



LEO:  Oh.  Why not?  Because you haven't vetted the protocol, yeah, okay.



STEVE:  I haven't vetted the protocol.  We have to have the protocol vetted.  But the notion of sharing TrueCrypt volumes, now, that makes a lot of sense.  Share that rather than naked files.  If you're not that concerned about security, or you're only sharing your cat videos, then fine.  Just put them up there.  But if you've got the keys to the kingdom, pre-encrypt them.  Pre-Internet Encryption, PIE, is an acronym we've been using here for years.  And I would say that makes sense.  Use this as your glue, but don't trust it for your security.



LEO:  Yeah.  Adrian Justice in Phillip Island, Australia - another Australian - shares his experience with advertising plugins:  Steven and Leo, thanks for all the effort you put into producing a fantastic podcast each week.  I was put onto the show by my dad during my final year of high school - what a smart dad - which led me to study security at a university level, courses that reference Security Now! almost on a weekly basis - all right - whilst working at my local computer store.



A few months ago a customer came into the shop with their laptop, complaining about advertising on the Internet.  We explained to them, hey, this is how Internet-based businesses make money.  That was fine until they mentioned that our own site contained advertising, which, by the way, is not true.  Our site's always been free of advertising.  On review of the laptop we noticed hyperlinks embedded in the body of the page - we talked, we had somebody with this problem last - couple of weeks ago.



STEVE:  Yup.



LEO:  Which, when hovered over, displayed a popup with advertising for products related to the highlighted word, as described by a listener in SN-405.  After browsing around to other reputable sites, even Google, we found similar links everywhere.



We managed to narrow the cause down to a plugin in Firefox, which was, by the way, the only affected browser on the system.  When we removed the plugin - I don't recall the name, sorry - the mysterious advertisements disappeared.  We have since seen similar plugins for Chrome.  Thanks again for the great podcast.  Adrian Justice, Phillip Island, Australia.



STEVE:  So I appreciated that because we were hypothesizing a malware installation, and this confirms it.  We didn't know for sure.  We knew that there were sites that, from our own experience, that were using links, like they were hosting ads themselves in that fashion, which I find really annoying, and you've indicated you had the same feelings.  But clearly there is malware which can do this, too.  So that is, I think, what was affecting the Chrome user whose question we talked about two weeks ago.  Adrian confirms that he saw it in Firefox and in Chrome.  So it is something icky that you can pick up in your browser.



LEO:  Yeah.  And it might not be you got infected.  It might be you installed, I don't know, Java, and along with it, because with Oracle now it encourages...



STEVE:  The spiffy search bar.



LEO:  Yeah, I think they install Ask Toolbar.



STEVE:  Yes, Ask, yes. 



LEO:  That, whenever you install that shareware, and it quickly went by that they, yeah, we're also going to install a very handy little tool that'll let you - I think I've even seen it as a, not as malware, but as a, you know, like an ad plugin.  Ads Plus browser plugin, somebody said.  Maybe that's it.  Ads Plus is the software that websites use.



STEVE:  Oh, no kidding.  Ads Plus.



LEO:  So maybe they distribute a plugin.



STEVE:  Wow.



LEO:  Oliver Stengele in Heidelberg, Germany - gosh, I love the international nature of our audience.  I just love that.  I come to you with a disturbing topic from the battlefield between technology and politics:  'Net Neutrality.  A few weeks ago Deutsche Telekom published their plan to throttle the bandwidth of DSL connections after a subscriber's preset monthly volume has been exceeded.  Oh, yeah.  You may recognize this from your 3G data plan.  However, a few select services like their own IPTV or certain music streaming services would be excluded.  Ah.  That volume wouldn't count towards the monthly cap.  Their bandwidth would remain unthrottled no matter what.  This, of course, violates the concept of 'Net Neutrality and either forces volume-intensive services to broker deals with Deutsche Telekom or to suffer and wither.  The resistance to these plans already is underway with an ePetition to the German Bundestag which reached the quorum of 50,000 signatures in only three days.



STEVE:  Good.



LEO:  Yeah.  The ePetition remains open for signatures from German citizens until June 18th.  That's good.  That means people are aware of the issue.  I think Neelie Kroes, who is the privacy minister for the EU, has also just in the last couple of days proposed regulation, EU regulations to protect 'Net Neutrality.  So there's certainly awareness about this issue.



STEVE:  And it's growing, and it's good.  The one thing I wanted to comment is that when he mentioned that, for example, their own IPTV services would be excluded, one thing that typical users don't appreciate, only because they've never been in the posture and the business position of an ISP, is that not all traffic is priced the same.



LEO:  Right.



STEVE:  That is, an ISP's own traffic does not cost the ISP anything because ISPs typically pay for transit across their boundary.  So external services are creating bandwidth that they're - and, see, the ISP is buying bandwidth from a Tier 1 provider.  And so, depending upon their relationship with the Tier 1 provider, if they're able to say, well, we're only going to need this much bandwidth in aggregate for all of our uses in a month, the bandwidth that they source themselves is free to them; whereas the bandwidth that their users want from outside their bounds is not free to them.  So there is that.  I'm not, certainly I'm not defending the lack of 'Net Neutrality.  I really think we need it.  But underlying this is an economic aspect that the bandwidth is not the same whether it comes from the ISP or from extra-ISP sources.  Endogenous or exogenous.



LEO:  Actually the Neelie Kroes proposed regulation, in fact it addresses this specifically.  Thank you to Nerve, who sent me this article from ZDNet yesterday.  Online throttling and site-blocking will be outlawed in Europe under a 'Net Neutrality plan.



STEVE:  Nice.



LEO:  So they are addressing this.



STEVE:  Nice.  So they'll just have to - the ISP will have to factor it into their pricing model.



LEO:  Yeah.



STEVE:  And no longer say, oh, well, we're going to allow these and not those.



LEO:  I think the real issue - you're absolutely right, there is a real cost to stuff that comes outside their network versus stuff in their network.  The real issue is it's just a great temptation for an ISP then to use that as a way to promote their own business at the cost of a business like ours.



STEVE:  You're right.



LEO:  Because we sit on the other side of that wall.



STEVE:  Yes.  Huge temptation.



LEO:  And you set those caps low enough, suddenly, oh, well, I guess I'll just watch TV from my Deutsche Telekom account, or I'll listen to music from Deutsche Telekom.  And so it does in fact impact outside businesses.  And that's the whole point of 'Net Neutrality.



STEVE:  And the fact is in many environments there is not much choice of ISP.



LEO:  Absolutely.  Certainly here in the U.S.



STEVE:  I have no choice, yes, I have no one to use but Cox for my cable modem.  I have no choice whatsoever.  And so that's the problem is that, if you don't, if there's no competition among providers, then they have a captive market that they can screw with any way they choose to.



LEO:  The waters are muddied because, unfortunately, and it's certainly true in the U.S., and apparently as well in Germany, the Internet service providers are not pure utilities providing you with a pipe to the outside world.  They are businesses.  They're Comcast, you know, or Cox, which primary business is selling content.  So that's the problem.  You have to kind of say to these pipes, hey, if you're going to be a pipe company, at least that part of your business, you cannot favor the other part of your business.



STEVE:  Leave the pipe alone.



LEO:  Right.  The pipe's got to be neutral.



STEVE:  It's got to be a content-neutral pipe.



LEO:  Right.  And that's where it gets very complicated.  Because you're making - the argument you just made is exactly what these ISPs say.  But it costs us more to give a treat to your viewers than it does for us to show them the German programming.



Nick Donnelly, our last question.  He's in London, although - actually he's a Londoner in Saigon.



STEVE:  And I think we have to have heard from him recently because that seems familiar.



LEO:  Yeah, it does.  He might have been in the studio, actually.  Anyway, Steve, thanks for the explanation on the BitTorrent sharing service not being brute-forceable.  I'm getting more excited about the potential of BitTorrent Sync all the time.  I also heard your piece on the Marks & Spencer customer having one of their cards debited by the supermarket even though they'd never taken it out of their bag.  While this is inconvenient, isn't the bigger horror here that someone malicious with a contactless payment reader could walk around a street stealing hundreds of card numbers in a couple of hours?  Even if it's a low limit, the fact it can be read at all at such a long distance and doesn't always require a PIN must make this payment format largely untenable from a security standpoint.  Here's hoping neither you or Leo have a stroke on this week's show.  Thank you.  I think so far...



STEVE:  We've made it to Question 10.  There's been no slurring or blurring of words.  So I think we're in a good shape so far.



LEO:  We've survived.



STEVE:  Yes.  And I think Nick is exactly right.  I mean, it is a - it's horrifying.  We have evidence from that report that cards were debited before the user entered the PIN for a different card.  So even if the PIN were the same, the debiting preceded any action that they took, which absolutely says you've got - you have NFC, near field communications, embedded cards that will function at sidewalk passersby distance.



LEO:  Yeah, that's not good.  That's not good.



STEVE:  And that is horrifying.



LEO:  Yeah.



STEVE:  So, Nick, thank you for bringing that up.  I should have said it myself.  But I was so caught up in just reading the story that I didn't add that.  But absolutely, I mean, that is - people will remember that I was advocating a brief microwaving treatment of your card.  I'm not sure that you want to do that.



LEO:  They pop.



STEVE:  But send it back to your provider and say, no, send me one without this fancy...



LEO:  This is why these smart cards have never made it in the U.S.



STEVE:  Yeah.  It's not good.



LEO:  But all they have to do is require a PIN for all transactions, and you're done.  Right?



STEVE:  I don't like that, Leo, because, I mean, I don't want any - just why can't we just have little gold contacts where you just stick the card on a reader or something?



LEO:  I see, yeah.



STEVE:  I know how magic radio is.  Radio is just bad.  We don't even - we don't yet know how the bad guys are opening those car doors, but it seems to be some radio-like - it's either high-power radio or high-power magnetic, which is confusing the car's network, I think, and saying, oh, look, I'm supposed to open now. 



LEO:  Radio is dangerous.



STEVE:  I can't wait till we find out.  Radio?  Radio, look at, I mean, how many times are we talking about security aspects relating to radio?  It's just scary.  Lord knows Google got into trouble with radio.



LEO:  [Laughing] Steve Gibson is the Explainer in Chief.  He's at GRC.com.  Go there.  And he didn't mention it, but do buy SpinRite, the world's best hard drive and maintenance utility, great for recovery, too.  GRC.com.  While you're there, lots of free stuff like ShieldsUP!, Don't Shoot The Messenger, Unplug N' Pray, Password Haystacks, so many great utilities, and lots of great conversation.  If you have a question for future episodes, GRC.com/feedback is the feedback form.  Don't email Steve.  GRC.com/feedback.  He won't even see your email.  He obfuscates it.



STEVE:  I don't have email.



LEO:  He doesn't have email.  So just - but you make it very easy, GRC.com/feedback.  He also has 16Kb versions of the audio of this show for people with bandwidth limits.  He also has transcriptions that he pays for.  Elaine Farris does a great job with those.  So you can read along as you listen.  We have bigger audio files, higher quality audio files, and video available at our site on demand, TWiT.tv/sn.  Or you can always watch live.  I mean, it's fun to have people watch live.  We pay attention to the chatroom.  You can do that by watching Wednesdays, 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 19:00 UTC, on TWiT.tv.  That's our website for the live streaming.  That's it for this week, Steve.  Have a wonderful week.



STEVE:  I'm not sure what's up for next week.  I've got a whole bunch of topics, and we'll see if maybe something will come up in the meantime.  Otherwise we'll grab a topic which is needing some attention.  And that'll be what we talk about next week.



LEO:  And there's sure to be one, so tune in.



STEVE:  Oh, yeah.



LEO:  Each and every week.  And thank to all the professors and educators and teachers who use Security Now! in their classroom, in their curriculum.



STEVE:  Yeah, really.



LEO:  I think that's great.  I just - it makes us feel really, really good to know that we're this kind of value to people.  That's the mission.  So I'm glad - mission accomplished, Steve.



STEVE:  407 episodes and counting.  408 next week.



LEO:  What a body of work you've created.



STEVE:  We've done it.



LEO:  Yeah, it's nice.  Thanks, Steve.



STEVE:  Thanks, Leo.  Bye.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#408	

DATE:		June 12, 2013

TITLE:		The State of Surveillance

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-408.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm



DESCRIPTION:  This week, after reminding our listeners that we just had another Microsoft Patch Tuesday, Steve and Leo examine the operation and technology behind the NSA's previously secret PRISM Internet surveillance program.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here with probably the most important Security Now! we've ever done.  He's looked at all of the testimony, all of the information, and he says he's figured out exactly what the NSA is doing to spy on us.  Steve breaks it down next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 408, recorded June 12th, 2013:  Surveillance State.



It's time for Security Now!, the show that covers your privacy and security online.  And this is, I think, a long-awaited edition, at least a whole week long-awaited edition of Security Now! because there's been some stuff going on, and everybody I know has said get Steve Gibson to explain it all.  Steve Gibson is the Explainer in Chief and the host of Security Now!, and each week he joins us to talk about security.  And I would guess this week you're going to talk about the NSA spying, PRISM, things like that.



STEVE GIBSON:  Yeah, we have to.  I got, just as you did, a huge influx of people saying, Steve, what do you think about this?  What does this mean?  What do we know?  What can we presume?  And one of the most interesting things that for me occurred is that - and I've watched every show, I've watched all the talking heads, I've read everything that was there because I was interested in this.  And so what I saw was a way for all of these pieces to fit together, for it to be absolutely true that Apple and Facebook and Google and Yahoo! and so forth are honest in their denial, yet the slides that the NSA showed saying they had direct access to their servers are also correct.  That is, there is technology which the NSA has employed.  We have evidence of it.  The EFF has been involved in some prior lawsuits.  We have testimony with photos.



And when all of the pieces clicked and, like, came together in my mind, I said, oh, now I know why it's called PRISM.  I know where the name came from.  It came directly from the nature of what they're doing.  And so while I have no - obviously I have no allegiance or connection in the past or present to any of our three-letter agencies.  I have no specific knowledge of this.  But looking at all of the evidence, what I can offer our listeners this week is something so compelling that they will know as well as you will know, Leo, that this is what's going on.



LEO:  Good.



STEVE:  And it tells us about the technology.  And but I want to lead off, because I know that many of our listeners have not been following this as closely as I have, so at the beginning of ABC's "This Week" show on Sunday morning with George Stephanopoulos, he had Glenn Greenwald on, who broke the story with the Guardian.  And it was such a short, succinct statement from Glenn that I wanted to put that into the podcast at the beginning.  And then I also want to - one of the things that I'm hoping could come out of this is that we could give Congress the right questions to ask because there was - there's a glaring testimony back on March 12th, just not even, well, exactly, actually, it's the 12th today, right, so exactly three months ago, where a Senator asked point blank, I mean, just directly to our Director of National Intelligence, if the NSA was collecting any information on millions or tens of millions or hundreds of millions of Americans.  And James Clapper said no.



So anyway, I want to sort of fill in for people who haven't been following this as closely as we have, and then talk both about the first program, which is the telephone metadata collection - it's been, like, annoying me when I see people on the news saying, oh, well, you know, that's just metadata.  That's not the phone conversations, blah blah blah.  So we're going to talk a little bit about what that means and what the power of that is.  And it's funny because I had already written down in my notes early in the weekend that one of the significant factors of this was the history that was collected.  And then in his amazing video, Edward Snowden said that.  So I grabbed that little 46 seconds of the video to also play.  We might as well have it in his voice, the person who disclosed this and is now on the run.



And we have actually not much news except for that.  Very little.  But I think we've got a great podcast, and I think people are going to find it extremely interesting when they get what's going on.  And I think I know what's going on.



LEO:  Well, that's exciting.  And it's very interesting because - and I'm very interested to hear what you have to say.



STEVE:  And no one has, no one, I mean, I've been watching everything, listening to everything.  Nobody has figured this out, apparently.  And I'm going to offer what is probably the answer.



LEO:  Wow.  Security Now! on the air, Steve Gibson, Leo Laporte.  Let's get the news out of the way, and then we can start talking about PRISM.



STEVE:  It's going to be pretty quick, actually.  The only thing that happened that I noticed, because I actually did have my attention rather intensely focused...



LEO:  I bet.



STEVE:  ...on all of this, is that we just crossed the second Tuesday of the month.  So all of our regular listeners know that means that Microsoft issued a batch of patches.  And these were about as non-dramatic as any could be.  So I'll simply remind our listeners, rather than going into any detail or depth, to update Windows.  When I turned on my Windows 7 machine to fire up this Skype session with you, Leo, I saw 15 updates were offered to me.  So everyone should find time to do that.  We know that updating in a timely fashion is increasingly important because there's a window now between the time that patches are released and people act on those released patches.  The bad guys are able to figure out from the patch what the vulnerability was, if it was not previously disclosed, and these were not, and then take action against people who have not yet patched that.  So this is - it's becoming important to do it as quickly as you can.



And I was happy to see Apple, by the way, during the keynote at the Worldwide Developers Conference, say that iOS 7 will be updating its apps just in the background and more or less continuously.  That's wonderful news since I had 86 that I hadn't updated.



LEO:  Yeah, it's ridiculous.  Even John McCain was pissed off.  So at this point I think it's time to fix that.  And we're glad that they did, yeah.  And as for Zune, we'll see.  I haven't looked at it yet, but Jeff has.  There is a way to turn that auto-update off; right, Jeff?  I think there is.  So you get the choice.  But the default should be on, I would expect.



STEVE:  And then the only other thing I have of news also is from Microsoft.  It came in via a tweet from @FaustoCepeda, who alerted me to a Fixit which Microsoft published which allows Java to be disabled in IE.  So this is new from Microsoft.  They've never given us a, look, we understand Java's a problem; we're going to let you disable it in Internet Explorer.  This is, I think, useful also because there are many people who are stuck in corporations where they have to be using Java, but not necessarily in their browser.  And they also have to be using IE, so they can't use tools like NoScript in Firefox and tools to control Java in the browsers, other browsers that have done a better job of controlling that.



So if you Google "Java when you cannot let go" is in the tail of the URL.  That will get you to Microsoft's Fixit.  And I would recommend, for example, since we all have IE installed in Windows because we don't have a choice, even though we're not using it, we're typically using Firefox or Chrome or Opera or whatever, it makes total sense to disable Java in IE.  So this just turns off Java, sorry, turns off IE's invocation of Java for web applications.  And it only affects IE, won't mess up your other browsers nor Java on your desktop.  So certainly a useful thing to do.



Now, the acronym search has already begun for PRISM.  And although it is not an acronym - as you will have me explain later, I know why they called it PRISM - the first one's been submitted by Barry Spar a couple days ago who said, "PRISM stands for People Really Interested in Spying on Me."  So that's pretty good, I thought.  And Leo, I did want to mention, just for the people who don't watch iPad Today, I watched it with you and Sarah last week.



LEO:  Thank you.



STEVE:  And the free application Dumb Ways to Die...



LEO:  Hard not to - hard to stop playing it, isn't it.



STEVE:  Oh, my God.  It is so...



LEO:  It's a fun game.



STEVE:  It is.  It's dumb, but it's fun.  It's just a hoot.  I tweeted it.  And I didn't realize it also works on iPhones.  I would think you'd need a little more surface area.  So I like it on my iPad.  But the music and the graphics and, I mean, somebody with a great sense of humor put this thing together.



LEO:  And it's free, which is not even any in-app purchases or anything, it's just free free.



STEVE:  It's not a huge monolith like some of those astronomy apps or the elements or something where it's like, oh, my god.



LEO:  It's fun to play.



STEVE:  So I wanted to recommend it.  Dumb Ways to Die from the iTunes store, for anyone who has iOS.  It's just a kick.  And not hard to play.  I did get a thousand points, and I unlocked the, quote, "music video," unquote.  Have you seen that, Leo?



LEO:  No, I haven't gotten that far.



STEVE:  Oh, god, it's worth getting to a thousand points.



LEO:  Okay, I will.



STEVE:  And look at the music video because it's wonderful.



LEO:  It's just the silliest game ever.



STEVE:  Oh, goodness.



LEO:  But it's addictive.  It's fun.  You can't stop playing it, yeah.



STEVE:  Well, it's just, yeah, it's simple.  There's also, shoot, something else I ran across that I - the problem is I've got so many icons now that when I buy something, I can't find it.  And so, yes, you can search for it, but then you still don't know where it is in your 12 screens of scroll.



LEO:  iOS is effectively a desktop where you put all your icons, and that's it.  Just [noise].  Just like a Windows user who has everything on the desktop.



STEVE:  I was happy to see a feature that got applause during the Worldwide Developer Conference - I also watched your coverage of that on Monday morning, which I thought was great - that groups or folders or whatever you call them can now be scrolled.  So it's like, oh, good.  So I can have Games or Puzzles, and I can put them all in there, rather than Puzzles 1, Puzzles 2, Puzzles 3, because they used to fill up, and then you couldn't put any more in.  So that's good news, too.



LEO:  Yes.



STEVE:  So I did have a little comment about near field communications.  I got a tweet from someone in Cranbourne East, Australia, who said:  "Listening to Episode 407 and NFC.  Often get 'multiple cards present' when I use NFC, even if my wallet is over four feet away from the reader."



LEO:  I don't know how that's possible.



STEVE:  It's radio, Leo.  It's like, you've been a ham, and so you're aware of, like, when atmospheric conditions are just right, suddenly you can receive Russia from your porch, whereas normally you wouldn't be able to?  I mean, the ionosphere and so forth.



LEO:  "I can see Russia from my porch."



STEVE:  So the idea is that radio is flaky this way.  I mean, it doesn't actually ever die.  It's not like there's a cliff or anything, or an optical beam where, I mean, it's radiated.  And we know from all the experiments that have been done, for example, with Pringles cans and WiFi antennas, that you can make an amazingly strong directional WiFi antenna out of a Pringles can.  So my point is that it is really - it's fundamentally a bad idea to use near field communications for something as important as payment where someone can, as we talked about last week, walk past you and pull money from cards that you have in your wallet.  It is just - it's broken at birth.  Bad idea.



LEO:  Bad idea.



STEVE:  Bad idea.  But I have a good idea.  I got a nice note, actually the subject was "Unbelievable," from a listener of ours, Eliot Fleming, who's in Providence, Rhode Island.  He said, "I've listened to Security Now! for a long time, but I've not had occasion to use SpinRite before."  Then he says in parens, "(Please make a Mac version someday, somehow.)"  And he said - and that's going to happen.  And he said, "My daughter's Windows XP Dell laptop" - so I guess daughter's using Windows and he's on a Mac - "was being sluggish, so I did a system restore.  This had the unexpected result that the laptop would now not start, even in safe mode.  Whoops.  It would start to load Windows, go to a blue fail screen, which we all of course know as the Blue Screen of Death, and restart.



"Dell's diagnostic suite said everything was fine.  Chkdsk from the XP install disk found a single error on a hard disk.  I knew I could reload Windows, but thought it might be worthwhile to preserve the files and applications on the computer."  And I'm sure his daughter would agree.  So he says, "I bought SpinRite, burned it to a CD to boot the laptop, and ran SpinRite at Level 2.  It found errors in two sectors and recovered as much data as possible, taking about two hours.  When I restarted the laptop normally" - well, we know how this turns out - "Windows told me that the system restore was successful.  Insert bitter laugh here," he says.



"It is unbelievable to me that you could have programmed this much functionality in such a tiny program.  Could you use a Linux loader to access the hard drive level on a Mac somehow?"  And of course now he's trying to solve how to get SpinRite running on his Mac.  "(Consider plea for Mac version repeated here)," he says in parens.  "In any case, thank you for your dedication to providing an amazing utility.  My daughter thanks you for saving her schoolwork and years of photos."  And for anyone new listening, I wrote quite a while ago SpinRite, which is saving hard drives, recovering the data on hard drives to this day.  And you can get it at GRC.com, my website.



LEO:  And I think it's probably safe to say there'll never be a Mac version of it.



STEVE:  It's running on my Mac right now, Leo.



LEO:  Is it?



STEVE:  I'm secretly working on it.  That's why I haven't said anything.



LEO:  That's good news for us Macintosh users.  You can take a Mac drive out, if you can, and put it on a PC and have it run because it doesn't care about file systems.  Right?  I mean, it can run against the HFS.  It's not the file system that's the problem.  It's the lack of BIOS.



STEVE:  Yeah, the problem with the Mac, well, actually, no because the Boot Camp provides a compatible BIOS.  The problem was that SpinRite was using the physical hardware of the keyboard in the PC.



LEO:  I didn't know that.  Were you storing data there?  What were you doing?



STEVE:  Well, there's two bytes.  There are two I/O words, 60 and 61.  And I'm actually, when SpinRite is multitasking, which is like you're able to jump around between screens, and it's doing all these things at once, there's actually a multitasking OS, essentially, that I wrote for it.  I can't use the BIOS because the BIOS is not reentrant.  And so if I'm using the BIOS to read and write the disk, I can't also be checking the keyboard to see if the user wants to switch around.  So I had to go directly to the keyboard hardware.



LEO:  Ah.  You read the chip.



STEVE:  Problem is the Mac - yes.  I'm actually physically reading the bits out of the physical hardware, which I can do no matter what the BIOS is up to.  So all I had to do was I just reengineered the technology.  The Mac uses a USB-based keyboard.  So although it simulates the keyboard through the BIOS, it doesn't simulate the hardware because that would be, like, overkill.  Anyway, so I did that, and I've got it running on my MacBook Air just...



LEO:  Awesome.



STEVE:  ...very nicely.  So anyway, it's what I've been working on.  I didn't want to make a big announcement because I didn't want to kill sales.  It really shouldn't because everyone, all the way back nine years, to SpinRite 6, is going to get a brand new SpinRite for free.



LEO:  Woohoo!



STEVE:  I'm not going to charge you anything for it.  So...



LEO:  That's nice.  Even if you're on a Mac?



STEVE:  Even if you're on a Mac.  We have had listeners who bought SpinRite to support the show but have not been able to use it because they have a Mac.  So how can I ask them for more money?



LEO:  You can't.



STEVE:  I'm not going to.  I'm not going to.



LEO:  Couldn't possibly.



STEVE:  No.



LEO:  Very kind of you.  That's great.



STEVE:  Okay.



LEO:  Moving on.



STEVE:  So I have two favorite tweets that relate to today's podcast topic.  The first one, I actually picked it up somewhere else, from @StephenAtHome.  And he tweeted something that I thought was quite clever.  "If you're doing nothing wrong, you have nothing to hide from the giant surveillance apparatus the government's been hiding."



LEO:  That's Stephen Colbert, you know.



STEVE:  Oh, it is?



LEO:  Yeah.



STEVE:  Oh, I didn't...



LEO:  Soon as I heard the tweet.



STEVE:  I did not know.



LEO:  John came running and said, oh, yeah, that's Colbert.



STEVE:  Oh, cool.



LEO:  That's funny, yeah.



STEVE:  Well, great.  Anyway, I love that.  The little double whammy there.



LEO:  Nothing to fear.



STEVE:  And then days ago Robert Yount tweeted from Palm Harbor, Florida, noting, he said, "The NSA just needs better PR.  The FREE PRISM cloud-based backup system..."



LEO:  Backup, yeah, yeah.



STEVE:  "...would sound so much better."



LEO:  Yeah, yeah.



STEVE:  So, okay.  So where are we?  We've had these revelations in the last couple days, I guess starting last Friday, couple days before the last podcast, where of course the Guardian broke the news of now we know Edward Snowden, who did not graduate from high school, got his GED, went into the military briefly, broke both of his legs during training so decided the military wasn't for him, and then got a job as a guard in an NSA facility.  But apparently, from watching the video, the guy seems to have himself together.  He's sharp.  Apparently he's got computer skills.  And so he moved up through the ranks pretty quickly.



And one of the major issues of controversy, which now is being discussed in the press, is how somebody who is seemingly not highly qualified, not the kind of person you would want to entrust all of your state secrets to, had access to all of this, part of which he's disclosed, part of which Glenn Greenwald of the Guardian, who was the reporter that interviewed him and broke the story, says they've been selectively releasing, and there's more to come.  How did he have all that?  One guy said, well, he was stationed recently in Hawaii, and in IT there, and the IT folks have to have access to more technology.  And when you're sort of off in the boonies, the boondocks, then we're not watching you so closely.  So that's one theory of that.  Anyway, who knows?  During the video...



LEO:  I think we should also say it's possible he's completely lying.



STEVE:  Yes.  Absolutely.  All we know is what he's saying.  And, okay.  So a bunch of people have asked me what I feel about this.  And there's been a lot of question about what label do we put on him?  Do we call him a traitor?  Do we call him a criminal?  Some people are calling him a hero.  And this is not a policy and politics podcast, so it really doesn't matter.  What I know is that I am, frankly, glad that this has happened because, more than anything else, what we're going to see is that we're relying on congressional oversight, yet the people who are running the program are lying to Congress.  That can't happen.  I mean, that's the problem.



So this has come to light, I mean, this has brought this behavior to light.  And we're a democracy.  I understand the need that the NSA and the CIA and the FBI have for collecting data.  And I know, Leo, I watched your coverage of this on TWiT on Sunday.  And you guys were joking about googling IED.  And it's like, oh, no, no, I don't want to Google that.  I mean, and it is sad that I'm finding myself being self-conscious when I search things that I realize are keywords.  I'm thinking, oh, I wonder if this has, you know, tripped some alarm somewhere.  And or when I'm sending email, and I realize, oh, I mean, there's a creepy feeling now that we have.



LEO:  It's called a chilling effect.  And that's often the case when stuff like this happens.



STEVE:  Yeah.  And of course so we often talk about tension on this show because we talk about security and privacy and ease of use.  And I've often talked about how there's an inherent tension that exists between the fact that you would like things to be easy to use; you'd also like to have lots of security.  Thus, for example, the famous problem of choosing a good password or password system or whatever.  I mean, the fact is you'd like to have one password that's easy to remember.  We know that that's - so there's, you know, that's really bad for security, really good for ease of use.  So you have to compromise.



And there's similarly, in a society and in a government like ours, a tension is going to exist where we have inherently asymmetric terrorism and crime, where law enforcement has, I mean, a clear need to be able to collect intelligence, and the intelligence is going to come from our environment, from where we are.  Well, now of course we're in the world of the Internet where, as it's often observed, everyone virtually is leaving footprints behind them.  And that information, you can imagine on the NSA side the overwhelming desire, I mean, just salivating to have access to everything.  They're convinced they will act responsibly.  And their argument is we need it.  I'm sure in the intelligence meetings behind closed doors they're explaining to the people on the committees that we have to have this data.  We have to have it.  And we're going to do the right thing with it.  Trust us.



And for me, the saddest thing was this testimony on March 12th, where I think it was Senator Wyden of Oregon, who is on the Intelligence Committee and has been concerned about these issues for quite a while, informed ahead of time the Director of National Intelligence, James Clapper, that he was going to ask him whether the NSA was collecting data on millions of Americans, gave him fair warning, and James Clapper said no.  And then afterwards Wyden's office contacted the NSA and gave Clapper the opportunity to revise his testimony, and they declined to do that.  This was three months ago today.



LEO:  You kind of expect spooks to lie.  At least in public.  I'm hoping they're telling more, being more forthcoming in the closed sessions of the House Intelligence Committee and places like that.  We don't know.



STEVE:  It's been noted, though, that it is absolutely possible to obfuscate and to say, "I'm afraid I cannot answer that on the grounds that it would be divulging..."



LEO:  That would be preferable, wouldn't it.



STEVE:  Yeah.



LEO:  But that would be an admission.  I mean, if he said that, that would be an admission.  Wouldn't it?



STEVE:  Well, okay.



LEO:  So I think spooks lie.  I don't think that's a surprise.



STEVE:  Well, I'm not a constitutional attorney, obviously.



LEO:  Oh, it's illegal.



STEVE:  But Wyden had to - and he was sworn testimony, I mean, this is like, you know...



LEO:  Yeah, it's perjury in front of Congress, yeah.



STEVE:  ...hand on the Bible and so forth.  So Wyden would not have asked in an open session that question if he didn't expect to get a truthful answer, meaning that - and he knows way more about what's going on than I do.  If that was a question he had to have asked and answered behind closed doors, then fine.  But this was not.  This was on the record, in public.  And I have a clip of it that we'll play here in a minute just because our listeners need to hear this.  And it's part of this, what is I think an important story.  But I need to lay a little bit of this groundwork because what I'm going to explain is really going to upset a lot of people.



And so what I will say is, while I'm glad that this came out, I, in Edward Snowden's position, could never do it because he swore an oath, and that's the end of it, as far as I'm concerned.  He no longer - the only reason he had access to this information is that he promised he would never, ever divulge it.  And so his only recourse, if he found what he was learning to be distasteful, was to resign and remain silent for the rest of his life.  I mean...



LEO:  Well, okay.  But it's more complicated than that because, if you were a Nazi soldier, you could say, well, I signed an oath that I'd be loyal.



STEVE:  Well, and there's - people have been calling him a whistleblower.  But as I understand it, a whistleblower is when you are describing something which is illegal.  And so one of the interesting points, Mika Brzezinski kept making it on "Morning Joe" early this week, was that she said, well, this is legal; right?  This is legal; right?  And of course the point is that, if we don't know what's happening, we can't ask the questions, and we can't fix the law which is broken.  Some people are arguing that it's time to revisit this now, that maybe this has gone a little further than we intended.  And if we don't have the truth being told to our lawmakers by the people who are doing the watching, that is, if there's no one watching the watchers, which is what happens if you prevaricate like this, then we don't have feedback in the system.



LEO:  Right.



STEVE:  So let's play George Stephanopoulos's brief - the beginning of his interview because Glenn Greenwald - George asks a bunch of quick questions that are great, and Glenn answers them very nicely, I think.



[Begin clip]



GEORGE STEPHANOPOULOS:  Hello again.  The secret struggle to balance national security and individual liberty broke out into the open this week after a series of blockbuster revelations starting in the Guardian newspaper.  We learned that the government has the capacity to track virtually every American phone call and to scoop up impossibly vast quantities of data across the Internet.  And our first guest is the Guardian columnist getting these scoops, Glenn Greenwald.  Thank you for joining us today, Mr. Greenwald.  You are really on a roll.  You broke another story yesterday showing the scale of the data collection programs.  In March 2013 you report the government collected 97 billion pieces of data, almost all of it from outside the U.S.  What's the key finding here?



GLENN GREENWALD:  There are two key findings.  One is that there are members of the Congress who have responsibility for oversight, for checking the people who run this vast, secret apparatus of spying to make sure they're not abusing their power.  These people in Congress have continuously asked for the NSA to provide basic information about how many Americans they're spying on, how many conversations in telephone and chats of Americans they're intercepting.  And the NSA continuously tells them, we don't have the capability to tell you that, to even give you rough estimates.



And what these documents that we published show, that were marked "Top Secret" to prevent the American people from learning about them, was that the NSA keeps extremely precise statistics, all the data that the senators have asked for that the NSA has falsely claimed doesn't exist.  And the other thing that it does, as you said is it indicates just how vast and massive the NSA is in terms of sweeping up all forms of communication around the globe, including domestically.



GS:  You also drew new criticism yesterday from the Director of National Intelligence, James Clapper.  He called the disclosures "reckless," said the rush to publish this creates significant misimpressions, and added that the articles are filled with inaccuracies.  Your response to that?



GG:  Every single time any major media outlet reports on something that the government is hiding, that political officials don't want people to know, such as the fact that they're collecting the phone records of all Americans, regardless of any suspicion of wrongdoing, the people in power do exactly the same thing.  They attack the media as the messenger, and they try and discredit the story.  This has been going back decades, ever since the Pentagon Papers were released by The New York Times and political officials said you're endangering national security.



The only thing we've endangered is the reputation of the people in power who are building this massive spying apparatus without any accountability, who are trying to hide from the American people what it is that they're doing.  There's no national security harm from letting people know that they're collecting all phone records, that they're tapping into the Internet, that they're planning massive cyberattacks, both foreign and even domestic.  These are things that the American people have a right to know.  The only thing being damaged is the credibility of political officials and the way that they exercise power in the dark.



GS:  Well, one of the things you reported is that the government has, quote, "direct access" to the servers of massive Internet firms like Google and Microsoft and Facebook, and all the companies have come out and denied it.  You see Google saying, "The U.S. government does not have direct access or a backdoor to the information stored in our data centers," similar statements from Facebook and Apple.  And Mr. Clapper also said the U.S. government does not unilaterally obtain information.  Now, I take it there could be some semantic word games being played here.  What's your understanding about what is actually happening?  Because it does appear that they don't have direct access to the servers.



GG:  Well, our story was very clear.  What we said was that, and we presented it as the story from the start, was that we have top secret NSA documents that claim that there is a new program called the PRISM program in place since 2007 that provides, in the words of the NSA's own documents, collection directly from the servers of these companies.  We then went to all of those companies named, and they said, no, we don't provide direct access to our servers.  So there was a conflict, which was what we reported, that the NSA claims that they have direct access; the companies deny it.



Clearly there are all kinds of negotiations taking place and all kinds of agreements that have been reached between these Internet companies that store massive amounts of communication data about people around the world and the government.  We should have this debate out in the open.  Let these companies that collect massive amounts of information about people and the government resolve this discrepancy in public.  Tell us what it is exactly that these companies are turning over to the government, and what kinds of capabilities the government is wanting to access.  So we reported these discrepancies precisely because we want them, those parties, to resolve it in public, in sunlight, and let people decide whether or not that's the kind of country they want to live in when the government can get this massive amount of information.



GS: The DNI spokesman also said that a crimes report has been filed by the National Security Agency.  Have you been contacted by the FBI or any federal law enforcement official yet?



GG:  No.  And any time they would like to speak to me, I'll be more than happy to speak to them, and I will tell them that there's this thing called the Constitution, in the very first amendment of which guarantees a free press.  As an American citizen I have every right, and even the obligation as a journalist, to tell my fellow citizens and our readers what it is that the government is doing that they don't want people in the United States to know about.  And I'm happy to talk to them at any time.  And the attempt to intimidate journalists and sources with these constant threats of investigation aren't going to work.



GS:  You've described your source as a reader of yours who trusted how you would handle the material.  The source has also been described as a career government official who is concerned about these programs.  A former prosecutor called the source a "double agent."



[Pause clip]



LEO:  This is before the Snowden revelation came out, I take it.



STEVE:  Yes, yes.



LEO:  So they're talking about Snowden at that point.



STEVE:  Yes.



LEO:  Okay.



[Resume clip]



GS:  I know you're not going to reveal the source, obviously.  But what more can you tell us about the individual [indiscernible].



[Pause clip]



LEO:  Not so obviously.  He did.



[Resume clip]



GG:  Well, first of all, I'm not going to confirm that there's only one individual.  There could be one or more than one.  But let me just make this point because I think this is so critical, because every time there's a whistleblower, somebody who exposes government wrongdoing, the tactic of the government is to try and demonize them as a traitor.  They risk their careers and their lives and their liberty because what they were seeing being done in secret, inside the United States government, is so alarming and so pernicious that they simply want one thing, and that is for the American people at least to learn about what this massive spying apparatus is and what the capabilities are so that we could have an open, honest debate about whether that's the kind of country that we want to live in.  And if people decide that, yes, they do want the government knowing everything about them, intervening in all of their communications, monitoring them, keeping dossiers on them, then so be it.  But at least we should have that debate openly and democratically.



Unfortunately, since the government hides virtually everything that they do with the threat of criminal prosecution, the only way for us to learn about them is through these courageous whistleblowers who deserve our praise and gratitude and not imprisonment and prosecution.



GS:  Finally, should we be expecting more revelations from you?



GG:  You should.



GS:  Okay.  Glenn Greenwald, thanks very much.



[End clip]



LEO:  I'm not thrilled with the way that he and the Guardian are parsing this out.  It feels to me like that's a little bit of a play for more views.



STEVE:  Yeah, I think so.  And, I mean, I understand their commercial interest in getting as much bang for the buck as they can.  They have a reputation that they've established, which is what caused Edward to choose them.  He knew that Glenn was sympathetic to his position and civil liberties and so forth.



LEO:  And Greenwald is, I think, well regarded.  He's smart.  He's an attorney.  He is a privacy and security expert and, I think, probably the right person.  And the Guardian...



STEVE:  Right, and...



LEO:  ...is a good journal.  Washington Post we should say simultaneously broke the story, so...



STEVE:  That's what I was trying to say, yes.



LEO:  It's likely that Snowden or whoever, if there were other informants, also gave this to The Washington Post.



STEVE:  Well, and it occurred to me that one of the reasons that he gave them to both outlets is because there was a prior instance where this kind of information was sat on for a year.  And so that didn't - that wouldn't allow Edward to get the goal of getting this stuff disclosed.  He says in the complete video, which I would commend people to watch, it's very interesting, that he does not want the story to be about him, to whatever degree possible.  To some degree it is.  He wants it to be about what's going on.



Okay, so with that little bit of sort of backgrounding, let's look at the James Clapper video.  It's only 48 seconds.  This is taken from the video record of congressional testimony that was open, obviously, to cameras exactly three months ago, on March 12th, where with prior notice of the question, the Director of National Intelligence was asked what the NSA is doing.



[Begin clip]



GEORGE STEPHANOPOULOS:  ...is the desire for more public information.  Now, he believes that the administration has not been misleading generally the committee and the public.  But I want to play an exchange that was in the Intelligence Committee in March when James Clapper was questioned by your colleague, Senator Wyden.



[Begin embedded clip]



SEN. RON WYDEN:  Does the NSA collect any type of data at all on millions or hundreds of millions of Americans?



JAMES CLAPPER:  No, sir.



SEN. WYDEN:  It does not.



JAMES CLAPPER:  Not wittingly.  There are cases where they could inadvertently perhaps collect, but not wittingly.



[End clip]



LEO:  All right.



STEVE:  So there it is.  That's our...



LEO:  That's not even a non-denial denial.  That's a denial.



STEVE:  [Laughing] There's no way.



LEO:  There's no way.



STEVE:  There's no way to walk yourself out of that one.



LEO:  Yeah.



STEVE:  And, I mean, and then Andrea Mitchell interviewed him for "Meet the Press" on Sunday.  And I'm looking for where it was he - he actually said to her, "I thought, though in retrospect, I was asked a 'when are you going to ... stop beating your wife' kind of question, which is ...  not answerable necessarily by a simple yes or no."  So this is - he said to Andrea, "So I responded in what I thought was the most truthful, or least untruthful, manner by saying, 'No.'"



LEO:  Okay.



STEVE:  Oh, I know.  It's just painful.



LEO:  Okay.



STEVE:  I know.  There's a great - if anyone's curious, there's a great take on this.  Fred Kaplan wrote an article in Slate.com, and it says, "Fire DNI James Clapper.  He lied to Congress about NSA surveillance."  And I don't know whether the guy has to go, but he certainly did lie because we now know much more than we did three months ago when this was said to - when he was asked this openly.  And the EFF, of course, the Electronic Frontier Foundation, is all over this, happily, or I'm happy to say.  I really thought that their summation of this was perfect.



They said, quoting from a longer article, they said:  "All of this would be amusing if the administration's main argument to defend the NSA's massive spying program" - and "spying" is their word, not mine.  Certainly it is surveillance.  Spying requires a judgment.  "All of this would be amusing if the administration's main argument to defend the NSA's massive spying program is that Congress has been informed of all their activities.  Democracy can't function when Congress is 'informed' by the 'least untruthful' statements of the administration, using unusual definitions that are designed to given an impression that is the polar opposite of the truth."



I skipped part of this that explains, when he responded this way, Andrea said, well, but how can you answer no, that you're not collecting information?  And then he said, "Clapper's deceptions don't" - I'm quoting from the Slate article.  "Rambling on in his rationalization to Andrea Mitchell, he focused on Wyden's use of the word 'collect,' as in, 'Did the NSA collect any type of data ... on millions of Americans?'  Clapper told Mitchell that he envisioned a vast library of books containing vast amounts..."



LEO:  Oh, please.



STEVE:  "...of data on every American.  'To me,' he said, 'collection of U.S. persons' data would mean taking the book off the shelf and opening it up and reading it.'"



LEO:  But this is interesting because all of these things he's saying really are an acknowledgment that "no" was a lie.



STEVE:  Yes.



LEO:  It's only not a lie if you have these bizarre interpretations of what the question meant.



STEVE:  Well, yeah, I mean, what can he say now with this recording of him three months ago flatly denying what we now know has been true for years?



LEO:  Right.



STEVE:  Okay.  So, first, what was authorized under the FISA Article 215, that's the telephony metadata collection.  What I found interesting about it was essentially what's going in is that all the telephone companies naturally keep the records that they need for billing.  So they're recording so-called "metadata."  We've talked about metadata.  Metadata is essentially sort of the, not the main content, it's the embellishment.  For example, when we talk about a browser query, there's the query, and then there's the headers, and the headers are metadata.  They're additional information.  Date and time stamp and cookies and so forth are browser metadata.  Or in a file system, you know, you're storing files, but it's also keeping track of when you last accessed the file and when it was modified and when it was created and file privileges for example, who's able to access it.  That's metadata.



So similarly, telephony metadata is - it's like where you are by, like, which cell tower your call is coming in on; your originating phone number, or actually it's the serial number of your phone; the number you dialed; probably where it is maybe, though if it went off out into a different phone system, they may not have that.  But basically it's your call records.  It's not your conversation, it's the event features of the call.



Well, what's interesting is that phone companies have no need to retain that in perpetuity.  They typically only keep it for 60 to 90 days.  So what's happened is, as authorized under this Article 215, the NSA has set up arrangements with all of the domestic phone companies to acquire this data before they delete it.  So, and it turns out that it's not against the law to do this.  The so-called "business records" have been ruled by the Supreme Court not to be subject to privacy protection.  So if AT&T or Verizon's business records, this is just their records for their own purposes, and...



LEO:  This is like the billing, the billing information that they would have.



STEVE:  Yes, exactly.  And it's about to be deleted, and the NSA says, oh, oh, oh, hold on a second, let us make a copy of that.  Or just send it to us before you hit delete.  So in listening to all of the buzz about this, there's this downplaying of, well, but it's not your conversations.  It's just the metadata.  And I'm sitting here thinking, oh, my god, I mean, do you realize what it means?  If there is a facility huge enough to capture and contain all of that, and the computing resources necessary to link it together, what this builds is an incredible graph of all of the connectivity that exists between everybody with a phone in the United States.



And it's funny because in my notes I was already making a note that, well, the history is also really important, and crucially important to the NSA because, for example, if they got, identified a person who was a suspect of something, a terrorist presumably, or a bad guy qualifying for further surveillance, they can query this network.  And what the continual collection of the data means is that they can go back in time, they have a time machine that allows them to walk back and look at the history of all past connections over time.  That's unbelievably rich.  And it happened that Edward, during his interview, said exactly that.  So I thought, it's a very short piece, we'd just hear it in his own words.



[Begin clip]



EDWARD SNOWDEN:  ...care about surveillance.  Because even if you're not doing anything wrong, you're being watched and recorded.  And the storage capability of these systems increases every year consistently by orders of magnitude to where it's getting to the point you don't have to have done anything wrong.  You simply have to eventually fall under suspicion from somebody, even by a wrong call.  And then they can use this system to go back in time and scrutinize every decision you've ever made, every friend you've ever discussed something with, and attack you on that basis to sort of derive suspicion from an innocent life and paint anyone in the context of a wrongdoer.



[End clip]



STEVE:  So...



LEO:  And by the way, I want to point out that, if anybody would say, well, the government would never do that, just there are some pretty good examples with Nixon's enemy list and J. Edgar Hoover's persecution of Martin Luther King.



STEVE:  Yes.



LEO:  That it is not unusual for our government, our republic to do this kind of thing.



STEVE:  And it doesn't, I mean, these are people who at the time righteously believed that they were doing the right thing.  I mean, they were doing it in secret, and that's a problem.  And, I mean, secrecy is what we have to worry about because, exactly as you say, Leo, there is ample history of abuses of this kind of data collection.  And so I just wanted to shine a little light on this notion that, oh, well, telephony metadata is not useful.  Remember we talked about some time ago this new facility that the NSA is building.  We were scratching our heads at the time, wondering what is a zettabyte, because this place can store five of them.  Five zettabytes worth of...



LEO:  Million square feet.  Million and a half square feet.



STEVE:  Yes.  It's a million and a half square feet costing $1.2 billion dollars, 26 miles south of Salt Lake City, in a town called Bluffdale, Utah.  It uses 65 megawatts of power.  It has its own power substation and, like, cooling ponds; and, I mean, it's just phenomenal.  And at the time we were thinking, well, what are they going to put in that?  What are they going to fill that with?  Well, you know, we have an answer to that question now.



LEO:  We continue on.  Steve Gibson, we're talking about, of course, PRISM and the revelations which continue from the Guardian and The Washington Post and others, about some sort of federal spying.  We've heard the word "Echelon" for more than a decade.  We knew that after 9/11 President Bush authorized warrantless wiretaps.  I remember, don't you remember, the whistleblower that in 2000, I think '6 or '7, told us that the NSA had a secret room at AT&T  headquarters in San Francisco so that they could collect this kind of data.  So this is not - we're not talking about anything new here.



STEVE:  No.  And I think that, well, there is something new.  And that's PRISM.  And I'm going to explain what's been done differently than as far as we know anything we had before.



LEO:  Excellent.



STEVE:  Because this may be, this podcast may be viewed by people who are not regular listeners, if people want to send this link to others and so forth, I'm going to give a little bit more background to the way the Internet works than our regular listeners would need.  We've had a series of podcasts in the past famously on how the Internet works.  And of course I'll keep it brief and aim it at the point that I'm bringing.



So what we have with the Internet, the word "Internet" is interconnected networks.  The Internet itself is a global interconnection of privately owned networks.  And in some cases they may be government-owned networks.  Or, in the U.S., generally we have AT&T and Verizon and Level 3 and large carriers who then supply connectivity to Cox Cable and Cablevision and smaller carriers, and ultimately down connected to our own little network in our homes.  And this is all glued together with routers.  We've got consumer routers made of plastic in our homes; but there are, as they're called, Big Iron routers, which route vast quantities of data across the Internet.



And I'll just take Google as an example because it's so well known.  All over the world, people are sending data to Google.  They're putting Google in their browser.  They're asking Google to find them things.  They're doing searches.  Maybe they're using Gmail and establishing a secure connection to a Google server that exists in a Google datacenter somewhere on the planet.  So the way that happens is that, with all the people scattered around, they put packets of data onto their own network, the network that they're on, and the router on that network by definition is connected to at least two places.  Consumer routers are connected to their home network and to their ISP's network.  So there's only two connections.



But the router's job is to forward that data towards its destination.  So when someone at home puts a packet of data bound for Google, it goes to their router, and the router sends it to the ISP.  The ISP's network looks at the packet's addressing and says, oh, okay, it goes to an ISP router.  Now, a big ISP router will have an octopus of connections.  It'll be connected to many other routers, not just one other network, many other networks.  And so it uses its routing tables to send the packet towards Google.



And this is where the robustness and the strength of the Internet comes from is it's inherently redundant.  There are many routes to get to Google from any given place.  But there's typically a best one, and so the router will try to use that.  If that link happened to be down at the moment, the router would go, oh, and use a next-best route, maybe off in another direction that would then loop back around and eventually get there.  So that's how this works.  It's an interconnected set of networks that are connected to each other.  That is, the interconnection points, you think of sort of like a spider web where the points that the web comes together there's a router there.  And the router isn't very smart.  It knows just enough to route that data in the proper direction.



Now, there's an interesting phenomenon that occurs, which is, as you get closer to Google, more of the traffic which is being carried by routers will be Google's, as a percentage.  If you think about it.  Because the Yahoo! traffic, that went off in a different direction.  And the Microsoft traffic was headed to Redmond, and the Apple traffic was to Apple's farm, their datacenter in Cupertino or wherever.  So the idea is that, with each of these hops, as they're called, across the Internet, the packet is getting closer to its destination.  And if you think about it, the percentage of traffic that that router is carrying or forwarding will tend to be concentrated toward, for example, its destination, Google.  There will be no Yahoo! traffic if Yahoo!'s routers and their datacenter is off in a different direction.  That will have been sent out other links.  So there's a concentrating phenomenon.



And the other thing that's interesting is then to ask yourself about the question of ownership.  Who owns this data?  And again, I don't know, from a legal standpoint.  I'm coming from a technology standpoint.  But this is still the public Internet.  It was the public Internet when it was on your ISP, I mean, it was their network.  But the way this all works globally is everybody with connected networks has agreed to provide transit for, to carry everybody else's traffic.  So they just said, okay, I'll carry yours, if you'll carry mine.  And that's the way the Internet works.



But the packet that a user generated is just this little blob of bits that has an address, a source and a destination IP, the Internet protocol address that is used to send it towards its destination.  And so the wires that the packets are moving over belong to the public or private carriers of the data.  But the data is sort of -  it's public.  I mean, you've lost control of it.  You've put it on the Internet, and it's gone.  So, well, we'll come back to this because it's an interesting question about what this means that what I think it's very clear the NSA has done.



Now, as Leo mentioned a minute ago, back in '07 there was a lawsuit, and I have not had any chance to do any deep research on the lawsuit because it really wasn't relevant to this.  But it was about, I think, some privacy complaint that someone had.  Testimony was given in deposition of a technician who worked in a facility at 611 Folsom in San Francisco.  And Leo, I provided a link to a PDF to you.  If you put up the image there, that's useful.  I'm just going to read what the EFF's page has.  They summarized this, and it is - it's another piece of this puzzle [www.eff.org/NSA-spying].



LEO:  This was, by the way, another whistleblower.



STEVE:  Yes.



LEO:  So unfortunately, this is what often has to happen is somebody has to step forward, say I have knowledge of this.  This is an employee, I think, of AT&T.



STEVE:  Yes.  And in fact, a few seconds ago, while you were telling people about proXPN, I tweeted five bit.ly links to a set of documents, including the redacted testimony for national security reasons that this comes from [bit.ly/sn408a, bit.ly/sn408b, bit.ly/sn408c, bit.ly/sn408x, bit.ly/sn408y].  So the full testimony is available with photos of the door of the room I'm going to be talking about in a second.



LEO:  Amazing.



STEVE:  "AT&T's Internet traffic" - I'm reading now from the EFF's summary of this.  And this is titled "AT&T's Role in Dragnet Surveillance of Millions of Its Customers:  AT&T's Internet traffic in San Francisco runs through fiber-optic cables at an AT&T facility located at 611 Folsom Street in San Francisco.  Using a device called a 'splitter,' a complete copy of the Internet traffic that AT&T receives - email, web browsing requests, and other electronic communications sent to or from the customers of AT&T's WorldNet Internet service from people who use another Internet service provider - is diverted onto a separate fiber-optic cable which is connected to a room, known as the SG-3 room, which is controlled by the NSA."



LEO:  By the way, this is not cellular data.  This is not phone calls.  This is ATT as an ISP.



STEVE:  They - yes.



LEO:  It's important because the ISP is the - you mentioned collection point.  The ISP is the collection point for everybody.  Everything you do goes through that ISP.



STEVE:  Yes.  And the way the Internet is organized in a hierarchy is we have so-called Tier 1 providers like Level 3, like Deutsche Telekom, like AT&T, the really big carriers like Sprint.  These are - and there's, like, I think there's a small number, 20, maybe it's 12 or 25.  I can't remember the number exactly.  But there's a relatively few.  And they're sort of the - they're the networks that straddle the globe; or, for example, maybe an entire country.  And then they resell connections to their network.  They resell bandwidth to Tier 2 providers, then to Tier 3 providers in a hierarchy.  So what this is, this is a fiber-optic tap using a splitter in the Folsom building in San Francisco that makes a copy of, essentially receives a copy of all the data passing along this major trunk of AT&T.  And it goes into this SG-3 room which, as EFF writes, "is controlled by the NSA.  The other copy of the traffic continues onto the Internet to its destination."



Continuing to read from the EFF document: "The SG-3 room was created under the supervision of the NSA and contains powerful computer equipment connecting to separate networks.  This equipment is designed to analyze communications at high speed and can be programmed to review and select out the contents and traffic patterns of communications according to user-defined rules.  Only personnel with NSA clearances - people assisting or acting on behalf of the NSA - have access to this room.



"AT&T's deployment of NSA-controlled surveillance capability apparently involves considerably more locations than would be required to catch only international traffic. The evidence of the San Francisco room is consistent with an overall national AT&T deployment to from 15 to 20 similar sites, possibly more.  This implies that a substantial fraction, probably well over half, of AT&T's purely domestic traffic was diverted to the NSA.  At the same time, the equipment in this room is well suited to the capture and analysis of large volumes of data for purposes of surveillance."



Now, this came from sworn testimony by Mark Klein, which he gave under oath on the 26th of May, 2006, so a few years back.  And this is lengthy, I'm not going to go over it, but there are a few points I want - I'll just give you a sense for it.  He says, "I, Mark Klein, declare under penalty of perjury that the following is true and correct:  I am submitting this declaration in support of Plaintiff's Motion for a Preliminary Injunction.  I have personal knowledge of the facts stated herein, unless stated on information and belief, and if called upon to testify to those facts I could and would competently do so.  For over 22 years I worked as a technician for AT&T Corporation, first in New York and then in California.  I started working for AT&T in November 1981 as a Communications Technician."  Okay, and blah, blah, blah.



So he's been put in - he became involved in the installation of this room that we were just reading about.  It says:  "AT&T Corp., now a subsidiary of AT&T Inc., maintains domestic telecommunications facilities over which millions of Americans' telephone and Internet communications pass every day.  These facilities allow for the transmission of interstate or foreign electronic voice and data communications with the aid of wire, fiber-optic cable, or other like connections between the point of origin and the point of reception."



He says:  "Between 1998 and 2003 I worked in an AT&T office located on [and then it's been redacted] in [redacted] as one of [redacted] computer network associates in the office.  The site manager was a management level technician with a title of [that's redacted], hereinafter referred to as FSS #1.  Two other FSS people [blah blah blah]."  He says:  "During my service at the [redacted] facility, the office provided WorldNet Internet service, international and domestic Voice over IP," so forth and so forth.



I'm going to skip down, and he says:  "In January 2003, I, along with others, toured the AT&T central office on Folsom Street in San Francisco, actually three floors of an SBC building.  There I saw a new room being built adjacent to the 4ESS switch room where the public's phone calls are routed.  I learned that the person whom the NSA interviewed for the secret job was the person working to install equipment in this room.  The regular technician workforce was not allowed in the room.



"In San Francisco the 'secret room' is Room 641A at 611 Folsom Street, the site of a large SBC phone building, three floors of which are occupied by AT&T.  High-speed fiber-optic circuits come in on the eighth floor and run down to the seventh floor, where they connect to routers for AT&T's WorldNet service, part of the latter's vital 'Common Backbone.'  In order to snoop on these circuits, a special cabinet was installed and cabled to the secret room on the sixth floor to monitor the information going through the circuits.  The location code of the cabinet is [and he gives a number] which denotes the seventh floor, aisle 177, and bay 04.



"The secret room itself is roughly 24x48 feet, containing perhaps a dozen cabinets including such equipment as Sun servers and two Juniper routers, plus an industrial-size air conditioner.  Plans for the secret room were fully drawn up by December 2002, curiously only four months after DARPA started awarding contracts for TIA," whatever that is [Total Information Awareness].  And then we have two photos in this deposition, photos showing the room.



And then he says:  "While doing my job, I learned fiber optic cables from the secret room were tapping into the WorldNet circuits by splitting off a portion of the light signal."  And that's why the program is called PRISM, Leo.  What does a prism do?



LEO:  Oh, it splits a light signal.



STEVE:  It splits light.  "I saw this in a design document available to me entitled 'Study Group 3, LGX/Splitter Wiring, San Francisco,' dated December 10th, 2002.  I also saw design documents dated January 13th, 2004 and [blah blah blah] which instructed technicians on connecting some of the already in-service circuits to the 'splitter' cabinet, which diverts some of the light signal to the secret room.  The circuits listed were the Peering Links, which connect WorldNet with other networks and hence the entire country, as well as the rest of the world."



So here is what NSA has done.  This is installed in San Francisco.  The NSA has installed this technology, this PRISM fiber-optic tapping/splitting technology, just upstream of all of those companies named.  It is absolutely true that they probably never knew about it.  They may be finding out about it for the first time, listening to this podcast.  And I imagine it will suddenly all make sense to them.  The NSA has said they had direct access to these companies' servers.  Well, and that's the funny thing, the thing I noticed when I realized what was going on is that "server" is the only word anyone knows.  My mom knows the word "server."  Mika Brzezinski on "Morning Joe" knows about the AOL server or Google's servers.  That's in the common parlance.



The word that we should have been using is "router."  And that's not a word that people understand.  But that's the key to this technology.  As I was saying, routers concentrate data.  Somewhere, and the NSA knows exactly where it is, Google is buying their bandwidth.  And there are routers upstream of Google whose purpose it is to take the disparate packets all coming into Google and route them down fiber-optic lines which finally make the transit into Google's data center.  It is unnecessary to have access to the datacenter if you are tapping the fiber-optic line going into and out of the datacenter.



LEO:  Okay, but isn't this encrypted traffic?



STEVE:  Ah.  Well, yes and no.  So some of it is encrypted.  But, for example, how is this useful?  We all know that email has never been an encrypted technology.  Email SMTP does not involve encryption when we send email from place to place unless an individual deliberately encrypts their email.  And even if you were using Google, you may have a secured SSL connection to Google's web server when you're using Gmail.  But the moment that email leaves to go to your mom on AOL, or it goes anywhere else outside of Google, it is being sent over SMTP connections which are not, that is, SMTP protocol, which is not encrypted.  So even whereas our interchange with Google on their website is encrypted, email transiting the Internet isn't.



So all email outbound from Google is fully readable, and all email incoming to Google is fully readable.  It's certainly true, and our surveillance state is unhappy with the growing use of encryption.  But a huge, a vast, still the majority, arguably, of data is not encrypted.  And then there is other sorts of metadata.  We've talked about this on this podcast, for example, DNS queries.  When you go to a website, your system has to query a DNS server in order to get the IP address.  Well, that's typically not encrypted unless you use the service that OpenVPN offers.



So what we have is we have this system called PRISM.  We have this bunch of companies that are absolutely sure that they have never agreed to blanket eavesdropping/wiretapping with the NSA.  And I believe them.  If the NSA had reason to specifically require data that is specific to a given case, we already know they go to a court, they get a warrant, and under a bond of secrecy they're able to get the data that the company has, if any, and the company is bound not to say it.



I don't believe that's what's going on.  The fact that this is called PRISM, the fact that a prism splits light, the fact that we know from this prior testimony that there is a facility on Folsom that the NSA has been doing this - in fact, further on his testimony he quotes the specific routing technology, the gear that's being used.  There is a semantic analysis technology.  I don't know if I can find it here on the fly.  But I just tweeted all the documents that contain this information for anybody who's wondering.



Anyway, I am convinced, from everything that I've seen, that - oh, also the timeline.  This is not something you can do instantly.  This is going to take time.  So what it looks like from the timeline that we saw in one of those slides, where individual corporate entities were added to the PRISM project one at a time, that fits the facts, too.  The idea that the NSA would say, okay, now we want to get everything, all of Apple's traffic we want to tap.  Essentially what we have is wiretapping of these companies.



Now, remember that I don't know legally where this stands because this is the Internet.  You could argue that, if somebody was installing, surreptitiously installing equipment inside Google's facility, well, then it's under Google's control, and it's Google's.  All the NSA is doing is tapping the communications, which is still the Internet, it's just been filtered down so that it's nothing but Google's traffic.



LEO:  So all they really need to do is find the backbones, the big Tier 1 providers.  And you say there are about eight or nine of them?  Or how many are there?



STEVE:  Well, no.  What you need is, where you need to place the tap is as close to Google as you can get, or as close to Microsoft, or as close to Yahoo!, because you don't want a lot of other extraneous traffic.  You want to get all of that.



LEO:  I want it all.



STEVE:  Yes.



LEO:  Okay.  So would it have to be in Google's facility?



STEVE:  No.  It would be - so, no.  Google's going to have fiber that is going to be fed from their provider.  Google is buying bandwidth from somebody.



LEO:  Let's say it's Level 1.  We don't know.



STEVE:  Level 3.



LEO:  Or Level 3, I mean.



STEVE:  Yes.



LEO:  Actually, let's say it's Level 1.



STEVE:  Okay, good.



LEO:  Somebody called Level 1.



STEVE:  Somebody innocent.



LEO:  So you would then go, as the NSA, to Level 1, issue them an NSL, a National Security Letter, which means they can't speak.



STEVE:  Yup.



LEO:  And say we want to - we're just going to plug this little thing into your router.  Can you give us a room?



STEVE:  Yes.  We need, yes, we need a secret room, and we're going to staff it with our own people.  Oh, at one point the air conditioning, the air conditioner's condensation tray overflowed and was spilling water in the secret room, and it was dripping down to the floor below, so that caused some problem.  I guess they hadn't quite figured out how to drain the air conditioning condensate.  But, yeah, so give us a secret room.  So go ahead, Leo.  I want you to restate it.



LEO:  No, well, I think that you've answered my question.  So they go to the Tier 1 provider, the Level 1 or whoever it is, and say give us...



STEVE:  Well, no, they go to the bandwidth provider of the company they're targeting.  So it's not Tier 1.  It might be Tier 3.  I mean, it's like...



LEO:  Aha.



STEVE:  Because it's going to come down the hierarchy until it gets to the entity they want to tap.



LEO:  And you don't need to tell Google about this.



STEVE:  No.  Google would have no idea.



LEO:  And this gives them plausible deniability.  They may know about it, but they may just - this gives them plausible deniability.  No, no, they don't have access to our servers.



STEVE:  No, I think they'd be furious, Leo.  They're being - this is a wiretap on...



LEO:  Yeah, but surely they've figured this out.



STEVE:  Well, I haven't heard about it anywhere in the news.  Nobody else seems to have figured out what PRISM is.  And there is - this fits every fact.  It's why it's called PRISM.  They're using fiber-optic cable splitting.  And it fits the whole timeline.  They didn't just, bang, do it all at once because it's going to take time.  They're going to have to go to the individual carriers who are providing bandwidth to these companies who are - and, I mean, the only thing Apple and Google and Yahoo! represent are major social focal points.



LEO:  Right.



STEVE:  And actually, by tapping those major carriers, those major companies, the NSA is minimizing the work that they have to do because most people are going to use Google or Yahoo! or AOL and Apple and so forth.



LEO:  There's precedent for this because remember Carnivore, which was renamed after they realized it was a terrible name, which was the FBI's attempt to get every Internet service provider in the country to put a box in their - again, another focal point.  In fact, the best place to collect all this stuff is at the ISP level.  And for individuals you can get it in every respect.  And there's never really been any proof that this didn't happen.  And then of course there's the recent law which was not passed, but might well still be, requiring ISPs to collect 18 months of data for use.



STEVE:  Well, so, again, I'm...



LEO:  This all makes perfect sense.  It's exactly how they're operating, and in fact the most efficient way to do it.



STEVE:  Yes.  Yes.  This is - if the NSA had come to me and said, Steve, what should we do?



LEO:  How would I do this, yeah.



STEVE:  This is what I would design.  I would design this system.  I would say, you want to get, you know, if you need to be - you need to keep this a secret.  You want to get all the traffic coming in and out of Google.  You get as close to Google as you can.  You get on the router that is feeding Google, and you clone all of the data.  And that's exactly - and that's why it's called PRISM is that now, at this bandwidth level, they're using fiber optic cables, so it splits the light.  The power drops by 50% down each of the splits because the power of the light has been split, but that's - there's still plenty.  And so it's going to be received easily by the other end.  And then it goes off to this secret room controlled by the NSA.



And it also fits what we heard because there was - we heard that there was this notion, I mean, we heard of PRISM, that you can - or maybe it was Edward who said that you could task this equipment to find things.  So they're - so an analyst...



LEO:  Wow, smarter than just a collector, it's actually sifting.



STEVE:  Yes, yes.  And I'm looking here, if you see the link, it's klein-decl.  It's cryptome.org/klein-decl.htm.  So it's Klein Declaration.  In there he shows the documents about installing the splitter, how to split it, all of the technical details.  And he does cite the name of the company providing this - they call it "semantic analysis" equipment.  So the idea is that an analyst sitting in Langley is able to task the Google tap to select, I mean, this is a torrential flood.



LEO:  Remember, this was years ago, though.  And I would guess now, because they have such high-end storage and processing, they probably just send it all to the center; right?



STEVE:  Well, they're readying five zettabytes.



LEO:  Yeah, they'll end up sending it to Utah.



STEVE:  So why filter it?  We may miss something we want.



LEO:  Right.  Well, precisely.



STEVE:  Let's just suck...



LEO:  Save it all.



STEVE:  Yeah, suck it all in.



LEO:  You never know what you might want.



STEVE:  Yup.  And again, having the history allows them to go back and do research on the past.



LEO:  So let me - let's get clear, though.  What is it that they have?  This is no longer metadata.  This is all data that isn't encrypted.



STEVE:  Yes.  So, yes.  So, now, at this point, as far as we know, the use of SSL encryption will withstand the NSA's attack.



LEO:  But they're saving it anyway, just in case.



STEVE:  Well, they're saving it because they know in the future your computers will get stronger.  Maybe quantum computing technology will actually allow them to just collapse the 128-bit key.  I'm uncomfortable with 128 bits.  We really need to start thinking 256.  And we'll talk about that soon on the podcast because the protocols exist on SSL; but, as we've spoken about the way SSL exists, both ends have to agree.  And we've got all these banks out there who are scoring F's on their SSLLabs.com test because they're not using strong encryption.  And so the cipher string has to be agreed to by each end.



But the point is certainly there's a percentage of data that the NSA - it is encrypted.  They cannot read it.  But any email coming into Google, any email leaving Google, which is to say any non-Gmail-to-Gmail communication, does exit - and in fact maybe it still goes, if it's going off to a different physical datacenter in Google, it's going to go out over the Internet.  I don't know if Google maintains encryption of email traffic between their datacenters.



But anything, essentially everything coming and going in and out of the companies that were named, is probably now being tapped.  And PRISM is the technology that does it.  It is sitting just upstream of these companies, monitoring everything that they're doing, everything, I'm sorry, that every of their users are doing.  Anything not encrypted is subject to surveillance.



LEO:  Quite amazing.  And what you say now makes perfect sense.  I think you're right.  We don't know because, A, anybody who knows probably is enjoined from saying anything by pretty strong federal restrictions.



STEVE:  Right.  It's the only reason I can talk about it is that no one there told me anything, yes.



LEO:  But what does make sense and I think is interesting is this is probably too technical for most lay observers to deduce.  So they say "have full access to servers."  And while Google is certainly, you know, the engineers at Google are certainly smart enough to understand that this is the risk, they're not allowed to say anything anyway.  So they're going to say only what's strictly, you know, that they're allowed to say that's strictly true, which is they don't have access to our servers.



STEVE:  Yes.  And it's absolutely true.  They do not.  Unfortunately, they have access to the pipe connecting your servers to the rest of the world.



LEO:  They don't need access to your servers.



STEVE:  Yes, exactly.  And it's funny, too, because the press, in trying to explain this discontinuity between the formal statements that were immediately issued by these companies, they were saying, well, they're parsing their words very carefully, or they've got really good attorneys.  It's like, no.  They're absolutely not complicit in this.  The NSA has installed a tap in their connection to the Internet.  And the tap, I'll say again, it's on the Internet.  I mean, I don't know about the legality of this, but I was chuckling to myself because the NSA is doing this deliberately.  Google did it by mistake when they were collecting unencrypted WiFi with their mapping technology.



LEO:  Right, right.  Well, so if you want to explain this to your grandma or a layperson, it's really something that I think any layperson can understand.  You just say it's an upstream tap.



STEVE:  Yes.



LEO:  They're tapping the Internet, and as a result they're getting...



STEVE:  Where it connects to the company.



LEO:  To these companies.



STEVE:  Yeah.



LEO:  And for all we know they're also tapping it where you connect to the Internet.  So they can get you coming and going if they want.



STEVE:  Well, yes.  They would, see, again, being sympathetic to the need for intelligence, I get it that they chose these companies because they are major focal points.  So a tap located there would give them the most bang for the buck.



LEO:  And the reason we know these companies is this is one of the slides in that slide deck that Snowden released. 



STEVE:  Yes.



LEO:  However, I have to think that really it goes much wider than this because, if you're going to Level 1, you might as well just say who else connects through you?



STEVE:  Well, Leo, we already know because the article that I read was an AT&T facility.  This was tapping the so-called backbone.  This is the - remember that the way these - at the very, very top we have the so-called Tier 1 providers.  And they have what's called peering relationships with, like, so, like Level 3 and AT&T and Sprint have peering relationships with each other, where they are, because they're peers, and so they agree that they will send traffic to each other.  What we read in this testimony and on this EFF page is this was the peering pipe at AT&T going to its peers. 



LEO:  So they did it.  This is how they did it.



STEVE:  Yes.  This is the entire Internet being tapped.



LEO:  Yeah.  If you were a WorldNet user in 2007, they were listening.



STEVE:  Yeah.  Or, if you happen to be at two distant locations, and your traffic goes through AT&T on its way to another network, then it's present there.  And I just - there's one more comment I wanted to make that I thought was - I felt, I mean, I understood it, and that is that Europe is very unhappy over this.  We're sitting here, and the NSA is saying, and I don't believe them because how can I believe them now, they're saying we're only, I mean...



LEO:  No, that's obviously not...



STEVE:  I mean, their great caveat is that they're only looking at foreign people.



LEO:  Well, that's all they're technically allowed to look at.



STEVE:  Well, and that's nonsense.



LEO:  By their charter, yeah.



STEVE:  Yes, that's nonsense.  But even so, that means they're looking at everything outside the U.S.  Well, that's half of this podcast's listeners, Leo.



LEO:  And the FBI has the charter to do inside the U.S. and is presumably doing this with the help of the NSA.



STEVE:  Well, and I saw a little blurb yesterday that said that the "Finnish communications minister, Pia Viitanen, has stated bluntly that the NSA may be breaking the laws of Finland.  According to the Finnish Constitution, capturing and reading emails or text messages without privileges is illegal."



LEO:  I think it's illegal in the U.S.



STEVE:  "Viitanen plans to take up the issue with the European Commission."



LEO:  Wow.



STEVE:  "Several European countries are apparently considering unleashing Neelie Kroes..."



LEO:  Oh, she's great.



STEVE:  "...the feared European Commissioner for Digital Agenda, in an effort to fight back against the NSA's PRISM program."



LEO:  Don't mess with Kroes, that's for sure.



STEVE:  So hide under a desk.



LEO:  Oh, wow.  The mind reels.



STEVE:  And lastly...



LEO:  Yes, go ahead.



STEVE:  Lastly, in reaction to this, a site has been put up that immediately, along with the EFF - stopwatching.us.  Stop Watching Us.  It's taking signups.  There are 63 companies that have already, or organizations that are behind this.  And so I suggest that anybody who's interested - they've got a really crappy security certificate.  I was disappointed in the security certificate for the site because it's an HTTPS site.  I would like to see something better there.  But stopwatching.us is someplace that anyone can go who's interested.



And Jon Stewart is off for the summer directing a movie, so John Oliver is standing in for "The Daily Show" on Comedy Central.  His opening piece Monday night [June 10, 2013] was wonderful.  Basically summed up the political side of this with the typical "Daily Show" comedy.  So I wanted to recommend that to our listeners.  It was really terrific.  So if you can find "The Daily Show" for Monday, which would have been, what, the 10th of June, the beginning of it with John Oliver as the guest host, filling in for Jon Stewart, was great.



And, yes, Leo, you're right, the mind reels.  But at least now we know what's going on.



LEO:  The next step I would like, and maybe we'll do this on Know How, maybe you can do it, too, is telling people some simple steps you can take to encrypt your email, encrypt your traffic.  If you really, I mean, you can't hide who you're sending it to because that has to be public, otherwise it won't get there, although I guess you could use Hushmail or something like that and have private addresses, as well.  But I think this, you know, for a long time I used PGP and encouraged people to send me encrypted email.  Nobody ever did it.



STEVE:  Here's what's interesting is the polls came out yesterday morning.



LEO:  56% of Americans don't care.



STEVE:  I saw 62, 62 versus 34% of Americans say they are okay with this.



LEO:  Because it's protecting us against terrorism.



STEVE:  If it protects us against terrorism.



LEO:  Right.



STEVE:  And then there's always the conundrum, well, if you don't have anything to hide, what do you care?



LEO:  I even heard a federal official say that this week, that nobody who's a law-abiding citizen should worry about this.



STEVE:  So I was very annoyed that Google got in the trouble they did for inadvertently collecting unencrypted WiFi which was being broadcast to them in the air, when here we have the NSA that has used prisms to split the optical cables going to these major companies to install local taps.  It's just there's something wrong there.  I understand the NSA's need for the data, but - in order to find bad guys.  But they have to tell the truth.  I mean, they have to tell Congress the truth.  They don't have to tell me or you.  They have to tell Congress because that's the only way that we have checks and balances.



LEO:  Well, and they may.  They may have told the House Foreign Intelligence, and they may have told people this.  It's my suspicion that some lawmakers, not all, know about it and have approved it.  And I think this is the problem is that people want to be safe against terrorism and understand that this has to be done.  And I think the fear is, if the federal government admits to this, then the bad guys go, oh, well, that's no problem, we'll just use Cryptocat.



STEVE:  Well, here's what's really interesting, too, is imagine that you have the dragnet over all phone communications, all telephony metadata.  And three clever terrorists say, oh, well, we're going to avoid the system.  We're going to get so-called "burner" phones, you know, temporary phones.  And we're never going to give the phone number out.  We're never going to dial any other phone except these three.  And we're only going to use it to talk to each other.  Well, how suspicious is that?



LEO:  You immediately know.



STEVE:  Yes.



LEO:  Big red flag.



STEVE:  The NSA would find three little nodes with lots of connections among themselves, but nobody ever phoned into them, and they never phoned out to anyone else.  There's a little island there, and that's something to look at.  So this is phenomenally powerful, this so-called metadata, powerful information.  And as far as I know, Leo, this podcast is the first disclosure of what the NSA's PRISM program is, that it is a tap, an optical fiber tap on these companies.  I don't know what results from this.  But I imagine now Congress will know how to ask some better questions.



LEO:  I hope so.



STEVE:  And these companies will probably want to find out if this is going on.



LEO:  Yeah.  Steve Gibson is at GRC.com.  That's his website, if you want to spy on him.  He gives away many, many wonderful security tools including ShieldsUP!.  Make sure you check your Plug & Play status there with the ShieldsUP! program.  Make sure your router isn't releasing information to the outside world or access to your inside network.  You can also get SpinRite.  That's his bread and butter, the world's finest hard drive maintenance and recovery utility.  And for people with bandwidth issues, the 16Kb version of the show.  And if you would like to send a transcript to your elected officials, that might not be a bad idea, and those transcripts are made by Elaine Farris and made available on Steve's site as well, GRC.com.



STEVE:  Elaine's a little under the weather at the moment.



LEO:  I'm sorry, Elaine.



STEVE:  She didn't know when we were going to get the audio; but, if it came in time, then she thought she'd be able to start on it.  So anyway, the point is that we will have full textual transcripts of the podcast in all of its glory a couple days from now, posted on GRC.



LEO:  Good, good.  You also can go there to ask questions.  And we will do a Q&A episode.



STEVE:  Yup, I imagine we'll have lots of questions.  And we'll probably still be talking about this next week.



LEO:  Yeah.  And that will be GRC.com/feedback, if you'd like to pose a question to Steve Gibson.  We've mentioned before he's on Twitter @SGgrc.  Follow him there.



STEVE:  I was just going to say that I just tweeted five bit.ly links to these documents, to some PDF forms and these redacted and redaction-filled-in documents that exist on the 'Net.  If anyone's interested in additional information, I mean, it just - it's riveting stuff, really interesting.



LEO:  Yeah, it really is.  Thank you, Steve Gibson.  We do this show every Wednesday.  You can find us right here at 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 19:00 UTC on TWiT.tv.  Do watch live.  Lot of fun.  And you're welcome to visit us in-studio, as well.  We always have visitors.  People love to see you live, Steve.  But if you can't, we always have on-demand audio and video after the fact, not only on Steve's site, but high-quality audio MP3s and video, as well, available at TWiT.tv/sn, or wherever you get your podcasts, like iTunes.



STEVE:  I think I'm going to be up maybe in August.



LEO:  Ooh.



STEVE:  I think Jenny's going to come up to do her regular summer visit of friends, and I thing I'm going to come up, and I'm planning to synchronize it with a Wednesday so I can do the podcast in-studio with you, Leo.



LEO:  Great.  That would be a lot of fun.



STEVE:  Yeah, it would be.



LEO:  I look forward to that.  And I'll buy you...



STEVE:  Okay, my friend.



LEO:  Dinner's on me.  Or lunch.



STEVE:  Okay.



LEO:  Thanks, Steve.  We'll see you next time...



STEVE:  Thank you.



LEO:  ...on Security Now!.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.










GIBSON RESEARCH CORPORATION		http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#409	

DATE:		June 19, 2013

TITLE:		Listener Feedback #170

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-409.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson is here.  What a great show ahead.  Questions, answers.  We'll talk more about PRISM, more insight there.  You've got to stay tuned.  This is the show to keep your privacy and security up.  Security Now! is next.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 409, recorded June 19th, 2013:  Your questions, Steve's answers, #170.



It's time for Security Now!, the post-NSA edition.  Steve Gibson is here, our Explainer in Chief, the guy who does all the security and privacy and is really our guru in that realm.  Hello, Steve.  Good to see you.



STEVE GIBSON:  Hey, Leo.  Great to be with you again.  And we have largely, as expected, a follow-up to last week's blockbuster theory of how PRISM works, as I expected.  Actually I probably had double the number of email that I normally pull from the mailbag, which would have only been in half of the period of time.  So, strong response.  I've never had a response, as evidenced on Twitter, like we had to last week's episode.  So a lot of people who - our typical listener, who understands the technology that we talked about, and we talk about every week, understood this.



And actually another document surfaced.  I have a link to it in the notes today [bit.ly/sn408n].  But it's from this Narus company, which was originally an Israeli company that produced the high-performance networking filter hardware that I referred to last week.  I tracked them down after the show, and one of the - like the second page of their brochure shows a prism as - it's like, okay, yeah.  That's a little too coincidental.



LEO:  Well, and I've seen a number of articles that kind of seem to somewhat confirm, from the Washington Post and Declan McCullagh writing at CNET, that kind of confirm your hypothesis.  And I've seen nothing to negate it.



STEVE:  Right.



LEO:  So, but it was interesting because Apple put out a statement, I don't know if you were going to - I'll save, let's save this.



STEVE:  We do, we do discuss Apple's statement, and actually, unfortunately, how weak it actually is, given the evidence that they're able to provide iMessages in the backlog after the fact.  So anyway, we'll talk about that.  So inevitably we were going to see some jokes arise from the NSA...



LEO:  You know, that's how you know something's serious.



STEVE:  Yes, exactly.



LEO:  Seriously, when something - there's a guy named Jan Brunner [sp] who's an expert on urban, you know, those joke cycles, like remember the elephant in your refrigerator, the dead baby, all of these joke cycles?  And I interviewed him once, and he said it's always the most taboo subjects.  So the dead baby jokes were right about when the abortion debate was raging in this country.  And so it's a way of handling very taboo subjects in a way that is not incendiary, but lets some of the steam off.  And so of course...



STEVE:  Exactly, sort of allows sort of the pressure off of the...



LEO:  Yeah, it's a coping mechanism.



STEVE:  So my absolute favorite actually was a photo that my tech support guy, Greg, sent me.  And so there was - it was a photo of a distraught-looking woman.  And across the top it said, "My computer's hard drive crashed...."  And then at the bottom, and this explains why she's unhappy, "And the NSA won't send me their backup copy."



LEO:  [Laughing] What backup - what are you - what?



STEVE:  I liked that.  Then we have another one.  An NSA agent walks into his favorite bar.  The bartender says, "Hey, I've got a joke for you."  The NSA guy replies, "I already heard it."



LEO:  [Laughing] Excellent.  I love that.  I already heard it.



STEVE:  Okay.  And then we have crypto humor, NSA crypto humor:  Why didn't Edward Snowden ever go back to his Hong Kong hotel room to avoid the NSA?



LEO:  Why?



STEVE:  It was a one-time pad.



LEO:  As it should be if you're Edward Snowden.  Never sleep in the same bed twice.



STEVE:  Exactly.



LEO:  Wow.  Excellent, excellent.



STEVE:  So that's our humor, our opening podcast humor, consequence of last week's certainly less than humorous disclosures and our theory about the way things may be working.



In security news it was a very quiet week.  I think everybody's still in shock.  No one's doing anything, good or bad, except that Oracle had no choice but to release a critical patch update for Java.  This fixes 40 new security problems.  37 of these are remotely exploitable without authentication.  And Oracle recommends, reading from their release news, that this critical patch update be applied as soon as possible because it includes fixes for a number of severe vulnerabilities.  Note that the vulnerabilities fixed in this critical patch update affect various components and, as a result, may not affect the security posture of all Java users in the same way.  So...



LEO:  Posture as in bend over?



STEVE:  As in why, you know - oh, and there was a link, like check your current version.  So I thought, okay, I wonder what I have.  And of course Firefox said, oh, you have no evidence of Java.  It's like, yes.



LEO:  Oh, good news.



STEVE:  That's what we want.  We have no current version.



LEO:  No version.



STEVE:  Now.



LEO:  Yeah, yeah.  I was disappointed to see that, you know, I got a new Mac, and I was disappointed to see that Safari by default - happy to see Safari by default blocks third-party cookies - by default does not give you the, what is that setting that we like, Do Not Track setting.  It's off by default.



STEVE:  Right.



LEO:  And unfortunately Java's on by default.  But Apple has a very good policy, which is, if you don't use it, it turns it off; and, before you can run it, it says are you sure you want to run it.  So I guess it's probably all right to leave it on, but I turn it off.  I turn it off.



STEVE:  Yeah.  The problem, of course, is that people who don't know will just say, oh, yeah.  They just click "Yes" in order to move on to what they want.  And that's how they get owned in this day and age.



There was a piece in a Foreign Policy website.  I think our friend Simon Zerafa pointed me to it.  At first I was just going to give it a synopsis.  But as I began to read it, in order to figure out how I would pull out from it, I thought, wow, this is just all good stuff.  So I'm going to share it with our listeners.  The title is "The Suddenly Booming Business of Secretive Communications."  And of course the reason this is relevant is what has been the upshot of the revelations a week and a half ago.  So the article reads:



"For anyone in the habit of wearing a tinfoil hat, the last couple of weeks have been ones of redemption.  With a steady stream of revelations about the National Security Agency's astonishingly broad intelligence-gathering activities, conspiracy theories about its reach have been seemingly validated.  Those same raise a related question:  Are there ways to avoid the NSA's prying eyes?



"It turns out there are, for the most part, anyway.  And for the companies selling communication tools to circumvent surveillance programs, business is going like gangbusters.  Silent Circle, a company that provides encrypted email, phone, and messaging services, has seen sales increase 400% so far this month.  You can now take advantage of a 50% discount on its full suite of services.



"Moxie Marlinspike, the hacker and developer behind Whisper Systems, another purveyor of encrypted communications tools, says his service has seen a 3,000% increase in its new active user rate since June 6, when the story about the NSA's PRISM program first broke, though he did not offer specifics about the number of users the company has signed up.  Cryptocat, a free encrypted chat service" - which was of course the topic of this podcast a couple weeks ago - "welcomed almost 5,000 new users last week, and server traffic is currently running 80% above average for its 65,000 regular users, according to Nadim Kobeissi, the site's lead developer.  And Tor, a web browser" - as this site describes it, and we know what Tor is, actually, a network, anonymizing network - "that protects its users from so-called 'traffic analysis,' has seen a 17% increase in its mean daily users in the United States.  The number of users is now approaching 90,000. 



"'We are running around with our hair on fire.  It's insane,' said Silent Circle CEO Mike Janke to Foreign Policy.  Utilizing a peer-to-peer encryption tool, Silent Circle's communication tools - which include everything from email to text messaging to video conferencing - promise near-anonymity on the web.  In layman's terms, these services scramble your communications with users using a similar encryption protocol, turning your message into a bunch of gibberish for the NSA analyst listening in.



"Silent Circle's offerings are part of a burgeoning movement online to ensure user anonymity and prevent privacy breaches, but tools such as encrypted email can only do so much to fight back against the NSA.  In recent years, encryption technology has become so advanced that the agency has largely moved away from using brute-force decryption methods - that is, leveraging an immense amount of computer power to unlock a given encryption algorithm - and instead has adopted traffic analysis methods, according to Janke."  This is the Silent Circle CEO guy.



"As part of this new approach, the NSA scoops up immense troves of a given type of communication and tries to spot patterns in the usage of those exchanges.  That technique, known as traffic analysis, allows the agency to establish connections between people and groups on the Internet.  And by identifying its targets in the morass of messages, the NSA can map a given target's entire social network.  That information can often be more valuable than the content of the message itself."



And to pause here for a second, of course we noted, and I think mostly it was after we stopped recording last week, Leo, you reiterated more strongly and I thought made the very good point that the reason the NSA is sitting there tapping the communications of these major providers is they all know who their customers are, even if the NSA can't see it because it's encrypted, but they can see the patterns.  Then the NSA can go to the provider, saying, well, we know this is a customer of yours because this went down your pipe at such and such a time.  So we need to know who that is.  And then they can go to the warranted full disclosure on a targeted basis, rather than just the wholesale sweeping of content, many people saying, well, it's encrypted, so what.



Anyway, just to wrap this up, it says, "All this means that encryption tools like those offered by Silent Circle are only a first step, a reality that Janke fully acknowledges, and that email is particularly vulnerable to NSA snooping.  'Due to the physics of email'" - I'm quoting somebody.  "'Due to the physics of email, how a server needs to take that data and send it down to someone else'" - ah, it's Janke again, saying, "'it is vulnerable to metadata, and it hangs around forever,' Janke said, referring to secondary data, the contents of the 'to' and 'from' fields, say, or routing information" and so forth.



Anyway, so I thought that it was interesting that here we're seeing in the popular press, first of all, we've seen what we would expect, which is a massive rush to adopt these technologies, more so than previously.  I mean, they're out there.  They exist.  But people are like, oh, well, I'm really not sure that I need it.  Suddenly hundreds of percent increases in actual usage by people who really want to be secure.  And I ran across one that looks very nice called Threema, T-h-r-e-e-m-a.  It really looks like they've done this right.  It's secure instant messaging.  Not quite support for BlackBerry yet, but it is multiplatform, and BlackBerry support is reputed to be coming.  So that's a nice thing.



But the other thing I thought was interesting was that they're recognizing that it's possible to leverage traffic analysis, much as I talked about last week when I was trying to say, wait a minute, it's not like the metadata is not useful.  It's incredibly useful, so notwithstanding the various attempts to minimize its impact that we saw from the various people, the politicians who were the talking heads last week.



And I did, I thought this was interesting, for those who aren't following me on Twitter, there is a bit.ly link I created.  Leo, you might want to bring this up just to look at the top right of the second page.  It's bit.ly/sn408, which is the Security Now! episode number last week, all lower case, and then "n" as in Narus, N-a-r-u-s, which is the company which we're almost sure, well, we know for sure that they were the traffic analysis provider years ago in the secret NSA room at the AT&T building at 611 Folsom Street in San Francisco [bit.ly/sn408n].  There's every reason to believe that that relationship has continued.  And in fact they are now a subsidiary of Boeing.



LEO:  I like this prism.



STEVE:  Yes, there's a prism.



LEO:  Wow.  Okay.  Yeah, network traffic beam, split it into three planes.



STEVE:  Yup.



LEO:  I mean, that's not really what's going on with our PRISM.



STEVE:  No.



LEO:  But it is ironic.



STEVE:  And in fact I think actually it's probably a half-silvered mirror.  I don't know exactly how a fiber optic beam splitter works.  But I would think they'd be using a partially silvered mirror so that half the photons bounce off; half go straight through.  And so it actually is a beam splitter rather than a prism.  But prism splits a light into different frequencies, and here it is in the Narus brochure.  It's like, okay. 



LEO:  Yeah, first page.



STEVE:  You could be just a little - could be a little more subtle, maybe.



LEO:  You know that PRISM thing?  Yeah, we invented it.



STEVE:  Yeah, exactly.



LEO:  That's funny.  That's funny.



STEVE:  I did want to make a mention, just to tie this up, because I've mentioned it in the past on the podcast, did finally - the BlackBerry I was waiting for, the Q10, which is the keyboarded version of the Z10, got into the stores.  And I owned it for two days.



LEO:  Two days.



STEVE:  And I returned it.



LEO:  You lasted longer than I did.



STEVE:  Oh.



LEO:  Yeah, you got a Q, though.  That's the one with the physical keyboard.



STEVE:  Well, and I know what they did.  And unfortunately they've ruined the BlackBerry now.  So I doubled down.  I got myself a second Bold 9930, Verizon unlocked, just so I have a spare, because this is...



LEO:  You nut.  You nut.  You...



STEVE:  Hey, wait a minute.  How many MacBook Airs do you have?



LEO:  Well, I always - but I get one, I get the new one.  I get the latest, not - I don't get the old, I'm not putting old MacBook Airs in the freezer.  You crack me up.  That's hysterical.



STEVE:  What they did was they of course went, they decided, okay, everybody's going touch, so we're going to do that.  And so they designed a new OS that no longer required the hard keys that the original BlackBerry has always had.  I mean, the very, very old BlackBerrys, you'll remember, they had like a scroll wheel on the side, and you could scroll and then push in, in order to, like, select and then enter.



LEO:  That's how the pagers worked.  I loved that.



STEVE:  Oh, it was - it's a beautiful interface.



LEO:  Yeah, it was a good system.



STEVE:  I mean, one-handed, thank you very much.  And then a menuing system was designed.  The point is, yes, there's some learning curve.  But the flipside is, once you have learned it, it's the best thing there is.  I mean, it's like, it's the answer.  And that's what you want in a communications device you're going to be using, essentially plugged into your spinal cord, in the way you want to operate.  So instead they said, oh, well, we need touch.  They had that awful first attempt to do touch where the whole screen kind of clicked in.  It's like, oh, goodness, no.  So then they had the Z10, which required them to design a UI that no longer needed the little - first we went from the scroll wheel, then we went to a track ball, then to a track pad where you go - you have cursor positioning up, down, left right.  And then you push in to select, or you've got a back arrow.  And then you've got a couple hard buttons for, like, answer the phone, hang up the phone and so forth.



All that's gone.  Everything's now touch.  And it's awful.  I have lived with it.  I learned it.  I lived with it for two days.  And I brought it back.  And I said, here, hook my old one up.  It's better than this.  Oh, and it wouldn't do - the way I was able to get out of it, although I didn't really have to have an excuse, it would not allow me to have distinctive tones for my various conversations.  Any time that Jenny is sending me email or text messages, there's a Jenny sound.  And my best friend Mark, there's a Mark sound.  And we know that there's "Yabba-dabba do."  All of that is text messaging.  They lost the ability to set up individual ring tones, essentially, for those, believe it or not.  It's not there.  And it's hugely controversial on the 'Net that it won't do that.  And I said, well, it won't do that.  And they said, oh, of course it will.  Well, they couldn't make it work, either.



LEO:  Yeah. 



STEVE:  It's like, okay.



LEO:  I don't know.  Get an Android phone.  You might actually like it.



STEVE:  No, I'm done.



LEO:  I know you want a keyboard, but...



STEVE:  Unh-unh.  I need a keyboard.



LEO:  No more touch, he says.



STEVE:  And I want real buttons.  I'm sticking with what I've got.  You know, many times - look at Windows 7 compared to 8.  You know, they get it right, and then they just can't leave it alone.  And we've talked about this.  They have to keep up...



LEO:  No, that's true.  Yeah, they have to put fins.



STEVE:  Yeah, right [laughing].



LEO:  Or you won't buy a new one.



STEVE:  Now, I just wanted to do a shout-out to all the great listeners who sent me news from this morning of the fact that Canada needs PDP-11 programmers.



LEO:  Okay.  Why?



STEVE:  Turns out their nuclear reactors have robotic systems running on PDP-11s.



LEO:  Sure.  Not a surprise, no, yeah.



STEVE:  And they're going to until 2050.  Two zero five zero.



LEO:  Hey, if it ain't broke, don't fix it.



STEVE:  Exactly.  And...



LEO:  Of course you can't fix it because nobody knows how to write software for it.



STEVE:  No one knows how to program it anymore, right.  So it's like, okay, just leave it alone.  But I guess maybe they do need to add some features or, god help me, they...



[Talking simultaneously]



LEO:  ...code fixes.  Maybe they want to get it ready for the year 2000.



STEVE:  Well, so they're looking for PDP-11 programmers who can also train several...



LEO:  Wow.



STEVE:  They're saying 2050 is several generations of programmers.



LEO:  Yeah.  Kids being born today will need to know how to write code for PDP-11s.



STEVE:  Now, I figure if I keep taking this level of supplements that I am...



LEO:  It's only 37 more years, Steve.



STEVE:  I'm going to be there.



LEO:  You'll be 90.  It's good.



STEVE:  When they decommission those, I want those PDP-11s.  I can get a bigger refrigerator, Leo.



LEO:  Now, do they - what language are we talking?  It's not assembler.



STEVE:  Yes, specifically stated assembly language programming.



LEO:  Aw.  But that was, as you said, a very nice orthogonal instruction set, simple, yeah.



STEVE:  Oh, my god, it's just beautiful.  It's a beautiful instruction set, yeah.



LEO:  They should learn it.  They should learn it.



STEVE:  Yeah, I have PDP-11s so that I can spend some time programming.



LEO:  I know you do.  That's what those blinking lights are back there.



STEVE:  No, those are 8's.



LEO:  Oh, I'm sorry, pardon me.  Oh, how could I be so stupid?



STEVE:  Yeah, we've got - they're going to have to be later.



LEO:  You should send them a note.  Do you need any "8" programmers?  We're not dead yet.



STEVE:  And we already talked about it.  I have notes here.  We already talked about "Man of Steel."  Without a spoiler, and this doesn't spoil anything, I loved the first three quarters of it, and I just was annoyed with the latter...



LEO:  I'm exactly with you.



STEVE:  Yeah.



LEO:  It felt like I was watching "Transformers" 3 or 4.



STEVE:  Yes.  It was really just - it was ridiculous.



LEO:  Yeah.



STEVE:  So, right.



LEO:  Did you catch all the - and this is not a spoiler, either.  And I guess this is not unusual, it was in "Superman Returns," too, all the kind of crypto Christian, you know, he's 33 years old.  He emerges like this.  There was, in fact, apparently in the early days of Superman, the first Superman that Shuster and Kane were writing, his mother's name was Mary.  They changed that to Martha.  But there's a - as I'm watching it, I'm going...



[Talking simultaneously]



LEO:  And then at one point General Zod says "I am evolution.  This is - evolution will win."  And Superman responds by punching him out.  So it was kind of interesting.  I don't know what it means.  And it was apparently even stronger in "Superman Returns," which I missed.  But Superman is a god, after all; right?  They say that over and over again.



STEVE:  Oh, watch "Superman Returns."  It's got a fabulous opening sequence.  Oh, goodness.  I mean, I've watched it, like, seven times.  It's just wonderful.



LEO:  I do love, and I'm with you, and I think you and I might be...



STEVE:  Well, I love mythology.



LEO:  Yeah, but you and I might be in a small minority because a lot of people didn't like - the people who liked "Superman" didn't like "Man of Steel" as much.  I like how it was shot.  I like the grittiness of it.  It feels like the film was processed.  It's very grainy.



STEVE:  Yes, I agree.  I thought it was - I liked everything about it until this ridiculous extended battle scene.  It's like, eh.



LEO:  They could have left that out.  I have to agree.



STEVE:  And also it made a huge amount of money.  It was $125 million in its first weekend.



LEO:  Oh, yeah, very big opening weekend, yeah.



STEVE:  And unfortunately, "Iron Man 3," which was also ridiculously violent in the same way, was similar.  So maybe that's what they have to do now in order to cross the million dollar threshold, the hundred million dollar threshold.



LEO:  Yeah, people want - and it's kids.



STEVE:  It is.  It's not our...



LEO:  It's not us old farts.  It's young people.  They want all of the action.



STEVE:  Yeah.  I'm going to completely miss "Pacific Rim."  I am not - that doesn't even get in.  I'm not even going to try.



LEO:  It looks like a lot of blowing things up on that one, yeah.



STEVE:  Oh, it is, actually, just transformers, robot-controlled transformers.



LEO:  Yeah, right, yeah.



STEVE:  It'll sell in Japan, I think.



LEO:  Yeah.  I've never been a fan of comic book movies.  I have to say I liked "Man of Steel," and I liked how they handled the back story.  I didn't even - people complained about the first 40 minutes on Krypton, and I actually liked that stuff.



STEVE:  Oh, it was wonderful.



LEO:  I thought that was quite good.



STEVE:  Yes.



LEO:  But you and I are the only ones, I guess.



STEVE:  Yeah.



LEO:  All right.



STEVE:  Now, I got a neat tweet from someone who said, "Steve, I would normally thank you for the fact that I have lost 50 pounds and have kept it off."



LEO:  All right.



STEVE:  And he's of course referring to getting rid of starch from his diet.  He said, "However, mostly I want to thank you for 'Justified.'"



LEO:  "Justified."  What was that?



STEVE:  That was - it's the...



LEO:  Oh, the show, yeah, yeah, yeah.



STEVE:  It's the series on FX...



LEO:  Love it.



STEVE:  ...which I turned a bunch of people on to, and they're like, oh, my goodness.  I mean, it is really excellent.  So I have another one.  I just finished watching the first two seasons of this in a multiday marathon.  They're both out on disk.  I bought the Blu-Ray on the first season, the DVD the second season, but of course you can get them wherever you get your media.  And this is an AMC production called "The Killing."



LEO:  Oh, yeah, that's - whoo.



STEVE:  Oh, Leo.



LEO:  Yeah, yeah.  That's free on Amazon Prime for people.



STEVE:  Oh, my goodness.



LEO:  I bought it, too, and then I found it on Amazon Prime streaming for free.  But, yeah.



STEVE:  It's top - my top recommendation for incredibly good television.  Again, Jenny recommended it to me.  She said, "Steve, you've got to watch this."  The third season is now airing.  So my box is recording Season No. 3 and has been.  Meanwhile, I watched the first two seasons.  Oh, goodness.  I mean, it is - so I read one comment that referred to it as sort of like reminiscent of "Twin Peaks" without the crazy.



LEO:  Yeah.



STEVE:  And I thought, well, that's interesting because the music is sort of reminiscent.  It's a murder mystery, so it has that in common with "Twin Peaks."  And but the writing and the acting, it is spectacular.  So anyway, I just wanted to, for people who care about my opinion on these things and have succeeded in following it in the past, "The Killing" on AMC is, oh, wow, it's really good.



LEO:  It's a Danish TV show.



STEVE:  Well, it's based on a Danish series.  And so it's a remake of...



LEO:  Oh, yeah, yeah, yeah.  But it's from a - yeah, yeah.



STEVE:  Yes, absolutely.



LEO:  It's not actually Danish, yeah.



STEVE:  And I had a - I ran into, in the mailbag, a question and comment that opens up a topic that I sort of started, I stepped into last week when you were asking me about SpinRite and Mac.  And this is Stuart Rawling in Merced, California.  He said, "Steve, great to hear you're working on an OS X SpinRite.  I have a late 2008 iMac with a failing hard disk drive that was a part of a recall from Apple that I missed.  I'm not sure of the exact nature of the failure the Seagate drives are having," which apparently were being recalled, "but I'm suspecting that running SpinRite on Level 2 may be sufficient to prolong the life of the iMac.  I'm currently toying with replacing the hard disk drive with a solid state drive, but would be willing to give any beta of SpinRite a try to see if it makes a difference before I do so.  Of course, I have this fully backed up, Time Machine, Carbonite, et cetera, et cetera.



"I'm already a long-time owner of SpinRite and the proud owner of a hard disk drive that was previously completely recovered, and I would be more than happy to buy another copy to pay you for your additional work that you are undertaking for the Mac version.  This offer stands with or without a beta.  So make sure this does not go the way of CryptoLink.  Cheers, Stuart."



Okay.  So I have a couple things to say because many people have been excited by the news of a Mac version.  So, first of all, there will not be a Mac version.  It will just be the one SpinRite, which will now also work on the Mac.  So there actually is no need for there to be a SpinRite Mac.  So the good news is, for people who are multiplatform, you'll be able to run the one version you get, you'll be able to run on everything.  And that's of course because all I care about is the chipset, is the underlying Intel processor which the Macs that are Intel Macs are able to operate on.  So this will not work on a PowerPC Mac, and I'm sure there will never be a SpinRite for PowerPC-based Macs.  But I can do it relatively easily for Intel Mac because I'm bringing my own OS along.



Relative to betas and so forth, I'm going to handle this the way I did SpinRite 6, which is it's being developed right now pretty much in the open, I mean, in an open, public dialogue over on GRC's news server.  There's a newsgroup, grc.spinrite.dev, and we've already got people playing with code right now.  It's not SpinRite code.  I just finished some code to fully enumerate the PCI bus in order to find all the mass storage controllers because it turns out that there are - the newer controllers have a mode of operating called AHCI, which is the Advanced Host Controller Interface.  And then there's IDE and ATA and DMA and Ultra DMA and all this.



So I'm working on code to begin to sort of create the low-level technology which will allow SpinRite to bypass the BIOS.  And we'll have code running as I'm writing my own drivers.  And this will all be tested in the open.  So if anyone's interested, this is the GRC discussion groups that we've had for a decade.  And there is a SpinRite development subgroup off the SpinRite group, and it's open.  Anyone who is interested is welcome to join us over there.



The way I handle pre-release is that, if you're an existing owner, you'll be able to use the URL that we can provide you, that we do provide you, to download your copy of SpinRite anytime, and you just change the URL, and you'll be able to get pre-releases of this.  I'll let people know what's going on.  People in the development group will always know what's going on.  But so essentially I've got the existing licensing technology which has been in place.  We use that, for example, to allow people to download SpinRite 5, if they actually want to run it on an 8086, because in SpinRite 6 I began using 32-bit code much more aggressively, and so we ran across people that actually still had non-386-based hardware.  And it's like, oh, okay, you can have SpinRite 5.  You just change the URL to a 5, and then you get a copy of SpinRite 5, using the same approach.  So we'll be doing that and, therefore, allowing people to play with SpinRite as it comes along.



And I actually am deliberately planning several releases of SpinRite because doing the native USB support is probably going to take a lot longer.  There doesn't seem to be the same uniformity in USB chips that there are in the hard drive chipset.  So SpinRite 6.1 will have a whole bunch of new features, including it'll support the Mac and support all the latest hardware, large-format hard drives, UEFI file systems and BIOSes and so forth.  But I'm going to deliberately not delay that in favor of working on USB.  That'll be probably 6.2.  We thought that 6.2 was going to be the AHCI controller, which is a far more sophisticated controller than IDE, except it turns out all the - and this was the result of this weekend's, this past week's and weekend's experiments - all the AHCI controllers can be told to behave as an earlier generation controller, so I'm not going to have to explicitly support AHCI nearly as soon as I thought.



So the point is, since it's all going to be free, and that's the answer to Stuart's question, is I'm not going to charge anybody for this.  I'm happy to do it.  I'm enjoying it.  I'm happy to keep SpinRite alive, and everyone has been supporting me by buying SpinRite.  So this I how I return that favor.



LEO:  Very nice.



STEVE:  And I'm glad to do it.



LEO:  Very, very kind, Steve.



STEVE:  And consequently, since it's free, I don't have to hold everything back waiting for one big release.  I can release it sort of incrementally as I get chunks of work done.  And it's looking like it will be able to do - I have done a Level 2, 2TB drive in five hours, and I'm going to be able to make it faster than that because we'll be using much larger buffers and something called "extended real mode," a different way of allowing the real mode instruction set and chip to access all of the machine's memory, to use 32MB buffers rather than 32K buffers.  So anyway, if anyone wants to follow along, it's grc.spinrite.dev.  You do need - we do not have a web browser interface.  We use old-school NNTP, the Network News Transfer Protocol.  But, for example, the Mozilla folks have an NNTP browser.  And even Outlook, I think, is able to do old-style newsgroup, which is really a terrific way of operating.



So that's what's going on.  I'm working on it.  There's no way it's going to go the way of CryptoLink.  I should mention that, I mean, I stopped CryptoLink because I felt what was happening with encryption.  We keep seeing there being this tension where the government is beginning to - is still making noises about wanting to force backdoors on any encrypted technology.  And so it may well be that a commercial encrypted solution won't be viable unless it has a backdoor.  And I just have no interest in doing that.  So anyway, SpinRite needs some more of my time, and I'm happy to give it to it.  That's all I'm working on now.  So I'm - and I'm really enjoying it.



LEO:  I'm thrilled to hear it.



STEVE:  And I saw a tweet that I just wanted to comment on.  Someone sent - he said, "I listened to the Distributed Hash Table episode [SN-398] of Security Now!, and it was an hour and a half before getting to the main topic."  And so I just wanted to say, you know, the whole podcast is the main topic.  Everything we've been talking about, and all of the news of the week - and obviously this is a Q&A, and we're about to get to the Q&A.  But this is what we're offering, not just whatever we happen to be focusing on on our non-Q&A weeks.  So sometimes we have a lot to talk about at the top of the show; sometimes we don't have that much going on.  So we just play it by ear.



But I know that our listeners have sent a lot, we've had a lot of feedback saying they just love the whole thing.  I mean, they love us talking about what's going on with the strong sci-fi and security and science, and sometimes it's how capacitors store a charge, and what supercapacitors are.  I mean, we've had very popular podcasts where our top-of-the-show stuff hasn't even been about security.  So that's what we do.  And I think we're largely giving people what they want.



LEO:  And I might point out that there is something called a fast-forward button on almost all podcast players.  And I, personally, I won't spank you if you fast-forward.  It's quite all right.  So you can go to any part of the podcast at any time.  Just think of it as an extra, extra jam-packed, full-of-goodness show, and listen to the parts you like.



STEVE:  Yeah.



LEO:  I can't - I don't even understand why somebody would complain that it's an hour and a - I don't even understand that.  Just go to where you want it to begin.  Which is very odd to me.  It's like, I was forced to listen for 90 minutes.  I don't understand.  Go get some fresh air, kid.



STEVE:  Yeah.  I think he actually likes the whole thing.



LEO:  Yeah.  I think that's probably it.  That cracks me up.  Now, on the other hand, if you're watching live, you're stuck.  That's why we want you to watch live.  You have to watch, and you have to listen to the commercials.  And I don't think that's a problem at all.  All right.  Are you ready for some - and by the way, we thank them for their support of Security Now!.  Are you ready for some questions, Steve?



STEVE:  You bet.



LEO:  Let's see, here.  Question Numero Uno comes to us from Chiang Mai, Thailand.  Wow.  That's cool.  Bill Dahm wonders about DNS order of precedence.  Oh, this is a good question.



STEVE:  Yeah.



LEO:  Could you explain the order of precedence in determining the application of DNS settings?  Which of these three, the OS on the computer, the modem settings, or the router setting, gets to call the shots as far as DNS is concerned?  My setup is as follows:  I have both a Mac desktop and MacBook Air.  I also have a CP-Link modem and an Apple AirPort Express WiFi router.  I have a single Ethernet connection between the modem and the router, so both of my computers utilize the WiFi connection.



I can see DNS settings in each of these configurations.  The question is which one should I be using to control my DNS settings?  Maybe not even that, but which one will the computer use?  I'm not sure if I can change the DNS setting - I haven't tried, though I see that they're in the configuration settings - of the modem since it was supplied by my ISP.  If I can't, is it game over?  If I can, and I know I can change the network setting on my Macs, of course, and my AirPort Express, where would be the best place to do this?



This is a great question.  You know, I'll add to this because I just got the new AirPort Extreme router from Apple, the 802.11ac version.  And I took that as an opportunity to put OpenDNS in my DNS settings in the router.  I've always used DHCP on the computer, so I know at least the computer's not overruling it.  But he raises a good question.  What if you have a router that's supplied by your cable company, and it has its own settings?



STEVE:  So, okay.  In Bill's case, what he described to us is sort of a three links in the chain; right?  He's got a modem and then a router and then his computer.  The way to think - I think the best way to conceptualize this is as sort of a, I don't know, like a waterfall or a linked chain.  The idea is that, if you leave everything alone in its - everything in sort of the default, the DNS servers are provided by the ISP.  And so when devices get turned on, the device nearest the ISP asks the ISP for its information.  And this uses a protocol called DHCP, Dynamic Host Configuration Protocol.  So the device closest to the ISP says, hi.  What should I use for my IP?  What should I use for my DNS settings?  And is there anything else I need to know?  And so sort of the furthest away entity, the ISP, provides that to the next closest to you device.



And then, in turn, the next closer device says to that one - asks the same question:  Hi there.  What should I use for my IP?  What should I use for my DNS settings?  And so that device gets them from the one next upstream in the direction of the ISP.  And similarly, when you turn your computer on, it says to your router, which is typically the thing the computer's connecting to:  Hi there.  What should I use for my IP, and what should I use for my DNS?  So it's sort of a hierarchy of the same question being asked each stage up the chain.



Now, again, if everything is left alone, then the typical default is to ask for your IP and ask for your DNS settings.  And that's probably across the world what the vast majority of systems are doing.  But our listeners know, for example, they say, well, my ISP's got really slow DNS servers.  I want to use OpenDNS.  So they know that they can change - in Windows it's called "Obtain DNS settings automatically," or I will provide the DNS settings.  And Apple certainly has the same ability to override the automatic sort of waterfall of the DNS settings coming from each level down to the lower level.  You can say, no, I don't want the automatic ones, I'm going to put in my own.



Now, you could do that on each computer, and then the computers would ignore what the router was saying.  Or, if you are able, and Bill wasn't sure he was, but he saw these settings in the router, if your router lets you change them there, then the benefit is you don't have to also change them on all of your computers.  That is, you sort of stop the waterfall higher up in that chain, and then everything downstream of that point, where you say don't be automatic, don't accept the setting from who's upstream. I'm going to override it at this stage in this hierarchy, in this chain, and then everybody below will use those.



So, for example, if the modem allows you to set those, that is, set the DNS, then the router would ask the modem, and it would get the ones you set.  And your computers would ask the router, and they would get the ones you set.  So I think that's really the best way to think about it is that, when everything's automatic, those settings propagate from the ISP all the way down to the computer.  And anywhere in that chain you can say, oops, stop listening, stop asking upstream.  I'm going to tell you the answer I want for everything downstream.  And so there's a sort of a comprehensive answer to that question.



LEO:  Good.  Easy enough.



STEVE:  Oh, and my goodness, I just saw the name on Question #2.  Have you seen the video, Leo?



LEO:  I did.



STEVE:  Oh, lord.



LEO:  So weird.  He has turned - he's turned into the "Two and a Half Men" guy.  Winning.



STEVE:  Okay.



LEO:  Blessedly blanked his name out.  Charlie Sheen.



STEVE:  Charlie Sheen.  Now, okay.  Now, we can't air it on the podcast.



LEO:  Oh, it's full of profanity and sexuality.  We're talking about John McAfee.  By the way, the one good thing about that video is I now know how to pronounce "McAfee." 



STEVE:  Although he doesn't tell us how to spell it, although we do know how to pronounce it, yes.



LEO:  Right, right.



STEVE:  So, yeah, it's not Mc-AF-ee, it's MC-a-fee.



LEO:  McAfee.



STEVE:  Yes.  Now, so for our listeners...



LEO:  And it is him, by the way, and it's just weird.  He does a video on how to uninstall McAfee.  He says, "I wrote this great program, this simple little program, 15 years ago.  I haven't had anything to do with it in 15 years."  In fact, IBM owns it now, I think.  Oh, no, I'm sorry, Intel owns it now.  But so he cashed out 15 years ago.  And so he says, "But I keep getting email all the time from people saying, how do I uninstall McAfee?"  There are scantily clad women, much profanity.  There's a fake nerd who supposedly is telling you.



STEVE:  There's a face full of cocaine.



LEO:  No, it's not cocaine.  You'll notice the soap, the bath salts boxes.



STEVE:  Oh, I saw - oh, okay.



LEO:  That's what he was into was inventing this new thing called "bath salts."  And he gets high in it.  And eventually - there's lots of guns, and eventually he shoots the computer and says, "That's how you uninstall."



STEVE:  But it is the most bizarre thing.  You know, we...



LEO:  It's not funny, I don't think.  But lots of people found it funny.  I thought it was sad.



STEVE:  We shared the bizarre adventures in Belize and his blog that he was doing for a while, where it was just stranger than truth.  But anyway, so...



LEO:  He's Charlie Sheen.  He's become Charlie Sheen.



STEVE:  So it's...



LEO:  Winning.



STEVE:  For people who think they might enjoy what Leo just described, it is - really you have to see it.  It's bizarre.



LEO:  It's on YouTube, and you can search for "YouTube John McAfee."



STEVE:  Yep, John McAfee.



LEO:  He's got his own channel.



STEVE:  Wow.  Well, maybe there's more...



LEO:  [Groaning]



STEVE:  Oh.  So our listener said my name is - this is John McAfee.  And he says, "No relation, thank god."  And this was before - maybe this was after the video.  Maybe he knew about the video.  I don't know.



LEO:  You don't have to.



STEVE:  No.



LEO:  Actually, in some ways he's more coherent than I thought he would be, McAfee.



STEVE:  He, yes, I agree.  It's like, okay, well...



LEO:  He's not quite as out of it.



STEVE:  He's very, very serious.



LEO:  And at least is making fun of himself a little bit.  I think.  It's hard to tell.



STEVE:  I found myself thinking, oh, my.  I actually spoke with that guy on the phone once.  It's like...



LEO:  Did you really?



STEVE:  Oh, yeah, because...



LEO:  That was a different guy.



STEVE:  Because I was writing the InfoWorld column, and I made up three columns about the theory of viruses, and he assumed I had them.  So he wanted copies of mine.  He wanted to exchange them.  And I said, I'm sorry, John, I just - I'm a programmer.  And in the same way that I know how I would bug companies if the NSA told me to, I know how I would write viruses if someone told me to.  There's only one way you do these things, or the best way you do them.  And so he was disappointed he couldn't get copies of viruses from me.  This is back when he was actually writing antivirus software.  I don't know if he was ever actually a programmer.



[Talking simultaneously]



STEVE:  I don't think he's a...



LEO:  I don't know what the story is.



STEVE:  I think he's a systems guy.



LEO:  Yeah, I don't really know.  Supposedly he started writing this to target a specific virus at his place of employ, and it became an application.  But I don't know.



STEVE:  Well...



LEO:  Read the Wikipedia article.  That's - who knows how accurate or whether he's gotten into it or not.  I know he's gotten into the bath salts.  So this John McAfee of Oakland, who's no relation, and probably...



STEVE:  Our John McAfee.



LEO:  And he probably pronounces it Mc-AF-ee, just to be different.



STEVE:  Yeah, so people won't say, oh, my god.



LEO:  Yeah.  Steve and Leo, fascinating podcast last week, the best one ever.  But you never told us where "zetta" fits in with mega, giga, and tera.  Oh, and let me see if I know.  There' a megabyte, gigabyte, terabyte, peta - what's after terabyte?  Petabyte?



STEVE:  Yes.



LEO:  Exabyte.



STEVE:  Yes.



LEO:  Is it zettabyte next?



STEVE:  Yes.



LEO:  Okay.  And then there's just zottabyte, isn't there?



STEVE:  No, there's yotta.



LEO:  Yottabyte, that's it, yottabyte.



STEVE:  Yottabyte.



LEO:  Okay.



STEVE:  Okay.  So we know mega, giga, and tera.  And so each of these is a 10^3, so comma zero zero in English notation.  So we've got - we all know a terabyte is like - now big drives have terabyte-sized platters.  So, and the reason this came up is that the NSA storage facility outside of Utah will be able to store five zettabytes of data.  So that is five billion terabytes.



LEO:  Five billion terabytes.



STEVE:  Five billion terabytes.



LEO:  So you know that terabyte drive, or maybe you have a 3TB drive, you're, like, living large in your computer?



STEVE:  Yeah.



LEO:  Imagine at several billion of those.  Wow.  Billion.  Not zillion.



STEVE:  Five billion terabytes.



LEO:  You can find, of course, Wikipedia has all of the definitions, if you really wanted to know.  So let me just - and by the way, if you go the other direction...



STEVE:  You mean mic...



LEO:  Yeah, nano, micro and all of that.  There's a whole thing for that, too.



STEVE:  Yeah.  Milli, micro, nano, pico...



LEO:  Pico, that's right.  I don't know what's after that.



STEVE:  Really small.  Really tiny.



LEO:  There's IEC binary preferences, too, which are different.



STEVE:  Oh, of course.  Really?



LEO:  It's a, yeah, kibibyte.



STEVE:  Oh.  Oh, okay.



LEO:  And a mebibyte and a gibibyte and a tebibyte and a pebibyte.



STEVE:  Well, and the other problem is there's always been this, is it a thousand, or is it 1024?



LEO:  Right, is it binary, or is it...



STEVE:  Yeah.  And some of the, I mean, there's been some controversy with, like, hard drives because they just squeaked out all zeroes.  They weren't able to squeak out the 1024 binary size K.  They used the decimal size K.  It was like, yeah, okay, well, that's cheating.  But, you know, maybe not.  I don't know.



LEO:  I'm pleased that I was actually able to remember that order.



STEVE:  Very good job.



LEO:  I forgot kilobyte, which is where it all begins.  Byte, kilobyte, and then on.



STEVE:  Yup.  Yup.



LEO:  Good question.  How many libraries of Congress - now, I don't know how big the Library of Congress is.  Somebody told me once 7TB.  So it's roughly a billion Library of Congresses.  A billion Library of Congresses.  A billion.  Isn't that - yow.



STEVE:  Yeah, of, like, nonsense.  I mean, of, like, just crap.  It's just crap.



LEO:  Well, that's the other thing.  It's not...



STEVE:  It's just like it's, we're going to record every - all the noise on the Internet, and then...



LEO:  Yeah, good luck.



STEVE:  ...we'll filter through it.  Okay.



LEO:  That's, to me, that's hubris.  That's overweening pride.  We do it because we can.  Joeri Sebrechts in Belgium wonders, is SSL secure if the certificate authorities cooperate?  Steve, thanks for your podcast about PRISM.  Very informative.  I can imagine how people outside of the U.S. must feel about this.  Geez, Louise.



STEVE:  Yeah.  Yeah.



LEO:  One thing I was wondering, and maybe it's my lack of understanding of SSL speaking here, why SSL offers any protection at all?  Wouldn't it be possible for the government to get the private key from the certificate authority and decrypt the traffic when they splice it?  Suddenly JavaScript-based encryption doesn't seem so crazy to me anymore.



And along with that comes Jimmie Andersson from Sweden - what an international show we have here today - wondering about SSL encryption:  Thanks for your great podcast.  What would happen if the NSA got a copy, for example, of Facebook's SSL certificate?  Wouldn't they be able to decrypt all the traffic into and out of Facebook?



STEVE:  Now, these, I think, are very important questions.  First of all, let's talk a little bit about the protocol of SSL because it is secure against eavesdropping, even if you have keys.  And that's important.  So the keys, the public keys that these questions are worried about are used for authentication.  And let's remember that.  Authentication  only proves that you're talking to who you believe you are.  It is the authentication that prevents the man-in-the-middle attack, where somebody intercepts the traffic and then can view it and alter it and then send it on.  So authentication is separate from privacy.  We need to keep those two things separate because they are cryptographically almost unrelated to each other.  You can easily have one without the other is my point.



Now, the way the SSL protocol works is it is secure against eavesdropping, meaning, and we've talked about this many times, each side generates a pseudorandom number that's with a high level of entropy so it cannot be guessed, and it's back - it was because some random number generators used to be poor that SSL, that was an SSL vulnerability that eavesdroppers could take advantage of.  We've solved those problems long ago.  So they each generate a random number.  And they send a derivative of what they each generate to each other.  And through that exchange, and then combining it with the information they did not disclose, they each are able to arrive at the same private key, the same symmetric key, which is then used for the crypto.  The point is, though, nobody monitoring, nobody who is a passive eavesdropper gains any useful information from that.  So that's key.  So as long as the conversation is eavesdropped on and not intercepted, we're okay.



Now, as far as we know, this is all passive eavesdropping.  The technology that we believe they're using for hardware, the concept of a fiber optic splitter, now, this is all passive monitoring.  And, boy, it really, I mean, that's caused enough trouble.  Can you imagine if the government were actually intercepting connections and performing man-in-the-middle attack?  But that said, it is chilling, I think, to recognize the legal authority that the U.S. intelligence agencies have been given to compel private commercial entities to divulge information on the grounds that it's required for national security, and those agencies are prohibited from disclosing that.



Now, of course in the news since, there's been a lot of conversation about these agencies really pleading for the government to let them talk, to let them talk about the national security letters that they've been receiving.  And I know that that's been a focus of yours, too, Leo, for some time, I mean, that aspect of it.  But also remember that a certificate authority never receives the private key of the entity whose certificate they're signing.  They're signing the public key to say, yes, we're asserting with our certificate authority integrity, that this public key belongs to, for example, Facebook.  They never see or get the private key.  Facebook - well, because they don't need it.  Facebook holds onto that very closely.  And in fact it's Facebook's private key that allows them to make their assertion, coming in the other direction, that they are Facebook because nobody has Facebook's private key.  It never needs to leave Facebook's control.



Now, Jimmie, the second question, said, well, what if the NSA got Facebook's private key?  Well, then they could pretend to be Facebook.  I mean, they would be Facebook, for all intents and purposes.  And that's been, you know, we've talked over the years about various private key leakages which have occurred.  And the industry immediately reacts.  All the browsers instantly revoke those certificates.  I mean, Google, because it's open source in the Chrome browser, we see the list of absolutely assertively revoked certificates.  Never allow any of the following certificates to be regarded as secure.  Microsoft has a certificate manager, and you can see in there a list of revoked certificates.  DigiNotar is famously there.  And even, embarrassingly, some Microsoft certificates that in the past have gotten loose which are affirmatively revoked.



So Joeri finishes saying, "Suddenly JavaScript-based encryption doesn't seem so crazy to me anymore."  And I would say, for listeners to our podcast, what we've always been talking about:  Pre-Internet encryption means you are not only relying on your connection security.  You are relying on encryption that you control absolutely, with a long private key that isn't relying on any other entity.  And ultimately I think that's where we come back to.



This Threema instant messaging client, T-h-r-e-e-m-a, looks really interesting to me.  I think they've really done it right.  They have varying levels of security, and they grade the security that you've established with the other endpoint.  And, for example, the highest level of security you get when you put your phones together and they scan each other's barcode, physically being in proximity in order to perform the secure endpoint negotiation they need in order to never have had this information go through a nonsecure channel.  It's going visibly through the air only when these phones are together.  Anyway, I'm hoping that they're going to be adding more support, as I said.



But this is an important question, I think.  It absolutely puts a chill on the whole, I mean, all of this, what we've learned about the depths to which the NSA has "obtained authority," and I put those in air quotes, and the weakness of the public key infrastructure from certificate authorities up, and what it is that they may be compelled to divulge.  And the fact that we've been - we know we've been relying on a system which requires absolute security, absolute watchfulness, which the bad guys have wanted to penetrate and have successfully penetrated.



Unfortunately, maybe it's not just the bad guys.  I mean, I don't - I'm not doing conspiracy theories here or anything.  And I think it would be very difficult to imagine that it would be possible for law enforcement to make a case that they should get access to the public key infrastructure.  But we also know that they're really, really unhappy that, as they say, the Internet is going dark.  And we've got some questions that highlight that aspect of it that we'll be getting to here next.  So their answer to being unhappy is generally to solve that problem.  And it's like, oh, great.



LEO:  Jason in Texas says:  NSA spying, how can I protect myself?  I've been listening to the show for a long time, and from everything I've learned from you I have many ideas about what I can do to protect myself.  But I'm hoping you'll talk about this present instance in particular.  What are your thoughts on combining VPN with Tor?  VPN before Tor or after Tor, or even is it a good idea to combine VPN with Tor?  Go ahead, Tor.



STEVE:  Yeah.  And this is representative of many questions that I saw, so I just chose Jason's.  The thing that stood out here is that there are many VPN providers that will not let you use Tor, for whatever reason.  I don't know what their logic is.  The Tor network doesn't prohibit you from doing anything you want to.  So the VPN, in order to - in order for a VPN to block you, you'd be connecting to their server, and then their VPN server would have to refuse to allow you to then run through the Tor network.



Turning this around, if you use Tor first, then you'd come out of the Tor network and attempt to connect to the VPN server.  And so again, the VPN provider would have to be refusing to accept a connection out of a Tor endpoint.  I have heard anecdotal reports that people have had problems using both a VPN and Tor through some policy-based blocking on the VPN side.  I just haven't pursued it any further because it felt a little bit tinfoil hat to me, though I can recognize someone's concern.



From a broader basis, Jason is saying, how can I protect myself from the NSA spying?  And I don't have a good answer.  I mean, I don't think you can.  I think what one of the takeaways from last week's podcast was - and the reason we did it, I mean, the reason, what we try to offer here is the technology and the solutions that that technology implies and solutions that are available thanks to the technology.  We just looked at the possible compromise of the public key infrastructure.  Not, I mean, seems very unlikely to me.  But it's possible.  And unfortunately, one of the things we always see is what is possible ends up happening.



So this is why I don't think it's safe any longer to rely on SSL for privacy.  This is why I've been saying pre-Internet encryption.  There the notion was not to trust the link and not to trust the cloud storage provider.  Only trust yourself, or TNO, Trust No One.  Unfortunately, I think to a large degree than has been felt previously, the TNO really needs to extend now to the public key infrastructure because it does rely on us trusting certificate authorities and on what they're doing.  So, now, how do you protect yourself?  I think you just need to - you have to assume that, unless you control the crypto, it's not in your control.



LEO:  And even that might not be sufficient because of the metadata.  So, for instance...



STEVE:  Ah, very good, very good point.  Yes, I'm glad you said that.  Yes, yes, yes.  Yes, very good point.



LEO:  So I encrypt - I can encrypt email till the cows come home.  In fact, it's very easy to install GNU Privacy Guard, which is an open source PGP implementation that's excellent and simple and trivial.  It's very easy to install on the Mac and Mac Mail and use it.  But they can still see who I'm sending stuff to, and when, and how often.  They can see who that person sends stuff to.



STEVE:  I think that Silent Circle may be preventing this.  And I think that Threema may also be.  The point is they are using, rather than doing peer to peer - the problem with peer to peer is it leaves metadata.  The only way to prevent metadata is to have a metadata, I mean, have a connectivity provider who is specifically against spying.  One of these, and we get to a question about it later - oh, it's the Whisper guy.  We already know that that's Moxie Marlinspike.  Well, I would deeply trust Moxie.



LEO:  Trust Moxie, yeah.



STEVE:  Yes.  His whole business model.  And he's - was he Silent Circle?  I can't remember which was which.



LEO:  I think he was - Silent Circle was Phil Zimmerman was involved in that one.  That's the PGP guy.



STEVE:  Okay.  But so anyway, the idea is, if everybody connects to a central hub - and I do know that I just read, when I was looking at Threema, they arbitrarily pad the message length with a pseudorandom nonsense and length so that they - in order to prevent the association of, you know, to identify packets by size as, for example, they move through Tor.  So there really are some good technologies.  And I have a feeling we'll be focusing on these in coming weeks, the types of technologies that really are going to the next level to thwart passive eavesdropping and both metadata and privacy violation.  It's certainly not easy.  I mean, it's really going to - it ups the ante.



LEO:  Yeah, I mean, so I can encrypt.  And so one would want to encrypt one's data before one puts it on the Internet, pre-Internet encryption, or PIE.  But then one would also want to hide the transactions themselves.  So that would mean using something like Silent Circle.  And then, finally, one should throw away one's cell phone because there's no way to prevent that, if you're going to be on a network, unless somebody comes along and provides a Silent Circle-like cell phone network.



STEVE:  Someone did mention that, in addition to connection metadata, companies were keeping, like, dynamic cell phone tower presence metadata.



LEO:  Yeah, location, location.



STEVE:  But I don't know that, that, like, all - like right now I'm a Verizon user.  Is Verizon, like, caring where I am unless they don't need to specifically look?



LEO:  No, they totally store that.



STEVE:  Oh.  That's bad.



LEO:  That's the pen register stuff.



STEVE:  That means that they can unwind the history of your location all the way back in time.



LEO:  Yes.  Right.  So don't carry a cell phone.



STEVE:  Goodness.  Or just keep it turned off.  Well, no, because when you turn it off they'll...



LEO:  Just don't carry it.



STEVE:  Yeah, yeah.



LEO:  You can't have it.  So a pen register is this whole idea of there is no warrant necessary to request location data from a cell provider.  And in fact...



STEVE:  But, wait, location history also?



LEO:  Yeah.  



STEVE:  Oh.



LEO:  I'm pretty sure they're saving all of that.



STEVE:  That's just a lot of data.  But on the other hand, we do have - we have five zettabytes.  It's got to go somewhere.  Wow.  It's like, where everybody is all the time.



LEO:  Yeah.



STEVE:  Is what this means.



LEO:  Well, what that would be is a request to Verizon, AT&T, Sprint, and T-Mobile, would you mind keeping that for some length of time?  And we'll just come and get - we'll fetch it.  You don't have to keep it longer than how often we visit.



STEVE:  Well, business records.  I mean, that's the whole deal is they...



LEO:  Business records, right.



STEVE:  Yeah.



LEO:  I mean, I think they've been saying all along that that is for sure there.  But you're nuts if you think you're private in any way if you carry a cell phone.



STEVE:  Yeah, yeah.



LEO:  That's nuts.



STEVE:  Yeah.  Actually, I will say that mine, I've got apps that keep asking to turn on location data, and I just say no.  I mean, I don't need - I'm not a map user, so I don't need everything.  I don't want my location being tweeted out whenever I tweet something.  It's like, no, no, no.



LEO:  See, I don't - this is, I guess, this is the point that I've always made, which is people are so worried about Google and Facebook and other people knowing where you are.  And that seems to me, I mean,  that's for commerce.  I don't - I'm not - I don't really worry about that.  I'm much more worried about the fact that the government and law enforcement at all levels are able to get this data, able to store it, able to use it against you in the future.  It's pre-crime.



STEVE:  Yeah.



LEO:  So let's say they arrest me someday for something, and they say, we've got to build a case against this guy because this case is weak.  Now they go and they request all the things I've done for years.  And they shift through it, and they look for, you know, it's a federal crime, it's a felony to violate a website's terms of service.  That's a federal crime.



STEVE:  What?



LEO:  Yeah.



STEVE:  A felony?



LEO:  Yeah.



STEVE:  My goodness.



LEO:  So there's plenty - we are all committing felonies all the time.  If you've ever signed up for a Face- you know, the kids who sign up for a Facebook account, and they aren't 13 yet, that's a felony.



STEVE:  Wow.



LEO:  So go back through that stuff, find all these little ridiculous things, and...



STEVE:  Wait a minute.  Is ad-blocking violating their terms of service?



LEO:  I bet it is.



STEVE:  I'll bet [laughing].  Oh, great.  Yeah, okay.  That's - just take us away.  Just, you know, put our wrists together.  Wow.



LEO:  That's the - by the way, that's - I should point out, that's the Justice Department's interpretation of the Computer Fraud and Abuse Act.



STEVE:  Well, and that's, of course, what the intelligence agencies would ask...



LEO:  Right, well, and that's what they were getting Aaron Swartz on.  Aaron Swartz's prosecution was based on his violation of the terms of service of that database that he downloaded.  So, yeah.  So the point being that I think, if they have enough data about what you do, they can find stuff.  They could build - they could build a case against you.  So it's really a question of do they want to build a case against you or not.



STEVE:  Right, yep.



LEO:  And one of the reasons they say, they explicitly say, the reason we save this data is so we could build a case against you should we want to go get you someday.  So you just really have to trust them.  So in other words, I don't care if - I'll turn on location on Path and Google and Foursquare.  I'm not worried about them.  It's the feds you worry about, and they don't need you to say yes.  They've got it all.  Feds, local, whoever.  "Chill" in Washington, D.C....



STEVE:  Perfectly timed name.



LEO:  Yeah, Senator Chill.  A couple of comments about PRISM.  First, good catch on the importance of metadata.  You missed one crucial detail:  frequency.  Cell phones need to send keep-alive messages to the tower every minute or so to keep registered...



STEVE:  Oh, great, it was perfectly timed.



LEO:  ...and let the network they're still active.  Location data and other info are included in these keep-alive messages, so they have more location data just than when you make or receive a call.  Yeah, we've known that.  Second, the device used on the AT&T network over in San Francisco was a NarusInsight Manager, now known as Narus nSystem.  We've talked about that.



STEVE:  Yup.



LEO:  And we mentioned the prism graphic.  The original brochures have been replaced with something much less informative.  The old ones showed something like Wireshark on custom ASICs capable of deep-packet inspection in real-time on a 10GB - what's a GbE link?



STEVE:  A 10-gigabit link, Ethernet link.



LEO:  Ethernet.  10Gb Ethernet link with room to spare.  That was seven years ago.  Penultimately, how about putting a shout-out to the audience to see who can come up with a tool to rid ourselves once and for all of the Hong Kong Post Office and their ilk.  My idea is a program or plugin that keeps a log of root signers of every certificate your browser encounters.  Find out who's needed in the root list and who isn't, then just delete the latter from our certificate stores.  Maybe a place to submit lists and create a map of certificates and their signing trees.



Finally, correcting an error.  You said when an email server sends mail via SMTP it is in the clear.  That isn't always true.  SMTP over SSL/TLS is RFC 2487, posted back in 1999.  That means SMTP-to-SMTP server communications can be set to "opportunistic," to happen when the destination server supports it, or "required," for people who are really paranoid.  "Required" is a configuration used by many government agencies when sending mail to other government destinations, .gov destinations.  All SMTP communication between the various .gov servers are encrypted using TLS.  I bet you that's about the only place it's used.  But thanks for educating the masses on the importance of security.



STEVE:  So, yes.  Starting from that issue, there is a protocol called STARTTLS which was added to SMTP.  The problem is, unless, for example, you can mandate that all .gov, exactly as you said, Leo, SMTP servers are going to only exchange email that way, you can't exchange email with the rest of the world.  And my email server that GRC is using is state-of-the-art, very recent, does not offer that even as an option.  So it's still not there.



I do use SSL for all - and that's one of the reasons I set it up.  We've got secure connections for all of our client, you know, myself, Greg, and Sue, all of our connections to our own server are absolutely SSL.  But the SMTP to SMTP, as I said last week, when the email from us leaves our server and goes elsewhere, it cannot be SSL.  I mean, maybe some percentage.  But you cannot require it.  And, for example, I can't receive it because my state-of-the-art SMTP server doesn't even offer that as an option.  So it actually has not happened effectively in the real world yet.



And this note that he has about certificate stores, there's an interesting technology that changed with Vista that never received much attention.  Vista had it, and Windows 7 has it.  Server 2003, I think, has it, but I'm not sure.  It may not.  But I know that 2008 has it because I encountered it.  And that is, the Vista OS that everyone is using and Windows 7 OS and GRC's server and I'm not sure how far back it goes, they don't come out of the box with the entire, every certificate authority you ever heard of, Hong Kong Post Office and company, certificates.  They start with about 12.  And it's a little bit of a concern, actually, because when the server encounters an SSL connection that is anchored in a certificate authority whose certificate it doesn't already have, it goes and asks Microsoft.



LEO:  We need a certificate.  Hey, what have you got?



STEVE:  Yeah.  Yeah.



LEO:  You know these Hong Kong guys?  Who are they?



STEVE:  And unfortunately this means that Microsoft indirectly is able to monitor all of their Vista and Windows 7 and late-model server connections for which certificate authorities they have ever asked for certificates from.  Now, if that annoys you, you can download the master pack, which is like 400 and some certificate authorities, and not use this dynamic approach.  But the default for from Vista on, on the consumer Windows and 7 and 8 and also on 2008 and on, and I think an earlier version, but I don't remember where that started on the servers, it is to ask for certificates on the fly.  So you still end up with a well-populated store.  It just takes a while as that sort of matures.  And then of course the rate at which you're asking for ones you don't have drops off because you end up with a large collection, but, nicely, only the ones you've actually needed to use, not just every - not the whole kitchen sink collection.  So a bunch of good points there, thank you.



LEO:  And are we still really worried about Hong Kong when you could worry about Washington, D.C.?



STEVE:  It's, yeah, Hong Kong is benign.  But that's where Edward...



LEO:  That's where Snowden is.



STEVE:  That's where Snowden went, yes.



LEO:  Hong Kong's the new freedom.



STEVE:  The protection of Hong Kong.  Oh, uh-huh.



LEO:  Where was it Humphrey Bogart was going, the Free French Resistance?  Greg in Kansas wonders:  iMessage and  FaceTime secure from NSA snooping?  He quotes an Ars Technica article, which probably refers back to the Apple post, but we'll see.  Does iMessage utilize pre-Internet encryption like LastPass does?  If so, should be secure from NSA snooping as Apple claims.  But who holds the keys, Apple?



And Dustin Schumm in Michigan wonders somewhat similarly:  Can Apple or cannot Apple decrypt our iMessages?  In the privacy statement Apple posted on its website just this week, they say they can't decrypt iMessages.  While it may be end-to-end encryption, how can they provide history to new devices if they don't have the key to decrypt?  When you put a new device on iMessages, it has all the old messages on there.  I would guess that, when I sign in with a new device, I download the key and my new device is now able to decrypt the messages.  Apple probably hasn't given any technical explanation.  But Steve, do you know how it could even possibly work without Apple being able to decrypt my data?



STEVE:  No, I don't.  And this brings up, I think, the next point, Leo.  I'm finding myself strongly leaning in the direction you've always been, which is, if it's not open source, we really can't trust it.  And that's the problem with iMessage.  One of the things we know, because the protocol is closed, but there was a researcher who installed it, or like an early version of it, or I don't remember quite what the scenario was.  But there was an iMessage on his Mac OS X system.  And because he was a developer and had the tools, and it was on a Mac platform that he had access to, he was able to do a lot of reverse engineering.  And I remember looking at the protocol, and it just made your eyes cross.  It was unbelievably complicated.



LEO:  Kinda not so good, either; right?  I mean, kind of, like, convoluted.



STEVE:  Yes.  Yeah, and that's a problem with crypto.  The more complicated it is, the more opportunities there are for mistakes.  And it isn't - it doesn't have to be complex anymore.  We know how to solve these problems easily.  So Apple's iMessage protocol is proprietary.  They're needing to assure people that they're safe.  Well, it uses end-to-end encryption, they say.  And I believe them.  But unfortunately, apparently it's also stored.  And so we assume it's stored in encrypted format.  Yet somehow, as has been observed many times, you bring a new device online, and it receives your iMessage history.  Well, is it coming from other devices?  Is it coming from Apple?  I mean...



LEO:  It says Apple - they say specifically, Apple cannot decrypt that data.  Yet magically unencrypted data appears on my new MacBook Air when I log into iMessages.  This Air doesn't have any previous keys.



STEVE:  Right.



LEO:  Maybe the key is stored in my Apple account?  Because you do have to log in.  Now, I think this might make sense.  I have to log into my Apple iCloud account to use this machine.



STEVE:  Yes.



LEO:  I have to associate messages with that.



STEVE:  Yes.



LEO:  So perhaps there's a key there Apple doesn't have access to.



STEVE:  So assume, I mean, we could try to engineer a solution by saying that the end user has to provide authentication for his iCloud account, which Apple does not have.  Apple has presumably hashed everything.  So, and presumably...



LEO:  Right.  That makes sense.  You could do that.



STEVE:  So the hash - yes.  So but again - okay, yes.  So Apple hashes everything.  They can verify your information, but they cannot recreate your information, your authentication information.  And so they've designed a system where you must authenticate yourself.  And when you do, that authentication is used to decrypt your iMessage store and to then repopulate a new device's iMessage history.  And so, okay, yeah, that makes sense.  I'm not trusting it, not given what we know.  I'm not trusting it because it's not open.  I'm not trusting anything now, a messaging system that large corporate entities like Apple are hosting, unfortunately.



The good news is there are alternatives.  We'll be talking about them, I have a feeling, a lot more in the future.  But we know that the FBI, NSA, CIA, whomever, is able to now compel Apple to divulge information.  And Apple's not telling us how their systems work, their closed protocol.  As far as I'm concerned, that rules them out in us considering them sufficiently safe, when there are free known open protocol alternatives.



LEO:  Like Cryptocat.



STEVE:  Yes, like Cryptocat.



LEO:  This doesn't in any way compromise Cryptocat.



STEVE:  Like Silent Circle.  Like what we're going to be talking about here in the next question.



LEO:  Our final question, Dennis Downing, Jr., Staten Island, New York.  He wonders specifically about TextSecure.  It's from a company called Whisper Systems.  First off, I don't know if I could get by in life without your show.  I've listened to every episode at least twice.  You and Leo do an extraordinary job.  The shows are very informative and exciting for me.  Hope many more years of podcasts to come.  Wow, that's nice, thank you.



I have an Android phone.  There is a free app called TextSecure.  It gives you end-to-end encryption with text messages.  I've been using it for a while.  It looks like it might do the trick.  I wanted a professional opinion, if you wouldn't mind.  They have another app called RedPhone.  Oh, I have RedPhone.  I'm familiar with that.  Does the same thing with voice calls, from what I understand.  I have noticed that the downloads of these apps have soared since the NSA news came out.  I'm keeping my fingers crossed that using the apps may be a solution.



I must say, if this is truly an app that works, anyone, and I mean anyone, can use it.  It's super easy.  You press a lock on top of the text message interface.  It initiates key exchanges automatically.  There's also an option for you to verify keys with the recipient, I would assume to make sure there's no funny business with a man in the middle.  If you could touch on this app on your show, if it works, I think it would be an amazing benefit to anyone who uses it.  It's WhisperSystems.org.



STEVE:  And that is Moxie Marlinspike's app and his company.



LEO:  Aha.  And as we've said, and I'm glad you've come around on this one because I know when we first started this show - I've always said I don't use encryption that's not open source.  And I think you now agree.



STEVE:  Yeah, well, I do.  Well, I wanted to do a commercial one, and it wasn't going to be open source.  And now it's like, I'm not doing a commercial one.



LEO:  Has to be open source.  And this is on GitHub.  Whisper Systems has posted the source code.  So that means you can validate it.  You can...



STEVE:  So there are, yeah, he has two platforms.  Right now it appears to be - I'm sorry, two apps.  This is Moxie does.  And his whole deal is we can make encryption, absolutely unbustable encryption, easy to use while absolutely secure.  So this is Android platform only at the moment.  But two apps, one for text and one for voice.  RedPhone is similarly Android-to-Android audio encryption, courtesy of Whisper Systems and Moxie Marlinspike.  I will dig deeper into them in the future, I am sure, and look at, for example, does it provide metadata protection.  I am absolutely sure that they've solved the problem of privacy and authentication.



LEO:  But the problem with metadata is, if you're doing it over a cell phone, well, of course the metadata about the transaction is still visible.



STEVE:  Right.



LEO:  As always.  I see an iOS source code repository, so there may be an iOS version of TextSecure.  We'll have to look.



STEVE:  Now, I guess one of the things you could do with a cell phone is you are able to put it in airplane mode, or turn the cellular modem off.



LEO:  What you need is a burner that's not associated to you.  You need to go to the drugstore, pay cash...



STEVE:  Well, or use WiFi instead of cellular.



LEO:  I have a feeling WiFi would be just as bad.  The problem is, if you're - okay.  So this phone, if I'm not on the cellular network at all, I guess I'm okay.  But if I'm on the cellular network, and I use WiFi, the cellular network still sees the location given from the WiFi.



STEVE:  Yes.



LEO:  So you have to really - I think the best thing is you need a phone that's not associated with you.  But as we know, that's the problem with metadata is it only takes a few data points to start being able to figure out who's whom.



STEVE:  Yeah.



LEO:  But that's why drug dealers throw their burner phones out every week.



STEVE:  Do they?



LEO:  Yeah.  According to "The Wire," yes.  Have you seen "The Wire"?  Have you watched that show?



STEVE:  Oh, my god, are you kidding me?  Oh, wow, yes.



LEO:  That's where I learned everything I know about drug dealing and burner phones.



STEVE:  Okay.  We're glad for that.  What we need is - there was the...



LEO:  Remember they sent Bubbs all over town buying burner phones?  Yeah, all right.



STEVE:  "The Wire" was a spectacular HBO series.  The thing we need, there was a neat privacy guy who - he objected to the idea that the supermarkets were using the little loyalty tabs?  And so whenever he was in line at the supermarket, he would exchange them with the other people in line, just to sort of scramble up the database.



LEO:  There you go.



STEVE:  So what we need is we need a burner phone interchange system where every week a bunch of people get together in a big circle, and they hand their phone to the person on the left.



LEO:  And make sure there's no cameras taking pictures of who's going in and going out.



STEVE:  Exactly.  And then you all disperse, and that'll just scramble up the database.



LEO:  Hmm.  I'm just going to tell you, once this paranoia begins, it's turtles all the way down.  There's no endpoint where you go, now I'm safe.  Steve Gibson does his best, though, to protect us.  And you know, the most important thing is to understand what's going on, what the risks are.  And I hope...



[Talking simultaneously]



LEO:  ...this conversation.



STEVE:  I should be wearing tinfoil this week.



LEO:  I wore a tinfoil hat in the last TWiT.



STEVE:  I saw you.



LEO:  [Laughing] We've got to get you on TWiT.  In fact, I've been meaning to get you on.  I don't know what you do Sunday afternoons.



STEVE:  I'm available.



LEO:  I'll have Chad give you a jingle.



STEVE:  Okay.



LEO:  Steve Gibson is the guy in charge of Security Now!.  Every Wednesday he comes on here, and we - it's just - it's rapidly becoming a must-listen show for anybody who wants to understand this stuff.



STEVE:  It's like this.  Like what you've just heard.



LEO:  Yeah.  Only more.



STEVE:  Yeah.



LEO:  We will be doing this next Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 18:00 UTC, right here.  So tune in live.  But if you like to fast-forward through the boring bits, you can always download on-demand audio and video after the fact.  Now, Steve has the teensy-weensiest audio, which is the 16Kb version, on his site, GRC.com.  He also has transcripts, which make it very easy to fast-forward.



STEVE:  And I have to say the transcripts for last week's episode, 408, they're just wonderful because you can quickly scroll by and, like, see where there's a big blob where I'm talking nonstop.  It's like, oh, oh, here's Steve talking about something.



LEO:  Yeah.  Yeah, you can see the little - they should make me red.  And then the little black black black black black black black, red.  That's GRC.com.  While you're there, if you've got a question, GRC.com/feedback.  Pick up a copy of SpinRite.  Free upgrades forever, guaranteed by Mr. Gibson.  So don't say, oh, I'm going to wait for the next - no.



STEVE:  You need it.



LEO:  Get it now.  You need it now.  You should also get all the freebies, including...



STEVE:  And actually, if you get it now, you can play with the pre-release versions, too.



LEO:  Oh, you can.  Ah.



STEVE:  Oh, yeah.  Yeah.



LEO:  There you go.  That's a good reason to go to GRC.com.  You just have to hack the URL.  No, you don't.  Just add a 6; right?



STEVE:  Yeah.  We'll provide instructions.



LEO:  There'll be a link there, I think.



STEVE:  There will.



LEO:  Thank you, Steve.  What a great show, as always.  My level of interest is rising as the government's level of interest in us is rising.



STEVE:  Yeah.



LEO:  You know what I mean?



STEVE:  It becomes important, unfortunately.



LEO:  Yeah.  Thank you, Steve.  And we'll see you next time on Security Now!.



STEVE:  Thanks, Leo.



Copyright (c) 2013 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




