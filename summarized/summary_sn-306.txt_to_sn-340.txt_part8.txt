GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#306

DATE:		June 23, 2011

TITLE:		Listener Feedback #120

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-306.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 306, recorded June 22, 2011:  Your questions, Steve's answers, #120.



It's time for Security Now!, the show that covers your security and privacy online with our good friend, one of my oldest friends, Steve Gibson.  He's not that old, but he's one of my...



STEVE GIBSON:  Oldest in several senses of the word.



LEO:  I've known Steve for a long time.  We first met each other when he was doing his early security research on spyware.  Actually it was the "Click of Death," wasn't it, for...



STEVE:  Yeah.



LEO:  ...ZIP drives, way back when, on The Screensavers.



STEVE:  Right.  SpinRite 5, I think it was, was the first version which supported anything that you hooked onto your machine.  And people were hooking their Iomega ZIP drives to it and reporting that it fixed this notorious problem.  Well, it turns out that it wasn't something that SpinRite could fix.  It was an electromechanical problem with the drive.  So I thought, well, okay, they're not going to be having good luck with SpinRite.  So I quickly created a piece of freeware called TIP, Trouble in Paradise.



LEO:  Trouble in Paradise.  I remember that so well.



STEVE:  And that's when I first came up to the studio in South San Francisco, and you and I sat down and reminisced.



LEO:  More than 10 years ago.



STEVE:  Yeah.



LEO:  And we started doing this show, let's see, five, almost six years, well, we're in our sixth year now.  So didn't waste time getting a show on with you.  After the TV show went away, we started doing Security Now!.



STEVE:  I was No. 2 after This Week in Tech on Sundays.



LEO:  You were.  That's right.  That's exactly right.  Today we have a Q&A episode.  That means our 120th Q&A episode.



STEVE:  I know.  And there is, I mean, this was an insane week.  I mean, we know that we had a major screw-up by Dropbox.  And Bitcoin had all kinds of things happening.  CNET has published an amazing spreadsheet of recent attacks and breaches.  They've had to start creating a database of them because there are so many.



LEO:  Wow.



STEVE:  And you had a great story on GigaOM, which...



LEO:  Yeah, we could talk about that.  That was a very nice story.



STEVE:  Yeah.  But we've got updates and news and attacks and breaches galore.  And there's so much that I thought, well, I want to squeeze in a couple questions.  So I found three that I liked, just quickly.  And one, the final one, is one that we can - that sort of is open for discussion.  So we've got a great podcast full of news and updates on what's been going on.



LEO:  Wow, I love that.  It's actually something we started adding to the podcast after about 150 episodes.  We said, we should really cover also breaches.  Maybe not even that long.  Maybe longer ago.  All right, Steve Gibson.  Let's get some news, some security news.



STEVE:  So the Mozilla gang surprised everybody by releasing Firefox ahead of schedule.



LEO:  Wait a minute.  I just installed 4.  You mean...



STEVE:  I know.



LEO:  ...I'm behind?



STEVE:  And you know me.  I have not yet installed 4.  I'm at, what, 3.6.17, I think is the most recent in the 3.6 train.  And we talked about before that Mozilla is going to be working to move people off of their earlier v3 Firefoxes, although 3.6 is still safe to stay on for a while.  So they're deliberately, they've made a deliberate effort, that is, the Mozilla people, to get Firefoxes out more often.  And one might wonder maybe if they've overachieved in this instance.



LEO:  Overachievers.  Those darn overachievers.



STEVE:  So, I mean, yeah, 4 just happened.  Now we already have 5.  So a major, ahead of the first decimal point release in a very short time.  They said they were going to do it by the end of the month, and it went live yesterday, from when we're recording this, on Tuesday, June 21.



LEO:  It happened right during our TNT show, I think.  Tom noticed and said, whoa.  Whoa.



STEVE:  So five remote code exploits were fixed that existed in 4.  And I did have, I have an instance of 4 around, so that I'm able to look at it and play with it and see how it behaves and so forth.  And I noticed it's prompting me to move to 5.  So it's like, oh, okay.  Somewhere I saw something random, so I haven't verified this, but something said that 4 was not going to be upgraded.



LEO:  What?



STEVE:  That is, and I think they were at 4.0.1 is the last thing I saw.  But they're just instead going to move everyone to 5.  So five remote code exploits, among them multiple WebGL crashes.  And we'll be talking about WebGL in a second here because Microsoft apparently agrees with me in their security feelings about it.  I did notice that they moved the DNT, the Do Not Track option, to the top.  It's the first entry on the privacy tab, which I congratulate them for.  I think that's great.



And LastPass does need to be updated.  I think it's just that the LastPass client that runs in Mozilla sees that you're running on 5 and says, oh, I'm not sure I'm compatible with that.  So what I got a kick out of was that in the change list for LastPass for the update, it says it'll work with versions 5, 6, and 7 of Firefox.  So I think this time they're planning ahead.



LEO:  They're ready for the future.



STEVE:  Because that might happen next week.



LEO:  Yeah.



STEVE:  Who knows?



LEO:  Wow.



STEVE:  So, yeah.  And when I looked at 5, it said that the only thing I'm using that was not known to be compatible was I'm running the HTML Validator, which I really like.  It puts a little red "X" down in the corner of my status bar, and it just helps me with my own web page design stuff.  If there's something that comes up, I go, whoa, what did I forget?  And so it's handy to have that.  And so I wouldn't - and I wouldn't want to have it anyway, so...



LEO:  So I'm on 4.0.1, and I just - it said "applying update."  So will it automatically just take me to 5 now?  Is that...



STEVE:  Well, it ought to give you - Mozilla's policy, and we discussed this a couple weeks ago, is they will not push people to a major version update without their knowledge.  But they are modifying their policy to be a little more in line with what Chrome is doing, so that they'll, like, move people along and just sort of keep you updated more automagically.  But major version updates you do get a say-so in, which is a good thing.  So, and when I did it, oh, I know, I went, under 4, go Help > About, and I think that's where I saw the Update button.  And when I pressed it, then it popped up a box that said, oh, let's go to 5.  And oh, by the way, here.  And I said Okay, and I clicked Next.  And then it said, oops, here's the one thing you've got installed, an add-in that is not compatible with 5 yet.



LEO:  It moved me to 5.



STEVE:  Yo.



LEO:  So that's interesting.



STEVE:  Welcome to Version 5.



LEO:  Wow.  You know, I wonder, are we seeing some inflation because of Chrome?  Because Chrome, you know, is at 12 now.  And I wonder if they just - it's version inflation.



STEVE:  Oh, wouldn't that be annoying?



LEO:  Yeah, I hope that's not the case.  But we've seen it happen before.



STEVE:  Yeah, you're right.  It does sound familiar.  It's like, oh, well, wait, you're on 6.  You're on v6.  You must be ahead of them.  It's like, or no, your security's so bad that you have to keep counting faster.



LEO:  It does say your Flash Player is out of date.  Never fear, we can help.



STEVE:  Oh, speaking of which, Adobe has been driving me absolutely nuts.  Every machine I turn on, oh, wait a minute, stop, we've got updates for Flash, we've got updates for Reader, we've got updates for Acrobat.  And it's like, oh, my goodness.  And of course those all require you shut down all your browsers, and often you have to reboot.  So I'm sure all of our listeners who are using Adobe stuff still - actually I'm seriously looking at moving away from Acrobat.  I use Acrobat to create PDFs still.



LEO:  Oh, there's so many better programs, I think.



STEVE:  Yeah.  I'm going to go find one because this is just crazy.



LEO:  Try, yeah, my favorite's Foxit right now.  I use Foxit Phantom.



STEVE:  Okay.  Foxit, I will go there.



LEO:  Yeah, give them a try.  They have a free trial.  You have to buy the program, but I like it a lot.  And I'm sure our chatroom will have some other suggestions.



STEVE:  Well, but I also - I've bought many instances of Acrobat because there it's one use per license, and they track them all.  And so it's so annoying because I'm like, I'll set up a new machine, and it's like, oh, I'm out of Acrobat licenses.  So I've got to go somewhere else and remove it from something that I'm not really using in order to free one up, and then put it in over here.  So it's like, okay, this is - they've lost me finally.  I'm a brand guy, but not anymore.  This is crazy.



LEO:  Others are saying Sumatra.



STEVE:  Sumatra.



LEO:  I haven't seen Sumatra.  But it's a reader.  You use - you're saying you're using...



STEVE:  Oh, no, I want a PDF...



LEO:  You're using Distiller.  You're using the whole thing.



STEVE:  Yep, I'm using the whole thing.  And Distiller pops up and does a great job.  In fact, I've got some PDFs from hell that I'll see if Foxit is able to...



LEO:  That's a good test, isn't it.



STEVE:  Yeah.  So just keeping track of, speaking of updates and upgrades, of Windows XP, just to give a support countdown, I would like to let everyone know, and I'm glad because I'm still sitting in front of XP, we still have 1,020 days left of official support from Microsoft on Windows XP.



LEO:  Whew.  But it's SP3 only.



STEVE:  Yes, SP3 only.



LEO:  Yeah.  So actually that's - I was going to ask you this because somebody called on the radio show and was reinstalling XP.  Presumably, if you install XP early version, non-service pack version, they will let you get SP3, and then they will continue to support from that point on; right?



STEVE:  Oh, absolutely.  And that's been their policy, for example, we can check it by looking at Windows 2000, and that's definitely the case that you're able to get Service Pack - where did they leave off, 4 or 5 on Windows 2000.  So, yeah.  Okay.  So Microsoft, I got a bunch of tweets from people following me on Twitter saying, well, Steve, Microsoft agrees with you about WebGL.  On their TechNet blog, they posted a blog titled "WebGL Considered Harmful."  And they said, "Our analysis has led us to conclude that Microsoft products supporting WebGL would have difficulty passing Microsoft's Security Development Lifecycle requirements.  Some key concerns include:  Browser support for WebGL directly exposes hardware functionality to the web in a way that we consider to be overly permissive."



LEO:  Oh.  That's kind of ironic coming from the creators of ActiveX.



STEVE:  I know, I know.



LEO:  There's a little irony there.



STEVE:  Well, and we've got one, we'll be talking about another irony here because they're now running around boasting about how autorun malware has finally been tamed.  And it's like, wait a minute, whoa, okay, we're getting ahead of ourselves.  So, secondly they said...



LEO:  Save it, save it.



STEVE:  About WebGL they said, "Browser support for WebGL security servicing responsibility relies too heavily on third parties to secure the web experience."



LEO:  Oh, that's interesting.



STEVE:  Meaning that the graphics device drivers end up, by nature of the way the WebGL architecture is, they end up with responsibility that there's no way for Microsoft to police.  And finally they said, "Problematic system denial of service scenarios."  So to remind our listeners, the problem with WebGL is that the nature of the way it works is you visit a website which literally downloads graphics-rendering code into your system's GPU, into your Graphics Processing Unit, and runs it.  And this is native GPO machine language, essentially, which the site provides to your machine when you visit.



Well, I mean, this sounds like anyone's horror story.  It's not clear that you can break out of the GPU, although that's of course the concern.  So there's a denial of service scenario where you could go to a site that just deliberately puts in an infinite loop into your GPU and essentially crashes your entire system.  I mean, it locks it up, and nothing works, and you can imagine some script kiddies having fun doing that for a while.  It's not clear that it breaks out into, you know, outside of the graphics containment.  But this does pass down through the device driver.



And Microsoft, to their credit, is saying, eh, you know, we're going to keep it out of IE for a while until we see whether there's any way to implement this in a safer fashion.  And there are groups working on being able to offer the benefit without this.  So this feels like first-generation, oh, let's just get it done.  Go to a website, and we're going to download native code into your machine.  It's like, oh, okay, that's - why would that not raise some suspicion?  So it certainly has.



There was a bunch of news about a new trojan that Symantec was the first to discover.  They found it in the wild last Thursday, and they dubbed it Infostealer.Coinbit, which is...



LEO:  Uh-oh.



STEVE:  ...the words flipped from Bitcoin.



LEO:  Uh-oh.



STEVE:  And it literally, well, it gets into your machine and makes a beeline for where your Bitcoin wallet is stored by default.



LEO:  It's wallet.dat; right?



STEVE:  Exactly.  If it finds it, it sends your wallet to an attacker via a server located in Poland.  Now, and this sent shockwaves through the security community.  And a lot of users are like, oh, my god, you know.  So bitcoins are not safe.  Well, okay.  You've got something bad in your machine, so that's a problem.  But it is absolutely the case, and any Bitcoin user has to know this because this is rubbed in your face when you start using Bitcoin, the designer of Bitcoin understood this and made it very clear that the entire security of your wallet is your responsibility.  That is, this is virtual currency.  You have nothing to prove your ownership of bitcoins other than this data that's in your wallet.  I mean, it is your money.  And so if your hard drive...



LEO:  Just like cash would be, really.



STEVE:  Yes, exactly.  If your hard drive crashes, which unfortunately, well, except maybe for people who sell recovery software...



LEO:  Who would that be?  Who would do that?



STEVE:  If your hard drive crashes, and you don't have that file backed up, that money is gone.  There is no way, and they make it very clear, absolutely no way to prove that you ever had that money.  So first rule is back that file up.  I mean, have it somewhere safe.  The problem is, if it gets loose, which is a different problem, if it gets loose out of your control, shipped off to Poland, then whoever has that file also has your money.  And the way the system works, you can't - and, I mean, this is why it's so clever, and we discussed this in detail in our podcast we devoted to how Bitcoin works, there is no way to duplicate bitcoins.  So the first person to transact those bitcoins renders the copy of the bitcoins, even if it's the original copy, it renders them invalid.



Now, wallets can be strongly encrypted, but that depends upon the strength of the password.  So everybody listening to this that has any investment in bitcoins, if you didn't create a password, a strong password for your wallet, you absolutely want to do so because, if you have encrypted your wallet, and it's gone off to Poland, then the only thing the person can do at the other end is to try to crack the password.  And we know all about how that works.  And if it uses a weak password, it's much more likely to be crackable.  So...



LEO:  Encryption is not built into Bitcoin.  You would use something external.



STEVE:  Oh, no, no.  It's part of the client.  You're able, yeah, it's able to encrypt the wallet for you, and you provide it with the passphrase that you want to use for that encryption.



LEO:  And that would be secure even though they got your wallet.dat.



STEVE:  Exactly.  That would be secure because that's not part of - it's something that you enter in order to open your wallet so the client can have access to it.  So absolutely use a strong password is the first takeaway.  The second is, back up your file because, even if somebody else can't get it, if you can't either, that's a problem.



LEO:  If you delete it, you threw your money out.



STEVE:  Yeah.  And great big money happening in Bitcoin land.  We have a lot of discussion of Bitcoin coming up here because they, well, the major Bitcoin exchange, MtGox, lost their database.  And actually it's, well, we'll talk about that in a second.  But that was a problem.  And the currency crashed.



So Microsoft has declared victory over autorun malware.  Anyone who's interested can Google the phrase, "Autorun-abusing malware (Where are they now?)"  That will get you to Microsoft's TechNet blog link, where they're strutting around and boasting about the fact that ever since they turned off and changed their policies about autorun, the autorun abusing malware has been, I mean, the degree of abuse has just been collapsing.  And that page does have some really interesting graphs that corroborate that fact.  And so I say to that, sheesh.  I mean...



LEO:  I don't know, strong language.



STEVE:  I know.  That's a big word.  You can put some extra e's in there:  sheeeeesh.  They finally turn off what all security-conscious users have been doing and urging everyone else to do for years.  And this comes back to another one of my favorite phrases that I call the "tyranny of the default."  Which we saw with the firewall in XP.  Microsoft boasts about how XP has a built-in firewall.  And this is Ballmer strutting around onstage before XP was released.  But they had it disabled by default.  So nobody had it turned on.  And there were, like, all these remote exploits coming into Windows.  It wasn't until SP2 that they finally turned it on by default.



The point is, the key is "by default."  And it's why, for example, I'm upset about third-party cookies being enabled by default, I mean upset from a tracking standpoint, because most users just leave the settings there.  I mean, most users don't change the default.  So the fact that autorun has been traditionally on by default meant that that's what everyone was using, was autorun was on, and Stuxnet and other worms and viruses have just been having a ball with that.



So finally Microsoft decides that's not a good idea.  They do so reluctantly, I mean, with amazing, world-class reluctance because they don't want to disable a feature in any of their OSes that was ever turned on because they're afraid of the secondary effects that that will have.  But, boy.  When they do, then they boast about the fact that, oh, look, autorun is not a problem anymore.  Yeah, well, it only took them how long?  I guess Windows has always had it.



LEO:  Hey, a little mea culpa.  I've been talking with our sysadmin, Bear, and he says, yes, in fact, we were hacked.  So I'm not going to talk about - we've cleaned it.  It's safe now.  Don't think that there was an issue.  And I don't - he says he'd prefer that we don't talk about what the hack was until he's got it all locked down.  But it was not an error.  There was...



STEVE:  And we should tell our listeners of the podcast because this was all before...



LEO:  This was before the show?  Oh, okay, yeah.  People were getting an error when they went to our chatroom on the web browser on live.twit.tv.  And the error was coming from Chrome.  The weird thing is we didn't see it all the time.  Only some people saw it.  We couldn't figure it out.  I was skeptical.  I went to the Google malware database, and we came up clean there.  But that's just a database.  So I'm thinking this was some sort of active monitoring that Chrome must be doing, which I don't know of, I don't know about.  And it wasn't hitting everybody.  But that might have been the nature of what was hacked.  In any event, there was something going on.  And I've talked to Bear.  He says, you know, this happens to any public-facing website. We're running a variety of scripts.  We keep them up to date pretty assiduously.  But there are occasionally flaws.  So we got it fixed.



STEVE:  Well, on that page is a place where you can enter a username and a password.



LEO:  Could be that.  Could be that script.



STEVE:  And that's all scary.  And then it takes you, yeah, exactly, and it takes you then to an IRC client where you can type things in.  And again, we've talked about how this kind of thing happens.  Any time you are soliciting user input, there's a risk of malicious input somehow tricking the back end, whatever you've got back there, and executing that input when it's just meant to be benign username and password.



LEO:  I didn't realize we also - the reason it wasn't hitting everybody, I didn't even know this, we have three servers.  I mean, I know we have many servers.  But I didn't know that it was being load-balanced between three servers.  So you'd only get it one time in three or whatever, you know.



STEVE:  So the hacker was able to compromise...



LEO:  One of the three.



STEVE:  ...the database of one of the servers; right.



LEO:  Was not a database hack.  I'll say that much.



STEVE:  Okay.



LEO:  But I'll give you more - I'm not covering it up, I just want to make sure everything's cleaned up before we say anything.



STEVE:  Yeah, yeah.  So this is just completely random, but I thought interesting.  You and I have talked about this before.  Sophos, the security research company, noted that, well, actually their blog posting was pretty funny.  They said:  "Please update your antivirus at least once every five years."



LEO:  At least.



STEVE:  Just, you know, for us.  Because after seven years the MyDoom worm still exists and is still actively trying to spread.



LEO:  Hard to believe.  And it wouldn't if you had an up-to-date antivirus.



STEVE:  It is, exactly.  Because that's got to be so - that's in every AV pattern database that has ever been created since MyDoom, which was seven years ago.  And remember it spreads by email, and it's a worm.  And, I mean, everybody knows about it now, yet there are still machines out there that have it live and running and trying to propagate.  And as you and I have said before, these old Internet-wide worms will never completely go away.  There will always be some machine forgotten in a closet somewhere, connected to the Internet, that will be out scanning IP addresses, trying to plant MyDoom or MSBlast.



LEO:  It's basically the herpes of the Internet.  Just endemic.



STEVE:  Exactly, exactly.  So...



LEO:  Somebody in the chatroom says, "Every five years?  Who has time for that?"



STEVE:  It's just such a hassle to have to reboot every five years after you update your passwords, your patterns.  Speaking of passwords, my friend Simon Zerafa, who finds all kinds of interesting stuff for me and sends them to me via Twitter, found another site.  Actually he was the source of HasSonyBeenHackedThisWeek that we'll be talking about in a second.  But meanwhile we have ShouldIChangeMyPassword.com.  This is clever.  I'm not endorsing it at all because it's also a little frightening.  But clever.  So https://shouldichangemypassword.com.



LEO:  I love it.



STEVE:  It is great.  It is an aggregation of all of the publicly available...



LEO:  By the way, I think Lieutenant Uhura is hailing you on Channel 4.



STEVE:  That's a generic incoming email from my Blackberry.



LEO:  I like it.  I don't know if everybody heard that, but that was great.



STEVE:  I forgot to put it in the other room, so...



LEO:  No, that's fine, I don't care.



STEVE:  Yeah, so, exactly, that's who it is.  So ShouldIChangeMyPassword.com.  It's an aggregation of all the hacked databases of usernames and passwords, just the passwords, that have been made public so far.  So this is some guy.  He's @dagrz on Twitter.  So again it's @dagrz.  And he says, "If you have any questions or concerns, please contact me on Twitter @dagrz."  On his page he says no passwords are stored in the ShouldIChangeMyPassword.com database.  And below he says, "The email you enter will NOT be stored, transmitted, or otherwise used beyond this check."



For what it's worth, Ghostery only reports that he's got Facebook Connect and Google Analytics on the page.  And in every way it appears legit.  I mean, my feeling is it is.  But he is soliciting that we put our email address into his website.  So if this wasn't a good guy, he's obviously come up with the world's coolest email address harvesting hack.  Which he's probably not doing.  I completely, I mean, again, it looks completely legitimate, and he's got only the best of intent.



So what this obviously does is, it allows you to put your email address into this website, which will then attempt to look it up in any of the known public previously and recently hacked exploits and see whether it's there, meaning that your email address has leaked publicly.  So it's a quick way of checking that, which is really cool.  A number of less security kneejerk organizations than ours have talked about it.  He's got a media link on that page, I think three or four different articles that said, hey, this the most wonderful thing ever.  Which again, I think it's very cool.



LEO:  He's got my email address.  Let me put it this way.  I did it.



STEVE:  And you've not been hacked.



LEO:  No, I don't think so.



STEVE:  I did not put one in.  I did not put mine in.



LEO:  Oh, I see what you're saying.  No, when I did it, it said, no, you hadn't - your email does not show up in this database.



STEVE:  Ah, good.



LEO:  I don't know whether he did anything with my email address.



STEVE:  No.  And I'm sure, I mean, I have...



LEO:  You know what, my email address is everywhere.



STEVE:  That's a good point.  It's the Leo address, Leo?



LEO:  Yeah.  I mean, I'm on every mailing list there is, so...



STEVE:  I can't even imagine the spam.  Oh, that's right, you've solved that problem.



LEO:  I don't have it.  I've got...



STEVE:  Using MailRoute.



LEO:  Yeah.



STEVE:  So anyway, I just wanted to bring it to our listeners' attention in case anyone is interested.  And maybe you've got, like, throwaway email addresses, or scratch ones, or something you care less about.  I just, you know, I can't put mine there.  But...



LEO:  Let me show - because we have a viewer in-studio visiting us today who just ran it on his iPad.  And he had been hacked.  I'm going to cover up his email address here and just show you real quickly.



STEVE:  Okay, so that, okay, even you saying that, Leo, the idea that it actually works, for me that tilts the balance.



LEO:  Yeah, I mean, yeah.



STEVE:  Like over in the yes, I really want to know that.



LEO:  It says, "Your email username and password have been compromised at least one time.  The most recent recorded occurrence, June 19th, 2011."



STEVE:  Three days ago.



LEO:  That's three days ago.  "You should change all your passwords as soon as possible."  So this means that LulzSec did - it was in that database.



STEVE:  Yes.



LEO:  Wow.  Good you ran that.  Well done.



STEVE:  Okay.  So ShouldIChangeMyPassword.com.



LEO:  Very interesting.  I'm going to go back there right now.



STEVE:  It seems worthwhile.  Put a few more in.  And I do, you know, the guy, it's over HTTPS, so he took the trouble of creating, of getting an SSL cert for that.



LEO:  I think this is legit.  This has to be legit.



STEVE:  Yeah.  I do, too.  But again...



LEO:  So Greg, thank you for - Greg Taylor's in here with his son Timothy.  Thank you for doing this.



STEVE:  So I would say recognize the fact that you're putting your email address into a website.  On the other hand, we do it all the time, whenever we're signing up for anything else.  So I think I'm probably being overly cautious, especially when it could provide that kind of a valuable service, like it just did to one of the guests sitting in front of you, Leo.



There was news of quantum crypto being cracked, and I got a tweet storm.



LEO:  After last week, even.



STEVE:  Yeah.  I got a tweet storm from this, unfortunately.  It has not been cracked.  So I just wanted to put everyone's mind at rest.  What happened was there's this one mode of basically quantum communications which is believed to be uncrackable, where you use quantum entanglement, essentially, in order to lock photons together and detect them in photodiodes.  And the idea being that any alteration that occurs in the light path between the two endpoints would absolutely be detectable because that would break the quantum entanglement.



What some researchers did just for the heck of it was they made the system work differently by doing a man-in-the-middle attack, but essentially moving the system out of a quantum entangled mode into standard light mode.  And because the particular crypto system that had been built as - I mean, no one's using any of this yet.  But because the system hadn't been built to detect whether quantum entangled photons were being received or just regular happy photons, it kept on working.



And so all the people who didn't look at the fine print said, oh, my god.  I mean, and the headline said "Quantum Crypto Cracked."  Well, so it hasn't been.  And I'm sure the people who set up the entangled photon communications are able to detect, now that they've been advised that this is a problem, that they should make sure the regular old non-entangled photons are not used instead.



LEO:  [Laughing] How can you tell?



STEVE:  I think we're okay.  Yeah, the entangled ones may move a little bit more slowly.  I'm just - that's not true.  Okay.  So Attacks & Breaches.  Oh, boy.  There have been so many recently - I mean, this is like, we've talked about this, this section of the podcast expanding without limit - that CNET has finally charted them.  You can Google the phrase "keep up with the hackers chart," and that's probably the easiest way to find this.  Or, sorry, keeping, "keeping up with the hackers chart."  If you Google that, you'll find the link to this CNET hackers chart.  I also tweeted it myself this morning so that I could refer to it in the podcast.  So if you do a search of @SGgrc on Twitter, one of my very recent, I think I did two this morning, one of them is a link to this, which is a Google spreadsheet.



And my little SSL monitor popped up when I went to Google, and I thought, whoa, wait a minute, why is that popping up?  It's because Google had recently changed their certificate, and I hadn't been to spreadsheets.google.com before.  So I love the fact that I've got that thing monitoring my SSL connections.  And I know many of our listeners do, too.  And so this is just an amazing spreadsheet.  It's not even current, and it's still comprehensive and long.  But I think it stops on the 16th, so it's a few, like, maybe five days back.  But anyway, very comprehensive and a little bit unnerving when you look at all of what's been going on recently.



What's not, for example, on the spreadsheet yet is that WordPress got hacked just recently.  Their blog posting on Tuesday, June 21, which was yesterday from when we're recording this, was titled "Passwords Reset."  And they wrote, "Earlier today the WordPress team noticed suspicious commits to several popular plug-ins..."  They were AddThis, WPtouch, and W3 Total Cache.



LEO:  Well, I use two of the three.  That's not good.



STEVE:  Okay, "...containing cleverly disguised backdoors.  We determined the commits were not from their authors.  We rolled them back, pushed updates to the plug-ins, and shut down access to the plug-in repository while we looked for anything else unsavory.  We're still investigating what happened, but as a prophylactic measure we've decided to force-reset all passwords on WordPress.org.  To use the forums, trac, or commit to a plug-in or theme, you'll need to reset your password to a new one.  Same for bbPress.org and BuddyPress.org.  As a user, make sure you never use the same password for two different services, and we encourage you not to reset your password to be the same as your old one."  So don't just...



LEO:  Don't be a nitwit, in other words.



STEVE:  ...enter what you had before, exactly.  "Second, if you use AddThis, WPtouch, or W3 Total Cache, and there's a possibility you could have updated in the past day, make sure to visit your updates page and upgrade each to their latest version."  So we don't have any more information at this point about what it was that happened there.  But someone got into their plug-in system and maliciously, deliberately altered those three plug-ins in order to install backdoors in them.  So we'll have to hope CNET adds that to their list.



LEO:  Yeah, wow.



STEVE:  Okay, now Bitcoin.  This I also got a huge amount of tweets from our listeners, which if nothing else I'll use to gauge interest.  And of course Bitcoin is a curiosity.  We've talked about it extensively.  We did a podcast on it because the technology is cool.  It's also interesting sort of just to watch what's going to happen with it over time.  Like, you know, there's been grumblings in the U.S. Congress about legislation to outlaw it or ban it or say they don't like it.  I don't know what they can do really because it's a distributed peer-to-peer virtual currency.  But...



LEO:  You know what, what the senators are talking about is, what scared them is Silk Road, which is the website that uses Bitcoin to sell drugs and drug paraphernalia.  It's interesting because Silk Road, I tried to go to the website, you have to be running a TOR.  You have to go through TOR to get to Silk Road.



STEVE:  Be anonymized to get to it, interesting.



LEO:  Yeah, it's really interesting how they've layered it all.



STEVE:  So here's what we know of what happened.  In summary, the currency crashed to $0.01 per bitcoin, so one cent...



LEO:  A penny, a penny.



STEVE:  A penny per bitcoin.  And our listeners will remember that it was recently at $30.  And since I'm still holding the 50 bitcoins that my computer magically minted for me in less than a week, that would have once been $1,500.



LEO:  Now it's 50 cents.



STEVE:  And we did - yes.  Well, it's recovered, but...



LEO:  Okay.



STEVE:  So, yes, it went from - for a while it was 50 cents.  And we did talk after that about how the currency had - I think it dropped to about $20 when we talked last week, and that was due to a flurry of trading from people probably like me, who said, hey, I'm cashing out now.  30 bucks sounds like a good deal for a bitcoin.  So, okay.  But on June 19 at 17:15:36 UTC, some person placed one or more orders to sell hundreds of thousands of bitcoins, causing its exchange rate - now, this is through the MtGox exchange, MtGox.org, I think it is - causing their bitcoin exchange rate to crash from, at the time it was $17, down to $0.01, which is one penny.



Okay.  More than $1.1 million was traded during that one or more transactions.  And the exchange was overloaded so that it took about half an hour to execute the orders.  Then, okay.  That was at 17:15.  At 17:51 UTC, "Kevin," in quotes because all we have is his first name, bought 261,383 and, if anyone cares, .763 bitcoins, so more than a quarter million, 261,000 bitcoins, for $0.01 each.  Meaning he caught that collapse at the bottom, and he spent...



LEO:  That's suspicious.



STEVE:  Isn't that, well, he spent $2,613 to buy up more than a quarter million bitcoins.  Which would have been worth $5 million back prior to the collapse.  Now, I found a posting from Kevin which I thought was really interesting, so I wanted to share it.  He said, "I'm Kevin.  Here's my side."  And he wrote this two days ago.  He said, "I'm Kevin, and I'm the guy who bought" - I have a different number here - "259,684 bitcoins for under $3,000 yesterday.  I really wanted to keep this as quiet as possible, but I don't feel I can anymore.  Here's my side of what happened.  On an exchange like MtGox there are typically hundreds of standing buy orders, where people are offering to buy bitcoins at various amounts and prices."



LEO:  Oh, so he had a buy order in place.



STEVE:  Well, no.  I mean, this guy Kevin is clever.  So he gives us some background here.  "When a large sell order comes in, an exchange will start with the highest priced buy order to match up the buyer and seller, then move down to the next lowest buy order.  This repeats until the entire quantity of bitcoins being sold have found buyers."



LEO:  Makes sense.



STEVE:  And of course that also sets the current exchange rate because how far has it come down?  Like the most recent transaction was at this many bitcoins, so that's what a bitcoin is worth now.  He says, "So this repeats until the entire quantity of bitcoins being sold have found buyers, or there are no more buyers at the minimum price the seller was willing to accept."  So the seller could say I want to sell this many, but I'll accept no less than this amount.  And so our listeners understand that.



He says, "I was watching, like many of you, a gigantic sell order burning through the bids."  So this is that order we talked about before that occurred about 50 minutes before Kevin.  "MtGox doesn't execute trades very quickly, so we were watching this huge order slowly eat up every buy order on the books.  The price started at around $17.50 and within minutes had been driven below $10.



"At this point I realized this wasn't merely a large seller willing to accept some losses.  This was someone attempting to crash the market by selling a huge percentage of the market's total bitcoins all at once.  I had around $3,000 U.S. in my MtGox at the time from earlier sales I'd made.  I looked at the market stats and realized that there were tons of orders to buy bitcoins at one cent, that is, 0.01, that would likely eat up any remaining bitcoins this seller had on order.  I figured, if I put a buy order in" - and I love this - "for 0.0101" - so he puts his buy order in for one hundredth of a cent over a cent.



LEO:  Smart.



STEVE:  Yes, very smart.



LEO:  I mean, he doesn't know that he's going to get anything, but why not?  You don't have any risk.



STEVE:  Exactly.  And he's able to buy bitcoins at a penny, essentially.  He says, "...my order would" - there's Uhura again - "my order would execute first, and I could buy a huge amount of bitcoins from this seller before it hit the bottom."



LEO:  Smart man.



STEVE:  Isn't that cool?  "The only problem was that MtGox was running slower than molasses at the time, and everyone was saying that it wasn't accepting trades.  I had to try several times, but eventually I got my buy order in, offering to buy as many bitcoins as I could for 0.0101.  The site stopped responding completely for a while, probably from so many people hitting refresh to see what was going on.  When I got back in, I saw my account."  And he posts 06-19-11 at 17:51:  Bought bitcoins, 259,684.77 for 0.0101.



LEO:  He must have gone [sound].



STEVE:  Oh.  He says, "I had just purchased over 250,000 bitcoins for $2,613."



LEO:  Good deal.



STEVE:  "At the trading price immediately before this large sell order happened, that number would have been worth nearly $5 million."



LEO:  Wow.



STEVE:  "After I regained my breath" - because, I mean, you know, obviously he's active in bitcoins.  He had some low number, probably historically.  Suddenly he has got a quarter million of them, and he knows what they used to be worth.



LEO:  Right.



STEVE:  So he says, "After I regained my breath I tried to figure out what to do.  I wasn't sure what was really going on.  Over the past few days there had been a lot of talk and complaints about MtGox's security.  Lists of MtGox usernames, email addresses, and encrypted passwords were being traded around, which was an obvious sign that security at MtGox had been breached in some way.  If there was an attacker in the system, perhaps he was able to log into my account now and force my account to execute some other crazy trade.  I attempted to withdraw the bitcoin balance into my own wallet," so essentially move those bitcoins which MtGox had converted from dollars into bitcoins, but they were still holding.  So he wanted to transfer them into his own machine, essentially, into his own wallet.



And he said, but he "hit the limit that MtGox has preventing you from withdrawing more than a thousand U.S. dollars' worth of bitcoins at the current market value in a day."  And remember that he now had about $2,600 worth at the super low, driven down to a penny price.  "This transferred 643.27 bitcoins to my personal Bitcoin account" - and I think he meant to write dollars' worth of bitcoins - "to my personal Bitcoin account before hitting that limit.  It was pretty well known that the limit for transferring bitcoins was actually broken in MtGox.  It stopped you from moving more than that in one withdrawal, but you could immediately ask for more and get another thousand U.S. dollars' worth over and over."  Oh, so they weren't doing their day check, essentially.  "I decided against this, since it was exploiting a bug, and I definitely didn't want to do anything suspicious-looking or improper.  Anyway, that's all I wanted to share."



LEO:  I think that's a fair defense.  Don't you?



STEVE:  Yes.  Yeah.  I absolutely do.



LEO:  It makes sense.



STEVE:  Yeah.  So there is a fabulous graphic of the collapse which is at a site called Leanback.eu.  And you can look at it, Leo, because the link is in our notes.



LEO:  Pulling it up right now.



STEVE:  It's just very cool looking.  Maybe you can stick it up on the video feed for people who have the video.  What we do know is MtGox has confirmed that their entire account database was exfiltrated and posted publicly.  They wrote, "It appears that someone who performs audits on our system and had read-only access to our database had their computer compromised."



LEO:  Oh, interesting.



STEVE:  Yes.  So it wasn't actually the MtGox system, although there are credible security analyses of their website that have demonstrated some serious security problems, too.  So it's not like they're in the clear here.  So they said this allowed someone who got into their auditor's system with read-only access to pull the user account database.  That consists of username, email addresses, and password hashes.  So they were hashing.  Unfortunately, they weren't hashing very well.



61,016 accounts were in the database.  Most were hashed with a UNIX MD5-based crypt, which is pretty good, but 1,765 were plain MD5 unsalted, non-iterated hashes.  So brain dead, basically.  They're going to be in any rainbow table because MD5 has been well rainbowed already.  And in fact, those hashes, if people do a Google search for the hashes, they're turning up on the 'Net, and they've been cracked.  So accounts have definitely been troubled.



So later, in a blog, MtGox said, "We're happy to report that over 10 percent of our user base have already reclaimed their accounts."  And so they must have done an account lock and required people to change their passwords.  So they said, "Newly reclaimed accounts require strong passwords which are now secured with an SHA-512," so that's Secure Hash Algorithm, 512-bit, multi-iteration, triple-salted hashing.



LEO:  Yum.



STEVE:  Now, I don't know what triple salting is, but it sounds like it's bad for your blood pressure.



LEO:  It does.



STEVE:  So it's their triple-salted, multi-iterated hashing.  So they have certainly increased their security over what they had before.  Now, what they're doing is they are rolling back all trades which occurred from that first collapse, which was a fraudulent trade, apparently perpetrated by somebody that was able to get all those bitcoins as a consequence of having compromised accounts, or maybe stealing them because that's something else that happened recently that we'll talk about in a second.  So they're going to roll - basically they're invalidating all trades and resetting time to before this occurred and putting the exchange rate back to where it was at $17.50.  



So that's the story that many people, many of our listeners had asked about, like, what exactly is it that happened?  Also in the news was the fact that some sad user on June 16 had his computer hacked, not through any particular means.  We don't know exactly what it was that had got into his machine.  But he at the time had 25,000 bitcoins, worth half a million dollars, and they were stolen.



LEO:  So he says.



STEVE:  So he says.



LEO:  Can we validate?  I mean, is there a way to know that?



STEVE:  Well, remember, one of the cool things about the whole system is that it is absolutely anonymous.  So he says he had those.  Let's see.  We know how many bitcoins exist, and there is an absolute audit.  Part of the technology is you have a log of every single transaction that occurs.  So anyway, I remember him being credible.  He's been in the community for a long time.  You won't believe what his handle is.  His handle is "All in Vain," believe it or not.



LEO:  So he was depressed already.



STEVE:  Yes.  And it's believed that, because he's been involved for so long, that he was probably an early miner, and he was mining bitcoins and using GPUs and...



LEO:  Well, come on, though.  How could you get that many?



STEVE:  Yeah, and why would you not trade them out?  Probably he was reasonably expecting, based on history, that the value was high and going up.  And so he was thinking, yay, I got 25,000 bitcoins, I'm going to hold onto them.  So, yeah, he's not happy right now.  And, finally, the EFF has stopped accepting bitcoins as donations.



LEO:  Oh.  That's a surprise.



STEVE:  Well, and they have a nice blog post where they explain it.  And they said - they gave three reasons.  They said, "We don't fully understand the complex legal issues involved with creating a new currency system."  And that's sort of the headline of a paragraph where they go into, like, the Congress is not happy.  We're not sure where this stands in terms of, like, legal structures and statutes and so forth.  I mean, so they recognize that currency really brings with it much more than the cool technology, which is all we talk about and really focus on here.  It's really a big deal.  But they're just saying we don't understand them, so we're going to say, oops, no.  They also said, "We don't want to mislead our donors" about, like, where they stand.



LEO:  I send them American dollar.  That's a good currency.



STEVE:  And they said people - yes.  And they said, "People were misconstruing our acceptance of bitcoins as an endorsement of Bitcoin itself."  And I think that was...



LEO:  Absolutely.



STEVE:  Yes.  The fact that the EFF was taking bitcoins as donations said, hey, somebody very reputable, and certainly the EFF is, is accepting them.  So that gave them some credibility.  They said that they're going to take all the bitcoins that they have accrued and dump them into the Bitcoin faucet so that they are back in circulation.  And they feel like they've sort of washed their hands of them.  So anyway, that's the story on Bitcoin.  But it's not the story on Attacks & Breaches for the week.



LEO:  No.  Far from it.



STEVE:  Last Sunday - are you sitting down, Leo?  You probably are.  You're on a ball.



LEO:  I'm on my ball.  I guess that's sitting down.  I'm floating.



STEVE:  For four hours last Sunday...



LEO:  I know what you're going to say because I already - yeah.



STEVE:  Yeah.  Our friends...



LEO:  I already fell off my ball.



STEVE:  Our friends at Dropbox had a minor little software update glitch, which meant that no one's password was being checked, and anyone could log into anyone's account with no password or any password.  Dropbox blogged, and this was Arash Ferdowsi, he blogged on June 20, so two days ago, he said, about "Yesterday's Authentication Bug":  "Hi, Dropboxers.  Yesterday we made a code update at 1:54 p.m. Pacific time that introduced a bug affecting our authentication mechanism.  We discovered this at 5:41 p.m." - so a few minutes less than four hours - "and a fix was live at 5:46 p.m.  A very small number of users, much less than 1 percent, logged into Dropbox during that period, some of whom could have logged into an account without the correct password.  As a precaution, we ended all logged-in sessions.  We're conducting a thorough investigation of related activity to understand whether any accounts were improperly accessed.  If we identify any specific instances of unusual activity, we'll immediately notify the account owner.  If you're concerned about any activity that has occurred in your account, you can contact us at support@dropbox.com.  This should never have happened.  We're scrutinizing our controls, and we will be implementing additional safeguards to prevent this from happening again."  Signed, Arash.



Now, I don't think there could be any better example of why we absolutely have to adopt a PIE, the PIE in the sky, PIE, Pre-Internet Encryption.  If anyone was doing that, if the only things they had stored were strongly encrypted things, then the worst an attacker could have done would have been - there would have been no loss of information.  They would have gotten files of pseudorandom noise.  They could delete them, but I think Dropbox has an undelete mechanism.  So, or they could have modified them.  That would have been annoying, if you didn't have backup copies of the original files.  So certainly it's bad for people to get into your Dropbox account.  But this certainly says you absolutely want to be encrypting this.



So I wanted to bring two things to our listeners' attention.  There is an event log as part of Dropbox, and you can just get to it with Dropbox.com/events.  And it will show you, pretty much with nice granularity, everything that has happened to your Dropbox account in recent time.  And you can choose 10 or 25 entries per page and move back in time.  And so if anyone's concerned and is a Dropbox user and may not have been using it during that period, that is to say from 1:54 p.m. Pacific time on Sunday to - and that'd be the 19th - for four hours after that, you can just check the log to see if anything happened on your account.  Or, if you were using it, if anything looks like it wasn't you on your account.



And there is an interesting client-side encryption, a PIE solution, Pre-Internet Encryption, for Dropbox, called SecretSync.  It's GetSecretSync.com/ss.  And I have looked at them before, and I looked at them again this morning before I put this entry in my notes.  And I like what I see.  They create their own encrypted folder, and they say put the things that you want to encrypt securely for Dropbox into the SecretSync folder, and it will encrypt them before Dropbox has access to them.



LEO:  I like that.



STEVE:  Yes.  It looks clean.  It looks legit.  There's a link in the upper right of their page to the parent company, which offers this also for Box.net and has a number of other encryption solutions.  So it looks good and real.  And I don't know why - and they say put things you don't care about the security of in Dropbox, in the regular Dropbox folder.  Put the things you do care about in your SecretSync folder.  And I don't know why you would put anything in the non-SecretSync folder.  But so anyone using Dropbox...



LEO:  Oh, there is public, you can use Dropbox for public files.  You obviously wouldn't want to encrypt those.



STEVE:  Ah, okay.



LEO:  Yeah, this is great.



STEVE:  Yes.  GetSecretSync.com/ss.



LEO:  Now, do we know that they don't know our password?



STEVE:  I have not fully vetted them.  The thing I was able to do with LastPass was a little bit unique because of the nature of who LastPass is and just how forthcoming they were with their technology, showing things like here's our scripts, here's a page where you can demonstrate that the same thing we're doing in our script is what we say we're doing.  I mean, it was - I was able to really thoroughly examine it.  But I have no reason to mistrust these people.



LEO:  They do say it's client-side encryption, which is what we're looking for.



STEVE:  That's exactly what we want.  We want client-side encryption so it's done in your browser.  And they use AES-256 encryption.  So anything is encrypted before it goes out of your machine, which is exactly what we want.



And, let's see.  SEGA Pass was breached and lost 1.3 million account users, 1.3 million.  They said, "Over the past 24 hours we have identified that unauthorized entry was gained to our SEGA Pass database....  The breach resulted in the compromise of email addresses, dates of birth, and encrypted passwords of 1.3 million users, but luckily no personal payment information was acquired by the attackers since SEGA doesn't store it and uses external payment providers.  So this isn't super bad, but it's email addresses.  And they do say that the passwords were encrypted, but they don't give any details, like was it just an unsalted, single-iteration hash or what.  We don't know.  But so that makes it to the list.  And I checked back in with HasSonyBeenHackedThisWeek, and we still yet a big "YES" on the page.  And we're up to...



LEO:  I mean, really big.



STEVE:  Yes.  And we're up to 20 times in two months.



LEO:  Oh, man.



STEVE:  They've added a Sony Hack History page just to run through.  And in fact the top entry on it right now is suggesting maybe it's time for people to stop using Sony.



LEO:  Oh, my goodness.



STEVE:  Yeah.  Because that just - it just goes on.  I mean, and you sort of start glazing over.  But, I mean, these are all real, legitimate, true hacks.



LEO:  Now, I'm a little, now that we're in the club, so to speak, I'm a little less anxious to knock anybody for being hacked.  But holy cow.  Holy cow.



STEVE:  Yeah.  Now, finally, there was a non-hack that generated a lot of news and for me a lot of incoming tweets.  There was the claim that the Lulz Security folks, LulzSec, had hacked the U.K. Census.  There was a posting, I think it was on Pastebin, that said that the entire U.K. Census database had been acquired by Lulz Security.  Now, it turns out that's not the case.  Lulz Security doesn't normally announce in Pastebin, so that raised some suspicions, and they formally stated that they did not hack the U.K.  But if anyone was interested in asking for their help, they would be happy to, in their words, destroy the people who did hack the UK, if anyone did.  And in fact there's no evidence.  The Pastebin file said we're currently looking at the database, and we'll be posting it in the future.  So no evidence of this other than a spoof.  And it's just believed to be a completely fraudulent spoof.  Nothing behind it.



LEO:  I can add one more.  It's not a hack either, but it's an interesting story.  You know I use Pinboard...



STEVE:  Yes.



LEO:  ...instead of Delicious because Delicious, I don't know, Yahoo! gave up on them for a while, and then they sold it to somebody, and I just don't know what the future of Delicious is, and I love Pinboard.  Pinboard's written by one of the Delicious founders.  It uses the Delicious API.  It's a bookmarking system I use for all the shows.  So the FBI takes some servers down.  Did you see this story?



STEVE:  I did, but it didn't make it onto my list.  Go ahead, Leo.



LEO:  Well, let me add it to your list, only because I'm kind of interested in what's going on with Pinboard.  And we still don't know.  But Pinboard was down for quite some time earlier this week, and it had been so reliable, and they had such a good business model.  And I just thought, well, this is going to be - these guys are going to be rock solid.  Apparently the FBI, in an attempt to go after...



STEVE:  One particular site.



LEO:  ...one site, a customer of a hosting company called Digital One, they apparently couldn't figure out which server that they wanted, so they took out three racks of equipment, including apparently the Pinboard server.  They just took it.  Pinboard's running on a backup server.  They don't know if theirs was lifted by the FBI, but they just know that their server, their database server is gone.



STEVE:  It's gone.



LEO:  Disappeared.  And because Digital One is locked out of the server farm, they can't - they don't know.



STEVE:  Wow.



LEO:  In fact, it doesn't - The New York Times reporting this story doesn't even say - said they don't even know which of their data centers.  I mean, this is so ham-handed.



STEVE:  Yeah.  Yeah.



LEO:  Curbed Network, a New York publisher, offline.  Not because they're suspected, but because they were in those racks.  And Pinboard.



STEVE:  They were in the same rack.



LEO:  Yeah.



STEVE:  Wow.



LEO:  So I just - apparently this is part of the LulzSec investigation.  And, you know, I'm not anti-FBI.  I have a lot of friends in security services, and I know that these guys are actually pretty smart.  But that's just ham-handed.  If you're Pinboard, it's got to...



STEVE:  Well, it's more than that, Leo.  I mean, it really does, it evidences an absolute lack of caring.  I mean, that was deliberate.  It's one thing for there to be a mistake made, like for example where a top-level domain, or rather a second-level domain gets taken down, as we reported months ago, in order to take a site off, and it turns out that that was a web hosting domain with many other domains underneath it.



LEO:  It's happened before.  That was ICE; right?  Yeah.



STEVE:  Yeah, that's a mistake.  This was deliberate.  This was people at the FBI who said, well, we don't care.  We're taking them all.



LEO:  Or they were ignorant.  They apparently thought that one enclosure equals one server.  So they just took the whole enclosure.



STEVE:  I don't know.  You'd have to be so...



LEO:  That's stupid.



STEVE:  You'd have to be the janitor, Leo.  I mean, if you've seen a rack of servers, there's no way, I mean...



LEO:  It was a bunch of machines.



STEVE:  It looks like the computer from the old Seaview back on "Voyage to the Bottom of the Sea."  I mean, it is - you can't think that's one of anything.  It looks like it could run the entire world.



LEO:  The Instapaper, which is another service I use, had a server there.  It's gone.  Marco Arment, who runs Instapaper...



STEVE:  Instapaper, no kidding.



LEO:  Yeah.  He said - now, fortunately, he has other servers.  But he said, our site is up but slowed by this.  Unbelievable.  And Arment says he hasn't heard from Digital One or law enforcement.



STEVE:  Yeah.  I don't give them a pass on this one.  I give them a pass on making a mistake, like had happened before.  But this, this was, I mean, it wasn't malicious, obviously.  But it was deliberate.  They had to know.  Anyone has to know.  I mean, three racks?  These servers are probably little 1U slices.  So you're going to have hundreds of these little 1U things all blinking and spinning.  I mean, it's going to be incredibly heavy, use an amazing amount of power.  But, I mean, it's obviously going to be much more than what they were looking for.



LEO:  It's not unusual for law enforcement, when they're doing a raid, if they're raiding, for instance, a house, just take everything.



STEVE:  They do take everything.



LEO:  Just take everything because you don't know what's going to be evidence and what's not going to be evidence.  But there's such big collateral damage to completely innocent sites.  Wow.



STEVE:  Yeah.  I mean, it can't be allowed to happen in the future.  I mean, the world and commerce and the economy is coming to depend on this crazy toy that DARPA invented to pass packets around, which we now call the Internet.  I mean, it's becoming really real.  And so you just can't arbitrarily say, well, we're going to just take away a chunk of it.  Anyway, that just...



LEO:  I'll be very curious to see if we hear any more, if there's any - nobody's saying anything.



STEVE:  Yeah.  Yeah.  I have a bit of errata because I wanted to note that Java applets, I had said that they could only be invoked through JavaScript, which is not the case.  So I wanted to correct that.  Even with JavaScript disabled, or not using JavaScript, there are native means in HTML for embedding, using the embed tag, a Java applet in a page.  So I wanted to correct that.  NoScript does control Java applets in addition to JavaScript.  And so, for example, if you go to a page that even has JavaScript disabled, you can click on the Java applet and say, yes, I want to just run this one Java applet.  NoScript gives you that control.  So I wanted to correct that.



And I had a couple quick notes from the Twitterverse.  Robin Morley tweeted his experience with Ghostery.  He said, "Is a 25 score on Ghostery a new record?  Courtesy of Salon.com."



LEO:  That's the largest I've seen.  That's amazing.



STEVE:  Yikes.  Can you imagine 25 spyware tracking things?  Well, and that's the kind of thing you'd expect on Salon.com, I mean, where they're being hosted by virtue of all the advertisers and so forth.  What do I have here?  I have, oh, Marc Beaupre in Montreal, Quebec said one way to know whether the site stores your password in cleartext is whether they send the password itself when you perform account recovery.



LEO:  Ah.  That's true.



STEVE:  And I thought that was a very nice point.  If they hash it, they cannot possibly send you your password in cleartext.  So if anyone ever does, you know that they're not hashing it.  So, I mean, it's probably obvious in retrospect, but I wanted to just make note of it.



And several people have talked about positives, surprising positives from Microsoft's System Sweeper.  And one Rich Staples tweeted me, and he said, "Thanks for the tip on the Microsoft System Sweeper.  First test subject was positive."  And I've decided that I'm going to deliberately run it on all my machines.  I don't believe that any of them have any malware in them, but that's the point, is many people are reporting that System Sweeper is finding rootkits that they had no awareness of.  And so, if you don't run it, you don't know.  And I've decided, well, when I reboot my systems I'm going to reboot off of a freshly made ISO and just make sure that there's nothing there.  So I wanted to encourage listeners who for whatever reason may have gone to unsavory places, may have had their machine acting up, but now they think it's okay.  Maybe they found some stuff, and they believe it's removed.  Anyway, if there's any reason to think that something might not be right, might not be completely copacetic, I would recommend Microsoft System Sweeper.  I'm going to do it on all of mine.



LEO:  It does take a while to do, Monkey [indiscernible] points out.



STEVE:  Yes, it does, yes.  And Lorenz Gude sent a nice story from Western Australia, in Perth.  He said, "Here's a SpinRite story for Steve.  I have a neighbor who has mild Alzheimer's, who's also been forced to give up his flat and move into a nursing home about 20 miles away on the other side of the city.  His Compaq notebook computer has become his main way of keeping in contact with his family and friends.  He's a bit of a newb, and he often manages to get it pretty tangled up.  I fix it for him when I visit him on  Thursday afternoons on my way to tai chi.  It is his lifeline, so he works hard to learn new things and has progressed from email to Skype to Google Earth.



"Last month, just a couple of days before leaving for the U.S., I paid my friend a last visit, and the inevitable disaster had occurred.  The Compaq would not boot.  SpinRite immediately came to mind, and I knew that it would be complicated and expensive for him to have the computer fixed commercially.  But I didn't have much time.  My problem was getting it back to him before I had to fly out.  Quick as a flash, my friend saw the solution.  I could leave it in his old flat, which was near me, to which we both have keys, and he could retrieve it after I flew out using his electric scooter and Perth's excellent train system - which can accommodate scooters during nonpeak periods, just FYI.



"In the end that was not necessary.  When I got the Compaq home, I immediately ran Level 2, and it finished in less than an hour and booted up first time.  No time-consuming need to reinstall Windows and all those endless updates.  To be safe, I ran SpinRite again on Level 4 overnight and was able to drop the computer off the next day in plenty of time to catch my flight.  I know it's still working because I get emails from him regularly.  Now, Steve, all we need is SpinRite for the human brain.  I hereby volunteer for a Level 4 scan anytime you're ready."  So that was a neat note.  Thanks very much, Lorenz.



LEO:  Awesome.  Let me just check before we get to - we do have a few questions.  Let me just check to see, yeah, we're still - Bear is still cleaning up the aftermath of the hack.  Just to say it again, I guess it was our chat software.  There was a library on the server that was hacked.  We're working to figure out how that happened.  It was only one of the three servers.  It did not propagate to other servers.  And as far as I know, I don't think any information - I know there's no information in there except for perhaps a chat password.  We'll let you know if those were compromised.  I think that's a pretty low security issue, but we'll certainly let you know as soon as we find out.  But we want to keep it on the QT for a little bit to make sure that all the holes are patched before we...



STEVE:  We'll talk about it next week.



LEO:  Yeah.  Or maybe sooner.  Yeah, it looks like it was a file insertion attack.  So we're working on - we've got everything, I think we've got everything repaired.  We just want to make sure that the hole is plugged before we talk any more about it.  And we've got some good sysadmins, and I have absolute confidence in these guys and their ability to lock stuff down.  So it just shows you, even with a very well run system and some very aggressive sysadmins, things - stuff happens.



STEVE:  Okay.  So Leo, I looked at the page, and it's a ton of JavaScript.  And this is not JavaScript that you guys wrote.  This was JavaScript that other people wrote with the best of intentions.  But, I mean, that's the problem is that code is incredibly complex and difficult to write.  Even with security in mind, there are things that can happen.  And, for example, Dropbox made a mistake where they used to have password checking, and that somehow got disabled for four hours.  So stuff happens.  So, I mean, the problem is that you guys, I mean, this is the only practical thing for you to do, are using scripts from someone else to provide IRC stuff.



LEO:  I can give you a little information.  There was a - we use a very well-known library that is absolutely a great library.  That library was modified.  What we don't know is how it was modified.  So it's not that we used something that inherently was dangerous, but that something was modified.  The point you're making, which is absolutely true, is there's a lot of stuff running on that server, and we don't know exactly how the bad guy got in.  So we're working on that.  And once we know that, we will let you know, and we'll also let you know what kind of - it's not like we're doing eCommerce here.  We don't know much about you.



All right, Steve.  We only have time for a couple of questions, so let's do a few just token questions here.



STEVE:  Yup.  It looks like I sort of scaled that correctly.



LEO:  Yes, you did.  Yes, you did.



STEVE:  So it's your turn, Leo.



LEO:  Oh, I read them, don't I.  Sure.  All right.  Let me get my reading glasses on here.  Question #1, John Fecko in Cape Coral, Florida, asked this on Twitter, so it's nice and short:  Does encrypting everything that goes into a database prevent SQL injection attacks?



STEVE:  Which I thought was a great question.



LEO:  It is.



STEVE:  Yes.  And the answer is no, unfortunately.  Encrypting everything that goes in does encrypt the database, that is, the database's data.  But the SQL injection attacks are typically used, not with the data, but with the command, the SQL command.  And so the problem is that the way current web server back ends are set up, they have an SQL database which is participating in the creation of the page.  So, like, you're on a web forum, and the contents of the forum is coming from the database and being decrypted as it's being brought out to the user's client.



But unfortunately the page itself contains commands, SQL commands which the server interprets as the page is being generated and rendered and sent to the client.  So it's when bad guys are able to inject some commands into a site that they're able to get the SQL data that they injected to be treated as a command.  And so even if that was encrypted when stored, when it's displayed it's decrypted.  So it ends up being that the commands are decrypted just like the data that's being displayed on the page would be decrypted, so the encryption doesn't help you.  It helps you if the database file were to get copied somewhere because then it's just going to be gibberish if someone doesn't have the matching key.  But essentially the injection attack uses the live data, which necessarily is decrypted in order to become live.  So no help there.  But great question, John.



LEO:  Patrick, Laramie, Wyoming comments and wonders about latency versus bandwidth:  Steve, while I realize this is outside the normal scope of Security Now!, I feel this topic should be discussed.  ISPs typically quote their performance numbers in megabits per second.  While this number can be useful, it doesn't tell you anything about the performance of the connection.  What everyone perceives as a fast Internet connection is actually low latency, not high bandwidth.  A low-latency T1, say over fiber, will feel screaming fast, even though it's only 1.44 megabits per second, compared to a high-latency satellite connection, even if the satellite moves data at twice the rate.  For all non-saturated networks, latency is the king of the hill, not bandwidth, although bandwidth does make a difference for high amounts of data being transferred, say a video, a large image when you're downloading a file, that kind of thing.  Yet all ISPs merely quote bandwidth.  I'd rather spec a connection based on latency rather than bandwidth.  What do you think?  Patrick.



STEVE:  Well, I think both are important.  But he does raise a very good point.



LEO:  It's a good point, yes.



STEVE:  Yes, because the Internet, the way the web experience is, is highly transactional.  We've talked often about how the browser makes a query, the server sends the page back, the browser parses the page containing a ton of resources, which the browser then needs to ask for from all over the 'Net.  So each of these things.  Oh, and sometimes it has to look up a domain name.  So it's got to send out DNS queries.  The point is many, many little transactions.  And so if there was a delay per transaction, many of these are being done in parallel, but many of them have to be done in serial, like the DNS address has to be obtained from the domain name before the client can then make a query out to the remote server and so forth.  So it's absolutely the case that a high-bandwidth, high-latency experience for that kind of transactional work will feel very slow.



But to your point, Leo, transferring a big file won't be a problem because TCP has all kinds of fancy technology now, which actually was not as fancy in the beginning.  This was added to the TCP spec over time as the Internet grew and as the bandwidths increased.  The idea is that, as we talked long ago, early in the podcast, TCP has this notion of a window which allows the sender to send data ahead which hasn't yet been acknowledged by the recipient.  And that's necessary, otherwise things would go really slowly.  Otherwise latency would be a huge problem.  So this notion of being able to send things ahead and have delayed acknowledgement, as it's called, is specifically to address the latency problem.  And actually there is a bandwidth-delay product is what it's formally called.  The bandwidth-delay product says it's the bandwidth times the delay that you care about, and you want to keep that, you want to work to optimize the bandwidth-delay product.  So great question, Patrick, and a very good point.



LEO:  Yeah, I just - I won't name names, but I just replaced the - this is another one, and you have a benchmark to test it, the DNS server.  A slow DNS server will make you appear to have slow surfing because it takes a while to come back with the domain or IP address.  And that latency can also kill you, even if you have a very fast connection.  I just replaced, on one of my ISPs, the domain name server for the ISP with OpenDNS, and boom, big, huge difference.  Feels like my connection speed is tripled.  But it hasn't.



STEVE:  Yeah.  Yeah.  And I've had a lot of feedback.  Again, we did talk about GRC's DNS Benchmark, which is a bit of freeware from me which does exactly that.  And a lot of people have said, hey, I found that - in one guy's case I remember seeing, he said, 4.2.2.1 is the fastest for him, and that's one of the Level 3 servers that's been around forever, and frequently fast.  And OpenDNS is very fast, as well.  So as you say...



LEO:  Yeah.  Test it, though.



STEVE:  ...that can absolutely slow you down.



LEO:  Download Steve's tester, and you can find out what the best is.  Because it would be different everywhere, I imagine.  Every user would have a different experience.



Patrick McAuley in Guelph, Ontario, Canada asks:  Abandon passwords?  Steve, did you see this Gizmodo piece arguing for abandoning passwords in favor of some entirely new scheme for online identity?  He said read the comments after the piece, as well.  We'll put the link in the show notes.  I already have on the show wiki.  You could also Google "Gizmodo, it's time to abandon passwords."  Mat Honan wrote this on Gizmodo.  What do you think?



STEVE:  Well, every time I use my little, always present and never very far away from me, football to authenticate to PayPal, I'm glad that they offer it.



LEO:  Yes.



STEVE:  What we clearly need - there was a blurb, it was the SEGA Pass comment blog posting that I read where SEGA said none of our users' financial information was lost because we use a third-party provider.  That struck me as, yeah, I mean, that's cool.  And if there was one that I absolutely trusted, I would love to offload that responsibility.  I mean, for myself, I wrote all my own code and developed my own merchant processing and credit card processing system just because security is paramount for me, and I would hate to ever have to write a letter to my users saying that the people who process our credit cards have been compromised, and therefore you might be in trouble.  I would hate that.  So if there were somebody that you could offload that responsibility to, that would be fantastic.



Similarly, we really do need some sort of centralized third-party solution.  We've talked about OpenID as being sort of a, well, sort of a quick hack for doing that.  It's sort of limping along and not really taking off.  There is work by the U.S. government, putting together something called, I think it's NTSIC is the - or NSTIC, I can't remember the acronym.  But I've got it on my notes to talk about it because the notion is it's like a trusted infrastructure for authenticating users.  What we need is some single central place or places, I don't care if there's competition, but right now the problem is we're doing authentication per site.  And that's just wrong.  We need to have that centralized.



I mean, there's a downside, of course.  And that is, if it's centralized, then that's the pot of gold that the bad guys go after.  But it is, I will say again, not impossible to have security done right.  It just has to be really important to the company to do it right and to care.  And so if we authenticated with a single authority and used multifactor authentication if you want to, I mean, for the added security, I certainly would, then websites would bounce us there to authenticate and just get back an anonymous token that says, okay, the same person who created this account before is back.  And that's how we would identify ourselves, rather than having to give every single place we visit our name and address and information and so on and so forth.



So, I mean, we're to the point now where this has to happen.  It is time for it to happen.  The idea that we have to individually create accounts, and then we're responsible, all of the burden, all the onus is on us not to reuse the same password.  You're almost tempted not to reuse the same email address, although that's difficult for many users.  I control my own server, so I have netflix@grc.com, for example, or I'm able to easily create those on an as-needed basis so that I've got separate identities all over the place, which is unfortunately not convenient for most people.  But, yes, we really do need to have this taken care of, Leo.  Something has to happen.



LEO:  I'd love to see something, well, and this is what I use for SSH.  I use public key cryptography to log - I don't use a password.  I use, I don't know what you would call it, but I'm automatically authenticated when I log onto my SSH server because I have the key on my server, and it's a known key on that server, and I don't know.  What do you call that?



STEVE:  You are using strong cryptographic security, strong cryptographic authentication.



LEO:  Right.  So I don't ever enter a password.  I just SSH on that computer.  And because that key is on that, it's, yeah, I don't know what you call it.  But anyway, it works.  And I actually asked our admins, I said, is this okay?  And they said, oh, yeah, this is preferable.  We don't want you to use a password.  Just use your SSH key.



STEVE:  Right.



LEO:  And that does - that is great.  So that's how I do it.



STEVE:  Yeah, we're going to get there.  We're in the Wild West days still, and the responsibility is ours.  I am working on something which is going to be cool.  And we'll talk about it in a couple weeks.



LEO:  Okay.  I can't wait.



STEVE:  It's in this password space still.



LEO:  Steve Gibson is the man in charge of GRC, the Gibson Research Corporation, GRC.com.  If you want to download any of his great stuff, including the fantastic SpinRite, the world's best hard drive maintenance and recovery utility, but also lots of freebies on there for security and encryption and passwords and all that stuff, even just fun, like Wizmo.  You can also follow him on Twitter.  His Twitter handle is @SGgrc.  @SGgrc on Twitter.  And actually, as we can see now, he responds and follows and does interesting stuff with that Twitter information.  So that's good.



Thank you, Steve, for being here.  We do the show every Wednesday at 11:00 a.m. Pacific, 2:00 p.m. Eastern.  Live.twit.tv is the place to go to watch it.  Do keep up, I'll post a blog post on the TWiT.tv site and on my blog about what the security hack was, if information was compromised, if any.  If anything, you know, the only information we have is some people on our IRC have passwords.  That database could have been compromised.  If you have an IRC password, it would probably behoove you to change it.  And if you have foolishly used that IRC password on other sites, you might want to change those other sites, as well.  We don't have any reason to believe that was compromised.  That's just prudent.  And we'll find out more, and I will keep you posted because I believe in full disclosure.  Steve, thanks, and we'll talk to you next week on Security Now!.



STEVE:  Talk to you then, Leo.



LEO:  Bye bye.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#307

DATE:		June 30, 2011

TITLE:		The Future of Identity

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-307.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  This week, after catching up on the week's security and privacy news, Steve and Leo take a look at the state of Identity Management in Cyberspace with the U.S. Government's publication of its NSTIC - National Strategy for Trusted Identities in Cyberspace.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 307, recorded June 29, 2011:  The Future of Identity.



It's time for Security Now!, the show that protects your security and privacy online.  And here he is, the man with the plan, the guy behind the scenes, the man who knows security and shares it all with you, the inventor of the acronym PEE, Mr. Steve Gibson.  Pre-Egress Encryption.



STEVE GIBSON:  And we've had it fixed now.  It's been revised to PIE, as in Pie in the Sky:  Pre-Internet Encryption.



LEO:  Yes, Pre-Internet Encryption.  Hey, Steve, how are you?



STEVE:  So that regular mortals can remember what the acronym stands for.



LEO:  No PEE.  Have PIE instead.



STEVE:  PEE was always - I was tripping over that a little bit, too.



LEO:  There's actually a company that is a third party that is promising PIE, I think maybe did we talk about it last week, PIE for Dropbox now, which is great.



STEVE:  Yes, we did talk about it last week.



LEO:  That's probably where I heard it.



STEVE:  And there are a number of other Dropbox competitors that purport to do a better job, and I've got that on my list of alternative solutions.



LEO:  I switched to Wuala.



STEVE:  That's one of the ones off the top of the list, as a matter of fact.



LEO:  You won't like one thing about Wuala.  It's Java based.



STEVE:  Oh, well, no one's perfect.  But, I mean, they had to run - you had to run something, probably, at your end, so...



LEO:  And that's why it's cross-platform.



STEVE:  Better Java than JavaScript, I would argue.



LEO:  Yeah.  And I think Wuala does quite a good job of - the thing I - well, I'll let you review it.  And I'd be very curious to hear if their model is good.



STEVE:  That's key.



LEO:  But the thing I liked is, for free, if you donate - it's peer to peer.  So if you donate some hard drive space, which I have done, then you'd get it back.  So I have 463GB of cloud storage for free from Wuala, which I really like.  But we'll talk about that.



STEVE:  Now, that's actually not so much cloud storage is somebody else's dirt storage; right?  I mean, if you're donating your hard drive space...



LEO:  It's shared dirt storage.  This is what's interesting about it.



STEVE:  Right.



LEO:  So that's why it's so important that they have free Internet encryption, because bits of your data are strewn  across the Internet.



STEVE:  Oh, yes.



LEO:  However, they have a very - and I'm curious about, I really can't wait to hear about this because they have what looks like a clever algorithm for redundancy.  So if I take my hard drive offline, it doesn't kill my...



STEVE:  Clearly something will be necessary, yeah.



LEO:  And by donating 400, I think it's 400 gigs, I'm just making it available to them, I've got it back.  So it's cloud storage, but not on my dirt drive, somebody else's dirt drive.  It's an interesting model.  I cannot wait to hear you review it.  LaCie owns that.



STEVE:  Yeah, the math doesn't quite work.  If you get back the same amount that you give, then I'm wondering how they're incorporating redundancy into the model because...



LEO:  Well, maybe it's not the same amount.  I can't remember what the deal is.  And they vet your up time.  So you don't get the full amount right away.  It slowly increments.  I finally built up to it because they're checking, are you up all the time, so that, you know...



STEVE:  Right, are you a useful provider of dirt drive.



LEO:  So I keep my dirt drive on my desktop on all the time anyway at home, and it's got terabytes of storage.  So giving them 400 gigs [verbal shrug].  And I get the benefit because I have this, now, Wuala on all my systems, and I can store a ton of material.  But anyway, but that's a conversation for another time.  I'm looking at the lower third here, and I see somebody has written - me - "The Future of Identity."  What are we talking about this week?



STEVE:  We're going to talk about the future of identity, not coincidentally.  I mentioned the acronym that sort of got me thinking about this a week or two ago.  It's an acronym that the National Institute of Standards came up with, and it's something that the executive branch of the U.S. government has been working on for some time.  And I've been sort of keeping an eye on it to see what it was going to be because it's got a little bit of an Orwellian concern, except that from the documentation that they've put together it's very clear that this isn't going to go in that direction.  But I want to talk about - we're going to talk about the future of identity, that is, the whole issue of identity in cyberspace.  This acronym is NSTIC, the National Strategy for Trusted Identities in Cyberspace.



LEO:  Now, as you say, this makes me nervous because what I don't want is a national identity card or something like that.



STEVE:  Precisely.  And this in fact specifically uses those words, "This is not a national identity card."  And in fact it's not even the U.S. government's.  There has been work which we're going to - I'm going to run through the history dating back a decade where a consortium of about 30 organizations originally got together and began working on this.  And we've touched on aspects of this.  OpenID is part of it.  OAuth, we did a podcast on OAuth where we explained how it's possible for you to authorize one site that has information about you to go to another site or to make it available to another site with proper security and so forth.  So we're beginning to see sort of the amalgamation and the condensation of a number of different sort of small, stratified, individual concepts into a coherent whole.



The government's role is really to try to establish some standards to assure interoperability among these.  And probably, I mean, one of the things that they're able to do, for example, is to require that all their contractors abide by the following technology; that the contractors' vendors do so.  I mean, the government obviously is a huge purchasing body.  And so if it were able to get behind a coherent strategy, that would really help bootstrapping it and tend to prevent fragmentation.  What we really want is interoperability.  So anyway, we'll talk about all that.  And we've got of course news and security updates and all the regular stuff, too.  Oh, and some cool errata this time.



LEO:  I can't wait.  You know, I have to say it's gotten now to the point, and I bet I'm not alone on this, with Wuala or this national identity thing or whatever they call it, the Internet identity, that until I heard Steve Gibson's take on it I don't trust anything.  But once I hear you vet it, and this is what I love about this show, then I feel some confidence.  LastPass, very good example.  I love LastPass and used it.  But I really didn't have full confidence till I heard your dissection of it.  So we really count on you for this kind of thing, Steve.  Thank you.



STEVE:  It's about the technology, and that's really our - that's what we do here is technology.



LEO:  And it's a huge service, I think, to the Internet community to have somebody who is super technically savvy kind of spell it out for those of us who are a little less so, shall we say.



STEVE:  Well, you just don't have time to go there.  I'll do that for you.



LEO:  Well, that's the whole - to me that's what open source is about, and why I trust open source encryption.  It's not because I can read the code and make sense of it.  It's because somebody, presumably, somebody can and will and determine if it's good or not.  All right.  I am ready to begin this episode.  We start as usual with Steve Gibson with security updates.



STEVE:  Yeah, we don't have much in the way of updates.  I mean, Mac is updating, and I think there's a big Java update.



LEO:  Yeah.  There's a bunch of Mac updates, yeah.  I think ten, six, eight or something, yeah.



STEVE:  Yeah, just go do that.  I did get some tweets from people wondering why Microsoft was updating them off cycle.  And we had mentioned before that Microsoft does non-security patches on alternative Tuesdays to the big mega monthly second Tuesday of the month patch.  And three little just, I mean, these are classic bug fix-y things.  There was a problem with some networks that were fragmenting large SSL packets, and Microsoft was not able to reassemble fragmented SSL packets.  So one fix that they issued yesterday, Tuesday, fixes that so that they're now able to reassemble fragmented SSL packets.  There was apparently some fuzzy fonts under IE9, so they fixed that.  And then they also added something called OFV, Office File Validation, for the Office suites 2003, 2007, and 2010.  So those three things were part of what happened last Tuesday.  Not security things, just fixing sort of debris, bugs and things in Windows, which they have to do from time to time.



The only interesting piece of, well, we have got Attacks & Breaches section, which is separate.  I was going to say the only interesting piece of security news that is not Attacks & Breaches was a little blurb that I picked up that I thought I would share with our listeners because it made me sort of breathe a sigh of relief.  And that was Mozilla's announcement that Firefox will be getting native Adobe-free PDF rendering.



LEO:  Yay.



STEVE:  Yes.



LEO:  Actually, everybody's going to have that.  Microsoft said Windows 8 will have it, too.  I mean, this is - we're going to be able to get rid of Adobe pretty soon.



STEVE:  Yup.  And sorry about that, Adobe, but you brought it on yourself.



LEO:  Yeah, no kidding.



STEVE:  So they posted, "We intend to use PDF.js to render PDFs natively within Firefox itself."



LEO:  JavaScript.



STEVE:  JavaScript.



LEO:  Interesting.



STEVE:  Yeah.  "Our most immediate goal is to implement the most commonly used PDF features so we can render a large majority of the PDFs found on the web.  We believe we can reach that point in less than three months.  The entire code so far is less than one month old, and it already renders a large set of PDF features.  Initially we'll make a Firefox extension available to interested users that enables inline PDF rendering using PDF.js.  But our ultimate goal is of course shipping PDF.js with Firefox.  This will result in a substantial usability, but also security improvement for our users.  PDF.js uses only safe web languages and doesn't contain any native code pieces attackers could exploit."  So that'll be a nice step forward for Firefox.



LEO:  Is JavaScript inherently open source?  I guess there's ways you could obfuscate JavaScript.  But for the most part, unless you actively try to do that, you can always see what the code is; right?



STEVE:  Oh, absolutely.  The browser needs to be able to interpret it.  There's no notion of compiling it.  There are many obfuscators of JavaScript.  And basically they sort of just do a compression, and then they tack onto the front of this blob the JavaScript decompressor.  And so essentially the browser just runs the JavaScript, and it does sort of an in-place decompression.  But similarly you could easily, in fact there are, there are pages on the 'Net where you can put in obfuscated JavaScript, and it just decompresses it for you.



LEO:  By the nature of it, just like the CSS code, because your browser has to be able to read it in plaintext, so can you.



STEVE:  Exactly.



LEO:  Yeah.  So that's good.  I mean, that's good news.  It means if their PDF implementation is buggy or whatever, we can at least see it and maybe fix it, and we can know that it works all right.  Which you can't do with Adobe stuff.



STEVE:  Well, I mean, Adobe is suffering from, on one hand, their own success because, as we know, the PDF evolved from Postscript, which was their original creation back in the early days.  Apple licensed the Postscript interpreter, remember, for the first laser jet.  Was it laser jet or laser printer?



LEO:  No, it was a printer, it was a Writer.



STEVE:  Oh, Apple, Applewriter.



LEO:  Applewriter, yeah.



STEVE:  Yeah.



LEO:  Something like that.  LaserWriter.



STEVE:  LaserWriter.  The Applewriter was their inkjet printer.



LEO:  No, it wasn't even inkjet.



STEVE:  No kidding?



LEO:  That was the [sound effects].



STEVE:  Oh, goodness.



LEO:  I had one.  Tractor feed, baby.



STEVE:  Applewriter.



LEO:  Applewriter.



STEVE:  But it did graphics, which blew everyone away at the time.



LEO:  That's right.



STEVE:  Yeah.  Anyway...



LEO:  Well, that's a mistake Adobe didn't make with Flash, note.  You can't implement Flash without Adobe code and Adobe license.  But you can implement PDF without an Adobe - I don't know, is it a license or...



STEVE:  Well, at some point it behooved them to put it into the public domain, to make the format more widely available so that they were able to gain more traction.  And unfortunately they've just been bitten by all the security problems of their old code.



Lulz Security, the company we've been referring to many times recently because they've just been so actively hacking, announced that they were disbanding.  And there was some speculation on the 'Net about whether this was because the heat really had been turned up on them legally.  Someone suspected of being a LulzSec member was arrested, I think in the U.K.  And so they formally said goodbye on June 26.  But in the process they released three quarter of a million newly hacked email addresses, passwords in cleartext, obtained from various sources.



Now, much as there was ShouldIChangeMyPassword.com we talked about last week, the fun site that has aggregated a lot of this, there is - there isn't as nice a URL, unfortunately.  But at Dazzlepod.com/lulzsec/final is another aggregator that has a - I think the last time I saw it was at 400,000 and growing.  They're going to be putting it all in.  In this case, instead of putting your password in, you put in your email address, and they're obscuring the plaintext password.  So they allow you to do a quick index on your email address to see whether your email address is among these hundreds of thousands of account databases that have been compromised and stolen.  So I wanted to give our listeners a tip about that.



LEO:  They just wanted you to say "Dazzlepod." 



STEVE:  Dazzlepod.  And also LulzSec made the news last week prior to disbanding by posting 446.6 meg of known-to-be-authentic Arizona State Department of Public Safety documents, which they stuck upon the Pirate Bay.  A spokesman, Captain Steve Harrison of the Arizona Department of Public Safety, confirmed that the agency systems were hacked, and these documents were legitimate.



And the LulzSec guys said, "We are releasing hundreds of private intelligence bulletins, training manuals, personal email correspondence, names, phone numbers, addresses, and passwords belonging to Arizona law enforcement.  We are targeting the AZDPS" - which is Arizona Department of Public Safety - "specifically because we are against SB1070 and the racial profiling anti-immigrant police state that is Arizona."  And that SB1070 they refer to is the measure that passed recently making it a crime to be in Arizona without documentation proving United States residency.



So those guys are being a little bit politically activist and slapping Arizona as a consequence.  So but apparently, if we're to believe what's been said, and apparently it's been confirmed, LulzSec has disbanded, and they're going to go in...



LEO:  How weird.



STEVE:  It is.



LEO:  It's just so strange.  The whole thing is strange.  I expect a movie at the very least.



STEVE:  And finally, we talked last week about the Citigroup attack where Citi had 360,000 credit card numbers and other information had been lost, compromised in an online breach.  The news came out since then that this attack was going to cost Citigroup $2.7 million, they confirmed to U.S. government officials earlier this week.  "According to Citigroup, personal information and card numbers from approximately 3,400 cardholders" - so 3,400 out of that 360,000.  So "...personal information and card numbers from approximately 3,400 cardholders was subsequently used to make about $2.7 million in unauthorized purchases."  And "Citigroup stated that affected customers would be reimbursed for the fraudulent charges."



So the point is that the information was stolen.  It was immediately used in 3,400 different account cases to purchase stuff.  And as we know, credit card companies hold their cardholders harmless for this kind of information theft even if it's not their fault, if it just somehow gets loose from some other website.  I've had to change my card number a number of times as a consequence.  And so in this case it's costing them $2.7 million.



LEO:  That's actually probably not that much compared to some of the other losses that they've suffered in other times.  That's chickenfeed from their point of view.



STEVE:  From the Twitterverse, @AlienCG was the person who tweeted me, I don't know his real name, but he reminded me that you can add a label to the end of your username in Gmail.  So you could say, for example, username, then the plus sign, and whatever you want to after that, before @gmail.com.  And he said, "Could this help add some security to a logon?"  And I thanked him for that, and I told him that I would mention it to our listeners because I had mentioned last week that it's difficult for users to easily create ad hoc email addresses.  And this does allow that.  At the same time, it exposes your primary email account name, so it's not quite the same.  But it would allow you, for example, to go username+aol, username+yahoo and so forth.  And if you started getting spam or unwanted stuff, you could simply cancel that or route it into the trash reliably as some way of sort of segregating incoming email.  So I thought that was a good tip.



And then John Nasers, @jnaz on Twitter, he was the first person to notify me of a free new Peter F. Hamilton Kindle book.



LEO:  Damn.  I'm just finishing "The Void."  Which, by the way, is a long book.



STEVE:  Believe me, you could do this for dessert.  This is very - it is a short story.



LEO:  It's short?  Good.  Oh, good, okay.



STEVE:  And the title is "If At First...."  And of course that's as in "If at first you don't succeed," which sort of is the nature of the story.  Reading from the description it says, "Peter F. Hamilton has proven himself a modern master of epic space opera, carrying the tradition of far-future empire building begun by Heinlein and Asimov into the new millennium.  But Hamilton is also a master of the short story" - but we haven't seen many of those.



It says, "And when he tackles one of science fiction's most enduring themes - time travel - the result is as provocative as it is entertaining.  It starts in 2007 with a break-in.  The victim:  Marcus Orthew, the financial and technological genius behind Orthanics, the computer company whose radical products have delivered a one-two punch to the industry, all but knocking PCs and Macs out of the ring.  The perpetrator:  a man obsessed with Orthew.  Just another simple case of celebrity stalking  or so everyone assumes at first, including Metropolitan Police Chief Detective David Lanson.  But when Lanson interviews the suspect, he makes a startling claim:  Orthew is from the future.  Or, rather, a future - a parallel timeline. Thus begins the ride of a lifetime for Lanson as his pursuit of the facts tumbles him headlong down a rabbit hole - and the hunter finds himself hunted."



LEO:  I can't wait.



STEVE:  Well, so I grabbed it, and I read it in, like, an hour.



LEO:  It took longer to read the synopsis.



STEVE:  It did.  Fun story.



LEO:  I can't wait.



STEVE:  But then I realized why Peter had done this.



LEO:  Uh-oh.  Is he setting up another trilogy?



STEVE:  Well, what's going to happen is, that was to get you into discovering that his very first books are about to be made available.  His very first books, that's where I started reading him in '93.  He did something called "Mindstar Rising," which a character called Greg Mandel, who had some sort of an organ that secreted stuff in his brain.  And he could, like squeeze it, and it would, like, juice him.  And anyway...



LEO:  Hamilton's a very interesting mix of hard sci-fi, really good hard sci-fi, with basically just great emotional writing.  I mean, it's an unusual combination in sci-fi, I have to say.



STEVE:  Well, and of course the Night's Dawn Trilogy is where most people discovered Peter because that became so famous.



LEO:  Yeah, but I think the Void trilogy is his best work.



STEVE:  No kidding.  I've got it, and I haven't started it yet.



LEO:  Oh, you haven't read it?



STEVE:  No.



LEO:  You know, it may turn you off because there is a large fantasy component.  But it fits in very well, but it has some kind of sword-and-sorcerers type stuff in it that some people, some sci-fi people just say, I'm not going to do that.



STEVE:  That would be hard for me, although I understand it has our characters from...



LEO:  It does.  Ozzie and company are back.



STEVE:  And that sucks me in, I think.



LEO:  And I think that the overall sci-fi premise - I don't think you'll have a problem with it, the fantasy part.  In fact, you'll love it.  And I have to think that - I believe that "Dreaming Void," "Evolutionary Void," I can't remember what the three titles are, but the Void trilogy is absolutely...



STEVE:  "The Void Is Finally Over" is probably the third one.



LEO:  Finally over.  No, I'm in the third book.  I'm almost, I have about - only have about 16 hours left.  It's a 75-hour book, audio book.  But I have to think it is his best writing.  It's his best development.  He's done a wonderful, wonderful job.



STEVE:  Well, I was really sorry that those first three books - there's "Mindstar Rising," "A Quantum Murder," and "The Nano Flower," which he wrote in '93 and '94 and '95 respectively.  They've been out of print ever since.  Anyway, "The Mandel Files" is repackaging them, and it'll be released on August 23.  It's available for preorder from Amazon.  So I just want to let our users - our users - our listeners know.  If there's anyone who is as much of a Peter F. Hamilton fanatic as you and I are, Leo - oh, and these are short.  These are standard regular paperback size.  They're not major projects.  But he develops a really interesting character with lots of fun, and I can't wait to read them again.  So we'll be able to before long.



LEO:  So you have read them before.



STEVE:  Yes, I read them back then in '93, '94.  That was my introduction to Peter F. Hamilton.  So when Nights Dawn Trilogy came along, it's like, oh.  Then I was a little freaked out by kind of what direction that trilogy took.



LEO:  That was a little weird.  And Pandora, I liked "Pandora's Star."  "Fallen Dragon" is a great one, if nobody's read any of his stuff, to read, the first Hamilton.



STEVE:  Yes.  That's what I recommend.



LEO:  It's a single volume, and it's easier to get into than the trilogies.  But, boy, is he a great writer.  And I've become a big fan.  I think he's an underappreciated writer, to be - what is that you've got there?



STEVE:  Well, this is - I was going to mention, this is in my Miscellany.



LEO:  I just got that book.  It just came out.



STEVE:  One of several.  Well, okay.  This is - I wanted to let our listeners know, anyone who is messing with JavaScript, as I now am, Volume 5 is what I learned on a couple months ago, which is, for people who have video, you can see it on, what, that would be your left; right?  And...



LEO:  The skinny one.



STEVE:  The skinny one.



LEO:  Relatively.



STEVE:  Now, I was annoyed...





LEO:  We would never have thought it was skinny a couple of years ago.



STEVE:  No.  I was annoyed that its copyright was '06 because that makes it five years old, well, or, yeah, five years old.  And that's an eternity in web time.  And I felt the age of it.  It was talking about older IE versions, like IE6, and didn't know about Netscape or Firefox 4 and so forth.



Well, anyway, just last week the author David Flanagan, who is pretty much O'Reilly's JavaScript guy, finished a yearlong project which was a massive rewrite of his original "JavaScript:  The Definitive Guide," which is the book.  And now we have a book with a 2011 copyright, and I'm happy again.  Actually, I'm going to reread this entire new one because I was about to re-read the older one, just because I've been now programming in JavaScript for a couple months, and I thought, okay, now is the time to reread it with an appreciation for, you know, I'll get so much more out of the second reading.



LEO:  I have the fourth edition, but I just got - I got David's new one because I was at O'Reilly for Foo Camp, and they gave us the new one.  And the funny thing is there's another book, I think it's a companion volume, called "JavaScript:  The Good Parts."



STEVE:  Oh, I have that, too, yeah.



LEO:  So "JavaScript:  The Definitive Guide" is this thick.  "JavaScript:  The Good Parts" is about that thick.



STEVE:  Yeah, that sort of tells you about how much is not good.



LEO:  You need both, let me tell you.  No, I think JavaScript's a very interesting language.  And because it is rapidly becoming the de facto standard for not just web apps, but for mobile apps, with things like Web OS and the new Windows Phone 7, and even Apple.



STEVE:  Well, and we know that Windows 8 is going to be supporting JavaScript as its application development platform natively, as well.  So, yeah, I mean, it was just - it was overdue for me to learn it.  I've been wanting - I have been recently doing, as we know, client-side things, like the Password Haystacks is all JavaScript.  And it has turned out that I think I have - I still have to be careful with overstating what I think I have.  But in a couple weeks I'll be introducing our listeners to something extremely cool, that it looks like it's going to survive its testing.



I discovered an app which I had to tell our listeners about because we all have friends who are proud of their five or more megapixel cameras, and who send us unresized photos.  It drives me nuts.  I'll, like, check mail, and some 10-meg thing is, like...



LEO:  Remember when mailboxes used to be 10 megs?



STEVE:  Yes.



LEO:  You couldn't have more than 10 megs.



STEVE:  It's like, what in the world is coming in?  And then, when I open my email, all I see is some person's armpit because the picture is so huge.  And I think, what is this armpit?



LEO:  I don't know what kind of pictures you're getting.



STEVE:  No, not naked armpit.



LEO:  I know what you mean.  And you have to scroll, and you have to scroll, and you have to scroll, and you have to scroll.  I agree with you.  Resize, folks.



STEVE:  Okay.  There is something that solves this, and it is very cool.  It's called RoboSizer.com.  Go to that URL, Leo.  RoboSizer.com.



LEO:  Okay.  Typing it in.



STEVE:  And this is, well, first of all, it makes resizing instant for we who know how to do it.  I mean, for example, right now I'll fire up Photo-Paint or PaintShop Pro or something and resize manually.  This makes it much faster.  But what's cool about it is that - and this is why we want to recommend it to our friends.  I mean, I'm going to say, Mom...



LEO:  Those friends.



STEVE:  You put this in, and it hooks the OS across all these applications.



LEO:  So you don't have to run an app.



STEVE:  It's transparent.



LEO:  Oh, that's nice.



STEVE:  You simply, when you attach - when you upload things to the web, you upload photos to the web, you attach photos to email to send them.  It supports social networking, all the web browsers, all of the instant messaging clients.  So basically it just takes responsibility for, in the background, transparently resizing photos.  And it's shareware, I think, for a month, and then $24.95.  So it's not free, but I just wanted to let everyone know about it because I'm sending it to my friends.  I've got one buddy in particular who just - he loves his camera, but he's like, oh, look at this.  And I see weeds.  It's like, wait a minute.  And then it's like, oh, my god, because I'm using Eudora still, and it won't resize instantly for me, so it's annoying.



LEO:  Great.  RoboSizer.com.  That's great.



STEVE:  I'm through with armpits for a while.



LEO:  Windows only, of course.



STEVE:  Yes, it is Windows only.  And then this, I've had this note for, well, you'll see from the nature of the note for how long.  And I just thought I would share it today.  This is from someone named Ryan, Ryan McCain, actually, who wrote to me years ago.  He said, "I live in Louisiana, and during Katrina all of my computer equipment got wiped out.  I've been able to get my laptop, and as you can imagine, it wouldn't boot up.  I downloaded SpinRite illegally, not thinking it would do anything, but wow.  It did its thing for a few hours, fixed or marked a ton of errors, and my laptop can now boot.  I had so many personal photos, documents, et cetera on that laptop, so SpinRite has been a blessing.  Here's the catch:  I lost nearly everything in Katrina, including my house, one of my kids, pets, job, et cetera."



LEO:  Oh, no.  Oh, dear.



STEVE:  "I mean EVERYTHING," he put in all caps.  He said, "I'm an honest person, so I want to pay for your software.  However, I can't afford to pay it all at once at the moment."  And I'm thinking, no kidding.



LEO:  No kidding, yeah.



STEVE:  But he says, "One day you're skating through life with a great family, a nine-to-five job in IT.  The next day you're trying to muster up enough strength just to get through the day.  As you can imagine, money is very tight as we continue to recover from this nightmare.  I'm not wanting your sympathy, I'm simply explaining my situation.  I can give you $10 per month until the price of the product is paid off.  I know that sounds absurd, and I'm embarrassed to even ask that of you.  However, I'm trying to keep my wife and kid fed, and things are really tight around here.  Hell, I never thought I would be one of those people who went to the library to get on the Internet.  That will give you an idea of how things are down here, not just for me but for thousands of people in the Gulf Coast.  I appreciate any leeway you can give me here."  Well, of course I wrote immediately, and I said...



LEO:  Yeah.  I have a feeling I know what you said.



STEVE:  "You owe me nothing for your use of SpinRite."  I said, "I'm very glad that it was able to help you post-Katrina.  And the LAST thing," in caps, "I want from you is $89 that you don't have."



LEO:  No kidding, yeah.



STEVE:  "The most expensive aspect of your having used a pirated copy is the time I'm taking here to reply to you, which I'm glad to do.  So please, you have the best wishes of all of us here at GRC, and you owe us nothing whatsoever.  Peace, and hang in there."



LEO:  Wow.



STEVE:  So he wrote back.  He said, "Steve, that's very generous of you.  Thank you very much."  Well.  He says, "My only priority at the time was saving as much information off of that laptop as possible, no matter how many laws I had to break.  90 percent of the videos, pictures, et cetera, I had of my kid who passed away during Katrina were on that laptop."



LEO:  That's just, oh, my god, I'm just devastated.



STEVE:  "So it was much more than just a few songs and funny videos that I was trying to restore.  Thanks to SpinRite, I was able to recover every one of his pictures and videos.  Feel free to read this email on the Security Now! podcast as a testament to just how great SpinRite is.  Thank you for your kind wishes, not only for my family, but for everyone who's still getting their lives back together in the Gulf.  Ryan."  So.



LEO:  I don't know what to say.  That's, wow, yeah.



STEVE:  It was very neat.



LEO:  Ryan, our thoughts and prayers are with you.  Wow.



STEVE:  And presumably, since that was a while ago, he's pulled his life back together.  Of course, nothing can replace - I can't SpinRite his lost son, so, yeah.



LEO:  You never recover from that.  That's terrible.  Oh, my god.  All right, Steve.  Let's see what the feds are up to now with this identity thing.



STEVE:  Okay.  So this is, in my opinion, probably the most important thing going on that is Internet-wide for virtually all of us.  And that is the problem that we tackle daily with authentication and identity on the 'Net.  It's a constant recurring theme.  We talk about passwords a lot.  I've got, as I said, I hope to have one more shoe to drop, or the other shoe, or something, on the issue soon, some work that I've been doing.



But we have this problem that we've discussed, we've come at from various ways.  We've talked about OpenID in the past, the idea that you have what's called a "single sign on," where you would authenticate yourself to a single location.  And either then you would maintain that persistently, and other sites you visited could figure out who you were from that and trust that, or when you go to sign onto a site, it bounces you to somewhere else to authenticate, and then you come back having done so.



Then we've talked about the OAuth, the OpenAuth project, where, for example, if you were at Flickr, and Flickr said we'd like to grab your Facebook friends with your permission, what happens is you say, yes, let's go do that.  And so you're bounced over to Facebook, where you log in with Facebook, if you're not already logged in persistently.  You give Facebook essentially permission to provide that information to Flickr, and then you're bounced back.  We did a podcast about that.  That's how the OpenAuth technology works.  And there's the crypto going on in the background is Flickr representing what it wants to Facebook, Facebook showing you what it is that it's going to give, and making all that kind of transaction secure.



Then there's, like, a number of other technologies.  There's something called SAML, which is a Security Assertion Markup Language, which is unfortunately the result of massive committees working over a decade, everybody wanting something slightly different.  And this thing has just grown to the point - it's something that I talk about with my YubiKey friends because they're very interested in, like, beyond just YubiKey.  Stina, her original concept was solving this problem.  And so she came up with the YubiKey sort of as a, oh, well, here's something, recognizing it's not the whole answer.  It's a multifactor authentication component of a much bigger problem.  And there's something called UMA, User-Managed Access, which manages sort of like what information will be revealed, what purpose it will be used for, who will have access to it.



I mean, these are really big problems.  And so I'm very bullish on one hand that - or I guess hopeful.  I'm hopeful that we're going to come up with ways to make this secure.  At the same time, any user who follows along with, like, the condition of a current desktop, has got to wonder how you can do anything securely on an insecure platform, which is - I lay awake last night thinking about this, as I was thinking that this was what we were going to be talking about on the podcast, because you can argue that it's extremely difficult to extend trust very far into an insecure place.



The TPM, the Trusted Platform Module, which many laptops have, and we're beginning to see it on desktop motherboards, the idea there is that you have sort of a secure boot process where you start from a known core of security, and you only run authenticated software in sort of a stepwise fashion where you incrementally boot yourself into running in a way that, for example, would prevent a rootkit from being installed in the boot sector of the first track of your hard drive and then allow it to take over and compromise the security from there on out.



So lots of focus has been given to this.  There's something called the Liberty Alliance which was formed 10 years ago in 2001.  Initially it had 30 organizations that got together to attempt to establish open standards, guidelines, and best practices for this problem.  I mean, everyone recognizes there's a problem.  And the goal is aggressive.  I mean, the goal would be to, for example, have something robust enough that we could do voting online, and it was not compromisable; that we would have access to medical records; that we would be able to order prescriptions.  And part of the problem is that you have to be very careful, obviously, about privacy and information leakage and all of that.



So the players in this are heavyweights who understand the problem.  And it's taken them a decade, and they still don't have it, how to assemble this.  Today this Liberty Alliance, which there was a site, ProjectLiberty.org, which was an active wiki for a while, which is now locked because the group of now 150 organizations have moved over to something called Kantara, the Kantara Initiative.  So it's KantaraInitiative.org.  The word "Kantara" is Swahili for "bridge."  And so that's now where this work is.  And, finally, the current U.S. executive, the office of the President, has stated that the U.S. government is going to start looking at how to move this forward, how to create an initiative.



So the National Institute of Standards and Technology, the NIST, has released just a couple months ago - I've been watching this for a long time, but in April the document was finalized called the NSTIC, which is the National Strategy for Trusted Identities in Cyberspace.  And I'll just read from their little opener.  It says:



"This strategy has a goal to foster a public/private partnership where industry and communities come together to solve the issues identified in the NSTIC to create an identity ecosystem which enables web service interactions to be...."  Then we have a number of bullets.  "Faster:  Once you use your credential to start an online session, you would not need to use separate usernames and passwords for each website.  For example, your computer or cell phone could offer your 'trusted ID'" - and that's in quotes because we're not sure what that is yet, so this is goals and outlines - "to each new site where you want to use the credential.  The system would work much like your ATM card works now.  By having the card and a PIN you can use your ATM card all over the world.  By having a credential and a password, you would be able to use your trusted ID at many different sites.  This saves you time while enhancing security.  No more searching in your drawer for your list of passwords."



Then they go on to say it would be more convenient.  "Businesses and government will be able to put services online that have to be conducted in person today, like transferring auto titles or signing mortgage documents."  So they're being aggressive about the level of security.  And believe me, I'm being skeptical here.  I'm not suggesting we know how to do this today.  And I wonder whether we even can today with the platforms that we have.  But I want to give everyone a sense for, like, the big vision.



"Safer:  Your trust credential will foil most commonly used attacks from hackers and criminals, protecting you against theft and fraud, safeguarding your personal information from cyber criminals.  Private:  This new 'identity ecosystem' protects your privacy.  Credentials share only the amount of personal information necessary for the transaction.  You control what personal information is released and can ensure that your data is not centralized among service providers."  And I've noticed throughout this there has been a lot of attention paid to thwarting information aggregation.  And then there's a constant notion of only providing what's necessary.  I mean, there really isn't in this a "this is going to be a way for us to spy on you" background.  There really is an anti-Big Brother sort of clear design to the system.



And "Voluntary:  The identity ecosystem is voluntary.  You will still be able to surf the web, write a blog, participate in online discussions, and post comments to a wiki anonymously" or pseudonymously.  "You could choose when to use your trusted ID" or not.  "When you want stronger identity protection, you use your credential, enabling higher levels of trust and security."



So that's sort of their overall sort of broad stroke, the idea being that people would be able to use the system.  This NSTIC is meant, is sort of a document that's been put together.  The existing alliance are sort of working with the government, making sure that their targets are aligned.  And, for example, this says, "The strategy does not advocate for the establishment of a national identification card or system.  Not does the strategy seek to circumscribe the ability of individuals to communicate anonymously or pseudonymously, which is vital to protect free speech and freedom of association.  Instead, the strategy seeks to provide to individuals and organizations the option of interoperable and higher assurance credentials to supplement existing options, like anonymity or pseudonymity."



So, and it gives a couple of examples, for example, of how this might work.  They paint the picture of Antonio, age 13, who "wants to enter an online chatroom that is specifically for adolescents between the ages of 12 and 17.  His parents give him permission to get a digital credential from his school.  His school also acts as an attribute provider," that is, "it validates that he is between the age of 12 and 17 without actually revealing his name, birth date, or other information about him.  The credential employs privacy-enhancing technology" - and we have the ability to do this - "to validate Antonio's age without informing the school that he is using the credential."  So "Antonio can then speak anonymously but with confidence that he and the other participants are between the ages of 12 and 17."



So that's sort of an example of the powerful benefit that a system like this could potentially offer if we had a way of putting it together.  This document explains that the offline world, which of course we're all familiar with, "has structural barriers that preserve individual privacy by limiting information collection, use, and disclosure to specific contexts."  We are able to control what we tell who to.  "For example, consider a driver's license.  An individual can use a driver's license to open a bank account, board an airplane, or view an age-restricted movie at the cinema; but the Department of Motor Vehicles," who issued the driver's license, has no knowledge of "every place that accepts driver's licenses as identification.  It is also difficult for the bank, the airport, and the movie theater to collaborate and link the transactions together.  At the same time, there are aspects of these offline transactions that are not privacy protective.  The movie theater attendant who checks an individual's driver's license needs to know only that the individual is over age 17.  But looking at the driver's license reveals extraneous information, such as the individual's address and full date of birth."



So they have another acronym.  The Fair Information Practice Principles, FIPPs, is an existing, widely accepted framework for evaluating and mitigating privacy impacts.  And there are eight principles in this Fair Information Practice Principles:  transparency, individual participation, purpose specification, data minimization, use limitation, data quality and integrity, security, and accountability and auditing.  So that sort of gives you a sense for how this would be used.



They have another example.  Someone they call Parvati "uses a credential issued by a third party and bound to her existing cell phone to access online government tax services.  She can log in with a click of a button.  She no longer has to remember the complicated password she previously had to use.  She views her tax history, changes her demographic information, files her taxes electronically, and monitors her refund status."



So the idea is that what the government is doing with this whole NSTIC is basically they're sort of putting their imprimatur on the work that has been done for the past decade, pulling these technologies together.  They're going to propose this system.  One can imagine that they will use it themselves.  And by virtue of their purchasing power and contracting power, we've seen many instances where they've done similar things, where they've, for example, required certain security safeguards be put in place for the contractors that they're using, and the contractors' subcontractors.



So you can imagine that, as this comes together, the government will say we're going to require that what you do be NSTIC compliant.  I mean, and the government does not want to get into the business of providing this.  There will be private sector companies, very much like VeriSign with their VIP approach, which we talked about extensively as a nice third-party provider of multifactor authentication, or like Yubico that provides the YubiKey and then has an open specification that allows anyone who wants to to provide authentication using that hardware token.  And of course we've got unfortunately the example in recent memory of RSA with the fiasco of what happens when you have a widespread, highly used token, and this data gets away from you.



So with anything like this, obviously there are liabilities that come with this centralization of information and power.  Yet we do have the technology, when we work out all the details, for making many new sorts of services possible.  Which I think is clearly where we're headed in the future.



LEO:  Cool.  Sorry.



STEVE:  No, that's fine.



LEO:  I got nothing to say.



STEVE:  Yeah.  This work is...



LEO:  This is great.



STEVE:  This work is going on.  It is happening.  I think the U.S. government will end up requiring this kind of authentication and use by its contractors.  They will have to go buy it from somewhere.  That will create a market.  I mean, there's so much attention that has been put in this about user-side privacy, I mean, recognizing that this is not from the government.  This is not mandatory or mandated.  It would be available from the commercial sector.  The government's involvement I think would help to keep it from being fragmented.  We've talked about how we don't want to have a necklace of individual authentication things, so we'd like to be able to have our credentials be portable, be widely accepted.  There's nothing to prevent a user from getting multiple credentials, although the technology does allow a user to specify what information is given to whom with this notion of attribute providers.



And that's one thing we've never talked about before.  That's like another entity standing back which is able to essentially provide attributes, like we were talking about this 13 year old whose school was able to assert his age.  And so they were part of this ecosystem.  Their assertion was digitally signed.  And so the assertion existed separate from the school so that the assertion could be validated and verified, and the verifier could be checked, and so its level of authentication could be assured.  And then that way somebody was able to take this attribute and know that there's an entity standing behind it with some standing.



So, I mean, we've talked extensively about digital certificates and how, for example, owners of websites get a digital certificate.  They assert their identity to a certificate authority who then signs that assertion.  And it's that assertion, essentially, that our browser receives.  And then our browser checks to see whether it believes the signer of the assertion.  So this is sort of an extension of this existing public key infrastructure.  That is, it takes this concept that we are able now to produce tamper-proof documents, tamper-proof things.  We can granularize them to being attributes which people have.



And so there could be, like, an attribute repository and a company whose job is to provide subsets of those attributes so that you provide your pharmacy with the ability to know exactly the following things about you.  The pharmacy then makes a request to this attribute provider.  You have told the attribute provider what to provide, or you have signed your permission to the pharmacy.  The pharmacy then forwards that permission to the attribute provider, that then is able to take from its large collection, select those attributes that you have given the pharmacy permission to have, and then it signs those, sends them back to the pharmacy.  The pharmacy gets them from a signed provider, and it's only able to get what you allowed the pharmacy to get because it was your permission that allowed the release of that information.



And potentially, complex as that sounds, all of it happens in the background.  That is, users are, I mean, this is sort of like next-generation cyberspace technology that begins to get control of our information and allow us to manage our information in a responsible way and, ultimately, transparently.  So there's all this nonsense of having to create separate identities for every website that we go to ultimately goes away.  And so we end up being able to authenticate much less frequently.  That authentication is spread across virtually all of the Internet.  And we're able then to control from providers who know different things about us.  That's able to be aggregated under our control, and we're able to then control the dissemination of that in a way that other third parties are able to trust.  It's a big deal.  And we're really heading towards it.



LEO:  It sounds like this replaces, or maybe not replaces, but does it replace digital signatures technology using certificates or PGP, that kind of thing?



STEVE:  Well, it absolutely uses it.



LEO:  It's complementary.



STEVE:  Ultimately, it will replace them.  That is, we have all these fragmented things.  We have, as you say, like personal digital certificates, signed, to like encrypt and/or sign your email.  We've got OpenID.  We've got OpenAuth.  So we have authentication.  We have information provision.  We've got all this stuff has sort of been created ad hoc and not pulled together.  What we would ultimately have, in the same way that there's just a single SSL certificate infrastructure - there aren't five of those, there's just one.  And in the same way there would be the answer for personal identities.  We would have control of it.  You could have multiple identities if you wanted to.  You could be anonymous or use a pseudonym, that's fine, create one.  Although...



LEO:  That's kind of problematic, though, because then you don't have to have an identity.  Or is your pseudonym tied to your identity?



STEVE:  Well, but the DMV is not going to sign your pseudonym.  They're only going to sign you.



LEO:  Got it.



STEVE:  And so part of all this information is a chain of trust.  And at each step of that chain - and this is why this SAML, the security markup language, is such a big deal.  Stina was telling me that no organization could even write this.  I mean, like, write the code.  They're working now on reference implementations.  But all anyone will ever be able to do is just take it and use it because it is so big, it is so complex.  And to do this, to have the flexibility that we need, yet the power that we need, there's just no way to do this simple because you do something simple, then someone says, well, what about that?  It's like, oh, yeah, well, we don't do that.  Well, okay, if you don't do that, we can't use it.



And so unfortunately this is like the kitchen sink to the power of a hundred.  And it's a committee-produced monstrosity.  But it's standing up over time.  It's now been about - in '07 it got sort of stabilized and finalized.  And people are poking at it, and it's looking like it's holding together.  So the good news is it'll all be done for us.  It'll be behind the scenes.  Nobody'll be involved with it.  But it absolutely takes advantage, it leverages this concept that we've discussed of this notion of it is possible to create tamper-proof tokens, tamper-proof documents.  We're able to sign things and encrypt them and assert that this hasn't been changed.  All of that technology we've been talking about for the last five and a half years, that all is in place.



So now what they're doing is they're saying, okay, let's extend this.  I mean, let's talk about how we pull it all together and then begin using it.  And what's interesting to me is that we're beginning to emerge from pure theory mode into, okay, here's the kind of ways this would get used.  This is what it would mean for us.  And the challenge, of course, is that it not get hacked.  I mean, and I immediately think of, like, okay, if I have a token that I plug into my computer - the NSTIC document talks about smartcards.  It's like, well, okay, my current machine doesn't have a smartcard reader, but it's got USB ports coming out its ears.  So maybe it's like a YubiKey kind of thing that I put into a USB port in order to provide authentication.



The problem is that that's not secure because the moment the data is sort of like un-enveloped, the moment the data is available, malware in our computer would have access to it.  So that's where, for example, in the Yubico case, remember we talked about their cool device which is a complete authentication computer out in the token, out in the USB.  Well, for this sort of thing to work in an identity ecosystem fashion, it itself, that is, this token would have to be smart enough to establish a secure encrypted connection with the other endpoint.  That is, you can't have the token provide information to the computer because it could be compromised.  I mean, unfortunately our current PC platforms, and by that I mean personal computers, Macs and Linux machines and everything, I mean, they're just so insecure that the only thing they can really be trusted to do is be a conduit in some fashion.



So, I mean, I really see, don't for a second think I don't see major challenges to implementing this in a secure fashion.  Yet I think you have to have the dream before you can begin saying, okay, now we know what we want.  How do we go about getting there?  And I really do like how comprehensive this dream is and how much potential there is for the future.  I can imagine 20 years from now this will just be, oh, yeah, I mean, it's just the way we do things.  People will have digital identities of various sorts.  They will have been issued by various issuing authorities.



LEO:  Doesn't have to be a governmental authority.



STEVE:  Absolutely not.  Well, in fact, it probably won't be.  The government will be there; but you could also, in the same way that...



LEO:  Guess it depends who you trust.



STEVE:  In the same way that I as GRC got an SSL certificate from VeriSign by jumping through some hoops and proving to them that I am who I say I am, in the same way there will be certainly - or you're able to purchase anonymous tokens from VeriSign, the football or the credit card and so forth, or just download them onto your smartphone to provide you with an anonymous, yet repeatable factor for login.  We'll have all of that, too.



But where they're really heading is to this thing being vastly more comprehensive.  I don't think more onerous.  I really think just more comprehensive.  We have the technology to do this today.  It's just a matter of getting everybody together, agreeing on standards, and then beginning to deploy it.  And there is a chicken-and-egg problem, and that's where I think the government can probably come in by saying, "We like this.  We're going to require everyone we deal with to use it."  And that'll tend to get it going.  But otherwise I don't see the government at all being too heavy-handed in this.



LEO:  I know some people, the idea of government doing this makes them nervous.  To me it actually seems sensible because you need a centralized third party to certify it.



STEVE:  Yes.



LEO:  And I know people, a lot of people who listen to this show, don't trust our government.  And we probably shouldn't trust government.  But who better?  I mean, you want Microsoft to do this?  They have been, by the way, with little success.  So I think it needs to be that.  And then I think this is a nice - you liken it to certificates, and I think that's a good - the web certificate system, I think that's a good analogy.  I think it makes sense to have third parties that are certified and that kind of thing.  I'm excited.  We needed this.  I've been signing my email for years, to no avail.  It's all been the Web of Trust technique.



STEVE:  Yes.  And this document establishes the right principles.  I mean, and I've read the whole thing.  Everything about it, as I'm reading - and I'm skeptical of Big Brother, too.  I don't know how we're going to do it. I mean, as a coder and technologist I think about all of the hurdles and the pitfalls and the challenges we face.  But it's clear that we need that.  We need this in order to move forward and to really leverage cyberspace to the full extent possible, I mean, we have the technology. 



LEO:  Yes, yes.  Identity is critical.  We've learned that lesson.  And anonymity, while you - I think this is nicely done because you can have anonymity.



STEVE:  Yes.



LEO:  But there's also a way to certify you are who you say you are.  And I think you need both.  So I think this is good.  This sounds - I'm excited.



STEVE:  Yeah, me, too.



LEO:  And I appreciate your giving it the onceover.



STEVE:  Well, so I wanted to sort of bring our listeners up to where we are in this because - and I'm sure we'll be pinging back on this from time to time as things happen.  There's 150 international organizations involved, a bunch in the U.S., but a bunch outside the U.S.  So the goal would be that this would be one single global technology.  And again, I liken it very much to SSL certificates.  We know how that whole infrastructure works.  This is that to the power of a hundred because it's far more than just saying, oh, this site is who it says it is.  It's granular information and assertions of fact about individuals.  And I forgot to say, also devices.  This is also made very clear, for example, that network adapters might have assertable identities and be uniquely identifiable.  So you could establish a connection between two endpoints where those are network adapters on the Internet, and they're able to establish an absolutely provable and authenticatable connection from endpoint to endpoint.  So as you think about this more, this enables things we cannot do today.  And I think that's very exciting, too, because it creates huge new opportunities.



LEO:  Very exciting.  So what's the next step?  What happens next for this to fly?  I mean, do people have to - third parties have to create systems and so forth, or...



STEVE:  We're beginning to see companies who are stepping up.  The website that I referred to, not the Liberty.org, the Kantara Initiative, if anyone's interested, the KantaraInitiative.org, that's the state of the art in this.  I mean, essentially - and you'll see the NTSI - I keep getting the acronym wrong - NSTIC stuff is participating in the Kantara Initiative, which is much bigger than the federal government.  I mean, the government is just sort of saying, we like this.  This is what we hope it's going to be, and this is what we want it to be so that we're able to give it our stamp of approval.  But there are beginning to be companies that are offering these kinds of services.  And so this Kantara Initiative is what to keep an eye on moving forward.  And I'm going to do so.



LEO:  Yeah.  I mean, I would very much like to, for instance, replace my - I'm trying to remember who I got them from, Thawte or somebody - my email certificates with a new form of digital identity that's universal.  So KantaraInitiative.org.  Now, but are they offering...



STEVE:  No.  It's just the organization...



LEO:  Just the group.



STEVE:  ...sort of the organizing point.  Yeah, we're still premature.  I mean, it's going to take probably the major providers like Apple and Microsoft.



LEO:  It's got to be in the email.  It's got to be in Google and all of this stuff.



STEVE:  Exactly.  And so, for example, I didn't realize that Google is an OpenID provider.



LEO:  Yes, yes.



STEVE:  But of course they would be.  And so you can, right now, you can use your Google credential, which does allow multifactor authentication.  So you can turn that on, get multifactor authentication with Google, and then use Google as your OpenID provider to log into any sites that support OpenID.  So OpenID will end up getting replaced with something much stronger and more robust.  But and then Google will be a provider for that, as will other sites.  And this'll just sort of, I mean, I remember, and I'm sure you do, too, Leo, because we were both there, before the Internet, when there were people talking about, well, you know, we're going to hook up all of the computers in the world together.  But first I said, well, you're first of all nuts.



LEO:  Yeah.  Oh, this Internet thing will never fly.



STEVE:  How are you going to do that?  And then, when it began kind of limping along, but there wasn't anything there, there was the chicken-and-egg problem.  It's like, I mean, we used to hear, oh, this is never going to happen because no one's going to put their stuff on the Internet until there's people on the Internet to look at the stuff.  And there's not going to be people on the Internet until there's something to look at.  Well, it happened.



LEO:  It happened, it did.



STEVE:  And it just sort of organically occurred.  And the good news is, I mean, something this important and big has to be done right.  That's why I'm glad it's not a mandate from the government.  The government couldn't possibly design this.  I mean, this has taken a decade and 150 organizations spread around the world.  And they kind of think they've got it now.  So, and code is being written.  This is just a big 'berg that moves forward very slowly.  The good news is I think it's a good 'berg.



LEO:  And we're not the Titanic.  Let's hope, anyway.  No, it's very exciting, and I think we did need this.  And I've been waiting for this.  And, I mean, I've been a believer all along because I use OpenPGP or GNU Privacy Guard to sign my mail.  And that confused people because it would put a little bunch of - it would put a hash at the bottom of the mail, and people'd say, what's that?  Now I use certificates to sign it because most email programs support that.  But that confuses people.  They say, "What's this P7 S/MIME attachment?"



STEVE:  Well, and another example is the way we got the extended validation certificates.  No users had to do anything.



LEO:  Right.



STEVE:  But now their bar lights up green if there's, like, higher level of assertion.  That'll just - it'll end up getting built into our world.  And everyone's going to take it for granted.  But it's going to be good.



LEO:  Steve Gibson is the man in charge at the GRC Corporation, GRC.com.  In fact, if you go there you can get a copy of SpinRite, the world's finest hard drive maintenance and recovery utility, saving hard drives even in the midst of disaster.  GRC.com.  If you have a question for next week about this or any other topic, GRC.com/feedback.  And you can also find a lot of freebies there, information about his Password Haystacks, for instance, which is really a good thing for people to know.  I've been using it religiously ever since, and I'm so grateful to you for that.  New stuff coming, too.  GRC.com.



You can follow the Steve on the Twitter.  Someone sent me an email saying, "Why do you keep calling it the Twitter?  You're so old.  You should stop doing the show."  It's a joke.  You'll follow the Steve on the Twitter, @SGgrc is his Twitter handle.  And that's a good place to ask questions, too.  As you can see, he includes that in his stuff.  And you'll find all the shows, 700, what is - 700.  300.  Not quite.  307 episodes.



STEVE:  Slow down, Leo.  We'll get there.  We'll get there.



LEO:  We will.  We'll get there sooner than later.  307 episodes available in transcription, 16KB, and 64KB, so you get your choice there, all at GRC.com.  Steve, thank you so much for being here.



STEVE:  My pleasure, Leo, always.  And we'll do a Q&A next week.



LEO:  Next week.



STEVE:  And then hopefully I'll have something really cool.  Maybe in two weeks.  I'm going to try to get it done in two weeks.



LEO:  That'd be neat.  We do this show every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1800 UTC at live.twit.tv.  And we invite you to watch live or download it after the fact.  You can also get it at TWiT.tv/SN.  Thanks, Steve.  We'll see you next week.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.






GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#308

DATE:		July 7, 2011

TITLE:		Listener Feedback #121

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-308.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 308, recorded July 6, 2011:  Your questions, Steve's answers, #121.



It's time for Security Now!, the show that covers your security, your privacy online.  And who better to do that than the man who's been covering this story since it all began, back with the earliest days of spyware.  In fact, he coined the term "spyware," wrote the first antispyware program, and has been helping us with security ever since, Mr. Steve Gibson of GRC.



STEVE GIBSON:  Hey, Leo.



LEO:  Hey, Steve.  How are you?



STEVE:  Great.  We've got another great episode, #308, and it's a Q&A.  It's our 121st Q&A.



LEO:  Wow.  Your questions and Steve's answers.



STEVE:  Yeah.  Lots of interesting news.  A potpourri of goodies.  And then some - it's not an overload as we've had the last couple Q&As, so we've got about eight questions, interesting ideas and thoughts from listeners.  And we even end it with a Philosophical Question of the Week.



LEO:  Ooh, I like that.  You know, we just covered the big Facebook announcement right before we went on the air this morning.  And one of the things I noted, at least on the Macintosh, I haven't checked it on Windows yet, is that it does install itself using Java, the Java archive.  So one of the things I'd like to ask you about in a second is how you feel about that, given the security exploits that it's been riddled with in the last...



STEVE:  Well, that's a problem.  And then the other problem is that it is actually Skype in a box.  And so what Facebook is using is essentially repackaged Skype technology.  And as we know, Microsoft bought Skype recently for $8.5 billion.  And what popped up on the radar this week is the fact that Microsoft just acquired a patent which they filed for a couple years ago about how to surreptitiously eavesdrop on a peer-to-peer VoIP system.



LEO:  We will talk about that in great detail.  Oh, boy.  All right, Steve.  Let's get to - I guess we always like to start with security updates.



STEVE:  Yes, and we've had a very quiet week this week, not much going on.  Of course next Tuesday will be the second Tuesday of the month since we had, well, the Fourth of July of course was last Monday, so the 5th is Tuesday.  So I expect we'll have some news, yes, we'll have some news next Tuesday, but nothing this Tuesday.



An interesting note was picked up by someone who noted that a security company, SecurEnvoy, was applauding the LulzSec folks.



LEO:  Really.



STEVE:  Which I thought was sort of interesting, yeah.  Net-Security.org had a blog posting that said, "In an unexpected move for a security company, SecurEnvoy today said that cyber break-ins and advanced malware incidents such as the recent DDoS attack by LulzSec should actually be welcomed and their initiators applauded.  Explaining this sentiment, Andy Kemshall, CTO and co-founder of SecurEnvoy, said, 'I firmly believe that the media attention LulzSec's DDoS attacks [and other break-ins have] recently received is deserving.  It's thanks to these guys who are exposing the blas attitudes of government and business without any personal financial gain that will make a difference in the long term to the security being put in place to protect our own personal data.'"



LEO:  That's effectively what LulzSec and these other grey hat hackers use as an excuse, people like Adrian Lamo, for what they do.



STEVE:  Right.



LEO:  They say it strengthens security.  We're on the side of good, not evil.



STEVE:  And so they're right.  I mean, I'm not - we can't condone the breaking of the laws which unfortunately are the means by which security gets strengthened.  But it really is only a consequence of these sorts of breaches that companies take action.  It must be as a consequence of this recent flurry that really came to high profile, I mean, I was seeing conversations about these Internet web break-ins on non-tech channels of information that wouldn't normally be covering it because it really did come to the attention of the press, and certainly to the attention of other companies who, as I've said many times, their CEOs must be asking their CIOs, tell me this isn't possible, tell me our passwords are encrypted, tell me all of our data is encrypted.  And it's very often the case that the Chief Information Officer would say, well, no, that's on our list of things that we'd like to get to, but you keep us too busy dotting our I's.



LEO:  This is why you applauded Firesheep.



STEVE:  Yes, yes.  And we did see an absolute reaction to Firesheep.  It got cited, and it was downloaded a million-plus times.  And now companies like Facebook are enforcing persistent HTTPS, clearly as a consequence, I mean, absolutely.  It was not any coincidence that that got added after Firesheep did.  So, and here's Sony that's become a laughingstock in terms of the number of attacks.  And as we'll see a little bit later on in this podcast, they got another one yesterday.



So, I mean, it's unfortunate that the only thing that moves companies to make themselves more secure is this kind of high-profile breach and attack and embarrassment.  And we know that there are going to be lawsuits that will follow these things that won't be on our radar as much as the technology that portends the future suit.  But that's happening, too.  So I don't know that I would say I think it's great.  But it is the way the world works.



The reason Microsoft has gotten as good as they have about security is not because they wanted to, it's because they had no choice, because Windows had become a laughingstock.  It was a catastrophe from a security standpoint.  And Microsoft, though it took a long time and was very slow, they finally did step up.  They would not have.  And we would have a much less secure OS today were it not for the fact that there were hackers poking at Windows for so long and so successfully that Microsoft begrudgingly got around to it.



Again, all of this feels to me like frontier land.  I mean, we're just - in a decade from now we're going to have to come up with a new name for the podcast, Leo, and - well, maybe 15 years - and switch topics, Technology Today or something.  Because these problems are going to get themselves solved.  But right now we've got a real place.



LEO:  Yup.  I'm glad you're going to cover this Dropbox thing because I didn't - I saw it, and I didn't know what to make of it.  So I'm curious what you say because I use Dropbox like crazy.



STEVE:  I know you do.  And in fact I got email from them because you and I were using it to transfer podcast audio for a while.



LEO:  That's right, yeah.



STEVE:  Yeah.  So in the wake of the problems, the security problems that they had - remember that we've talked about several things:  the revelation that they were able to decrypt the data, which they had not made clear before; and then they had the four-day - or four hours, rather, excuse me, four hours during which time their passwords were not required to log into a Dropbox account, so anybody could log in who wanted to.  They did a revamp of their Terms of Service, and several things caught my eye.



First of all, the letter that I received, the email that I received, as all Dropbox users would have, said, "Hi, Steve.  We wanted to let you know that we've made some changes to our Dropbox Terms of Service, Privacy Policy, and Security Overview.  We did this to make our policies easier to read and understand" - and I have to agree, they are - "and better reflect product improvements we've made to Dropbox.  Please read about these changes in our blog post and read the docs themselves."  So I...



LEO:  I didn't read them.  I just thought I'd let you read them and tell me about it.



STEVE:  That's what I'm here for.  And I pulled interesting bits out of the otherwise legalese boilerplate, although they've really made it much more clear.  So under Security Overview they said, "Like most online services, we have a small number of employees who must be able to access user data for the reasons stated in our privacy policy" - which I'll discuss separately in a second.  And then they say, "e.g., when legally required to do so."  So that's a clear acknowledgment that, if they were served with a court order requiring that a given user's data be turned over to some three-letter initial organization that works for the government, they would do so.  Then they say, "As set forth in our privacy policy" - well, okay.  I should say they would and can do so.  So they're making that clear.



"As set forth in our privacy policy, and in compliance with United States law, Dropbox cooperates with United States law enforcement when it receives valid legal process, which may require Dropbox to provide the contents of your private Dropbox.  In these cases, Dropbox will remove Dropbox's encryption from the files before providing them to law enforcement."  So very clear there for those people who...



LEO:  Not everybody has to do that, by the way.  I mean, that's something they've decided they want to do.  I think that should be made clear.



STEVE:  Wait, they've decided that they...



LEO:  They want to be able to provide the data to law enforcement.  They could have a system, there are many companies that do, where it's pre-ingress encryption, as we've talked about, pre-Internet encryption.  And they just say, yeah, we'd give you that information, but we don't have the keys.



STEVE:  Well, and case in point is LastPass.



LEO:  Yeah.  Or what I use instead of Dropbox for my private stuff, Wuala, which encrypts before it goes to the Internet.  They don't have the key.  So they could - there's no legal requirement that they have to be - or is there?



STEVE:  Ah.  There actually is a reason they do this, and we'll be talking about that in a second.



LEO:  Oh, good.



STEVE:  It's really interesting, too.  And it's been hacked.  So...



LEO:  Oh, even better.



STEVE:  So they also say, "Dropbox applies encryption to your files after they have been uploaded."



LEO:  Post-Internet encryption.



STEVE:  And separately I should say that they do encrypt in transit.  So they use standard SSL 256-bit encryption in transit.  But when they receive it, it's back out of SSL in plaintext.  Then they encrypt it for storage.  But not until they do something else, but I'll get to that in a second.



"Dropbox applies encryption to your files after they've been uploaded, and we manage the encryption keys."  "We manage," they say, "the encryption keys.  Users who wish to manage their own encryption keys can apply encryption before placing files in their Dropbox.  Please note that if you encrypt files before uploading them, some features" - which we'll be discussing in a second - "will not be available, such as creating public links.  Doing so will also make it impossible for us to recover your data if you lose your encryption key."  And of course that's the whole point.  So that was their Security Overview, the highlights of that.  Under their Privacy Policy, they said, regarding files:  "We collect and store the files you upload, download, or access with the Dropbox service.... If you add a file to your Dropbox" - get this, Leo - "that has been previously uploaded by you or another user, we may associate all or a portion of the previous file with your account rather than storing a duplicate."  So they're doing...



LEO:  To save space.



STEVE:  ...duplicate elimination, yes.  Okay.  Under Data Retention - and we'll come back to that in a second.  Under Data Retention they said:  "We will retain your information for as long as your account is active or as needed to provide you services.  If you wish to cancel your account or request that we no longer use your information to provide you services, you may delete your account."  But, "We may retain and use your information as necessary to comply with our legal obligations..."



LEO:  So in other words, you could kill your account, delete your information, and they would have a copy which they would retain.



STEVE:  At their discretion, yes.



LEO:  Is this related to the FBI demanding that ISPs retain two years' worth of data?



STEVE:  Could very well be.  They said to "...resolve disputes and enforce our agreements," which they don't specify.  "Consistent with these requirements, we will try to delete your information quickly upon request.  Please note, however, that there might be latency in deleting information from our servers, and backed-up versions might exist after deletion.  In addition" - so they could have, you know, squirreled-away copies that continue to exist persistently.  "In addition, we do not delete from our servers files that you have in common with other users."  And then finally under Security of their Privacy Policy, they said, "We follow generally accepted standards to protect the information submitted to us, both during transmission and once we receive it.  No method of electronic transmission or storage is 100 percent secure" - certainly not ours - "however.  Therefore, we cannot guarantee its absolute security."  So they've given themselves a final out there.



Now, this got me really curious about what this dup elimination system was.  And I remember years ago talking to a company who was - they were just at the startup Internet backup kind of concept stage.  And one of their clever ideas was to note that many of the files that users using a common OS would have on their system would be duplicates.  All these DLLs, well, they all came originally from Microsoft or from applications that we loaded.  And for those that are of the same version, they're identical.  So they were early on...



LEO:  Who's backing up their operating system or binary application folders?  I mean, isn't it data that we use this for?



STEVE:  Well, largely.  But their notion was, due to the extremely high level of duplication, that is, yes, the binary folders are huge, but they're also full of stuff that absolutely will be identical...



LEO:  Of course.



STEVE:  ...across a huge population of users.  Which means you don't actually back them up.  You back up a couple of them, and then when you see that the same user has the same file on their system, all you do is store a pointer to the master copy.  And so you save all of this actual shuttling back and forth and storage.  You simply do a hash.  Well, that's what Dropbox does.



LEO:  You know, by the way, I'm going to point out the real point of this is that - music and movies.



STEVE:  Yes.



LEO:  And these are large files; and, sure, they save space.  But even more to the point, they also - I think this is a response to the recording industry and the Motion Picture Association of America.  And, I don't know, it just makes me nervous.  I'm going to use more Wuala and less Dropbox.



STEVE:  Yeah.  So, okay.  So someone figured out what the Dropbox client API was.  They reverse engineered it.  And if you look under "Dropship" under Wikipedia, you'll find a tool which was created by someone who reverse engineered this.  What they realized was, this was better than BitTorrent.  So what happens is, the way Dropbox works is in 4MB blocks, an SHA-256 hash is made of the block.  And that is sent to Dropbox to see if they already have it.  And if they already have it, then the file is not transferred to Dropbox.  Merely your account is tagged as having this file, too, and it instantly appears in all instances of your synchronized Dropbox folders.



So what this does is it hugely, exactly as I was saying before, reduces the storage that Dropbox needs to maintain because any duplicate AVIs, any duplicate MP3s, any duplicate anything gets hashed and checked to see if it's already there.  Which means from a mass distribution standpoint someone loads one copy into their Dropbox folder, and then distributes the hash.  And so Dropship consists of two files, or two EXEs.  The dropship itself is a tool for injecting a file into your account using its reverse-engineered-from-Dropbox description.  And then the second tool is called hash_blocks, which produces a description from a file that can be used by dropship.  So everybody gets a copy of Dropship.  And I want to send somebody a file, or a huge audience, or post it somewhere on the 'Net.  People - we produce, using hash_blocks, produce a description which is the hash of these 4MB blocks; send that, which is super small, to broadcast it or send it to a large audience.  They all simply take that and put that into Dropship using the dropship tool which injects that into their account, and suddenly that big file appears in everyone's Dropbox folder.  So very clever.



LEO:  Although, I mean, you have the public folder capability.  And since - I guess this is better than you putting it there because...



STEVE:  Yeah, it was just sort of done as a hack.  I mean, it was...



LEO:  It's a cool hack.  By the way, Dropbox says they've disabled it.



STEVE:  Yes.  And it wasn't done painlessly.  This all occurred in March, a few months ago.  And Dropbox immediately tried to shut them down, asked that they remove it, generated some bogus DMCA takedown notices, although, you know, claiming that this code was a violation of the DMCA although it was open source, it was reverse engineered from their protocol.  So essentially what they had was a weak technology for doing this.



The problem is, as we know, no matter what they do on the client side, if they're going to continue to try to do this, and I'm sure they are, all they would have done would have been to add some further layers of obfuscation.  Any client, as we've often said, the protocol can be reverse engineered.  So there's nothing to prevent someone from creating some software that does mimic the normal operation of Dropbox, that is, normally the only way a user could generate the hash on their system would be to actually have the file and physically hash it and then have the Dropbox client check to see if they already have a copy, which would save Dropbox the bandwidth and the user the time of uploading it.  Which is cool.  But so what this approach does is this short-circuits the process so that you don't actually ever have to have the file in order to have it appear in your own Dropbox.  And so essentially that's what this does.



LEO:  Chetpod (sp) in the chatroom asks an interesting question.  Is it possible that there are hash collisions, that you could think you had a duplicate of a file, and it was just a duplicate of the hash?



STEVE:  Yeah.  Wouldn't that be disturbing.



LEO:  That wouldn't be good.



STEVE:  Yeah, not good.



LEO:  Especially if it's a DLL or something.



STEVE:  Yeah.  With an SHA-256 we've got, I mean, that's a huge number of bits.  And it has to be an exact match.  The hash is very mature and well designed.  So it's incredibly unlikely that there would be a collision.  I don't know that they're also storing the size.  I would bet, if they're doing it right, they're storing the size also because that's a tiny bit of additional information.  And to have the same size and a hash collision, that's just not going to happen.



So but it's a great question because that's absolutely the case that a hash collision would confuse the system, and you would download - you would upload your file and go, wow, that was quick.  And then when you tried to download it, it would be a different file because the system would have thought you were uploading one it already had, and when you downloaded it, you'd get the wrong one in the instance of this collision.  But SHA-256 is so secure.  I mean, we're relying on it for many other things much more important than disambiguating Dropbox blocks.  So I think it's, I mean, it's a good theoretical issue, but in practice not a problem.  But we do have a problem.



Microsoft has obtained a patent for specifically intercepting Skype conversations.  This is their application 20110153809 called "Legal Intercept."  And in the abstract at the top of it, it said - I'm reading now from this:  "Aspects of the subject matter described herein relate to silently recording communications.  In aspects, data associated with a request to establish a communication is modified to cause the communication to be established via a path that includes a recording agent.  Modification may include, for example, adding, changing, and/or deleting data within the data.  The data as modified is then passed to a protocol entity" - this is all patent speak - "that uses the data to establish a communication session.  Because of the way in which the data has been modified, the protocol entity selects a path that includes the recording agent.  The recording agent is then able to silently record the communication."



And skipping down then to paragraph 28 of the details, it says, "As mentioned previously, traditional techniques for silently recording telephone communication may not work correctly with VoIP and other network-based communication technology.  As used hereafter, the term VoIP is used to refer to standard VoIP as well as any other form of packet-based communication that may be used to transmit audio over a wireless and/or wired network.  For example, VoIP may include audio messages transmitted via gaming systems, instant messaging protocols that transmit audio, Skype and Skype-like applications, meeting software, video conferencing software, and the like."



And then separately cited in an article about this, Jeffrey Chester, who's the executive director for the Center of Digital Democracy, said the technology aligns with Microsoft's broader goals.  The company "aims to incorporate tracking technologies for its Skype services as it aggressively expands its mobile advertising system across the world.  Skype will likely soon have ad targeting and user-profiling digit strings attached.  This underscores the need for strong mobile and location privacy safeguards."



So we've talked a number of times because there has been this grumbling in the U.S. Congress about their response to our law enforcement's concern, which is certainly understandable, that they are no longer able to eavesdrop on an increasing percentage of Internet traffic.  And so, as we know, there has been talk of legislation that would require services to allow the service provider to respond to a law enforcement request for eavesdropping and decryption.  And specifically Skype had been immune to this because as you and I know, Leo, we have a point-to-point communication.  That is, Skype's encrypted, and encryption technology is extremely good.  And but moreover, our data is going between my endpoint and your endpoint over an undecryptable connection.



Well, Microsoft bought Skype and is now clearly in the process of adding this technology, which will break the encryption, allowing essentially technology for a by-design man-in-the-middle attack which will cause our endpoints to, at their discretion, to no longer establish a point-to-point connection, but to deliberately route the data through a, as they said, "silent recording entity" which would decrypt it and then make it available.



LEO:  I should point out that it's possible that Microsoft's patenting this to keep somebody else from doing it.  Sometimes you patent things defensively.  So it may mean merely that they know this technique exists, they know it's out there, and they want to patent it to keep somebody else, I mean somebody legally from doing it.  Of course by publishing it they're making illegal usage even easier, if you don't care about patent infringement.



STEVE:  Yeah.  And there really isn't a practical way for someone, for example, to do this to a Skype conversation.  I mean, the way you get around, the way you solve this encrypted link problem is that you get an agent running pre-encryption at either end of the conversation.  So there is still that.



LEO:  So you have to build it in.  It's not something that exists now.  You'd have to build it into Skype.



STEVE:  Yes.  It's very clear that it doesn't exist now, and that Microsoft will be giving us newer and better versions of Skype in the future, Leo.



LEO:  Is this, do you think, a response to that legislation that kind of requires this...



STEVE:  I think that's exactly what this is.  I think if Microsoft decided we're going to buy Skype for $8.5 billion, and if legislation does get passed and Microsoft...



LEO:  It hasn't been passed yet.



STEVE:  Right.  It hasn't been written yet.  I mean, there's been a serious back pressure against law enforcement wanting this.  And so, I mean, it really raises concerns about abuse that we do see happening when law enforcement gets technology that they don't know how to handle correctly.  So it makes total sense to me.  Microsoft's going to spend $8.5 billion on this technology, they're not going to risk having legislation passed that would outlaw that technology.  Which is exactly my concern that I've discussed with my doing a VPN because, in the same way that Microsoft might be compelled to put a backdoor in, so could everybody else who's trying to sell something commercial that is really robustly secure, as Skype up till now has been.  So...



LEO:  Oh, well.



STEVE:  ...this is Microsoft saying, well, we're going to offer Skype, but we're going to do it so that we can eavesdrop if we have to.  Okay.  Now here is - this is sanity check time, Leo.  The URL is IsMyCreditCardStolen.com.



LEO:  And let me ask.  Do you enter your credit card number?



STEVE:  Oh, just look at this.  Look at this website.  And this is basically an IQ test.  This is a test that many people who don't listen to Security Now! might fail.  I hope that no listener of this podcast would fail this test.  IsMyCreditCardStolen.com.



LEO:  But, see, it says "Verified Secure" right on the front page.



STEVE:  Isn't that comforting?  Yes.  So we've seen...



LEO:  [Laughing hysterically] I'm sorry.



STEVE:  I know.  We've seen, you know, has my password been hacked, has my email been stolen, has Sony been hacked, I mean, this is the new vogue style of website.  So now we have IsMyCreditCardStolen.com.  And it asks you, put in your credit card number, put in your name, put in your expiration, I mean, I'm looking and thinking there's no way I'm putting this stuff in.  So, Leo, go ahead and click the button without putting anything in.



LEO:  All right, let me see.  So check right now, okay.



STEVE:  Just don't put anything in.



LEO:  "Don't worry, your credit card details weren't transmitted when you hit the Submit button, but don't trust this claim without question.  Find a technically inclined friend to verify it for you.  After all, you've already been tricked once."  Oh, good, so it's a good guy.



STEVE:  It is a good guy.  Before I clicked the button I got the page source, and I read the source code for the page.  And it's actually been very well designed.



LEO:  This is great.



STEVE:  Isn't that great?



LEO:  Oh, good for them.  Oh, that scared me for a moment.



STEVE:  Oh, it ought to scare everyone.  And, I mean, it's like, oh, yeah, let's just see if this information is part of some public database.  It's like, oh, my goodness.  And it's not SSL.  It's not secure.  I mean, there's nothing about this that says, oh, yes, please put your credit card information in here.  So I just love that, IsMyCreditCardStolen.com.



LEO:  Brilliant.



STEVE:  Yeah.



LEO:  I'm going to put this out on my Twitter and see how many people go to it.



STEVE:  Oh, goodness.  Be great if they were collecting statistics.  They aren't.  They're doing nothing evil with it.



LEO:  Fortunately.



STEVE:  And all the Submit does is...



LEO:  Oh, this is from the Anti-Phishing Working Group.  These people are great, actually.  I know them very well.  It's a great website that has - they keep actually a wonderful database of phishing emails on here.  So this is, yeah, they're good, they're good.  Wow, this is great.  How funny.



STEVE:  IsMyCreditCardStolen.com.  Oh.  Any idiot...



LEO:  What they should do, put up a big sign:  "It is now."



STEVE:  Oh, gosh.  So under Attacks & Breaches we do have, as I mentioned earlier, Sony got hacked yet again.  This was the Sony Music Ireland website that was hacked.  And three very distressing to music lovers news stories, bogus news stories were posted on their home page.  And I don't follow current musicians and bands in Ireland closely enough to be disturbed by these or even to have remembered.  But they went to great extremes to say, oh, no, no, these people are not dead.  These groups are not disbanded.  So I guess it caused some uproar, as it was clearly designed to.  So HasSonyBeenHackedThisWeek.com?  Yes, once again, it was just on 7/5, on July 5th.



LEO:  How many is this now?



STEVE:  Oh, goodness.



LEO:  25?



STEVE:  There's a summary.  Is it 25 or 27?  I don't remember.  Has Sony been hacked...



LEO:  I'm entering it in.  It was 20 the last time I checked, so...



STEVE:  Yeah, HasSonyBeenHackedThisWeek.com.



LEO:  Has Sony been hacked dotcom.



STEVE:  This week dotcom.



LEO:  This week dotcom, all right.  And the answer is, not surprising, yes.  And let's just see here how many hacks there have been.  Latest hack was July 5th.  Sony's hack history going - you know what?  They don't even count.  They've lost count.



STEVE:  I thought there was a count on that first page.



LEO:  There was, and I think they stopped.  But this looks like the 21st hack.  There was.  They no longer have a count.  It's like...



STEVE:  Sony was joined by a rather high-profile company that was embarrassingly hacked:  Apple.



LEO:  Yeah.



STEVE:  Apple's business intelligence site was hacked by the group that calls themselves Anonymous.  And in order to prove that they had hacked that Apple site, they tweeted a link to a Pastebin page where usernames and passwords which had been taken from an SQL database there were posted.  Apparently there was a SQL weakness of some sort.  And so Apple's business intelligence site, which was then taken down immediately in order to figure out what was going on and solve the problem, got hacked.  And speaking of this, we should follow up a little bit on your real-time news from last week, Leo.



LEO:  Yes, because we were hacked.  And let me just see what the latest story is on this because we did get some updates from our sysops.



STEVE:  Because I remember someone changed a few lines in jQuery, the jQuery library, the very popular JavaScript query library.



LEO:  We have three servers that provide live.twit.tv.  And one of the three jQueries was modified.  It's my understanding that it was through an old install of WordPress that was sitting on one of the servers and hadn't been updated in some time.  WordPress is really notorious for having lots of flaws in it.  We have of course removed that instance completely because it was an old blog we haven't kept up.  It was for a show we did years ago.



STEVE:  Actually, this is a really great tutorial in the way somebody bad gets into a system is some software that you were using, that you switched away from, but it stayed there and accessible online.



LEO:  The good news is that we had other checks in place that kept the hack from installing - it was intended to install a rootkit on visitors to our site.  But the other checks we had in place kept it from doing that.  So it was a modification in the jQuery library.  People who saw that popup from Chrome and other spots, other places, antivirus software and so forth...



STEVE:  Which is very cool.



LEO:  ...saw that line.  But what did not happen, I'm told, and Bear is really good, is that no malware was in fact put on anybody's system because of other security software.



STEVE:  Safeguards that you guys have, yeah.  Good.



LEO:  So really what happened is that a file essentially got corrupted, with no other damage done.



STEVE:  So following up on last week's podcast about identity, a friend sent me a link to a Google initiative where Google has produced a kit which they would encourage other websites to use - it's free - which would allow visitors to log into those websites using their logins from other sites.  This is the OAuth technology that we did a podcast on.  It was Episode 266, Security Now! Episode 266, if anyone's curious.  And I did refer to that also last week.



But then I found something even more extensive.  It's called Hybrid Auth.  It's at SourceForge, so hybridauth.sourceforge.net.  And this is, again, another open source project.  It's a PHP package which is exactly this, but even more comprehensive.  Using this, any site which already had PGP support at their server side, could allow users to, first of all, create an account on that site if they wanted to, or use any of their existing accounts at Twitter, MySpace, all of the Google assets - so Gmail, Orkut, YouTube, et cetera - Facebook, Tumblr, Friendster, OpenID, Foursquare, LinkedIn, Yahoo!, Gowalla, Vimeo, Windows Live, and PayPal.  So, I mean, this occurs to me as a really - this is a great direction for sites to be going in.  I'm glad Google is doing this, and I'm really glad that this Hybrid Auth project exists.



So just to be clear, what this means is, how many times have we, surfing around the 'Net, gone somewhere, and in order to do anything, we have to create an account, which is really annoying.  If it's just to post a comment on a blog, I mean, I'm sure there are many few comments on blogs for sites that require you to create an account before you can do that.  And in fact statistics are now being taken of the relative rate of account creation, or for example doing the things that you would be able to do if you create an account versus losing people who don't; or giving them this choice, to authenticate themselves through a different site and then get credentials back from that site.



And the statistics show, I mean, exactly what you'd expect.  Users are delighted to use their existing Google authentication or their Facebook authentication in order to identify themselves securely to some random obscure third-party site that wants to know who they are, but currently the existing model is requiring that you go through all of the nightmare and annoyance of creating an account.  Just not necessary.  So at hybridauth.sourceforge.net is a link to the home of this project, Hauth.sx33.net.  So I went there because I wanted to experiment with this.  And it has, like, a sample how this would look.  And there's, like, create your account on the left, or logon to this site using any of those logons on the other sites.



So I clicked Google, and I was redirected to a secure HTTPS Google.com sign-in page, which I see all the time, and I verified the credentials, and everything looked right.  I got a big green EV certificate verification.  And in fact LastPass quickly filled in my information for me, so all I had to do was kind of like make sure this was what I wanted to do.  And on the page it said "Hauth.sx33.net is asking for some information from your Google account.  To see and approve the request, sign in."  So I signed in.  And then I got to - it took me to accounts.google.com.  And actually my favorite Certificate Patrol add-on for Firefox popped up because I had never used - because Google has a *.google.com certificate where they've got, like, sites and docs and accounts and anything dot google.com.  So they have one certificate that handles all that.  But Certificate Patrol notifies me of any different instance of its use that it hasn't seen before.



So I had not yet had an occasion to go to accounts.google.com.  This brought me there, where I was still - so I was at Google, and it showed me Hauth.sx33.net is asking for some information from your Google account.  And then it showed me the account name, my account name at Google.  And then it enumerated what information was being requested - my email address with my name and my email account; my language, English; and my Google contacts.  And then I had the choice of saying Allow or No Thanks, and also to remember this approval for the future.  And when I said Allow, I was then redirected back to that original site that just for the sake of this demo showed me a breakdown in detail of exactly what it was they had received from Google.



So this is tremendous.  This is what we need to have happen for all of those sites that want some authentication of their users, but that are currently losing people because of the annoyance of having to create an account.  This solves the problem using OAuth, whose initial security problems that we discussed in Episode 266 have since been fixed by OAuth WRAP, which is sort of the follow-on successor to it.  And I just hope we see this more and more.  If my site had any purpose for creating accounts and logging people in, I would do this in a heartbeat because, I mean, just for no other reason than to encourage it.  This is a slick, simple way of beginning to add really useful cross-site authentication, and it's robust from a secure standpoint.



LEO:  Bravo to standards.



STEVE:  And I got from Certificate Patrol, speaking of them, my most scary warning yet, and it was wonderful.  And it was when I went to GitHub.  I don't remember what took me to GitHub, but something preparing for the podcast today did.  And so Certificate Patrol popped up, and it said, "Certificate exchanged, reason to worry!" (exclamation point) at GitHub.com.  So and then in the details it said,  "Warning:  This certificate wasn't due yet."  But it's like, okay, well, we've had that before.  It said, "Maybe there are other reasons why it needed to be exchanged, though."  Then it said, "Alert:  Host name has changed.  Take a look if that's okay."  And then it said, "Caution."  And here's the big one.  "Certificate authority has changed."  I just - I love this add-on.



So then it shows me the old certificate, which was *.github.com.  The new certificate was issued for just github.com.  So for whatever reason they just decided not to do a wildcard certificate.  They just did a regular certificate.  So that was the name being changing part.  But then I looked down, and it's like, oh.  The old certificate was issued from GoDaddy Secure Certificate Authority.  The new certificate was issued by my new favorite, DigiCert.



LEO:  Yeah.



STEVE:  And that's where I'm going, too, because they provide all the same services.  We'll remember that that's what Facebook is using.  And it's DigiCert High Assurance EV CA-1.  So GitHub said, we're not paying for a GoDaddy EV certificate because they're so expensive.



LEO:  What, they're thousands of dollars; right?



STEVE:  Yes.  We're going to go to DigiCert and get their High Assurance EV, and I'm going to do that, too.



LEO:  How much is their High Assurance EV?



STEVE:  I don't remember, but it looked like something that I was willing to do.



LEO:  Not 2,000 bucks.



STEVE:  Where it's just, like, not going to happen over with VeriSign or any of these other big guys.  And all we need is it to be a legitimate, good Certificate Authority that is present in everyone's browser.  And if Facebook is using them, then they're present in everybody's browser.



LEO:  Right.



STEVE:  So I just love this Certificate Patrol.  It is very cool.  I want to just bring it up again to recommend it to the one user of our podcast who hasn't yet installed this, to recommend that he or she do so because it's cool information that you just get easily.



Also in Miscellany I ran across - I just wanted to mention for those interested in bitcoins, BitcoinCharts.com is amazing.  It is tracking all of the various Bitcoin exchanges, showing exchange rates and volumes and charts and so forth.  So anyone who's been playing with Bitcoin, I know we have a lot of listeners who do because I see a lot of tweet feedback about Bitcoin stuff:  BitcoinCharts.com.



LEO:  So what's interesting, and I'm not surprised, is that some of these guys are not giving you full value for your bitcoin.



STEVE:  Uh-huh.



LEO:  So they've marked those in red, and then green are the ones that are giving you good value.  And then there are some that are just kind of like, what?  What?  $42?  What?



STEVE:  Yeah, it's like, I don't know.



LEO:  Here's one that's bidding $651 and asking $890.  That's got to be - that's all messed up.  But anyway, this is good.  This is great.



STEVE:  That's a low traffic exchange, or zero traffic exchange.



LEO:  Zero traffic.  But everybody uses MtGox.  I mean, that's kind of the definitive one.



STEVE:  Yup, that's the one.  Okay, now, I've got something that just rocked my world in the last week that old-timers like you and me, Leo, will certainly understand.



LEO:  Yes, we will.



STEVE:  And this is the news that, for the first time ever in North America, in the United States, our power line frequency is going to be allowed to drift away from 60 Hz.



LEO:  Yeah, I don't know if it's the first time ever.  I think - by the way, we covered this on the radio show.



STEVE:  Okay.



LEO:  Somebody called in, and I said, huh?  And then I heard from some power line engineers who said that in the early days it was routine that it would drift.  And then we put in a lot of very expensive equipment not so long ago, a few decades ago, to make sure it was locked into 60 Hz.



STEVE:  Well, and what used to happen that I really loved was you could actually see, if you had a really accurate reference, you could see during hot summer days that your clocks that were driven by the power line would fall a little bit behind because the speed of the generators in the dams would slow down, or in the nuclear power plants would slow down because of the load that they were pushing.  But then at night or on cooler days they were literally tracking how many cycles they were behind.  And so they would then run the generators faster in order to make up for that slump time so that your net frequency over a large period of time was still locked at exactly 60 Hz.  But what's apparently going to happen now is they actually are going to allow it to drift off.



LEO:  It's expensive to keep it locked.



STEVE:  Yes.  So the blurb that I found, the best one I found said:  "The North American Electric Reliability Corp. runs the nation's interlocking web of transmission lines and power plants.  A June 14 company presentation spelled out the potential effects of the change:  East Coast clocks may run as much as 20 minutes fast" - fast - "over a year, but West Coast clocks are only likely to be off by eight minutes.  In Texas, it's only an expected speedup of two minutes."



LEO:  So in the worst case it's not a whole - it's a few seconds a day.



STEVE:  Yes.



LEO:  It's not a huge drift.  It's not all of a sudden you're going to be late for work.



STEVE:  Correct.  And this is also only clocks that actually get their time reference from the power line.  Now, your typical cheesy $7 LED clock that you plug it in and then it blinks 12 until you set it, those are probably, they may not have a crystal reference because it's so easy to simply count the cycles of AC coming in.  That's incredibly inexpensive.  So very inexpensive clocks do this.  It may very well be, though, that better clocks are not trusting the AC line.  Certainly a clock that runs at either 50 or 60 Hz, it would have its own internal time reference, not using the AC line.  So anyway, that just...



LEO:  And it's not expensive to put a crystal in there.



STEVE:  Not any longer, true, true.



LEO:  And NIST was at great pains to point out that their cesium clock will not be affected by this.  The atomic clock is still precise.



STEVE:  Wait, it's not plugged into the wall, Leo?



LEO:  No.  Wouldn't it be funny if it were?



STEVE:  Oh.  What happened to the cesium clock?  Oh, someone tripped over the cord.  I just hate when that happens.



LEO:  So this actually, this started in 1930 that they kind of tried to keep this up.  So it's interesting that this is a big change.  And people asked about my computer, or your computer.  Your computer is not going to be affected by this.  They all use crystals.



STEVE:  No, yeah, our computers definitely use an on-motherboard time reference.  And now that we're tied to the Internet, we're also pinging one of the Internet time servers and being synchronized all the time.  In fact, I just downloaded a really cool app for the Pad, and I think it's available for the iPhone.  I just searched in iTunes for "atomic clock," and I found one where the description made it extremely clear that this was exactly what I wanted.  And that is, when you start it, it shows you that it is synchronizing, and it sends out pings to time servers, and you can configure it for which time server to use in order to lock itself down to - they used some strange word I hadn't seen, it's like femtoseconds or something, but it wasn't that.  It's like...



LEO:  It's a very small second.



STEVE:  ...okay, folks, I'm sorry, but you're not that accurate over the Internet because we've got packets.



LEO:  Well, it may be NNTP would be a good topic someday for a Security Now!.  But I've always thought you're not going to be that accurate.  You could still be a second or two off due to latency from the Internet; right?



STEVE:  You always will be, yes.  Well, not a second or two.  But down in the low milliseconds.



LEO:  Depending.  I mean, it depends on your Internet connection.  And so we have this kind of notion that, oh, this is exactly right.  In fact, it might not be.  It might be half a second off.



STEVE:  Well, there are clever things you can do, though, Leo, because for example, if we assume that packet transit time is symmetrical, when you send your query off, you see how long it takes to get the response.  And so you're able to assume that, if we have symmetrical transit times, that the actual response was sent half of the time that it took the roundtrip.  So you're able to null...



LEO:  Right.  You can get pretty close, in other words.



STEVE:  Yes.  You're able to null the delay out that way.  But people with satellite links, sorry, folks.



LEO:  I would very much like to do a little bit on NNTP.  And somebody in the chatroom has given us a wonderful link, Time.is, which is a web-based atomic clock.  But I don't believe, unless I'm misunderstanding it, it's getting the time, as most web-based clocks do, from the JavaScript from my system, but in fact it's getting the time - it's giving me server-side time accurately updated, I would hope.



STEVE:  Yeah, we hope.



LEO:  Otherwise, what's the point?



STEVE:  Okay.  Now, my last bit of Miscellany I tweeted because when my buddy told me about this I thought it was one of just the cleverest and coolest things I'd heard of in a long time.  His smoke alarm died, and he's got really high vaulted ceilings, and he actually wanted me to come over to spot him while he was, like, at the top of a scaffolding ladder, leaning out, trying to get to it.  And I said, well, I'm right in the middle of coding right now, Mark.



LEO:  Get somebody else to hold your...



STEVE:  I'll see you in a couple of days.



LEO:  If you die, I'll smell it, and I'll let you know.



STEVE:  It was beeping at 4:00 a.m.  It's like, okay, I know that's annoying.



LEO:  Oh, I do hate that.  We did a whole TWiT with Kevin Rose.  He was at his parents' house, and the smoke alarm beeped the whole show.



STEVE:  Okay.  Get this.  They are now available, I know that Lowe's carries them, I think First Alert is the brand.  You can silence and test the smoke alarm with any IR remote control.



LEO:  What?



STEVE:  Isn't that the coolest, cleverest thing, Leo?



LEO:  I need that.



STEVE:  It is so cool.



LEO:  Wait a minute.  So, okay, every time I cook bacon my alarm goes off.  Whoever put a smoke alarm, like, three feet from the stove, not thinking.  So you're saying I can aim an infrared remote at it, and it would turn it off?



STEVE:  Yes.  Isn't that fantastic?  We all have one, and it uses an IR remote.



LEO:  I go, and I'm waving something at the thing like this.



STEVE:  The remotes generate a modulated IR, so it's not going to confuse that with, like, the heat from a real flame.  That won't confuse it.  So it sees a fast modulated IR coming in, and it takes that as a command.  And so you do it three times in order to test the battery, and it goes doot doot doot doot, and it's like, okay, cool.  So you don't have to climb up and push the button or throw a tennis ball at it or something.



LEO:  Wait a minute.  Is this a feature built into smoke alarms?



STEVE:  New smoke alarms.



LEO:  Oh, no, so my old ones may not work.  But the new ones all do this.



STEVE:  Oh, no, no, no.  Absolutely not.  This is - I had never heard of this before.  So this is a...



LEO:  So they have built in an IR receptor that you can go blink, blink, blink, and it's great, you don't have to press the button to test it.



STEVE:  You don't have to climb up and so forth.  And if it goes off - mostly, as you said, smoky bacon, and it's, like, annoying - you just, you don't have to get, you know, get on your ladder or your stepping stool, you just use any IR remote, which I just think that's the clever award of the year.



LEO:  I'm going to buy these.  I've got to find them.



STEVE:  I just - I love it.



LEO:  Yeah, brilliant.



STEVE:  And I did have - Scott Stone tweeted, he's @sstone68, he tweeted:  Except my kids have an IR-controlled train set that sets off the smoke alarm's test mode.  Not so brilliant.  Huge fan of SN, keep it up.  So, okay, it's not without its side effects, but still just extremely clever.



LEO:  Very, very great.



STEVE:  And from the Twitterverse I've got three little quickies.  @infoholic Steve Remington tweeted regarding SN-307.  He said the Gmail plus label email tip, many sites incorrectly implement email validation and do not allow the "+" character in email addresses.  And similarly @rulerot tweeted, his name is Andrew, he said, "I used to pad my Gmail address, too.  But too many websites think that '+' is invalid.  Others have taken it and then choked on the back end."  So I wanted to share that caveat about the tip that we talked about last week of using the plus in order to create sort of an account plus a label for the purpose of creating unique email addresses.  Because it's done so infrequently, it's very clear that many email systems don't handle it properly, which is way annoying.



And @JBTechSec, whose name is Jack Brennan, tweeted:  "Just finished 'Zero Day.'  Not a masterpiece, but very enjoyable.  I finished it in two days.  Thanks for the tip."  Now, this is my segue to tell you about a book that I'm at 66 percent of, and I have been having so much fun on my Stair Climber with this book.  When I was talking about "Zero Day," which of course our friend Mark Russinovich wrote, and recommended it, and I've had a ton of great feedback, some other people tweeted, "If you liked that, you're gonna love this."  The book is "Daemon."



LEO:  Oh, yeah.  Oh, you're way behind.



STEVE:  Leo.



LEO:  And there's a sequel to it, too.  You're going to have to read that, too.



STEVE:  I know, and I am so glad because I don't want this to ever end.



LEO:  I know, it's excellent.



STEVE:  Most books you sort of get into it, and it plateaus, especially Hamilton.  It's like, how long more do I have of this?  I mean, it's good, and you're enjoying it.  But if I were to draw a curve I would say you kind of ramp up, and then you plateau.  This darn book, it keeps getting better.  I mean, it gets better and better.  It's like, as I'm reading, it's like oh, my goodness.  Oh, my god.  I mean, this author does everything you dream he might do with this concept.  Oh, my god, it is good.  So it is a masterpiece.



LEO:  Oh, yeah.



STEVE:  And I had to recommend it.  So it's "Daemon," which of course is from the UNIX world, the name for processes that run in the background and just do work for you.  I'm not going to spoil this for anybody.  But no one who listens to this podcast could possibly read this and not just be blown away.  It is fantastic.



LEO:  It's Daniel Suarez.  By the way, I met him about a year ago.  Great guy, and this is his first novel.  That's the amazing story about this.  He created this - and by the way, here's a nice little autograph from Daniel I really cherish.  He created this novel while he was working as a programmer.  He obviously, as you read it, you know has a real understanding of computer technology.  This is a very - just as Mark Russinovich does.  It's an intelligent book.



STEVE:  Oh, it's just - it keeps getting better.  It's like, oh, my god, how can this keep getting better?



LEO:  And this is the sequel to it, FreedomTM.  And you've got to get that, too, because it...



STEVE:  It's like a ramp.  You just keep going up higher and higher.  It's like, oh, my god.



LEO:  How did we miss not telling you about this book?  We all talked about it when it came out.  We interviewed him.  And actually he's going to come on our Triangulation show soon because he's been writing his new book, which is about predator drones.  And he's going to come on and talk about that.



STEVE:  I'm reading it.  I don't care, I'll read anything this guy ever writes.  It is just...



LEO:  Good, isn't he?



STEVE:  It's spectacular.



LEO:  Good writer.



STEVE:  So, highest, highest recommendation.  I'm late to the party, Leo.  But anybody else who is, too, just hit pause and buy this thing.



LEO:  Actually, you know, my 16-year-old son loved it, too.  There's enough action in it, it really kept his attention.  And the computer science in it is very well done.



STEVE:  Yes, and massively multiplayer gaming comes in, and Internet, and all the tech is correct.  Oh, I'm stunned.



LEO:  And you have to read the sequel because it ends in the middle.



STEVE:  Oh, believe me.  I'm just - I'm so glad that this isn't ending at 66 percent because, like, knowing that there's another one of these, oh, goodness.



LEO:  And it comes, by the way - we'll talk when you finish the second one.  It has a great ending.



STEVE:  Oh, good.



LEO:  You're going to love it.



STEVE:  A real quick short note from a SpinRite devotee, Harvey A. Russ.  He wrote, "Okay, this was an emergency.  My TiVo puked.  The WeaKnees tech support page said that the problem with my TiVo looks like a disk failure, and that I had to give up.  Well, I have the fix:  SpinRite 6.  Yes, I resurrected the pair of disks in my Series II TiVo using the handy-dandy trusty SpinRite.  Steve, thank you for your knowledge in hard drives and technology in general.  I've been using SpinRite since v1.0.  Your faithful follower in technology, Harvey."



LEO:  That's great.  Not an easy thing to do because you have to pull it out of the TiVo and put it in a PC.  But it works.



STEVE:  And if you've got all your shows on there, and you're otherwise SOL, as they say, SpinRite comes to the rescue.



LEO:  Actually that's a second recommendation on there because WeaKnees is the place to go if you're a TiVo user.  I love WeaKnees.com.  They're very nice people.



STEVE:  Yeah, they are.  And in fact they have a nice 48-bit Linux kernel that I was able to use for my old Series I TiVos in order to get them to get out of that 32-bit barrier.



LEO:  Yes, two K's.  Actually, both work.  That's interesting.  So one or two K's, depending on how you want to spell it.



STEVE:  Oh, interesting.



LEO:  But two K's does work.



STEVE:  Good for them.



LEO:  Yeah, they're smart.  Because there's two ways to spell it, isn't there.  Now, Steve Gibson, I have questions.  And I presume you wouldn't have given me these questions if you didn't have answers.



STEVE:  Or sometimes they're just great tidbits.  In fact, this first one is incredibly clever.



LEO:  Good.  It goes back to that read-only USB thing we've been talking about for a while.  Marco Gouveia e Silva in Funchal, Madeira Islands, Portugal says:  Hi, Steve and Leo.  I've been a listener of Security Now! almost since the beginning, and I also listen to some other TWiT shows.  Thank you.  Love what you do.  Hope you don't stop.  My apologies for my Portuguese, Marco.  I think I found a great way of making a USB thumb drive read-only, but I need your opinion and blessing, Steve.  What if you used a CD file system on a USB stick?  ISO9660, which is what CDs use, is read-only by design.



STEVE:  Yes.  Very clever.



LEO:  Interesting.  He says:  I'm a happy almost-only Linux user, and I've read this on a magazine called Linux Format.  So here goes the way of doing this on Linux, but of course you could do it with Windows and Mac with the right software.



Use some CD-burning software, he says, K3b, Nero, so on, to create a CD ISO image containing the files you want to have on the key as read-only.  You can also do this from the command line if you are a Linux fan with mkisofs (make ISO file system) -r -V discname -o somefiles.iso file1 file 2, et cetera.  Discname of course is the volume ID that will be given and used when mounting the device.  You can list as many files as you want on the command line, or of course you can use globbing or even specify a whole directory.  But it's easier just to use some CD-burning software to do this.



Now you've got to burn the ISO - this is the tricky part.  It's easy to make the ISO.  You might even have an ISO if you downloaded a Linux distribution, for instance.  Now you can burn the ISO to a USB stick.  You start with the stick not mounted, so unmount it and then run dd, use dd if= the path to the file, to the ISO file.  That's the if, the in file.  The out file is the device, the USB device.  So if you're a Linux user you'll know, it'll be in /dev/sd and some number.  Block size 2K, I think that you could change.  But anyway, you do have to use the base device, obviously, and not a root partition on it, not a mount partition.  You want it to be unmounted.  And it's going to erase the entire thumb drive.  Dd is on Windows.  If you Google search you can find it.  But of course it's on Mac and Linux operating systems.



Wait for the drive's LED to stop flashing, that's important.  Unplug and then plug it in again.  Your OS will mount it as a read-only device.  The files on this file system will be read-only.  But here's the question for you, Steve:  Is this good enough?  Is this safe?  Does it get the Gibson Seal of Approval?  Thanks for the podcast.  I've learned so much from it.  Keep up the good work.  Mark.  What do you say?



STEVE:  I think it is incredibly clever.  It's absolutely the case that the OS would present to any software running in the operating system a read-only device.  So any standard file-writing calls would absolutely fail.  If you tried to alter the contents, the OS would say this is not writable and fail the call.  The only vulnerability is that obviously technically it's still a writable device.  So someone could create, you could have theoretical software that would unmount it and access it in raw mode and then go out and alter the CD image in order to incorporate additional files.  But no such thing exists.



So I just think this is really cool and clever.  So because there's a theoretical way you could get around it, it's like, eh, you know, having a write-protect switch that you have verified on a USB stick is going to be safer.  But doing both would give you lots of protection because then you would be safe even if, for example, you forgot to have the switch set the other direction.  So I just - this was such a clever idea, I wanted to share it with our listeners as, like, this is thinking outside the box, and it's really a great solution.  And, yes, the fact is it would stop all malware from installing itself.



LEO:  So malware can't override these settings.  It can't say, oh, ignore the read-only.



STEVE:  Correct, because the image itself is closed, and the file system has no provision for, like, dynamically relocating, marking files deleted and all that. None of that exists in that 9660 file system.  It's just a way of providing a static fixed image, which is what makes it so cool, such a great solution.



LEO:  Yeah.  Question 2, Glenn Edward in Nottingham, Maryland.  He wonders whether Adobe's Shockwave player is really necessary:  Times are tight, as they say, and I can't keep adding RAM sticks to this old PC of mine, or afford a new one with a lot more RAM capacity.  So I like to keep my PC's installed software to a useful minimum.  And I keep seeing both Adobe Shockwave and Flash listed as things I must have.  But I wonder if that's not just a load of Adobe baloney, and that Shockwave is just about as useful as having the RealPlayer plug-in installed.  I've wondered this myself because everything uses Flash, but Shockwave is an old technology that I don't - it's rarely used anymore.  I'm sure there's some business or educational applications that need Shockwave, but how likely is it the average Internet user's going to run into it?  So I'm hoping you'll tell me "not very," and I can eliminate the Shockwave plug-in and not keep it updated.  Glenn Edward of Nottingham, Maryland.



STEVE:  Not very, and eliminate the Shockwave plug-in and not keep it updated.  That's exactly right.



LEO:  Yeah.  And then if you need it, it will tell you.



STEVE:  Yes.  If you need it, then you can decide if it's worth it.  But that's exactly the same advice we have for any of our low-utilization things like RealMedia, although Elaine sometimes gives me a little poke and says, Steve, you realize I'm transcribing the podcast with a RealMedia player.



LEO:  Really?



STEVE:  Yes, I think she has foot pedals or something.



LEO:  She's so old-fashioned.



STEVE:  Well, no, I mean, it's like the only thing.  She's really up-to-date with things, but it's the only thing that does what she needs.  She can't find anything else otherwise.  So and of course I don't think she's out surfing in strange dark corners of the Internet and downloading images...



LEO:  Well, and Java, that's another example, we were talking about the Facebook plug-in, which does use Java, apparently only on the Mac.  It looks like an EXE on Windows machines.  But we've said before, don't have Java on there unless you need Java.  Java 7's coming out tomorrow.  And a lot of people might say, oh, quick, and go out and get it.  No.  If you don't need it, don't have it.



STEVE:  Yes.  And so Shockwave was an earlier technology.  Once upon a time there were a lot of games.  Remember the bowling the elves or something?



LEO:  Yeah, Elf Bowling?



STEVE:  Elf Bowling or whatever?  Those sorts of things were done in Shockwave a decade ago.



LEO:  And I'm told some gaming sites still have Shockwave.



STEVE:  But if you're not a person who knows you need it, get rid of it, absolutely.  And as you said, Leo, if you go to a site that says, oh, you need to have Shockwave in order to see this postcard from your aunt or something, it's like, well, okay, Aunt, I know you love me, I'm not going to load Shockwave.



LEO:  Yeah, you can decide.



STEVE:  I can live without it, yes.



LEO:  Is it so horrendously buggy that it probably is not safe to...



STEVE:  It's, yeah, I mean, I would say it's probably worse than Flash because it's getting less attention.  And anything with less attention has got gremlins squirreled away in it.



LEO:  Incidentally, now, SDA1, who is apparently a USB key plugged into our chatroom, says that the Skype on the PC Facebook uses EXE loader, but it is for a JAR file, which of course is possible.  So it may still need Java.  I would expect it would.  Why would they write an EXE file for Windows and use Java on the Mac?  You might as well just write one in Java and put it everywhere.



STEVE:  Right.



LEO:  So, yeah, you probably will need Java.  There are a lot of reasons to have Java on there.  Greg in Florida reminds us of a simple iPhone/iPad password improvement.  He says:  Steve, your recent comment about iPhone passwords reminded me of a great way to help secure an iOS device.  I'm the only person I know that uses it.  But if you turn off "simple passcode" in the settings, instead of the numerical keypad, which only is four digits or whatever, you get a full QWERTY keyboard to enter the password.  Even if you still use a short code, the increased character set makes guessing much, much harder.  It also makes shoulder surfing a bit more difficult, as well.  So in other words, don't use that numeric keyboard which only gives you four digits.  Use the full keyboard.



STEVE:  Yeah.  And you know, a number of people had mentioned this before.  I just kept forgetting to relay it.  I wanted to make sure that our listeners knew that that option existed.  You turn off "simple passcode," and then you've got the full keyboard, so you're not limited to four characters.  You can do anything you want to there, if you really want to crank up the security on accessing your iPhone or iPad.



LEO:  Awesome.  I actually have the feature turned on that says, if somebody guesses 10 times incorrectly, it erases it.  And I feel that's sufficient, as well.



STEVE:  Yes, because that means someone has commandeered your device.



LEO:  You only get 10 shots, yeah.



STEVE:  Yes.  And every time we dock, our device is backed up into our local machine, so we can replace it and reload it.  Or if they say, oh, I'm sorry, I tried to play a game on your iPad while you were away, and it seems to have wiped it out, well, then, you just dock it and bring it back to the condition it was.



LEO:  Yeah, not such a loss.



STEVE:  Yeah.



LEO:  MyCloud will make that even better.  Moving right along, Steve in Columbus, Ohio asking:  Why is all personal data not encrypted on a company server?  After reading all these security hacks in the news and almost being a victim in the MtGox breach, the Bitcoin exchange breach, one question keeps coming to mind:  Why is it companies only feel the need to hash or encrypt passwords and financial data, if even that, and not also encrypt other data like email address, phone, et cetera?  Even data as simple as my first and last name, you know, why not hash that?  I understand that financial and passwords seem the most important, but shouldn't all my information be protected?  Is there a technical limitation to hashing that much data?  Is it laziness?  I look forward to your response.



A quick note about my earlier "almost compromised" remark.  About one minute after receiving the email about the MtGox hack I was simultaneously knocked out of my Gmail accounts (desktop, laptop, and Android) and was forced to change my password because of suspicious activity.  I was not compromised because I had Google's two-step verification turned on, and for safety I immediately generated and inserted a new password with LastPass.  Thanks for Security Now!.



STEVE:  And that, yeah, that reminds me that one of the advantages, we were talking about OAuth and the idea of using a secure site to authenticate yourself, well, if you use, for example, Google two-step verification, then you get that additional level of safety when you authenticate to the site that you're being referred to, so that's handy also.  But as for Steve's question as to why all of our data is not being kept encrypted, it's just because they don't have to.  There's...



LEO:  It's not like a huge hardship to do it.



STEVE:  It is zero, Leo.  It is the developers, the programmers caring to do so.  And to the degree that these systems are purchased from a central location, from like a kit of some sort, it's just criminal that the kits haven't done this because then everybody else who used those kits or those turnkey solutions would automatically have everything encrypted.  So this is another sign of it just being the early days still.  Certainly at some point there will probably be legislation which requires the encryption.  I don't know how else it's going to happen except that it's just you're forced to do it, and the penalty of ever having unencrypted data escape, which would demonstrate that you were in violation of the law, would then be very high.



But nothing prevents it.  Encryption takes no time, no overhead.  I mean, there's no excuse for not having our data encrypted.  It does need to be encryption rather than hashing.  We talk about hashing passwords because we never need to unhash them.  In fact, the way we verify them is that we hash the original one and keep the result.  Then we hash what the user gives us later when they want to come back and see if they match.  But in the case of things like first name, last name, address and so forth, where we actually want to get that, well, then, there we need to encrypt that so that we can decrypt it later.  But it absolutely should be stored in encrypted form so that when these database files are downloaded, all they get is pseudorandom noise, I mean, just nothing.  Absolutely, just like LastPass does.



LEO:  Moving along, this is from Lewis Barnett at WhosTheMuse.com.  You've got to read it carefully, WhosTheMuse.com.



STEVE:  Who's the muse.



LEO:  WhosTheMuse.com.  I'm thinking security, so I'm going w host, then I'm stuck, he muse dotcom.  As a geek who is already running a newer version of Windows, I really would like to know what do you plan to do after support for Windows XP expires, which is not instantly.  I mean, we've got a few years.  As I listen to Episode 306 of Security Now! I know there are still 1,020 days left.  But have you given any thought as to what you'll do after that, Mr. Steve Gibson?  I know you dislike adopting new technologies - boy, he really thinks you're really a curmudgeon - but will Windows 7 be advanced enough in three years for you?  Plus, what was that Star Trek noise in the background?  I love the show, and keep it up.  I mentioned the Star Trek noise in the background.



STEVE:  Yes, you did.  Now, that was Episode 306.  I just checked my Win7 screen, not the one I'm in front of, but the one where Skype is running, and it's showing me, I've got to remember that there's a desktop widget which shows you on Windows 7 the length of time before Windows XP security updates expire.  And it is now 1,006 days.  So not surprisingly, 14 days fewer than two weeks ago when it was 1,020.  So as you say, Leo, I've got almost three years, or two and a half, I guess, something like that, to go.  And Lewis, that'll be fine.  I have 7 running on a tablet.  I have 7 running to my side.  I was doing my Bitcoin mining on 7.  So I'm not using it.  It's around.  I'm sort of getting the feel of it, and I'm so happy I will have been able to skip over the Vista nightmare.  So, yeah, I think two and a half years more, Win7 ought to be ready for me by then.  I think the timing will work just right.



LEO:  I actually like Windows 7.  I'm using it now, by the way.



STEVE:  Oh, and Star Trek noises, many people tweeted about where it was that I found those high-quality Star Trek sounds that had, like, the engine noise removed from the background and everything.  And so I found them again, and just for the podcast I tweeted the URL because it's too long for me to say it verbally.  So if anyone wants to find the link to this website where they purified and just beautiful Star Trek sounds from all the various variations of the Star Trek series, Next Generation and the original and what was the floating island one?  Can't remember.



LEO:  You're asking the wrong guy.  I'm not a big Star Wars fan.



STEVE:  Deep Space Nine.



LEO:  I'm just teasing.



STEVE:  Deep Space Nine.



LEO:  Oh, yeah, Deep Space Nine.  That was with the Ferengi.



STEVE:  That's right.  Anyway...



LEO:  By the way, all on Netflix, every one of them.  Netflix streaming.



STEVE:  All the episodes, yes.



LEO:  All the old episodes, including the original series, Enterprise, Deep Space Nine, they're all there.



STEVE:  Okay.  So anyway, Twitter.com/SGgrc.  That will show you my tweet timeline.  And the last tweet there, I don't tweet that often, so you'll still not have to dig very far, is the URL to this site that's got really, really good Star Trek cleaned-up pure noises.  And I think that was the communication termination noise, which I've got as my BlackBerry sound for incoming email.  So it always does raise eyebrows when the phone does that.  It's like, okay, Gibson.



LEO:  [Making noises] No, those are Star Wars.



STEVE:  Yeah.



LEO:  Luke - actually I'm going to read two together, so two questions in a row.  And then your answer.  Luke, aka Kellycarter on Thaurissan Guild "Cookies" - oh, it's Wow - an avid WoW player in Nashville, Tennessee and Azeroth - that's the realm in the World of Warcraft he plays on, apparently - wonders about Blizzard's newer authentication.  Steve, I have to say I had a Gibsonian response the other day.  I, as you might have guessed, love the game World of Warcraft.  I loved how they used a football or an app to generate a code required to log in.  I didn't know they were doing that, second factor authentication.



But recently, Blizzard, the company that makes Warcraft, changed how they do their security.  They no longer require a code every time you log in, and they tell us they are doing something on their end to validate that I am who I claim to be.  But the thing that brought my alert level up is they're not telling us what it is they're using.  We can't validate that they're doing the right thing or if they forgot something, or if it's only imaginary security.  Is there any way you could check in on this for those of us that spend time in Azeroth?  By the way, Steve, what class/race/spec would you like to play?  For the horde.  I'm sorry.  You don't play World of Warcraft, do you.



STEVE:  Never.



LEO:  You have a life.



STEVE:  I've never even seen it.



LEO:  I played it for quite a bit, and then I realized I was losing my life.  So now I play Tiny Tower on the iPad.  So do you know what they're doing?



STEVE:  Well, let's go to number two, second question.



LEO:  Oh, yeah, sorry.  I warned you, but I didn't heed my warning.  Scott Clark in Hamilton, Ontario, Canada also wonders and worries:  I'm an avid fan of the work you do producing Security Now!.  I'm a guild leader on the Skywall server of World of Warcraft and am acutely aware of the need for security to protect my account.  I use a Blizzard Authenticator, which is a modified Vasco security token.  Blizzard has long checked location data and locked accounts that were accessed from unexpected locations.



Recently without warning Blizzard implemented a change to their security policies.  If they are confident in your identity when you log in, they're not going to require you to enter your Authenticator number, bypassing this measure entirely.  Blizzard has not released details on how this identity check takes place, although presumably it's based on some mix of location, MAC address, and/or stored certificate.



There has been considerable debate on the forums as to whether this represents a weakening or a strengthening of our account security.  Blizzard has not been forthcoming with details, and they do not provide an opt-out which would force use of the Authenticator.  Personally I prefer the security of knowing that the Authenticator is required for all logins, versus the convenience of not entering the code each time.  What I'd like to know is, by asking for the Authenticator code on each login, is this not strictly weaker than requiring it - you understood what I mean.  Is it weaker not to ask for the code?



STEVE:  Okay, so here's what happened.  Due to the insane popularity globally of World of Warcraft, years ago it became a real problem that users were using weak passwords, they were getting their World of Warcraft accounts hacked right and left...



LEO:  Yeah, lots of cheating and stuff, too.  I mean, this is a big problem.



STEVE:  Yeah, it's a huge problem.  And people, as you no doubt, Leo, know, build up tremendous value in their identities, their online identities in World of Warcraft.  So getting hacked, I mean, can be hugely expensive and traumatic for the game player because some bad guy gets in and, like, sells all your gold or transfers it somewhere else or does something, I'm not quite sure on the details.  But I know that...



LEO:  You said that as if you're a WoW player yourself.



STEVE:  Yeah, well, I did some research.  So what happened was Blizzard decided they were going to come up to speed with multifactor authentication.  And they added some years ago the Blizzard Authenticator, which is exactly identical to our wonderful little football that we've talked about for, like, logging into PayPal and eBay and so forth, where you press the button and you get the six digits and it's changing every 30 seconds and so on.



What then ensued was malware which would perform an effective man-in-the-middle attack - it was called emucor or emcor.dll - which World of Warcraft players were getting themselves infected with.  So because Blizzard was requiring authentication every time, every time you logged in this emcor.dll would intercept in real-time your username and password and current display from your Authenticator and instantly ship it off to somewhere bad, where it would be immediately used to authenticate.  You would be given the news that there was a problem with your authentication, while the other person was in real-time logging into your World of Warcraft account and emptying it, selling off your gold and jewels and who knows what mischief they were getting up to.



So what happened was Blizzard developed a hybrid approach.  They backed off of requiring the Authenticator every time, only needing it in instances where they suspect you may not be where they have some reason to believe you have been using WoW from before.  There are, as our writers here and podcast listeners suggest, there are a number of ways that World of Warcraft, the Blizzard people could know where you are.  You're using the same IP address that you have used for the last five weeks.



LEO:  I wish they'd tell us because then we could judge it.  But let's say they do it kind of as LastPass does it, where the first time you log in you need the Authenticator.  Once you do that, they put a certificate on your system, and then they check for the certificate.  That would be pretty good.



STEVE:  Yes.  The problem is you could - the certificate could get lifted, too.  I mean, first of all, if something's bad in your system, it's pretty much game over.  If you've got anything high value on your system while you've got malware present, then you're in trouble.  So the cert is one thing.  They could also, for example, read the MAC address from your adapter, as was suggested.  They don't receive the MAC address over your connection.  They get your IP address over your connection, but they could read the MAC address from your adapter, which is globally unique, although subject to change.  Or just store a cookie of some sort on your system.  I mean, anything that they do to say this looks like a machine that we have reason to believe, I mean, there's all kinds of ways to associate with a machine.



LEO:  Apparently, if you change IP address, that is sufficient to trigger reauthentication.



STEVE:  I would use IP address as the first thing that I looked at.  But all hard drives have serial numbers.  So you can get the serial number off the hard drive.



LEO:  Well, and we know with, what was that super cookie thing, we know there's ways to identify almost uniquely, in fact, if not a hundred percent uniquely, any computer.



STEVE:  Right.



LEO:  With stuff you can easily get over the Internet.



STEVE:  So I think the hybrid approach makes more sense if you're going to have a high incidence of malware which is compromising your authentication by performing a man-in-the-middle attack, which is in fact what happened.



LEO:  All right.  So in other words - I think, you know, they've got to balance this with a lot of normal users who don't want to get a security token, but who also may want to use...



STEVE:  Actually it's required.  It's required, Leo.  They were selling it at cost.  It was $6.  And if you were going to continue using World of Warcraft, you had to get one.  The problem was that bad.



LEO:  Shows you how long it's been since I've logged on because I didn't know that.



STEVE:  And so I do think, though, that...



LEO:  That would have stopped me, by the way, right there.  I would have said, aw, screw it, I'll do some other game.



STEVE:  The upside to using a multi-vector authentication is that then you're not requiring someone to use the Authenticator every single time, every single time they log on.  Many users appreciated it because they felt the danger within the community.  But the fact is, locking onto your IP address is going to be pretty good.  That would require a much more sophisticated attack using your machine as a proxy in order to loop through and have the bad guys do something remotely.  So that would be not like - you could write that, but so far it doesn't seem to exist.



LEO:  Our last question, I'm sorry to say.  Patrick, an old soul in Laramie, Wyoming brings us our Wrap-Up Philosophical Discussion Topic of the Week:  Are we losing the forest, he asks, for the trees?  Steve and Leo, last week's topic about the growing importance and role of identity over the Internet made me wonder, which is a good thing, are we losing the forest for the trees?  Maybe I'm different than the generations coming after me, but I prefer to hang out with my friends face to face, rather than a video chatroom.  I prefer to go to the bank and talk to the tellers - well, good luck doing that, I doubt you'll be doing that much longer - rather than go online, although I do that, as well.  I prefer to sit - this guy's sounding like an old fart, now.  I prefer to sit in front of a slide projector - do they still make those? - with my family than to flip through someone's Facebook album.  While I realize that the Internet is very powerful, and it enables things that we would never have imagined a decade ago, I just have to wonder if it's really such a good idea to move everything to the Internet, which is the direction it seems we're headed.  Coming from the perspective of a kid growing up with computers and technology, I feel like perhaps we all need to take a step back and really ask ourselves, is this really the best direction to head in?  Am I just starting to sound like my grandpa, or is there any legitimacy to what I'm saying?  I'm curious to hear your thoughts.  Thanks for everything you do.  Look forward to many years to come.  Patrick.



STEVE:  Well, Leo, I love texting.  I just - I love my phone, and I've got a network of friends that I'm in constant contact with.  And Twitter has been a boon for, really, for connecting me to our Security Now! listenership in a way that I hadn't been before, so that I don't miss things going on; and I'm able to deliver, I think, a better podcast every week as a consequence of it.  And of course Wikipedia, I mean, and the 'Net itself.  As an information worker, I am hugely empowered by this.



And I was just hearing some conversation, some dialogue the other day, maybe it was on a TWiT show, talking about how - oh, it was on the radio this morning, how Facebook has really revolutionized relationships.  They were enumerating the regrets people have, like the top five regrets people have in their life.  And one of them was that they had lost contact with their friends.  And the people, the two DJs were bantering back and forth.  And they said, you know, I'm, like, I've reconnected with all these friends that I had lost touch with, thanks to Facebook, which I think is many people's experience.  So certainly there's a depersonalization going on.  But boy, I think on balance it's just a boon.  It's communication.



LEO:  Yeah.  But there is an interesting backlash going on among even young people, whom I gather Patrick is since he said he grew up with computers.  In fact, we had this discussion, I can't remember what show it was on, that bookstores - and maybe it was This Week in Google, which is coming up next - that bookstores aren't going to go away, they're just going to change because we do need some way of getting together in real life, in person, face to face.



But, see, you and I are a rare case.  We prefer to stay at home and do our computer thing.  We're introverts.  And but we're a minority.  I think most people do prefer to get together.  Oh, Patrick's in our chatroom.  He says he's 21.  So he's a kid, even though he sounds like an old guy.  I think in fact my daughter's been saying this.  She's 19, and she's been saying this for some time.



STEVE:  Wait, saying what?



LEO:  She says, in my generation there is a move away from the Internet.



STEVE:  Wow.



LEO:  And it's of course probably a pendulum.  But she says that she believes, and she's I think one of them, that face to face is better.  And there is a move afoot among these younger people in that direction.



STEVE:  I wonder, though, if that's a move back from absolute over-insanity saturation.



LEO:  Well, that's what I mean by a pendulum.  I think it swings.



STEVE:  Well, but, I mean, like there was a tendency maybe to get completely on the 'Net in a way that even you and I haven't yet, where it was like obsessive Internet use.  And so for Abby, she's backing away to, like, a more...



LEO:  What you and I would consider normal.



STEVE:  Exactly, more even keel sort of usage.



LEO:  Well, and then there's Jaron Lanier, who of course was a pioneer in virtual reality, who now eschews all things technological.  There was just an article about him in I want to say The New York Times.  And he's written a book saying "You Are Not a Gadget."  And he's really lobbying hard for turning our backs on technology in at least some respects.  And don't forget Cliff Stoll, who was an astronomer, computer scientist, wrote a great book about hacking, who has also become an anti-technologist.  So I don't know, I mean, we see Tweetups now, as HishMaj is pointing out in the chatroom, where people who know each other from Twitter meet specifically so that there's some face to face.



STEVE:  Yeah, and in fact I have amazing relationships with people in GRC's newsgroups whom I've never met, probably never will.  But I'm sort of curious about them, and I've wondered, boy, you know, if I were to host a big gathering, what would that be like?  That would be weird, to take us out of our virtual realm.



LEO:  I'll tell you, I think this is why there's something deeply satisfying about South by Southwest and other conferences like that.  When I went to Foo Camp with 300 other people, when you meet somebody that you only know on Twitter, you know their handle, there's something deeply satisfying about saying, "Hello, hey, you're @," you know, and saying, "Oh, Mickey.  Oh, it's nice to meet you."  And so I think there's a certain value to that.  And I just think that some of us have gotten so digitized that we forgot.



STEVE:  So digitized.  So it's not replacing the real world.  It's just supplementing.



LEO:  And I'm with you, I mean, the value is huge.



STEVE:  Oh, goodness, yes.



LEO:  And you're kind of a late convert, frankly.  I had to talk you into Twitter.



STEVE:  Yeah.  I just passed, just two days ago, 22,000.  Or was it, no, it was yesterday, 22,000 followers.



LEO:  That's great.



STEVE:  So I'm enjoying it.  And it's super useful for me.  So thank you, everybody, for sending your thoughts over...



LEO:  Oh, that's funny, I met Patrick.  He was here last week for the Security Now! episode, he's telling me.  Oh  yeah, I remember you, Patrick.  That's very funny.



Steve Gibson is on the Twitter as @SGgrc.  GRC stands for Gibson Research Corporation.  That's his website, GRC.com.  So this all makes sense if you start to understand that.  @SGgrc is his Twitter handle.  GRC.com is the place to go if you'd like to know more about all the things he talks about.  Of course all the shows are there, 16KB versions, transcriptions so you can read along as Steve talks.  It's all there at GRC.com.



And don't forget, of course, SpinRite, the world's finest hard drive maintenance and recovery utility.  It's a must-have.  If you have a hard drive, you have to have SpinRite.  We do this show every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1800 UTC at live.twit.tv.  We do invite you to join us then.  There's a party.  Can you hear the party going on in the other room?



STEVE:  Yeah, I heard something.



LEO:  I guess we're having a - I guess they are meeting face to face now.  The kids today.  And they just love it.  You know what the problem is, we have too many darn people.  We have 18 people jammed in that little room next door.  So everybody needs to run out and buy a brick right now so that we can move to the new TWiT Brick House.  Steve, we've got two more Security Now! episodes from here, and then we'll be in the new facility.



STEVE:  No kidding.



LEO:  July 24th is our move date.  And I know you're coming up for the party August 21st.  I look forward to that.



STEVE:  Yup.



LEO:  If you haven't yet bought a brick, bricks.twit.tv.  It helps us build the studio, but it also puts you on the Wall of Honor right there in the entryway.  It's just - it's shaping up so cool.  It's really, really fun.  Thanks everybody for being here.  Steve, we'll see you soon at GRC.com and next Wednesday for Security Now!.



STEVE:  Thanks, Leo.



LEO:  Take care.

	

Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#309

DATE:		July 14, 2011

TITLE:		How the Internet Works, Part 1

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-309.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  This week, after catching up with our usual grab bag of Internet-related security and privacy news, including another Microsoft Patch Tuesday, Steve and Leo plow into the first of a series of forthcoming episodes, which will be spread out over time, describing the detailed technical operation of the ever-more-ubiquitous global Internet.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 309, recorded July 13, 2011:  How the Internet Works.



It's time for Security Now!, the show that brings you the latest security news, with this guy right here, Steve Gibson, of the Gibson Research Corporation, GRC.com.  Steve's a great man, a guy who's been doing this show now for six years.  And of all things, after six years, we're finally going to find out the one thing we probably should have started with:  how the heck the Internet works.



STEVE GIBSON:  Well, I mentioned some time ago that we were going to do this series.  And I know it's months ago because, as you know, Leo, as our listeners know, we've had a very busy last few months with the addition of the Attacks & Breaches category in the top of the show, and just never, I mean, like, literally never a moment to breathe.  And so people have, through Twitter and through the mailbag, GRC.com/feedback, have been - I see a constant question:  When are we going to do the Internet, how the Internet works series?  So we're not going to suspend, we can't suspend everything else to do this.  But I wanted to start today.  Today just sort of seemed like the right day to start the series which will very carefully and methodically and in sufficient detail that I think it will be very interesting to people, we're going to really understand all of the fundamental concepts and technologies that is the Internet, that is the way it works.



And today, Part 1 of the series, in sort of setting this up for myself and thinking about it, I realized there were three things, just three, three things that back then, at the time, had never been done before, completely unproven.  They were new concepts.  And there's just three things that are really responsible for everything else that followed, three things that the original designers of this thing that outgrew its roots to become a global network, they got these three things right.  And so we're going to talk about the three key concepts that underpin the way the Internet works as our topic for today.



LEO:  Wow, three things, that's all it took.



STEVE:  Yup.



LEO:  I can't wait to find out what they are.



STEVE:  Three things done right.



LEO:  All right.  If you're playing the home version of Security Now!, try to think of what those are, and we will answer that question in just a bit.  We also have, of course, security news.  There's a big update a couple of days ago.



STEVE:  Yup, and a scary revelation from Microsoft about something that had been wrong since Vista SP1...



LEO:  Oh, that's nice.



STEVE:  ...that no one found out about until they fixed it.



LEO:  Isn't that special.  So Patch Tuesday was Tuesday; right, Steve?



STEVE:  Yes, it was indeed.  Now, there were 22 different security flaws of various ilk fixed.  21 were nothing, were not a real big deal.  They spread across various products, pretty much all of the things.  And they were the so-called "privilege elevation" problems which are a concern because we do rely on administrative rights being godlike within our machine, and regular user rights being restricted.  So it is the case that that barrier is good to have, and we don't want it to be penetrated.  So there were 21 different ways of essentially getting around that kind of barrier.



But the 22nd problem was interesting.  Microsoft revealed at the time of this patch being available that there had been, since SP1 of Vista, which is when they introduced an upgraded Bluetooth stack, as it's called, a protocol stack for Bluetooth - and we'll actually be talking about protocol stacks relative to the Internet by the end of this episode.  There was - and this is like the worst of all possible nightmares.  We're assuming that no one knew about it.  But this was a buffer overrun-y sort of problem in a wireless protocol.  So quoting from Microsoft, they said:



"A remote code execution vulnerability exists" - now, remote code execution vulnerability exists - "in the Windows Bluetooth 2.1 stack due to the way an object in memory is accessed when it has not been correctly initialized or has been deleted.  An attacker could exploit the vulnerability by constructing a series of specially crafted Bluetooth packets and sending them to the target machine.  An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights and take complete control of a system without any user notification at any time."



So, and then in the FAQ and the Q&A, people were saying, well, if I don't have Bluetooth installed, then I'm safe; right?  And it's like, well, no, because Vista and Win7 will instantiate the Bluetooth device if you temporarily give it, like, a removable Bluetooth over USB.  So somebody could come along and stick a little Bluetooth dongle into a machine that has never seen Bluetooth, and Vista and 7 will happily bring the driver online.  That's where the problem is.  And then an attacker could get into your system.  And of course...



LEO:  So they don't really need access to your system.  They just have to be within Bluetooth range of your system?  Is that the case?



STEVE:  And they don't ever have to be associated.  We've talked about how Bluetooth protocol works, where there's a whole pairing association which is the one moment of vulnerability with Bluetooth before a common secret key is negotiated between endpoints, which are then memorized by each endpoint so you never have to go through that again when you're reconnecting to a device that you have once paired with.  This doesn't require pairing, doesn't require a connection.



Basically it's a breach in the lower level infrastructure of the Bluetooth driver.  I mean, it's really what you don't want.  And so we're, like, hoping we don't have these in the network, the regular wired network stack that we're all using and depending upon pretty much 24/7.  This is that same thing in Bluetooth.  And many machines just run with Bluetooth on.  And in fact there's some feature that Microsoft's added, again to make things easier, where if you're in, like, network discovery mode, it will turn on your Bluetooth radio without your asking it to, just in case maybe that's what you're trying to discover.



So anyway, the good news is this has been fixed now.  It's an important update, more so I think than most things, because now the bad guys know about this, and we know that they're on the hunt for it.  We see this all the time, is there's now a window between disclosure and the time when people are going to get patched.  And we know from history that lots of machines are very late in getting themselves patched.  So one could imagine that the hackers are all focused on this problem now.  So I'm sure our listeners will do what they can to get themselves up to speed with this.



And Microsoft does offer in their Knowledge Base article a command which I didn't bother to write down and save because it's too long.  But there is a way, if you, for example, have Bluetooth hardware in your system, but you absolutely never ever want to use Bluetooth, and you're sure, and this is reversible anyway, there's a command you can give that essentially permanently shuts down Bluetooth access.  It's a net shell command with a bunch of parameters, where you disable...



LEO:  Probably deletes the driver; right?



STEVE:  Yeah, it disables the driver so it cannot be started by Windows.  And if you really never use Bluetooth, that would be a great thing to do.  You can get yourself a little caught up, though, or caught out.  In the old days I used to always disable the DHCP service in my Windows systems because I don't use DHCP within my own network.  I've got all my IPs assigned statically.  And then I'd take my laptop or a machine somewhere else, and it would refuse to get on the Internet.  It's like, what's wrong with this?  And then I finally would remember, oh, wait a minute, I disabled the DHCP service because I'm wanting to run no services that I don't need.



And so you do want to remember, if you disable Bluetooth in this fashion, that you did so, and remember to reenable it if you should ever need it in the future.  But really, turning the radio off at least is a really good thing.  And if it's a laptop, it saves battery power.  It's not using much, which is the whole point of Bluetooth, but it does save some.  And it didn't affect anybody on XP [pointedly clearing throat].



LEO:  So this is something that they kind of added.



STEVE:  Yes, in SP1 of Vista.



LEO:  A feature of SP1.



STEVE:  Hey, it's a nice feature.  Vista, from SP1 on, the Bluetooth stack was at v2.1.



LEO:  That's important because it underscores the fact that you can add bugs.  Just because an operating system's been updated doesn't mean it's bug free.  You can actually add bugs, add exploits, add holes.



STEVE:  Oh, Leo, how many times do I pound our listeners over the head with I'm still on XP.  I never was subjected to this.  Nor were any of my laptops, because I've stayed there.  Which, by the way, has exactly 999 days remaining before Microsoft...



LEO:  Yes, the countdown began yesterday.



STEVE:  999.



LEO:  I think you should put that on a website somewhere.  That's about three years, folks.  We're all right.



STEVE:  Yeah, we're okay.  There was a minor fix to Firefox v5.  It's funny, I've seen a lot of grumbling about Firefox.  They've already got 6 in beta, Leo.  And it's like, wait a minute.  We just had 4.  And I worry...



LEO:  And 5.



STEVE:  I worry that they're just trying to play the version number game because...



LEO:  Well, I think what they did, and this is what Chrome has done, is that they kind of - and they've even said this explicitly.  Version numbers are no longer as important as they were.  They don't reflect this - in the past, you and I, we've been around long enough, we remember that one whole version update is considered a major update.  And then the point updates are considered minor updates.



STEVE:  And also sometimes the major ones are not free, but the point ones are free.  So there's often that kind of differentiation.



LEO:  Yes.  But Mozilla has said explicitly, we're not going to do that anymore.  And I think it's Chrome that really drove that because Chrome is pushing - they're up to 11, and they're just pushing versions all the time.



STEVE:  In fact, Chrome's version numbers look a little bit like the U.S. debt clock.



LEO:  They're spinning.



STEVE:  So we had a v5 update for the - only affects the Mac because there were two problems that were found on the Mac.  There was a Firefox v5.000000 problem, where it itself would crash, which they have fixed.  And then they also found a conflict with Apple's own Java for Mac, which could prevent the Java plug-in from loading.  So both of those are fixed.  So only Mac people, if you're on v5, then you may want to fix that.  Or I imagine Firefox is probably bugging you to fix that, which is...



LEO:  Funny, because I just went from 4 to 5.  All right.  Okay.



STEVE:  So in security news there's a new problem on the horizon.  Kaspersky discovered a new trick being played by rootkit malware.  They've got one that they found called 'Cidox."  And we're all familiar, because we've been talking about it now for several years, with so-called MBR patching, the Master Boot Record.  The master boot record is the first sector of the hard drive, which contains a partition table.  And as we have said before, the partition table is a relatively small little bit at the end of the 512-byte master boot record sector.  All of the other space is actually executable code.  And it's that code which reads an entry from the partition table to determine which of the four partitions, typically, is marked as bootable.  And then that code reads the values from that table to determine where the OS lives on the balance of that hard drive.



So this is executable code.  The master boot record is a little program that runs which itself reads the partition table.  So that opening means that you can use that trick for good or for evil.  TrueCrypt uses it, arguably, for good.  That's the way TrueCrypt is able to give us our whole drive encrypted, is that they modify the master boot record to jump to some space in the balance of that first track because, by convention, the first partition of the drive always starts at the end, well, it always started on an even track boundary.  Since we've used, I was going to say "cylinder," but that's not true.  The end of a partition is on a cylinder boundary.  The beginning is at least on a track boundary.  So since we've already taken up one sector of the first track, we can't have a partition on the balance of that.  We start the partition at the beginning of the second track, leaving all of the track free.



So TrueCrypt uses that to install their own little "prompt the user for the password" and "decrypt the bootable partition."  And it also hooks Interrupt 13, which the operating system uses in the BIOS in order to get itself booted just enough to get the TrueCrypt Windows driver, or Mac or whatever driver, running.  And then it gets you going.  That's the happy way of using a modification of the master boot record.  The bad way is what rootkits use now, increasingly, which is they'll install themselves there in order to get a foothold into the operating system and inject themselves prior to it starting up.



Well, it's become so popular that more and more people are checking for it now.  It's more difficult for malware to install itself in that first track of the hard drive by modifying the master boot record.  So they've come up with a new means of gaining a preboot foothold.  And this Cidox malware that Kaspersky found does that.  It takes advantage of the fact that there is a period of time after the master boot record has done its work and loaded the first file of the operating system.  That first file then turns around and begins to pull other pieces together.  But the OS is not booted yet.  There's a lot of work that has to be done before you actually boot the operating system.



This Cidox malware, a new form of rootkit which unfortunately is now going to naturally become prevalent, it recognizes that there's this, like, more opportunity to get up to mischief than just modifying the master boot record.  It places a chunk of its own code in unoccupied space in the NTFS partition.  And it's only able to play this game on NTFS-formatted partitions.  That is, it won't work if your OS was FAT32 or FAT16 formatted.  But no one's is these days.  It's going to be NTFS.  So it puts its code in unoccupied space.



Then it overlays part of what Microsoft calls the IPL, the Initial Program Loader.  And that's the code which parses the Master File Table, which is one of the management tables on an NTFS partition.  The NTFS IPL parses that master file table in order to begin to understand the structure of the disk in order to sort of create a preboot file system interpreter, which is then able to go find the other pieces of the operating system that it needs to load.  By subverting that phase, it's after the master boot record, but before Windows has loaded.  So this code takes the chunk of the IPL that it overwrote, encrypts it, and adds it to the end of itself.  So it's able to get control at that point and load itself in place of one or two of the normal Windows drivers and then continue to do the job that the initial program loader would have done in order to bring Windows up.



So essentially it's subverting a later stage boot portion of the Windows process, which nothing is currently looking for.  So we've got a new means of subverting the system.  And when you think about it, there is.  There's, like, we're sitting around waiting for Windows to boot.  There's a large window of opportunity.  I think, now that this has been done, we're going to be talking about these kinds of things.  And we're going to have to have some sort of new form of protection because just preventing rights to the first track, that's the other thing that's happened is we know that there are BIOSes, for example, which make the master boot record read-only.  They protect that first sector because it's vulnerable.  This is able to install itself even on such systems.



So we're going to have to have a next, in this eternal cat-and-mouse game, a new way of protecting ourselves until the operating system is able then to protect itself because, during the time when the bits and pieces are coming off the disk, it's actually not alive yet.  It's not conscious.  It's just there, just being dead code.  And bad stuff has a chance to get in then.



LEO:  So the kernel protection that Windows 7 64-bit has, for instance, won't stop this.



STEVE:  Precisely.  It doesn't exist yet.  It hasn't...



LEO:  It hasn't run yet.  You need the code to be running.



STEVE:  Exactly, exactly.



LEO:  All right, yeah, it makes sense.



STEVE:  Now, you may have run across this news story.  I saw lots of interest in the media, and also just from our own listeners, about this question that's being raised about whether the court has the ability to compel someone to give up their passwords.  And this turns out to be a constitutional issue.  This is the Fifth Amendment which protects us from having to incriminate ourselves.  A woman named Ramona Fricosu in Colorado is in the middle of being prosecuted by the Justice Department for her alleged role in a mortgage scam.  Fricosu had an encrypted laptop which was seized from her bedroom during a search of her home.  Federal prosecutors want her to decrypt it so that they can see its contents.



Her lawyers argue that compelling her to do so would be self-incrimination.  It would be violating her Fifth Amendment protection against self-incrimination.  The government says that its request is like asking for a literal key for a literal safe that may well contain incriminating documents.  And prior law and Supreme Court rulings have said that you can compel a person to give a physical key to a physical safe.  And apparently the question turns on whether the key is in your mind, whether or not you're able to compel it.



LEO:  That's interesting.  That's really interesting, yeah.



STEVE:  Isn't that interesting?  Yeah.  There was, on NPR, Declan McCullagh, who is [CNET's] chief political correspondent, did some research.  And he said:  "If you have encrypted files, is that like a safe?  You can be compelled, according to Supreme Court precedent, to turn over the key to a safe.  That you can be compelled to do.  But you cannot be compelled to turn over the passphrase, or, that is, the combination to the safe.  So there is existing law that says you cannot be compelled to turn over the combination if it's in your mind, but you can be to turn over the key.  Now, of course the EFF has weighed in.  They've put together an amicus brief to the court with their position.  And they have a blog posting that said that the EFF urges court to uphold privilege against self-incrimination:  "Prosecutors Demand Laptop Password in Violation of Fifth Amendment."  Their blog post says:



"The Electronic Frontier Foundation (EFF) urged a federal court in Colorado today to block the government's attempt to force a woman to enter a password into an encrypted laptop, arguing in an amicus brief that it would violate her Fifth Amendment privilege against self-incrimination.



"A defendant in this case, Ramona Fricosu, is accused of fraudulent real estate transactions.  During the investigation, the government seized an encrypted laptop from the home she shares with her family, and then asked the court to compel Fricosu to type the password into the computer or turn over a decrypted version of her data.  But EFF told the court today that the demand is contrary to the Constitution, forcing Fricosu to become a witness against herself."



And then they said, quote, from their amicus brief:  "Decrypting the data on the laptop can be, in and of itself, a testimonial act - revealing control over a computer and the files on it.  Ordering the defendant to enter an encryption password puts her in the situation the Fifth Amendment was designed to prevent:  having to choose between incriminating herself, lying under oath, or risking contempt of court," all which the Fifth Amendment protects us from.



"The government has offered Fricosu some limited immunity in the case, but has not given adequate guarantees that it won't use the information on the computer against her.  'Our computers now hold years of email with family and friends, Internet browsing histories, financial and medical information, and the ability to access our online services like Facebook.  People are right to use passwords and encryption to safeguard this data, and they deserve the law's full protection against the use of it against them,' said EFF Staff Attorney [Hanni Fakhoury]."  And they said, "'This could be a very important case in applying Americans' Fifth Amendment rights in the digital age.'"



LEO:  Wow.  This is why law is such a fascinating pursuit, because both sides have - there's merit to both ways of interpreting it.



STEVE:  And I love the language:  The act of divulging the password is a test, in itself is a testimonial act.  And so they clearly wrote this to strengthen their position that you cannot compel testimony.  And if revealing the password is a testimonial act, then you cannot [compel] the password to be revealed, which of course we've all talked ourselves blue in the face about encryption and passwords and all that.



LEO:  I thought they could ask for your password.



STEVE:  Yeah, interesting.



LEO:  It's good to know that they, I mean, it doesn't mean they can't ask.  But you have the right to say no.  They may well ask.  In fact, I know they will ask.



STEVE:  And you can say no without being held in contempt and put in jail for saying no.  And that's the point.



LEO:  Right.  It's good for us all to remember.  You don't have to reveal it.



STEVE:  I thought this was really interesting, too.  A buddy of mine in the U.K., Paul Byford, who I know as Sparky in our newsgroups and has been a super great contributor for years, sent me a little blurb from the U.K., since that's where he is, about the News of the World phone hacking scandal.  It's been getting a lot of attention here in the U.S. because the owner of the News of the World newspaper is of course very well known to us.  He's the owner of the Fox Network.



And what Paul picked up on was the nature of the hacking, which is the reason I thought our listeners would find it interesting.  All it was, I mean, this was no big, deep, dark, 007 counter-cyberterrorism-style stuff.  Get a load of this, Leo.  When people were having cellular phone service established, wireless phone service, they had the ability to get their voicemail, not only from that phone, which identifies itself to the voicemail service, but maybe if they wanted to pick up their voicemail, and they were away from their phone, they had the ability to get it from any other phone using a PIN.  And the default PIN was either...



LEO:  1234?



STEVE:  1234...



LEO:  Or the last four digits of your social.



STEVE:  Actually, or 0000.



LEO:  In the U.S., just in case you want to hack some phones, it's very often the last four digits of the phone number itself.  That makes it nice and easy to remember.



STEVE:  Well, of course you would have to know the Social Security number of the person you're trying to...



LEO:  No, not SSN, the phone number.



STEVE:  Oh, the phone number.  Oh, goodness.  So this has been changed.  But for many years the de facto other phone access PIN was either 0000 or 1234.  So all these reporters who worked for the News of the World were doing is, if they were able to get the phone number of the celebrity or state official in question, they would simply hope that that person had not changed their PIN.  And oftentimes they were never changed.  In fact, that feature was never even used because they were always just using their cell phone to get their voicemail from it, and it identified itself to the carrier.



So this is another classic security glitch where I would say this is one of those "disable anything you're not using."  And so if you're not using non-cellular phone access to your voicemail, if in any way possible, disable it.  Otherwise, change the PIN and forget it, forget what the PIN was.  And then it's effectively disabled.  Although there's only, what, 10,000 combinations.  So if these guys, these reporters were really determined, and as far as I know there's no password lockout on PINs for voicemail access, you could just sit there and try them all.



LEO:  It's really an ethical violation more than anything else.  They apparently were also using pretexting and other even more intrusive social engineering techniques.  So this is pretty nasty.



STEVE:  It was bad.  So, Sony, once again in the news for how to completely misunderstand the whole intention of a CAPTCHA.  We've talked about a CAPTCHA, how the idea is it's attempting to determine whether you're human.  And so unfortunately the technology has escalated to the point where it is sometimes difficult to convince the website that you are human.  You are, I am, our listeners are, Leo.  But there are CAPTCHAs where I just scratch my head, and I think, okay.  What the hell is that?



LEO:  You almost feel like, gee, I wish I could have a computer help me solve this one.



STEVE:  I guess I'm not human.



LEO:  Yeah.



STEVE:  So the problem is they've become very difficult.  But the goal is that you don't want some automated machine which brings up the web page sort of in its own belly and then wants to post to forums.  These are used for creating accounts, for posting to forums, for any time you want to prevent spam-ish sorts of behavior.  You create a puzzle which hopefully only a human can solve.



Well, Sony didn't really understand that when they designed the CAPTCHA for one of their professional media websites.  The CAPTCHA functions, in this Sony case, by providing the text which the user's supposed to enter in the page's HTML, which...



LEO:  [Laughing]



STEVE:  Oh, I know.



LEO:  Well, which means it's always the same; right?



STEVE:  Well, no, no, it changes.



LEO:  So they have, like, a choice?  A case statement?



STEVE:  Well, the point is the computer can read that.



LEO:  Yeah.  It is reading it.



STEVE:  Yeah, it loads the page and gets the secret.



LEO:  That's called rendering a page.



STEVE:  Because then what Sony would do is, they used some JavaScript to algorithmically distort the visual presentation...



LEO:  Oh, no.



STEVE:  ...of the text that was already in the HTML, but not visible to the human.  So the human had to go through all the trouble of figuring out what this distorted text was, whereas the computer had the undistorted text that was just in the plaintext, just in the HTML of the page.  And in fact the human could have done a view page, view source, to see it themselves and then typed that in.  That would have been easier than having to figure out what this thing looked like.  So, yeah, Sony, busted once again.  Didn't quite have the right idea there.



LEO:  Boy, it's almost like Sony, like, believed in hiring the worst possible security people.  It's like it's an example of how to do it wrong.



STEVE:  Yeah, I just think they just did it ad hoc.  They just, every instance, they came up with their own solution.  And unfortunately none of them are good.



LEO:  Amazing.  It's like...



STEVE:  So I had a bunch of interesting feedback from Twitter in the last week.  Nate Allen said, "Started reading 'Daemon' on your recommendation.  Amazing book."  Brandon Bodnar said, "Thanks, @SGgrc.  I found my new favorite book on Audible. 'Daemon' by Daniel Suarez is great.  Can't stop listening."  And then he mentioned the domain "thedaemon.com."  And then FuerstOpus, who's a guy in Oklahoma, said, "Re 'Daemon,' for years Gibson Research has been listed as a security link at thedaemon.com.  You may have been a resource for the book"...



LEO:  Oh, yay.  Daniel Suarez is a fan.



STEVE:  ...he tweeted to me.  So I thought that was an interesting kick.  @mStyle, whose name is Robert Altman, said to me through Twitter @SGgrc, he said, "300 hours and still going.  SpinRite at 58% complete, 7 not completely recovered sectors, 1 unrecoverable.  SpinRite is amazing.  Nothing else would touch this disk."  So, nice to have a little feedback.  It is making some progress.  And I guess if he's willing to wait for it, it's better than not having anything else be able to recover it.



Troy P. Peterson tweeted that Chrome now blocks insecure scripts on HTTPS by default, and gave a link to a Google blog post.  And that's interesting.  I checked it out.  What Chrome was doing, Chrome has essentially upped the ante on protecting users from themselves.  We've all seen sites that give us what's often called a "mixed content message," where, for example, your HTTPS is in the URL, so your main page content was delivered over SSL securely.  But then, as we know, a page almost always contains links to other assets, which your browser then, after parsing the page which came in over SSL, the browser then looks up all the other things - images, other bits and pieces, and maybe script, maybe JavaScript - which it then brings in.



So it used to be that until Google strengthened Chrome in this way, if any other fetches from the page were HTTP, that is, not over SSL, you'd get a little warning that said there's some things on this page that are not secure, do you want to proceed?  Most users just click right through that, saying, yeah, well, I want the page, and right now it doesn't look so good because I'm not getting the rest of my stuff.  Well, one of the things that could be delivered was the page's script, which as we know is very powerful.  And if the page was delivered securely, we absolutely want the scripting content to be delivered securely.  So Google Chrome, as of this most recent update, no longer even gives us the option of saying, go ahead, I want insecure scripting.  If the page is delivered secure, Google will now block nonsecured scripts from being delivered, which, again, that's another nice step forward for Chrome.



Paul Morgenthall, who is on Twitter @fuzzymuzzle, said instead of a plus sign - he's referring to Gmail, adding names to Gmail that we've referred to recently.  First it was suggested, then it was de-suggested because the plus sign confuses so many email clients.  He says, "Instead of a plus sign, add dots to a Gmail address."  So it turns out that works.  And he gave a few examples.  He says it's less descriptive, but always accepted.  And what's interesting is that it's only embedded dots.  So, for example, you could add dots anywhere within, like, between the first letter and the last letter of your Gmail address.  And you can even multiple dots at a time, and they're just discarded.  I mean, it doesn't create a unique account.  And so that is a way to add accounts to Gmail and then to provide some discrimination that a user can generate ad hoc.  And as we know, there's lots of ways you could salt dots in between the letters of your email address, depending upon how many letters you've got.



LEO:  It's fundamentally different, though, because the dots are ignored.



STEVE:  Right.



LEO:  Anything after a plus is ignored.  So there's a difference there.  And, yes, you have to use some sort of cryptic combination of dots to modify your email.  With a plus you could actually use a descriptive word...



STEVE:  Which would have been very nice.



LEO:  Yeah.  And I'm surprised.  I would think any modern email system would ignore whatever's after the plus.  But I'm not - not email system because it's not the email system.  It's always going to Gmail.  It's the site that you're giving this email address to that doesn't like the plus.



STEVE:  Actually, it works several ways.  There are actually, from all the feedback that I got, there appear to be email servers that to this...



LEO:  Oh, that will reject the mail, I get it.  They won't pass it on.



STEVE:  That to this day, yeah, they just won't forward it.  They go, this is not - I mean, and these are dumb.  But unfortunately it's what we're dealing with today.



LEO:  I've used plus for a long time, and I haven't run into anything.  But in most...



STEVE:  Oh, that's interesting.



LEO:  ...cases when I use it, it's on a site that I don't care for their email anyway.  So, I mean, I may be missing something and not know it.



STEVE:  And finally, a very good security tip from Dale Perkel, who is DeepPurple77 on Twitter.  He said, "A great tool for security people, Qualys BrowserCheck, shows which plug-ins have security issues."  So this is, it's browsercheck.qualys.com.  So browsercheck.qualys.com.  And I put it into mine, and it wanted to install a plug-in.  It's like, I don't think I'd want to do that.  But it also allowed me to perform a quick scan on the spot, and it found three things, three Firefox add-ons that I had that were not - that it said were not secure.  And not surprisingly, two of them were Adobe, and so there were newer versions of both of those.  So it's like, oh, hey, this is good to know.  So browsercheck.qualys.com.



LEO:  I'm not familiar with that.  I'll check it out.



STEVE:  I wouldn't be surprised, my friend, if it pulls up some red marks.



LEO:  Uh-oh.



STEVE:  And I did want to share, oh, I wanted to share two things.  First of all, a bunch of our listeners, I was really pleased and impressed, a bunch of our listeners volunteered to pay for that copy of SpinRite that Ryan McCain got from me for free after the horrible Katrina event that he and his family suffered.  And, I mean, I don't need anyone to pay for it.  I was more than happy to let him use a copy of SpinRite for free.  But I just wanted to thank all of our listeners for their kind thoughts and sentiments.  And it was quite an outpouring.



LEO:  And I was not surprised to hear it.



STEVE:  Yeah.  And Russ Palmeri said, "Dear Steve, please add my name to your long list of happy customers.  My laptop, which I need tomorrow to teach my anatomy and physiology class, would not boot up properly.  It took 20 minutes to get to my desktop, and everything I tried to do had a three- or four-minute delay.  The computer was unusable.  I called Dell, and the tech walked me through the Dell diagnostics.  The hardware all passed, including the hard drive.  I was unable to use System Restore.  It crashed.  The next step was to reinstall Windows and, of course, all my programs."  And actually, Leo, that wouldn't have worked, either.



But, he said, "Fortunately, my data was backed up, mostly.  Still, I had hours and hours of drudgery before me.  Before taking that drastic measure, I thought I might try the SpinRite utility.  To be honest, I bought SpinRite as a way to thank you for your outstanding Security Now! podcast which has brought me so much enjoyment.  I was afraid it might require more expertise than I had to run it.  But the program is very well designed to guide the user through the necessary options.



"I booted up from the SpinRite CD and went to the recovery choice number two.  Then I left it alone.  I came back later and saw one of the sectors was bad.  SpinRite had fixed it.  SpinRite chewed on that for a bit and then was finished.  I booted up without the CD.  Windows ran chkdsk by itself, and up came my login immediately.  My laptop is now working perfectly.  When I took math in college I learned that some theorem proofs are so beautiful, they're called 'elegant.'"  He said, "Well, SpinRite is an elegant utility.  It sure saved me tonight.  Thank you so much for Security Now!, and thanks for SpinRite.  No one who owns a computer should be without it.  Russ."  So thank you very much, Russ.



LEO:  Thank you, Russ.



STEVE:  And of course I agree.



LEO:  What a surprise.  All right, Steve.  We're ready.  How doth the Internet work?



STEVE:  Our listeners have been patiently waiting for 48 minutes, while we've caught them up on all of the news of the week, about what are the three key concepts that I would argue everything about the Internet is based on.  These were new at the time.  And really they were so radical that it was - it didn't necessarily surprise the engineers when these things worked.  But, boy, it would surprise them today that they are still working.



And that, I think, if there was anything I would say which demonstrates the power of getting it right, it's the fact that the Internet, the fundamental core of the Internet is virtually unchanged since it was first conceived of and brought up to speed.  Leo, we don't have any computer technology that is, I mean, maybe hard drives are still around, and they have matured dramatically, I mean, so that they're unrecognizable, essentially, like in terms of density and so forth.  You could not use today a hard drive from that era because those were disk packs that looked like washing machines.  I mean, so I wouldn't say that stayed the same.  But these three key concepts are the reason the Internet is the Internet and has survived.  Virtually, these are unchanged.  One is packet routing.  The second is best effort is good enough, which is a huge breakthrough concept.



LEO:  Yeah, I love that.



STEVE:  And the notion of a protocol hierarchy, that is, a very careful and clear organization to the structure of the data that moves across the Internet.  So we're going to look at each of those three in turn.



When the Internet was being created, when it was being designed, the way computers were interconnected was called either a "leased line" or a "switched circuit."  But both of those worked the same way.  A leased line was simply a connection which you leased typically from your long-distance carrier that I think even back then was AT&T or Bell.  And, for example, the major government institutions and our military complex and educational institutions, where they had, I mean, they were bringing big computers online, and they were wanting to interconnect them.  So they used leased lines, point-to-point circuits.  They were typically 64K baud was the operation speed of these things, so not super fast, and generally reliable.  But the whole concept was a point-to-point circuit.



So as the number of computers increased and the computers wanted to interconnect to each other, it became increasingly expensive because these circuits were not inexpensive, and they were also cross-country in many cases - Stanford wanting to connect to MIT.  And there was a Stanford-MIT connection that tied their machines together as we were sort of beginning to experiment with networking.  And of course all of us old-timers remember AOL and CompuServe, The Source...



LEO:  GEnie, The Source.



STEVE:  Exactly.  And these were point-to-point connections.  Somewhere there were massive banks of modem pools, and all of our machines had modems, and we used our phone line to dial into these services in a point-to-point circuit, to create a point-to-point connection from us to them.  And that's the only thing that circuit was doing during this time.  It was dedicated to us.  And of course that caused problems when somebody else wanted to use the phone.  Oh, I'm on the computer.  So you had to wait.  And you also had to suppress three-way calling because, if another call was coming in, it would briefly disconnect you and then drop your connection.  We remember those days, as well.



So, I mean, so the system worked.  But it was not efficient.  All of that was called a "switched circuit approach."  So it represented a fundamental rethinking to say, wait a minute, instead of creating discrete point-to-point connections between everything, we're going to break these connections up into packets of data.  There was no notion of a packet.  That didn't exist.  You established a connection, and you put data - whatever you wanted to - in one end, came out the other.  So there was no packetization.  There was no discrete packaging.  So that was a conceptual breakthrough.



And then what happened when you had packets was you thought in terms of sharing resources.  And that's, when you think about it, that's really the big difference in the Internet is, you know, a cable modem is hooked to a cable which is a shared resource.  Lots of people in our neighborhood have their cable modems hooked to the same, physically the same electrical connection, and we share that resource.  All of the high-speed links we have now running around our cities and interconnecting our cities are shared resources.  And so it's this sharing which you can only get if you drop this notion of a point-to-point switched circuit, and you somehow allow a mass of data to find its way among the shared linkages.  That's this fundamental rethinking of the way data gets moved from one point to another.



So the routers which exist at various points throughout this internetworked architecture and the links between the routers are being shared by all of the data which moves across them.  And they're sort of a - they're owned by different organizations which end up being compensated for providing the resource and the bandwidth links, so that the system is self-sustaining.  But it's also - it sort of changes the dynamics because the second part of this huge revelation in the way we interconnect our computers is the concept that "best effort" is enough.  And that was a huge one because, when you used to have this whole switched circuit, this whole point-to-point thinking was you needed the link to be up and the link to be reliable.  And anything, as long as it was up, anything you put in one end came out the other.



But the designers of this packeted approach, instead of just having literally like a phone conversation which is continuous, they chopped up the data into packets and weren't even sure what route it was going to take.  We'll be talking about routing extensively in a future installment of this "How the Internet Works."



But the idea was that instead of this continuous connection, you packetized, as I said, and then sort of launched the packet off and hoped for the best.  The reason you have to hope for the best, the reason there isn't a guarantee - and this, again, it's like, if I can try to convey the incredible change of thinking that this took, is that you have a router that will be connected to a number of other routers, and those routers are connected to a number of other routers.  Well, each link has a bandwidth which it's able to move data.  And they don't all have to be the same.  You could have some high-bandwidth links and low-bandwidth links.  Especially in the beginning, it was a very heterogeneous, you know, all things were different, network that was built.



So packets, these individual packets of data are arriving across some links to routers that then inspect them - and we'll be looking in detail at how that happens and what it means - and then determining where they should be sent or forwarded to.  But you have a fundamental problem because what if, for example, more packets are coming in than the router is able to send out?  Because that could happen.  You could have a burst of packets coming in over one or more high-speed links which are all saying, we want to go out over there, out of a low-speed link.  But the router can't send them out at the same rate that it received them in.



So, I mean, and there were people arguing in the beginning, well, this won't work.  Obviously this is crazy.  And so the engineers thought for a while, and they said, well, we'll put some buffers in the routers, and packets can wait in an outgoing buffer until there's time.  So that sort of - that solved part of the problem because, if packets came in in bursts over the high-speed link into a router, it would check each one and assign them to their outgoing interfaces and put them in a buffer to be sent.  And so the interface hooked to the link that's going to some next router, it would have a buffer that could hold a certain amount of data.  So that could solve burstiness problems, where high-speed bursts could come in and then queue up in this outgoing buffer on its way to the next link.



But what if you just kept getting a lot of more data in than you were able to ever squeeze?  I mean, the buffer would have some finite capacity.  So it was entirely possible - and again, this is the genius of the designers.  They said, if the outgoing buffers overfill, if the buffer is full so it cannot accept a packet to be forwarded, we're just going to discard it.  We're going to say, oh, well, too bad.  So, and again, during the negotiation of this technology, the people said, well, wait, what do you mean?  You're just going to throw that away?  But we sent it.  And the designers said, yes, we know.  And...



LEO:  You did your best.



STEVE:  You did your best.  We're sorry that you sent so much and that you were trying to squeeze it through a link that couldn't take it.  But after all, I mean, if there was that link that couldn't take it, you wouldn't have been able to send that much in the first place, if it was over a switched circuit.  The problem was, you would know, the sender would know what the speed was that the router was able to, like the slowest link in the chain, the sender would know not to send too much.



So in this system, the system simply dropped packets.  It doesn't even notify anybody.  And that was another conceptual breakthrough because some of the original designers said, wait a minute.  If we're going to drop a packet, we need to send a message back saying we just, you know, sorry about that.  And the smart people said, no, no, no, that'll create more problems because, if we've got a network that is congested, and so that we're having to drop packets, the last thing we can afford to do is generate more packets to send notifications back.  The system has to work blind.  And that made some people's heads explode because...



LEO:  Engineers, you know, are going for 100 percent, perfection.  And this is kind of accepting imperfection.



STEVE:  It was designing imperfection.



LEO:  Yeah.



STEVE:  I mean, and this is - what I'm describing is the way, is what we have now.  And you and I are talking to each other over it, Leo.



LEO:  Yeah, it works okay.  Good enough is good enough.



STEVE:  And so what's incredible is that, based on that foundation, based on the concept of taking what used to be a continuous connection, a continuous, reliable connection that worked at a known speed, they were able to just heterogenize this thing into chopping the same data up into pieces and launching it off and hoping for the best, literally hoping for the best.  And that packet would travel through these links that interconnected routers, and maybe it would get to the other side.  We are not sure.  And we do know that, if a router's interface, its outgoing buffer was overfull, the router had formal, sanctioned permission to just drop it.  Just let it go.



So this concept of best effort was a massive breakthrough.  Clearly it had to be part of the solution of packet routing.  And the question then was, okay, how do we get guaranteed connections, I mean, because what if we have to send a file?  We just can't have bits and pieces of the file missing.  That's no good.  And if we're not going to get an acknowledgment, if we're not going to get, like, from the person who dropped the file bit as it was moving by, if we're not going to get them to tell us something, then we need some means for getting the recipient to notice that, wait a minute, I've got some missing pieces here.



And so that we will cover when we talk in detail about the so-called TCP, the Transmission Control Protocol, which was built on top of this seemingly rickety framework.  And it works.  We know it works.  We use it when we get web pages, and we don't have bits and pieces missing from web pages.  But the third thing that enabled a reliable protocol to be built on top of an unreliable protocol, this notion of even building something on top of something else, it was this notion of a hierarchy.  And I would state that that's the third piece of brilliance.



We have packet routing, the concept of breaking up our communications into individual pieces and hoping for the best, and thus "best effort" is all we need by the nature of a heterogeneous network of interlinked routers with links that are coming up and down, people, you know, routers may just be taken out of service and might not be there, we might be upgrading it, who knows what's going on?  Somehow the data needs to get through the best it can.  And best effort is all we can provide.



And so the designers said, if we're going to go packet routing, all we can do is hope.  And but then they created a protocol hierarchy which is the third piece of genius, where you inherently have a carefully designed set of encapsulated protocols.  For a non-engineer, it's a little tough to visualize.  But the best analogy is we've all seen, for example, those nested dolls, the Russian dolls?



LEO:  Babushka dolls.



STEVE:  Exactly.  You've got a big one, you open it up in half, and there's another one inside.  And you open that up, and there's another one inside.  And you open that up, and there's another one inside that, and so forth.  Well, that is exactly how the Internet protocols were built.  Had they not been inspired, as they were, they could have just said, okay, well, we're going to have some sort of protocol, some agreement of, like, how to make this reliable and how to just simulate right off the bat a point-to-point connection the way we're used to having.  I mean, they really liked this switched-circuit, point-to-point, leased-line style.  That's the way all their hardware, that's the way everything, all their assumptions were based on that.  So it was not easy to give that up.



But they said - so you could imagine that they could have immediately tried to recreate that from these random sort of loosely organized arriving packets.  But they were smarter than that.  They said, no, the base layer, the only thing we're going to do with the lowest level protocol - and again, the words I'm using are just habit because this is just the way we think now.  But they weren't habit back then.  There was no way to think about this.  But so they said, all we're going to do to start with is address the packet to its destination.  We're just going to say this blob of data wants to go there.  And so that's all we're going to say.  And we're not going to know if it got there or not.  We have this crazy new network concept which is going to try to deliver it to its recipient.  But maybe it'll get there or not, and we're not going to know.  We're just going to create this thing, give it an address - oh, we're also going to tell it where it's from so the recipient could send something back to us.  But nobody along the way is going to care.  They're either going to send it to its target IP, its destination Internet Protocol address, or they're just going to drop it, the routers along the way.



And so that essentially is the IP protocol.  The Internet Protocol, called IP, is this packet, also known as a datagram.  And it contained four bits.  I think that was interesting.  I mean, they were - bits were expensive.  Bandwidth was expensive.  Everything was expensive.  These routers were tens of thousands of dollars, not what we have now, things in the stationery store, for 49 bucks you could buy a router.  I mean, this was heavy-duty equipment.  And the bandwidth was still limited.  I mean, even when they had links between routers, well, those were 64k.  So it's not like somehow bandwidth was a gift of this system.  If anything else, there was some overhead from all of this crazy packetizing and routing because now they had to have addresses.  They didn't have to have addresses before because they were connected to who they were talking to.  No more are they connected.



So there's overhead associated with this approach because you now have addresses for these bits and pieces.  So, for example, the version number of the IP protocol, there were a number of bytes at the beginning of the so-called datagram.  The least you can have is 20.  So they only had 20 bytes that were available to deal with the mechanics of getting this packet somewhere else.  So they didn't want to waste bits.  Consequently the version number is just four bits, four-bit version number.  And zero, one, two, and three were used up before the Internet really happened.  And so v4 is what finally did happen.  And we've been using v4, most of us are still using it today.



And as we know, IPv6, v6 is coming along.  And so in IP datagrams, almost all of them have, in those first four bits, they have a binary 4 in them.  But increasingly, and in the future, there will be a 6 in there which will tell any equipment which receives it what the rest of the header looks like.  And that's the other key.  This IP datagram, this IP packet's version bits, they're the first four, and they have to be.  So the very first four bits that arrive tell the equipment the format of the rest of the packet.  That is, is this an IPv4 packet, or is it IPv6 or IP something else?  So the designers, they took these 20 bytes.  We know that four bytes, 32 bits, is for the destination IP.  And another four bytes is for the source IP, the IP address that it came from.



Now, at this level, there are no - there is no notion of a port.  That's an abstraction which was added by something that this packet contains, that is to say, by a higher level protocol above the IP protocol.  The IP protocol, this lowest level one, is - all it's designed to do is take its payload, whatever it is, and it could be anything, in fact, that's one of the reasons, for example, we've talked about tunneling IPv6 over IPv4.  This is the power of the genius of these original designers is they said, we don't know what our payload is going to be.  We don't care.  But so we're going to be very careful about not putting stuff in here that we ever have cause to regret later.



And I would say they did a perfect job.  A couple fields have been redefined over time, but only sort of just shifting meanings of them, and not very much.  The system as a whole has been just incredibly robust.  And so, for example, if you're tunneling IPv4 or IPv6 over IPv4, what that means is that this ubiquitous universal IPv4 packet whose first four bits have a binary 4 in them, and all it contains then is IPv4 IP addresses, and some other housekeeping information, like a checksum and an indication of a total length of the whole packet, and also the length of the header.  There's some additional stuff, but not very much.  It's really a lean technology and protocol.  That packet can contain anything else.  Even a different IP version could be contained, IPv6, for example, contained in an IPv4 packet.



So that gives you a sense for, because these guys were so careful with the way this system was designed, with the way they thought this out, we've ended up with a set of technologies which for decades has survived virtually unchanged.  And those three concepts that were going to drop this concept of a continuous connection in favor of chopping that same data up into pieces, adding some addressing information so that it can get where it's supposed to go, but then just turning it loose and hoping for the best, where we've got a bunch of well-intentioned routers that are all interconnected in a huge mesh, and each router will just do the best job it can to forward the data out of the interface which best takes this packet of data toward where it's trying to go.  And so the router needs a routing table that we'll be talking about in the future to help it determine where it should be sent.  And then this concept of, well, if the router can't do it, it just drops it and says nothing, doesn't even indicate that it dropped the data because that would create more problems if dropping data created data.  So because the only time you would really drop it is in a time of congestion, so you don't want to generate more at that point.



Then, finally, this notion of a very careful protocol hierarchy, this nested - it's a nested hierarchy where one protocol contains the next one up the chain, in the same way that the Russian dolls contain each other.  And with each wrapping you're only providing the information you need to.  So, for example, just to give you a sneak peek of where we're going to go in a week soon, the UDP protocol, or the TCP protocol, which do bring for the first time the notion of a port abstraction, they have port numbers in their protocol, but no IP addresses because that's provided by the wrapping protocol, the IP protocol, that knows about IP addresses but not port numbers.  And in another example of the beautiful economy of this, there's another protocol that we'll talk about, ICMP, which is people are...



LEO:  Ping.



STEVE:  Exactly, is ping and traceroute and is sort of like a maintenance plumbing protocol.  Well, ICMP is different from UDP and TCP and, similarly, is not port oriented.  So it doesn't have source and destination ports, yet it's able to be carried by the IP protocol which knows about IP addresses.  So by carefully designing these nested layers of protocols, we end up with a system which is efficient and lean, and also very flexible, where over decades it has survived and, because it was so carefully designed, it's been extensible into the future.  And as we know, we've got a big change coming along with IPv6.  And we'll certainly be talking about how that relates to IPv4 as part of our ongoing series on how the Internet works.



LEO:  Very interesting stuff.  And I love it that you synthesized this into the three kind of key concepts because, I mean, I know all of these little bits and pieces.  I've heard them over and over again.  But really it helps you understand the decisions that were made by the guys who designed this stuff, and why.



STEVE:  Oh, yes, and to free themselves from the shackles of, oh, I mean, that's a huge conceptual leap.  And then to say,  well, but here, I mean, but wait a minute, maybe the packet can't get there.  It's like, yeah, maybe.



LEO:  Yeah.  And then, and so what?



STEVE:  Yeah, but they didn't scrap it because of that.  They said, well, maybe we can make it work anyway.



LEO:  But that's how you make a robust system; right?



STEVE:  Oh, yes.



LEO:  It's really quite clever.



STEVE:  Yes.  In fact, that's a very good point, Leo.  The fact that they knew that by design some packets might not get through meant they had to design for that.  So there are, because there are many other reasons packets might not get through, not just a buffer overrun in a well-meaning router, but the router could crash.  The link could go down.  I mean, all kinds of unanticipated things other than just a buffer overrun could cause the same effect.  And the robustness that they built in by design ended up making the entire system robust. That's just so cool.



LEO:  "Elegant" is the word that comes to mind.



STEVE:  Yeah.



LEO:  Steve Gibson is the man in charge at the GRC, the Gibson Research Corporation.  You can follow him on the Twitter, @SGgrc.  You could visit his site, GRC.com.  If you want to leave questions for next week, because we'll do a feedback session next week, GRC.com/feedback.  But also you'll find there the show itself, the audio, 16KB versions, too, for the bandwidth-impaired, transcripts, if you like to read along with Steve.  And I think for this one that would be a good thing to have, if you're studying up.  This is the kind of thing that really would make great study material for somebody in an engineering class in college.  It's like a great study guide, and you find that at GRC.com, along with Steve's many freebie products, his pro bono work, and of course his bread and butter, SpinRite, the world's best hard drive maintenance utility.  It's all there at GRC.com.



We do this show, when there's not World Cup action, at 11:00 a.m. Pacific, 2:00 p.m. Eastern.  I was a little late today because I couldn't - I had to watch the semifinal of the FIFA World Cup, the women's World Cup.  But 11:00 a.m. Pacific, 2:00 p.m. Eastern at live.twit.tv every Wednesday.  And of course if you miss the show, don't worry because you can always catch the download.  We have audio and video available, not only on Steve's site, but at TWiT.tv/sn.  Sierra Nancy.  That's not right.  Sierra November.



STEVE:  Leo is becoming a ham.



LEO:  I am a ham.  I've been a ham all my life.  But now I'm going to have a license, license to ham.  Steve, thank you so much.  And we'll see you next week on Security Now!.



STEVE:  Thanks, Leo.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#310

DATE:		July 21, 2011

TITLE:		Listener Feedback #122

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-310.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 310, recorded July 19, 2011:  Your questions, Steve's answers, #122.



It's time for Security Now!, the show that covers your, yes, your, yes, your security and privacy online.  And what better person to do it than this cat right here, Mr. Steve Gibson of GRC.com, the Gibson Research Corporation, creator of SpinRite, world's finest hard drive maintenance and recovery utility, creator of many free utilities for us all, in the realm of - hey, Steve, how are you?



STEVE GIBSON:  Hi, Mom.



LEO:  Hey, hey, how's it going?



STEVE:  And we also talk about other people's security, or lack of.



LEO:  Yeah.



STEVE:  As it bears on us and our Internet experiences.  And this week we've got a Q&A, our hundred and secondy second.



LEO:  Secondy second?  Sounding like Bilbo Baggins here.



STEVE:  120nd.



LEO:  My hundred and secondy second.  Actually I'm excited because this is our last Security Now!, should all go well, from the TWiT Cottage.  Next week we will be doing this show - I think, I hope, well, I think we have to...



STEVE:  In your new digital studio.



LEO:  Yeah, in the new studio down the road in the TWiT Brick House.  I think we have to because I think that Sunday - and you're coming up, by the way, thank you so much.



STEVE:  Yeah, that'll be a blast.



LEO:  The grand opening of the Brick House is this Sunday, July 24.  We're going to do a special live TWiT with four of the earliest TWiT cast members, all four of whom appeared on the original Screen Savers.  And I think when you get in the studio you'll see why I wanted that crew because it really feels and looks like the Screen Savers.  Steve Gibson, John C. Dvorak, Kevin Rose, and Patrick Norton will be in the studio with us at the new TWiT Brick House this Sunday.  And then the following Wednesday we will do Security Now! as we usually do.  What is unknown is whether we'll be in my office, because you know we built a duplicate of this studio.  But I don't know if it'll be ready yet.  If not, we'll be at the roundtable or somewhere.



STEVE:  Or any of the new multiple venues you have in this amazing new creation of yours.



LEO:  Oh, it is so gorgeous.  I just can't wait till you see it.  No onscreen webcam or pictures do it justice.  Wait'll you see it live on video.  You'll flip your lid.



STEVE:  Have we ever talked about, or recently talked about the URL, so that our non-live listeners could tune in and just see the webcam of the studio as it's being built?



LEO:  No, let me give it to you.  Because, I mean, it's not super high quality.  It's a drop cam.



STEVE:  But it's better than nothing, which is what a lot of people have right now, probably.



LEO:  Right, and it's live, which is kind of fun.  I think right now, let me just check, but I think right now there are people measuring for stuff.  If you go to bit.ly, it's a shortened URL, bit.ly, bit.ly/twitdrop, you could see what's going on over there.  And it looks like there's - oh, oh, the red - a few of the final touches are coming.  These are the - these red kind of arches go on the metal arches.  These aluminum arches, we've been waiting for those.  I think there's a logo that's going in my office.  I can see, you know, they've covered - this is the switcher here.  They've covered that up to protect it.  Last night John and Burke and Colin were all at the studio well past midnight setting up audio.  And apparently John's got it all done, which is fantastic.  We used that IP-based audio solution from Telos, the Axia, which is spectacular.  But it does require a considerable amount of setup, you know, you have to - once you program everything in, though, it just is a button push to change configurations.



STEVE:  What are those wacky things that you've got the arches terminating into?  Looks like sort of some little droid sort of...



LEO:  Isn't that funny looking?  You know what they really are is Rubbermaid tubs painted copper.  But don't tell anyone.



STEVE:  How fun.



LEO:  And they've made some lids for them.  The idea was to kind of have some sort of termination point in there.



STEVE:  Yeah.



LEO:  Roger, our set designer, Roger Ambrose just is an artist.  He really is an artist.



STEVE:  And what's covered up there in the foreground?



LEO:  That's the switcher.  This is where the...



STEVE:  Oh, my god, that's like some big, like, studio desk kind of thing.



LEO:  You'll feel like you're at the bridge of the Enterprise.  You're Mr. Sulu sitting here.  Everything is there:  the audio mixer, the light mixer, the TriCaster mixer for video, all of the Vidyo connections.  By the way, we'll be using Vidyo, not Skype, although we'll have that capability, as well.  The screenshot station, too.  One person will be sitting there.  And that rotates.  It's covered up, obviously.  But that rotates to point to whatever set we're using.  So you could be facing...



STEVE:  How do you get all the cables into it?  Do they come in down from above?



LEO:  Well, this is the most amazing thing.  This building, it's as if this building were designed for what we're doing.  You know, a lot of studios have - a lot of electronic installations generally have raised floors.  You know the old IBM mainframes, they'd have a raised floor, and all the wiring would be under the floor.  Well, this place has essentially a six-foot raised floor.  It's our basement.



STEVE:  And you can drill holes through it?



LEO:  We drilled holes all over this floor.



STEVE:  Oh, my god.



LEO:  Every desk, every set, everything has a hole drilled through the floor going down.  And so all of the noisy, hot electronics for the mixer, the lighting board, the audio, the video, the Skype even, the Skypesaurus, Skypesaurus, everything are underneath the floor here.



STEVE:  How cool.



LEO:  It makes it so easy.  And it's so much...



STEVE:  And it's concrete flooring?



LEO:  No, it's just a wood floor.



STEVE:  Oh, okay.



LEO:  You'll see when you - I'll give you the grand tour, of course.  In fact, when we get over there we'll have a live camera, and we'll go all over the place, show everybody what we've done.  But having that in the basement is huge.  It makes it so pleasant and quiet upstairs in the studio area because all the noisy hot stuff is downstairs.  We're building an enclosure for it and an air conditioning system, as well, so it won't overheat down there.  Although it's pretty cool.  It's a basement.



STEVE:  Wow, how neat.  Well, so bit.ly/twitdrop...



LEO:  Yup, that's what you're seeing right there.



STEVE:  ...will allow our listeners to take a look at what's going on at the studio, those who haven't been watching live.



LEO:  Live and in person.



STEVE:  Nice.



LEO:  And it's, you know, we've also done - John has been doing this whole time, for six months now, a time lapse.  So there will be a massive, probably a five-hour movie, the making of the TWiT studio.



STEVE:  With everything like - oh, there's a big red beam moving right now.



LEO:  Yeah.  So that's going to go on these arches.  Those are going to go on the arches to - the arches are very aluminum looking.  These are actually lighting trusses.  And so to make them look a little more like the Golden Gate Bridge, kind of, this is all International Orange, kind of to make it more structural and less aluminum-y, we're putting these facades on top of them.  And it really - just wait till you see it.  It's kind of hard to describe how beautiful this is.  But the time lapse will really do a great job because you'll see it go from just a boring kind of office with drywall to this.



STEVE:  Yeah, you're going to want to do, like, a formal introduction to the studios that you can post on, like, statically post.



LEO:  Absolutely.  We have - well, yes.  We have lots of plans for making of, how we did it, all that stuff.  Because you know me, I don't like to keep anything a secret.  I want everybody to know how you do it in case they want to do it, too.  First thing, get a really big bank account.



STEVE:  And not be in a big hurry.



LEO:  And then, yeah, not have a deadline.



STEVE:  Yeah.  In fact, I just - I corresponded with Eileen this morning, saying, okay, is this really happening on Sunday?  Because I built things once, and I know that schedules are subject to change.



LEO:  It has to.



STEVE:  Yeah.



LEO:  It has to.  We printed stickers.  With the date on them.  It has to.



STEVE:  Cool.



LEO:  I said this a couple of weeks ago.  I said, you know, we've printed stickers with the date on them.  This is going to be humiliating if we don't actually move on that day.  And Lisa said, no, no, we're going to move on that day.  And you know what?  I think we are.  I don't know who this is, here.  That's just - he's standing where the ham station - you know we're going to have a full AM radio station, too.  I kind of went overboard.  Stop me.  Somebody should handcuff me before I spend again.  All right, Steve.  We've got to do a show.



STEVE:  Let's do a show.



LEO:  So let's get Security Now! underway.  All right, Steve.  I guess, as always, we need to start with security updates.



STEVE:  Yes, we do.  This is a little more of an old-style Q&A inasmuch as we don't have a ton of news this week.  But I've back-loaded us with lots of questions.  We've got a full 12 useful and interesting questions.  I had time to go through, and some of the earlier ones that I chose I found better ones for them.  So I think we've got a really great podcast with a little bit of news and a bunch of miscellaneous stuff.  But mostly a Q&A that's actually Q&A this week.



LEO:  Well, I love it.



STEVE:  The real only significant, worth mentioning update I ran across wasn't even PC.  It was for iOS.  And I'm sure you have already tuned into this, since this was on Friday of last week, that Apple released v4.3.4 of iOS for all of their iOS-based devices on the AT&T platform.  The Verizon CDMA customers get updated to 4.2.9.  Users will want...



LEO:  I was afraid of this kind of forking.  That's really too bad.



STEVE:  I know.  Users will want to update, though, because this fixes three critical problems that involve, well, or include a PDF rendering flaw which was announced by a hacker, Comex, as a slick means of jailbreaking iOS devices.  Well, it's one thing if a user deliberately loaded a PDF, which is what this is.  This is a PDF rendering flaw.  Now, this is not something we can blame on Adobe, for a change, because this is Apple's own PDF code.  So the moment that Comex introduced this concept of jailbreaking via PDF - which is very convenient for users who want to jailbreak their iOS devices, of course, that's not something that Apple wants people to do - Apple announced that they would quickly be addressing this, so they have.



The risk is, though, that people who don't update could have this PDF flaw leveraged against them.  Just by visiting a website or viewing a document which they don't think is malicious, they could have their device taken over.  So everyone wants to update, anyone who's using iOS devices.  In fact, I tried to do that before the podcast, but it told me it was going to take 30 minutes, and we only had 15 minutes to go before you and I got online.  So I scrubbed it after I saw that, and I'll do my updates after we're through.



LEO:  I have this bad habit of, as soon as I see an update, even if I'm beginning a show - but I didn't.



STEVE:  Yeah, and that can bite us when it's a 600MB Mac OS update.



LEO:  Takes a while.  We got Lion is supposedly coming out tomorrow or the next day.



STEVE:  Yeah.  And I have to say, one thing that Microsoft seems to have done right, maybe just because they've had much more time to do it, is their updates are smaller in size.  Apple seems to just replace the whole OS every time they do a major update.



LEO:  Well, actually this is something supposedly they will fix in iOS 5.



STEVE:  Ah.



LEO:  Yeah, that they're not - they're going to have delta updates as opposed to - in fact they do give you the full firmware each time.



STEVE:  Right.  So the only thing I had, and I don't really have any information about it, but I got a bunch of people saying, oh, Steve, are you going to talk about the fact that LulzSec, our Lulz Security folks, hacked The Sun newspaper in the U.K. and put up their own content on the site, which was embarrassing for the paper.  And so it's like, okay, well, I'll mention that.  But...



LEO:  Even more embarrassing, frankly, for the British television newscasters, who said, "Well, it looks like The Sun's been redirected to 'We're in it for the Louise.'"



STEVE:  Exactly.  Okay.  And I did tweet something earlier in the week that a lot of people retweeted because I thought it was interesting.  And this was a - it was picked up by ReadWriteWeb, which had a snapshot of a Forrester research survey that showed that Windows XP still powers 60 percent of corporate desktops.  And it also showed Apple making a small gain.  I have the link to that...



LEO:  It could have been worse.  It could have been Windows 98.



STEVE:  Yeah, it could have been.  And so I'll just read a little bit from this.  It says, according to a new report from Forrester - and I tried to go there, but they want some thousands of dollars for it.  So I thought, well, okay, I'll just cite what ReadWriteWeb had rather than trying to talk Forrester out of a copy.  "According to a new report from Forrester, Windows 7 is now in use on 20 percent" - okay, 20 percent only - "of corporate desktops as of March 2011.  Windows XP still holds onto 59.9" - rounded to 60 percent - "of the enterprise desktop world, down from 67.5 a year ago."  So a year ago it was at 67.5, and it's only dropped to 60 percent over the course of the last year.  So only - they only lose 7.5 percent.  Apple now has an 11 percent share of the corporate desktop, up from 9.1" a year ago.  And Linux, still struggling for much, is only at 1.4 percent, and it was at 1.3 a year ago.  So Linux is really not seeing much traction on the...



LEO:  Oh, it's growing.  It's growing.



STEVE:  It's in the right - it's going in that direction.



LEO:  The right direction.



STEVE:  Meanwhile, IE, Internet Explorer, has declined slightly, as we've talked about in several opportunities recently, while Chrome and Safari are both on the rise - of course Safari being brought along by the Mac that is also on the rise.  It said, "The pace of Windows 7 adoption is accelerating, according to the report.  Windows 7 dominates new deployments, with XP and Vista finally starting to disappear.  Forrester says Vista adoption peaked in November of '09 at 14 percent and has declined ever since."



So we're seeing that - and this is sort of what we would expect, which is new systems which are probably reluctantly being purchased, just because they're not free, are coming with 7 built in.  But corporations are not in any rush at all to just upgrade the OS when they don't have to.  So they're staying with XP.  And XP is phased out, they're being replaced with Windows 7.  And Vista sort of never really got a foothold.  It wasn't there long enough for it to replace the XP systems.  And 7 came along, and so all new systems being deployed are going to be Windows 7 based rather than Vista.  So that's sort of the arc of that.  And this link does have an interesting table that shows how all this breaks down over time.  So I just wanted to - I caught that and thought that was interesting.  We've talked about legacy machines and security and so forth.



There's a really interesting - and Leo, you should go to this URL while we're talking:  Collusion.toolness.org.



LEO:  Okay.



STEVE:  Collusion.toolness.org.  And this is - and I also tweeted about this, so people could also check my recent tweet stream.  And by the way, I am on Google+ as just Steve Gibson.  You can search for "Steve Gibson" and find my picture there.



LEO:  I found you, I found you.



STEVE:  And what I'll be doing from now on is duplicating my tweets or my postings over there...



LEO:  You might find that the thing about Google+ is it ends up being all about conversations, interesting conversations.



STEVE:  Right.



LEO:  And while you can do that on Twitter, it's a little more difficult to follow.



STEVE:  Yes.  So, okay.  So Collusion is actually a Firefox add-on which I have not yet had a chance to take a look at.  I should explain a little bit that I was a little caught off guard by switching the podcast from Wednesday to Tuesday.  We're recording this a day earlier, and so I had budgeted some time that I will use next week to have a chance to play with Collusion.  What this does, it sort of takes us the next step forward from Ghostery to actually tie together sites that are colluding in tracking us.  And so this Collusion.toolness.org just sort of gives you a quick overview example.  It takes you through several sites and builds this collusion graph that shows how different tracking which is common to those sites links you together as you move from site to site.  It's very interesting and sort of interactive.  It builds a cool node graph on the fly as you move through, I think it's four or five different sites.  And then you are able to hover your mouse over the nodes, and it pops up information about them.  You can drag them around actually to sort of reorganize this node graph, which is sort of...



LEO:  What's interesting, though, is as you go from site to site, it shows the interrelationship between the sites.



STEVE:  Yes.



LEO:  So it's more than just what this site tells you and what that site tells you, which is what Ghostery tells you.  It shows how sites, successive visits to sites build up a picture.



STEVE:  Exactly.  And so, again, I have not had a chance to look at the Collusion add-on.  But I'm absolutely, I mean, Ghostery is really cool.  And this thing running on Firefox will link all this together.  I can't wait to take a look at it and see what it looks like.



LEO:  Yeah.  This is a really nice visualization of this information.  And even if you don't want to install it in Firefox, if you go to that Collusion website, he kind of gives you a demo, which we're running through right now, of how visiting sites will build up this amazing graph of information about you.



STEVE:  Yeah, yeah.  So many people have tweeted me about Mozilla's new identity effort called BrowserID.  I wanted to just acknowledge that I am aware of it, and I've seen it.  I'm going to give it a full analysis because I dipped in quickly, thinking maybe I could take a quick look at it.  And it's like, whoa, okay, this is some serious crypto technology that I want to understand and share with our users.  But I'm encouraged because of course we did a whole episode on the issue of identity on the Internet.  We recognize the importance of it now and certainly in the future.  And Mozilla has an approach which they have put together, it's an outgrowth of a project that they have worked on which is still in its infancy.  But they use your email address as you proving ownership of an email address with an email loop in order to solve the authentication problem.  So I haven't looked in detail at it, but I imagine it's going to be worth a whole podcast where we pull this thing apart in detail and look at how it works, which we will do.



I also noted that TrueCrypt, that is our favorite whole drive encryption system, is looking for money.  They're asking for donations.  They want to raise $150,000, and so far they have $10,000.  So I just wanted to point that to our listeners, users of TrueCrypt who want to support the free and open source effort.  I would encourage people to go over and maybe give them a few bucks.



LEO:  Yeah, should be a no-brainer.  Everybody uses it.  And it's free.



STEVE:  Yes, exactly, yes.  And a spectacularly secure and robust solution.  And then, finally, there's an interesting site called BrowserScope.org.  So it's just as it sounds, BrowserScope, as in oscilloscope, but this is a browser scope, dot org, that shows and tracks and allows users to run a series of tests against their own browser of choice to see how it does.  It takes about four minutes to run the tests.  You will want to enable JavaScript, or you might as well just not bother because it's a heavily scripting test.  But it performs a wide spectrum of security-related and function-related tests on whatever browser you visit it with and also shows what all of the users of BrowserScope.org collectively and anonymously have found out about their browsers and sort of builds a, you know, these browsers do this, those browsers do that.  So it's just another cool way of looking at where your browser ranks and rates in terms of functionality and security and cookie handling and so forth, relative to the cross-section of all browsers that are currently use.



LEO:  I'm sorry.  I'm just looking at mine.  Interesting.



STEVE:  Yeah, it's very cool.



LEO:  Very interesting.



STEVE:  So I wanted to recommend that.  And I have a short note from a happy SpinRite user, David Ward, whose company is Wellmax Computer.  He wrote and said, "I own a small IT consulting business, Wellmax Computer.  I've been using SpinRite for almost 20 years."  So, wow.  Thank you, David.



LEO:  Wow, yeah.



STEVE:  He says, "A customer brought an XP machine in that was freezing.  I knew that he was having problems with his hard drive.  He wanted a new drive, not just to repair the old one.  I had a drive cloning utility, shall remain nameless" - for whatever reason - "and when setting up...



LEO:  You'll see.



STEVE:  "And when setting up to clone one drive to the other, I was dismayed to see that it was projected to take 22 hours to finish the cloning process.  This was a 500GB drive.  Well, after 24 hours it had barely budged, maybe done 8 percent.  My gut told me, I think the source drive is having problems.  So I ran SpinRite at Level 4.  Two days later, SpinRite had finished.  I started the cloning process again and this time was done in 22 minutes instead of 22 hours to get 8 percent of the way done.  I got to thinking, why don't these cloning software manufacturers include SpinRite as part of their software?  Of course there would be a royalty to you for each copy sold.  This just seems like a match made in heaven.  David Ward."



LEO:  That's a good point.



STEVE:  Well, and I'll just say I really avoid any sort of that kind of thing.  I have a very simple business model.  I get people sometimes who want to license SpinRite or bundle it with things.  And then we're doing tech, I mean, we would still want to do tech support, but then they'd say, oh, no, we'll do tech support, except they can't do tech support because they don't know the product that well.  Customers would end up being annoyed.  It's just I like things - I like to keep things simple.  So I wanted to share David's experience and let anyone know that if they have, like, a problem cloning a drive, to remember SpinRite because it can useful and helpful there, as well.  Hey, you're a ham now, and you've just got your ham gear, so...



LEO:  You saw that, did you?  Yeah.



STEVE:  You'll be a little distracted, I think.



LEO:  I passed the technician test on Friday.  And I want to thank everybody at the Mount Diablo Amateur Radio Club -  many of whom are fans, by the way, Steve - for being so nice to me.  And, you know, it was just - it really felt good.  I haven't taken a test for anything in years, so I was a little nervous.  And then, now, soon I shall get my call letters.  I don't know what they're going to be yet.  It should happen in the next few days.  But I have to admit, part of the reason I became a ham is for the gear.  And I've already, you're right, I've already purchased my radio.  I'm ready.  The minute I can.  I can't yet.  But the minute I can, I'm going to pull this radio out of its cup holder, and I'm going to say hello.  Actually I want to learn Morse code.  Did - you never became a ham.



STEVE:  Never became a ham.  I had to learn Morse code for the Boy Scouts because that was one of the merit badges that you earned for something, I don't remember now what.  It may have been a communication - I remember we had semaphore and Morse code and screaming really loud and various things.



LEO:  That's - so I'm jealous because that's the next thing.  Although I'm looking forward to learning it, actually.  I have a - this is where software really can come in handy.  There's a Morse code trainer I've downloaded for Windows, and it's amazing.  And I think I'll learn much more quickly than I would have learned if I were trying to piece it out by myself.  So this is fun.  It's a good little hobby.  But enough of that.  You ready for some Q&A?



STEVE:  Because you don't have enough hobbies, Leo.  You're just - you're casting about for something to do all the time.



LEO:  I actually don't really have a hobby.  This is my profession.  Fortunately, my hobby is my profession.  I love technology.  And so when I go home and play with Ruby or read tech news, I mean, it never feels like work to me.  It's all I do, all the time.  Even when I'm building my tiny tower, I feel like that's a little bit of work.  Before we get too far down that road, let's get some questions.



STEVE:  Good idea.



LEO:  Steve Gibson, Q&A #122, starting with Joey, a high school student listener in Alberta, Canada.  He wants some career advice:  Dear Steve, I just recently started listening to your podcast, and I have to start off by saying you're doing a great job.  I've slowly been working my way through the extensive list of archived episodes.  I've been learning a lot.  Thank you.  I'm a high school student with a passion for computers and math - sounds like, this kid sounds like he might be a little mini Steve, actually - and I want to become a computer security expert once I graduate because that's what I'm most interested in.  



However, with the constant evolution and improvement of computer security and crypto, I'm worried that by the time I get through high school and university there'll be no more improvements to be made.  Oh, fear not.  So my question to you is this:  Do you think the computer security industry will be around long enough to sustain a lifelong career for someone my age, or will it soon become obsolete?  How long will it be before every end-user machine becomes secure enough so as not to require constant attention?  I'm guessing that will be a long time, but I want your opinion.  Any advice is appreciated.  I'm currently at that point in my life where I need to focus on a career path and decide which computer-related field I'll specialize in.  Computer security is my first choice, but I'm unsure how viable that career will be in 10, 20, or 30 years.  By the way, I'm currently working toward my A+ - this is a high school kid, by the way.



STEVE:  Yeah.



LEO:  What did he say, he's a junior?



STEVE:  I don't think he says.



LEO:  He doesn't say, but he's in high school.  Currently working towards my A+ certification and plan on getting a BS in Computer Science focusing on Information Security.  One last question:  Would SpinRite work with my PlayStation 3, iPod Classic, or Shaw DVR system?  All of them use hard drives, but are proprietary in nature.  I plan on buying SpinRite in the future to show my support, but want to know if these machines are supported/tested.  Joey, Alberta, Canada.



STEVE:  Well, okay.  So, first, just so I don't forget, yes, SpinRite will work on all of those.  People have fixed - we're heard many reports of PlayStations being fixed with SpinRite.  We told some stories years ago about the classic iPods.  You may remember, Leo, there was one guy who was collecting them because he sort of became the guy that collected dead iPods, the original ones with hard drives in them.



LEO:  Yeah.  That's a business for this guy.



STEVE:  Yeah, all of his friends were just giving him their dead iPods.  Then he discovered SpinRite and began running SpinRite on his iPods and fixed them all and started handing them back to the friends saying, hey, here's your iPod, it works again.  So, yes, it absolutely will work on non-standard anythings.  You have to disconnect it and preferably hook it to a PC, that is, take the drive and hook it to a PC.  But if you do that, SpinRite will say, oh, there's something spinning here, let's make it work.



LEO:  It doesn't need to know anything about the file system.



STEVE:  Correct.



LEO:  The only issue would be, on the Shaw, if it's an encrypted file system.  No, I guess it doesn't matter either...



STEVE:  Doesn't matter.



LEO:  ...because it's all underneath that; right?



STEVE:  Yup.  And in fact the TiVo uses a byte-swapped Linux because the original TiVo was a PowerPC chip that used a big-endian rather than little-endian byte ordering, which was the byte ordering of the PowerPC.  And SpinRite says, I don't care.  It just fixes it.



LEO:  That's awesome.



STEVE:  So whatever.



LEO:  Well done.



STEVE:  Okay.  So is security going to go away?  There are a couple things, a couple reactions.  First of all, when people generically ask me what they should do, my reaction is always, the way you want to spend your life is doing what you love.  So if you love computer science and security, Joey, as you say you do, then I would worry less about what you'll be doing in 30 years than what you'll be doing in 10 years.  And we know that these problems are not going to be solved immediately.  We'll discuss the future in a second.  But there's just - I would never suggest you do something that you don't love because you're worried about 30 years from now than doing something that you do love for the next 10 years.  Or probably for the rest of your life.  So there are so many high school kids who don't love anything.  I mean, they love videogames, and they love hanging out, but...



LEO:  They love their girlfriends.



STEVE:  And the girlfriends, but they can't get a job doing that.



LEO:  Right.



STEVE:  So the idea - and to that extent, Leo's right.  You are a mini me inasmuch as, just like Leo, who loves what he does, when I talk about, oh, I'm going to get a lot of work done today, it's because I don't have any distractions scheduled, and I just get to do this, computer stuff, all day long.  There's nothing I want to do more.  So, boy, if you can spend your life doing what you love, I mean, and having someone pay you for it, there's just no better way to live.



Now, as for is there a future in this, I've often said that some of this feels to me like the Wild West, like we're still in the frontier era.  And I joke about how this just can't stay this bad forever.  Except it seems to keep getting worse rather than getting better.  I mean, we're seeing improvements, like Microsoft is finally not executing scripts in email by default, as they were during the beginning of this podcast.  That's been fixed.  But boy, we sure don't see any slowdown.  I mean, we've added a new section of breaches and break-ins because there's just been such a rash of that.



So I see things becoming - evolving.  The threats seem to be getting more sophisticated and requiring a much higher level of expertise to deal with them, rather than being simple.  So to me that says there would be more specialization in security, but certainly no obsolescence of that.  And even if, in 10, 15, 20 years the challenge changed, you'll have a decade of experience in computers and technology and knowledge and detail stuff, and that'll evolve.  I mean, I started off being Mr. Hard Drive, and my focus has shifted to security because there was a need and an interest.



So nothing prevents you from having your own expertise evolve over time.  And growing and learning is really how you want to spend your life.  And the creation of the Internet completely changed my focus.  So who knows what your focus will be 30 years from now.  But I would say do what you love; and, if that changes over time, well, that's growth, and that's a good thing.



LEO:  I think it's fairly safe to say that it's only going to get worse.



STEVE:  Yeah.



LEO:  I don't see how security will ever not be a huge issue.



STEVE:  Well, and, yes.  Another maybe great analogy is to look at whether security in the physical world, which is mature as people are...



LEO:  Right, right.



STEVE:  ...that hasn't gone away.  I mean, the whole security issue, even non-computer security is, I mean, that's why we have the word "security."  The word came along before computers did.



LEO:  Actually physical security is an interesting field.  I wouldn't even eschew that.  Even just locks.  I went to a talk on locks and lock-picking.  It's fascinating.  And there's a huge resurgence in trying to make physical security systems that work.  So you couldn't go wrong.  I think there are two areas that in computer science are guaranteed to give you employment for the next 40 years.  One is networking, and one is security.  And they're kind of related.



STEVE:  Yup.



LEO:  Listen to this show, you'll know all you need to know.  Good question.  Good luck.  Jimmy Blake, Sandusky, Ohio wonders whether we're trying to mess with his head.  He said that.  You've probably received this from a number of people already.  But as someone who has recently decided to go back and listen to your earlier podcasts in the Security Now! series, after realizing how in-depth you get with topics, it threw me for a loop when I saw "How the Internet Works," both as the newest episode for me to watch last week, after having just listened to episodes 25 and 26.  Which apparently, I didn't know, it has been a few years, were "How the Internet Works."



Now, that's not to say you shouldn't be revisiting the series because I love the new depth you're going into.  And I believe that having several years of podcast experience now under your belt you're doing a more thorough job explaining the principles of the Internet than the first time around.  I presume, Steve, that this is not a surprise to you.  You knew we did it once before; right?



STEVE:  Yup.



LEO:  Yeah.  Thanks for all the hard work you do in always giving me a little more information on the topics I thought I understood pretty well.  P.S.:  This is way off that topic, but after listening to some of your older crypto episodes and watching the more recent episodes on randomness, I was wondering about using a hashing or an encryption algorithm as a source of random numbers.  If, for example, you were writing a program in a programming language with poor random number generation (*cough *BASIC* cough*), but that also did - actually they all have lousy random number generation, that's another matter entirely - but that also did have built-in functions for hashing or encryption, couldn't you generate a random string using the built-in random number generator of the programming language, then feed that string through one of the hashing/encryption functions and then use the raw binary of the result as something with better entropy than the built-in random number generator could produce on its own, since hashing and encryption algorithms generally rely on a lot of very good randomness?  What about it, Steverino?



STEVE:  Okay.  So two things.  I did know, of course, that we did a series on how the Internet works five years ago.



LEO:  Whew.  I forgot.



STEVE:  Episodes 25 and 26.  And I decided it was worth revisiting, deliberately, because for one thing I know that we've got a huge bunch of listeners who are now tuned in and listening and may not have gone back there.  But also because I'm taking sort of a different approach.  What I said back on Episodes 25 and 26 is not what I said last week.  And, by the way, I've just had a ton of really great feedback from last week's episode, our revisiting how the Internet works, which I think is worth doing every five years or so.  So I'm going to, even though it's got the same or similar title, I'm going to bring a fresh approach to our looking at it again.  And I'm sure that people who've even been listening from the beginning will get more out of it in hearing new stuff about how the Internet works this time.  So, yes.



LEO:  It's not like the technology's changing.



STEVE:  The technology is not changing, although this time of course we will talk about IPv6 and its influence on how the Internet works.  So some things are changing.  DNS spoofing has happened since then.  And so I'll pull everything that's happened then into this revisiting that.  But also I'm going to do it with a little more style, maybe a little more in-depth this time, so that it builds on everything that we have covered in the last five and a half years.  It gives me a better foundation for talking about new stuff in additional detail.



As for random number generating in, like, languages that have bad ones, the problem with the random number generators in most languages is not the algorithms so much as that they lack a good source of entropy, that is, a good source of seeding randomness which feeds the random number generator.  So if you just switched it over to a crypto-based approach, which potentially can generate very good random numbers, you still have the problem of, if your intention is to make it unpredictable, then you need to somehow arrange to give it entropy in order for it to churn out random numbers based on a good algorithm, but from an unpredictable starting source.  So that's really the trick.



I solved it with various of my recent pages where I've needed to generate randomness.  And we talked about one, that R&D page, I think it's GRC.com/r&d/js.htm - "js" as in JavaScript dot htm - which is where I wanted to develop the technology to do that for some future projects.  I have a 256-bit token which is received with that page from GRC, which I then hash with a whole bunch of client-side stuff in order to generate something which we know has the entropy available from GRC, but then we then further scramble it so you're not actually taking what GRC's server provided.  You're adding entropy to it over on the client side, which really gives you the best of both worlds.  You know you'll have at least as much entropy as you got from us, which is a lot of entropy because we've got a very good random number generator running on the server at GRC, yet you won't have the security problem of relying on something from GRC.  So all you're doing is you're adding to the entropy you received, which guarantees you have security from GRC knowing what you're using, yet you have the added entropy that you're generating on the client side.  So it's possible to do clever things like that.



There is a site, I think it's Randomness.org or RandomNumbers.org, there's some - it's been around for a long time, for years, a source of entropy that anyone can pull on the Internet, that you could use from a basic program, for example, to generate some seed entropy, and then maybe add to it by following the mouse around or looking at the time of day on the local machine, just pouring all that additional, hashing all that into a seed which you would then use to start off a good cryptographical-based random number generator.  So those problems can be solved, and they're fun to solve.



LEO:  We have a tweet from @greendrive, Allan Hoiberg in Denmark.  He's making a very good point when he asks:  What's to prevent IsMyCreditCardStolen.com - by the way, we talked about that last week, and I posted that on Twitter, or maybe it was Google+, and boy it got a lot of scared people.  But he said, what's to prevent IsMyCreditCardStolen.com, which was a site created by a very reputable group, the Anti-Phishing Working Group [Antiphishing.org], from serving up a page that does actually post data once in a while?  In other words, could it have been malicious?  By the way, I don't know if you know, Steve, but OpenDNS blocked it as malicious.



STEVE:  Yes.



LEO:  They didn't bother to look deeper, obviously.



STEVE:  This was - I loved this question because it's something I failed to address.  And it comes up whenever we're talking about something that looks trustworthy, or for example I mentioned that I looked at before, I mean, when I found the site, and it's saying put in your credit card and your name and your billing address and your expiration date and things, it's like, no.  And I never did, but I looked at the source, and I saw what it was doing.



So Allan makes the point, which I wanted to reiterate or really remind our listeners, and that is what a site is doing today isn't necessarily what it's going to be doing tomorrow.  And that's a super valuable lesson.  So you're right, Leo, this is from really good people.  You'd want to make sure that it was being delivered over HTTPS to prevent a man-in-the-middle attack from changing what that page is delivering.  And this is related to what we talked about with Google, which was that Chrome is now, if your page comes in over HTTPS, the Chrome browser is now enforcing and insisting that any scripting for the page also come over HTTPS, that is, not allowing sort of the laxity of a mixed content where the scripting would not be as secure as the page delivery.  Other browsers would warn you that there was mixed content, but wouldn't absolutely refuse, for example, to run the script if you said, oh, yeah, go ahead.  Whereas Google Chrome does, which is a good thing.



But it is a lesson to remember, that any site which is behaving in a trustworthy fashion on one day, which you determine for example by looking at what the scripting is, isn't necessarily doing it on some other day in the future.  So it's worth keeping your guard up all the time.  And I just - that caught me off guard.  It's like, yep, you know, Allan's right.  We cannot assume what's going to happen in the future.  We just don't know.



LEO:  I don't - was it irresponsible of me to repost that link?



STEVE:  I don't think so because it's from good people.  I would say the benefit far outweighs the liability.



LEO:  Certainly raised awareness, let's put it that way.



STEVE:  Yes, yes.



LEO:  Tim in Maryland wants to know more about randomness.  He says:  Steve, you talked about how randomness is a very important cryptography issue, but I just don't understand why.  How can you use something random in a process that must be repeatable in order to decrypt?  I thought the whole idea is that your password is somehow used to generate a key, which is then used to encrypt the data.  You certainly can't use a random key because how would you ever decrypt it?  This has bugged me for some time now, and I can't seem to find any clear description on it.  I'm sure it matters, but I don't know why.



STEVE:  Okay.  So it's a great question.  The best example and the cleanest example is the use of randomness, which is very common.  For example, every time we make an SSL connection, or also known as TLS, Transport Layer Security, and which we see as HTTPS: on our browsers every time we're putting credit card information or logging in securely to a website, it's establishing a secure connection.  And randomness plays in that.  The idea is that you use public key encryption, that is to say, asymmetric encryption, to establish an encrypted connection between the two points.  But the asymmetric encryption is incredibly slow.  You cannot possibly afford to use asymmetric encryption where the server, for example, gives you its public key.  If you use the public key to encrypt your content, you could send it to the server, and only the private key could decrypt what you encrypted with its public key.  So that's feasible, theoretically.



But the problem is that public key crypto, which is what we want to use because of its asymmetry, that whole power of having a public key and a private key, we want to use it, but it's just too slow.  So this is where randomness comes in because we do have an encryption technology which is lightning speed, and that's symmetric key encryption, where we use the same key to encrypt as we decrypt.  Except in this case we want the effect of public key encryption without the computational overhead.



So what happens is, and I'll just take a very simplified model to keep this clear, imagine that instead our side, our sender, we get the public key from the server.  Now we make up, we use randomness to create a short, 256-bit for example, symmetric key.  That we encrypt, we encrypt that short symmetric key with the server's public key.  So we're only encrypting something small, one time, with the public key technology.  And we send that to the server, which only it is able to decrypt using its private key.  And now I know what the symmetric key was.  The server has our decrypted symmetric key.  And now we can transact back and forth at very high speed and with low computational overhead using the symmetric key.



So the point is, in order to make that secure, we have to be able to generate a symmetric key randomly with very high quality so that no bad guys can guess what that symmetric key is.  So there's a very clean instance, or a simplified example for how randomness is required for cryptography because it's just far easier for us to use asymmetric encryption to create a short key which is then transmitted to someone who can decrypt it.  And then we use that short key for the actual bulk payload transaction.  And it works.



LEO:  I always liked that kind of clever solution.  It's the same problem you had in the old days, and this is how I remember it, when you wanted to encode a message.  You'd have to send a key somehow.  And that was a huge security flaw because you have a symmetric key.  It's the same key used to encode as to decode.  So public cryptography kind of broke through that problem.



STEVE:  Absolutely.



LEO:  But it still had the asymmetry of computational difficulty.  Greg in North Hollywood, California wonders about memory hard functions:  Steve and Leo, in Episode 296, Listener Feedback #115, you said, quote, Steve, "But imagine an algorithm which is memory intensive, that is, where in order for it to function - and there's just no way around this - it has to be given a big, like a gig, memory block.  It has to have it all to itself for some length of time in order for it to do its job.  And there just isn't - you can demonstrate cryptographically - there's no way to do this without it having access to all of that memory.  And those are called 'memory hard' problems."



So he continues:  I'm running a desktop computer with 8GB of RAM.  I need it for VMware - long story.  Some desktop motherboards support up to 32GB of RAM.  As you noted, GPUs, the Graphics Processing Units, have 4 to 6GB of video RAM.  Some motherboards will support up to four video cards.  Now, I think that the context was using FPGAs, Field Programmable Gate Arrays - I'm not following this at all - and the problem of an FPGA having a few gigs of RAM.  Is that the problem?  Steve.  I don't know what he's talking about.



STEVE:  So it was a great question.



LEO:  Good.  What does it mean?  Would you rephrase as a question?



STEVE:  What he's talking - yeah.  And it's something that we will cover in more detail in the future.  But we did talk about it, as he mentioned, back in Episode 296.  The idea was that massive password-cracking systems are able to, for example, test a huge number of hashes in a short time because the hashes were designed to be very efficient, like an SHA-256 is deliberately designed to be very fast.  So, for example, one of the ways that we increase the security is we make you do the hash many times.  The WPA specification requires 4,096 repeated hashes of, like, you just hash, and then you rehash that, and you rehash that, and you rehash it in a loop 4,096 times.  So however much time it takes to do one hash, this at least makes that 4,096 times longer.



And due to the nature of hashing, no one knows how to short-circuit that.  No one knows how to just, like, do one operation that gives you the result of 4,096 hashing operations.  Because it's cryptographically strong, we don't know how to do that faster, forcing anyone who wants to generate a trial key, for example in the case of WPA WiFi encryption, they're forced to do this 4,096 times.



Well, smart people have said you could design an FPGA, a Field Programmable Gate Array, because they're getting bigger and more powerful, where you built 4,096 SHA-256 hashing engines on a single chip.  So essentially you move this problem out of the time domain and out of, like, a loop which our computers have to execute, just into silicon, where you put a test in, and this piece of hardware just goes [sound], and just in no time at all, almost like in a big pipeline, where all 4,096 of these SHA-256 hashing engines are going at once, processing hashes, you can make it extremely fast.



So because of the threat represented by our ability to create algorithmically dense silicon, the leading edge smart guys who think about how do we increase security, they've said, wait a minute.  It's one thing to have algorithmic density.  But if we also required memory density, that is, if we required, if we came up with some sort of clever functions which are what they call "memory hard functions," that is, functions which are not algorithmically dense, but they're memory intensive, then there's no way, for example, you could put 4,096 of those, if each one of them required a gig of their own, well, that would be 4,096GB in order to do this same process.



So essentially this is sort of a theoretical construction at this point.  This is the leading edge of where crypto theory is going in terms of, okay, we're seeing what GPUs are doing, we're seeing what field programmable gate arrays are allowing.  How can we keep the security of cryptography high?  How can we keep that bar high in the face of algorithmic speed?  And what they're seeing is that requiring large blocks of memory, which our contemporary machines do have, but which screamingly fast algorithmic density doesn't yet have, is one trick we can use for keeping these things hard and slow.  So that's what that was about.



LEO:  Well, I'm relieved to know.  Randy Hammock in Sun Valley, California has an AC power line frequency tale:  I had an uncle who worked in a small power plant.  We were talking last week, I think, about how the fact that the 60Hz electrical power was going to kind of be deregulated so it wasn't exactly whatever it was, 59.98Hz or whatever.  I have an uncle who worked in a small power plant.  Their frequency regulator was a clock with two second hands.  One second hand was driven by the power line, while the other was driven by a very accurate pendulum clock.  Oh, boy.



The pendulum clock speed was controlled by adding and subtracting small gold weights on a balance scale.  WWV was used to verify the pendulum clock time.  That's the world clock in Boulder, Colorado, the radio clock.  Once the pendulum clock was calibrated using WWV, the generator speed would be adjusted to keep the two second hands in sync.  While the short-term frequency of the generator may be awful, this system would pretty much assure a two-second-per-year accuracy, which was what the government required.  A really neat example of a generator being manually phase-locked to a highly accurate standard.  That's a cool way of doing it.



STEVE:  I just thought that was cool.  I mean, you can imagine, I mean, I guess it was a small power plant.  And I don't know how long ago this was.  But the idea of going into the power plant, and here's some wacky clock where you've got two second hands, and the engineer somewhere is looking at them, literally seeing which one is ahead of the other and speeding up or slowing down the generator whose actual spin, the actual coils on the generator are what's producing the sine wave output that this power plant is putting out onto the grid.



And so they're tuning the speed of the generator which is directly driving one of the hands of the two second hands on the clock, the other one being driven by a pendulum.  And pendulums actually keep really good speed.  You need to also keep them constant temperature or to have them temperature compensated because, if the pendulum is made of metal, we know that metal expands when it gets warmer, and that would tend to slow the clock speed down.  But then they're also backing that up with WWV, which is the Fort Collins, Colorado time standard, as you mentioned, Leo.  So overall it looks like it's pretty good technology.



LEO:  I said Boulder.  Fort Collins, of course.



STEVE:  Fort Collins.



LEO:  Drew in Atlanta wonders about the value of IP filtering:  Steve, my Google account was recently breached.



STEVE:  Oops.



LEO:  Whoops.  I was made aware of the breach by Google reporting unusual access to my account from a Chinese IP address.  I have never been to China.  Luckily, I was able to update my password, and I haven't seen anything unusual since.  But it still leaves me a little uncomfortable with the idea that my account could be accessed from anywhere when I usually only find myself in a few specific locations.  So I was wondering, how practical would it be for a company like Google to set up user-controlled IP filtering for individual accounts?  As a network admin I frequently use IP filtering to prevent malicious use.  It would be nice if I could go into my account security settings and explicitly tell Google my account should never be accessed from outside the U.S., or drill down even further and say my account should never be accessed from outside the subnets used by my home ISP and smartphone carrier.



Anyway, it was just a thought I had.  I was curious to get your take on it.  I've been working in IT for more than six years now and have been listening to Security Now! for nearly the entire time.  Interestingly enough, my very first job in IT was to rebuild computers compromised by the worms you discussed in Episode 1.  Thanks for your time, Drew.  Yeah, our sysadmins do that for my server, anyway.  I know because I was trying to SSH into my server, and I said, I can't get in.  And they said, oh, yeah, we hadn't added that IP address.  So that's great.  It's a good way to lock it down.



STEVE:  It is a great way to lock it down.  And I, similarly, use that for accessing non-public services at GRC.  I've got GRC's network is remotely located in the Level 3 datacenter in nearby Tustin.  And there are - I use IP filtering to the fixed block of IPs that I have here as a further way of authenticating myself to my system.  I certainly don't rely on that exclusively.  But it's just one more useful filter.  And as we know - and we'll be talking about TCP protocol before long in our How the Internet Works series.  And I've often said that TCP, unlike, for example, ICMP or UDP, is non-spoofable, that is, you cannot spoof the source IP because in order to set up a roundtrip communication, the far end has to send packets back to you, so you've got to be available at that IP.



I would say to, like, in terms of how can this be fooled, that it is not absolutely impossible to fool IP filtering, though, because, for example, say that you were to lock down filtering so that you could deal with, for example, the fact that your ISP might vary your IP address.  Drew understood that because he referred to "outside the subnets used by his home ISP and smartphone carrier."  Meaning that he recognized that the actual IP might change, but the network that was being used would probably not.  So it would stay within a range of IP addresses.



The problem is, a proxy is something that bounces traffic through itself so that, if you were a high-value target, a bad guy could compromise some other machine within your ISP's network and then access your Google account, for example.  So if Google were told to accept IPs within this range in order to allow you the flexibility of coming in from any IP address within your ISP's range, then a bad guy could get in using a compromised machine within that same IP range.  So there are ways around it.  I mean, overall I like the idea.  My sense is it's probably a little too tech-y for Google to do, and not the kind of things that their users would be able to do without getting themselves in trouble, or needing to then fall back to a higher level of authentication.



We were talking about this in the context of the World of Warcraft and the Blizzard authentication token and how they're using apparently some IP filtering or IP identification and some tokens on the machine in order to identify their users.  Your sysadmins, I'm glad to hear, Leo, are doing that kind of thing.  It's another good level of verification.  But a perfect example is that you got caught out by it.  So it is something that comes with some cost from an administration standpoint.



LEO:  You know, Google, if you go to the bottom of your Gmail page, does give you information.  I mean, you can look at it, if I click the Details link at the bottom of my Gmail page...



STEVE:  The most recent logins.



LEO:  ...it says "activity on this account," and it gives IP addresses of all the most recent logins.  And this is very, very useful.  And if you see China on here, and you don't go to China, you might want to wonder.  That's what Google's doing lately.  But this is fantastic.



STEVE:  And I do love it.  We talked about this a long time ago when Google added this service, the idea that they would say, whoa, by the way, you should know.  And that's just - that's fantastic.



LEO:  And of course they have a setting that says "show an alert for unusual activity."  So I would say this is about as close as they're going to get to blocking individual IP addresses or only allowing certain IP addresses.  It's going to tell you when it sees something that it's not seen before.  I think that's pretty good.



STEVE:  Yeah.  And I would like it if, for example, if you had a setting of saying, rather than giving me an alert if somebody else has accessed my account from China, require any unexpected access some higher level of authentication.



LEO:  There you go.  What's the password?  Yeah.  Ask me again.



STEVE:  Yeah.



LEO:  Send a message to my cell phone.



STEVE:  Exactly.  Require that exact authentication for those instances, but not normally.



LEO:  Right.  That's not unusual.  A lot of systems do that.  Rob Galanti in New York, New York asks about OAuth as a security risk:  Steve, I'm a long-time listener in the city.  Thanks for the great podcast.  While listening to Episode 308, you and Leo were both proponents of OAuth and HAuth.  However, I've always thought that using my Gmail credentials for non-Google sites might be more likely to compromise my security.  Here's how:  A nefarious website posing as a legitimate one requires my OAuth credentials for login - his Google password.  Naively, I enter my credentials.  Well, I mean, this could happen to you without OAuth.  This is called "phishing."  Naively I enter my credentials, specifying they're for Google, and submit the form.  Upon submit, the credentials are captured by the nefarious website and can be used to get to my Google data and any other site which might use those credentials.  Is that a realistic liability?  And, if so, doesn't that outweigh the potential benefits of using OAuth or similar technologies?  Thanks again, keep the Security Now! podcasts coming.  Rob.



STEVE:  Well, this was a good question because I wanted to make sure people understood, and specifically Rob and anybody else, that's not the way OAuth works.



LEO:  Right.  I mean, you could be phished; right?



STEVE:  Yes.



LEO:  But so that's - but that's not an OAuth vulnerability, that's a vulnerability, where somebody puts up a page that you think is real and says, hey, login here, and you go, okay.



STEVE:  Yup.  So if a bad site were to say, hey, we support Google's authentication, give me your Google credentials, well, unfortunately some users are going to fall for that.  They're going to put their Google stuff in thinking, hey, that's cool, I'll use Google to authenticate because they may have done that elsewhere or know that Google offers that capability.  But that's, as you said, Leo, that's not OAuth.



The way a legitimate site uses OpenAuth correctly is they say you can create an account with us, or login with our credentials, or you can log in with us using your Google credentials through OAuth.  What happens then is you are bounced over to Google, and you'll see an SSL connection.  And so you give Google your Google credentials, and Google authenticates your login and then bounces you back to the site that is using OAuth and Google.  And there are cryptographic token exchange sort of behind the scenes that you don't see, that allows this site to say what it's requesting from Google.  Google shows you what the site is requesting.  You give Google permission to give the site those things that it has asked for, and then it takes you back.  So no one other than Google ever sees your Google credentials.



As you said, Leo, it's a little worrisome because it does require that the user understand this.  And the very fact that Rob asked the question demonstrates that it's subject to some confusion.  And no doubt we'll see people abusing this as it becomes more popular.  But it's not a function or a fault of OpenAuth, it's that social engineering attacks are unfortunately successful.



LEO:  Yes.  I mean, that's the whole point to OAuth was that you would only - you would never give credentials to anybody but the appropriate site, and that they'd pass along a token.



STEVE:  Right.  And I love it.  And the early problems, there were a couple implementation problems that got fixed early on.  So I really promote this.  I'm seeing more use of PayPal.  And much as I really dislike the PayPal company, I sure would rather authenticate with PayPal than give my credit card information to some random company that I'm never going to use again.  So this kind of thing where, boy, is it slow to happen, but it's a good trend.



LEO:  Konstantin in Toronto asks you about the Portable Dog Killer 2.0:  Steve, I'm a Security Now! listener since day one.  I love the show.  I've subscribed, and I listen to all the other shows.  But for me, Security Now! hits my sweet spot, baby.  One of my favorite episodes is the Portable Dog Killer.  And while I enjoyed the philosophical, educational, and humorous aspect of it, I could not see an immediate use of it when I listened back in May 2010.



Well, that is, until now.  We bought our first house last September, moving from an apartment.  Our neighbor has a very loud - it's okay, Ozzy, he's not talking about you - and sometimes vicious dog - that's not you, no, it isn't, Ozzy - that scares my two- and five-year-old kids when they play outside in our fenced backyard.  Ozzy's taking this very personally.  I bought the Yard Gard Electronic Pest Repeller from UrbanNatureStore.ca, but it seems to be too weak to chase away the beast.  I then found one person, apparently a Security Now! listener, who made the PDK 1.5 and published his progress at Damage.hackhut.com.  However, his instructions are not complete and difficult to digest.



You know where I'm going with this.  Steve, Steve, Steve, the community needs you to built PDK 2.0 and publish up-to-date instructions on how to make one of my own.  I feel it will be against the spirit of invention and exploration you and Leo are trying to inject into the minds of a young generation, but I hope you read this and somehow reflect on one of the next episodes of Security Now!.  Sincerely, Konstantin, Toronto, Ontario, Canada.



STEVE:  Okay.



LEO:  I love it.



STEVE:  So, okay.  So I've got to update our listeners on what's going on.



LEO:  Okay.



STEVE:  There's been a huge amount of interest in PDK 2.0.  But the first thing we have to do is change the name because...



LEO:  Yeah, that scares people.



STEVE:  ...I'm so self-conscious of the name.  So...



LEO:  But the PDD, the Portable Dog Distracter?



STEVE:  I don't think - well, okay.  So here's what's going on.  The moment, literally the week I mentioned this bad problem that my best buddy has with this ridiculously obnoxious dog next door, the problem went away.  So, I mean, he'd been putting up with it for a year.  It had been escalating.  He'd been complaining to the neighbor.  They finally, like, visited or heard the dog when it was doing this and realized the problem, and they've been far better about it ever since.  At the same time, there's a serious problem on the outdoor patio at Starbucks in the morning, not with a dog but with blackbirds or crows.



LEO:  Oh, those crows, yeah, no, they're crows, yeah.



STEVE:  Oh, it is like the social center of crow land.



LEO:  No, when the crows move in, all the other birds move out.  They're the terrors of the neighborhood.



STEVE:  Well, and they're smart and loud and obnoxious.



LEO:  Yeah.  And aggressive.



STEVE:  Yes.  And in fact today, I'm not making this up...



LEO:  Nobody's going to complain if you make a Portable Crow Killer.



STEVE:  Well, so we've got to kill, we've got to remove the "K" from the name.



LEO:  How about "stun"?



STEVE:  Well, my friend wants to call this BFG.



LEO:  What's that?  Oh, never mind, I know what that is.



STEVE:  And the listeners who should know, do know.  So, okay.



LEO:  BFG.



STEVE:  So the problem is that crows' hearing does not nearly go up to ultrasonic, to out of our hearing range.



LEO:  No, they're deaf because they're cawing all the time.



STEVE:  Their hearing tends to roll off around 8 or 9 KHz.



LEO:  How do you know this?  Have you studied crow physiology?



STEVE:  Leo, I am building a - I am building something that will deal with this crow problem.  So, yes, I know all about bird frequency ranges now, of hearing.



LEO:  Oh, Steve.  Oh, Steve.  Oh, Steve.



STEVE:  So I'm selecting the pieces.  Something will be shared with the world.  It'll be microprocessor based.  I've found the various pieces.  Now, okay.  So that's one thread.  In the process, I needed to find a good parabolic reflector.  Remember, our listeners may remember that I was thinking of using a tuned tube with a tweeter at the end where the tube would be tuned to be a multiple of the wavelength of the sound.  I can't use a tuned tube if I want to also be down at a frequency that the birds could hear because, if we did something that was up at the end of human hearing range, the dogs could hear it, but the birds would be unaffected by it.  And frankly, for me, dogs are not a problem anymore.



LEO:  Now it's those darn birds.



STEVE:  But they are a problem for many people because the other thing that happened is many people have, since the PDK episode, have sent me links to a range of things.  And you may remember when I was talking about v2 of the Portable Dog Killer, I mentioned I had purchased, like, I don't know, 10 or 11 of these things and given them to Mark to try, before finally thinking, okay, I'm just going to have to recreate something that's serious.  Okay.  So www.amazing1.com is a very cool science-related site that I found when I was looking for some pieces for v2.  So...



LEO:  Oh, we've got all kinds of stuff.  Look at this.  This is great.



STEVE:  Yeah, it's a fantastic site.



LEO:  Oh, man.



STEVE:  So I wanted to first turn our listeners on to it.  They've got Tesla coils and Van de Graaff generators and Jacob's ladders, and just it's cool stuff.



LEO:  This is great.  Hydrogen-powered cannon?



STEVE:  Uh-huh.  So there's a section on there, on that home page, Ultrasonic and Infrasonic Devices.



LEO:  Apparently this is not an unusual desire.



STEVE:  The top one, there is the second thing listed is Animal and Dog Control, but use Property Protection, Ultrasonics for Property Protection.



LEO:  Oh, look at that parabolic sucker.



STEVE:  Actually that's going to be the one I use.  That silver parabolic will be...



LEO:  It says:  "Hear the incredible world of high frequency sounds beyond that detectable."  So this is a receiver, but I guess it could be a transmitter.



STEVE:  Exactly.  I've got two of those on order right now, two of those...



LEO:  They're not cheap, dude.  These are expensive.  Couple hundred bucks.



STEVE:  All I'm doing is getting the parabolic dish.



LEO:  Dish.  That's only $50, okay.



STEVE:  Yeah.



LEO:  Look at this, a Sonic Nausea Device.



STEVE:  Oh, keep going down, Leo.  There is some serious technology here for dealing with dogs.



LEO:  And this stuff is not illegal?  Great little electronic device you can use to clear out those guests that never want to leave, long after the party is over.



STEVE:  There's something that makes you nauseous, apparently.



LEO:  High-pitched sounds that are hard to locate.  This is obviously into teenagers.  Then there's the Phasor Pain Field Blaster, complex sonic shockwaves.  The Phasor Blast Wave Pistol.  See, Steve, I thought you were a reprobate.  These guys are far worse.  Phasor Pain Field Generator.



STEVE:  Yes.



LEO:  Intended for law enforcement personnel.



STEVE:  They have some things that generate 130dB at several meters.  And they have grids of high-frequency generators that work in some sort of phased array for dealing with this.  So I did want to let listeners know that - because I have no timeline for this.  I'm pulling pieces together.  I will document everything I do.  We'll make it a community project.  I found the microprocessor...



LEO:  Wait a minute.  Ultrasonic Blaster.  Sonic shockwaves blow holes in metals.



STEVE:  That ought to do the job.



LEO:  I don't know if you really should be selling this stuff.



STEVE:  There's something that cavitates water.  So you aim it at water, and it makes bubbles form in the water.  So...



LEO:  This has to be - this has to cause cancer.  That is just unbelievable that this exists.



STEVE:  So, yeah.  I wanted to let people know that there are technologies around, there are devices, not super inexpensive, not like your little handheld thing that does nothing, but these things really do look like they work.  So...



LEO:  They also have all sorts of insect electrocutors, dog and rodent control devices.  Here's a sonic bird chaser might just work fine for you.



STEVE:  So it's Amazing1.com.  And that particular page is /ultra.htm, for reasons we now understand.



LEO:  Well, this will do.  Canine controller, it's got four tweeters.  Holy cow.  And a pain field burst section.  Whoever thinks this stuff up has got a problem, I think.



STEVE:  Well, I mean, they've got some Tesla coils that are larger than people.



LEO:  Yeah, huge.



STEVE:  I mean, huge.  It's a cool site.  I thought our listeners would get a kick out of the site.



LEO:  Oh, it's so cool.



STEVE:  And it will solve the problem for people who are - who want a problem now.



LEO:  Got ten grand?  How about a two-million-volt output generator?  Tesla coil?  Why not?



STEVE:  So my gadget is going to be very flexible.  For example, the plan is you'll be able to aim it at a crystal glass and twing it with your finger.  This thing will record and lock onto the frequency, and then you'll be able to turn it around and destroy the glass by shooting it with the same frequency that is its natural resonant frequency.  So anyway, it's going to be a modern, microprocessor-based, next-generation toy that I'm going to put together.  And it'll be all open source, and I'll share all the pieces and parts and everything with everybody.



LEO:  We have a little kitty cat lover in the chatroom, says is it safe for cats?  I would imagine, if it scares dogs or birds, cats aren't going to be happy about it, either.



STEVE:  Yeah, they're not going to be happy.



LEO:  No.



STEVE:  Yeah.  So I don't know what "safe" means.  This is, I mean...



LEO:  Unsafe.



STEVE:  That's why we're just changing it into - I wanted to call it the Sonic Interocitor, but I'm not sure.  And of course that pays homage to one of the best sci-fi movies of all time.  The Interocitor was what Cal Meacham built when he received instructions mysteriously in the mail in the movie "This Island Earth."



LEO:  Oh, wow.  That is an obscure reference.



STEVE:  Well, I'll bet you we've got listeners who go, interocitor?  I remember interocitor.



LEO:  Oh, they love it.  Interocitor.  I know what interocitor - yeah.



STEVE:  Yup.  So...



LEO:  There's another guy in the chatroom says, is there anything that's guaranteed to work on cats?



STEVE:  How are cats bothering anybody?



LEO:  I don't - cats are nice.



STEVE:  They don't bark.



LEO:  No.  They just - their pictures keep showing up on Google+.  That's the only thing wrong with them.



STEVE:  Okay.  So anyway, now, so listeners who want something which is not wimpy, which looks to me like it clearly works...



LEO:  Or sets things on fire.  They have a video on their site from a Tech TV show called "Invent This," in which they show their interest in dangerous stuff.



STEVE:  Yeah.



LEO:  Wow.



STEVE:  So these are not wimpy solutions.  Use at your own risk.  They are available pre-built or also in kit form.  You can buy the plans only and download them immediately online.  Interesting site which I ran across because I was looking for a parabolic dish, and that led me to everything else.  It's not the kind of thing I'm going to build.  I'm going to build something very cool and very powerful.  I have found 200w Class D, which is to say Class Digital switching audio amplifiers, one of which will be used for driving this thing.  And as I pull the pieces together I'll end up sharing it all with our listeners.  But in the meantime there are solutions that exist which do not look like they are wimpy.



LEO:  No, they do not.  No wimpy solutions here.  Couple of people came up with the same thing for you.  Mark Ping in Chico, California says you might be wrong about encrypting first name/last name:  You said there's nothing preventing a service from encrypting our personal info.  But imagine customer service searching the database for a caller's name having to decrypt the name columns before searching.  That's not going to work.  He says, everything besides name info could be encrypted.



And Simon Lyngshede in Denmark argues:  In Security Now! 308 where you and Leo talk about a listener question, the listener asks why customer data isn't always encrypted on corporate servers.  Your answer is it should be and that there's no overhead in doing so for the developers and the company.  I'm currently working on a web shop for my employer, and I'm having a hard time seeing how we should encrypt all customer data without adding a huge overhead.  If you store your customer data in an SQL database, aren't you forced to decrypt data every time you need to look for something?  Let's assume we use your email address as the username.  If this were encrypted, the database would no longer be able to do a lookup.  You would have to decrypt every row on the accounts table to find the account you're looking for.



Similarly, you need to be able to do customer support, and customers are capable of forgetting pretty much everything, which means you need to be able to look through the database tables by name, address, phone, email, pretty much everything.  Having the data encrypted would make it very hard to find anything.  You could either have your application encrypt the input data and simply look for that, but that would mean that queries such as the "select" query, using your name "Steve" wouldn't work, not even if you encrypted "Steve" as the encrypted version would look anything like the encrypted version of "Steve."  Could you share your ideas on how this would work?  I think we probably get the message.  Maybe it was a bad idea.



STEVE:  So my database behind my eCommerce system is encrypted.  And we have, I don't know, hundreds of thousands of records.  And Sue is able to pull up anyone's record instantaneously.



LEO:  So does it decrypt the database and then do the search?  Or does she keep a decrypted version in memory?



STEVE:  No, neither.  The technology is the one you want.  And I do not know what SQL does.  But I do know that SQL does offer encryption.  I just don't know at what level it operates.  And I've never needed to know because I've never used it because I would never, ever use SQL for my own stuff.  This database, my database encrypts it at the block level because encryption is much faster than reading and writing data.  And so, for example, as the data comes off the disk, we just run - it uses Blowfish, as it happens, which is a very fast and secure cipher.  It decrypts this block.  And it may read, like, 16K blocks.  So it decrypts it, and so everything the system sees, the system sees it as in the clear.  Yet what's stored on the disk is absolutely pseudorandom noise.  So if someone were to get into our system and somehow get that data file, it's of absolutely no use to them.



So it's certainly the case that, if you needed to, like, call an encryption function to decrypt a record, then that would be really bad, and it's not what I meant.  And I agree with these guys that, if that's what they're thinking, then they're correct.  You couldn't search the database.  But assuming that SQL's encryption is implemented correctly - and again, I haven't looked at it, and I intended to by the time we had this question come up, but we changed our recording day...



LEO:  Sorry about that.



STEVE:  That's all right.



LEO:  I should mention we did that because - normally we do the show on Wednesday.  We're doing it on Tuesday because we expect Apple to make some big announcements on Wednesday.  So we flip-flopped you with MacBreak Weekly.



STEVE:  Yeah.  So I imagine that next week or the week after we will have listeners who do know the answer to this question, so I'll punt to them.  But it is absolutely possible for the file itself to be kept encrypted and for there to be zero performance overhead.  And I'm hoping that's what SQL did.  And if so, if we've got, for example, Simon, if you could look into that, see if there's a way to perform low-level encryption so that it's on the fly as the data's being written to the drive, then you should be able to perform lookups absolutely without any overhead or problem at all.



LEO:  Well, Tom in Germany says:  No, Steve, you can't encrypt everything.  On Security Now! 308 you talked about the reasons why companies don't encrypt all their user data and mentioned there's no real reason why.  I agree there is no computational overhead and that it can work securely for some services.  These are services which provide infrastructure, but you are the only one with access to your data, for instance, LastPass.  However, the vast majority of services don't work this way.  You and the service need access to parts of your data.  They therefore have to have the key, too; right?  If a cracker gets the database, what prevents him from stealing the keys?



It's the same problem as with DRM on home entertainment products.  As you yourself stated, it can't be secure because key and encrypted data are accessibly by the player, which can be accessed.  If you exchange "player" with "server" and "accessed" with "broken into," you see there's no real difference between stealing plaintext DB files alone and stealing encrypted DB files and the keys.  I'm a security advocate myself.  I think the situation could be improved.  But I respectfully disagree that it's possible to securely encrypt all data in all services.  Please excuse my English, it's not my mother tongue.  Thanks for the great podcast, and greetings to you and Leo, as well.  Tom, your English is excellent.



STEVE:  I was going to say, Tom in Germany's English is much better than Steve in Irvine's German.



LEO:  That's for sure true.



STEVE:  Okay.  So, Tom, I completely agree with you.  It's a function of what we mean by "secure."  Is it more secure to encrypt the data before it's stored on the drive?  And I'm sure you would agree with me that it is more secure.  Is it absolutely unbreakably secure?  No, because you're right, it is very much like the DRM problem, where we know we can't encrypt DVDs because the player has to decrypt it in order to show it to us, and that's in the hands of the consumer.  For example, the attacks we've seen have been files stolen from systems.  And those files, if encrypted, don't do the bad guys any good.  If you could steal them  post-encryption, then obviously the encryption is not helping you, and you're not getting more security.



Yet the cost is so low to store the files encrypted that my point was everything should be.  There is no cost.  It is not perfect security, admitted, because the system can decrypt the data itself.  But it raises the bar substantially for the bad guys to get the keys because they could be stored on a different box, or they could be stored in a YubiKey offline encrypted container.  I mean, there are ways to make the keys much harder to get to than the data.  For example, my system, it derives the key on the fly, and it's nowhere available in the machine.



So, I mean, I may have over-engineered this, but I was designing this with security as a priority.  So you can make it very difficult, if you want to.  Perfect, no.  As we know, you could argue there's no such thing as perfect security.  But the cost is virtually zero to store everything encrypted if you can decrypt it on the fly.  And I'd much rather have my files stored as pseudorandom data so that, for example, if someone came along and grabbed the hard drive, they've got nothing because the keys aren't there.  And there are certainly ways to make that happen.



LEO:  Our last question comes from Simon Hart in Burwell, North Cambridge, England.  He's wondering about ISO files on USB keys:  Steve and Leo, I've been a long-time listener to Security Now!, very much enjoy listening to it, blah blah blah.  I was interested in hearing the episode.



STEVE:  Blah blah blah.



LEO:  Well, everybody says nice things.  Thank you.  We appreciate your nice things.  I was interested to hear the episode recently when one of your listeners recommended burning an ISO to a USB stick in order to create read-only media.  I, too, have been playing with the possibility of using a USB stick for sysadmin.  Actually I'm trying to get multiple ISOs on the stick so you could select the ISO using the GRUB loader from Linux.  I, too, thought this would be a good way to create a read-only environment and was going to suggest it to the show.  However, a doubt crept in before I did.  Surely the reason to boot from read-only media is to avoid the cross-infection of suspect machines.  But simply burning an ISO to a USB key does not make the USB stick read-only.  It just makes the booted environment read-only.  If I put the same stick into an infected machine, the infection can still place malicious files on the USB key, which potentially could cause another machine to be infected.  Or am I missing something?  Simon.



STEVE:  You are missing something, Simon, because that USB stick does not have a file system.



LEO:  Ah.



STEVE:  That is, we're used to thinking of a USB stick as you just store files on it.  So you're not storing the ISO file, that is, .ISO, in like a FAT or an EXT Linux partition file system or NTFS or anything.  You're actually burning the ISO to the USB.  So the USB stick does not have a file system that another computer could write to because it has an ISO CD-ROM file system, which doesn't have the ability to be written to.  The operating system recognizes it as a read-only file system, and it's been created and enclosed, so it cannot be modified.  So it's not a normal read-writable file system containing an ISO file.  It is that file as the file system, so there's nowhere to write to.



LEO:  Well, there you go.



STEVE:  It's a clever solution.



LEO:  Clever.



STEVE:  Now, again, I wouldn't say that it is as secure as a hardware write protection because in theory you could have somebody modify the ISO file system.  I mean, it's not going to happen.  But in theory it could.  So if you're a belt and suspenders person, I would do both:  burn the ISO file system to the USB and have hardware write protection on that USB stick.  And as we know, those are available.



LEO:  Or just use a CD or DVD.



STEVE:  You could do that, too, yes.



LEO:  Steve Gibson is the man in charge of the Gibson Research Corporation.  That's why you'll find him at GRC.com.  You'll also find that that's his Twitter handle, @SGgrc.  And if you go to GRC.com/feedback, you can ask questions for our next feedback episode, two episodes hence.  Are we going to go back next week to the Internet basics?



STEVE:  We're not going to immediately because something came up that just wound my clock.



LEO:  Uh-oh.



STEVE:  Someone tweeted me, his name was Walid, or @Walid on Twitter.  He pointed me to a security breach that has long been standing.  I think 13 years is the number that stands out in my mind.  This was a mistake that was found in the Openwall system.  I think it uses Blowfish as a hash.  The reason I bring it up is that it is a - I've so often talked about using generalities.  I've talked about how hard it is to be perfect with security, how easy it is to make a mistake.  It happens that this particular mistake, which exists in Linux systems all over the world, that has been in the code for 13 years, is a perfect example of something that people could look at day in and day out and never see what was wrong.  It involves the C language.  It involves some things that the compiler does for you that is really subtle.  And I realized that it would make a perfect episode.  I'm going to explain about types and character and integer types and this little bit of code and what it does.  It's going to be a propeller-head episode, one of our ones that's going to make people think.  But I can explain this so that everyone is going to be able to understand it and get it.  And I'm just - I'm excited.



So the Internet series is going to be an ongoing thing.  But when something like this or something really important newsy comes along, we'll interrupt that in order to deal with something else, with How the Internet Works series sort of happening to fill in the gaps in the background.  So next week we're going to take a close look at, you know, we've talked about open source, the security of it.  I've talked about how difficult it is for code to be perfect.  And this is so self-contained and just the right size that I think our listeners are going to have a really fun time understanding a real-world example of how something that is just so obviously correct can be actually incorrect.



LEO:  Great.  I can't wait.  That's next week.



STEVE:  Yup.



LEO:  We do this show normally Wednesdays, 11:00 a.m. Pacific, 2:00 p.m., 1800 UTC.  Wednesdays, live.twit.tv.  Our next show will be from the new Brick House studios down the road.



STEVE:  Yay.



LEO:  I don't know exactly what part of the studio we'll be using.  And we'll be using Vidyo, by the way, Steve.



STEVE:  I'm ready.



LEO:  Yeah.  We'll get you ready on that.  You should look fantastic in high-def.  You can get this show in high-def starting next week, after the fact, at TWiT.tv/sn.  Or, if you listen to the audio, we've got the audio, but Steve's got 16KB versions.  He's the only source for that.  So if you're bandwidth-impaired, or you've got caps or whatever, 16KB versions at GRC.com, along with transcripts, only place you can get those, and full show notes, too.  GRC.com.  And don't forget to get SpinRite while you're there, the world's best hard drive maintenance utility.  Steve, we will see you next week on the all new Brick House edition of Security Now!.



STEVE:  Thanks, Leo.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#311

DATE:		July 28, 2011

TITLE:		Anatomy of a Security Mistake

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-311.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  This week, after catching up with a collection of interesting security events, Steve and Leo take a close look at a recently discovered security coding error, examining exactly how and why it occurred, to understand how easily these kinds of mistakes can be made - and how difficult it can be to EVER find them all.



LEO LAPORTE:  It's time for Security Now!, the show that covers your security and your privacy online.  Leo Laporte here in a little bit of an unusual situation.  This is what we call our "living room set" in the new TWiT Brick House studio.  Steve Gibson is here.  Steve, first of all, thank you for coming all the way up to do TWiT on Sunday.  It was really fun having you.



STEVE GIBSON:  It was a lot of fun, Leo, to be there, to see the first podcast, well, to be part of the first podcast from the new studio.



LEO:  Yeah.  It was a great show, and it was all my old friends, and so that was kind of special.  And normally we'll be doing this show - in fact, if somebody tunes in next week and didn't know that we were at a new studio, they'd probably just think nothing had changed.  But we will be back in my office next week.  And the office is built to simulate the old TWiT Cottage.



STEVE:  Oh, neat.  I think that's great for continuity and, yeah.



LEO:  Yeah, it'll be fun.  But I kind of like this, too.  I mean, sitting here comfortably with you and having you on the monitor and all that, that works pretty well, too.  So today we're going to talk about...



STEVE:  Sort of a fireside chat.



LEO:  ...the Anatomy of a Security Mistake.  What is that?



STEVE:  I am so excited about this episode because it began with someone tweeted me something that they saw and the details of a new flaw that had just been discovered after 13 years in open source code.  It's in the Openwall, in SUSE, in some flavors of PHP, a problem with the implementation of password hashing.  And when I looked at what the problem was, the reason I got excited was it's a perfect example of the thing we've been talking about ever since the beginning of the podcast, of why security is so difficult; how programmers could look at this code as much as they want to, and it would look perfect, but there's a subtle bug in what the code does.



And the reason this captured my imagination for the podcast is that during the, I mean, this is going to be a propeller-head podcast.  This is going to be a "sit down and focus."  But all of our listeners, if they follow with me, I'm going to explain some things about binary representation in computers, how signed and unsigned integers are represented.  We need to have a little bit of that background.  Then I could explain what this one line of code does and why it's wrong and the obvious security implications.  So it's just - it's such a great example, I mean, in the real world, not just generalities, as we're normally sort of forced to use, but an exact explicit example of why security is so difficult.  And so Anatomy of a Security Mistake.  This is going to be a great podcast.



LEO:  I'm the one who always says, oh, use open source software because so many eyes are looking at it, it's so much more reliable, so much more secure.  And this has escaped people for years.



STEVE:  Well, and the way it finally got found was somebody was messing around with password cracking.  And I think it was "John the Ripper" was the program being used.  And his results didn't match what he expected.  And so literally it forced him to drill down into the code, looking for was it his mistake, or was it a mistake somewhere else?  And it turns out it was a mistake in a 13-year-old, it's like since 1998, original Blowfish hashing code where - and I've often said how it's necessary to have a debugger sometimes just hit you in the face with the problem because otherwise you could just stare at it all day, and it just looks fine.



LEO:  A little insight into the world of programming and how easy it is to make mistakes and how hard it is to find them.  All right, Steve Gibson.  I have my notes in front of me.  Let's start with our security updates, shall we?



STEVE:  Well, yeah.  Anyone who's using iOS may have seen that a couple days ago Apple changed the most recent update we got just a week ago.  We talked about 4.3.4, and very  quickly on its tail they updated us to 4.3.5.  There's a different update, I think they're running different version numbers on the CDMA version with Verizon.  But all the AT&T and traditional iOSes and iPads have just been brought up to 4.3.5.  The nature of the problem is really interesting.  From Apple's site, they said under "Impact," they said:  "An attacker with a privileged network position may capture or modify data in sessions protected by SSL or TLS."  So it's like, whoa, okay, that, you know, "privileged network position," we know that that's code for man-in-the-middle-style attack, meaning that there was some way to intercept SSL sessions.  So I thought, okay, well, what's going on?  Their description says - still doesn't really tell us.



Apple said:  "A certificate chain validation issue existed in the handling of X.509 certificates."  X.509 is just a standard formatting for SSL certificates that's industry wide.  They said:  "An attacker with a privileged network position may capture or modify data in sessions protected by SSL/TLS."  That's basically repeating themselves.  "Other attacks involving X.509 certificate validation may also be possible.  This issue is addressed through improved validation of X.509 certificate chains."  Well, yeah, improved.  Listen to the details from the people who discovered the problem, an outfit called Recurity.



The Recurity Lab blog wrote, just yesterday on July 26:, "Recurity Labs recently conducted a project for the German Federal Office for Information Security" - whose acronym is BSI - "which, amongst others, also concerned the iOS platform.  During the analysis, a severe vulnerability" - and they're not kidding - "a severe vulnerability in the iOS X.509 implementation was identified.  When validating certificate chains, iOS fails to properly check the X.509v3 extensions of the certificates in the chain.  In particular, the 'Basic Constraints' section of the supplied certificates are not verified by iOS.  In the Basic Constraints section, the issuer of a certificate encodes whether or not that issued certificate is a CA certificate, i.e., whether or not it may be used to sign other certificates.  Not checking the CA bit of a certificate basically means that every end-entity certificate can be used to sign further certificates.



"To provide an example, when a CA issues a certificate to a website, the CA will usually set the CA bit of this certificate to "false."  Assume the attacker has such a certificate, issued by a trusted CA to attacker.com.  The attacker can now use their private key to sign another certificate which may contain arbitrary data.  This could for instance be a certificate for bank.com" - that is to say anything.com - "or even worse, it could be a wildcard certificate containing multiple common names such as *.*, *.*.*, and so forth.  iOS has been failing to check whether the attacker's certificate was actually allowed to sign subsequent certificates and considers the so-created universal certificate as valid.  The attacker could now use this certificate to intercept all SSL/TLS traffic originating from an iOS device.  However, SSL/TLS is not the only use for X.509.  Every application that makes use of the iOS crypto framework to validate certificate chains is vulnerable."



Okay.  So what's very cool here is that, for any of our listeners who haven't already updated themselves, there's something cool they can do.  If you go to https://issl.recurity.com, these guys have set up a test.  If you use the Safari browser on any iOS device, and you don't get a notification of there being a problem, then you've got this problem.  I tried it on my own iPads this morning, and it's neat.  Well, I mean, it demonstrates the problem.  You get taken to a page that says, if you didn't just see a security popup, you're vulnerable to this.



LEO:  Now, this red screen with the invalid server certificate, that's what I'm supposed to see.



STEVE:  Correct.  That means...



LEO:  I'm doing this on a desktop, which is why I see it.  It's not on iOS.



STEVE:  Right.  And, for example, I tried it under Firefox 5, and I immediately got Firefox's "This connection is untrusted" popup.



LEO:  And that's what you want.



STEVE:  That's, yes, that's what you want to see.  And then the popup said, "You have asked Firefox to connect securely to issl.recurity.com.  But we can't confirm that your connection is secure."  Okay, now, the reason is that the certificate chain is not signed by a valid certificate authority because Firefox is correctly processing the v3 extensions of the certificate, which iOS, until just, I mean, just now - this apparently has been a problem forever.  So Apple has just - it was just now found, and it has just now been fixed.  So, for example, anybody who's got an iOS version not 4.3.5, who didn't just update in the last day or two, will be able to go with their version of Safari to issl.recurity.com and see a page with no problems.  And what that has done is essentially it means that bad guys can sign their own certificates and produce certificates for any websites they want to.  So this is a really bad problem which has just now been fixed and has apparently been a problem since the first iPhone happened.



LEO:  Now, if you got the new iOS update, you shouldn't see that error.



STEVE:  And I did, I updated.  The iPad where I had no problem going to that page, when I tried it again, I just hit refresh on Safari after updating, I got a popup which warned me that iOS was unable to validate the security of this site.  I could look for more details, or I could say ignore it or cancel going there.  So you ought to absolutely see that there's a problem with this when you go to issl.recurity.com after the patch.  But if you have the chance to check it out before the patch, it's kind of fun to see that, whoops, this slipped through.  And it certainly doesn't anywhere else because everything else is checking that flag, saying this certificate cannot be used to sign others, and Apple's not checking that.



LEO:  Archanic (sp) has a good point in the chatroom.  He says you can only update a 3GS or later.  So if you have an older iPhone, this bug is going to persist.



STEVE:  Wow.  That is a problem.  I wonder if Apple will fix that because this is bad.



LEO:  Yeah, I mean, I bet they don't.  Really, honestly, they want you to buy a new phone.



STEVE:  Well, while we're in Macs, a new tool has been created.  And I love this little news blurb because this is something we've talked about, again sort of in a theoretical vein, and it's happened in the real world, as so many of the things that we talk about end up having happened.  This is an expensive tool from a company called Passware.  By "expensive," I mean $995.  And, well, they're getting that much money.  The hackers can do the same thing for free.



So this was an article, I think it was in Wired.com.  It said:  "A new tool can steal your Mac's passwords in minutes, even if the machine is locked, sleeping, or encrypted."  And it turns out this is also true for PCs, for a reason we'll see in a second.  They said:  "Passware can cajole your computer into revealing all its secrets, including login passwords and the contents of its Keychain app, in just minutes.  All someone needs to do is plug in the USB stick with the app in another machine, tap through a few menus, plug a" - and here it is - "Firewire cable into the target Mac or PC and catch the magic.  And it doesn't matter whether you have encrypted your data using Apple's FileVault app or another tool such as TrueCrypt.  The vulnerability still exists."  Now, the moment I saw this I thought, well, yeah, we've talked about this.



LEO:  Right.  You have to store these unencrypted passwords in memory so you can use them.



STEVE:  But more importantly, Firewire is the vulnerability, remember, because Firewire is a DMA interface.



LEO:  Ah, we did talk about this before.



STEVE:  Yes.  So a Firewire device has direct memory access, which is what DMA stands for, into a system's memory.  It's essentially - it's a master on the bus.  And it's able to simply read and write.  Now, as I'm sure that I remember, although I didn't just refresh my memory for the story, there is a means by which the Firewire interface can be restricted in the ranges of memory that any IO devices have access to.  But that's apparently still not being done.  So as you said, Leo, when a machine is in use, even when it's sleeping or suspended, the keys necessary for the machine to use itself have to be available in memory.



[Talking simultaneously]



LEO:  DoubleDJ (sp) in our chatroom says, well, couldn't they be hashed in memory?  But I think you'd have to have them in the clear at some point; right?



STEVE:  Correct.  You could even, if you didn't store the version in the clear, you're still storing the actual in-use code, which is there actually being transacted in memory.  So we've seen code which is able to use the expanded version of the password in order to reconstruct what the password is.  So this is definitely a vulnerability.  But what I would do, certainly on the PC I know it's possible to disable your Firewire interfaces.  And if you're not someone who uses Firewire, absolutely arrange to disable it completely if you can because it's a big, glaring hole.



LEO:  I presume they're going to fix it.  And the other point to be made is somebody has to have - and we talked about this before with the freezing the memory thing - somebody has to have access to your physical hardware.  And if somebody has access to your computer and the hard drive, you've got a whole passel of other problems anyway.



STEVE:  That's really true.



LEO:  They're got your stuff.



STEVE:  Although you might assume that locking your machine or sleeping it or putting it in standby would protect you.  And in this case it doesn't because it does have access even in those modes.



LEO:  Right.



STEVE:  Okay.  So a bunch of people tweeted me about this Apple battery pack hack.  What's interesting is it was discovered...



LEO:  I love this story.



STEVE:  It's a wacky story.  It's by a really good guy, or a true hacker who's not a hack.  Charlie Miller we've spoken of before because he's a repeat winner of the Pwn2Own annual hacking competition.



LEO:  They call him "Safari Charlie" because he always wins by hacking Safari.  That's his nickname.



STEVE:  Yup.  So he will be revealing all the details and showing this at the forthcoming Black Hat conference on August 4th.  What he discovered was, he was poking around in the Mac, as always, and something caused him to do some research into the Apple firmware management for their battery.  Some years ago Apple updated the firmware on their battery controller for the MacBook Pro.  Charlie went back, found the patch, reverse-engineered the patch code which is able somehow to talk to and unlock the controller, over which there's not much documentation.  And he discovered that every Mac ever made has the same password used to unlock the microcontroller which controls the lithium polymer prismatic battery used in all MacBook Pros.



LEO:  Now, what does "unlocking a battery" mean?  I don't even understand what that means.



STEVE:  So, well, it's a funny coincidence because I'm super current on this because I've been researching battery management for this portable device that I'm in the process of getting ready to build.



LEO:  The dog annoyer.  The crow destroyer.



STEVE:  Exactly.  Yeah, it turns out that, in order to generate 150 watts of continuous RMS power, which is what this thing will be able to do, I mean, this is overkill in every sense of the word, this little portable device needs to generate 110 volts, peak to peak, at 12 amps, from a battery system.  So I need to have, because I'm using what's called a "full wave bridge" amplifier for this 4-ohm super tweeter, I need to have 55 volts of DC.  You get that by putting 15 cells of lithium polymer batteries in a chain.  Each cell is...



LEO:  Couldn't you just use a car battery?  Wouldn't that be more efficient?



STEVE:  No, no.  And in fact the way audio amplifiers in cars, in autos work, they only have access to 12 volts.  Of course, they have access to lots of amperage.  So in order to drive, in their case, probably 8-ohm subwoofers and 8-ohm speakers, 12 volts will not do the job.  You can't just switch 12 volts into 8 ohms and get the kind of power which we know deafens teenagers' eardrums who are driving around in these cars.  So what they have is they have a switching power upverter which takes the 12 volts at about 100 KHz.  They switch it back and forth.  They use 100 KHz because that allows them to use a much smaller core on a power transformer to step up the 12 volts, up to something like 50 volts.  Then they rectify it, filter it, and then amplify that.  So in my case I don't need to do that because I can just use three 18.5 battery packs.  It turns out that the RC model industry has a great need for high-power DC for their high-end, high-performance helicopters and planes and cars.



LEO:  Right.  And they need to be light.  You need a lot of juice in a small, lightweight package.



STEVE:  Exactly.  So I use three five-cell packs, giving me a total of 15 cells.  So but I thought it would be fun to learn about managing these batteries.  Well, it turns out that all of our laptops do that.  And if anyone's ever looked at the battery connectors we now have on all of our laptops, you'll notice that it doesn't have just like a big plus and a minus connection.



LEO:  No, no, no.



STEVE:  It's got a comb.  It's got a series of connections.  What those are, those are taps into every cell of the battery.  And the word "battery" itself means a bunch connected together.  It's a battery of cells that our laptop is using because the laptops need also more voltage and more current.  So our laptops essentially feed out of every connection between the cells and the battery.  They feed that out.  In the laptop then is a battery management system which deals with charging and discharging the batteries.



The reason you need to look at each cell is that cells don't all have, just coming from the factory, they don't all have exactly the same power handling.  And so there will be one or two cells that will be just characteristically weaker than the others.  So over-cycling these up and down and up and down and up and down, just through daily use, one or more of the cells will end up with a lower voltage across it than alternative cells in the pack.  So it's called "cell desynchronization."  And this ends up shortening the total lifetime of the battery pack.



So what these battery management systems do is they look at the individual charge across each cell.  And they will bleed the cells that have a higher charge a little extra down to match the cell with the lowest charge.  Or during charging they will shut some of the charging current around the higher charge cells, again in order to sort of automatically rebalance the charge in each cell of the pack.  So there's much more going on here than typical users are aware.  And there's even freeware that is available that for matching controllers you're able to look inside this and look at the voltage of each cell in your pack, see how many cycles it's had, the current charge state and all this other information.



So what Charlie learned was that by deliberately and maliciously reprogramming the firmware in his battery microcontroller, he was able to brick a number of batteries.  He basically killed six batteries.  And these are $130 MacBook Pro batteries.  One of the things that every battery has is a management chip which prevents the battery from ever being used if it drops below about 2 volts, and ever allowing a charge of more than 4.2 volts.  So if anyone's ever had the experience of a lithium ion battery appearing to just be completely dead, what actually happened was that one or more cells in the battery dropped below 2 volts.  And at that point it is essentially taken offline, and you are never able to use the pack again.  So what Charlie was able to do was to prevent the technology that limits the discharge to 3 volts, allowing it to go lower and pass under that 2-volt threshold, and then you are never able to recover from that.  So at this point nothing has been done, that we know of, maliciously.



LEO:  Could you make it blow up??



STEVE:  But everyone knows that this is now possible.  And it's going to cause some serious problems if Apple doesn't get on the stick here and randomize the password on all of their machines to prevent people from being able to go into the microcode.  The problem is, once they do that, they will never be able to patch the microcode of their own microcontrollers again.  What Apple can patch, bad guys can, too.  So this is an interesting little hack.



LEO:  Yeah.  Can they make it blow up?  I mean, could it be explosive as a result?



STEVE:  He has posited that it's possible, although he's never made it happen.  I'm suspicious of that.  I can see how you could brick them by allowing them to over-discharge.  But there should be per cell overcharge protection.  And in fact it's in battery packs that don't have that that we have seen fire problems.



LEO:  So you couldn't override it in the firmware.



STEVE:  I don't think so.



LEO:  No, that wouldn't make sense.



STEVE:  Because there's firmware management that's outside the pack that lives on the motherboard.  But then inside the pack itself there are per cell chips which prevent individual cells from ever being overcharged.  They will just refuse to allow that cell to take an overcharge.  And they also monitor the cell temperature and will cut off if the cell gets overly hot.  So I'm almost sure you cannot make anything explode.  But once you drive a cell down below 2 volts, it's over.  That entire pack is an expensive $130 paperweight.  And that you can do by misprogramming the firmware.



LEO:  And again, you'd have to have physical access.  Oh, maybe not.



STEVE:  No, no.  This is...



LEO:  You could do this in software.



STEVE:  Yes, this is a 100 percent software glitch.  So he did notify Apple several weeks ago of what he found, and that he would be talking about this on August 4th.  Here we are toward the end of July, and everyone knows about it now.  So you can imagine there are some bad guys rubbing their hands together, thinking this would be a fun piece of malware to deliver when people surf to malicious websites.



LEO:  Heh, heh.



STEVE:  Yeah.  Okay.  Under Miscellany, I upgraded to v5 of Firefox.  And I'm not sure whether it was doing that or whether it was a new version of Certificate Patrol, but my Certificate Patrol, which I love and have talked about often, suddenly got very noisy.  Essentially it seemed to have forgotten all the sites I had ever been to, and it was popping up a dialogue, like, all the time.  Anytime I established an SSL connection that I hadn't established recently, I got a popup.



Well, that's old behavior.  The new behavior is also - it was graying out the Okay button, not allowing me to click it to dismiss the popup and allow the page to display, which was really annoying.  They've added a new feature which I don't need, and I don't know why it's there because it's just useless.  So the good news is, and I wanted to share this with any other listeners who have had similar problems, but even if you don't upgrade to 2.0.8, Certificate Patrol is customizable in a way that I never bothered to before, but now I wish I had, and I have now.



So if you go under Firefox's Tools menu and then choose Add-ons, and then from the Add-ons page choose Extensions, and then under Certificate Patrol they've got an Options dialogue.  That pops up a dialogue that now has four options.  The first one, that was enabled by default, says, "Newly accepted certificates are always shown in a popup by default."  I have now turned that off, vehemently.  Because I really don't care as new certificates are being shown.  What I care about is any changes to those.  That's the significant value that Certificate Patrol offers.



Well that's the second checkmark that says, "All certificate changes, even harmless ones, are always shown in a popup by default."  And so I left that on, which I think is a good thing.  And then there's also, "Show already accepted wildcard certificates again when they match in a new hostname."  Well, I was glad to see that there was an option for that.  I turned that off because Google, for example, uses a *.google.com, and I was getting gmail.google.com, secure.google.com, googleplus.google.com, it was like all these *.google.com certificates.  And it's like, that was just boring.  So I'm happy to turn that off.



And then I turned on, which wasn't the default, and users can choose to or not, the last option is "Store certificates even when in Private Browsing Mode."  Well, I'm not a big user of private browsing mode due to the nature of my environment here.  But if I am in private browsing mode, I think I'd like to have certificates stored.  The concern is that this might be a bit of a privacy breach because, if someone looked at the storage certificates, they would know where you had been, even if you were in private browsing mode.  So you might want to leave that off, just so that private browsing stays absolutely private.  In my case, I don't really use private browsing mode, but I would like to have it store those even when I am in private browsing mode.  So that's what I said.



So that's just a tip for people using Certificate Patrol.  Mine has just gone completely quiet now, and I'm much happier with it.  I know that it will let me know if something wacky happens, and that's really why I have it in the first place.



LEO:  Yeah.  You don't need to know about harmless certificate changes.  Thanks for letting me know, but I'll pass.



STEVE:  Yeah.  Well, I know that a lot of listeners will just find it interesting to know that a certificate has been changed, it's like expired.  And I think Twitter has had a lot of recent changes because I got some tweets from people saying, hey, Steve, have you noticed that Certificate Patrol is telling you about those?  And it's like...



LEO:  Yeah, I saw somebody in the chatroom saying that today, yeah.



STEVE:  Right.  I am wrapping up my reading of "Daemon."  I wanted just to give another shout-out to it.  Many of our listeners have started, and I've had a flood of positive feedback...



LEO:  Great book, yeah.



STEVE:  ...from the recommendation.  And I will be shortly on to "Freedom," the sequel to it.



LEO:  "FreedomTM."  Remember the TM in the word.



STEVE:  Ah, okay.



LEO:  It's important because there's a lot of books named "Freedom," including a big bestseller this year called "Freedom" by Jonathan Franzen.  So it's "FreedomTM."



STEVE:  Okay.  And there is a - someone asked me where to find it, and there is a "Daemon" website.



LEO:  Oh, yeah.



STEVE:  So you can just put in, like, "Daemon the book" into Google, and it will take you to the "Daemon" website where you can find this and links to Amazon for downloading it for Kindle and so forth.



LEO:  Daniel Suarez is the author.  That will help you find it, too.  He's great.  We're going to have him on the show soon because his new book is due out soon.  But he's just done such a great job.



STEVE:  A third book?



LEO:  Yeah.



STEVE:  Oh, cool.



LEO:  He's been working on it for over a year now.



STEVE:  Cool.



LEO:  Yeah, it's supposed to be out soon.



STEVE:  Someone tweeted me, when I was talking about coming back to the animal annoyer product that I don't - or project - that I don't have a good name for yet.



LEO:  That's a euphemism.



STEVE:  Someone tweeted me a recommended schematic capture and PC board fabricator.  And I just can't find it back in my Twitter feed.  So I wanted to give a shout-out to anyone who has a recommendation.  That person, again, if you could tweet it to me again, I'd appreciate it.  And I'll make sure I don't lose it this time.



And I did have a fun and always different SpinRite story to share from Mike DeLucia, who wrote, "SpinRite Story:  Happy but Confused."  He said, "Steve, I'm a Security Now! listener and registered SpinRite owner of many years, though I just had my first 'opportunity,'" in quotes, "to use it.  The experience left me happy but confused.  Let me explain.  The other night we had a lightning storm.  And though my system was turned off and unplugged, I believe a very close lightning strike may have caused a problem."  Yikes.



LEO:  Oh, sure.  Oh, sure.  Having it turned off does nothing.  Unplugged is not good.



STEVE:  Exactly.  And if he was, like, still connected to his Ethernet, then that's the way in.



LEO:  Right.



STEVE:  He said, "When I booted my system, it booted okay but immediately started acting strangely.  Responses to my commands caused it to slow to a crawl.  I'd launch a program, and it would literally take a minute or so to respond, all the while showing the busy circle thingy."  He says, "I rebooted, same thing.  So I booted SpinRite, ran it at Level 2.  It ran for about an hour and stopped, displaying a red 'division overflow error' dialogue box."  Now, that's actually SpinRite monitoring its own math in order to see and catch if there's a problem.



So he said, "The dialogue displayed a bunch of hex info like 'error occurred at bo4eeax blah blah blah blah blah,' and asked me to write down all this data and reboot SpinRite.  It also said, I believe, that SpinRite would ask for this data to aid in its repair process."  And actually that's not the case.  What it said was that, if the problem persisted, that you could use that, send that to GRC support, and we'd be able to figure out what happened and fix it if it was a problem at our end.



Anyway, he says, "I rebooted but could never see anything different than the normal SpinRite process.  I thought it was going to ask me for the data I copied.  Confused, I restarted Level 2, figuring I'd get the same error and reread the directions.  To my amazement, I never got that error message.  Instead, SpinRite stopped about 14 percent through and began analyzing a certain portion of the disk.  It stayed there for over two hours until I went to bed with it happily analyzing away.  I awoke this morning to a green dialogue box stating that SpinRite had completed all of its work.  And the best news is that all is well with my system now.  As I wrote, 'happy but confused.'  What happened?  Did I miss something in the red error message that asked me to save and reenter data when asked to do so?  I was never asked."



LEO:  I'm happy but confused.



STEVE:  "Anyhow, I thought I'd share the story.  Thank you for all you do for the community.  Peace, Mike DeLucia."



LEO:  That's great.  All right, Steve.



STEVE:  Okay.



LEO:  Let's talk about it, the Anatomy of a Security Mistake.



STEVE:  Okay.  So I want to give Walid credit.  He's @walid.  It looks like Walid Damouny tweeted some time ago, a few weeks ago.  He said, "This is a month old, but I ran into it only today:  a hole in crypt_blowfish."  And he gave me a link to an article.



So this is a password-hashing library where Blowfish encryption, which is a well-known standardized encryption library, is being used to hash passwords in PHP, some popular Linux distros, Openwall Linux - that's OWL - SUSE, ASP Linux, ALT Linux, and Annvix, which all use this crypt_blowfish for hashing their password databases.  And this was discovered by someone using a  "John the Ripper" password cracking program because he wasn't getting the results that he expected from his code.  And by drilling down into the system - and that's an advantage of open source.  Even though this problem did exist for 13 years, since 1997 or '98, an advantage of it is that he was able - he had access to the source, so he was able to figure out what the problem was.  So I love this because I can, in the course of this podcast, in an audio-only channel, I can explain this.  And it's just it's a toe-curlingly cool mistake.



Okay.  So we need to first understand about how numbers are represented by computers.  So we need a little bit of a foundation paving in some fundamental technology of binary numbering and computers.  And this is relevant, not just to this mistake, but to everything.  This is the way computers work.  We know that computers store numbers in binary.  And, for example, zero, the number zero, is however long the word is.  It might be an 8-bit byte.  It might be a 2-byte, 16-bit value or, for example, a 4-byte, 32-bit value.  The value zero is just universally agreed is just all the bits are set to zero.  If we want to store a one, we set the first bit to one.  To do a two, we set the second bit on and the first bit off.  And to do a three, the first bit and the second bit are both set on, and so on, in sort of binary counting mode.



In the same way, another way to think about this is everyone's familiar with decimal, where the units, like the first position is the units position that can have a value of zero through nine, then the next position is the tens position that can have a value of zero through nine, and the next position is the hundreds position.  So there, each digit in decimal has 10 times the value by, like, the value weight of the prior one.  In binary, since we only have two values, each position has two times the value of the prior one.  So one, two, four, eight, 16, 32, 64, 128, 256, 512, 1,024, 2,048 and so forth, numbers which low-level geeks learn very early in their programming career.



So the question is, given that binary - for example, say we had an 8-bit byte.  If all bits off is zero, then if we have an unsigned value, all bits on, we've often talked about, is 255 because that's 128, which is the amount represented by the eighth bit in the byte, so it's 128 plus 64 plus 32 plus 16 plus 8 plus 4 plus 2 plus 1, which is the sum of all those values, gives us 256 as the maximum unsigned value.  But what about if we want to store a signed value, meaning it could have negative values?  If we start with zero and go upwards, towards in the positive direction, we know that we, essentially counting in binary, we have the binary one, then two, then three, then four, then five and six and so forth.  If we subtract one from zero, what happens is, with binary subtraction, we go to all ones.



So whereas that all ones note, that all ones value, if the word were unsigned, is equal to 255, if we treat this byte as a signed value, then negative one is all ones.  And then all ones except the first bit being on, if the first bit's off, that's negative two.  Then all ones except the second bit being off and the first bit on is negative three.  And negative four is all ones but the first two bits off, and so on.  So you sort of - you subtract backwards from all ones in order to get negative values.  And the same thing applies if we had two bytes, then that would function, or three bytes or four bytes or eight or however many.  And this is called "two's complement arithmetic."



There's a simple way of essentially negating a value with this kind of representation, which is you invert the number - you invert all the bits and add one.  So, for example, say that we had zero, the value zero.  If we invert them all, that turns all the bits to ones.  And if we add one to that, that overflows in binary, bringing it back to zero.  Which means that zero and negative zero are the same value, which makes sense.  That's what you'd expect.  If we had a one, and we wanted to make it a negative one, well, so we had - if we had a one in the register, which would be the lowest bit is one, and everything else is zero, we invert all the bits, so now they're all ones except the first one, which is zero, and add one, making them all ones.  And as we know, that's the value for negative one, if we have a signed representation.  So, okay, so there's our little tutorial on the signed representation of binary values in computers.



LEO:  This bites people all the time, by the way.



STEVE:  I'm sorry?



LEO:  Signed versus unsigned.  It's always biting people.  You see these bugs a lot.



STEVE:  Yes.  Well, it bit this guy.  It bit this guy.  So with that understanding, we have a hashing algorithm which takes in input characters.  And as we know, characters in, for example, ASCII are a byte size.  And that is to say eight bits.  But the encryption system works in 32-bit chunks.  So we needed an algorithm which could take in eight-bit characters one at a time and essentially sort of stack them up into a 32-bit value, so it would take four eight-bit characters and sort of fill a 32-bit register and then do something else with it.  So it would accept them sequentially and fill this register.



So in terms of the algorithm that's used, and this is what's in the source code for this system, this 32-bit register is set to zero at the beginning of one of these four-byte shifting loops.  So it's set to all zeroes.  Then whatever happens to be there is shifted to the left by eight bits, meaning that everything in the first, in the lowest byte is moved over to the next byte.  Everything in the second byte is moved over to the third.  Anything in the third byte is moved over to the fourth.  And nothing in the fourth byte ever falls off the end, which would otherwise happen, because this is only done four times, just enough for the value going in to move, like the first value that goes in to move all the way over to the fourth byte.  And so each time this is done, whatever is in this 32-bit register where we're assembling these characters, whatever is there is moved over by a byte.  And then this new character is ORed in.



Now, we know from talking about logic the way logic works.  If you have a register which is all zeroes, and you OR something into it, what you just get is the result will be what you ORed in because zero ORed with anything is whatever you ORed.  So the act of shifting this 32-bit register eight bits to the left always results in the lower eight bits being zeroed because that's the way the shift operation functions.  And then we OR this new character in, which essentially puts it into the lowest byte of this 32-bit register.  And that's done four times in order to accept four characters, four of these byte-size characters, one at a time.  And we end up with a 32-bit value.



And so looking at the code, you can see that that's what this does.  And, I mean, it looks just fine except that the character was defined just as a char, c-h-a-r, in the C language that this was written in.  And a char is a signed value by default in C.  I don't know why that's the default because it doesn't make any sense for char to have a signed value.  But typical values in C are signed, unless you override them by declaring them as an unsigned char or an unsigned short integer, depending upon the language convention.  So this char value by default is a signed value.



Well, what C, the language C, observes when the programmer is ORing this character value into a 32-bit value, it sees the sizes are different.  You're trying to OR an eight-bit value with a 32-bit quantity.  And we know that's what the programmer wants to do.  But the compiler says, wait a minute, we need to sort of pad out that eight-bit value to 32-bits in order to OR it in.  Except that, because it is a signed value, the compiler does something called "sign extension."  And what a sign extension does is it duplicates the highest bit in the value - remember that that last bit is set to a one.  As soon as that value goes negative, we end up with, like, 1111111, all the way out, so that the highest bit in the binary quantity is considered to be the sign bit.  If it's set, that means that the rest of the bits determine the amplitude, essentially, with that high bit determining the sign, positive or negative.



So the compiler sees that the programmer is ORing an eight-bit signed value into a 32-bit register; and, wanting to do the right thing, it sign extends.  Which means, if the eight-bit value had its high bit set, all the other bits get set to one, and then that 32-bit quantity is ORed into this register.  Well, ORing ones into the register sets all the bits to one.  Which means, since this is being shifted over three times, as soon as you attempt to merge a character that is negative, that is, whose sign bit is set, all the prior characters, that is, up to three previous characters that may have been ORed in and shifted previously, are wiped out.  All of their bits are set to one because this character we're ORing in had its high bit set.  The C compiler said, oh, well, we're ORing in a signed value.  So we need to preserve the sign of this eight-bit byte when we convert it into a 32-bit value.  Doing that sets all of the other 24 bits to ones.  Then that 32-bit composite is ORed in to the register, setting all of its 24 bits to one, so essentially overwriting, over-ORing whatever was there before.



So the consequence of this tiny mistake, where the compiler did technically what it was told to do but not what the author certainly intended because they never intended for the sign extension to be applied and wipe out the three previous things that had been ORed in and shifted over, is that only every fourth character in the user's password is significant.  So...



LEO:  [Laughing]



STEVE:  Isn't that a cool mistake?



LEO:  Wow.  And, you know, it's the kind of thing, when you're reading the code - because you have to really intimately understand what a compiler does.  So when you're reading the code, you may not realize that that's how the compiler's going to react.  You see the programmers' intent instead of seeing what the result is going to be after compilation.



STEVE:  Yes.  And so - exactly.  And I've often talked about how seductive a process it is to read someone's code.  You get into their mindset.  You're looking at what they're doing.  And you're going, okay, now we set the temp to zero.  Yeah.



LEO:  I get it.  I get it.



STEVE:  We shift the temp over by eight.  Yeah.  And then we OR this in.  Yeah.  I mean, and so it takes, literally, it takes truly watching the code execute.  And then it's like, oh, my god.  And then it is so obvious, once you see it, what the mistake is.  And I have to say, this is one of the benefits, one of the beauties of coding in assembler because nothing is done that you don't explicitly ask for.



LEO:  There's no compiler in between saying, oh, this is what you want to do.  You're telling it.



STEVE:  Exactly.  There is...



LEO:  There's no s-e-x happening unless you say so.



STEVE:  Correct, exactly.  There is a MOVZX, which is move zero extend, and MOVSX, which is move sign extend.  So those are the lowest level operations in assembly language that correspond to those exact instructions on the machine.  Now, C was invoking move sign extend without it being obvious.  But when you're coding in assembler, if I were writing this code, I'd say move zero extend because I would have to explicitly make that conversion from a byte to a 32-bit object.  And knowing that I'm about to OR that thing in, I would never sign extend.



And so, again, the compiler, sure, it's easier to use.  But a tiny mistake like this ends up being a problem.  And in the updated source code now there's what's called a "cast" in front where it says in parentheses "(unsigned char)."  So it's overwriting the default char declaration of that byte, saying, "C compiler, treat this as unsigned."  So that's all that had to be added to fix this bug.  Which caused, if you were typing in a password, you'd type in the first character, it would go into the first byte.  You'd type in the second character, they would move the first one over and put the second one in.  You'd type in the third one, it would move the first two over, put in the third one.  You'd type in the fourth one, it'd move the first three over, put in the fourth one.  But if that fourth character had its high bit set, it would wipe out the previous three.  So the bug was that passwords are hugely reduced in strength so that only every fourth character is significant.



LEO:  So if you had an eight-character password, you've only got a couple of letters in, yeah.  It's very...



STEVE:  Only two characters matter.



LEO:  Yeah, very easy to crack.  Wow.



STEVE:  So in concluding, in the real world consequences for this from the pages where this was discussed, the guys who went through this said:



"The safest solution for administrators with potentially bad password hashes" - because what this means is that all of the passwords which had ever been hashed by this are weak, you know, they're all bad.  They were hashed only using every fourth character of what the user put in.  So they said, they wrote:



"The safest solution for administrators with potentially bad password hashes, which could include those running Openwall Linux (OWL), SUSE, and ALT Linux [and so forth],  which can ... use [the] crypt_blowfish for hashing the password database, is to invalidate all passwords and have their users input new ones.  That could prove to be a logistical nightmare, however, depending upon how easily and securely users can set new passwords without authenticating with their existing password.  Requiring that users change their existing passwords after logging in is an alternative, but one that might give attackers a window in which to operate.  It also leaves passwords unchanged for any users that do not log in.



"The risks of attackers using this flaw to log into a site are likely to be fairly small, but they do exist.  If a site's login process is susceptible to brute-force attacks, this bug makes it somewhat easier to do so, at least for specific password types.  On the other hand, if the password database has been exposed, and some passwords were not crackable, at least for attackers using cracking programs other than JtR, this information [that has now been released] would give them the means to crack those passwords [much more easily].  In the end analysis, it is an exploitable hole, but not the kind to send administrators into panic mode."



LEO:  And you can't just fix the library because then the passwords stop working; right?



STEVE:  Correct.  And in fact the patch now that brings us to 1.1, it actually has an "if" statement where they formally say "signed char," and the "if" is controlled by a new parameter to the Blowfish set key function which is called "sign extension bug."  So you can call this asking for the sign extension bug in order to allow people to perform both the old-style hash and the new-style hash, if you want to do this kind of sort of seamless migration from the old to the new.  And then they said:



"It is somewhat amazing that this bug has existed for 13+ years in a fairly widely used library.  Up until now, no one has tested it in this way, at least publicly, which should serve as something of a warning to those who are using well-established software, both free and proprietary.  With free software - [for example] crypt_blowfish has been placed into the public domain, which may be a bit legally murky but is in keeping with free software ideals - there are more and easier opportunities to examine and test the code, but that's only effective if the testing is actually done."



LEO:  Yeah.  That's what I was saying at the beginning.  It's open source, which means people can look at it.  But they've got to look at it.  And they've got to look at it with a certain kind of mindset.



STEVE:  Actually, I would argue you can't look at it.  You have to test it.  And that's...



LEO:  Yeah, you have to look at a debugger and watch it happen.



STEVE:  Yeah, well...



LEO:  I mean, I guess if you're looking for unsigned problems with unsigned chars or signed chars, you might be smart enough now to look at code and say, oh, they're assuming that it's going to be treated as unsigned, but it won't be.



STEVE:  Well, and they said:  "There are, without doubt, bugs still lurking in various security-oriented libraries that we depend upon every day, so testing those libraries, as well as code that is not being used for security purposes, regularly and systematically can only help find them.  While it took more than a decade for this bug to come to light, it's worth pointing out that it certainly could have been [observed] by others in the interim.  Attackers clearly do their own testing and are generally not inclined to release their results.  That may not be the case here, but one should always recognize that public disclosure of a vulnerability is not necessarily tied to its discovery."



LEO:  It could have been discovered a long time ago.



STEVE:  Exactly.



LEO:  Seems like the kind of thing that a lint program, or a program that - automated program that goes through code might give you a warning saying, hey, you know, this is an unsigned char, but you should be aware it might be treated as signed, or something like that.



STEVE:  That's a very good point.  Now, I mean, it's hard to see why you would ever want a signed extension ORing different-size things.  That is to say, because that's always going to wipe out the rest of the bits of the thing you're ORing it into.  It will always do that.  So you're right, Leo, a code analyzer that would say, well, you know, this is questionable, did you mean this, that would bring it to a programmer's attention; and he'd go, oh, crap, and immediately say "unsigned char," casting that particular instance.  Or just declaring it in the original declaration as an unsigned char would also prevent the problem.  So just a cool mistake that I would imagine our listeners who closed their eyes and followed along with me understand now.



LEO:  It's fascinating.  It really is.  I mean, it's one of those things where, you know, I was reading an article the other day about Google, and they have a thing called "code review" where your peers review - all code before it's put into production at Google is reviewed by your peers.  And they even talk about this in a code review situation.  It's very frequently that, as you do a code review, you kind of want the code to work, and you kind of understand the mindset of the programmer.  And this is not what should be happening in a case like this.  You should probably be running it through a debugger and watching it, watching the data change.



STEVE:  Well, and if you think about it, too, a malicious hacker wants to find problems.  They're inherently looking at every single line, saying, okay, can I exploit that?  Can I exploit that one?  Can I exploit that?  You're right, Leo, it's a different mindset.  And I don't know that somebody on your team can develop that same kind of truly adversarial mindset.



LEO:  Right, yeah.  You've got to have the hacker's brain.  Steve, always a great pleasure to do this show.  And this is a fun one.  This is the kind of thing that I think people really love the show for because it's an insight into how code is written, mistakes that are made, and how hackers work, as well.  Really great stuff.



STEVE:  And it really did happen.



LEO:  Yeah.  Steve's got GRC.com, the Gibson Research Corporation.  That's where you can find SpinRite, the world's finest hard drive and maintenance utility, GRC.com.  You can also find this show and all the previous shows, all 310 previous shows, including 16KB versions for the bandwidth impaired, transcripts, and all the show notes, as well.  GRC.com.  Next week we're going to do a Q&A, so that means, Steve, people should go to GRC.com/feedback and leave their questions about this or any topic we talk about or anything that's on your mind, GRC.com/feedback.



And when you get there, by the way, lots of free stuff Steve puts out like Wizmo and DCOMbobulator, the Password Haystacks.  Just browse around the site.  There's a ton of good stuff at GRC.  Thanks, Steve.  It was so great seeing you on Sunday.  Thanks for coming up for the show.



STEVE:  Glad to do it.



LEO:  Really appreciate it.  Thanks for putting up with our new studio and the little bits and pieces we're getting working.  I think we're getting it down, though, I have to say.  This show next week will be in my studio, so we'll have to start all over again...



STEVE:  Okay.



LEO:  ...debugging.  We've got our own debugging to do.  Steve Gibson, take care.  We'll see you next week on Security Now!.  Bye bye.



STEVE:  Thanks, Leo.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.






GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#312

DATE:		August 4, 2011

TITLE:		Listener Feedback #123

SPEAKERS:	Steve Gibson & Tom Merritt

SOURCE FILE:	http://media.GRC.com/sn/SN-312.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Tom discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



TOM MERRITT:  This is Security Now! with Steve Gibson, Episode 312, recorded August 3rd, 2011:  Your questions, Steve's answers, #123.



It's time for Security Now!, the show that helps you stay safe online.  I'm Tom Merritt, filling in for Leo Laporte, who's at jury duty, trying to stay securely off a jury.  But joining us, the star of our show, Mr. Security, the man behind GRC.com, ShieldsUP!, SpinRite and more, Mr. Steve Gibson.  A pleasure to be talking with you again, Steve.



STEVE GIBSON:  Likewise, Tom.  I got to see you when I was up last Sunday for the flagship mission of recording TWiT with the gang.  So that was fun.  And it's great that we have you to help out when Leo is otherwise occupied.



TOM:  It was great to see that you actually have legs.  You're an entire human being.



STEVE:  Yup, they're all here.



TOM:  Yeah, a torso below the waist.  So, good.  And you're coming up for the party, as well; right?



STEVE:  Yeah, I'll be back.



TOM:  Excellent.  I can't wait for that.  We've got some great stories to talk about today, and a question-and-answer episode.



STEVE:  Yup, this is, well, this is actually an important episode also.  I realized, wait a minute, 312, why does that number seem special?  Well, six times 52 is 312.  So this is the last episode of our sixth year of Security Now!.



TOM:  No kidding.



STEVE:  Yeah.  And our 123rd Q&A that we've adopted to give our listeners a chance to have their voices heard and provide some feedback and ask questions and just sort of close the loop, being social, as we all are these days.  So we've got another great podcast, I think.



TOM:  Well, I am honored to be on 312.  And you've been doing Security Now! longer than TechTV lasted.



STEVE:  Yeah, that's true, yeah.  And the finances are even more sturdy than TechTV's were.  So, yeah.



TOM:  For sure.  Let's get into the security news.  Now, there is a - we talked about this in the pre-show.  There's news going around from McAfee putting out a press release about something called Shadow Rat.  We're not going to talk a lot about that, though, because it's just, as you put it, Steve, the news is, wow, hacking still happens.



STEVE:  Yeah, I mean, I saw the news.  I thought, okay, what is this?  And I expected to see some big new deal.  And then I realized, wait a minute, this is not a big new deal of any sort.  McAfee's basically saying, oh, for the past five years there has been an organization, and they do believe it's one group, that have penetrated a number of different companies and entities of various sorts.  It's like, okay, and this is news how?  And so we have talked about RAT before on the podcast, the Remote Access Trojan tool that is often used, that people get infected with.



And in fact there was some - it may have been that that was believed to be implicated in the now very famous RSA break-in, that that was the tool that was used.  Some unwitting support person opened a document and got themselves infected, and that gave them a foothold into RSA's network.  But it's like, okay, so this has been going on for five years.  It felt more like McAfee just sort of trying to generate some news for themselves.  So I thought, well - I didn't have it on my list.  So we certainly have covered it, in any event.



TOM:  Exactly.  We've probably over-covered it.  Our next story, water is wet.  No, our next story is about a new anti-censorship system.



STEVE:  It's really interesting.  A number of people tweeted me about Telex.cc.  And, I don't know, maybe I'm getting jaded or something.  I just thought, okay, what now?  I guess I'm not too interested generally in anti-censorship.  It's a little bit off the map.  But when I saw what these guys did, what they had done, suddenly I got very interested.  So here's the deal.  They talked about how TOR, which we've talked about, the onion routing technology, which securely encrypts hops from one onion router to the next in a way that no router in the chain is able to determine anything but where it needs to send the packet on to.  And so it decrypts in a series of layers to really provide extremely good anonymity.



TOM:  That's why it's called The Onion Router, because of those layers.  That's the metaphor there.



STEVE:  Precisely.  However, it provides that, but it does not hide the fact that you're using it.  So it doesn't provide you anonymity in that sense.  It only provides you security against eavesdropping.  But, okay.  So here's the problem with censorship in general is that, for example, to take China, if you're in Beijing, YouTube is blocked for you.  So you're unable to access YouTube and any of a number of different services that the government doesn't want you to have access to.  So of course services like TOR, which are identifiable, are also blocked.



So a group of very smart people, who I commend, are presenting a paper at this month's 20th USENIX Security Symposium to describe the technology that they've come up with.  And they talk about it as, instead of an end-to-end system, which is the way, for example, SSL works, where we're providing endpoint-to-endpoint encryption, they've designed something they call an end-to-middle proxy that has no IP address.



TOM:  Now, see, this is the interesting point because I thought The Onion Router was able to obfuscate your IP address; because of all those layers, because of all those hops, it would be impossible to track you down.  But this paper is saying, no, they're acknowledging you can find out that there is an IP address there; is that right?



STEVE:  Well, kind of.  You're right about what The Onion Router does.  But the point is you need to connect to an Onion Router node at your end in order to send the onion of encrypted layers into The Onion Router network.  So a censor can simply know the IP addresses of the available Onion Router nodes and block them from you.



TOM:  Ah, so it's not your IP address, but they can get you because they know you're communicating with The Onion Router.  I got you.



STEVE:  Precisely.  Exactly.  So DNS can be used for blocking.  Hard IP addresses can be used for blocking.  So these guys said, okay.  We want somebody within a censored environment to be able to communicate to anyone outside of the censored environment with it being absolutely undetectable.  And so that's what got my attention.  It's like, okay, wait a minute.  What have they done?  And what they've done...



TOM:  How do you get rid of the IP address?  That's crazy.



STEVE:  How do you do that?  What they've done is so clever.  They call it, as I was saying, end-to-middle proxying.  So the idea is that ISPs, that is, traffic carriers outside of the controlled environment, are participating.  And again, when I initially read their Telex.cc sort of, they have like a cartoon-y introduction to what this does, they talked about that they were going to encode headers in the traffic that would reroute the packets on their way out.  And I thought, I mean, okay, wait a minute.  Headers, that won't work because headers are inside of an SSL connection.



So what they're saying is that, within a censored environment, there are services you cannot access.  But there are still services you can access over SSL because you'd have to be able to do that because all password handling, you at least bring up a secure SSL connection when you're logging into a remote site with a password.  So they're not blocking all SSL, and they're not blocking all sites over SSL.  They're just blocking the ones that they want to censor you from.



So the idea is that, using this client - you get a client.  You download it.  A friend gives it to you.  They recognize access to the client may be restricted.  So they may literally be back to sneakernet in order for people to hand the special client software around from person to person within this censored environment.  You use this client, and it establishes a standard SSL connection to a non-censored site.  What this clever - and it is really clever - technology does is it monitors the establishment of the SSL connection, that is, and we've covered SSL extensively in the past on the podcast.



One of the things that happens when you're bringing up the encrypted link between the two endpoints is that the client generates a random number which it will be using for its session.  And we've also often talked about the need for randomness in cryptography.  You need to be able to generate high-quality, unpredictable random numbers in order to create tokens which are only used once for encrypting during that session.  What these guys realized is, if you were to monitor the establishment of the SSL connection, and the client was not using truly random numbers, that is, they were unpredictable, but they were deterministic, that is, somebody who had a matching software who was actually acting as a man in the middle - so this would be someone carrying traffic outside of that censored environment that was deliberately placed in a man-in-the-middle position - could watch the establishment of the SSL handshake, check the random number being provided by the client, and see if it matches specific cryptographic criteria; and, if so, recognize that this is actually a request for a redirection.



TOM:  So it's not actually random anymore?



STEVE:  Well, it's random.  You can sort of think of it as there are so many more bits in that random token than we actually need...



TOM:  I see.



STEVE:  ...that there are ways of applying some constraints on it so that, if somebody had, like, so if somebody had a list of alternative destinations, they could see whether the client was secretly trying to signal that that was where they wanted this traffic to go.  And so on the fly - but at the same time it's still random, it still provides security, and it still is a real SSL connection.  It's just a way of almost steganographically embedding additional information in an otherwise completely valid handshake.  And what's so cool is it is undetectable by the censors.  They can't see that this is anything other than a standard SSL connection being established like millions are doing constantly.  Instead, somebody outside of that environment can detect that and redirect the packet to basically just change the destination IP on the packet and send it to where the user inside really wants it to go.  And it works.  It's just extremely cool.



TOM:  And there's no way for the censor to be able to tell it's got the extra information in it?  They can't just also detect, like, hey, there's something wonky, the same way that the Telex station detects it?



STEVE:  Apparently not.  I didn't go into the paper in detail.  I do provide a link here in our show notes for anyone who wants to.  And it looks like there's, like, source code and stuff available for it.  They're not trying to keep it secret.  So it's Telex.cc.  And from there you can probably drill down and find their paper.  I did.  And I just perused it enough to get a gist of what they were doing.  But it looks like it's the real deal.



I mean, it requires a lot, which is the downfall.  It requires that essentially all the traffic that is leaving a censored environment after it gets out of its censoring would pass through this Telex, or whatever they're going to end up calling it, but this anti-censorship system because it is a man-in-the-middle technology.  So if a given individual's traffic happened to go out through a different path, that is, bounced through standard routers and non-anti-censor-enabled ISPs, then it would just - it would go to its destination.  They would get connected to where their packet obviously said they wanted to get connected to, which is not what they really want.



So with this comes a tremendous implementation burden, which is that, to be reliable, all the traffic leaving China, for example, would need to have, like, sweetheart ISPs who are all in on this, who are running this technology, examining all of the SSL connections that are being established and doing the cryptographic work of seeing whether this is one of these tricky packets; and, if so, then doing redirections.  So to me the downside is it's more of a capability than a solution because to get this thing to really work would require an awful lot of implementation side stuff.



TOM:  But it's certainly progress.  And I guess the censor could block an entire ISP if there was a Telex station on that and play a game of chicken and say, you get the Telex stations off your network, or we're not going to allow you back in.  But that's sort of a scorched earth policy.



STEVE:  Well, it is.  And they could also, the other thing is, the assumption is that the censor is allowing non-proxied SSL traffic.  That is to say, the censor is allowing people within the environment to have traffic go out that they cannot see into.  And I wonder about that because one of the first things that a censored environment would do would be to require you, if you want SSL connections, to install their certificate in your browser.  In which case they're able to intercept and proxy your SSL, decrypt it, see what it is, and then reencrypt it.



Well, that decryption/reencryption and establishing a new SSL connection outbound would break the fancy protocol that this Telex technology does.  So it would not - this technology would not survive having SSL essentially proxied by somebody who wanted to see what you were doing the way, for example, many corporations do that want to proxy for reasons of providing antivirus and more robust filtering.  Well, that's the same thing that a sensor wants to do is robust filtering.  So anyway, it's extremely cool technology.  A bunch of people brought it to my attention, so I wanted to say, yeah, I looked at it; that's how it works.  It's not clear to me that it's practical, but definitely very clever.



TOM:  Well, and you need stuff like this to be discovered and explored to get to that practical technology that will do what this wants to do.  This is a step along the way, for sure.



STEVE:  Right.



TOM:  Let's move onto something that is possibly considered less cool by many.  We've got a return of the undeletable cookie from KISSmetrics.



STEVE:  Yeah.  Yup, another, again, lots of people brought it to my attention, wanted to understand what was going on.  We've talked extensively, of course, because tracking is something that all of our listeners are concerned about, and monitoring it, and controlling it.  The first tracking we know was from just standard browser cookies, so-called third-party cookies that were being hosted by websites that you then attracted these cookies through as a consequence of third-party resources being loaded by web pages.



TOM:  Evercookies, sometimes people call them.



STEVE:  Yeah, well, an evercookie is a little bit different than that.  That's a sort of a pseudocookie that's used by sort of - and that's still more sort of theoretical.  There actually is something called an evercookie which uses lots of characteristics about your client in order to lock onto you.  Then Flash began being used as sort of an off-the-map, off-the-radar approach.  So sites would host Flash.  Flash by default is configured to allow local storage on the user's machine.  And by scripting Flash, it was possible to resurrect cookies that had been previously deleted.  So users who were concerned about privacy began routinely, not only blocking third-party cookies, but also just deleting all of their first-party cookies because they realized that would still make them known to sites that they revisited.  And in some cases, for whatever reason, they chose not to have that be possible.  Flash was being used then to recreate cookies that had been deleted.  And so that was considered to be a problem.



It's these UC Berkeley privacy researchers who stumbled just recently on this KISSmetrics service.  They're the same guys that brought the Flash cookies to our awareness back in 2009.  So they published a paper just last Friday, July 29th, which was picked up by Wired and sounded the alarm that there was a new technology in place that defeated all known anti-tracking technology.  It used HTML5 and something that they called "ETag Respawning."



TOM:  At least it's standards compliant.



STEVE:  Yes.  And unfortunately our browsers are now up to HTML5 and support ETags, and so unfortunately they support this KISSmetrics.



TOM:  So what is ETag respawning?  How does that work?



STEVE:  Well, okay.  So the way assets are managed through the web is we'd like to be able to have our browser cache things so that we're not having to constantly get them over and over and over.  So, for example, if you're on Amazon, all of that, the website's decoration, is in images which your browser needs to get once.  But then as you go from Amazon page to Amazon page, even though the pages are different, all that window dressing is pretty much the same.  So you'd like your browser to be able to just use what it already has in its cache.



There are a number of ways for a server to allow a browser to cache.  For example, and this is normally done in headers that the user doesn't see that are so-called "metatags," or meta information, which is additional information.  So, for example, there will be expiration dates on the information that the server says, essentially allowed the browser to know that it can, until a certain date and time, it can reuse this.  The browser is able to send a query to the server saying, if this object has not been modified since a certain date, then just let me know that.  Otherwise, give me the update.  So browsers are also able to, like, send back sort of conditional queries saying this is what I've got that has this following date stamp on it.  If you've got something newer, then I definitely want to know.  Otherwise just let me know that it's not been modified.  And so servers spend a lot of time these days sending back I think it's 301 Not Modified replies to browsers' conditional queries.



Well, there are problems with intermediate caches which can sometimes muck these things up.  So the HTML standards folks said, we need something a little more robust.  Let's essentially come up with a hash for these objects so that the server, when it sends an object to the client, it will also provide what's called an "ETag."  "E" stands for "entity."  So it's an entity tag which uniquely identifies this particular instance of any object with that name.  So now the browser is able to say, I have an entity; I have an object with the following URL.  And essentially I have its hash.  It asks the server to verify that the entity hasn't changed, even by the same name.



So the bad news is this is - it's supposed to be an opaque token.  Just a string of gibberish will be unique for a given instance of an object.  That is to say, a hash.  If you change the object - and the HTML spec doesn't say it has to be a hash.  It doesn't actually say it has to be anything.  It's just supposed to be a blob, an opaque token which is unique to this object.  So you could use, for example, a good CRC algorithm, as long as you didn't have a problem with collisions of different objects having the same CRC, the same checksum.  So it can be really anything; and it's not taken as a hash, it's just taken as something opaque.



Well, the guys at KISSmetrics, which was a San Francisco-based, Silicon Valley-style startup a few years ago, they said, we're going to come up with something that's even stronger for tracking than anyone has done before.



TOM:  And that's what all these companies are looking for is the most robust tracking that they can come up with.  They want to not be deleted.  They don't want to have their ads blocked.  They want to get around all of that stuff.



STEVE:  Yes.  And so there's two aspects to this.  To use the term "stovepiping," where you keep things within one stovepipe, there's the notion of identifying people who come back to you who are your people coming back to you in the future.  That's one aspect.  And users may or may not want to be identified by the same site when they return.  Often it's valuable because, for example, you don't have to then reauthenticate and re-log in.  You're able, for example, with eBay there is a checkbox, keep me logged in for 24 hours.  And so there's a huge aspect of convenience for being identified both as you move around a site from one page to the next, but also if you return an hour later.



TOM:  Yeah, and Google does this on a vast basis where, if you're logged in, you can stay logged in for two weeks.  And when you move from Google Docs to Google+ to Gmail you're constantly authenticated.



STEVE:  Right.  Then the second more onerous and worrisome tracking is of course cross-site tracking where - and this is the one that concerns most people, where because sites use, for example, common advertisers like DoubleClick that of course is now a Google property, because sites use common third parties, when a given individual goes to a different site that shares that third party, that provides cross-site connectivity.  And this is precisely the behavior that these UC Berkeley privacy researchers found and verified.  They found, first of all, this is not just, for example, Hulu, which was talked about in this article, and Spotify.  There were a thousand of the top websites are all now using KISSmetrics.



TOM:  Which is why Hulu and Spotify were so upset that they got mentioned.



STEVE:  They got singled out, exactly.



TOM:  But there's 998 others out there, too.



STEVE:  Yeah, I mean, very popular sites because this technology is so powerful.  What the Berkeley guys found, and this was what sent a chill down their spine, is the exact same ID, a long crypto-looking unique tag, existed on many different sites that were using KISSmetrics.  Meaning that KISSmetrics was not assigning random tracking tokens, but was synchronizing tokens across multiple sites.  Which meant that a given site using KISSmetrics could say to a different site using KISSmetrics, hey, here's the KISSmetrics token I have for such and such a user.  Can you tell me anything about them?  And oh, by the way, I'll share some information with you if you'll share some with me.  So it really increased the concern about intersite collusion, which has been a problem in the past.



So the good news is this generated a big kerfuffle.  KISSmetrics is now saying that they've backed off from their technology - and this is only in a few days.  In a matter of five days they've now posted an update on their site saying that they're just going to use cookies for persistence.  What it looks like they were doing is they were using custom JavaScript.  It was a file called "i.js."  And in this JavaScript they would embed the unique token for the user.  Okay, so not removing cookies, not dealing with Flash, not doing anything that users could do other than emptying their entire browser cache, that's what it took in order to shake this KISSmetrics technology use.



TOM:  And that's because they were using HTML5 and ETag, because that's the place it's stored.



STEVE:  Yes.  And what the privacy researchers at UC Berkeley realized was that this was the first time they had seen ETags being used in the wild for ID tracking, not just benignly for cache tracking.  They were embedding IDs in ETags that were being provided by KISSmetrics.  And so those things would live in your browser cache persistently.  And then this i.js file would pull back the ETags and then regenerate information and allow much more pervasive tracking than we'd seen before.



I did want to let our users know, we've talked about Ghostery as a very cool add-on, a cross-browser add-on, I've got it both in Firefox and Chrome, which notifies you of which sites are providing third-party tracking when you visit pages.  And I noted that KISSInsights and KISSMetrics are both appearing on various sites when I'm seeing my little Ghostery popup, so users can see where this is going on.  And my takeaway from all this is that this is another example of state-of-the-art technology being used to track us; and that ultimately, much as I love technology, we all know I do, it's going to be legislative, a legislative solution that we end up, I think, generating and relying on.  It'll be when there's the force of law behind something as simple as the do-not-track header in our browsers where sites are required by law to ask for permission to track us, rather than assuming by default that they're able to.



TOM:  Even that won't get rid of all the instances, of course.  But at least it wipes out a bunch of people like Hulu and Spotify who want to be law-abiding.



STEVE:  Well, yes.  And, for example, it was when the use of Flash cookies came to light in 2009, immediately a class-action lawsuit was filed against the companies who were doing it.  And at the time Flash was ignoring the private browsing options in browsers.  So the Flash cookies were persisting into and out of private browser sessions.  Adobe modified Flash in order to behave itself when Flash cookies were enabled and to give users the privacy that they were clearly explicitly asking for when they were using in-private browsing technology.



So I believe it's the case that there is enough concern, and this is clearly a subject of enough abuse, that it's going to be when browsers simply say I do not want to be tracked, that legitimate companies that are right now able to track us without our knowledge are going to have to do so with our permission or risk the consequences, which I think will be significant because clearly enough people are upset about this that good companies have to abide.



TOM:  And in the meantime, KISSmetrics, we should reiterate, have said they've switched to cookies-only IDs.  But who's to say they couldn't switch back later without telling someone, or some other company comes along and tries the same shenanigan.



STEVE:  Well, or a different shenanigan.  And that's why I think, if you just step back from this, the technology is out of control.  And so I really think the only solution is going to be simply making our preference not to be tracked known in a simple way and then having watchdogs like these UC Berkeley guys and so many others checking to make sure that companies are honoring it and just stomping on them with the force of law when companies don't.  I mean, they're just - we can't stay ahead of it technologically.



TOM:  Yeah, it's a constant race.  Let's move on to an errata around the Blowfish bug.



STEVE:  Yeah.  Many, many, many people commented.  We talked last week about a bug in using Blowfish for hashing and how some confusion with the signed or unsigned-ness of characters could cause a dramatic weakening in the hash that resulted.  Many people commented that ASCII is a seven-bit code, and so you'd always have the high bit off in ASCII code.



So first of all I wanted to acknowledge everyone who said that.  You're absolutely right.  However, the application for this code was not strictly ASCII input.  So there was an instance or are instances where this could still bite you.  But even so, people were saying, well, this isn't really as bad as we thought.  Well, that wasn't the point of the podcast.  The point of the podcast was to demonstrate an example where the programmer clearly made a mistake which the compiler was obscuring as a means of demonstrating how easy it is to make these kind of mistakes.



So I wanted to absolutely acknowledge that, if only seven-bit code was being used in this instance, then this particular bug would never manifest.  But it turns out that input with high bits on is often used.  But mostly this was not meant as, okay, how bad is this problem in the wild, but here's such a cool textbook classic case of how bugs like this do happen in real life.



TOM:  Let's go on to, then, the Portable Sound Blaster project that you announced out on Google+.  And you've got a Google Group for it, as well.  What's going on with this?



STEVE:  Well, I don't know, Tom, if you're aware of the most popular and arguably famous Security Now! podcast of all time, which is called The Portable Dog Killer podcast.



TOM:  Yes, yes.  I have heard the tales.



STEVE:  So that was Podcast #248.  And immediately after the podcast was aired, people began writing to me, asking for plans for their own version of this thing.  And I will say again, because I'm - 40 years after I made this thing (I made it when I was 16, and I'm 56 today), the name makes me just cringe.  I'm very self-conscious about having ever have called anything a Portable Dog Killer, especially when in fact I really believe it probably saved the dog's life that I used this device to train because...



TOM:  It's a [indiscernible] trainer, maybe.  No dogs, no animals have been harmed with the use of your application; correct?



STEVE:  Correct.  Some seagulls had their flight paths altered.  But that didn't hurt them, either.  So anyway, a year later, or - yes, it was May 2010.  And as people discover it, I'm getting constant mail.  What I have come to realize is this problem of barking dogs is much worse than I ever really appreciated.  Now, I created this to train a dog not to leap at a fence and knock people off the sidewalk and scare them to death, or near death.



TOM:  Again, no humans killed in the use of this application.



STEVE:  But there are people who are unable to sell their homes, I've heard stories of people who cannot sell their homes because of the dog next door.  My own parents put up with a dog that would bark all night for decades, asking the owner to please take care of their dog or something.  But no, I don't know what's happening.  Society's decaying.  We have less sense of community now than we used to.  I've heard stories about babies being awakened by dogs that people have no control over.



Anyway, it was finally, a few months ago, when I was enjoying or trying to enjoy an afternoon on a friend's patio, we were doing some backyard barbecue grilling, that this dog next door was just barking at nothing for hours.  And it really was disturbing.  Mark explained that this - and he had owned the house for a year at that point - that this had been going on for a year.  And so I thought, okay.  Maybe it is time to revisit this issue, to explore the possibility of training aberrant canines to stop barking.



So I took a break from the project I'm nearly finished with - I've been working on a very exciting new crypto thing that I will be telling our listeners about shortly.  I took a break to look at updating the technology.  And I've got that underway.  Parts are on order.  I created a group on Google called The Portable Sound Blaster.  And so that's what I'm calling this thing.  There's also a problem I have out on the patio at Starbucks early in the morning with, for some reason, on some mornings, an amazing collection of crows descend on one tree and squawk for about an hour.  And I've seen other people, other Starbucks patrons screaming up at this tree, telling them to shut up.



TOM:  Are you sure they're not ravens delivering messages from distant kingdoms?



STEVE:  I'm not sure of that.



TOM:  Either way they're annoying, is what you're saying.



STEVE:  But they certainly are annoying.  So I'm curious.  I want to see how they would respond to something like what I created before, but updated four decades later using current technology.  I don't know what the result will be.  I also want to see about - I've got two friends, both named Mark, who are good friends, both with problems like this.  I want to see if there is some solution and maybe offer - and I don't know yet because we don't know what the results will be, but maybe offer a solution to other people.  So whatever it is that I do, I'm just going to make public.



TOM:  And the idea is that this is a sound that the dogs hear and dissuades them from barking?



STEVE:  Maybe.  I don't know.  I mean, maybe they'll bark louder, in which case...



TOM:  Hope not.



STEVE:  ...it would be counterproductive.  So but I'm going to create a flexible device which is capable of sending a beam of sound between 3500 and 25 KHz, so through the audible range.  The problem with birds is their hearing, their frequency response begins to drop off around 8500 and 9000 Hz, which is entirely audible to us.  So anything that would convince the birds to leave the tree, we would be able to hear.  It is not the case with dogs, whose of course hearing famously is technically supersonic.  It's above the range of human hearing.  So I don't know if they'll stop barking.  I don't know if we could, like, if they bark we reward them or punish them with a blast of sound and then stop, and like they learn that, oh, maybe barking isn't what I'm supposed to be doing.  I don't know.  So there's lots of experiments to be had.  I just wanted to get this thing started because I'll be working on it in the background.  I'm going to immediately return to finish this crypto project that I'm very excited about, which I'll be talking to all of our listeners about before long.  But I also wanted to announce that this is underway.  Many people have asked about my use of the term "sound blaster," saying that Portable Sound Blaster sounds like something from Creative Labs.



TOM:  Yeah, I'm going to take my audio card out and carry it around with me.  



STEVE:  Exactly.  So I thought I'd just take this opportunity to teach a little bit about trademarks.  The problem with the trademark "Sound Blaster" is that it is extremely descriptive, which means it is a very weak trademark.  So there is no trademark infringement if I have something that I call, whether it's a group on Google or a device, if I call it a Portable Sound Blaster, that's what it is.  It's descriptive, and it is not infringing anyone's trademark.  The problem...



TOM:  And if you were making a sound card and trying to call it a Sound Blaster, you'd be in trouble because you would likely cause confusion.  But this is a different kind of device, so you're not likely to cause that confusion.



STEVE:  Exactly.  And, for example, trademarks like Xerox or Kleenex, they're incredible good and strong trademarks because they don't say anything about what they do.  They're not descriptive.  I mean, Kleenex, maybe, sort of.  Maybe it's a concatenation of clean and some - and tissue, I mean, I don't know what Kleenex means, probably just the "kleen" part.



TOM:  If they were tissues for daubing the neck area, then maybe they would be more descriptive, but they're not.



STEVE:  Right, correct.  But they are - or, like, Exxon, fantastic trademark.  I mean, it is owned, those things are owned by those companies.  But something like "sound blaster," that was never a good trademark for Creative Labs to have because it is too descriptive.  So for me to have something called a Portable Sound Blaster, I can call it that if I want to.  As you said, it will not confuse people because it's not a sound card.  But it's also - I'm just describing what this thing is.  It is not a violation of anyone's trademark.



TOM:  Although we'll see that put to the test with the Apple case, suing Amazon to stop them using the term "app store."  And that's Amazon's defense is that's descriptive.  Apple's defense is, no, "application store" would be descriptive, but "app store" is not.



STEVE:  You're right.



TOM:  So that's an interesting application of that test.



STEVE:  There are gray areas.



TOM:  So you've been getting into "Falling Skies"?



STEVE:  Well, okay.  So here's prompted that.  Yes, first of all, I've been watching it, and I like it.



TOM:  I got sucked in, too.  I didn't think I was going to like it.  I totally like it.



STEVE:  Well, yes.  And so it is the fact that there's a "Falling Skies" marathon on TNT Sunday that caused me to bring it to our listeners' attention.  It's been a short season.  It's, what, maybe 10 weeks?  So TNT, Turner Network Television I guess is what TNT stands for...



TOM:  Yup, unless it's Tech News Today.  You've got to watch out for that trademark thing again.



STEVE:  There you go.  So the TNT cable channel has been airing a sci-fi series called "Falling Skies."  It stars, those of you who don't know, it stars Noah Wyle, who came to everyone's attention for his never-ending stint on the show "ER," NBC's, I think, what, it ran 10 or more years?



TOM:  More, I think, yeah.



STEVE:  Okay.  A good friend of mine, Mark Thompson of AnalogX, hates the show.  He only saw the first two episodes, and it just made him gag.  But we've got very different tastes, Mark and I.  It is true that when it tries to do sort of soap opera-y things, it stumbles because the actors are not fantastic.  But it's good science fiction.



So I did a little poking around, and there is a "Falling Skies" page on Wikipedia for anyone who's curious.  Tim Goodman of the Hollywood Reporter, reviewing it, wrote:  "The entertainment value and suspense of 'Falling Skies' is paced just right.  You get the sense that we'll get those answers eventually.  And yet you want to devour the next episode immediately."  Thomas Connor of the Chicago Sun-Times called it "...a trustworthy family drama but with aliens."  He continued, "It's 'Jericho' meets 'V,' with the good from both and the bad discarded."  He says, "It'll raise the summer TV bar significantly."



Ken Tucker from Entertainment Weekly gave the series a B+ and wrote, "A similar, gradually developed, but decisive conviction makes 'Falling Skies' an engaging, if derivative, chunk of dystopian sci-fi."  He concluded, "'Falling Skies' rises above any one performance.  It's the spectacle of humans versus aliens that draws you in."  And finally, the Boston Herald, Mark A. Perigard, gave the series a B grade, writing, "Don't look now, but 'Falling Skies' could be a summer obsession."  Well, okay.  So I'm not giving this the Gibson sci-fi five-star award.  It doesn't merit that.  It's not as good as reading "Daemon" and "FreedomTM" or any of the Peter F. Hamilton stuff.



TOM:  No, no.  I agree.  By the way, that's the 10th episode airing this Sunday.



STEVE:  Okay.  So it was very short.  It was last week that they said "only two remaining."  I went, what?  Oh, shoot.  Because, I mean, I'm enjoying it.  I think it got better.  And there's enough good sci-fi in there.  We're learning things about these aliens that have attacked Earth and are occupying the Earth.  And so anyway, who knows if it will get renewed.  That will be the test.  Is it going to get renewed for a larger and larger chunk of time?  We've seen really good sci-fi, like "Firefly," that didn't even have the episodes that had been made all aired.  So networks don't always do smart things.  I think it was worth watching.



So because the entire first nine episodes will be re-aired all day long, culminating in a two-hour season finale next Sunday, I did want to bring it to our listeners' attention.  It's not too late.  If this sounds interesting, start your TiVos and suck in the whole series and see what you think.  If you subscribe to a box that's got TNT on it anyway, it's free, and I think it's been worth watching.  I hope it gets a second season.



TOM:  Madgician (sp) says it got renewed.  I looked it up, and there's a quote from Michael Wright of TNT, the network, saying that it in fact will be renewed for a second season.  So good news.



STEVE:  Yay.



TOM:  The only criticism I have - I'm getting sucked in, too - is that I wonder why the aliens don't have aerial surveillance, why they can't just look down and see all the humans.  Like it seems a little easy for them to hide.



STEVE:  Well, okay.  Yes.  And Mark Thompson's criticism is that.  He says you're required to suspend too much disbelief.  On the other hand, he watches fantasy anime.  So it's like, okay, Mark.  I can't watch that stuff.



TOM:  I can suspend that much disbelief.  It doesn't ruin it for me.  But that was something that crossed my mind.  So we've got a note from Jeremy Webb?



STEVE:  We do.  Actually it was really well timed.  It was this morning he sent an email to my sales folks, who forwarded it to me.  He said, "Another satisfied SpinRite customer."  And this one's sort of interesting.  He said, "Dear Steve, I've always been my parents' tech support guy.  When I joined the U.S. Air Force, they stationed me pretty far away from home.  Thankfully, I've always been able to VNC into their computers and get things straightened out for them.



"This week I was presented with a rather unique challenge.  My mother called to tell me that their computer was throwing a bunch of disk errors in Windows.  Fixing this problem was particularly difficult for two reasons.  First, VNC wouldn't help them if their hard disk crashed suddenly.  Second, I'm currently deployed to Afghanistan, where getting a good enough connection to VNC into their computer can be difficult.  I knew that SpinRite might be able to fix the disk errors, but would I be able to walk my parents, who aren't the most tech-savvy people, through it over the phone?



"Believe it or not, I was able to get a good enough connection to VNC into their computer and make for them a SpinRite bootable image.  I was able to instruct my computer over the phone how to boot into SpinRite and start the repair process.  She called me the next day and told me that SpinRite had fixed 12 errors and that their computer was now back to normal.  I cannot tell you how much we appreciate your product.  It really saved the day.  Jeremy."



TOM:  That's a feat, VNC'ing from there.  That's great.  Let's move on to our listener feedback, the password-insecure 1-2-3 episode.  Don't use the number of this listener feedback as your password.



STEVE:  Do not.  Oh, there's one thing, though, I forgot to mention.  Anyone who wants to get to, at any time in the future, get to that Google Group for the Portable Sound Blaster, I added a link to it in GRC's main menu.  So at GRC.com, the last menu item says "Other."  And that's just sort of my random catchall.  So under "Other" you will see "Portable Sound Blaster."  And that'll take you to the Google Group.  So for anyone who wants to know how to find it easily.



TOM:  There's one question answered before you even asked it.  Now you know how to find it.  So let's start off with Steve - oh, I'm sorry, you're Steve.  He's writing to you.  His name is Alon.  He's part of the Social Media Team at GoDaddy.com in Scottsdale, Arizona.  And he wrote in to mention what he believed may have been a factual error in Security Now! 308, where we discussed choosing to drop GoDaddy.com as a provider of SSL certificates.  Obviously he wishes that weren't the case, but he understands you have to have the freedom to choose the provider that best fits you.



He's referring to the pricing mentioned for our SSL certs.  He says, during the show it was stated that our certs cost thousands of dollars.  I wanted to clarify that.  Not only do GoDaddy.com EV certs not cost thousands of dollars, I believe they're actually the least expensive EV certs on the market today.  A single extended validation certificate or premium SSL currently costs only $99.99, less if purchased in multiple years.  And furthermore, this pricing isn't new.  It's been this way for some time, and at no time has this type of cert cost $2,000 as suggested on the show.  So he goes on, he says, I fully respect your decision to publicly applaud the services you love.  But he wanted to point out that pricing difference.



STEVE:  Well, I did respond to him because he got a bunch of his facts wrong.  He assumed that I was currently using his certs, and that it was GoDaddy I was leaving and intending to go over to DigiCert.  It is VeriSign that I have often and almost constantly talked about as having amazingly expensive certs, and that I intend to go over to DigiCert because, thanks to the Certificate Patrol add-on on Firefox, I saw that Facebook was using DigiCert, and a number of other very high-profile sites, so my feeling was, if they can, I can, too.  So that gave me the courage to leave VeriSign, where I have been from the beginning, just because VeriSign was like one of the very early founders of all of this technology.



However, I did want to remind our listeners that neither Leo nor I will ever use GoDaddy because my problem with GoDaddy is they attempted to charge my credit card for an expired cert without my permission.  They asked me several times in email.  There was no way for me to say no.  There was no way for me to tell them I did not want to have my certificate renewed.  And then they sent me a note that my credit card had failed their attempt to charge it.



The good news was, through some miracle I had used a PayPal one-time-use credit card number during the time that PayPal offered that service.  And so GoDaddy was unable to zap me again on that card.  But when I realized they had tried with no authorization from me, I told Leo, and we both swore them off.  So they may be cheap, but they're just off my radar.  I'm going to be switching to DigiCert here toward the end of the year when the first of my certificates...



TOM:  So the confusion, the price you were talking about was VeriSign's price.



STEVE:  Yes.



TOM:  But the issue was not price-related with GoDaddy.



STEVE:  Correct.  I wasn't leaving GoDaddy.  I had left GoDaddy.  And I will be leaving VeriSign to go over to DigiCert.



TOM:  All right.  Question #2 from Tom Zerucha in Metropolitan Detroit, Michigan wonders about disabling tracking on tablets.  He says, on an iPad 2 or Android tablet, how do I stop third-party cookies or tracking sites or the other stuff if I can't install Ghostery, NoScript, Cookie Monster or the rest?  Which you can't, on those browsers.  Is there a hosts file that I can point the tracking sites to 127.0.0.1, or something else?



STEVE:  Well, I can't speak to Android.  Maybe you can, Tom.  I do know that on the iPad, under the settings, the main settings app, for the default browser, which is Safari, you can tell it that you only want to accept cookies from sites you visit, meaning not third-party cookies.  I sort of think that's the default, if I remember.  I checked, and mine is set that way, only allow from sites I visit.  But I think maybe Apple is unique in this industry for setting all their browsers that way by default, which in fact I'm sure of that because I've looked at third-party cookie stats, and Safari's stats are way down almost at zero compared to every other browser.  So that's one of the nice things that Apple has always been doing for us is blocking that.  The problem is you're on a very restricted platform where we just don't have things like the hosts file or the ability to intercept DNS and redirect things.  And for one thing, we also don't have Flash, so we don't have to worry about Flash cookies over on iPad 2.  But, Tom, are you an Android person?



TOM:  I'm not, but my wife is.  And I know some of my best friends are Android users.  If you push the menu button on your phone, and then you get more options, you go to the "more options," you can select a "settings" function.  And in the settings function there's an "accept cookies" option that you can uncheck, and then it will not accept cookies anymore.



STEVE:  So that's a default...



TOM:  And that's in the default browser, anyway.



STEVE:  Right.  And I was going to say also, I also looked, in wondering whether, for example, iTunes offered a privacy-enhanced browser.  I know, for example, that the LastPass folks have an iPad browser that binds the LastPass functionality in to make it easier to log in.  You don't need to use scriptlets and things, which you otherwise normally have to use in Safari.  And I couldn't find anything.  But I would imagine at some point maybe someone will do a privacy-enhanced browser that offers explicit do-not-track me additions, which could be very nice.



TOM:  @msx in the chatroom points out that both iPad and Android have an ETC hosts file.  So that makes sense that, if you can get in there and edit that, you might be able to do something there.



STEVE:  So I would bet that Android then you do have - because you do have a much more open and less controlled environment than on the iPad, you could go in and do that, yeah.



TOM:  If you jailbreak your iPad, you'd be able to get at that hosts file, most likely.



STEVE:  If there is one.  I mean, we don't know that there is one.



TOM:  Yeah.  There's a directory.  I don't know if there's a file.  That's a good point.  Brian Lawson in Lebanon, Indiana wonders about PIE and online backup.  He says, I've been wondering something about the combination of PIE and online backup services like Carbonite.  I have a 1TB drive and have created a 500GB TrueCrypt file on that drive for the data I want to keep under tight lockdown.  I created a TrueCrypt-encrypted file instead of a partition because services like Carbonite will back up a whole internal drive; but if it were segmented into partitions, I believe I could only pick one or the other drive letter.  This way I can point it at the whole drive and back up both the encrypted and non-encrypted data because it is on the same drive and drive letter.



Now, since Carbonite works on differential backups after the initial run, would it have to reupload the entire 500GB TrueCrypt file every time it changes?  I know you can do things in TrueCrypt like disable the timestamp update.  But the contents of the file will change with each update, and therefore the pseudorandom noise that is the file on the drive will look different to Carbonite.  It will recognize it as a file that has been updated and grab the new version.  I think I know the answer to the question, and I'm not sure I like it.  But I thought I'd check with the experts before dropping dollars on this approach.



STEVE:  Okay.  So he did a good, clever thing.  He created a big file, and so he is hosting a TrueCrypt container inside that file, which is on his drive.  Carbonite is smart in the same way that - I'm trying to think of the other service.  I think it was Dropbox we were just talking about where it will take a large file and segment it in much smaller pieces, on the order of, like, 16MB, and generate hashes for individual pieces.  They do this to save themselves bandwidth and to address exactly this concern, which is, if you had a huge file backed up, but only part of it were to change, Carbonite would only want to zero in on that part that changed and save themselves all of the bandwidth, and you all the bandwidth, of re-uploading the entire thing.



The way TrueCrypt functions, it is encrypting blocks that are sector size and nothing larger.  So even though the whole TrueCrypt file, which is containing an entire drive, looks like pseudorandom noise, changes that are local within the file system will be reflected in local pseudorandom noise changes in the file.  So the good news is, Brian, it's exactly what you want.  You will only see the same kind of uploads to reflect changes in the overall TrueCrypt file that you would see being made in the directory system.  So there'll be some changes in the metadata that manage the files, and then the files themselves that come and go.  But once you get that big 500GB blob up once, then only little changes to it will have to be updated.  So that's a really great solution.



TOM:  And I should point out, and a bunch of people in the chatroom are saying this, too, all your internal drives can be backed up.  So if you wanted to do an entire encrypted drive, it could still be backed up separately from other internal drives, even if you partition.  I've done that before with Carbonite.



STEVE:  Do you know whether Carbonite's view of the drive is pre-TrueCrypt or post-TrueCrypt?



TOM:  Oh, now, that is a good question.  I don't know.  When I said I've done it before, I've backed up multiple internal drive partitions.  I have not had them encrypted at the time when I did that.



STEVE:  Right.  My guess is that TrueCrypt would have the same view of the drive that the OS does.



TOM:  Yeah, no, that makes sense.  So what he's doing is a clever way to make sure that it stays encrypted.



STEVE:  Yup.



TOM:  All right.  Joel Davis in Albuquerque, the ABQ, New Mexico has some info on NTP.  He says:  I just finished listening to Security Now! 308, and I wanted to give you updated information on NTP and Internet time in general.  I work for an electric utility, and we use NTP to sync clocks with extreme accuracy to do fault location on transmission lines.  We're able to get around 10 "us" sync, as compared to GPS clocks, out of NTP.  We are currently in the process of upgrading to IEEE1588 as a protocol, which will do about 1 "us" accuracy over packet-switched networks.  What is that "us"?



STEVE:  Microseconds.



TOM:  That's microseconds.  Oh, he's using the letter "u," but he means - okay, now I get it.  Will do about 1 microsecond accuracy over packet-switched networks.  Also I wanted to give you some better information on the NERC decision about power system frequency.  This is a nonissue.  In the mid-'90s NERC switched from an IFE, an Integral Frequency Error, to an AFE, Absolute Frequency Error standard.  This means that instead of having to bring the integral of daily frequency error to zero for the last 15 years or so, utilities have only had to cross nominal frequency once an hour.  Now NERC is removing that requirement.  It is still in the interest of the utility to maintain frequency close to nominal, and the regional entities, WECC and ERCOT and the others, still have frequency deviation standards for their individual areas.  Sorry so long, but I hope it helps.  Joel.



STEVE:  So just to remind our listeners, we talked back on Episode 308 about the report that power-generating entities around the U.S. were going to be allowed to let their frequencies wander and drift more than had been the case historically.  And Leo and I hailing back from the, well, the '50s and '60s, remember that original clocks depended upon the exact power line frequency.  They actually were essentially counting cycles electromechanically with their own motors synchronized to the 60Hz power.



And the idea was that, during times of extreme power load, the frequency of our AC line would tend to droop a little bit.  It would drop below 60 as the generators in the power plants, whether it be coal fired or hydroelectric, they were put under a greater load, and the actually spinning generators slowed down that were generating the AC waveform.  And then the idea was that at night the engineers would have been counting cycles all day, and they would run fast in order to make up for the fact that they were literally cycles behind due to the load during the peak power delivery of the day.



And so what he's saying is that actually the world has been cut loose since the '90s; that they are being further cut loose.  But the presumption is that by this point we're no longer in a cycle-counting mode, that our clocks have built-in crystals that they're depending upon for accuracy.  And so the absolute number of cycles we've had of AC just isn't that big a deal any longer.  So I'm glad to know.



TOM:  Yeah, good stuff.  Thank you, Joel.  Question #5 comes from Geir in Norway about last week's Blowfish bug, again.  He says:  Browsing the web for more info on this Blowfish bug you talked about in last week's Security Now! episode, I came across this page at Schneier.com/blowfish-bug.txt.  It includes an email from 1996 which seems to point out exactly this same bug, already known back then.  It even suggests both solutions you described, either casting the variable type or just declaring it as an unsigned int.  Thought you'd like to know.



STEVE:  So sure enough, I went to this page.  I don't know when Bruce put this up on his site.  But it's Schneier.com/blowfish-bug.txt, and it shows a clear, I don't know if it's email or newsgroup posting.  It's something that's got all kinds of time and date stamp headers all over it, where there is a discussion and showing the code doing exactly this wrong thing back then.  So it was known to people, and somehow it just never got fixed.



TOM:  History repeats itself.



STEVE:  Yeah, boy.



TOM:  Joe in Pequot Lakes, Minnesota says:  In Episode 299 and 301 of Security Now!, as well as a Q&A episode, you alluded to sources of random numbers.  While there are USB, PCI, and PCIe cards that can be purchased to allow your computer to generate true random numbers, there are some sites on the Internet where you can request truly random data sequences generated from some really creative sources.  And he lists Random.org, which I've actually used before, generated from atmospheric noise; and Fourmilab.ch/hotbits, generated from radioactive decay of Caesium-137.  These sources can be queried via SSL over the Internet for bits of pure random data for programs or via a browser.  Silicon Graphics once provided random numbers via Lavarand, taking pictures of patterns produced by a lava lamp.  Just some fun sources of randomness.



STEVE:  So I just thought that was cool.  I wanted to share those sources with our listeners.  Using contemporary browser technology, AJAX-style queries, it's possible for script in a browser to establish a connection to any of these sites and get some randomness for its own use.  So...



TOM:  I used to - we would do a drawing on a show I did for a prize.  And I used to use Random.org because what I liked about it is you can put in a parameter.  You can say, give me a number between this and that, and it will give you a random number.  And it'll give it in whole integers and everything like you said.  It's really good.



Christopher Hopper in Brisbane, Queensland, Australia has an annoying bank.  He says:  I'm a recent subscriber to Security Now! and so have been made aware of your recent revelations on password security, entropy, and the best way to construct a password that is hard to guess using brute-force password-cracking techniques.  Thanks for thinking on these matters and sharing your own epiphany with us.  I liked that episode, too, where Steve came up with his new password advice.  I've been implementing that.



Getting back to the email, he says:  I've taken your advice proffered on the Password Haystacks page to improve my already fairly strong master password and make it even stronger.  I'm already a LastPass user, so my master password is very important and must be strong and easy to remember.  To achieve this I have applied a "leet" method of spelling to an easy-to-remember code.  To make it stronger, I'm now padding it out another four spaces using a special character.



I am concerned, though, with my banks.  I have two online banking accounts with two separate banks, and in both cases I am not allowed to use special characters in my password.  One of the banks has a character limit of six to eight characters, which is just lunacy.  I don't see a reason for it.  And I know, thanks to your podcast with Leo, just what it might mean on the back end.  I'm a web application developer myself, so I'm aware of how passwords are stored in back-end databases using salted hashes.  I don't see why, if they're doing it right, they need to restrict either the type of characters or the number.  Is there a security article from a trusted, known source, written in plain, easy to understand language, that I can point the banks to, to explain to them why they shouldn't put restrictions on password length or composition?



STEVE:  Okay.  So, first, to answer Christopher's question, I'm unaware of somewhere I could point him to.  But I thought that I would put it out there for our listeners.  Maybe someone knows of something clear and clean and simple.  I mean, obviously I could write something, but that's not my job.  Maybe something exists.  The problem is that I'm not convinced banks care.  Certainly they're getting complaints from their customers.  And in answering the question of why banks do this, the only thing we've been able to come up with is that it's purely from a customer service standpoint.  They want to provide a password that they're able to read over the phone or somehow communicate with.  And customers are entirely capable of generating passwords that are just gibberish that no one, no bank personnel could handle.  Certainly we know we have all the technology required to easily handle really strong authentication.  It just - it's difficult to understand why banks are doing it, other than inertia.  I imagine that 10 years from now this won't be a problem.  But it certainly is now.  I don't know whether sending a note to a bank would have any effect on them.  I sadly think it probably would not.



TOM:  You're absolutely right about that, customer service, I agree.  I think it's because they don't want to deal with people who can't remember their password, so they keep them short.  Because the other thing they do which annoys me is, even if they do allow long passwords with case sensitive and special characters, they then say "and you have to have a security recovery question."  And that security recovery question has to be in plain English.  So you've just undermined the entire password at that point.



STEVE:  Exactly, yup.



TOM:  All right.  Gary W. in Detroit, Michigan mentioned that Steve didn't get a chance to explain the red division error in SpinRite.  He was just listening to the last podcast, and you guys switched into the main topic before you had a chance to explain the "why" portion of the SpinRite's testimonial question of why it displayed the red division error one time, but succeeded the next time.  What's the answer to that?



STEVE:  Okay.  What's going on is that SpinRite is still using some functions of the BIOS.  And SpinRite is probably one of the few utilities around which is still robustly exercising the BIOS.  Most operating systems now use the BIOS just enough to get themselves loaded, reading a simple range of sectors into RAM, and then as soon as they can they switch into protected mode.  The BIOS is real mode on the Intel architecture, not protected mode.  It won't work in protected mode.  But all operating systems run in so-called protected mode, where they get advantage of all the extra features the chip has to offer.  So they were in a hurry to get into that mode in order to finish booting themselves.



What happens is that, as a consequence over time, BIOSes are beginning to be a little buggy.  We all know that, if code is not being checked and is not being exercised, it has a tendency not to be correct.  And so in some edge cases, SpinRite will, while it's doing data recovery, will cause the drive to respond in a way that upsets the BIOS, which is essentially an intermediary between SpinRite and the drive.  And so that we look at those division errors, and we see that it's in the BIOS, so there's nothing we can do about it.



The good news is SpinRite, as did happen in the case of last week's testimonial, SpinRite can recover the sector anyway.  The problem tends not to persist.  And in this case, in the case that we shared last week, the user ran SpinRite again and didn't have the problem recur.  So it is an interaction between the BIOS and a drive which is doing something that is upsetting the BIOS.  And the top of my list for what I will do when I next move SpinRite forward is to disconnect it completely from the BIOS.  It will become more like an operating system that just gets itself going and then no longer uses the BIOS for anything once it's running.  So that problem, which isn't a big problem for our users, it will become a zero problem.



TOM:  The BIOS is a cruel and fickle mistress.



STEVE:  And it's lonely.  No one really uses it anymore.



TOM:  Pete Costello in Cheesequake, New Jersey - which apparently means 'Upland" or "Upland Village" in the local Native American language.  I had to look it up to find out why something would be called Cheesequake.  Might be pronounced like Ches-a-cake or something.  Anyway, he has extensive experience with compiler evolution and sign-ness.  He writes:  Your "Anatomy of a Security Mistake" brought back nervous ticks from my days compiling embedded systems code for many large firmware-based telephony systems.  I think there's a possible explanation for how such bugs appear in old code:  changes in compiler behavior.  That is, compilers change.



I would run my own compiler tests whenever the compiler vendor or open source would release a new version.  The test consisted of "if" statements with unsigned versus signed comparisons of every permutation of C-type char, unsigned char, short, int, long, et cetera.  What I had found was compilers were not identical, even between revisions.  The "if" path taken would vary between many compiler versions, the fix being to explicitly cast as unsigned wherever there was a test.  Consequently, it is possible to test the source with one compiler, fine.  But if compiled later with a different compiler, the behavior would be different.  Perhaps that explains how old code can suddenly be found behaving unexpectedly.  And of course this is a huge concern for security-related code where the cost of a mistake can be much greater than the program not working as designed.



The confusion started during the formation of the ANSI C standard definition of the language.  Early C compilers from Bell Labs "preserved the sign," while Borland and the ANSI committee thought that was not intuitive, wanting to sell C compilers to the masses, and chose to "preserve the value."  The result was two incompatible compiler types in the programming environs yielding two different path-taking results.  The ANSI committee even created several compiler options allowing a transition to the new C compiler behavior for those customers with existing code bases <sigh>.



But even into the 1990s I still found compilers to exhibit different behaviors.  My company went to lengths of buying me the Plum Hall C Compiler Validation Suite to ensure that the large code base we burned into the hardware was not going to be replaced because of variations caused by a compiler upgrade.  I'm thinking this can explain how code can be developed and even tested, but later with a different compiler exhibit buggy behavior.



STEVE:  I thought that was great news.  Being an assembly coder myself, I haven't been plagued by these problems.  But a number of listeners, and I wanted to acknowledge the others who sent similar notes, basically said very much the same thing.  This signed versus unsigned comparisons apparently has been a bane of C programmers' lives for decades.  And I loved Pete explaining a little bit of the history of how we got into this trouble, that Borland and the ANSI committee thought, well, rather than preserving the sign, we're going to preserve the value, which is just nutty.  It's like, well, okay.  Gosh.



TOM:  I'm sure they had their reasons.



STEVE:  The implications for security, we covered it in detail last week.  So many subtle errors can be caused by that kind of boundary condition.



TOM:  Question #10 comes from Ken Giurlando in Lancaster, Pennsylvania, writing about "Zero Day," "Daemon," and "FreedomTM":  I've been listening since day one, he writes, and I've been happily using SpinRite for many years.  Having just read all these books you recommended and loved them, it seems like the focus should be preventing rootkits and changes to the BIOS.  Short of that we should have an easy way to install a clean OS.  If, for example, in "Zero Day" they had been able to reload the OS in total, as is done with the iPhone, they could have been back up quickly.  I'm sure it is more complex than that.  And of course reloading the OS would have to be done from an external safe OS.  But what is stopping us from doing this now?



STEVE:  I would say two things.  First of all, the size and complexity of the OS.  I mean, I'm sitting here in front of an installation of Windows XP.  I would love nothing more than to somehow easily flush it out and start over.  But as all Windows users know, the OS and our apps get so inextricably entwined that you have to quit the entire system and start over.  It's just not possible to, I mean, well, okay.  I have a friend who is crazy, and he tried to maintain application-ness separately from the OS.  But he spent more time doing that than he did getting work done.



And the second thing is that the original iPhone didn't have these problems because it was completely closed and had no apps.  We'll all remember that the first iPhone, this whole app store thing, and user-provided apps, that came afterwards.  It arguably wasn't part of Apple's original plan, this amazing mother lode that they stumbled into; and creating the apps store wasn't part of their original idea, which is why it took them so long to come up with application programming kits for people who wanted to add apps to phones.



My point is that any closed platform can be vastly more secure than any open platform.  And the more open it is, to the degree that it's incremental - for example, the first iPhone had zero openness; now the iPhone has relatively good openness.  But, for example, the Android platform is wildly open.  And so we see exactly a correlation between security problems and openness that track.  So, unfortunately, no one is willing to have a closed platform.  They're not willing to trade that for security.  Everyone says, oh, we wish we had security.  But then someone says, okay, but what if you can't run your app on it?  Oh, well, then I don't want it at all.



TOM:  Yeah, there's a mobile security firm called Lookout that says Android users are two and a half times more likely to encounter malware than six months ago.  Isn't the argument that open can be more secure is that people can find the bugs faster and squash them, not that it's inherently more secure?



STEVE:  Yeah.  Well, the idea, of course, the idea of openness is that you'll have many more eyes on it, that in a closed environment only the authors know what they're doing, and they're inherently biased toward wanting to believe that it's correct.  Or in some cases, I mean, we've seen evidence of known problems going unfixed because those people just don't care, or you might say they don't have the right priorities or the right time.  But in an open environment you'll always have somebody who says, wait a minute, I've got a free night.  I'll fix this right now, and then merge the fix into the rest of the code stream.



TOM:  And we should point out, in the books "Daemon" and "FreedomTM," the daemon would have corrupted your OS already.  You wouldn't have had a secure version of it most likely.



STEVE:  Exactly.



TOM:  Finally, Question #11.  Quentin Roberts in St. John's, Newfoundland, sends "a message from Matthew Sobol."  Thank you, Steve, for recommending "Daemon" and "FreedomTM."  I just finished reading "FreedomTM," and it was amazing.  Do you have any other books similar to this series?  I'd love to read more like it as my mind is just blown by all the possibilities and how technically accurate it all is.  I've been a long-time listener of Security Now!, and I have been listening to older episodes as I am working, and it has really refreshed some old material I've forgotten over the years.  I enjoy listening every week.  Keep up the great work.  Got any other book recommendations for Quentin here?



STEVE:  Well, okay.  I put this question in, assuming that you would be Leo.  Because, as our listeners know, when I discovered "Daemon" and "FreedomTM," Leo was like, well, duh.



TOM:  Well, I'm the one who told him about "Daemon."



STEVE:  I was really late to the party, apparently.  And it was after I finished reading "Zero Day" and people were tweeting me saying, Steve, if you liked "Zero Day" by Mark Russinovich, you're going to love "Daemon."  And it's like, I am?  So I said that to Leo, he's like, duh.  We've all read that, Gibson.  Where have you been?  So I thought maybe Leo would have any other ideas.  To me, these have just been, I mean, I'm a sci-fi fanatic.  This is a little more real; and, as he said, "it really could happen" and "technically accurate."  I think those are the things that  Quentin said he specifically liked about "Daemon" and "FreedomTM."  And that's sort of not the kind of stuff I normally read, although certainly I am loving these.



TOM:  Now, I know Daniel Suarez is getting close to finishing the third book in that installment.  So...



STEVE:  Whoa, whoa, whoa, whoa, whoa.  Is it the third of this...



TOM:  It's a new book.  I should be careful in saying it is part of the installment because I actually don't know how much in that universe it takes place.  But I know it exists in that same arena, let's put it...



STEVE:  Oh, and Leo said he's going to have him on.



TOM:  Yeah, we're going to try to get him on, definitely.  I don't know that there's a whole lot else besides "Zero Day" by Mark Russinovich that's really like this.  I mean, this is sort of a new genre budding out.  I mean, there's "Neuromancer," and there's traditional cyberpunk.



STEVE:  All the old classics.



TOM:  Yeah.  And Cory Doctorow, one of my favorite Cory Doctorow stories is "When Sysadmins Ruled the Earth," about sort of this disaster happening, and the sysadmins are the only people that can communicate with each other for various things.  So there's some stuff out there.  But really not a lot.  I've heard about "Fatal System Error" by Joseph Menn, but I've never read it.  That would be the only one that I could throw out there.



STEVE:  Okay, cool.



TOM:  Well, that wraps it up.  Thank you, Steve, for allowing me to fill in for Leo.  I know he'll be back next week, barring getting selected for the jury, which I don't...



STEVE:  You did a great job, as always, Tom.



TOM:  Well, thank you.



STEVE:  You powered through these questions, so that was great.



TOM:  You can find Steve Gibson all over the Internet.  But the place you've got to look is GRC.com.  That's where you find SpinRite, that's where you find ShieldsUP!, that's where you find all the stuff going on.  In fact, the new, not dog herder, but the Sound Blaster is - you can find the link there, as well.  Anything else we should mention before we go?



STEVE:  I think we got it.  Our listeners know about SpinRite, that pays all my bills.  And I really appreciate the support of those who purchase it even when they don't need it.  And next week, unless some strange disaster befalls us, I plan to do another installment of our "How the Internet Works," probably talking about ICMP and UDP protocols.  So we'll have a little bit of an interesting deep-tech propellerhead episode once again.



TOM:  You may or may not realize you've run into UDP protocols out there.  So that's a good one to pay attention to.  All right, thanks everybody.



STEVE:  We're talking over one right now, as a matter of fact.



TOM:  That's right, exactly.  All right.  Thanks, everybody, for watching.  You can find us at TWiT.tv/sn.  Leo will be back next week, we hope.  See you then.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.


GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#313

DATE:		August 11, 2011

TITLE:		How The Internet Works:  ICMP & UDP

SPEAKERS:	Steve Gibson & Tom Merritt

SOURCE FILE:	http://media.GRC.com/sn/SN-313.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with a busy week of security updates, and some miscellaneous fun security news, Steve and Tom return for the second installment of "How The Internet Works" with a look at the ICMP and UDP protocols.



TOM MERRITT:  This is Security Now! with Steve Gibson, Episode 313, recorded August 10th, 2011:  How the Internet Works:  ICMP and UDP.



It's time for Security Now!, not security in a few minutes, not security later, Security Now!, the show that keeps you safe online.  And of course joining us the man, the myth, the legend, GRC.com's Steve Gibson.  Welcome back, Steve.  It's good to be with you again.  I didn't think I'd be here.  But Leo's got jury duty again.



STEVE GIBSON:  Yeah, he actually, as we know, it's not that he's still waiting to see whether he has jury duty, as he was a week ago, but he actually did get impaneled, as it's called, and he's one of the 12 jurors.  Or I guess he could be one of the auxiliaries or the extras.  But he's on a really interesting case which he can't talk about because you're not supposed to when you're on a jury until I guess afterwards.  Then I think you're released.



TOM:  Yeah, right.  Once the case is over, you're cleared.  So we can't know anything more about it.  But it sounds, from what he was able to say before he actually went, it sounds really interesting.  So I'll be curious to hear about it.  The judge thinks it'll take two weeks, so I'll be here on Security Now! this week and next week.  And Leo will be back after that, barring some strange courtroom behavior.



STEVE:  And we're glad to have you.  The number 13 figures oddly in this week's Security Now!.  We're Episode #313; and we're also the second Tuesday, we've just passed the second Tuesday of the month, so we've got the standard Microsoft security updates, of which there were 13; and a mega patch from Adobe fixing 13 critical vulnerabilities in Flash and Air and Shockwave.  So everything is 13 at this point.



TOM:  Wow.  That's interesting.  We've also got #1 involved because not only is this Episode #1 of Year #7 of Security Now!, right, but we're also going to be talking about How the Internet Works:  ICMP and UDP.  And if I understand it right, ICMP is Protocol 1.



STEVE:  I think that's true.



TOM:  Yeah.  And it's also...



STEVE:  UDP is 17 or, no, 6, I think it is.



TOM:  It's also 2011.  There, I stretched another couple ones.  And let's get into the security updates.



STEVE:  So we're seeing the same pattern that has been noted by a number of other security watchers, and that is that Microsoft is alternating the size of their security patches from large to small and large to small, month after month.  Last month we had an almost-not-worth-mentioning little tiny patch month.  This month we have a big one.  And two months ago we had a big one.



TOM:  Is that by design?



STEVE:  I don't know.  But, I mean, it's holding.  It's really odd that they'll just do a mega one and then a little one, and then a mega one and a little one.  So it has been noted in the industry that Microsoft's following that pattern.  And they do so again.  So they've issued 13 updates which address 22 different vulnerabilities.  We get the standard update to the MSRT, the Malicious Software Removal Tool, which they're continuing to refine and add signatures to month by month.  And of course we know that that does a quick scan prior to applying patches because what Microsoft discovered the hard way was that patching was failing in instances where users' machines were infected with something which was interacting with their patches.  So they had to add this preemptive MSRT to make sure that it was safe to change the DLLs that make up Windows because some of these the malware was written specifically to particular versions of the Microsoft prior patches.  And so if anything was updated, it could cause, like, the system to break.  It wouldn't be able to reboot, and users were blaming Microsoft when it was in fact the case that their system was already in bad shape, already had something that had crept into it.



In these 22 vulnerabilities, there were only two that Microsoft rated as really critical.  We get sort of the standard cumulative patch for IE which sort of is a reissue of IE.  And, interestingly, it was rated "critical" for versions 7, 8, and 9 of IE, but only "important" for number 6.



TOM:  That's usually the opposite; isn't it?



STEVE:  Yeah, well, what we're seeing is, and this has all sort of been an ongoing theme for us, we often note that older software just has less problems because it's had more time to get pounded on.  And so Microsoft is doing new things, introducing new code in their newer versions of IE, and some of it is going to have problems.  But they're not messing with IE6 anymore, so it's sort of stabilized.



In fact, that's exactly the case with the second critical problem, which exists in the DNS server code that ships only with Windows 2003 and Windows 2008, the Server editions.  It does not exist in their earlier Server editions because those servers didn't have support for something called NAPTR DNS records.  This NAPTR is a new type of DNS record which, I don't know, when I look at it I just close my eyes, and I think, why don't we leave well enough alone, because it stands for Naming Authority Pointer.  And it actually introduces something known as "regular expressions," or "regexes," into DNS.



Well, regexes are an amazingly powerful, but also nightmarish technology.  And the idea of adding regexes into DNS queries just, I mean, it just makes my head spin.  It's like, okay, do we have to just keep messing with this stuff that already works?  This show is about how the Internet works, and we're moving through, taking a very, you know, take our time, slow, methodical deep look at the technologies.  And DNS is one of these that has existed for decades and has been amazingly solid and resilient.  Yet in pushing it forward, we're beginning to break it.  We're beginning to create problems.  And so...



TOM:  Now, is this something Microsoft is implementing, or something that's being implemented that Microsoft is taking the lead from the folks who manage DNS?



STEVE:  It is an RFC, so it's a standard Internet protocol.  But what happens is that several people reported to Microsoft privately that, if a malicious user were to register a domain where the domain server contained these NAPTR records, then arrange to query Microsoft's DNS server, asking it to resolve an NAPTR record, the Microsoft server would go query this other domain that contained these.  And there was a standard coding error in Microsoft's implementation of this NAPTR processing, which doesn't surprise me because regular expressions are a real, I mean, you're just asking for trouble messing with regular expressions.  So we've added those to DNS now, and Microsoft didn't do it completely right.



TOM:  How does this fit in with DNSSEC?  Because isn't DNS, aren't we supposed to be trying to lock down DNS and make it so secure?  Why would we add regular expressions to it?



STEVE:  I know, I know.  Actually, DNSSEC is essentially signing of records to prevent spoofing of them because DNS is a non-secure protocol, that is, it actually travels over UDP, which is one of the topics this week.  We're going to talk about ICMP and UDP as the first two of the Internet protocols that we discover.  And DNS is carried by UDP, which unlike HTTPS, which we also often talk about can be protected by SSL, also known as TLS security, there is no similar security for DNS.  So it's very possible for bad guys to perform man-in-the-middle attacks on DNS, altering the DNS records as they're going out or back and forth to a client that's making a query.  So DNSSEC is a means of adding that missing security to DNS.  So it's different from the NAPTR records.  And the good news is it has been around for a long time.  And this stuff is just slow to get adopted.  When you look at when these various standards are created, it's just inertia on the Internet.  Well, I mean, and another example of that is IPv4 versus IPv6.



TOM:  Oh, yeah, right.



STEVE:  6 has been around forever.  Well, not forever, but for...



TOM:  Over a decade.



STEVE:  Yeah.  We're just now saying, oh, well, I guess we really have to get around to doing this.  Nobody wants to.  So anyway, the point is that in something new which is adding bells and whistles to DNS, Microsoft made a mistake, and it created what they acknowledge is a critical error in Windows 2003 and 2008 DNS Server.  People who are not running DNS on their Windows servers don't have a problem.  So it's only if you do have the DNS service running, there's a mistake in it that can be exploited.  So that gets patched.



And then aside from that there were nine other important fixes, six of which potentially had a high exploitability rating, the way Microsoft now rates these things.  There was some remote code execution in the data access components.  There was a similar remote code execution in Visio.  So if you had Visio installed, and someone sent you a maliciously crafted Visio file, and you opened it, it could run code on your machine and so forth.  So basically standard advice is keep Windows patched all the time.



And then, similarly, it's Adobe's turn.  Adobe's been really quiet now for a few months.  We haven't had much happening with them.  But now they're just letting loose the floodgates.  All of their main components are being updated:  Flash, Air, and Shockwave.  I put a bunch of links in the show notes for users who can go to the show notes to get these links because, if you go to Adobe.com/software/flash/about, then that will show you, that will bring up a web page that shows you your current version, and also contains links to the latest.



I had been at 10.3.181.14 for Flash, and Flash has now been moved to 10.3.183.5.  So anyone who's behind does need to get themselves made current.  This fixes 13 critical vulnerabilities that affect Windows, Mac, Linux, Solaris, and Android platforms, so pretty much across the board.  And of course not iOS because iOS doesn't have Flash and refuses to support Flash.



TOM:  And not Chrome because Chrome automatically updates itself, so you don't have to take any action.



STEVE:  Exactly.  And I think what we've discussed before is that apparently Google has a different relationship with Adobe where they've got, essentially, their own version of Flash that they're building in and may be responsible for themselves, or may get updates directly from Adobe which they then push out in Chrome.  So as you said, it's just doing it automatically by itself.  Air also got updated.  And I'm reluctantly using Air because I use TweetDeck, which is hosted on Air.



TOM:  Uh-huh.  It's the only thing I use, too.



STEVE:  Yeah.  And I wish I didn't have to, but I do.  So if you are a - actually, if you just relaunch the thing you use Air with, it's very good.  I know that TweetDeck is always telling me, oh, there's a new version of Air, so let's download it and then restart TweetDeck, and then you'll be good to go.  So you can simply do that.  Or you can go to get.adobe.com/air in order to update yourself.  It just gives you a download.



And as regards Shockwave, I'm always reminding people that they probably don't need it, that it's the kind of thing that maybe five years ago, if you wanted to, like, do Elf Bowling or something, you might have needed Shockwave...



TOM:  I forgot all about Elf Bowling, yeah.



STEVE:  But unless you really are addicted to Elf Bowling - I think you probably aren't anymore - it's worth removing it.  Now, what you can do is you can just go to adobe.com/shockwave/welcome.  And I did that in Firefox, and it said, oh, click here to get the plug-in.  Don't.  What that means is you don't now have it, and that's better than having a version that just needs to be maintained all the time and represents one more way that bad stuff can get into your computer.  So what you would like, the outcome you would like is adobe.com/shockwave/welcome, and then to be offered the plug-in, and you just say, oh, step away, and close that tab, and just know that you don't have it, and you don't need it.  If it is there, then I would seriously look at just removing it from whatever browser you've installed it in, unless you know you have to have it.  If you know you need it, then, yes, you do want to make sure that you're current because it shares these vulnerabilities with the other tools.  So it's certainly worth doing.



TOM:  And if you're really that into Elf Bowling, you probably have more problems than just your security issues at this point.



STEVE:  Yeah, I would say try Angry Birds.



TOM:  Yeah.



STEVE:  Because it's hosted on Flash, and you don't need Shockwave.



TOM:  There you go.  All right.  Let's move into the security news.  And I was really excited when I saw this xkcd cartoon yesterday.  Randall Munroe, who does xkcd, is really smart, really funny, and it's absolutely worth reading this every day.  But as soon as I saw his cartoon for today, Password Strength, I immediately thought of you, Steve, and the Haystacks, because he's talking about exactly what you were talking about, which is you make these really complicated passwords that you can't remember, and they're actually less secure than an easy-to-remember password.



STEVE:  Well, yes.  So it's a great cartoon.  I know that I'm involved in social networking when thousands of people are sending me this cartoon.  It really filled up my Twitter feed.  And I was glad for it because I appreciated knowing about it.  So just for those who don't, you can just go to xkcd.com today.  Or, if you're not listening to the podcast today, it's #936.  So xkcd.com/936, which will get you to this fun cartoon.



I have to imagine, Tom, that this was inspired, in fact, by the Haystacks page because the second frame of the cartoon talks about how 2^28 bits of entropy, or 28 bits of entropy is 2^28 combinations, which takes three days - and he's correct about that, it's like 72 hours or something - at 1,000 guesses per second.  Which is exactly the number I use on the Haystacks page.  And then he says, "(Plausible attack on a weak remote web service.  Yes, cracking a stolen hash is faster, but it's not what the average user should worry about.)"  Which is exactly the language, or a version of exactly the language I have on that page.  So I'm delighted that Randall Munroe picked up on that and probably knew about it.



The only problem I have is that his math is wrong.  In the first frame he talks about - he uses little squares.  I mean, I love how graphical and xkcd-ish this is.  It's typical for the work he does.  But he's not assigning bits for entropy correctly.  And he's doing it in a way that benefits the point he's trying to make, so I'm not criticizing him.  Just for the sake of our listeners, if you put his example into the Password Haystacks page, it shows that you've got - where he says his example has 28 bits of entropy, I calculate it at 72.3.  And so rather than it being three days at a thousand guesses per second, it's actually 1.83 billion centuries at a thousand guesses per second.



But that really wasn't the point he was trying to make.  He was trying to make the point, and the cartoon does beautifully, that what we've done in trying to create bizarre passwords that are impossible to memorize is we've actually, in some cases, not come up with something that has substantially more strength than, in his case, he suggests taking four easily memorized random words from the dictionary and concatenating them.  So he computes them as each having 11 bits of entropy, so he's assuming that we had a dictionary of 2,048 words because that's 11 bits, and that we randomly chose them from the dictionary to assemble a four-word sentence which is easy to remember.  So 11 bits of entropy each, times four words, is 44 bits of entropy.  And then he says 2^44 is 550 years at a thousand guesses per second.  So that's clearly long enough, since none of us are going to live that long.



TOM:  And on Haystacks it says 78.3 billion trillion centuries.  So it's an order of magnitude more secure than the first password still, even when you're comparing it through Haystacks.



STEVE:  Now, the problem with this is that he ends up with seven - so his example is "correct horse battery staple."  And that's a total of 25 characters.  It's surprising how many websites won't let you use a 25-character password.



TOM:  Yeah.  We've talked about this before.  It's so frustrating.



STEVE:  Yeah, yeah.  So some require, like, between eight and 16.  So you'd have to drop a word or two or something.  So really, if you end up with a website that has a ridiculously small or a worrisomely small maximum password length, then you're really forced to expand the size of the character set.  He's using all lowercase.  So I would say yes, that's a good password.  But we also know there are other ways to create strength.



And in fact explainxkcd.com, which apparently follows xkcd.com's cartoons one for one, like daily, he explains this and has a link to the Haystacks page at GRC, explaining that this really comes from an understanding of what it takes to make passwords strong.  And of course I take the point or the position that as soon as you're forced to do brute-force cracking, length matters more than entropy, which was the theme of the Haystacks page.  So just sort of a fun little coincidence on the day that we're recording the podcast.  Go ahead.



TOM:  I was just going to ask, if I use "correct horse battery staple," I don't have to - my immediate reaction is, well, those are four dictionary words.  Wouldn't a dictionary attack find them?  But the fact that there are four concatenated random words makes it so that it's harder for that dictionary attack to work?



STEVE:  Well, okay.  So here's one of the things that's hardest to get your head around, and this is the reason that first frame in the cartoon is a little misleading, is, for example, he appends a number "3" on the end, and he gives that three bits of entropy because that could be any one of 10 digits.  But the key is the attacker doesn't know that you put a digit on the end.  If you said to the attacker, oh, and by the way, while you're trying to guess my password, I ended it with a digit, well, then the attacker would go, oh, thank you very much.  Now I don't have to try all the lowercase alpha, all the uppercase alpha, and special characters.  I'll just try zero through nine.  And so in that case he's right.  That would be about, actually less than, three bits of entropy.  No, it would be a little bit more, actually because three bits would be eight combinations.



But the point, the key of the concept is the bad guy has no idea what you've done.  And if they did have an idea, if the bad guy knew that, for example, a password was four dictionary words, then, yes, then you've restricted the domain of experimentation.  But the bad guy has no idea what you've done.  So the fact is, it is much easier to make a much stronger password of a certain length by adding, changing the case, and salting it with some special characters.  I mean, even, for example, if you took "correct horse battery staple," and you just stuck dashes in between, or your own special joiner character that you didn't tell anyone about, that makes it radically stronger because the bad guy doesn't know what you - if you make any change to it.  Because, and that was the real insight that the Haystacks page tries to bring across is that anything that you do that is going to sort of take it off the map, all the feedback the attacker gets is it either matches or it doesn't.  They don't get - it's not horseshoes and hand grenades.  They don't get, ooh, that was a close one.



TOM:  Yeah, yeah, yeah.  I think that's what our minds do.



STEVE:  It's getting warmer.  It's getting warmer.



TOM:  Yeah, yeah.  We think that.  We're like, oh, well, we'll get close, and then we'll start to figure it out.  But I think the only weakness that I can think of in this is if somebody cracks a password in some SQL injection attack at a site that was not properly salted, and they get your format, and they want to go after you.  And so they go, okay, it looks like he takes the last two letters of the domain name, and then always has the word "d0g" spelled with a zero.  If they get that little extra bit of information, it would undermine this.



But otherwise, this is definitely the way to go.  Cory Doctorow on Boing Boing pointed out there's a study done at the University of London showing the cost of having these complicated passwords because people can't remember them.  And then they rely on the less secure questions that allow you to recover passwords and all that stuff.  So easy-to-remember secure passwords would save us time, money, hassle, and all kinds of things.



STEVE:  Or maybe passwords that you don't need to remember.



TOM:  Yeah, now, that's - I'm really interested in that.  Are you ready to...



STEVE:  Well, I'm not ready to talk about it yet.  But I will tell our listeners, because you and I were talking about it before we began recording, the thing that I have alluded to a number of times, that I have said to Leo, I'm working on something, I think it's good, but I'm not ready, I don't know yet?  Well, actually for quite a while we have known.  A careful analysis of it has been done.  And I have a way of doing non-software encryption that is paper-based encryption.  Just using a piece of paper as sort of like a custom look-up chart of a certain kind, it is possible to do really strong encryption with no technology.



And that's what I wanted was, in fact, it's called "Off the Grid" because it uses a grid, but it's also not technologically based.  It uses software to create the grid, but the actual use of it uses no technology.  So there's nothing to store, nothing to remember.  It turns domain names into a custom matching password for that domain.  So each domain will just automatically get a different secure password, which you don't need to store, you don't need to remember.  You can just use this thing again, and it will always give you the same password when it's given the same domain name.  So I'll have that in a few weeks, and we'll talk about how it works.



TOM:  That's thrilling.  That's intriguing.  I can't wait for that.  The only weakness there is nobody has pen and paper anymore.  We're going to have to start buying some pads of paper.



All right.  Ever since we talked about Portable Sound Blaster last week, I just hear dogs barking everywhere now.  It's one of those, you know, you learn a new word, and suddenly you notice it everywhere?  My dogs are really good.  But I hear them all around the neighborhood.



STEVE:  Yup.  I've spent a Sunday afternoon with a friend with dogs barking in other people's backyards.  And I think what happens is people must put their dogs out and then they leave, so they don't realize that their dog is just bored and just sitting there trying to, like, bark to be let back in the house.  It's probably the fact that when the dog barks normally, then the dog's owners let him in the house, and he's happier being around.  So inadvertently they're training the dog to bark when they let them out into the backyard, but they leave and don't know.



Anyway, I had a note here because I've continued to do some brainstorming and research in the background.  And one thing really interesting happened that I wanted to share with our listeners because I know that so many of our listeners have been reading "Daemon," the book by Daniel Suarez, whose sequel is "FreedomTM."  And one of the things that we encounter early in the book is Matthew Sobol's technology known as "hypersonic audio," where he's able to geospatially locate a speaking voice as if it's in some location right next to you, like speaking out of the air.



TOM:  They used that in "Minority Report," too.



STEVE:  Yes.  And it turns out that's true.  It actually can be done.  And what intrigues me about it is, and actually it's something that I want to experiment with, with this Portable Sound Blaster project, is essentially you're able to transmit ultrasonic frequency which cannot be heard by the target.  That is, for example, bird hearing falls off around 8,500 cycles per second.  So anything above that, birds won't hear, like 20 KHz.



And if you amplitude modulate that ultrasonic frequency, what happens is the air, it turns out, has a nonlinear response in the face of high pressure sound waves.  The individual sound waves actually heat up the air a little bit and change its temperature on a wave-by-wave basis.  The rate of propagation of sound through a physical medium is a function of temperature and pressure and humidity.  And so that change in temperature changes the speed of sound through the air.  And what happens is the individual waves that you're emitting interact with themselves.  And so what that does is it creates nonlinear propagation.



Well, we know that a slide rule is nothing but adding.  Essentially it's performing addition on a logarithmic scale, that is, on a nonlinear scale.  So that's the way that addition becomes multiplication.  Well, we also know from trigonometry there are a whole raft of trigonometric identities.  One of them says that if you multiply two sine waves together, what you get is the sum and difference of the angles.  So in terms of frequency, if we send out two different frequencies, we end up getting the sum and difference of the frequencies.



So, for example, if we sent out, instead of just a 20 KHz tone, which is inaudible, if we sent out a 19 KHz tone and a 21 KHz tone at the same time, that is, subtract a thousand and add a thousand, then the difference of that is 2 KHz, and the sum is 40 KHz.  Well, we can't hear 40 KHz, either, but we can hear 2 KHz.  And so what this does is this creates a means for producing audio, that is, audible sound, from inaudible sound.  Yet it has the same directivity as ultrasound, which is highly beamable.  You can beam ultrasonic frequencies very easily, whereas you cannot beam normal sonic frequencies.  So anyway, the idea is that this thing would be able to whisper to birds and scare them out of the trees.  You don't have to blast them.  You just make the trees seem like they're haunted.



TOM:  Because the birds are like, where's that coming from?  I feel like I'm in the show "Lost."



STEVE:  Exactly, exactly.



TOM:  So, now, is it because there's interference outside of the direction, and it cancels out?  Is that why you'd only hear it in that one point that you're pointing it towards?



STEVE:  Yeah.  There's some confusion about how this happens.  But some of what I've read indicates that the sound is actually reconstructed when it arrives at its target.  That is, the act of it hitting something, there's something called an "audio spotlight technology" where you can aim this at a wall.  And when it hits the wall, that's when the ultrasonics is demodulated into sonic frequencies.  And so to anyone standing around, the wall appears to be the source of the sound, not some transducer mounted up and back behind somewhere.  So it's really cool technology.



TOM:  Yeah, that is.  That's fantastic.  All right.  Well, I like hearing the updates on the Portable Sound Blaster.  We're going to get to how the Internet works, but we have a SpinRite testimonial first.



STEVE:  Actually, yeah.  We have a listener, Bob Thibodeau.



TOM:  Thibodeau.  I'm 97 percent certain it's Thibodeau because I knew someone who spelled it the same way and pronounced it that way.



STEVE:  I think you got it, Bob Thibodeau.  His subject was YAT:  Yet Another Testimonial.  And he said, "Steve, ho hum, just another testimonial about a business saved by SpinRite."  And he said, "Being an avid TWiT-er - T-W-i-T-e-r, not Twitterer, TWiT-er - I've been addicted to Security Now! since Episode #1."  Oh, he says, "Long about Security Now! #50, I decided that I should invest in SpinRite for the four computers in my business since I don't have a dedicated IT department, and I'm the resident geek, and I never made time for routine tests."  Actually, this is the moral of the story, but we'll get to that in a second.



So he says, "It was Microsoft's Tuesday update on May 8th when it began.  I had updated three of the computers when I was in the shop updating number four.  All went well until the post-update reboot.  Then, nothing.  I tried booting off a boot CD, but dir c:\ reported nothing.  I had not backed up this computer in a little too long, and on it were critical customer files for some impending jobs.  Yikes.  What to do?



"After much fretting and wringing of hands, I remembered I had invested in SpinRite after hearing you telling Leo about some of the letters you'd received.  I got out the CD storage case and found my copy of SpinRite which I had burned to CD, popped it in, and ran the recovery.  After a few hours I came back, and it was finished.  It had recovered some sectors and marked several others as unrecoverable.  I held my breath and rebooted.  The C:\ drive was back, and Windows seemed to start okay.  But then it choked partway through with the error NTOSKRNL, the ntoskrnl.exe, missing or damaged.  I'm no IT pro, but I knew that a missing NTOSKRNL was not good.



"A Windows repair or reinstall was probably in order, but I didn't want to risk losing the critical customer files.  So I decided to pull the hard drive and pop it into a USB case.  I plugged it into another system which was working and, voila, thanks to SpinRite, the C: directory appeared.  I copied the necessary customer files and directories and reinstalled the hard drive in the system.  All seemed to be in order until I went to the CD storage case to get the Windows install disk, but it was not to be found.  I had the CDs for the other systems, but they were XP Pro systems, not XP Home, as this one was.



"I tried running the Windows repair, but it reported missing file ntfs.sys.  I tried copying it from another system, but got the same error.  Clearly, a reinstall was in order.  Now if only SpinRite could recover the missing Windows install CD," which he says as a joke because of course it was missing.  He says, "The rest of the story, I was unable to locate the missing CD, so I bought a Windows Home upgrade CD, and the system is up and running once again.  Jobs got done and products delivered.  Thanks for the great product and for all your whitehat products like ShieldsUP! and the like.  Keep up the good work and the fascinating netcasts with Leo.  Regards, Bob at Imprinted Specialty Products Company."



And of course the moral here is, if he had only run the SpinRite which he had purchased from time to time, it would have prevented this from getting to the point where SpinRite was able to get the drive back, which was good, because then he was able to get his critical files off of it.  But he'd pushed it a little bit past the point where it was able to bring those particular OS files back to the point that they would be able to boot SpinRite.  We've heard many stories where SpinRite did make the system bootable again.  In this case, it had gone too far.



So I'll just remind people, I know that many people have purchased SpinRite to support the podcast and me and my efforts, for which I'm eternally grateful.  But do use it.  Every so often take it out and run it because it'll keep your drives from getting into a condition where you'll wish you'd used it sooner.



TOM:  An ounce of prevention is worth a pound of kernel headaches.



STEVE:  Especially when you've already bought it.



TOM:  Yeah, exactly.  Let's get to the main topic today:  Part 2 of How the Internet Works.  We're talking about ICMP and UDP.



STEVE:  Right.  Four weeks ago we started in on an updated, we're going to take our time, do a real thorough look at the fundamental underlying sort of core technologies of the Internet.  So last time, when we did our first episode of this ongoing series, I explained how there was this fundamental conceptual breakthrough that the pioneers of the Internet made where, instead of having a physical connection from one point to another the way we did at the time, we had leased lines where there was a telephone line permanently anchoring two endpoints that they could use for communicating.  Or we would do a dial-up with a modem in order to dial into a modem pool to hook up to CompuServe or the Source or all the BBSes that existed on a much smaller scale than the big providers.  But in every instance there was essentially an unbroken connection from these two points.



So the concept of changing that and going to a so-called packet-based approach was a huge breakthrough, the idea that, as we discussed four weeks ago, you would have routers which were linked to each other, and you would send your individual packets which were addressed to a destination IP address and sort of just trust or hope, really, that they would get there.  Each router's job was to receive the packets, treating them all pretty much the same, and just look at the IP header in the packet, which enclosed whatever payload this was carrying.  And all it would see was that it was typically version 4, which is what we've always had before, and we know that we're all in the process slowly of moving to version 6.  But traditionally it's been version 4.



And really the only information, there were a few pieces of information that we talked about four weeks ago, primarily the destination IP, which was a 32-bit number composed of four bytes.  The router would look in its so-called routing table and essentially just decide, when the packet came in, which one of the connections, sort of the outgoing connections that connected it to the next router should this packet be put out on, and it would send it on its way.



So I want to talk a little bit about some of the fine points today of what it took to really make that work, and two of the simplest protocols carried by the IP protocol.  I used the example four weeks ago of nested Russian dolls, where one of the key concepts is a hierarchy of protocols.  The beauty of that is that it made it future-proof.  That is, all the routers on the Internet had to understand was the IP protocol, which was as simple as it could possibly be.  It carried the version number which told it what the - and the version number was the first four bits of the first byte of the packet.  So it immediately identified the format of the balance of the packet.



For example, an IPv6 IP packet has a different format because, for example, it's got a 128-bit source IP and destination IP, not 32.  So the header in the packet is different for IPv6 versus IPv4.  So it's the very first four bits that come in tells the router, oh, here's the form that you can expect to find in all the bits that follow.  But one of the key insights that the developers of the Internet had was we are not going to worry about anything but the absolute minimum information that we need to get the job done, meaning that - and this is where this nested dolls visualization comes in is the IP packet itself is the IP header with an undefined payload.  The packet doesn't care what it's carrying.  The router doesn't care or even know what it's carrying.  Its job is simply a little bit of housekeeping, and then forwarding the packet on.



TOM:  And this is why Net Neutrality and Deep Packet Inspection really drives some people nutty, because it messes with that.



STEVE:  Exactly.  It's beginning to break these rules.  And it's the integrity of these rules which is so responsible for the Internet surviving as well as it has, and for the Internet being as apolitical, like in the true sense of politics.  It doesn't like or dislike any particular traffic.  It doesn't know or care what this traffic or that traffic is.  It just gets it, and it sends it towards its destination.



Now, one of the problems that the designers realized they would have is the question of what's called "router loops."  That is, we have this - imagine just a complex network of interconnected routers.  And each router has a routing table which, when it receives a packet, an IP packet, it looks at the destination IP, and it looks in this routing table to determine a direction that the packet should be sent, that is, which of its outgoing connections to other routers take this packet towards its destination.  And that's all it does.  It essentially puts it in the output queue.  And when there's bandwidth available, out it goes on the next hop towards its journey.



Well, the designers realized, if you had big network of these routers, it was possible for a router to make a mistake if its routing table weren't configured correctly, so that a packet might bounce in the wrong direction, that is, it might be sent out the wrong interface.  And it was possible that it could come back around to an earlier router in just a network of interconnected links.  So if that happened, you'd get a loop because...



TOM:  Get stuck in a circle, just going to the same routers over and over again; right?



STEVE:  Exactly.  And so the problem is, what would potentially happen is you'd have packets that would never die.  I mean, very much like we have, like, malware and spyware and viruses and worms that are still out there from a decade ago, trying to reproduce, they never die.



TOM:  Zombie packets.



STEVE:  Yeah, they're on some server in a closet somewhere that got infected with Code Red or Nimda or something.  And it's just out there randomly probing the Internet, the way it has been for 10 years, and it's never going to go away.  So the designers said, okay, we need expiration of packets.  We want the packet to be able to get to its destination.  But we need it not to live forever because that would be bad.  The entire Internet would end up getting clogged up potentially with packets that never die, that just go around in circles forever and bog the whole system down.



So what they added to this fundamental outer layer, the IP layer, the outer wrapper, no matter how deep this wrapper goes, the outer layer that's handled by the routers has something called TTL, the Time To Live.  And it's a byte, which we know can have up to 256 different values.  And again, here's where we get brilliance on the part of these guys.  Any router that receives an incoming packet, and that's what all routers do, every router that receives this packet decrements the TTL value that the packet currently has.  From whatever value it comes in at, it subtracts one.  If that number ever goes to zero, that is, if after subtracting one it's now zero, so the incoming packet had a TTL of one, which the router subtracts one from and goes to zero, the router simply drops the packet.  It will not forward it on.



And that simple, just something that simple, that measure solves the problem of packets living forever.  And in fact what the router will do is it reports - this is one problem that it reports.  We talked last week about how, if routers got congested, they would not generate a report.  That is, if a router was trying to forward a packet, and the buffer on the outgoing link couldn't hold any more packets waiting for transmission, it had permission, formal permission from the original designers to simply discard the packet.  Well, that was one of the things that freaked out the original designers because this meant that sending traffic across the Internet was unreliable.  You couldn't count on it getting there.  But they said, hey, that's a consequence of packet routing.  We'll worry about that later.  We're just going to do a best-effort forwarding of packets across routers.  And we do not want to generate more traffic in the case of congestion because that would be bad.  So we're just going to drop it.



In the case of a router's packet expiring, though, the router will send back a message to the packet's originator, since the IP packet coming in has both a destination IP address where it's going to, where it would like to go to or was trying to get to, and a source IP that tells the router the IP address that generated that packet, all other things being equal.  We know that there are, like, spoofing of source IPs and so forth.  We'll be talking about that at length in the future.  But the router will send back sort of a maintenance level packet, and that's where this first protocol that lives on top of or inside of the IP protocol comes in, that's ICMP.  The router sends back a message saying "time exceeded," essentially.  It encodes in the ICMP packet - there's like a type of ICMP packet and then a subtype.  And so the router sends back a message saying "time exceeded," meaning that your packet didn't make it to its destination.  For whatever reason, it timed out, it died.  Its Time To Live expired before it got to its destination.



So this does a number of things.  First of all, historically, this was really interesting because the Internet didn't used to be very large.  In the beginning it wasn't global in scope.  It started off just being a bunch of universities and a few government entities interconnected experimentally to see if this whole thing worked.  So packets never had to jump very many times.  Remember that Time To Live doesn't mean seconds.  It isn't, even though it's called "Time To Live," it's not the flow of time, it's the number of routers.  It's the number of hops that...



TOM:  It's like a counter.  It's like balls and strikes.



STEVE:  Exactly.  Or in this - yeah, exactly.  So the original operating systems were setting the TTL to a relatively low number, like 16, or maybe 32, because that was enough.  The Internet didn't have - it wasn't that big.  It didn't have that many routers.  But as ISPs came onboard, as ISPs had their own tiers of routers, and as ISPs were connected to ISPs, the Internet grew, and there was this notion of the Internet diameter, which is a cool concept.  In the same way that a circle's diameter is the distance between the furthest points on a circle, the Internet diameter is the largest number of hops between the furthest two points anywhere on the Internet.  I mean, we probably never - you never thought about the internet having a diameter.  But the analogy applies.



So the idea would be someone at that location trying to send a packet to the machine at the other farthest away point on the Internet.  Well, even with everything working correctly, no router loops, no routing table problems, if the operating system generating the source, the original IP packet, were setting its TTL too low, it couldn't reach the destination.  And that happened.  There was a period of time - and this wasn't long ago, this was maybe 10 years ago, we had Windows, and we had UNIX, I mean, the Internet was maturing - some people in some locations were unable ever to get to other websites.



TOM:  They were too far away from the website.



STEVE:  They were too far away.



TOM:  It's weird to think about that.



STEVE:  Isn't that neat?  Yeah.  And so when that was recognized as a problem, there was a quick flurry.  And again, it's like the guys who originally designed these, there's, like, sort of this approach of conservatism.  It's the TTL with eight bits.  They didn't give it 32 because the Internet could never be four billion hops in diameter.  They gave it eight, and they thought, well, that's, you know.  And they initially set it to 16, so just counted down from that.  So if anything was more than 16 routers away, and no one was in the beginning, then there would be a problem.



But what they realized was, oh, crap, the Internet got bigger all of a sudden, and we weren't paying attention, and our operating systems are still setting the TTL too low.  So operating systems quickly changed that.  And, in fact, there are some that are at 128.  Many are now setting the TTL to 255, which is the maximum value it can have.



TOM:  Are we ever going to run out of TTL?



STEVE:  It's actually a problem.  I mean, if we ever had that many hops.  You'd have to be probably in a very deep hole somewhere, trying to reach somebody else in a very deep hole somewhere else.



TOM:  Mars.



STEVE:  So that you had to go many routers out to the top, then many routers along the so-called Internet backbone, and then many routers back down into another hole somewhere, in order not to be able to get there because that's an awful lot of hops.  But so that's where and why this whole TTL, this Time To Live occurred.  Now, one of the things which this creates, which has been a mixed blessing for ISPs, is the ability to trace the route that packets take.



TOM:  Hence traceroute.



STEVE:  Exactly.  So the way that works is normally you emit an IP packet of whatever sort with a TTL deliberately large enough to get to the other end, wherever it's going.  And these days we set them to 128 or sometimes 255, and off they go.  And that's all you hear about it.  But we do know that any router that is responsible for expiring a packet by decrementing that TTL value to zero, it has a responsibility to send back a notice that, sorry, this thing died on the vine.  We couldn't, I'm not allowed to send it any further, and I'm not going to.  So I'm going to send you back a notice letting you know.  And the ICMP packet that it sends back has its IP, that is, the IP address of its own interface that it uses for originating that packet back to you.  So when you, the sender of a packet that died out there on the Internet somewhere, receive this ICMP time exceeded message, you get the source IP of that message is the router IP where the packet died.



Well, now, clever UNIX guys who were putting this all together in the beginning said, hey, it would be cool to be able to trace the route - and actually more than cool, it might be very necessary in some cases to trace the route that a packet takes.  So let's come up with a command - initially this was in UNIX - where we will deliberately set the TTL to one and launch the packet.  Well, we know what happens.  The first router it hits decrements that one to a zero and goes, oh, crap, this packet died.  And so it sends back an ICMP time exceeded message with its IP, which we, the entity trying to traceroute this, we print that out on the screen or record it.



Then we send a packet to the same goal, the same destination, but this time with TTL set to two.  So it goes to the first router, which decrements it to one.  Then it goes to the second router, which decrements it to zero, and that router now has the dilemma of being unable to forward it.  So it sends back its ICMP time exceeded message with a source IP of its source IP back to us.  And so clearly, by simply sending out packets successively with an incrementing TTL, we're able to get back the IP address of every router along the way that this particular packet addressed to this particular destination would take.



TOM:  And not only do you get the map, but you know by the TTL number how many hops it was, independent of counting up the number of IP addresses you get.



STEVE:  Yep.  And then you can do one other thing which is a little bit flaky, but it can be useful, and this is what software does, you can measure the length of time for that roundtrip.  The reason I say it's a little flaky is that you never really can know when a packet goes a few hops out and then comes a few hops back, there's no way to individually know, like, which link might have been slow.  But if you do it often, then because you are getting sort of a total loop time for a packet that expires and comes back, if there were one router that were, like, really bogged down and having a problem, and if the roundtrip time suddenly increased when you went one router further than that, that would be a way of sort of nailing the responsibility of a slow router at a specific location.



TOM:  Now, is that how we get ping?



STEVE:  Well, ping is a little different.  Ping is actually, whereas the destination unreachable message is type code 3 in the ICMP packet, the so-called "echo reply" is zero.  It's like the original message.  I'm not sure why echo request is 8.  But the idea is, ping is a little different, but it's the same sort of, like, underlying Internet plumbing.  Ping is another command that probably all Internet-savvy users know about, where you just say ping, space, and then you're able to put, for example, www.microsoft.com, and your computer will look up the IP address of Microsoft.com in the same way that your browser does and then send off a packet in that direction.  What it's doing is it takes a standard IP packet, gives it the normal TTL, that is, we don't want this one to expire, we want it to actually get to its destination.  And the payload of that IP packet is an ICMP packet.



So here again we get this nesting of the protocols.  The IP packet contains an ICMP packet of type 8, which is echo request.  And so this is the originator, just asking to verify connectivity.  And thus the word "ping," which sort of comes from sonar radar, where you ping something and get back an echo, a sonar echo from the burst of sound that you sent out.  This is sort of exactly the same thing in the Internet world, the idea being that, by agreement, universal agreement, all machines connected to the Internet should, when the machine itself, not programs running in it, not servers running in it or services or applications or anything else, nothing running in the machine, the operating system itself, which is hosting the so-called IP stack, when that IP stack receives a packet and looks at it to decide what to do with it, it sees that that IP packet contains an ICMP echo request right there and then, requiring no other processing, it's supposed to send back an echo reply.



And that is sort of fundamental low-level plumbing of the Internet that allows engineers the convenience of making sure that routers are routing, that links are up, that things are working, that you're able to ping the destination IP.  What that says is I gave an IP - or a domain name, but oftentimes an IP if you're, like, working with the actual plumbing of the Internet, you're not looking at web domain names, you're actually looking at IP addresses - I was able to ping that IP address and got a response back.  The beauty of that is it relies upon nothing else.  Maybe the web server's not up.  Maybe it's not answering email.  Maybe, you know, all these other problems can happen.  But you want to go to the lowest common denominator and determine whether your traffic, any traffic, is making it there and back.  Because if it doesn't respond to ping, then we're talking a little bit about the original days because unfortunately these rules have been broken.  But if it doesn't respond to ping, then that's where you start.  It's like you've got to get that working first.  Then you know your traffic is getting there and back, and you can then start working your way sort of up into more sophisticated levels.



The problem is both ping and traceroute have security problems.  I'm guilty of popularizing the notion of computers being stealthful, of them not revealing themselves at all.  And one of the things that ping does is it says, ah, there's somebody at that IP address.  Well, if everybody were wearing white hats, and we were all being good guys, then this wouldn't be a problem.  But it's sometimes the case, unfortunately, that bad guys are using these protocols against us, and ping can create a security vulnerability just verifying that that machine is there.  And in fact you can flood a user with pings, and that's what some of the early botnets did is all they did was just ping people like crazy because all operating systems are able to use it.  And so it's a simple way of just flooding a given IP with traffic that will just bury it.



TOM:  Poor man's DDoS.



STEVE:  Exactly.  Exactly.  The other problem is that traceroute, because by deliberately expiring packets en route towards a destination it's possible for bad guys to map the topology, that is, the interconnectedness, through ISPs or into corporations, if every link along the way responds with its IP address back to the sender, then again people with malicious intent can use traceroute in order to get the IP addresses of intermediate routers inside of corporations which corporations may not want outsiders to have.  Or even ISPs may not want outsiders to have.



So unfortunately, due to abuse of these fundamental protocols over time, rules have been broken.  For example, many consumer routers now have an option of whether or not to respond to a ping because it's the router itself, the router at that public IP prior to it doing its NAT translation into a private network, it's the router there that is receiving the ping because it's the destination IP address.  If the protocols were all going to be obeyed, the little IP stack in that router would respond to an echo request with an echo reply.



TOM:  But unless I'm running the server, I don't want that.  I don't want anybody to know my router's there.  There's no reason for that.



STEVE:  Exactly.  And, I mean, on one hand it's unfortunate that it's been abused, but it really has been.  There were many, you know, years ago when script kiddies were running little botnets, and it hadn't gone sort of big-time as it has now, they would use the ping responses of people they wanted to, like, blast out of IRC chatrooms in order to see whether they'd taken someone down and, like, overloaded their router by pinging their router.  So exactly as you say, Tom, it seems to me, it's unfortunate, but if the end user wants more security, being stealthful, looking like there's nobody there and not responding to a ping is the way to do that.  And on a much greater scale, ISPs are now often blocking traceroute.  They will suppress by configuration, they're suppressing their own routers' response to time exceeded messages.  They will, if a packet expires inside an ISP, the router drops it, not sending back a time exceeded.



So people may have noticed in some cases, if any of our listeners have done traceroutes, you'll sometimes notice that you'll get back a few, like first a few hops, and then there's like a dead zone of some number of hops.  And then suddenly it comes alive again.  What that dead zone is, is a range of routers that have been administratively configured not to send back time exceeded messages when they expire packets en route.  They won't reveal their presence.  So there's just a blacked out area in a traceroute.  Then it'll come alive again because they're willing to pass those time exceeded packets through their network, just not to originate them.  And so then you'll continue tracerouting out till you finally reach your destination.



And the other thing I should mention is that some ISPs will block ICMP traceroutes, which is why many users who have state-of-the-art Internet probing utilities will notice that traceroutes can use other protocols.  They can use UDP protocol, or TCP, that we'll be talking about in the future, because all of those are encapsulated in the IP, the outer wrapping, the IP protocol packet which is where the destination IP lives and this TTL, the Time To Live, lives.



And I should finally talk about the other purposes that the ICMP packet has.  We talked about how it's - because it's sort of like your lowest level Internet engineering plumbing protocol.  It is the packet where you do a ping by sending out a type 8 echo request and, all other things being equal, receiving a type 0, which is echo reply.  The other thing it has is I talked about this time exceeded message.  Well, that's contained within a ping type 3.  But ping type 3 is sort of a generic destination, destination unreachable message.  And then there's a subtype in the ICMP packet where you could have, like, the reason for its unreachable.  So type 3 means there was a problem.  We couldn't - something was unreachable.  It might be that the network is unreachable, which is a subtype 0.  The host is unreachable, so subtype 1.  The protocol is unreachable, the port is unreachable, or fragmentation was needed along the way.



And then, finally, the other major type is time exceeded.  Fragmentation comes up because, as we talked about four weeks ago, it is possible for a router to receive a packet of a certain size on an incoming link.  But routers are sort of heterogeneously connected to a collection of other routers.  It might be that the router needs to forward the packet across a network that, for whatever reason, can only handle smaller packets.  That used to be the case on telephone lines with modems.  You might have, for example, a chunk of a network that was bridged or interconnected using a high-speed modem or some other protocol than IP.  So it would carry the packet, but it wasn't able to, by virtue of the protocol it was using, it wasn't able to carry a large packet.  So the interface, the outgoing interface would be configured to know what the maximum packet size is that it's able to send.



So, again, the bright people who designed all this from day one, they recognized this could be a problem.  So they designed into the outer wrapper, that original IP wrapper, the ability to packets to become fragmented, that is, where not all of the packet might be forwardable across the next link, that is, the next hop toward its destination.  If that happened, the router had the ability and the permission by default to chop that packet into one or two or more pieces and then send them on in sort of bite-size pieces.



No router reassembles packets that have been fragmented.  It simply forwards them on.  So if a link is encountered where a packet needs to be fragmented, it will chop the packet up into however many number of pieces are necessary and send them each on toward their destination.  And the router that receives it, now it sees them just like any other smaller IP packets and sends them on their way.  The problem is that this does create problems for some protocols, like audio protocols, where we care about performance.  Suddenly we've got, like, lots of little packets that are having to be broken up and forwarded.



It would be nice, the original engineers decided, if there was some way to probe the network to have it tell us what the maximum size packet it's able to send is.  So there is a bit in the header, there's an eight-bit field of flags, just sort of general purpose flag bits, in the original IP header.  And one of them is - actually I think it's four bits, come to think of it.  I'm just doing this from memory.  But I think it's actually just four bits.  One of them instructs the router not to fragment.  It's called a "DF bit" for Don't Fragment.  And if that bit is set, in the same way that the TTL going to zero expires the packet and prevents the router from forwarding it, if the do-not-fragment bit is set in an IP packet that must be fragmented in order for it to move outbound from the router, the router will instead send back another one of these ICMP low-level plumbing packets saying "destination unreachable," and the reason is "fragmented needed."  And the router that generates that will include in that message the size of the maximum size packet that the link it was trying to send the packet out of can handle.



So that's called the Path MTU.  MTU is Maximum Transmission Unit, which is to say what is the maximum size that we're able to use from where we are to where we're trying to get to.  And so what'll happen is, if we are sending a packet out that is too large for any link on its way towards its destination, we can set - and if we want to proactively discover the maximum size packet that we're able to send without causing its fragmentation along the way, we're able to do that by setting the do-not-fragment bit, which says to whatever router receives it and is unable to forward it because the link it's trying to forward it across can't handle a packet of that size because for whatever reason, the protocol that it's trying to use, then it sends an error back to us with the maximum size that link can handle.



So we receive that and go, ooh, okay.  Good to know.  We then send out packets no larger than that.  And again, we may leave the do-not-fragment bit on until we're sure that we're able to get to the destination.  That would tell us if there's any other link even smaller than what we have now.  So it's a means of discovering how large a packet we're able to send from where we are to where we're trying to get to along the way, and again by receiving these ICMP sort of low-level plumbing packets for any trouble that we have of various sorts.  And there actually have been instances where routers or even sometimes inexpensive consumer products have not properly handled these critical Internet plumbing problems and have messed up traffic as a consequence.  So, I mean, there are some of these protocols that - some we can ignore.  It's like, okay, you could say that not responding to a ping is okay, except even that has caused problems.



TOM:  Am I remembering this right?  Is this what took YouTube off the Internet, a problem with the routers in some country?  Maybe it wasn't YouTube.  But I remember something with the MTU being set by a country, and it caused huge problems, like you're saying.



STEVE:  Yes, it can because - and it would be a streaming media company because they really do need to establish, they can't have all of their - I was going to say their pagments being fragmented, but their packets being fragmented.  They need to determine what that is.  And so I think you're right, Tom.  I don't remember if it was YouTube.  But I'm sure that I remember that there were - if that is not handled correctly, you can end up with some serious problems that nothing will get around.



Also there was one type of server, I want to say it was an IRC server, where - but I don't know why it would have been - oh, yeah.  I think IRC, well, I don't remember now.  There was some server where you would make a connection to it, and maybe it was just FTP.  But I thought it was a little more exotic than that.  You would make a connection to it, and it would ping you back to sort of like verify that you were there.  And if you didn't respond to that, it would not finish negotiating the protocol.



And so there were some instances, I remember that's one of the reasons that I thought that the original ZoneAlarm firewall years ago was clever was that they had adaptive stealthing.  If somebody you were not connecting to tried to ping you, the ZoneAlarm firewall would drop the packet.  But if you had an outbound dialogue with a given remote IP, and you got an ICMP echo request from them, then it would respond.  And that ZoneAlarm firewall at the time was the only one that had this smart, adaptive ping response which allowed it to do a better job at creating whatever it was.  I want to say IRC for some reason.  I don't know why the IRC server would have been doing that.  But anyway, it's been a while since I've been thinking about that.



And we have time, so I want to discuss the one additional protocol, aside from ICMP, which is another simple perfect example of nesting protocols, and that's the so-called UDP protocol.  It stands for User Datagram Protocol.



TOM:  Although some people call it Unreliable Datagram Protocol sometimes.



STEVE:  Yes.  And it's actually - it's got both designations.  And that's actually sort of a play on the fact that it is in fact unreliable.



TOM:  On purpose.



STEVE:  But like the geniuses - yes, exactly.  Like the geniuses who created all this in the beginning, they designed the system so that it would still work in the face of designed-in unreliability.  As we talked about four weeks ago, and I reminded us earlier, if a router gets congested, it has permission to just discard packets that it's unable to route because its outbound buffers are full and there's too many packets trying to get out on a link that is congested.  It's able to just drop it and say, oops, sorry, wasn't able to do anything with that.



So we have the outer layer IP packet, which contains the version number of the IP protocol, typically 4, someday more typically 6, we hope.  We know that it contains some flags, like lack of fragmentation permission.  It contains the overall length of the entire packet so that the router knows as data's coming in where the packet ends.  We know that it contains the source IP and destination IP.  We know it contains the TTL, the Time To Live, for that packet.  And it contains a checksum which allows the router to verify that there has been no communication error so far as this packet is moving from hop to hop across the Internet.



There's no notion of ports.  We've all heard about and talk about ports a lot.  That's not in the IP packet.  And again, this is one of the brilliant innovations of the originators.  At the lowest level, all we care about is individual IP addresses.  What happens after the packet gets there is where we begin to add a next layer of complexity.  We know that the IP packet can carry this ICMP payload, which is used for low-level plumbing.  Well, the next level up in complexity is it can also carry a UDP packet.  And true to form, this UDP packet is the minimum necessary to add just one more little layer of complexity.



The UDP packet contains the source port, the destination port, the length of its own payload, and a checksum, followed by whatever it contains.  And that's the point, anything.  So what UDP adds to what we already have, which is really not much, it's just enough to get us there and handle specifying where we want to go, and handle dying on the vine if we can't get there, and handle fragmentation, just enough.  What the UDP adds is some abstraction of what we want to do once we get there.  And that's port numbers.  Ports are nothing but 16-bit values carried in the packet.  That's all they are.  I mean, we talk about them like they're magic, like port 80 and port 443 and...



TOM:  Port 13, 113.



STEVE:  Exactly.  And we get email from IMAP on 143 or from POP on 110.  Or we send it to SMTP on port 25.  And so ports, ports, ports.  DNS is on 53.  So everything is about ports.  But all it is, is just a number.  It's a destination port where we came from which is mostly used for the sake of sending something back to us.  I'm sorry, the source port.  I got that wrong.  The source port, where we came from, which is the source of this traffic, which is used for the sake of getting something back to us.



And then the destination port is like the destination IP.  The destination IP contained in the outer IP wrapper, in the IP header, that gets us to the machine.  Then, if the protocol is UDP, that says, oh, UDP packets contain port numbers.  The IP doesn't.  The IP header doesn't, but the UDP packet does.  So what all that does is, because it contains a destination port, that tells the software running in the computer which service to send this to.  So when services start up, like an SMTP, Simple Mail Transfer Protocol, service starts up in a UNIX machine or whatever server hardware it's running in, it registers itself to listen on port 25, that is, listen for incoming traffic on that port number, which essentially says, when traffic comes in - actually, technically, this is TCP protocol, which we'll be talking about next.  But, for example, a DNS server listens for UDP traffic on port 53.



And so all these ports are is agreement.  They're just abstractions that have been sort of universally agreed to.  Servers, mail servers will listen on port 110, 143, and 25.  DNS servers listen on port 53.  Web servers listen on port 80 and for secure traffic on 443.  And so there is this array of port numbers, the idea being that that allows a sender to identify the class of traffic, the type of traffic that it's sending, simply by saying I want to send traffic to the following IP, that is, the machine at this IP, and to the service listening for traffic on this port number.



So the port number, which is a 16-bit value, so it can have any value - actually port 0 is sort of reserved.  So it can have any value from 1 up to 65535.  And by convention the first 1K ports, the first 1023, since we're not counting zero, or it'd be 1024, the first 1023 ports are reserved as service ports, or server ports.  And again by convention, services typically set themselves up and listen for connections on those ports.  And within systems like UNIX, the user processes that are running are unable to listen on those service ports.  Only services that are registered with the proper permissions are able to set up shop and listen on those lower numbered, from ports 1 to port 1023, those are reserved for that.  Other user processes are able to listen on higher numbered ports.  And so, for example, you'll often find, like, a system will start up an IRQ server, and it runs on port 6666, for example, and also sometimes 6667.



TOM:  The port of the beast.



STEVE:  Exactly.  And sometimes people will run an alternative web server on port 8080, which being above that 1023 boundary is up in user space, so it's not where you normally run a web server.  Which is why, in order to reach it on the URL that you're using, you've got to put a colon after the URL and then manually override your web browser's normal use of port 80 and put a :8080 to tell your web browser, ah, we're going to connect to this location, but we want you to connect on port 8080 rather than on port 80, which is what normal web browser traffic would be using.



TOM:  We're going to have to wrap it up, Steve.  But we want to get to the important point about UDP at the end here, which is what it's good for; right?



STEVE:  Well, yeah.  It is a general purpose, traffic-carrying protocol.  So it's used for UDP.  UDP is probably the thing most often it's used for.  But because it doesn't have - we mentioned it's unreliable, meaning you can't guarantee it gets there.  There's no mechanism for the application that generates UDP traffic for knowing that it gets there.  So, for example, when DNS, which uses UDP, sends a DNS query in a UDP packet to some server's port 53, which is by agreement just the 16-bit number where the DNS server is living, if it doesn't hear a response, that can happen.  So it'll send it again.  And then it'll wait a little bit longer, it backs off a little bit, and then sends it again.  So it'll retry until it gets a response because nothing that we've talked about guarantees delivery of UDP traffic.



That's why it's also known, as you mentioned at the beginning of this, as the Unreliable Datagram Protocol, because it's up to the application itself to deal with that delivery.  One of the things that it's used for often, we're using it for right now, Tom, and that is real-time communications, audio and video, that is to say media streaming on the Internet.  I'm sending traffic to you.  As I'm speaking it's streaming to you over the UDP protocol, which was chosen because it is so simple.  If something gets lost on the way, the audio reconstruction at the other end will try to, like, make up for that lost gap.



TOM:  Or one little pixel gets dropped, it can be interpolated.  And our eyes even can fix things when - if the frame rate drops a little low.  So that's why it's so great for things that are not like we have to have every little piece of it.  We just want it to get there fast.



STEVE:  Well, and kind of that boing-boing sound that our listeners will hear from time to time in this podcast, that is a lost packet.  That is a packet that was either lost or delayed too long.  And the codec which is reconstructing that couldn't wait any longer.  It had to guess.  So it tried to fill in using the audio that it already had, so that there isn't an actual dead spot.  It figures that that funny little kind of that springy sound is better than just having nothing right there.



TOM:  The cry of the lost packet.



STEVE:  So we don't have congestion control.  We don't know if things are too busy.  We don't know if things are missing.  Oh, we also don't know if they even arrive out of order.  That's one of the things that the next protocol we talk about, TCP, handles all of these problems for us transparently.  The problem is it introduces overhead that can cause a problem.  So that's useful for downloading files where we have to have the packets arriving and reassembled in the proper sequence or our file would get broken.  When it's not important, when we really care about minimal overhead, UDP is the protocol we want.  When we want the convenience of making sure that something gets to its destination exactly right, then we use TCP.



TOM:  That's why sometimes you'll hear me say of sentence before end of.



STEVE:  Okay.



TOM:  So anything else for UDP?  Because we have to, I'm getting the wrap sign before we go to TWiG.



STEVE:  Nope, we've got it.  And we will continue when we continue the series with talking about the TCP protocol, which is so brilliantly conceived, it's equal to all the brilliance that we've talked about so far.  It is just a spectacular protocol.



TOM:  TCP's the one people most likely have heard of because they hear about TCP/IP.  Probably that and HTTP are the famous ones.



STEVE:  I would say it is probably demonstratable that TCP is the most used protocol in the history of Earth, as protocols go.  It is THE protocol.  I mean, you could argue that IP is always there because if TCP is there, then IP is encapsulating it.  So, okay, technically, yes.  But, I mean, in terms of a high-level protocol, TCP is it because it's all of our downloads, all of our web browsing, I mean, most of what the Internet is used for is over TCP.  And we will discuss it in detail next time.



TOM:  All right.  Look forward to it.  Thank you, Steve.  I'll be back with you next week.  Leo will be on jury duty for one more week.  And we'll be covering another Q&A session next week.  Don't forget, you can find all the things Steve does, and he does some great stuff, over at GRC.com:  ShieldsUP, SpinRite, the Haystack protocol we were talking about earlier in the show with xkcd.  You can get that there.  Good place to test out your passwords, make some more secure passwords.  Steve, always great to talk to you.  Thanks for letting me sit in for Leo again.



STEVE:  It's a pleasure, Tom.  Talk to you next week.



TOM:  All right.  That's it for Security Now!.  We'll see you next time.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#314

DATE:		August 18, 2011

TITLE:		Listener Feedback #124

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-314.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 3.14159, recorded August 17th, 2011:  Your questions, Steve's answers, #124.



It's time for Security Now!, the show that protects you and your friends online from predators and bad guys and hackers.



STEVE GIBSON:  Those, too, yes.



LEO:  And here's the man in charge of catching that predator - actually, no, you don't catch them, you just expose them - Mr. Steve Gibson of GRC.com, the Gibson Research Corporation, manufacturer of SpinRite, the world's - when you're talking software, I guess you're not a manufacturer, you're a creator.



STEVE:  Publisher, yeah.



LEO:  Also lots of freebies and, of course, the host of Security Now! for 314 episodes, more than five years now.



STEVE:  Yeah, well, more.  Actually, we crossed into - two weeks ago we did 312, which is six times 52.  Or, wait, yeah, six times 52.  We're now in year seven, Leo.



LEO:  What the heck?  More than six years.  Wow.



STEVE:  More than six years, yeah.



LEO:  We didn't - we didn't note that.  But, wow, that's great.  Congratulations.



STEVE:  Yeah, and welcome back, by the way, for all of our regular podcast listeners.  They know that Tom was hosting for two weeks, and you're done with the trial, and so...



LEO:  Jury duty is over.  And that's where the predator came in.  It was an online child predator case which got thrown out for entrapment.  But a very - boy, it was interesting.  The whole thing happened five years ago, and it was at a time when people were really scared of the Internet.  And there was this perception that the Internet was loaded with predators.  We've learned since that it's not.  But at the time people were terrified.  And I think that's when this happened; you know?



STEVE:  Yeah, that's a real good point.  I hadn't thought about that what a difference five years makes in Internet time is, like, amazing.  We should also mention for our listeners who are used to receiving the podcast on Wednesday evening or Thursday morning, that next week I'll be recording, I'm switching places with Paul again.  He's going to take the Wednesday slot, and I'm going to take the Thursday slot.  So Windows Weekly will be early, and Security Now! will be a day late.



LEO:  That's great.



STEVE:  But not a dollar short.



LEO:  Thank you for doing that.  We appreciate your flexibility.  We try not to do that, but Paul's doing a lot of traveling lately.  So we have a Q&A #124 in our continuing series of your questions, Steve's answers.  We're going to get to those in just a second.  But first let's get some security updates.



STEVE:  Okay.  So lots of Mozilla news.  Something that I was really glad to see was the announcement that version 7, believe it or not, we were just at 3, then 4, then 5, now 6 is available.  We're soon to have 7, late next month, late in September.  Version 7, among other changes, will be shrinking Firefox's memory appetite by 20 to 30 percent.  There's a two-month-old project called MemShrink, which began in mid-June, which has been working on finding and closing memory holes and leaks.  One of the developers was quoted saying "Firefox v7 uses less memory than v6 (and 4 and 5), often 20 to 30 percent less, and sometimes as much as 50 percent less.  This means that Firefox 7 is faster, sometimes drastically so, and less likely to crash, particularly if you have many websites open at once and/or keep Firefox running for a long time between restarts."



Well, this is something that I have noticed because I watch memory consumption pretty much constantly.  I have, like, Task Manager open on one part of one of my screens just because I'm seeing this problem.  And I've noticed that I'm still on 5, and it's been saying that 6 is available, except that 6 is incompatible with three add-ons that I would like to be using, so I'm holding off jumping up to 6 until they catch up.  But if I close Firefox, then I see memory drop like 500 megs, half a gig.  And then, if I restart it, all the same tabs reload.  And I should say that's about 50 tabs that I have open.  I love tabs.  And then as the tabs load, memory creeps back up again, but only to about maybe half to two thirds of what it was before.  And I have noticed also that, if I close tabs, that memory is never recovered.



So I'm really delighted that Firefox is - that the Mozilla guys are going to be addressing this in Firefox because I've been looking enviously over at Chrome, thinking, well, it isn't really quite as tab-friendly as Firefox is, and I really like my add-ons.  Ghostery is there, but NoScript, as easy as it is over Firefox, is not yet available over on Chrome in the same fashion.  So I'm staying with Firefox for now.



LEO:  So funny, we just were talking about Firefox 4 coming out, then 5 came out.  And now 6 has come out.  I guess we should stop looking at numbers; right?



STEVE:  Well, and in fact Mozilla is going to be helping us with that.  They're taking the version numbers off of Firefox.  They've said that they're going to be removing Firefox's version numbering from view completely.  It will not be in the "About" window anymore.  The official position is that users don't care about version numbers.



LEO:  Yeah, but we care - well, wait.  We care if the plug-ins don't work.



STEVE:  That's a very good point.



LEO:  I mean, Chrome doesn't trumpet version numbers, but you can always go and look and see what version number you're using.



STEVE:  Right.  So what's happening is, Asa Dotzler, who's one of the developers, he announced in a Bugzilla bug report that the Firefox "About" dialogue will stop listing version numbers, but simply state that the browser checked for an update recently, and that the user is running the latest version.  Those who want to know what version they're running can consult the "about:support" window.



LEO:  Oh, okay.



STEVE:  So you have to type "about:support" into the URL, and that'll then bring you lots of details about stuff.  So, I mean, I think we're seeing them being influenced by the Chrome model, which is - actually I had a lot of people tweeting that they got a kick out of my saying that the Chrome version numbers reminded me of the U.S. debt clock because it was just going all the time, and the number just kept changing.  Every time you looked, it was different.  So a change is coming for add-ons also in the so-called "Aurora" release, which is available I think now in pre-beta.  If you put "Firefox Aurora" into Google, it'll take you to a URL where you can download.



What they're doing is they're going to start protecting us from software which adds add-ons to Firefox without our explicit knowledge and permission.  We've often talked, for example, about how you can get toolbars and add-ons added unless you're very careful installing things.  And in some cases you'll add software that won't even ask for your permission or knowledge.  So what's going to happen is that, starting with Aurora, which is not yet in general release, but it should be soon, especially at the rate that these guys are going, you will be asked to explicitly authorize any add-ons that have appeared in Firefox, but you have not yet authorized, when you upgrade to a new version, like a major version.



And I'm not sure how they're going to handle this not showing you the version versus major version.  We talked about this a few months ago, saying that you would always be given the opportunity of acknowledging a major version update.  So maybe that'll still be the case.  You just won't see it in the About box.  You'll have to go to this about:support URL page in order to get that.  So I guess that's what's going to happen.  So anyway, so it's good news that anything that is installed without our explicit acknowledgment will not be run.  Firefox will say, okay, here's something new.  You need to give the browser permission to run this.  And presumably you could say, whoa, that's not something that I want, and just decline to accept that, which is, I think, really good.



So there's been some controversy over how many Flash bugs Adobe has fixed recently.  Our friend Tavis Ormandy, who's a security researcher at Google, blogged that he had given Adobe 400, reported 400 Flash bugs, although Adobe was counting them as 80.  Adobe's Brad Arkin, who is the senior director of product security and privacy, posted to Adobe's blog, as a consequence of some of this back-and-forth, he said, "There's been some chatter about CVE numbers lately, so I thought it would be helpful to clarify Adobe's position on how we use CVEs to communicate product security information.  CVE.mitre.org describes them as 'international in scope and free for public use, CVE is a dictionary of publicly known information about security vulnerabilities and exposures.'"



So Brad continues:  "Unfortunately" - and I have to say he brings up some good points here.  He says, "Unfortunately, there are many differences in opinion on how CVEs should be used in real-world situations.  If there are four instances of unsafe buffer usage resolved with a single buffer size check, does that represent four CVEs or just one?  If vulnerable code is copied and pasted into multiple products, should the vulnerable line of code be described with a single CVE or one unique CVE for each product?  How does the answer change, if the product is vulnerable because of a linked vulnerable library rather than copied-and-pasted code?"  And he says, "The real-world questions go on and on."



LEO:  Yeah, but in the real world we just care about vulnerabilities.  We don't care if it's cut-and-pasted.  It's a vulnerability.



STEVE:  Just fix the damn stuff.  So I got a kick out of SANS Institute, one of the SANS Institute editors, William Murray, was quoted in a recent SANS newsletter about this controversy.  And he said, "Instead of disputing the number, Adobe should be trying to identify what they are doing fundamentally wrong.  Whether there are 400 or 80, there must be a pattern here somewhere."



LEO:  Well, I don't know about that.  The pattern is ineptness.



STEVE:  Now, I have to thank Glenn Frasier from tweeting this morning something that just hit the news because I could see me, SGgrc, getting deluged with people making sure I had seen this and wanting to know what it meant.  So I wanted to let everyone - I wanted to get ahead of this one this time.  So thanks, Glenn.  AES is still safe.



LEO:  Whew.



STEVE:  Two years ago in May we reported on what's called a "related key attack" where some very sharp security researchers had discovered that there was a slight vulnerability in what's called the "key scheduling" portion of AES.  And I covered key scheduling for AES in great detail on a podcast we did specifically about how AES works, where we completely dissect it and look at it.  So if anyone's curious, you can go back and find that.



As has happened repeatedly, and happened again, attacks against crypto things, as Bruce Schneier has famously said, "They only get better.  They never get worse."  So what's just in the news today, which Glenn picked up on and forwarded to me, is an advancement of this such that it no longer requires four related keys.  It basically is a weakness in a single key which has a four-to-one strength-reducing effect on AES key strength.  So, for example, it  takes a 128-bit key, and since it's a four-to-one reduction, that's two bits.  So it has the effect of reducing a 128-bit AES key to 126 bits.  Well, that's significant, but we still have vastly more protection than we need.  And AES can run 256-bit keys, which aren't affected at all.



But it brings some real-world scale to this.  Even with this new attack, so-called "attack," which Schneier has already said doesn't really matter, because Bruce has weighed in, he said - no, this is not he.  But the effort to recover a key is still huge.  So, for example, the number of steps to find the key for AES 128 is, in decimal, it's an 8 followed by 37 zeroes.  So to put this into perspective, on a trillion machines that each could test a billion keys per second, it would still take more than two billion years to recover an AES 128-bit key.  So note that large corporations are believed to have millions of machines, and current machines can only test 10 million keys per second.



So there is no company or organization that we know of that has that many machines that are nearly that fast.  And even if they did, we would have to wait two billion years for one single AES-128 key to get broken.  So that's, yes, it used to be eight billion years; now it's two billion years.  So it's worth watching, but I wanted to put everyone's mind at rest.  AES has not cracked.  some But two bits' worth of weakness was found.  And that's significant; but we still have, as far as we know, the strongest cipher around.



Oh, and this is actually out of place, but something about Firefox has been driving me batty.  And I just discovered what was going on this morning.  And I wanted to let any of our listeners know.  We've talked before about how nice it is to be able to float your mouse over a window and use the scrolling wheel in order to scroll that window without having to click on it to give it current focus, which I think is just super handy.  And in fact one of my favorite little pieces of freeware is called Kat something, I want to say KatMouse.  Yeah, K-a-t-M-o-u-s-e.  So when I updated to Firefox 5, it sort of stopped working reliably, which, again, I just can't stand.  I love having the inertial scroll for, like, moving through web pages.



What I discovered this morning is that it is scrolling the wrong tab.  I had opened one of Tavis Ormandy's PowerPoint presentations, or maybe it's a PDF; but it's, like, paged.  And for some reason, as I was closing tabs, I noticed that it was on a different page than I had left it.  And so by just experimenting this morning, I realized that successive pages, when they weren't being scrolled by KatMouse visibly, it was a different tab that was receiving the scroll message.  So, Mozilla, if you guys are listening, I hope you found this or fixed it in version 6.  And if not today in version 6, then in version 7 probably by tomorrow morning.  So that would be great because it would be nice to have that fixed.



And Leo, you and I talked when iPhone 4 came out about the question of whether Gizmodo was going to be in hot water for publishing that.  So I thought I would just mention that prosecutors in California have decided that they will not file charge against the tech blog Gizmodo for its purchase of an iPhone 4 prototype which they bought.  And then I guess Jason Chen, an editor at Gizmodo, was going to be potentially be in some hot water for showing us all the iPhone 4, which of course annoyed Steve Jobs to no end.  The guys that sold it to him are still in trouble, probably.



LEO:  Oh, yeah.  They got prosecuted.  In fact, I think they got convicted.



STEVE:  Ooh.  And a San Mateo County assistant district attorney said that the difficulty his office faced in terms of prosecuting Chen was that Chen and Gizmodo were primarily, in their view, engaged in a journalistic effort to conduct an investigation into the phone, so they were protected by the editorial shield law.



LEO:  Good, thank you.



STEVE:  Yes.  That was, I think, the right outcome.



LEO:  Yeah, I agree.  And I think it was the right outcome to prosecute the guys who stole the phone.  I think that was also the right thing to do.



STEVE:  And then profited by selling it.



LEO:  Yes, exactly.  That was a little sleazy, yeah.



STEVE:  I wanted to acknowledge somebody, unfortunately it flashed by my Twitter feed so I can't give credit where it's due.  Someone mentioned that Lion fixed one of my biggest pet peeves about the Mac, which is you can now drag any window border.  You no longer need to separately move the title bar and then resize in the lower right-hand corner.  It's like, oh, thank you.  So for anyone who misses that feature in Mac OS, we have it now.  Which is really great.  And, Leo, when I was up there sitting next to Kevin, you and Kevin were talking about how Lion changed the scrolling direction so that it was more like a touch screen, so it was taking you guys some time to get used to it.  And I refused to put up with that.  So...



LEO:  Of course you did.  But you could change it.



STEVE:  Yes.  And I wanted to make sure everyone knew.  I just went into Preferences, and sure enough, right there is a checkbox saying "return it to the proper way of scrolling."



LEO:  If you're using, as I am, a trackpad, it actually does make sense.  You get used to it pretty darn quickly.  But I can't say I blame you.  And certainly if you're using a scroll wheel mouse, it doesn't make any sense.  You really do want to change the setting.



STEVE:  And I didn't have a chance when we were up there doing TWiT.  So is it the idea of, like, dragging the page rather than dragging the scroll bar?



LEO:  Precisely.  So when I move my fingers up on the track, it moves the page up.  When I move my fingers down on the track, it moves the page down.  And that's kind of direct drive.  It certainly makes sense when you're touching the screen.  There's no question on a pad that's what you should do.  The issue is it's not exactly direct drive when you're using a trackpad.  That's 50-50.  When you get to a mouse, and you're using a scroll wheel, scrolling down moves the page in the completely opposite way of how you expect it to go.  But, you know, gaming has always had this problem.  When you do a flight simulator, or even just use a look-around in a game...



STEVE:  Push your stick forward.



LEO:  ...there's two different ways to do it.  And it's completely analogous to this situation.  And it's different strokes for different folks.  Some people change that, invert the mouse look, and some people use the standard mouse look.  And you just do what you like.



STEVE:  You just said "different strokes for different folks."  Which of course is a great pun.



LEO:  It's perfect.



STEVE:  It is.  Okay.  And last week we covered - we did the second in our series on How the Internet Works while you were in trial, Leo, discussing ICMP and UDP.  And I got a bunch - I didn't realize, I mean, I'd heard them years ago, but I just wanted to share them with people.  A bunch of people tweeted me some old longstanding jokes about, of all things, I mean, this is serious geek jokeness.  Kevin Panko tweeted, he said, "I would tell you a UDP joke, but you might not get it."



LEO:  Now, that's good.  That is the geekiest joke.  I mean, only geeks would get that; right?  Or not, as the case may be. 



STEVE:  Exactly.  I would tell you a UDP joke, but you might not get it.  And there are about four or five variations on that theme.  So I wanted to thank everybody who sent those to me because I got a kick out of it.



LEO:  That's really good.



STEVE:  And then Matthew Stinar tweeted, he said, "Steve, hearing you talk about UDP being unreliable reminded me of a joke I read:  'The best thing about TCP jokes is you always get them.'"



LEO:  Even if you have to retransmit once or twice.



STEVE:  One way or the other, you're going to get the joke.



LEO:  Love it.



STEVE:  Yes.  And I wanted to tell people my plan is next week when I'm up there in person with you, Leo, I am going to unveil this multi-month project I've been working on.  What I have been working on, and I did mention it this week with Tom, I've come up with a paper-based cipher, a strong encryption that uses nothing but a piece of paper.



LEO:  This is, by the way, the holy grail for amateur cryptologists.  They're always looking for ways to do non-computer based because crypto's been solved really for computers, but non-computer-based crypto.



STEVE:  Well, and so this is called "Off the Grid" because it is - it's non-technology.  It uses no computers.  And it is based on a specially constructed grid which you use as a reference.  And I began working on this immediately after publishing the Password Haystacks page because the one thing we still don't have is a way of doing per-website passwords where you don't need to write something down or memorize something, but you still have a different password for every website.  This encrypts the domain name into a secure password in a way that cannot be reversed.  And so I'm going to tell everybody about a really interesting journey I had in developing it, and all about how it works, next week when I'm there in the studio with you.



LEO:  Web32 in our chatroom said, "Oh, Perfect Papyrus Passwords."  Actually, you know, Neal Stephenson in "Cryptonomicon" came up with - and I don't know, I've never really seen it vetted, but a playing card-based crypto system.  And I seem to remember that he worked with somebody like Bruce Schneier to validate it as a working crypto system.  So it's very interesting.  And you still do need it because there's spies and other things, people who don't have computers, I guess.



STEVE:  Well, and the problem, of course, is that if it's in your computer, it is susceptible to being compromised.  I mean, we had a scare, as we all know, with LastPass a few months ago, them worrying that their database had gotten loose.  There's some concern that the solutions that hash that are running in your browser could expose your master password.  So there's a certain group of people who would just like to have something low tech.  And so this is low tech, but high security.  And so I think, I know it's going to be a great episode.  The thing that made me think about it is I want to next talk about TCP, the TCP protocol.  We can't do that next week, so that'll be three weeks from now, after the Q&A between the Off the Grid crypto system and then talking about TCP.



I did want to share a really neat story that's titled "SpinRite Saves My Teeth."  Christian Alexandrov, who's in Sofia City, Bulgaria - and we can tell that English is not his native language, but his is much better than my Bulgarian.  So he says, "SpinRite did it again.  This time SpinRite saved my teeth.  Hello, Steve.  I decided I want to share this story with SpinRite followers.  I survived a car crash recently caused by drunk driver speeding and having difficulties controlling his BMW.  This driver hit the car behind mine, and it hit mine.  After all ended, I had some injuries on my head, nothing serious.  But the most of my injuries required dental help.  At this time I was unable to afford such serious interaction from a dentist in terms of money, but I had no choice.  Health is more important.



"A friend of mine is a dentist who has the equipment to heal me and the qualifications to do so.  I was about to ask him to give me time to pay him with few separate payments in time.  He told me he cannot do much.  His computer works poorly and cannot access all patient records, including my dental records."



LEO:  I see where we're going here.



STEVE:  You see where this is going.  I told him I can fix this as soon as pain is relieved to be able to focus on the task at hand.  He gave me painkilling injection and allowed me to fix his PC.  I booted SpinRite on Level 4 to check his drive.  We got to the problem late.  The drive was in deep trouble already.  But we got lucky because it was not too late.  We quickly saw green 'R'" - meaning recovered - "icons when SpinRite began its work.  SpinRite found two areas that were bad.  One contained one Windows XP system DLL file needed for the OS to work at all.  The second area contained pieces of the database with the dental records.  While the dentist was trying to focus on my first healing session, I had firm belief in SpinRite.  After two days of constant work" - presumably on the hard drive and not his mouth...



LEO:  I hope.



STEVE:  "...SpinRite completed the hard drive maintenance reporting that it successfully recovered all damaged areas and marked them as unusable for the drive.  On the drive map I saw two green "R" icons, which was what I was hoping for.  I repeated the process.  On the map I saw two "B" icons on the places where the green "R" icons were before, indicating these areas will not be used again.  After the second pass on Level 4, SpinRite says that there were no bad areas.  Great.  We rebooted the PC, and jaws hit the floor."  Which I thought was an interesting pun in this case.  "The system booted so very fast, and the database with all dental records was there in perfect condition, opened in a second and responding very fast to inputs and searches.  The dentist was so happy that he asked me for advice, how to prevent this.  I told him to buy two NAS servers and use them as redundant backup for his date."



LEO:  There you go.



STEVE:  Yeah.  "I told him two in case one dies, to have another copy for precaution.  The dentist promised me he will heal me for free.  Then, a few  healing sessions later, we made an arrangement.  I will maintain and fix his computers.  In return, he will heal me every time I need dental help.  I have four more healing sessions until I'm fully healed and fully recovered.  Thank you, Steve, for this great piece of software, and thank you Steve and Leo for this great podcast.  I wish best of luck to GRC.com and TWiT.tv from a happy SpinRite user."



LEO:  That's great.



STEVE:  So I just loved...



LEO:  That's six or seven sessions, we're talking 10 grand, 20 grand?  That's a lot of work.



STEVE:  Boy.  And he must have been in pain because he said he needed an injection in order to even be able to think straight.  So thank you for the report, Christian.



LEO:  Don't forget to floss.  All right, Steve.  I've been perusing these questions.  There's some good ones in here.  Are you ready?



STEVE:  You betcha.



LEO:  All right.  Question #1 comes from Stuart Henry on Twitter, @quotingstu, a winemaker and web developer just up the road apiece in Napa, California.  He says:  Do ICMP packets have a TTL value?  You'd better define that one for us.



STEVE:  Well, okay.  So this sort of hails back to last week's episode and three weeks ago, the first two episodes in our How the Internet Works series which we are firing up.  And the answer is yes, because everything that the Internet carries is enclosed in an IP packet.  So remember that the IP packet is sort of the - we used the analogy three weeks ago, you'll remember this, Leo, of the Russian dolls, where you've got a smaller one inside a larger one inside a larger one inside a larger one.  Or you could also think of it as an envelope inside an envelope inside an envelope.



Well, the outer envelope is the IP container which has the - and this was the brilliance of the Internet designers - only the things, the minimum necessary information for getting the packet from the source IP to the destination IP.  So it contains fields for each of those.  But, for example, there's no port numbers there because that's not about two different machines.  That's about more of the content of the packet, which on this level of the hierarchy we don't care about.  We only want it to get from A to B.



But we also need the minimum amount of information for that job.  And one of those is the TTL value because we need packets not to make the mistake of living forever.  They have to die.  If for some reason there's a router loop that is sending them in a big circle, we want those packets to expire, as we discussed last week.  So, yes.  Everything - ICMP, UDP, TCP, all the other protocols, because they are contained inside the IP envelope, inherit all the characteristics of that containing envelope, one of which is a TTL.  So that's fundamental to a packet on the Internet, just like the source IP and destination IP.



LEO:  Cool.  I'm sorry I missed the first two of those episodes.  I'll have to go back and listen.



STEVE:  Yeah.  Actually last week.  I've had a huge amount of positive feedback from people.  I guess I'm just, I don't know, I'm in the zone for these.  And we're developing sort of a style that a lot of people like, saying that, gee, they thought they knew how the Internet worked until they heard this, and now they've really got it, now really get it.  So...



LEO:  I really love that is the beginning stuff.  In fact, somebody sent me an email saying - this is really funny.  Just today I got this email saying, "You should do more help and how-to.  I'd really like to know more about like how operating systems work, how the Internet works."  And I said, "Well, check out - I think people, because it says "Security Now!" think, oh, I'm not interested in security.  But you've done so much great basic education and how not only security like crypto works, but how computers in general work.  This is a...



STEVE:  Well, remember we did that whole series on the fundamentals of how computers operate.



LEO:  From ground zero all the way up.  And I think that that - you couldn't get much better than that.  Mike Kowalczyk with Question #2 in Montgomery, New Jersey, he's wondering about IP stack vulnerabilities.  Steve, as a long-time listener I want to thank you for the great show and for your insightful coverage of all things security.  I'm enjoying your series on How the Internet Works.  In last week's episode 313, ICMP and UDP, you discussed the IP stack that resides on all routers and Internet-connected devices.  My question is, what is there to prevent malware from modifying the IP stack?  Just one possible attack that came to mind would be to modify the stack on a router or computer to always decrement the TTL, the Time To Live, to zero so that no packets are ever delivered.  How is the IP stack implemented, or what's in place to prevent this from happening?  Oh, boy.  Thanks, and keep up the great work.  Mike.



STEVE:  Okay.  So I haven't really - we've used the term "stack," but I've never explicitly defined it.  I'll probably...



LEO:  It's not the kind of stack that we talk about in memory, a memory stack; right?



STEVE:  Correct.  It is not.



LEO:  Okay.  That's confusing.



STEVE:  Yeah, it is.  And I will discuss it again, not in a Q&A, just because it's an important concept.  But it's worth mentioning here.  It's a conceptual stack which mirrors the hierarchy of the Internet's packets.  For example, the normal term is a TCP/IP stack.  And the idea is that you have the application that wants to communicate, like your browser or your email client or your DNS client.  And it sends its data into the operating system, which conceptually has organized these layers in a stack, a stack of layers.



So, for example, the data that the web server is going to use uses TCP.  So that data gets put into a TCP packet, meaning that it's wrapped with the TCP headers.  Then it goes, it drops to the next layer down in the stack, where it was just the IP layer.  And so whatever comes from above gets wrapped in an IP layer.  Then it goes to the next layer, which is the physical layer, the Ethernet layer, which wraps it in an Ethernet packet, and then off it goes out of the machine.  Packets coming back in get the reverse treatment.  First the Ethernet wrapper is taken off.  It's checked and taken off and then passed up the stack to the next layer, which is the IP layer.  The stack examines that, makes sure that it all looks right, checksums are balanced, it's the correct IP address and so forth.  If so, it removes the IP wrapper, essentially sort of opens the envelope and takes out what's in that layer of the envelope and then passes it up the stack to the next layer, which is going to be UDP or TCP or ICMP, whatever it is that was wrapped in the IP layer.



So that's where this stack concept comes from.  It's a stack that sort of represents a hierarchy of protocols.  So as we move down, we're wrapping things in layer after layer, like these Russian dolls.  And as we go up the tack, we're reversing the process, taking successive wrappers off until we finally get up to just the raw data that we actually wanted to send to a remote point.



So Mike's question has a little bit of confusion here because he refers to routers and computers as being synonymous in this way, and they're not.  Routers don't have stacks.  They process IP packets, but you can talk to a router where it is the endpoint of your discussion.  For example, you can telnet to a router using the telnet protocol over TCP.  And there it's a TCP endpoint; you're connecting with it.



But the actual routing process doesn't involve a stack.  The router takes in an IP packet, looks to see where it's going, and then decrements the TTL as we just discussed in the first question, and as Mike references, if that Time To Live hits zero, the router says, well, this packet is dead.  And so it doesn't forward it.  Instead it sends a note back to the sender saying, hey, by the way, this packet never got to its destination.  It died before it got to its final proper destination.



But routers themselves in the routing aspect of them don't have stacks.  The IP stack involves interpreting the protocol, and routers really don't do that.  They just receive packets.  They don't care what it contains.  They look at where it's going.  They make sure it's valid to forward it, and then they send it out over whatever link is closest to where it's going based on the routing table, which we'll be talking about in a future episode.



So Mike's question, with that background, is what's to prevent the stacks or, for example, the software in the router from being altered so that they don't work?  And the answer is, well, only the same kind of protections we normally have.  For example, the system's stack is located down in the kernel, where software is not supposed to be able to get to it at all, and the kernel works to protect itself.  So it's trying not to allow the OS to be altered, and the stack is part of the OS.  So those same protections pertain.  But remember that any software could, rather than, like, setting the TTL to zero so that the packet would die, it could just not - the router could just say, I'm not going to send the packet.  So there are all kinds of things that could break that would cause routing not to work that are actually even simpler than setting the TTL to zero.  Just choosing not to route it would do the same thing.



LEO:  I mean, I think there are a lot of hack attacks that involve hacking the TCP stack.



STEVE:  Oh, yeah.



LEO:  Yeah.  That's a very common attack.  In fact, sometimes you know that happened because you'll remove spyware, and you'll lose Internet access.  And that's because the spyware was embedded in the TCP/IP stack.



STEVE:  Yup.  There's something called an LSP, a Layered Service Provider, which is a protocol stack in Windows.  And traditionally spyware has installed itself in there.  And the way it works is you have to sort of knit everybody together.  And if you just yank that out, you just lose all your connectivity with the Internet.



LEO:  Jared in Western Australia has a question for you about traceroute.  He says:  What determines the exact path taken by packets?  When you do a traceroute, does the path taken always remain the same, or does it change from moment to moment?



STEVE:  Well, it's a great question.  And part of the original genius of the guys that designed packet switching was they realized it doesn't matter.  The idea is you have this vast network of routers that are interconnected.  And you inject a packet somewhere, anywhere in this single global, I mean, it became global now, network, where it's got a destination IP.  And the job of any router receiving that packet is to forward it on in what it thinks is the best direction.  This system is as robust as it is because, if a link goes down between two routers, well, then the router goes, oh, I don't have that link, which used to be my preferred link for that packet.  So I'm going to send it out of this link.



So packets, they're sort of like little autonomous bits of information that have a destination address, and they're just going to try to find their way to that address one way or the other.  So it's often the case when, like, something is flaky, there's something called "router flapping," where an interface is flapping, which is the term used for kind of coming up and down.  It looks good for a second, then something goes wrong, and the link is broken, and then it comes up again, and then it goes down again.  And so network engineers call that "flapping."  So if you were, like, doing a traceroute over a path that happened to have a flaky link like that, then you might find that from one moment to another the actual hops being taken along the way would vary.  And there's really nothing wrong with that.  Everything on the Internet works because there really is no notion of the proper path.  There's just we want the packets to get there.



And what's really interesting, we'll be talking about this in TCP, is that ICMP and UDP, which are just sort of raw best-effort protocols, there's nothing to say that the packets even arrive in the same order.  You could send three packets out and have, because of interface congestion or a link that goes down, you might have those three packets take different routes, running over links of different speed, and they could arrive in a different order.  So obviously you don't want files being transferred having their blocks of, like their buffers of data arriving and, like, being reordered in a different sequence.  So TCP deals with things like out-of-sequence packet ordering; whereas UDP and ICMP that we discussed last week don't.  So the whole network works, even if the actual specific path taken varies from one moment to the next, which is just so cool.



LEO:  Question #4, Bill in Michigan asks and reminds:  Not ICMP but IDENT.  In 313, Steve, last show, you were trying to remember how an IRC server was checking if you were there.  I'm sure you were thinking of IDENT, that's TCP port 113, a port that's usually not stealthed - in fact, I know you know this, Steve, because this is a whole big thing about whether an IDENT port should be open or not - and not ICMP, which you were talking about at the time.  I think that's what ZoneAlarm has had as an adaptive reply.  This IDENT check was also used on SMTP and FTP.  To this day, routers may be stealth for every port except port 113, as they try to reduce service calls, since by not replying to port 113, sending mail was causing problems if this IDENT handshake was timing out.  I think that's mostly older clients, but I might be wrong.  As you recall, you would usually respond with your host and username in the old days of a standard UNIX environment.  Hope this helps, but you probably have a zillion of these by now.  Bill in Michigan, and who's a regular in our chatroom as bill_mi.



STEVE:  Yeah, he's actually a regular contributor over on GRC's news groups.



LEO:  He's great, I love Bill, yeah.



STEVE:  Yeah.  So thank you, Bill.  What happened last week, Leo, is that we were discussing ICMP, and I just - it had been so long since I had thought about this, I thought, you know, I remembered that there was something that was this.  And I couldn't remember, I sort of knew that I wasn't sure.  But anyway, so Bill did pick up on it.  And I wanted to close this little link for our listeners, that it was that port.  And one of the things that I liked about ZoneAlarm was it was the only firewall at the time that did this adaptively.  If unsolicited probes to port 113 came in, ZoneAlarm had them as stealth.  It would drop the packets.



But if you were in the process of establishing a connection, for example, to a remote SMTP server, and the SMTP server pinged you, essentially, by trying to connect to your IDENT port, then ZoneAlarm was smart enough to say, oh, this is coming in from an IP that we're in the process of trying to connect to, so do allow that because we don't want to upset that remote server by having it wonder whether there's really anybody home or not.  So, yeah, so thank you, Bill.



LEO:  Yeah.  You knew.  This is one of those things that Steve has known for so long that it just got - it happens to me all the time now.  There's stuff, like, of course I knew that.  You knew that because you've dealt with it directly with ShieldsUP! all, I mean, this was a big issue with ShieldsUP!.



STEVE:  Yup.



LEO:  Adam Gilman in Minneapolis, Minnesota has questions about how the Internet works.  Steve, let me first off start by staying I'm fairly new to Security Now!.  Well, welcome, Adam.  I've only been watching for a few months now and was first turned on to TWiT by Kevin Rose when watching Diggnation.  Thank you, Kevin.  By the way, just a note, Kevin just tweeted this morning that his dad passed away, so our condolences to Kevin Rose.  And I've met his dad, and he was a great guy and was very proud of him.



STEVE:  Couldn't have been very old.



LEO:  I don't think he was.  Maybe early 60s at the oldest.  So probably a bit of a shock.  So Kevin, our sympathies and condolences to you.  Adam continues:  I'm loving your How the Internet Works segment.  Most others like this are very high level and boring, but yours is fascinating.  You see, we don't do high level here.  This show we do down and - this is the assembly language of podcasts - down to the metal.  In the last episode you were talking about packet TTL and routers responding to dead packets.  It made me think, wouldn't this be a problem and perhaps a source for DDoS attacks?  If an attacker were to send out packets to random destinations with TTLs less than the necessary to reach the destination, and then spoof their source IP so it's the same as the attacker's target machine IP - so it looked like it was sending itself, I guess, a packet.



STEVE:  It would be the IP that the attacker wanted to attack.



LEO:  Oh, oh, oh, I get it.  So you'd get all these NACKs.  Wouldn't that turn all the Internet routers into bots generating mass amounts of ICMP Time Exceeded packets - I've got to do the page turn here - towards the attacker's target?  I get it.  I get it.  Wouldn't this be a problem as the packets are being generated by the Internet routers doing, are doing what they're supposed to do by sending all these ICMP Time Exceeded packets back towards the source IP that the attacker spoofed in the original packets?  I'm sure that they've got route - well, let Steve answer this.  Hopefully this makes sense.  I'm just getting into Internet security.  I'm not sure if I'm missing something.  But what do you say?



STEVE:  He is absolutely right.  And it turns out that we went through a period of time, maybe, what, 10 years ago, where there were lots of small botnets that were being run by script kiddies.  And it was sort of early technology.  And this was one of the many ways to create bounced traffic is you send - you could certainly send a packet out that would expire.  But you could also just ping.  Ping generally generates an echo.  So you could just, for example, ping routers or destinations.  Any remote IP that will respond to a ping, you could spoof the source IP so that it looked like it was coming from your attacker.  And you'd get in trouble.



The other thing you could do was you could send a - you could try to establish a TCP connection.  So you would send a TCP SYN packet to any web server that would send a SYN ACK - and we'll be discussing what all this is when we talk about TCP in detail - send a SYN ACK back to the apparent source.  But if you spoof the source IP, then it would actually go to your victim.



So what happened was it looked like all these different websites were attacking you.  So, I mean, this is an example of one of the many ways that bad guys have found over the evolution of the Internet to get up to some mischief.  And it absolutely does hide the attacker's identity.  It requires backtracking to figure out where these things are really coming from.  And you can't use the source IP.  You have to literally follow the traffic from one router to the next in order to come back.  So, yes, I mean, that's a perfect example of one of the ways that this beautiful technology can and has been abused over and over and over.



LEO:  Question #6, Robert in Pasadena, Texas - I didn't know there was a Pasadena, in Texas - comments that our sci-fi recommendations are excellent.  Steve, I just have to say I recently took your recommendations for the Lost Fleet series, and I love it.  I'm halfway through the sixth book now, and I only started a week and a half ago.  Wow.  Do you have recommendations for books of similar style?  I could never get into the Peter F. Hamilton books, but I fell in love with the Lost Fleet series.  Who writes the Lost Fleet series?



STEVE:  Okay.  So, oh, shoot.



LEO:  Should I look it up?



STEVE:  If you Google it, you'll find it immediately.



LEO:  Is that sci-fi?  Is that our friend from Sci Fi - Arizona?



STEVE:  No, no, no.  This is something that I found because I was looking for series, book series.



LEO:  Jack Campbell.



STEVE:  Yes, exactly.  And I talked about these.  What I loved about these was this is like big, like military space fleet movements, but in real detail, where the constraints of speed of light and speed of acceleration and deceleration are mixed into the plot so that this commander who is actually, he was in suspended animation for a generation, during which time a huge sort of civil war among human colonies got underway.  And all of the people who knew real fleet movement got killed.  And so he gets found in a life support capsule, and this is - I'm not giving away much because you get this in the first few pages of the first book.  And he is resuscitated.  And it turns out that technically he's got seniority because...



LEO:  He's an old guy.



STEVE:  Exactly.  Even though he's still young, 150 years ago he was, like, in charge of things.  And so he remembers how to fight space battles with knowledge that has been lost from the human race.  And I have to say, I mean, I really enjoyed these.  So I did want to let people know about the Lost Fleet series.  But I can sort of understand what Robert means about the Hamilton books.  And I love the Hamilton books.  I think we wrap up our Q&A with someone who agrees with me.  And the next thing I'm going to be reading, as soon as I finish with FreedomTM, will be I'm going to plow into the Galactic Center, no, that's not - I just finished those.  The Hamilton - help me out.  You just read those, Leo.  We were talking about it.



LEO:  Oh, the Void Trilogy.



STEVE:  The Void Trilogy.



LEO:  Oh, man, is that good.



STEVE:  But I do have another series that I really enjoyed that's sort of more along the lines of the Lost Fleet.  A little easier, a little breezier, I mean, here Robert, he's been reading, he's in the sixth book after a week and a half.



LEO:  Yeah.  That's pretty breezy.  You couldn't do that with Hamilton.



STEVE:  No.  And so, Robert, slow down because we're going to run out of books for you if you keep reading at this pace.



LEO:  Although I'm looking on Campbell's web page, and he says that next Lost Fleet manuscript was just turned in.



STEVE:  There's going to be another one?  Yay.



LEO:  Yeah, it's Lost Fleet:  Beyond the Frontier novel "Invincible."  Not till May.  But it is coming out.  And he is in town right now, or he's in Reno, anyway, at the World SF and Fantasy Convention going on right now in Reno, Nevada, so...



STEVE:  Well, the Lost Fleet series, you could read one, and if it grabbed you, you could know that you've got five more following it because they're really interesting.  So the other series that I really liked also, along the same line, it's not like Peter F. Hamilton grade, but it's called Helfort's War, and it's a series by Graham Sharp Paul.  And Michael Helfort is a newly minted academy graduate, set in the future, who happens to be good at stuff.  And I will leave it there.



Now, the one annoying thing is we've got the first four books, but it turns out - and I thought that the books one through four was it.  But book four was sort of the half.  And all the other books finished off so that you weren't left hanging.  Book four ended with a cliffhanger.  And now I'm waiting for book five, and I'm really looking forward to it.  So I really enjoyed these.  But be warned that the series is not complete.  And in the case of the Lost Fleet series, I had to wait for book number six because - but it was worth waiting for to see how he wrapped it up.  And now I guess there's going to be a number seven.  So I'm delighted for that.



LEO:  Well, it's all stylistic.  I mean, I think I'm not that - in fact, whenever Peter F. Hamilton starts doing space battles, I just lose - I can't follow it.  And so if you like that kind of thing, then obviously the Lost Fleet series would be great for you.  It's just different - what's nice is that, even within the genre of science fiction, there are many, many subgenres.  And whatever you like, there's something for everybody.  So that's great.



STEVE:  Right.



LEO:  I agree.  I appreciate the recommendations.  Always looking for something new to read.



STEVE:  And so for what it's worth, if you like the Lost Fleet, Helfort's War sort of has a similar feel to it.  And the lord knows Robert will be done by the day after tomorrow.



LEO:  Yeah, at the rate he's reading.



STEVE:  With those four books.



LEO:  Question #7, David Taylor, Atlanta, Georgia.  He shares some comments about the ICMP/Ping security issues you talked about:  I've been in networking and network security for quite a few years, and the Internet backgrounders have been a nice, nostalgic reflection on how things got started.  From my paranoid security background I thought I'd add a few interesting points to some of the comments you made in last week's podcast.  You mentioned about the ICMP echo request/reply being filtered these days for security reasons.  One of the reasons you didn't mention was one that I always considered a pretty neat idea - and a strong reason to block ICMP in and out of a corporate network.



Someone quite a few years ago came up with the notion of using the ping request/reply traffic as a tunneling mechanism.  ICMP echo reply/request packets can be any size that - this is wild - can be any size you like - I've lost it, it's the page turns that kill me - from the minimum packet size up to the max path that's allowed by the MTU.  The payload is generally random data or a chunk of unallocated memory thrown in to pad out the packets - data leaks, anyone? - and is commonly ignored.  Why don't they just put zeroes in there?  I don't know.



I suspect you've probably seen the trick as you've been around the block a few times.  But just in case this one snuck by, someone decided to use the payload to hide encrypted data.  This made for a pretty sneaky back channel for controlling a machine that's been hacked.  You send them a ping, in that little ping, and then there's this whole rest of the packet that's got encrypted data in it.  Many sites block incoming traffic, but not outgoing traffic.  With this in mind, the firewalls in many places, especially at home, will happily let these ping packets pass all day long unnoticed, containing your passwords or whatever else.  Just thought I'd pass this one along.  Dave Taylor, CISSP.  Wow.



STEVE:  Yeah, I did want to just sort of acknowledge that.  Actually in my spec for my VPN, using ICMP as one means of establishing a connection is already in my notes.  So I'm well aware that ICMP is a general purpose and very capable data carrier.  So it's absolutely the case.  And as I was mentioning last week, normally when you get an echo reply, the reply packet contains the echo request so that the recipient can see what it was that it sent out that generated that response.  And so you are able to put whatever data.  Sometimes I've seen just like, you know, the alphabet, ABCDEFG and so forth.  Or sometimes, as David says, no one even bothers to initialize the contents of the package.  They just say, eh, we'll just send out whatever's there because it doesn't really matter.



LEO:  You just get random stuff.



STEVE:  Yeah, it actually is a payload-carrying protocol.



LEO:  Wow.  Question #8, Jeff Hornung in Indianapolis admonishes us that corporate IT is not so bad.  And, yes, encryption is tough.  First off, I love our broadcast.  I've listened to them all.  Of course I'm a SpinRite owner.  But in the past I've been somewhat dismayed by the negative comments directed toward corporate IT and suggestions on how to get around the controls that we as corporate IT professionals must put in place.  We want to do the right thing to protect our customers and our employees and of course comply with HIPAA and GLBA and PCI and DOI and many other regulations.  I think you two have great experience and speak with some authority.  But I don't think either of you have experience in corporate IT for today's finance industries.  And I think we'll both cop to that.  That's right.



STEVE:  Yup.



LEO:  So if I could give you some tidbits from my perspective:  Recently you mentioned there is no overhead to decrypting all this data.  While I'd love to see everything encrypted all the time, it actually is a very big deal.  Some people responded to your comments but missed a major issue.  My company has UNIX, Linux, Windows Servers, IBM zSeries mainframe, IBM iSeries, that's AS/400 platforms.  The hundreds of applications that we use must communicate across all the platforms and systems, internal subnets and firewalls and databases.  They perform thousands of lookups and file transfers daily.  To have all of these using fully encrypted data all the time is a lot more overhead than you are giving credit for.  CPU, processing translation - going from probably big Endian to little Endian and ASCII to EBCDIC and things like that -  and key management are significant and time consuming.  Keep up the great work, but please spend some time getting to know our situations.



STEVE:  Well, for what it's worth, I really never meant my comments to refer to Intranet encryption, but rather Internet encryption.  So the idea being - and I guess I wasn't clear about this, Jeff.  And to any other listeners I apologize.  When I'm talking about the need for encryption, we've talked about the need to encrypt databases, which I think is crucial.  And so that's not about network encryption, that's about encrypting the data at rest while it's at rest so that, if you lose control of it, all it is is pseudorandom noise.  And then, where I'd like to see encryption 24/7, 365, and forever, is when it's moving out across the public Internet, where remote servers would be using SSL and TLS certificates in order to establish and enforce encryption.



So I really understand what Jeff is saying, that internally there'd just be a huge amount of overhead for very little return, for example, managing certificates that are expiring on all sorts of machines.  And I can imagine you just pull your hair out.  But it's really, hopefully, you've got firewalls and border security such that you can have trusted information inside your corporate Intranet and then deal with encryption for communications outside on the Internet.



LEO:  All right, here we go, Question #9 from Andy Williams - I always loved his music - in Philadelphia, Pennsylvania.  He wonders about a good CPU for projects:  Steve, I've been thinking about really getting into some toy OS development, and I was wondering what CPU you thought would be the best.  It could be real or emulated, old or new.  I'd love to have your professional opinion.  Thank you, Andy.  You were going to do, when you retire someday, you've got all those PDP-8s here behind you.  You were going to do a PDP-8 operating system because that's a simple processor for something like that.



STEVE:  Yeah.  I have to say, having written a bunch of code for it, as I did in order to make those lights flash that way and so forth, I'm thinking that it's just too annoying to write to a 12-bit instruction set.



LEO:  I agree with you.



STEVE:  Yeah, the thing's got - it's got a 3-bit opcode, so a totally of eight instructions.  And I spent all my time - basically, the accumulator, it's got one accumulator and a multiplier quotient registry.  It was just a pain in the butt.  So I think what I want to do is something on instructions that I really enjoy.  But I did recently survey what was going on with development platforms for, like, small processors for the infamous Portable Sound Blaster project.  And I found something that I really like a lot.  There of course is the Arduino project that I know you and Andy have talked about.  Arduino is an interpreter that runs on a number of small, embeddable processors.  The problem is, for me,  and I think for our questioner and listener Andy, it probably isn't the right solution because he's talking about toy OS development.



What I found is a fantastic little board.  It's only 29.95, that is, $29.95.  It uses a state-of-the-art ARM Cortex-M3 processor.  This Cortex-M3 processor has 512k of program flash memory, 64k of RAM.  In the processor hardware, brought out to pins, is a 10/100 Ethernet; USB 2.0 host, device, and on-the-fly USB port; two CAN buses, which is the industrial bus used often in cars; four UARTs, Universal Asynchronous Receiver Transmitters; three I^2 C buses, two SSP buses, and an I^2 bus; an 8-channel, 12-bit analog-digital converter; 10-bit digital-analog converter; seven pulse width modulators; and on and on and on.  It does a 32 by 32 multiply in a single cycle.



It is a state-of-the-art CORTEX M3 ARM processor for 30 bucks.  And the entire tool chain, the development tool chain for Windows, Mac, and Linux is free for this thing.  So $30 is your out-of-pocket cost.  It's got a USB port that you plug into the machine and then just go crazy.  And the FreeRTOS operating system is available for it.  So you could start with something on an existing little free real-time operating system platform and then just start playing.  So it's what I'm going to be using as the heart of the acoustic experiments that I'll be doing.  And I would recommend it for anyone who just sort of wants to play with something.  And you can program it in C, C++, or in its own native thumb language.



LEO:  Neat.  That's a fun thing to do, I think.



STEVE:  Oh, yeah.



LEO:  You know, I wish life were longer.  There's so many cool and fun...



STEVE:  Oh, Leo, gosh.  I wish I were 12 right now.



LEO:  Yeah, no kidding.  No kidding, all the options.  And I have to say, you know, we set up the ham shack in the corner, and it's so cool.  But one of the hams I was talking to, we're getting a lot of noise, and there's a ton of RF noise in the environment these days.  You know we're downtown, so it could be PG&E transformers, it could be neon signs, it could be the 802.11 in this building, it could be our fluorescent lights.  There's so much RF in the environment now.  And one of the hams was saying, oh, you should have seen it in the '50s.  It was quiet.  It was calm.  Because none of this stuff was out there right then.



STEVE:  Interesting.  Interesting.



LEO:  In some ways it might have been better to be kids when we were kids because there were fewer choices.  You could build a Portable Dog Killer, you could do what you did, or you could maybe be a ham.  Now there's an infinite amount of choices.  It's kind of overwhelming, isn't it.



STEVE:  Yeah.



LEO:  It's so much fun.  And I would love to, I mean, I would love to do this - I'd like to do some Arduino projects.  I want to do more ham stuff.  I mean, it just goes on and on and on.



Here's an email from H.K., Shanghai.  He's an expat living in China.  A little view on Telex.  He says:  Being an expat in China, I smile whenever you refer to trusting the Hong Kong Post Office.  Whoever they are, we say.  But onto the meat of the matter:  When you mentioned Telex last week I was quite excited.  There are many ways to get around the Chinese Firewall, the Great Firewall of China.  VPN will work; proxies a lot of people use.  But Telex, believe it or not, is a new one.  It would be cool to set up the Telex application, but I don't have any idea how to do it, and it's not at all clear from the website.  Could you help?  Any help would be appreciated.  Telex would be helpful to get websites like Google+, Facebook, Twitter, IMDB, YouTube - all these blocked in China.  Hulu, too.  P.S.:  With an average network speed of 140 kilo - I guess he's saying kilobytes per second, GRC.com loads faster than Google.com in Shanghai, China.  You know, I have to - just a little plug for hams.  The stuff that hams are doing with data, like PSK31, Telex, RTTY, this is exactly what hams do.  And China and Asia in general is full of hams, amateur radio operators.



STEVE:  Interesting.  And hard to block that with a corporate...



LEO:  Hard to block, but easy to track, unfortunately.



STEVE:  Ah, good point.  You are emitting radiation, yes.  So what he's referring to, Leo, is something we talked about during one of the two episodes you missed.  There's something called Telex.cc is - I think that's this website.  But I wanted to let H.K. and anyone else who was wondering know that as far as I know, this isn't yet actually online.  This was a paper that a bunch of - that some security researchers put together that talked about an extremely clever way of intercepting TCP connection setup, that is, SSL secure setup, where the nature of the key being negotiated would contain information sort of in an encrypted fashion so that it provided additional information that allowed somebody outside of the block perimeter to reroute your traffic.  I don't think it exists in a ready-to-go fashion.  I think so far it's just a technical capabilities paper that said, hey, this would work, so keep your eyes open.  So certainly, if we hear more about, I will talk about it on the podcast.



LEO:  Really interesting idea.  There's always Morse code, the original digital.



STEVE:  Exactly.



LEO:  Tom Corwine in New York, New York, has some additional information on GoDaddy and their EV SSL Certs:  Steve, it was nice that GoDaddy wrote to correct you on their pricing, and that you chose to air it and share it.  But there's one important thing they didn't say.  99 bucks for an EV SSL cert is only the price you pay when you first buy that.  After that, 250 bucks a year.  I had a client for whom I purchased an EV SSL cert from GoDaddy.  After the first year was up, the client was automatically charged 250 bucks for the renewal.  I called GoDaddy to ask what was going on, and the GoDaddy rep said $99 for the first year, 250 for the renewal.  I asked why shouldn't I just buy a new one instead of renewing the current one.  He said, "Sure, if you want to go through the validation process again."  This made me so mad.  I felt like I was being extorted for money and vowed never to do business with GoDaddy again.  The $99 price is a total misrepresentation.  It's a teaser price.  Thought you and the listeners should all know.



STEVE:  Yup.  So you and I talked about how upset I was when GoDaddy, without my authorization, tried to reauthorize, tried to renew a certificate that I had allowed to expire.  Nowhere on their site was I able to go back and tell them, no, I don't want it expired.  And then they complained when they couldn't authorize my card because, fortunately, I had used one of those PayPal one-use credit card numbers to buy the cert with GoDaddy.  I was just playing around with that PayPal service.  And sure enough, it saved me.  So no thanks, GoDaddy.  I'm going to DigiCert.



LEO:  Yeah.  I still am moving, I'm in the process of moving our registrations to Hover from GoDaddy, only because it's so difficult.  But we don't use SSL on any of our sites.  Maybe we will.  Maybe we should at some point.



Finally, Philip Hofstetter in Zurich, Switzerland writes: Peter F. Hamilton - a huge thank you!  He says:  Hi, Steve.  After hearing you and Leo praise Peter F. Hamilton's work so many times last December - sorry about that - I listened to "Fallen Dragon" and was completely blown away.  But now, when you brought him up again about four weeks ago in the podcast, I finally accepted that I will hopelessly fall behind listening to your show, and started in with "Reality Dysfunction" in its audiobook version.  You cannot - he says this in all caps.  YOU CANNOT POSSIBLY IMAGINE how much fun I'm having.  This is by far the most enjoyable kind of entertainment I have ever consumed.  I haven't read this yet.  I've got to get this book.  This book is so mind-blowingly good, I can't even find words to describe it.  Thank you, thank you, thank you for the time you took to tell us about these masterpieces.  Philip.  Wow.  I'm a Peter F. Hamilton fan, but this is the original one we were talking about a couple of weeks ago, that long...



STEVE:  Wait, you have not read it?



LEO:  No.



STEVE:  Oh, Leo.



LEO:  I've got to get it?



STEVE:  Yeah.  I mean, yeah, you've got time.



LEO:  Plenty of time, Steve.  You know what I do, I get them on audio books, then I just drive around the block a lot.



STEVE:  The Reality Dysfunction series, I think it's four, yes, it's four huge hardbacks or eight paperbacks.



LEO:  Oh, great.



STEVE:  And it went on a little bit long for me.  So, I mean, but if it's in audiobook format, maybe - oh, no.  Robert said in Texas that he - he's the guy that reads a book every four hours.  So these would slow him down.  But...



LEO:  I don't think - it's unfortunate, I don't think it is on Audible, unfortunately.  Though some of the older Peter F. Hamilton - they just started putting Peter F. Hamilton on Audible, so.



STEVE:  Yeah.  Anyway, for our listeners who have not yet discovered Peter, I really - I recommend "Fallen Dragon."  It's a standalone novel, really good, gives you a good introduction to Hamilton's style.  And then, boy, you're in for plenty of reading, if you enjoy his stuff.  And I did mention that some of his older stuff would be coming out in print that had been out of print.  And I'll try to keep an eye on - let people know when that's available.  The, shoot, I can't think of the guy's name now, he's sort of a spy with ESP powers.  Greg Mandel, that's the guy, the Greg Mandel series is going to be coming out from Peter.



LEO:  Apparently "Reality Dysfunction" is on Kindle.  So that's good.  I can do it on Kindle.  I can't bring myself to carry around a big, heavy book anymore.



STEVE:  Nah.  It'll be out on Audible before long.



LEO:  It sure should.  I'm excited, wow.  Actually the entire "Reality Dysfunction" on Kindle is $9.99.  I don't know, is that all of them?



STEVE:  Nice.



LEO:  That would be great.  Wouldn't that be great if that were the whole thing?  Oh, no.  It looks it's just the first one, The Night's Dawn.  Oh, boy.  Oh, boy.



STEVE:  The Night's Dawn Trilogy.



LEO:  Well, then I've read the Night's Dawn Trilogy.  This isn't the Night's Dawn Trilogy, is it?



STEVE:  Yeah, it is.



LEO:  Oh, well, I've read that.



STEVE:  It's also known as - I was sure you had, Leo.  It's also called "Reality Dysfunction."



LEO:  Ah.  I didn't know it was the same name.  Yeah, I've read the Night's Dawn Trilogy.  Yeah, thank god I'm done with that.



STEVE:  And of course - I know, I know.



LEO:  Okay, yeah, very good, but, you know - yeah, yeah, I've read that one.  Okay, now I...



STEVE:  And like I said, it goes on a little bit long.



[Talking simultaneously]



LEO:  As does this show.  But before we go, I just want to say, I want to thank the folks at TriCaster.  You know, a lot of what we do here in the new studio is courtesy partners who helped us out.  And NewTek has been so great.  This TriCaster 850 Extreme that we use is absolutely the next step up from the TriCaster we were using in the old Cottage.  HD, we get so much, yeah, look at all this, so many capabilities.  You know who's really become an expert on it, Alex and Chad, the young folks here, are really good at using this.  And we haven't even started to scratch the surface.  We're still doing the static lower thirds.  We can do motion graphics in the lower thirds, we could do all sorts of stuff.



And you'll see, including wild transitions, you'll see as time goes by, as we use more and more of the features of this, what an amazing device this is.  We - like that.  That's the reality dysfunction.  We really want to thank our friends at NewTek and encourage anybody who's looking to do live video switching or video production to try the TriCaster series:  NewTek.com.  We don't do the green screen stuff, the virtual sets.  There's so much in here that we don't use.  And yet we're already having so much fun with it.



Thank you, Steve Gibson.  Gibson Research Corporation, his company, is GRC.com.  That's where you'll get a copy of SpinRite, the world's greatest hard drive maintenance and recovery utility.  You also can get a copy of all of his free stuff like Wizmo, Don't Shoot The Messenger, DCOMbobulator.  And this show, as well, 16KB as well as 64KB versions of the audio; full transcriptions, which Steve pays for himself, so I thank you for that, Steve.  And do the forums there.  They're great security forums.  And of course if you have a question for Steve for our next Q&A episode, just go to GRC.com/feedback.



STEVE:  Thank you, Leo.



LEO:  Next week, more of the Internet series?



STEVE:  No, next week I'm with you in your studio.  We're recording on Thursday.  And I'm going to take our listeners through my development, from the beginning, of a paper-based encryption system.



LEO:  Oh, that's perfect because we'll probably have to show stuff; right?  So we'll need to do it here so we can put stuff on the table.



STEVE:  It turned out very well.



LEO:  Perfect timing.



STEVE:  So that's going to be a really great episode, I think.



LEO:  So don't forget, Steve will be live in-studio, but it's not the usual day:  Thursday, 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1800 UTC at live.twit.tv, if you want to watch.  We usually have room for maybe 20 or 30 people in-studio.  We welcome visitors.  If you'd like to see Steve, meet him, and watch as we do this live, email my sister Eva at TWiT.tv, eva@twit.tv, and we'll accommodate as many people as we can fit in here.  We always have a few people in here, but we can get - I think we can get - we had 50 in here during opening week.  And I know there'll be a lot of people who want to come see Steve.  Steve, thanks so much.



STEVE:  Thanks, Leo.



LEO:  Catch you next time on Security Now!.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#315

DATE:		August 25, 2011

TITLE:		Off The Grid

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-315.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with the week's news, Steve explains his goals, development process, and operation of the "Off The Grid" paper-based encryption system he developed for use in encrypting website domain names into matching secure website passwords.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 315, recorded August 25th, 2011:  Off The Grid.



It's time for Security Now!, the show that covers your security and privacy online.  And normally we would have Steve Gibson, the host of our show, man in charge of the Gibson Research Corporation at GRC.com, on the line via Skype.  But guess what, he's right here.



STEVE GIBSON:  Yay.



LEO:  Hey.  It's nice to have you here.



STEVE:  It's so fun.  I was here briefly, of course, a month ago.  I zipped up just to do the very first podcast ever made out of these brand new studios of yours.  And then I thought, hey, I want to come back.  And I sort of deliberately missed the big grand opening party because I wanted you all to myself.



LEO:  Well, I'm really glad.  And you're right, I mean, the grand opening party was fun, and you missed a nice party.  But it's kind of a little more normal now; right?



STEVE:  Yeah, and I wanted to get a chance to hang with the crew and put faces with names.  And this has been just wonderful.



LEO:  Well, it's really nice to have you.



STEVE:  And of course this is, for me, a big show.  Which is why I set myself a goal of having this project finished.  I've been working on this truly since the day after we told everybody about the Password Haystacks.  That was a Wednesday, of course, when we recorded.  And Thursday morning I set myself up at Starbucks with the project, which was to answer the question, can I come up with a non-technology-based encryption system?  Because the whole Password Haystacks deal, it answers the issue of adding entropy in order to make brute-force password-guessing much more difficult.  But it doesn't solve the problem, which is really a big problem, which is the per-website password.  There's still that burden that we know, especially as websites are being hacked all the time, we know that it's really important for security to use a different password for each website.  And the fact is, unless there's something to help with that, it's probably really not being done that often.



LEO:  No.



STEVE:  So I thought, okay.  What about some means for encrypting the domain name into a matching password?  And doing that without a computer, just because I wanted to see if I could.  That way it's universal.  And you can't hack paper.  If it's off the 'Net, if it's out of your computer, or in this case "Off The Grid," then you're safe from anything that could possibly happen.



So about, maybe 10 days after I started the project, I thought I had something.  So I wrote the following posting in - I have a newsgroup at GRC called "Thinktank," which is where I hang out and work with a group of people that are into, like, the early development phase of things.  So I wrote, "Gang:  I am way behind here in this newsgroup (80 unread messages) because since last week's podcast about Password Haystacks, I've been working on a closely related follow-on project that I believe everyone here will find quite interesting and intriguing.



During last week's Password Haystacks podcast, I mentioned that I thought that I probably had something more up my sleeve.  It now appears that I do.  For anyone who may have been wondering about that and waiting for the other shoe to drop, here's what I've been up to:  I believe that I have a simple, secure, and highly practical pure paper-based keyed enciphering scheme to support the individualized encryption of Internet web domains into short (12 character) high-entropy tokens for use as corresponding login passwords for those web domains.



Such a system has advantages over any alternatives available today.  Being "offline," it's secure against any possible - ANY possible - browser-based compromise of browser-generated or browser-stored passwords.  Being "per domain," it solves the problem that password padding does not of still needing per-domain passwords for the best security.  Being a keyed domain name enciphering system, there's no need to record, store, or remember passwords.  This "Simple Paper Cipher," whatever we're calling it, can simply be used to recreate any domain's password on the fly.



Being able to generate 12 high-entropy password characters when given a domain name of any length (the user can easily make these longer or shorter, but 12 would be recommended for security), we get sufficient security without the need for additional low-entropy padding.  Being paper-based, the system can be used to generate passwords absolutely anywhere, since it doesn't rely on any technology that might not be available.  So it's both universal and "cloud safe," since nothing is ever stored anywhere.  And finally, being easy to use - which was my number two requirement, second only to security - the system requires very little training, yet can produce, I believe, industrial-strength encryption having hash-like features such that, for example, changing any single character of the input results in an entirely different result, and so forth.



And I wrapped up by saying:  And no, I don't need any lectures about the fact that only fools invent new encryption systems.  I am well aware of the pitfalls of doing so.  Well aware.  But I'm not trying to displace or replace AES Rijndael or any industrial-grade encryption system.  I'm merely wishing to create a new alternative for users who are stuck using the same password everywhere or relying on technology, which can be a mixed blessing, to create and/or store unending numbers of per-domain passwords.  And I think I've done so.



LEO:  Yay.



STEVE:  So that's the topic.  I'm going to explain the process I went through from the start that Thursday morning, the day after the Password Haystacks was revealed, and explain how the system works.  And we've got a whole ton of security news, especially the most high-priority security alert we have had in a long time.



LEO:  This one's a shocker.  You just told me about it a second ago, and I'm kind of blown away by this one.  All right, Steve Gibson.  We go "Off The Grid" with Steve in just a second.  Okay.  Well, I guess we'll start with the security news.



STEVE:  We've got a bunch of stuff to cover before we get into the topic.  Okay.  This is mind-boggling.  A security researcher named Daniel Garcia - I need everybody to pay attention.



LEO:  Pay attention.



STEVE:  Pay attention.  A security researcher named Daniel Garcia discovered that consumer routers made by Edimax, the Linksys routers, Sitecom, and Thomson, which is the SpeedTouch router...



LEO:  See, I don't know the others.  But Linksys I've heard of.



STEVE:  Linksys we know.



LEO:  That's the most - that's the bestselling router in the business.



STEVE:  They respond to UPnP, Universal Plug & Play, requests on their WAN interfaces.



LEO:  Okay.  I understand what that means, but you'd better explain.



STEVE:  Yes.  That's the side of the router which is exposed to the wild, exposed to the Internet.  And it means that, if somebody were to send UPnP packets of the proper design at your public IP of your router, which is provided by your ISP, they would be able to log into your router and do the things that Universal Plug & Play is able to do, specifically mapping...



LEO:  To configure the router.



STEVE:  Reconfigure the router, mapping ports through from the outside into your private LAN.



LEO:  So open up holes in the router, or the router's firewall.



STEVE:  At www.toor.do is the freely downloadable scanner which has been created to allow people to scan the Internet for these.



LEO:  Oh.



STEVE:  So, and in a short time, Daniel found 125,000 routers.  I mean, Leo, this is like the open ports deal that I created ShieldsUP! to help people with, where people had their hard drives mapped onto the Internet without knowing it.  So as long-time listeners of this podcast know, our advice has been disable Universal Plug & Play in your router as one of the things you do to secure yourself.  So people who took that advice are safe.  If your router has a provision for disabling the WAN side, and you otherwise need Universal Plug & Play, then I would say that's what you need to do.  But if it won't, if it doesn't make it clear that you're able to disable the WAN side independently, turn off Universal Plug & Play.



LEO:  Wow.



STEVE:  I mean, this is...



LEO:  Well, we've recommended that for years, that that's what you should do.



STEVE:  Yes.



LEO:  But now there's a really compelling reason.  In fact, I've always turned off WAN routing, as well, because I don't see any reason for somebody outside of my network to be able to administer my router.



STEVE:  No, oh, you mean WAN-side administration.



LEO:  WAN-side administration.



STEVE:  You absolutely want that turned off, not just password-protected, because we all know that there are problems with relying on passwords to protect something.  If there's no reason...



LEO:  And there may be backdoors.  If there's no reason - and most people, why would you want to administer from remote?



STEVE:  Right.  Normally you're only logging into your router from your LAN side in order to do whatever, set up its password and perform configuration.  Now, gamers will be probably the largest group that have Universal Plug & Play enabled.  Or, for example, Skype users, because Skype is now UPnP aware, and it's able to perform port mapping if it's available.  So the problem is, it has never been secure.  It was not very well thought out.  And what we've now found is that hundreds of thousands of routers on the 'Net are exposing their UPnP interface.



And, I mean, right now there are no doubt hackers who are getting ready to have some fun, firing this up.  On h-online.com is the article titled "UPnP-enabled routers allow attacks on LANs," which just came out.  So I'm sure people will be able to find it.  We've got the link in our show notes.  And if you click that image to zoom in on that image, Leo, you'll see a sample of his scanner, which is just scanning through a chunk of IP space on the Internet, finding router after router which is wide open because Universal Plug & Play allows you, it's designed to be a software-based, a packet-based administration for the router.  The idea that this is exposed by default in Linksys routers, among others, is...



LEO:  Has to be a mistake.



STEVE:  ...unconscionable to me. 



LEO:  Has to be a mistake.



STEVE:  Yeah.



LEO:  I do think that the problem in turning off UPnP, which is a Microsoft technology, primarily comes from the fact that Microsoft's Xbox complains.



STEVE:  Heavy gaming, yes.



LEO:  Xbox complains.  It says, no, I can't, I won't - you may not be able to start, for instance, or allow your friends to start an Xbox live session with you and so forth.  So a lot of people whose kids have Xboxes, the kids say, "Dad, Dad, Dad" - and Microsoft tells you to do this.



STEVE:  I know.



LEO:  "Turn on UPnP, and then my Xbox will work."  Otherwise it won't work very well, and that's why they turn it on.



STEVE:  Yes.  For anybody who does, who is in that situation, it's well known that you can manually...



LEO:  It's just it's a pain.



STEVE:  It's a pain.



LEO:  Because there's three or four ports, and you've got to open them up.



STEVE:  Exactly.  It's three or four ports that you need to manually route, manually configure on your router.  Our listeners, I would say, doing that is not beyond them.  So if you have - if you've got an Xbox, you're into gaming, you've got UPnP on, I would say turn it off.  I mean, that's always been our advice, turn that off.  And then there are plenty of resources on the 'Net that will show you how, with different routers, to map those ports that you need through.  And that's really just a much more secure way to run anyway.



LEO:  It's not hard, yeah.  I mean, it really isn't hard.  You just have to know how the software works.  And I think it does intimidate people.  I'm not saying that.  It definitely intimidates people, but it's not hard.  Slingbox, too, they're telling me in the chatroom, is another hardware application that wants UPnP.  And it would make sense because it needs to make it easy for the consumers to open up those holes so that the Slingbox can communicate with the outside world.



STEVE:  Yeah.  If the router allows you to disable UPnP selectively, then definitely disable it on the WAN side.  I don't even know why it's there.  That's nutty.  I can't imagine that it serves a useful purpose to have that exposed on the WAN side, Leo.  I mean...



LEO:  Well, I think if you're a sysadmin - let's say our guy Russell, our IT guy, he wants to, from home, fix a problem with one of our routers.



STEVE:  Yeah...



LEO:  But that's - I'm sure he doesn't do that because he knows, if you're a good IT guy, you know the dangers.



STEVE:  Okay.



LEO:  So I think it's a mistake.  I think these companies just left it - somehow made a mistake, that's all.



STEVE:  So we talked about the recent reduction in security of AES.  And there's been some continuing discussion about it, as I knew there would be.  Bruce Schneier, our favorite security, super-security expert...



LEO:  Love him.  Love him.



STEVE:  ...blogged recently about - he said:  "This is what I wrote about AES in 2009."  Now, that is when that first related key attack was found.  So that was, what, three years ago, no, two years ago.  And he said:  "I still agree with my advice."  Which was: "Cryptography is all about safety margins.  If you can break 'n' rounds of a cipher, you design it with 2n or 3n rounds.  What we're learning is that the safety margin of AES is much less than previously believed.  And while there is no reason to scrap AES in favor of another algorithm, NST" - and he probably meant NIST - "should increase the number of rounds of all three AES variants."  And he wrote this two years ago.



He said:  "At this point, I suggest AES-128, which normally has 10 rounds, be extended to 16.  AES using a 192-bit key, which is now 12 rounds, should be extended to 20.  And AES-256, which is now at 14 rounds, should be doubled to 28 rounds.  Or maybe even more; we don't want to be revising the standard again and again."  And he said:  "And for new applications, I suggest that people don't use AES-256.  AES-128 provides more than enough safety margin for the foreseeable future.  But if you're already using AES-256, there's no reason to change."



And then in talking about this story also, SANS Institute Editor William Murray, he wrote, he said:  "Since no claim as to the strength of AES has ever been made, this is simply a mathematical claim that the work factor for discovering a key is about four or five times lower than a brute-force attack."



LEO:  Interesting.



STEVE:  "While this is a significant analysis, worthy of a paper, perhaps even a headline, an attack using this information, begun at the Big Bang, would not have yet completed."



LEO:  That seems enough time.  I could live with that.



STEVE:  And he said:  "Kudos to the analysts."  So again, we want to keep perspective.



LEO:  So a quarter of the Big Bang, big deal; right?  A quarter of the life of the universe, big deal.



STEVE:  Yes.  Exactly.  So Bruce also blogged about stealing ATM PINs with a thermal camera:  "Researchers from UCSD pointed thermal cameras towards plastic ATM PIN pads and metal ATM PIN pads..."



LEO:  Oh, this is clever.



STEVE:  Yes, "...to test how effective they were at stealing PIN numbers.  The thermal cams did not work at all against metal pads."



LEO:  Really.  Oh, because they probably dissipate the heat very quickly.



STEVE:  And spread it so quickly.



LEO:  Right, right.



STEVE:  "But on plastic pads the success rate of detecting all the digits was 80 percent after 10 seconds and 60 percent after 45 seconds."



LEO:  That's amazing because you really don't touch, when you're using an ATM, you touch those keys very rapidly.



STEVE:  Yeah.



LEO:  And yet these thermal cameras must be sensitive enough to...



STEVE:  And just that heats them up enough.



LEO:  Just enough.



STEVE:  And so, when they look at it, they can see the relative heat.  So the one that you first touched would be cooler, a little cooler...



LEO:  Slightly cooler.



STEVE:  ...than the one you second touched.



LEO:  So you even get the order.



STEVE:  Yes.  You get the order of them. 



LEO:  How far away does this thermal camera, can this thermal camera be?



STEVE:  I'm sure it was, like, right there.  He said, "If you think about your average ATM trip, that's a pretty wide window and an embarrassingly high success rate for thieves to take advantage."  So the idea being someone does their transaction.  If they're sufficiently quick, they walk away, you run over and take a picture of it with a thermal camera and see if there's still some heat signature left on the PIN pad.



LEO:  So you should take your time at the ATM.  Or somebody's saying I never touch them anyway, I use a pen.



STEVE:  That'd be really good, yeah.



LEO:  That'd work.



STEVE:  Don't want to leave your fingerprints behind, either.



LEO:  Yeah, no.



STEVE:  We did get confirmation of Chinese cyberwarfare development aimed at the U.S.



LEO:  Oh, interesting.



STEVE:  For the first time ever.  Every time, you know, there's been lots of suspicion of it because IP addresses tend to terminate there.  But everyone can say...



LEO:  You can spoof it.



STEVE:  They have plausible deniability.  They could say somebody hacked those machines, and they were looping through those machines.  A Chinese military video had a few seconds of screenshot which, when uninterpreted, when translated into English, showed the IP addresses and some explicit instructions about attacking U.S. IPs.



LEO:  This IP address apparently belongs to an American university.



STEVE:  Yup.



LEO:  It says "Select attack target" in the big letters.  And then the IP address to attack.  That is amazing.  Wow.



STEVE:  And the nature of where it was made it very clear that it was inadvertently left into a training video that Chinese cyberwarfare developers were using.



LEO:  This looks like Linux.  Doesn't look like Windows.  That's really interesting.



STEVE:  So it's a goof.  It's a goof.  Since we last talked, a serious crypto bug was found and fixed in the latest release of PHP, which is already now obsolete.  This was a perfect instance of why fixing security software doesn't always provide you with the result you were hoping for.  Version 5.3.7 you do not want to use.



LEO:  5.3.7.



STEVE:  It just came out, and shortly after it came out it was discovered that anyone calling the crypt() function using an MD5 with salt, the function would only return the salt.  It would give you back...



LEO:  It wouldn't hash it.



STEVE:  It would give you back what you gave it.  No matter what the rest of the stuff was you were telling it to hash, it would just ignore that and give you back the salt.  Now, that was not the case with Blowfish or DES, only MD5.  So it would only affect those sites that were doing it.  But because it was such a problem, it was instantly fixed.  And just this morning my friend Simon Zerafa, who tweets me all kinds of interesting things, and did in another case about something else today, he sent me the note that 5.3.8 was already out.



LEO:  Probably in response to this.



STEVE:  Oh, absolutely in response.  So skip over 5.3.7.  Don't use it.  Just go to 5.3.8 that has this problem fixed already.



And thanks to Anthony Bosio, who's @abosio in Twitter.  He sent me what I thought was a pretty funny original password recovery question, which he encountered when he was creating an account for the National Archives.  He wanted to download some content from the National Archives.  So one of the questions was rather common:  What is the name of your hometown?  Or what is your mother's maiden name?  Okay, we've all seen that before.  What's your pet's name?  No surprise there.  Who was your childhood hero?  I think I've actually encountered that before.  But I have never before seen, "What is your preferred Internet password?"



LEO:  [Laughing] This is the National Archives?



STEVE:  Uh-huh.  It's one of the things they ask you.



LEO:  "Monkey."  "Monkey."  I love "monkey."



STEVE:  Now, that would not be the password you're using here because you don't know what it is that you're using this, this password recovery option, to recover.



LEO:  Well, maybe it'd be a good way to remember it.



STEVE:  So hopefully you did not use your preferred Internet password.  And of course this podcast is all about not having a preferred Internet password.



LEO:  Yes.  That's right.  We're going to show you how not to do that.



STEVE:  That's right.  Now you don't need to do that.



LEO:  Although you could enter "Steve's Off The Grid" as your answer to that question.



STEVE:  That would be good.



LEO:  There you go.



STEVE:  Yeah.  So there was...



LEO:  That's funny.



STEVE:  ...also further good news from Twitter that was tweeted thanks to @sergeantjoe, who tweeted me that - we covered the fact back on March 15th that Twitter had added the option for always-on HTTPS, specifically in response to Firefox, which is why I felt that Firefox on balance was a good thing because it was, as it did with Facebook and has now with Twitter, it was going to push people to start bringing up SSL encryption by default.



The good news now is that Twitter has blogged that they are beginning to roll out HTTPS on by default.  They're being cautious about it.  They're going to be bringing it out in a few accounts to make sure that it doesn't have some unintended side effects.  But they're saying it's our intention to ultimately do this.  We just don't want to break anything in the meantime.  So that's really good news.  I mean, that's really where we want to be headed.



And our listeners know that our background topic that we will be moving forward with, I expect in two weeks we're going to tackle TCP, is we are doing the basics of How the Internet Works from the beginning.



LEO:  Oh, look, my Twitter is HTTPS.



STEVE:  You probably set that on by - you are able to turn that on on your settings page.



LEO:  Oh, I was smart enough to turn it on probably.



STEVE:  Yes.



LEO:  I see.  I see.  I see.



STEVE:  And our listeners have done that.  But the setting will be on...



LEO:  By default.



STEVE:  ...by default in the future, which is really great news.



LEO:  Right.  So, yes, it is, I do remember that now, it is in the settings page, yeah.



STEVE:  So Brian Weeden tweeted me a note that the infamous hacker group Anonymous has been using SNMP for pulling off their DDoS attacks.



LEO:  Simple Network Management Protocol.



STEVE:  Simple Network Management Protocol.



LEO:  That's a way that businesses, for instance, can manage multiple computers, the IT department manages multiple computers remotely.



STEVE:  Right.  It's UDP based.  And we talked about ICMP and UDP in our last podcast.  And on our Q&A last week someone asked about couldn't you use the Internet's devices to hide your IP addresses?  If you spoofed the source IP, for example, and pinged a router, it would respond with an echo reply aimed at the apparent source IP.  But the problem is it would only be responding with about the same bandwidth that you sent.  So you'd have to be sending a huge amount of bandwidth out, spraying all those routers.  And then they would be sending their ping replies aimed at a focus point, very much like concentrating the sun with a magnifying glass onto the palm of your hand, which doesn't feel good.  It burns you.



LEO:  Right.



STEVE:  Okay.  SNMP has the ability to be queried for all its data.  There is a "Send me your entire configuration tree."  SNMP is organized so that, for example, assets are in known locations.  There's something called an OID.  And the one that starts with 1.3.6.1 is like all the configuration information that the device has - all the interfaces, all of its IP addresses, its DNS addresses, its bandwidth, its connections.  SNMP essentially allows you to query everything you can imagine about an Internet device.  And it's also able to say "dump it all."  So you send a single UDP packet to a router whose SNMP default password is public.  That's one of the annoying things about SNMP is the default password is public.



LEO:  Right.



STEVE:  By spec.  It's like, all SNMP devices have a default password to public.



LEO:  But I assume that the IT department, IT guy's going to fix that.



STEVE:  Well, and that's the read-only password.



LEO:  Okay.



STEVE:  And the assumption is we don't mind...



LEO:  If you read it.



STEVE:  ...you doing a read-only query because you're not going to change anything, you're only going to get stuff.  So the point is that it turns out there are tens of thousands of pieces of equipment, I think actually the number is more like a hundred thousand plus, that will respond to a single UDP query and generate megabytes of data in reply.  So what you end up with is a bandwidth amplification attack.  And since it's UDP, which does not use the TCP connection setup...



LEO:  ACK and NACK, right.



STEVE:  Exactly, ACK and SYN ACK response that inherently verifies the endpoint IPs.  And we'll be talking about that in two weeks.  We're going to do TCP next.  This means you can spoof your source address and aim the entire SNMP dump at a target of your choice.



LEO:  And it will just send it.



STEVE:  And that's what Anonymous has been using.



LEO:  That's how they're flooding?



STEVE:  That's what they've been using for doing their super-potent DDoSes.



LEO:  So they're going to a bunch of different machines and saying we want an SNMP dump, and sending it to BART or whatever.



STEVE:  Sending a single UDP off to some router, telling it this is coming from them, and the dump gets sent to them. 



LEO:  Wow.  And it's how many megabytes?  Well, I guess it depends on the size of the network.



STEVE:  Depends upon the size of the SNMP tree.  But if you look at it, it just goes on forever.



LEO:  Can be quite huge.



STEVE:  And it's a verbose protocol.  It's a messy, verbose protocol.  So it just dumps all this data out.



LEO:  And of course you do this to thousands and thousands and thousands of machines...



STEVE:  Yup.  Just send a packet every so often.  So that's a biggie.



LEO:  That's actually clever.



STEVE:  It is.  It's very clever.  Unfortunately, evil and diabolical.  Simon Zerafa also made a note that just mentioned that Java was just updated to #27.  So it's Java v6 Update 27 is where we are now.  And so you'll want to check in your control panel, if you've got Java installed, might be a good thing to update that.  They just did a bunch of bug fixes.  It wasn't any big huge security fix.  But it's always good to keep that current.



And Leo, I have confirmed, as if we weren't sure, the supreme geekiness of these listeners, our beloved Security Now! listeners.



LEO:  Not a surprise.



STEVE:  Because the nerdiest joke of all time, which was "I could tell you a UDP joke, but you might not get it"?



LEO:  Might not get it, yeah.



STEVE:  It was so heavily retweeted by people who thought that was funny.  So it's like, okay, that's perfect.



LEO:  That's so great.



STEVE:  I did want to mention that anyone who missed out on - this is in just total miscellany.  Anyone who missed out on the $99 TouchPad...



LEO:  Right.  WebOS.



STEVE:  Don't feel badly.



LEO:  You got yours already?



STEVE:  No.  I played with one in a store.  It's a piece of junk.



LEO:  Oh, it's junk.  No, that's right.



STEVE:  It's a piece of junk.  For 500 bucks I would be really upset, if I paid that last week.



LEO:  It's slow, it's sluggish, it's not...



STEVE:  That's exactly it.  Just, like, scrolling the calendar, you can't, like, it waits, and then it jumps out about an inch, and then it decides to go ahead.  It's, oh, my goodness.  So...



LEO:  Apparently, I was told that one of the problems was a lot of debugging was left on in the OS.  And there are ways to go into the settings and turn off a lot of the stuff, which does make it snappier.  But this was the same problem WebOS, you remember, had on the Pre.  It was just sluggish.  And so, yeah, I don't - we do know a lot of people ordered them.  In fact, maybe as many as a million people ordered the...



STEVE:  And for $99.



LEO:  For a hundred bucks?  Why not.



STEVE:  Yeah.  But still, don't feel bummed.  It is not the equivalent of an iPad.



LEO:  There's a reason it's not selling.



STEVE:  Oh, goodness.  And someone either wrote to me or tweeted, I wanted to mention - we were talking about the Lost Fleet series, which was a series of six books.  There is a new series beginning by that author called Beyond the Frontier.  The first book is "Dreadnaught."  And so that has started.  It's available in hardcover and Kindle and Audible, so across the board.  You have to decide if you want to get sucked into a series that isn't finished yet because you'll be left hanging, waiting for the next book.  But they are, I mean, I'm reading it, there's no doubt about it.  It's a fun series.  In fact, I'll probably do it before I switch over and do the next, that Peter Hamilton series that'll keep me tied up on my stair climber for the rest of my life.



Okay.  And many people tweeted that I forgot to tell everyone where to get that really cool embedded processor that we talked about last week.  It's the processor, the $30 embedded processor that I'm going to be using for the Portable Sound Blaster project.  And I went jumping up and down, talking about how cool it was, and I forgot to tell everybody where to get it.



LEO:  It's an ARM-based processor.



STEVE:  It's an ARM Cortex-3 with a complete development, all the software is free.  It itself costs 30 bucks, and all you need is a USB cable to plug it into a Windows, a Mac, or a Linux machine.  Anyway, it's LPCTools.com.  And you're looking for what they call the LPC 1768, LPCXpresso.  So it's called the LPCXpresso.  And it actually has two processors.  The LPC 1768 is the interface for USB.  And then the LPC 1769 is the actual target processor on this little board.



LEO:  You'd better hurry, they only have six left.



STEVE:  Yes.  It actually, as I've been responding to people tweeting, giving them this URL, I've been watching...



LEO:  That number is going down.



STEVE:  ...the count dropping down.  So people are snapping them up.



LEO:  This is pretty amazing.  For 30 bucks you get a Cortex-M3, which is the basis for many smartphones. 



STEVE:  Yes, 128MHz.



LEO:  128MHz, yup, 512KB of Flash, 64K of RAM, and Ethernet, 100MB Ethernet, USB - this is pretty amazing.



STEVE:  It's a fantastic - and all the libraries available, it'll do a 32x32 multiply in a single cycle.  There's a DSP library that'll do an FFT.  And, I mean, and all the software, a full - I'm trying to think of what's the open platform IDE that's so popular.



LEO:  Eclipse?



STEVE:  Eclipse.  A full Eclipse platform made for this, with the files ready to go from Code Red.  It's all free.  You just sign up, and you're able to get it for free.  So the whole thing is $30 out the door...



LEO:  That's pretty amazing.



STEVE:  ...to mess around.  Oh, it's got something like 77 I/Os that are uncommitted, and multiple USBs.  Anyway, it's a tremendous little development platform, and it's what I'm going to be using because it is also a ton of power.  There is the Arduino, but that's way - it's much more - that's heavily interpreted.  And then you're writing Arduino scripts.  Here you're writing in C, and it compiles directly into ARM Thumb-3 code, which is what the Cortex-M3 uses natively.  So it's great.



And lastly, @Boonie_NL on Twitter said, "Steve, there are not 52 weeks in a year.



LEO:  What?  52.179?  What?



STEVE:  Leo, that's exactly right.



LEO:  Is it?



STEVE:  Are you, like, how many places of pi did you memorize?



LEO:  Well, that's a little pedantic.  That's a little pedantic.



STEVE:  So, yes.  I took 365.25 and divided it by seven, and I got 52.178571.  So in fact...



LEO:  Wow.  It was a guess.  That was just a weird guess.



STEVE:  Damn, are you good.



LEO:  Maybe I saw it, and I remembered it.



STEVE:  Well, I guess you did.



LEO:  I don't think it's in your notes.  Wow.



STEVE:  Anyway, very, very good.  And I did want to share a fun story by a listener of ours in Oslo, Norway, Bent Heier.  He said, "Hey, I'm a 17-year-old boy from Norway who loves your show."



LEO:  Yay.



STEVE:  "It was actually what got me into liking computers."



LEO:  Double yay.



STEVE:  "And I found it very easy to understand, even for someone with close to no prior experience with computers.  I started listening to Security Now! just a couple of months ago.  The first one I listened to was in the fact the one about bitcoins.  Then I listened to a few more before I decided to go back to the very beginning, and now I'm at Episode 115 - likely 150 when you read this."  And he says, "I love your show, and I have listened to it all summer long - on the plane, on the train, and virtually everywhere.



"Well, I downloaded SpaceMonger to see what it was, and I liked it.  But on my two-year-old laptop it was unable to read approximately 20 percent of the drive.  I didn't care too much about it at first as I have only used about 40 percent of the drive anyway.  I like keeping it clean.  But I had some problem with explorer.exe that stopped working, and it's a little hard to use a PC without that.



"This problem escalated after a while, and I decided to go into Safe mode and do a full scan.  However, I'd not got into Safe mode manually before, ever.  I'd just pressed the power button to shut it off and then on again.  Not good for the computer, but I'm a kid.  Please excuse me."  And he says, "So I figured it was probably in the BIOS menu or something.  It isn't, but I found some hard drive scanning tools.  Remembering in the back of my head that SpaceMonger had not found my entire hard drive, I decided to run the tests.  They told me that 80 percent of my disk was okay.  Having 20 percent of my disk being dead was not a good thing.



"I knew what I needed:  SpinRite.  I had been lent a copy from a relative of a friend of mine."  And he says in parens, "I'm poor."  And he says, "And it worked perfectly.  My disk is now 100 percent working, and it has no problems in the last couple of weeks.  Now I really want my own copy of SpinRite, but my parents are hard to convince.  And since I am underage I need their permission and, more importantly, their credit card..."



LEO:  Their money, yeah.  Forget the permission.



STEVE:  "...to make online purchases.  So I decided that I will get SpinRite for Christmas this year.  It will be my best present ever."



LEO:  Awww, he's asking for SpinRite for Christmas?



STEVE:  That's all he wants for Christmas...



LEO:  That is nerdy.



STEVE:  ...is his own copy of SpinRite.  So, Bent, thank you so much for your note.



LEO:  Good on you, Bent.  All right.  Let us get right to the meat of the matter because I want to - I'm very curious about this.  You do have a web page on GRC that people can go to to follow along, if they...



STEVE:  Well, yes.  Although that shows the result.  It'd be better if people sort of closed their eyes...



LEO:  Listen first, okay.



STEVE:  Yeah.  And you, too, Leo.



LEO:  All right.



STEVE:  Okay.  So...



LEO:  My eyes are closed.



STEVE:  What I set about doing was, as I said at the top of the show, I wanted to see whether it was possible to do something without a computer.  Much as I love software and computers, sometimes they're not the right solution.  And depending on them can be a problem.  For example, we've got the problem when Firefox is updated that plug-ins initially don't work until they get caught up.  They may not be compatible.  So what if you were depending upon something that wouldn't run with your new copy of your browser?  That  would be a problem.  And how many people, for example, have something that's truly legacy, like a 33-1/3 RPM LP?  Well, what are you going to play that on now?  I mean, you end up with having things - our technology does move forward.  So I wanted something...



LEO:  Paper is good.  It doesn't change.  People have been using this for a long time.



STEVE:  ...that was absolutely, in three or four decades from now, it would still work.  So, first of all, we talked really in the early stages of our encryption series about the simple Caesar cipher, which was a substitution cipher, where you would...



LEO:  Is that named after Julius Caesar?



STEVE:  Yeah, I think so because he was known to have used that cipher.



LEO:  But that was a substitution code; right?



STEVE:  Yeah, a simple substitution code, the idea being that you would take the alphabet - and we'll talk about the Roman alphabet for ease of conversation, A through Z.  And you would, in one case - remember the simple decoder rings would have one ring of A through Z, and then an inner ring of A through Z, and you would rotate it to a certain setting, and then your so-called plaintext would be on the outer ring, and your cipher text would be the inner ring.  And so all it's doing is it's essentially sliding down by a fixed offset any character over to a different one, so that it's doing a one-for-one transposition of the characters.



LEO:  It does in fact come from Julius Caesar.  In fact, according to this book, which is a great book I'm sure you've read, David Kahn's "The Codebreakers," Julius Caesar himself wrote about the code in his book "Gallic Wars," you know, "Omnis Gallia in divisa partes tres," that's the book.  And he talks about Cicero and a letter that needed to be delivered to Cicero, and it was enciphered in this exact method.



STEVE:  Yeah.  Now, the problem we have with that in this day and age is that we know that the frequency of the occurrence of letters varies dramatically.  There's lots of E's and T's and S's.  There's very few Q's.  And but we also know that the pair "QU," like in "quest," occurs often.  And so if you did a frequency analysis...



LEO:  Very easy, in fact...



STEVE:  ...of a corpus of English, you'd immediately get this standard distribution of the occurrence of letters.  If you then did...



LEO:  "ETAOIN SHRDLU," by the way.



STEVE:  There again, there you go again, Leo.



LEO:  In case you're interested.  That's in English, though.



STEVE:  Yes.



LEO:  Yeah, "ETAOIN SHRDLU."



STEVE:  And so if you took a ciphertext that was ciphered in, in a simple substitution cipher, there would be some letter that would occur the most.  And so the chances are...



LEO:  That's going to be an "e."



STEVE:  ...that's going to be an "e."  And the thing that occurs second the most is going to be a "t."



LEO:  So it's easy to find "the," for instance, and that's going to give you the "h."



STEVE:  And suddenly you, exactly, and then you would also see - you would see three-letter groupings that had a "T," a something, and an "E."  And you'd go, well, that one most be an "H."  So you could imagine how simple it is to crack that.



LEO:  Right.



STEVE:  Okay.  Knowing that, a smart person back in the 1800s in England, somebody who anyone who knows electricity has heard of, named Charles Wheatstone, of the Wheatstone Bridge.  The Wheatstone Bridge is four resisters connected in an "H" fashion where you have two coming down from a positive source of voltage, connected to two going down to the ground, and then you put a voltmeter at the junction of those pair.  And Charles Wheatstone figured out - and actually he wasn't the originator of this.  It was mentioned 10 years earlier, but no one really paid attention to it.  And he sort of brought it back and publicized it, and it ended up with his name.  Well, he had a good friend who lived near him named Lord Playfair.



LEO:  Great name.



STEVE:  And he and Lord Playfair used to walk around town, talking about ciphers and puzzles and things of that ilk.  Wheatstone shared with Playfair a paper-based cipher that he had invented, which Lord Playfair really got a kick out of and showed some people.  And it ended up catching on.  This thing was used throughout World War I by a number of militaries, and British Intelligence was known to have used it during World War II.  It's called the Playfair Cipher.  Now, and what's interesting is it's the Wheatstone Bridge.  It should really be the Wheatstone Cipher.  Except that everyone knows Wheatstone invented it, but Playfair got so excited about it, he just kept talking about it.  And so everyone called it Playfair Cipher.



LEO:  The Playfair; right.



STEVE:  So what happened was...



LEO:  It's kind of funny because Microsoft's encryption, or actually Apple's encryption for - its DRM for the iTunes is called "FairPlay."  And the guy who cracked it, DVD Jon, ended up making a program called PlayFair.  But I don't know if he knew.  He probably did.  He's a smart boy.



STEVE:  Well, and you can Google it, and you'll find lots of information about it on Wikipedia.  But I want to describe it to our listeners because it also - okay.  So when I discovered it that Thursday morning, I said, oh, maybe my - I didn't want to invent something.  I wanted to find something that had already been well vetted, was understood, people had looked at.  And so I thought, maybe the PlayFair cipher or a variant of it was something I could use for this paper enciphering system.  So the way it works is we have a 26-character Roman alphabet, A through Z, 26 characters.



LEO:  So we don't allow for numbers or punctuation.



STEVE:  We don't do numbers and punctuation.  The idea was to get messages in a secure fashion, delivered by couriers in the war, in such a fashion that, if someone intercepted the courier, they'd look at this page of gibberish, and they couldn't decipher it.  What's interesting is for a long time this was believed to be uncrackable.  So here it is.



You technically have a passphrase which you fill in in upper left and across, then the next row and down, order.  And that's the key for this square, the 5x5 grid.  So it's very small and convenient.  So there would be a passphrase, and you simply fill in the letters of that passphrase.  Any that occur a second time you ignore.  So that basically you start filling in this square from the top down, in raster order, until you're done with the passphrase.  Then in alphabetic order any letters you haven't used already you fill in till you're done.



LEO:  So you then go A through Z.



STEVE:  Then, exactly, then you go A through Z.  But for our purposes, just imagine all the letters of the alphabet in a random order occurring in there.  Because actually it weakens the cipher to have it be a passphrase because it turns out...



LEO:  Ironically.



STEVE:  Exactly, because things that are probably not in the passphrase, like "Z" and "V" and things, they're going to end up being pushed down, down to the bottom.  And it'd be better if they were in an unknown location in this grid.



LEO:  "Z" always tends to be at the end.



STEVE:  Exactly.  It's always going to be the last character.



LEO:  Right.  Unless you have a passphrase with a "Z," but...



STEVE:  So what's so clever about this, this is the, as far as anyone knows, the world's first digraph cipher.  The Caesar cipher is called a "monograph" cipher, meaning a single-character substitution.  This is a "digraph" substitution cipher.  You take the message that you want to encrypt, and you break it up into pairs of characters.  So you have, whatever it is, you blow off the spacing between words, and basically you respace it in character pairs.  You locate any two characters, like in the first pair, you find them on the grid.  And if they form two corners of a rectangle, then the encrypted characters are simply the other two corners of the rectangle.



LEO:  Oh, that is tricky.



STEVE:  Yeah.  And if they are on the same line, then you encipher by going to the character to the right of each of them.  And if you wrap off the end of the grid, you come back around.  If they're in a vertical column, then you use the characters below and also wrap around.  And that's it.  Oh, and if you have a double-character pair, obviously if you had "AA" that occurred together, you can't, you know, it's just itself.  Part of the setup is you just stick an "X," you separate a character pair with an "X" when you're doing your original grouping by twos.  And anyway, so you simply write down the characters that are occurring in the opposite corners of a rectangle, or if it's same characters on a line or a row, the ones that are either to the right of them or underneath them.  And that's all there is to it. Now, the...



LEO:  That would be difficult to decipher, I think.



STEVE:  It would.  It would be difficult.  And...



LEO:  Maybe not impossible with computer computation.



STEVE:  Well, and that's the problem is that what this does is it has the effect of dramatically blunting the frequency analysis.  That is, if you think of a frequency analysis as like having a peak at "E," and then a lesser peak at "T," and a lesser peak at "S," there's going to be a strong peak-y response to a monograph substitution cipher.



LEO:  A Caesar cipher.



STEVE:  Yes, a Caesar cipher.  There will still be one for a digraph cipher.  So in fact, quoting Wikipedia about this, Wikipedia says "Playfair is no longer used by military forces because of the advent of digital encryption devices.  Playfair is now regarded as insecure for any purpose because modern computers could easily break the cipher in seconds."



LEO:  Very quickly, yeah.



STEVE:  Yes.  There's just nothing to it.  But I wanted to...



LEO:  Isn't that funny.  But that just shows you, computational speed is key in a lot of these things.



STEVE:  Yes.



LEO:  Including RSA.



STEVE:  Yes.  So, okay.  So I struggled with it for a couple days, like is there a way to make it secure.  There are variations on Playfair.  There's one called Four-Square, where you use four 25x25 grids.  You locate the two characters in diagonally opposite 5x5 grids, and then you use the opposite corners for your output, your ciphertext.  And that allows you to have more independence because you just got much more entropy, essentially, that you're able to store.  And I also liked it because one of the other problems with Playfair is that you only could get out ASCII.  And we know that high-entry passwords, we like them to have special symbols and characters and things.  And there was no way to encrypt numbers and the dot and hyphen, which do occur in domain names.



LEO:  Ah, good point.



STEVE:  So I thought, well, no, I just - I can't do it.  But here was the other problem.  One of the things I wanted, one of the powerful features of modern encryption, and we've talked about this when we were talking about encryption technology, is there are these things called "encryption modes," like CBC is Cipher Block Chaining.  And what cipher block chaining does is it keeps each operation from standing alone.



There is a fantastic example on Wikipedia.  If you go to Wikipedia and look up "encryption modes," the first link will be a link to Wikipedia.  And if you scroll down, there's a picture of the Linux penguin showing you the danger of not using a mode of encryption because even though you are encrypting - for example, with AES, we take a 128-bit block, and we encrypt it with a key.  But if we simply then take the next chunk of data and encrypt it with the same key, there's something of the content leaks through.  And the way to solve that is you take something from the previous encryption and mix it in with the next one.  That is, so you make your downstream encryption dependent upon everything that came first.



And so that was what I wanted.  See, because the other problem with the Playfair cipher, not to mention any substitution cipher, is that each character pair stood by itself.  Each pair stood alone.  And that's just - there's no way for that to be safe.  But more importantly, say that you were encrypting, like all domain names have .com on the end.  So that would mean that, no matter what I did, the ".c" would encrypt to a character pair, and the "om" would encrypt to the same character pair.  And so every domain name that had .com would always encrypt to the same four characters.



LEO:  You'd start to recognize that.



STEVE:  Well, yes.  And no matter what came before, it would always be the same.  So suddenly you lose four characters, four characters' worth of the strength of your password.



LEO:  You in fact create patterns, which is what happened to Tux here.



STEVE:  Exactly.  Okay.  So here is where what actually was a breakthrough happened.  You know the old cartoon with Einstein where he's trying to work out e=mc2, and he gets lost, and he says, "And then a miracle happens."  So there's a cloud, and then out comes the result.



LEO:  Eureka.



STEVE:  What I wanted was I wanted some way for something simple, a simple paper cipher, to have memory.  It had to have state.  It had to, in order for the past to affect the future, you had to have state.  It had to have memory.  You had to, like, be in a location somehow, like on a grid.  And then I thought, okay, that means that the domain name, like the character of the domain name moves you to a next place on the grid.  And then the next character moves you to the next place.  So that where you are is a function of the history of the characters you have encrypted so far.  And so I then thought, okay, for that to work, I need to have a grid which is 26x26, where on every row and column, each letter only occurs once.



LEO:  Okay.



STEVE:  So that, if you think about it, every row would have the alphabet in a mixed-up order.  But you want to be able to locate, like, "A" of Amazon at some point, say on the top row.  Then you want to look up "M" of Amazon in that column that starts with "A."  So that means you can only have one "M" in that column.  Then you want to, wherever that "M" is, now you switch to rows, and you want to look up the "A," "AMA," the "A," the second "A" of Amazon, somewhere on that line, on that row.  So that meant - and I see someone in the chatroom just said "A lot like Sudoku," and that's exactly right.



LEO:  Oh, Sudoku is exactly that, yes.



STEVE:  There are no digits that occur in any row or column.  Well, and then I thought, okay, so I'm like, okay.  I'm on to something here.  So, and I thought, somebody somewhere must have thought about things where there's only one of them in any row or column.  And, oh, boy.



LEO:  Have they.



STEVE:  It's called a "Latin Square."



LEO:  Sudoku is actually a special case of a Latin Square.



STEVE:  It is.  It's actually a restricted Latin Square because within the 3x3 sort of sub-squares, you also have the same...



LEO:  Conditional...



STEVE:  The same constraint.



LEO:  Yeah, constraint, yeah.



STEVE:  So I stumbled into a massive world about the Latin Square.  And...



LEO:  You know what I love is you reverse-engineered crypto, in a sense, and came up with the same thing, in effect.  By thinking about it, you realize, well, we have to solve it this way.



STEVE:  We need cipher block chaining.



LEO:  We need to do this, yeah.



STEVE:  We need somehow for the future to affect the past.



LEO:  And you know you're on the right track because you came up with something that is now, it turns out, widely used.



STEVE:  Although never for crypto.  As far as I know, this is the first cryptographic application of a Latin Square.



LEO:  How interesting.



STEVE:  Now, Leo, you've got to go to GRC.com/latinsquare.htm.



LEO:  Okay.



STEVE:  Because I needed to, early in my research, and there's a link off of that one page, if you want to...



LEO:  The Workbench here?



STEVE:  Scroll down to the Workbench, and you can now start clicking things.



LEO:  We can play with the Latin Squares.



STEVE:  I needed to understand how Latin Squares operate.



LEO:  So of course he wrote some code.



STEVE:  Yes, that is a - the Latin Square Workbench, which is available on GRC, is a - it allows you to experiment with manipulating Latin Squares because I realized that's going to be the heart of the Off The Grid Cipher.



LEO:  Right, right.



STEVE:  So, okay.  So Latin Squares have fascinated mathematicians for decades.  And one of the things that I learned, and Wikipedia's got a great page about Latin Squares, they show, among other things, how many Latin Squares there are.  And what's interesting is the number of possible Latin Squares gets big so fast that today, Leo, today nobody knows how many there are that are bigger than 11x11.  Nobody knows how many 12x12...



LEO:  We can't compute it.



STEVE:  No, we can't compute it.  The mathematicians, if you scroll back up on that page, above that chart, you'll see there's a formula that shows that there are - that we know that there are at least a certain number.  And that number is big when you get to 26x26.



LEO:  Very big.



STEVE:  In fact, that number is 9.337 times 10^426.



LEO:  That's big.



STEVE:  Okay.  The log2 of that, that is, the number of bits that is, is 1,418 bits.



LEO:  Wow, that's a lot.



STEVE:  So that is an incredible amount of entropy.



LEO:  Plenty.



STEVE:  Okay.  So here's how the Off The Grid cipher works.  And for our listeners, I mean, I know this is a lot to take in.  I wanted to give everybody sort of a rich background so you'd be able to understand how to use this thing.  The idea is that you will be able to go to GRC, and it's GRC.com/offthegrid.htm.  And there's a whole set of - there's a complete tutorial in using it.  There's a - I've written a JavaScript random grid generator.  And you wouldn't believe how much technology is in this thing because, I mean, just to get this thing to generate the grid quickly - in fact, if you want to, you can see it work by clicking on it, watch it work, and then regenerate one.  And it'll get stuck at some point as it's trying to solve the grid because it's got to create a grid that obeys this Latin Square property.



LEO:  It's using brute-force almost; right?



STEVE:  I'm doing a highly constraint-based tree search with a ton of heuristics in order to allow it to not spend forever because - but one of the indications that it's able, that there are so many grids, is that it's just able to give you grids on the fly very quickly.  And no two of these will ever be the same because we've got so much entropy in this thing, it's not even crazy.  I mean, it is crazy.  So the way...



LEO:  You slow it down to let everybody watch it work.



STEVE:  Yes.  Under "Watch It Work" I actually use a different algorithm than - on the "Get It Done," I use a "restart the row" algorithm because sometimes it takes too long, going too far back.



LEO:  It's instantaneous.



STEVE:  It is, it's virtually instantaneous.



LEO:  It's instantaneous, yeah.



STEVE:  And that took - there's some serious technology in there to get that going.



LEO:  Did you obfuscate the JavaScript, or can we look at the source of this and...



STEVE:  I did obfuscate it.  But anyone who is interested is welcome to it.  And of course obfuscation doesn't help you much.  You can easily decrypt it because the browser's having to do that in order to run it.  



LEO:  Right.



STEVE:  Okay.  So the way this operates is pretty simple.  You take the first six characters of the domain name, and those are expanded into 12 characters for that domain name's password.  You look up the first character, somewhere along the first row, the first line.  And we'll take "A."  I use "Amazon" as my example in the tutorial.  And Leo, if you go to the second page there on the "How It Works," you'll be able to see it on the site.  Oh, and actually I think the second page is all the criteria that I had, the goals I had, because I wanted any single change to a character to give you a completely different result.  I wanted really strong crypto out of this thing.



And if people say, well, is this as strong as AES-128, like commercial-grade crypto, it's different than commercial-grade crypto.  Commercial-grade crypto, like the Rijndael cipher that we've talked about, where you put in 128 bits, and you get a completely pseudorandom 128 bits out, you could - a bad guy could look at those in and out, in and out, in and out all day long and gain no information about your key.  As we're about to see, the Off The Grid cipher does leak a little bit of its structure with every password.  Except there is so much entropy in this thing that you - and we have done an analysis, and I have a security analysis of it, looking at the amount of entropy that exists in the grid.  But let me get to how you use it.



So you would locate "A" of Amazon across the top.  Then you basically follow the path for the first six characters of the domain name.  So you locate "A."  You go down to "M."  You go over to "A."  You go up or down to "Z."  You go over to "O," and then up or down to "N."  Basically you follow A-M-A-Z-O-N.  And what that does is that will bring you to the starting point for what I call Phase 2:  The Cryptographic Generation part.  What we've basically done is we have hashed the domain name Amazon using - by following the path, we've hashed the entire name so that where we are is dependent upon every letter of the domain name.



LEO:  But it has more characters than the actual domain name.



STEVE:  Well, the encryption portion does.  We're about to do that.



LEO:  You're going to pad it.



STEVE:  Yeah.  Well, no.  There's two phases.  Phase 1 just - we sort of run through the domain name to get to the starting point...



LEO:  Got it.



STEVE:  ...for Phase 2.



LEO:  That's the starting point.



STEVE:  Yes.  And the reason we do that is, if, like...



LEO:  So we have a unique starting point for every domain.



STEVE:  Exactly.  Exactly.  So that's like hashing.  Now we find "A" of Amazon again on whatever row, or sorry, whatever line we were left on.  And we find the "A."  And then we go, we output the two characters that follow it in the grid.  So we output the two characters that are next, that are, like, after the "A."  We call it "skipping over it," or "overshoot" is the term I use.  We find the two characters after the "A," and those we write down.  And so that's where we're now located.  We then find the "M" somewhere in the row that we're now in, and output the two characters overshooting it.



LEO:  Ah, got it.



STEVE:  So for each character of the domain name, we output the two characters that follow that.  And then we simply go through the grid for the six characters of "Amazon," and that will give us a 12-character output.  Or if you took GRC.com, we have "GRC.co."  Now, the way I handle the letters and dash and dot is that the top of the grid, in the center, the top of the grid, are the numerals 0 through 9 and dash and dot.  And that forms a simple little translation table that allows you to translate those into alphabetic characters, which you then look up on the grid.  So what we have - and again, I've got all this documented on the site.  A user - and I need to say that I've got all the documentation there.  I have not finished with the final grid printer.  You could use one of these grids and print it out.



The problem is, I want to let people change the font, change the size, change the color.  They might want to print it again in a different size.  So I need to add the ability to capture the key that's used so that the user can save that safely and then dump that into the page later.  Right now all of that's just happening behind the scenes.  So in the next couple days, I mean, it's the next thing I'm going to do, but I wanted to introduce this while I was here in the studio with you, Leo.



So the idea is you print this grid.  You then take it offline.  I mean, it is just - it's a grid that is a 26x26 grid.  And you're then able to use it to encrypt, I mean, anything you want it to.  You could mail it to a friend in New York, and then you could use this to create passwords which you then send in email, along with a file that's encrypted with it.  And nobody who intercepted your email could decrypt it.  I mean, so you could use it for other things.  I mean, it's a general-purpose, paper-based cipher, that doubles the length of whatever you put in, that has a phenomenal amount of entropy.  And I go into all this on the pages, the security analysis of it.



LEO:  You're going to mark it up, though.  If you use it, you're going to mark it up, right, as you use this.



STEVE:  Really?



LEO:  So you print out a new - you can do it with your finger?  You get fast enough?



STEVE:  Yes.  You're fast enough.  And what is really weird is, before long you sort of memorize it.  You sort of...



LEO:  So you can reuse your grid over and over.



STEVE:  Yes.  Yeah, the idea is you just sort of scan along with your finger, A-M-A-Z-O-N, to find the start.  And then you're able to just type or write down the output, two characters out for every character in.  And...



LEO:  So I've got this grid which I generated right from your page.



STEVE:  Yup.



LEO:  I go to "A," the first "A" is right there in the upper left-hand corner.



STEVE:  Okay.



LEO:  So now I go - oops, it changed.  It finished.  Okay.  Let me find - there is the first "A."  So now I go down to the first "M."  And I don't care about upper or lowercase?



STEVE:  No.  Now, that's one thing I didn't mention is that I have upper and lowercase in the grid.  That'll be an option that users may want to turn off because the comment's been made, and I feel this way also, that lowercase is just easier to visually scan.  But the idea is you ignore the case while you're looking for the letter.



LEO:  While you're generating.  But you use this - got it.



STEVE:  But you use the case when you're outputting them.  That way we get alpha characters with upper and lowercase.



LEO:  So really, as I go, I start with the first letter "A," and then I'll just take the first two to the left of it.



STEVE:  Exactly.



LEO:  So my first two letters of my password are lowercase "M," uppercase "G."



STEVE:  Yup.



LEO:  Then I know - I remember where my "A" was, so I go back, and I go down to the "M."



STEVE:  Yup.



LEO:  First two letters to the left, lowercase "o," lowercase "c."



STEVE:  Yup.



LEO:  Now I'm going to go over to the next "A."  There it is.  And again, capital "K," lowercase "r."



STEVE:  Yeah, you got it.



LEO:  So you're right, you don't really have to...



STEVE:  You don't really.  And what I have found, 'cause I had one that I printed out, it's...



LEO:  It's pretty quick.



STEVE:  It really seems - some of your memory seems to get engaged, and you find that you get quicker with a given grid.  And the idea would be that a user would have their grid.  It's impossible to ever get the same one again.  We've analyzed the threat model.  The threat model would be that somehow a bad guy gets a collection of your passwords generated by a grid and the matching domain name.



LEO:  They can start to make some sense of it.



STEVE:  And they start to sort of piece it together.  And the analysis is, what, if any, is the danger of that?  And there is so much entropy - again, it's easy to say, well, 1,418 bits of entropy.  But consider, remember that what we just read about the beginning of the Big Bang and that you still couldn't find a 128-bit key, okay, we have 10^388 times that much entropy.



LEO:  That's a lot more.



STEVE:  Times that much entropy.  We've got it to give away.  And so the secret of this is that, while it is a leaky cipher, because think about it, your password is actually composed of pieces, little two-character pieces...



LEO:  You could start to build a table, if you knew the cleartext.



STEVE:  Well, and so you would have a digit of, a character of the domain name and two characters that follow.  You don't know if it's above it, below it, to the right or to the left.  But you know that there's a - I call them a "triple."  You would know that there were those three.  You also don't know where they are relative to the other guys.  But I have done an analysis that I will suggest our listeners look at, which explains what information gets freed.  And the idea is, of course, that you behave yourself so that nobody gets all your passwords.  Turns out you get nothing if your password gets stolen or even if a bunch of them are stolen because there are so many possible Latin Squares that the bad guy still has to guess.  And no matter how much constraint they put on it...



LEO:  There's a lot of guessing.



STEVE:  ...all the other ones are still not known.



LEO:  Wow.



STEVE:  So that's Off The Grid.  We now have an arguably secure, 100 percent low-tech - after you get your grid generated it's low tech - paper-based cipher.  And my job here is done.



LEO:  Wow.  That's really interesting.  Really interesting.  So I would print out this cipher.  And I would follow your steps.



STEVE:  Yeah.  Now, people may not - the idea would be that any time you go back to a site, you can recreate the password you used from that site.  So you might want to use it for dumb sites that make you create an account, like just to post a response to a blog, where it's like, okay, I just need a throwaway password.  So I'm saying that I guess maybe you don't want to use it for your BofA login that you're using all the time, just because you wouldn't want to have to do this all the time.  Or you might use this as the input to a password storage system.



LEO:  Oh, this you only use once for maybe LastPass.



STEVE:  Yes.  But it's always in your wallet.  So if for any reason you don't have your storage system, you can fall back to this.



LEO:  Ah.



STEVE:  So you could use this to generate passwords, really secure 12-character passwords, which you then store...



LEO:  In your safe.



STEVE:  ...in your safe.  But if anything ever happened to your safe...



LEO:  You could recreate it.



STEVE:  ...they all came originally from your Off The Grid password.



LEO:  Of course the first thing I ask is, well, why don't we just create a computer program to do this?  But that is not what we're trying to do.  We're trying to do this without technology.



STEVE:  Right.  Exactly.  The idea was...



LEO:  You could have a computer program that did this.



STEVE:  I will probably do one.  But I don't know how to make it secure.  Maybe we could run it in a phone, but then there's a problem with it getting loose from your phone.  I mean, the idea is really to be Off The Grid so that no...



LEO:  And there's a step of obfuscation here because you have - you begin your square in a kind of - in a way only known to you.



STEVE:  Yes.  Oh, one of the other cool things?



LEO:  We left that out.



STEVE:  Leo, imagine that you're working with a server that requires you to change your password.



LEO:  You change your system.



STEVE:  You start on a different line.  All you have to do, instead of starting at the top line, you start at the second line.  You'll get a completely different password if you start at the second line.  And then, if you're allowed to go back to the first line...



LEO:  You have to make a note somewhere.



STEVE:  ...or you could do it like what month of the year, you know, zero...



LEO:  Oh, I like that.



STEVE:  Yes.  What month...



LEO:  That way you could recreate that, as well.



STEVE:  That way, exactly, you're always able to recreate it.  And so actually you could have up to 52 different passwords, depending on whether you start on which line or start on which row because you could also change the orientation and do columns first instead of lines.  So the idea is it's...



LEO:  It's pretty flexible.



STEVE:  It is.  And what's cool is it's a Latin Square.  And there are so many of them.  And so it's a - and actually it's a state machine.  I forgot to say it's a Latin Square-driven, finite state machine...



LEO:  That was one of the criteria that you had.



STEVE:  ...that moves you through the grid.



LEO:  You needed some memory.



STEVE:  Yes.  And so we get a 676-state state machine because that's 26x26.



LEO:  Awebby (sp) in the chatroom says, could you improve the statefulness by starting your next cipher from where you left off the last time on the grid instead of row number one?



STEVE:  You could, but then you would need to know...



LEO:  You have to remember it.



STEVE:  You'd be chaining ciphers.  And that maybe is overkill.



LEO:  And you would have to somehow remember where you left off.



STEVE:  Yes.



LEO:  I mean, that's not something you could deduce.



STEVE:  Yeah.  And really, also remember that we're only really choosing one of 26 rows, or columns.  So it's not like to start Phase 2, the Phase 1, where we follow the path, we're only going to be, like, in one of 26 rows.  So there aren't - it's not like it's anyplace on the grid because we're going to then look for the first character of that domain name when we start Phase 2.  But what I like about it is it's flexible.  It's open.  It's public domain.  And it's just very cool.  It's never been done before.



LEO:  People are grappling with the idea of how do we prevent losing it.



STEVE:  Yes.  Now, okay.  And that's why what I don't have yet is the page which will allow you to copy and paste the master key.  So I will have that.



LEO:  Oh, so there is a key that you use to generate.



STEVE:  Yes.  There will be a key.  And that you put in a...



LEO:  So you could regenerate - if you save the key, you can regenerate the square.



STEVE:  And the idea is you'll be able to choose fonts.  You might want to make it bigger.  You might want to change the color.  I'll have all kinds of options that are driven by that key.



LEO:  Got it.



STEVE:  And so we will generate the key for you randomly.  But then you'll be able to save the key in order to recreate the grid at any time.



LEO:  That's excellent.  Very, very...



STEVE:  Yeah.  It's just, you know, now we have it.  We never had one before.



LEO:  I had all my crypto books pulled out here to follow along.  Wow, that is very interesting.  And you don't have the issues of statistical analysis giving you spikes on certain letters or any of that stuff. 



STEVE:  Correct.



LEO:  It's completely, really completely random.



STEVE:  Yes, it is.  There are so many grids that there is no way, even with someone knowing a bunch of your passwords and the related domain names, there's no way for them to piece it back together.  They can know all that, and all the rest of the characters have so much entropy still, it's like - I calculated it, and I'll show the math on my page.  But we've got so much entropy that you - even Rijndael, with 128 bits, we have 1,418 bits of entropy.



LEO:  Wow.



STEVE:  Yeah.



LEO:  GRC.com/offthegrid.htm, if you want to take a look at all of Steve's work and create your own secure square.



STEVE:  Yeah.  Play with it for now.  I'll have this thing finished.  And I'm sure by next week I will announce that the actual grid creation page is ready.



LEO:  But you could copy and paste...



STEVE:  You could use the one that I'm showing right now.



LEO:  Yeah, yeah, because it generates a new one every time you go to that page; right?



STEVE:  Yup, yup.



LEO:  Steve Gibson is at, and this is at, GRC.com.  That's the place, absolutely the place to go.



STEVE:  Whoops, the Xpresso board is sold out.



LEO:  Yes, it was sold out almost immediately, by the way.  The chatroom is telling us, almost immediately after you gave that address, the last six...



STEVE:  Yeah, that's just so cool.



LEO:  But I'm sure they'll make more.  I hope they can make more.



STEVE:  Or get more, or, yes, yes.



LEO:  Or get more or something.  The company that makes them will make more.  If you go to GRC.com, all the details are there.  Steve puts the podcasts up there, as well, in 16KB form; full transcriptions, as well.  We have audio and video available at TWiT.tv/sn, Sierra November, if you want to go there for a copy, as well.  And of course on iTunes and the Zune Marketplace and everywhere else you can get shows like this.  Get Security Now!,  Subscribe to Security Now!.  That way you'll get it every week.  You won't miss an episode.  And you could go back in time if you wanted, 315 episodes, they're all there, both at the TWiT site and at Steve's site.



STEVE:  However many years that is.



LEO:  Well, we're now in our seventh year.



STEVE:  52.187 or...



LEO:  179, yeah, yeah.  We're in our 5.96th year or something.  But...



STEVE:  Yeah, I think we're in our seventh year.  We're six point something.



LEO:  Seventh year?  You're right.  You're right.



STEVE:  We're north of six.



LEO:  We've completed six.



STEVE:  Yeah.



LEO:  That doesn't seem right.



STEVE:  So we'll have our Q&A next week.  And then, oh, boy, the week after is TCP.



LEO:  Awesome.  Awesome.  Steve is also the creator of SpinRite, the world's best hard drive maintenance and recovery utility.  While you're at GRC pick up a copy.  You never know when you're going to need it.



STEVE:  Yeah, don't wait for Christmas.



LEO:  Don't wait for Christmas.  Bent's parents can get it right now.  Just go to GRC.com.  We do this show normally - we're doing it a different day because Paul Thurrott wanted to switch.  But normally we do this show on Wednesdays, 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1800 UTC at live.twit.tv, so you can watch it live if you prefer.  I think it's fun to watch live because we talk before and after and so forth.  Steve, thank you so much for being here.  It's really nice having you in-studio.



STEVE:  I'll be back.



LEO:  Yeah, come back.  We love having you hear.  Dinner's on me anytime you come up here.  And the Cabernet.



STEVE:  Fantastic.



LEO:  And we'll see you all next time on Security Now!.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#316

DATE:		September 1, 2011

TITLE:		Listener Feedback #125

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-316.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 316, recorded August 31st, 2011:  Your questions, Steve's answers, #125.



It's time for Security Now!, the show that protects you online.  Yes, a show can do that.  Well, it can if it's hosted by this fellow right here, Mr. Steve Gibson of GRC.com, the man who discovered, coined the term, and created the first antispyware program.  He's been so busy with his new passwords and encryption technology.  He's been teaching us how to use the Internet and what the Internet does, how it works, on and on and on.  But it's time for our semi-monthly Q&A show, Episode 125, Q&A 125.



STEVE GIBSON:  It occurs to me, Leo, that anyone who's hearing this from a recording will know the answer to this question.  But I didn't ask you, so I just wanted to make sure that we are recording this?



LEO:  Yes [laughing].  No, it's not an inappropriate question.



STEVE:  I just normally check in, just to make sure, not that the reels are spinning, but somewhere there's a hard drive whose head is thrashing around.



LEO:  Have I ever - have we ever forgotten to record this show?  Oh, yeah, we did it twice once, didn't we.



STEVE:  We've only had to redo a couple in the 316 shows.  So I'm not saying it's likely.  Clearly anyone listening to a recording already has the answer to the question.



LEO:  I am no longer alone here, as you can see in our shot of the TWiT Brick House.  People are working hard, running around like crazy people, making sure that everything gets done.  Well, they actually look like they're fast asleep, actually.



STEVE:  You know, when I was there last week I didn't see a lot of big red Record buttons.  I would have felt a little more comfortable if there were some big red Record buttons.



LEO:  Yeah, it's funny.  I think if you walked in here, you know, just completely untutored...



STEVE:  It was very quiet.



LEO:  ...you would not know, A, that anything was going on; and, B, you would not know how to make anything go on.  I used to know how to do everything here.  And I no longer know anything about how to do anything.



STEVE:  That spinning throne looks like the bridge of the Enterprise.  I mean, it's phenomenal.



LEO:  That's our...



STEVE:  That master control unit.



LEO:  Yeah, we've looked for a good name for that.  Have we decided, John, on a name for that yet?  I know that the person at the helm is called the technical director.  And what do we call that master control suite?  It's the turret.  It's the control column.



JOHN:  If you include the stuff in the basement.



LEO:  Oh, yeah, you have to include the stuff in the basement because really the thing up above, the thing that rotates...



STEVE:  It's like an iceberg.  You just see the little tip of it...



LEO:  It's just the tip, yeah.



STEVE:  ...above the water.



LEO:  In fact, it's really basically control surfaces and display screens that really go down to the basement where all the work is being done.



STEVE:  Oh, the basement is amazing.  I just love the basement.



LEO:  Yeah, yeah, it's fun.  I have to say I'm really happy that we built this.  It's just so cool.  We're still, you know, we're still tweaking it.  My office is the last to get kind of tweaked.  You can see there's still wires lying around and stuff like that.  But I just - I'm really happy here.  I enjoy coming to work here.  It is kind of peaceful in an unusual way, I guess because before we were just all jammed into one room together.  We're still working on the kinks.  We're getting the kinks out.  But I'm pretty happy about that.  So we have a lot of security news today.  I know we've got questions and answers, too.  So let's get down to it.  Let's get right to it.



STEVE:  Get right in.  So under Updates, which I always do first, technically everything got updated that we care about:  Firefox, Microsoft, and Chrome.  And presumably there's something from Apple, although I haven't actually seen the notice yet.  But it's all because of what is top of our Security News, that all of the manufacturers and publishers of browsers have been scrambling around as fast as they could to deal with something that's sort of related to the Comodo problem that we talked about before.



This is a Dutch SSL Certificate Authority called DigiNotar, who for reasons that are still not quite clear - and I'm getting the sense that there's a little more to this story than is public yet, from looking at the source code to what Mozilla has done.  It sort of leaks some information that we'll talk about.  But what happened was a *.google.com certificate was found in the wild that had been signed by this relatively obscure - I guess they're not obscure if you're Dutch, but they're obscure for us, and certainly for Google - certificate authority DigiNotar.



Well, DigiNotar has a collection of root certificates in all of our browsers.  There's a DigiNotar Root CA, a DigiNotar Cyber CA, a DigiNotar Services 1024 CA.  Those are root certificates across the board in Mozilla, in IE, in Chrome, in Safari, in the mobile platforms.  It's one of the collection of some 600 certificate authorities, any of whom have the ability to sign any certificate, which is part of the reason that people are beginning to feel more and more that this whole SSL/TLS trust model, this certificate authority anchor trust model, is becoming a bit rickety.



And our long-time listeners will remember, probably with a grin, the show, the podcast you and I did, Leo, where I first in a decade looked at the list of certificate authorities in whatever browser I was using, and I was stunned by the explosion of them.  I remember back in the day there were seven.  And now, I mean, and of course we've had a lot of fun at the expense of the Hong Kong Post Office.  But they're one of the people who are able to sign any certificate that they want to on the Internet, and all web browsers will trust it without asking any questions.



LEO:  So it's not the Hong Kong Post Office anymore, it's the Dutch Post, or whatever this is, Dutch Post Office.



STEVE:  And I guess it's sort of like a digital notary.  So Microsoft posted their Microsoft little announcement, sort of in the standard Microsoft style, says:  "Microsoft is aware of at least one fraudulent digital certificate issued by DigiNotar, a certification authority present in the Trusted Root Certification Authorities Store" - meaning in Windows - "on all supported releases of Microsoft Windows.  Although this is not a vulnerability in a Microsoft product, Microsoft is taking action to protect customers.



"Microsoft has been able to confirm that one digital certificate affects all" - and this is a typo because I copied and pasted it.  Anyway, they should have said "affecting all subdomains" - I guess it's right as it is - "affects all subdomains of google.com" because the certificate that was signed was *.google.com.



LEO:  Oof.



STEVE:  Yeah, "...and may be used to spoof content, perform phishing attacks, or perform man-in-the-middle attacks against all web browser users including users of Internet Explorer.  Microsoft is continuing to investigate how many more certificates have been fraudulently issued.  As a precautionary measure, Microsoft has removed the DigiNotar root certificate from the Microsoft Certificate Trust List."



LEO:  So anything that DigiNotar signs, not just ...



STEVE:  Well, yes.



LEO:  But that's appropriate.



STEVE:  This is a, yes, well, this is how badly you get spanked these days if you're a certificate authority who screws up and through whatever means gets tricked into or...



LEO:  You think that's what happened, that some malware author tricked him into this.



STEVE:  No one knows.  There were some early unverified reports that Iran was using this certificate at their borders in order to spy on Iranian transiting traffic.  But there was never any foundation for that.  So, as our listeners know, I'm really slow to buy into these things.  I mean, I was slow to buy into the fact that Stuxnet was targeted at the Iran nuclear program until it became very clear that we had the evidence to say that because it's just irresponsible to go off half-cocked.



LEO:  So Firefox, Explorer, and Chrome have been updated.  The chatroom's pointing out, quite notably, what about Safari?



STEVE:  I know.  Now, I think I recall that Safari on Windows uses the Windows certificate store.  I don't think Safari has its own, that is, the Safari on Windows.  So Microsoft's removing it from the Windows trusted root certificate authority store would solve the problem for Safari.  But Apple has been notably quiet.  I did a search through Apple Support for DigiNotar, didn't find anything.  I haven't seen any updates.  There are, if people are worried, you can put in "Mac OS X DigiNotar," and there are a number of blogs out on the 'Net where people walk you through, walk the user through manually disabling the DigiNotar certificate under Mac OS X.  So it is possible for an end-user to do it.



My feeling is Apple must just be on the cusp of releasing a fix to this, and that all Macs will all get fixed very quickly.  It's strange that they haven't because they've had a few days now, and everyone's running around like their hair's on fire because this is potentially a problem.  We just don't know where the certificate went.  Like we don't know how this happened and who's using it and so forth.



So Chromium's source, a reading of Chromium's source, and a tip of the hat to Simon Zerafa, who is frequently sending me goodies in my Twitter stream, and he sent me a bunch of links relative to this that made my search a lot easier, the Chromium source for Google's Chromium browser shows that those three trusted, previously trusted root certificates - the DigiNotar Root, the DigiNotar Cyber, and the DigiNotar Services 1024 - all of those were certificate authorities.  They are now - their public keys are blacklisted in Chromium.  And what's also really interesting is that there was a sudden jump, and I mean sudden and huge jump, in specific certificates which are blacklisted in Chromium by their serial number.  Serial numbers are all unique.  There used to be a blacklist of 10 certificates.  And they're ones we've talked about before that were signed under a previously found to be fraudulent certificate authority.  They're all blacklisted.  So there used to be 10.  Now there's 257.



LEO:  Oh, man.  How did that happen?



STEVE:  And I was looking at a side-by-side, before-and-after source compare.  And there's, like, there's these 10, and the same 10, and then this explosion, another 247 in addition.  So now there's a total of 257 specifically blacklisted certificates that Chromium's source lists as no longer valid.  And this is why I'm suggesting that there's a little more - this is one of the reasons I'm suggesting there's a little more to this story than we've heard yet. 



And interestingly, I noted when I was looking at the source that those original 10, nine of those original 10 expire on March 14, 2014.  Which reminds us why, annoying as it is, that certificates expire, that is, annoying for webmasters like myself and like you, Leo, who are constantly having to renew the certificates that our servers have and use.  The benefit of that, on the other side, is that blacklists don't have to remain in place forever.  They only need to remain in place while the timestamp on the certificate would otherwise show that it's valid.



So, for example, in this case, for those older nine certificates that Chromium is currently, every copy of Chromium is carrying around with it, making sure that no one trusts those by mistake, well, those also have an expiration of March 14, 2014.  So on March 15, 2014 - and actually they'll probably wait a while because we want to make sure that clocks are correct.  But what that does is that allows those to then be removed from the blacklist because the timestamp will show the certificate invalid, and it's no longer necessary to, like, force it in the code on a per-certificate basis.  So that's sort of the upside of that.



Now, Mozilla has taken a different approach.  First of all, Firefox 6 just updated to 6.0.1 for this change.  So Microsoft yanked that out of their trusted root store.  Mozilla, that carries their own trusted store in the browser, they updated from 6 to 6.0.1.  In the code of this change, the comment in the code says "Do not trust any DigiNotar-issued certificates."



LEO:  Any.



STEVE:  But they're doing, well, they're doing something different.  Then down deeper in the code it says "Examine the time window during which the fraudulent certs were believed to have been issued; and, if DigiNotar Root CA is within that window, the user cannot override.  Otherwise, if DigiNotar, warn the user, but allow an override."  So this tells us a few interesting things.  This is that someone - there's been some dialogue somewhere between DigiNotar and Mozilla, and that a window has been established during which this problem occurred.  And that this says also that there's reason to believe that more than just *.google.com got loose.  Otherwise, all we'd have to do is blacklist that one serial number.  Instead, Chromium has blacklisted 247 serial numbers.



LEO:  Interesting.



STEVE:  And Mozilla's approach is also a little softer because they're, I mean, look at the problem that all websites that have certificates signed by DigiNotar are no longer trusted.  There's even like a personal identity service, I can't quite remember the name of it now, that the Dutch have, and DigiNotar was a signatory of personally, like personal certificates that citizens were able to get.  So those are all no longer trusted.  I mean, this is a huge disaster for them.



But Mozilla is softening it a little bit.  If it encounters a certificate outside of this undisclosed, well, I mean, it's disclosed in the source code, but we don't know what the real-world implications are.  But outside of this time window, then you'll be warned, but you'll be allowed to override, which is sort of nice.  It means that Firefox will conditionally trust certificates which are probably almost certainly okay, rather than just lowering the boom the way both Microsoft and Google have chosen to do.



So it's interesting because, from looking at the code, we can't really tell what the story is.  But we know that it's more than just *.google.com got loose.  There's more story here.  And it may be that there's just an embargo on the details until all of these browsers get pushed out and updated; and that once we know that we're going to be blocking certificates, there may be more information made available about exactly what it was that happened.  But it does look pretty bad. 



LEO:  So your sense is DigiNotar is kind of a reliable cert authority.  It's not something weird out of nowhere.



STEVE:  Yeah.  They would never have made it into one of the gang of trusted roots if they weren't good.  Their site looks very nice.  A little hard to read for me.



LEO:  Although that's no way to measure reliability.



STEVE:  I know.  But it just has a - they feel...



LEO:  They look professional.



STEVE:  Yeah.  And, oh, they're also heavily used by the government there.



LEO:  The Dutch government.  Oh, that's interesting.



STEVE:  So there's a huge impact to the Dutch government that has many of their certificates signed by DigiNotar.



LEO:  That's interesting.



STEVE:  And so these are not - this is not a fly-by-night outfit.  This is...





LEO:  So they got hacked?  Or tricked?



STEVE:  We just don't know.



LEO:  We don't know.



STEVE:  I mean, a trick - I would have to conclude, with the very scant evidence we have, and everyone needs to recognize it's very scant, that this is more of a hack because a trick would be one certificate.  A trick would be *.google.com.  Whoops, someone somehow managed to trick them into issuing that.  But for some reason Chromium has laid out a swath of certs that are being blacklisted.  And Mozilla is saying we've got a time window.  So again, none of that fits the "We tricked you into issuing a *.google.com certificate."



It's probably going to turn out that something bad happened, and potentially a bunch of certificates were issued.  And of course DigiNotar knows, they would have provided this list to Chromium, for example.  They know which certificates would have been issued during that time, unless the hack was more sophisticated than we would expect.  So I think we'll be coming back to this and updating our listeners in a week or two with more information, probably that a bunch of certs got issued.



LEO:  Somebody in the chatroom says they're a division of VASCO, which is a very large...



STEVE:  They are a VASCO, yes, they are a VASCO company.



LEO:  They're an international security company.



STEVE:  And they're one of the big makers of the tokens.  In fact, VASCO is the manufacturer that is often relabeled on all these little footballs that we talk about people press and generate numbers.



LEO:  So this, you know, is not some - DigiNotar is not some out-of-nowhere cert authority.  This is a biggie.



STEVE:  Right.



LEO:  Wow.



STEVE:  And they have a nice-looking website, Leo.



LEO:  Yes, they do.



STEVE:  Which is what I go on.



LEO:  That's really the only thing you need to do.



[Talking simultaneously]



STEVE:  Good color scheme.  So I was - I skipped over this the first time until so many people tweeted it.  And I thought, okay, well, maybe it's of more import than I was originally thinking.  And that is the news that Pakistan has sent notices to all of its ISPs, the Pakistani government to all the ISPs, requiring them, the ISPs, to report any use of encrypted VPN traffic within Pakistan.  Which...



LEO:  Ugh.



STEVE:  So Pakistan is now formally banning VPN encryption technology.  The quote said, "All such mechanisms including EVPNs" - which they called "Encrypted Virtual Private Networks."  And of course you don't - you can have a virtual private network without encryption.  Most people don't bother, but it's possible.  So nonencrypted VPNs are fine.  Encrypted VPNs, which is, like, all of them going on, "which conceal communication to the extent that prohibits monitoring."  And that has now been banned by the Pakistani government.



All Internet traffic in the country travels through the Pakistan Internet Exchange, which can be and is known to be intercepted by military and civil intelligence agencies.  And of course Pakistan said that this is in order to allow them to monitor terrorist activities.  And somebody was quoted as saying that the claim that the move is about stemming terrorism "...is like banning cars because suicide bombers use them."  So anyway, it's not a good move.  But enough people thought that it was important, I mean, I guess I'm not that surprised.  It's a rough area to have freedom of speech in anyway.  So now there's less freedom than there used to be.



Last week news popped up of a new worm which uses the Remote Desktop Protocol.  And what's interesting about it is it doesn't rely on any defects or bugs.  It's able to function on fully patched Windows systems supporting the RDP, the Remote Desktop Protocol.  The good news is several things.  First of all, not that many systems are going to have RDP out on the Internet.  For example, ShieldsUP! would tell you instantly if you had port 3389.  That's one of the specific ports we check for because I have long known that it's a huge security risk for you to have port 3389 open, which is the RDP port.



The worm that is spreading with RDP just does a standard Internet port scan of port 3389.  And if it is able to establish a TCP connection, meaning that there is a listening RDP service at the IP that it has just scanned and found, then it has a dictionary of logins, so it'll attempt to use a username and password login in order to access the server there.  And if it's able to, then it essentially uses its access to the user's desktop to transfer a bunch of software across the link and run a copy of itself, which then takes off and begins finding - also scanning the Internet, looking for more copies.  It also has bot technology built in, so that it is a bot.



And this was discovered due to a sudden rise in port 3389 Internet traffic.  TCP SYNs were being sent out, and we'll be talking about that next week when we discuss what the TCP protocol is.  TCP SYN packets began their, like, a much larger flurry than normal because instances of infected systems were out looking for more of them.  The reason this is not a huge concern is that, first of all, only servers typically have RDP installed and running.  Hopefully servers are behind their own firewall that wouldn't be making the Remote Desktop Protocol public without intending to.  The lower end current Windows systems, Windows 7 Home, for example, doesn't even have it.  Pro and above have it, but it's disabled by default.  And anyone behind a router is protected by the router's inherent NAT layer, which would be ignoring incoming connection attempts, even if RDP was used behind the router on systems.



So I don't think it's a huge warning.  I did want to mention it because a number of our listeners had noted it and wanted to know what this meant for them.  It's probably not a big deal.  But we do have a worm out on the 'Net.  And it is significant in that it's not exploiting any deficiencies.  It's not exploiting problems.  It's just working the way it's supposed to.



LEO:  Isn't that nice.



STEVE:  Just someone said, hey, let's just look to see if anybody's got their Remote Desktop Protocol out and with a dumb password that this thing is able to guess.



LEO:  So that's the key.  Have a good password, and you're all right.



STEVE:  Right.  I wanted to give our listeners - today's Q&A is almost entirely about Off The Grid.  It really captured our listeners' attention and imagination, I think because it's simple.  I mean, it had to be simple to be usable.  But everyone could easily understand how you could walk around a Latin Square being driven by alphabet characters.  And so there was a bunch of really good and interesting questions that will sort of be a nice wrap on last week's disclosure.



I wanted to let people know I'm working on what I call an ultra-high entropy pseudorandom number generator because the one I've got in there now, it's a really good cryptographic pseudorandom number generator, but it's just based on AES Rijndael.  As we know, you can generate really high-quality pseudorandom numbers just by using a keyed symmetric cipher driven by a counter, meaning that the counter is - AES is a 128-bit block.  So you have 128-bit binary counter, which you simply run through AES or any other really good symmetric cipher, and out comes garbage, gibberish.  I mean, yes, you could run it the other way and get the counter value back.  But it doesn't matter.  Every time you increment the counter, you're going to get a really, a next very high-quality set of bits.



The problem is that, if we used the maximum key size for AES, which is 256, we have 256 bits for key, and we have a 128-bit counter.  Which means together the sum of those is, what, 384.  So the total entropy, the total amount of randomness that that pseudorandom number generator has is 384 bits.  There just aren't any more than that because the way it's generating the numbers are from the 256-bit key and the 128-bit counter.  So while that's good for almost every purpose in the world, it's not good for the Off The Grid because we know that there are so many Latin Squares that it's on the order of 2^1418.



LEO:  Yow.



STEVE:  So, and I've always known this, and I knew that I had to replace this PRNG, the pseudorandom number generator because, if you have AES generating your random numbers to produce this grid, and the generator only has 384 possible bits of entropy, you can't produce all the possible grids.  Now, yes, you can produce more than we will ever possibly use in probably multiple universe lifetimes.  But I wanted to be able to get to them all.  And you can't get to them all with a PRNG that only has 384 bits of entropy.  So I am developing one which has 1536 bits of entropy, which is to say...



LEO:  Wow.  This might be of use in many things.



STEVE:  Oh, it's very cool, yes.



LEO:  Is this in JavaScript?  What are you writing it in?



STEVE:  JavaScript.



LEO:  Yeah.  I hope you release this to the world because I think a good random number generator is worth its weight in gold.



STEVE:  Well, again, only fools develop random number generators by themselves.  So I'm no fool.  This is based on some really good technology which has been developed.  And I've got links...



LEO:  But you're not using Rnd in JavaScript, obviously.



STEVE:  No.  But absolutely, I will have the source code heavily commented and available.  I'll be turning it over to the denizens of GRC's Thinktank newsgroup probably later today or maybe tomorrow at the latest because the first thing I want it done is pounded on.  I want these guys to suck out a huge block of random numbers and apply it against, for example, the diehard standard suite of random number generators.  And, by the way, the core technology of this was designed by the guy who designed the diehard random number generating tests.  So it's got a lot of good technology behind it.



But yeah, Leo, it is ultra-high entropy.  The cycle time, the time between it cycling back - now in the case of any counter-driven PRNG, like I was talking about, a Rijndael cipher, well, we know what the count, what the cycle time is because we're feeding 128-bit count in, so it's 2^128.  This thing is like 2^32 times something or other.  I remember what the equation was.  I haven't worked it out yet because it's like it'll just, I mean, we really don't need a long cycle time.  But I wanted to be able to say that potentially just a ridiculously vast number of Latin Squares could be produced because we have a pseudorandom number generator that has that many bits of entropy.  And you need that many that are going to be set in a random state in order to access all of those potential Latin Squares.  So it's cool.



LEO:  Great, yeah.



STEVE:  And a bunch of people noted that Becky Worley did a very nice piece on her "Upgrade Your Life" series on Yahoo! News on Password Haystacks.



LEO:  Oh, neat.



STEVE:  Yeah, it's a very nice piece.



LEO:  Wow, that's great.  See, there's - you see, Becky has an advantage.  She's actually somewhat technical.  I don't think any reporter in any other sphere would understand at all what the idea of padding the password is and all of that.  But she gets it.



STEVE:  Yeah, in fact, yes, she does.  And she went so far as to change some of my examples just, I don't know, for whatever reason, she didn't want to plagiarize.  But she changed them and kept them all correct.



LEO:  Oh, that's excellent.



STEVE:  So she did understand all of what was going on.



LEO:  Doesn't surprise me.



STEVE:  And just a little follow-up bit of errata, Stan Robins in Mendota Heights, Minnesota commented about Firefox 5 and 6 and KatMouse.  Remember that I had just, minutes before the podcast two weeks ago, I realized the reason my scroll wheel wasn't working on the mouse was that under Firefox 5 that I think I was on at the time, now I'm on 6, I discovered it was scrolling a different tab.



Well, and so he wrote, "Steve, you probably already know this by now," and I did discover this independently.  He said, "But if a PDF is open as a tab, using a PDF reader plug-in, the scrolling message via KatMouse goes to that tab.  Close all open PDF tabs, and scrolling will work normally on the tab that then has the focus.  This is a bug that might never get fixed because the Firefox bug reporting system is pretty lame," he says.  Okay, well, I didn't say that, but Stan does.  But anyway, the good news is we know that Firefox will be soon rendering PDFs themselves.  And I will happily celebrate that day.



And finally, as we commented last week, Leo, when I gave our listeners in real time the link to that cool little $29.95 embedded Cortex M3 development board...



LEO:  Sold it right out instantly.



STEVE:  Instantly sold out.  So I contacted the site, the folks there, and said, hey, I'm the guy who's responsible for you instantly selling out of all those.  And actually I know that's true because I've been aware of it for months, and they're not selling any.  I bought four initially, and then no more sold.  And then people were tweeting me after I first mentioned it.  And almost one for one, tweet for tweet, I would notice that their stock would drop after somebody would receive the link that I sent.  Of course I remembered to tell everybody last week.  Instantly they're out.  The good news is, from these guys, they told me they're getting 50 units back in stock on September 3rd.



LEO:  Oh, great.



STEVE:  So they will be back in stock.  If you can't wait, Digikey and Mouser both also carry it and have them in stock.  But I really like these guys at LPC Tools.  So they will be back in stock there.



LEO:  You know, I forgot to mention that at our grand opening party on the 21st, that Stina Ehrensvrd of YubiKey came to our party.  It was so nice to see her.  You couldn't be there, but she was there.  And we talked about Yubico and all the great things they're doing.  They're really - what a nice company.  What a nice person she is.



STEVE:  Yeah, well, and she's moved.  She's on the peninsula now.



LEO:  She's local.



STEVE:  Yeah.  She's in Northern California.



LEO:  And what I didn't know about this whole thing is that there is a kind of subversive point to this.  She's a do-gooder.  She's more than a technologist.



STEVE:  Oh, I'm glad she did spend some time with you.



LEO:  She's trying to change the world.  And I think that, you know, for the better.  And I think that's just really neat.  So a good person, good company, great technology.  And, yeah, I was glad to get some time to talk to Stina.



STEVE:  Yeah.  So just real quickly, this was a little quick blurb about SpinRite that was posted in the newsgroups, in the news.feedback newsgroup.  And so that's why Ed says, "Steve, I'm not sure this is the correct place to post this.  Apologies if not."  And he said, "Today I had my first opportunity to put SpinRite through its paces," he says, "(I've owned a license for a couple of years now) when my girlfriend's laptop went belly up.  This was particularly unfortunate timing as she is just completing a course.  The exam is on Tuesday, and she was facing the possibility of losing all her course notes plus access to the software she needed to revise and prepare for the exam.  Needless to say, SpinRite worked beautifully, and everything is back as it should be.  So a massive thanks from both of us."  Signed, Ed Metcalfe.



LEO:  Very nice.



STEVE:  And thank you, Ed, for yet again another SpinRite success story.



LEO:  All right, Steve.  I am ready if you are with questions for the master.



STEVE:  Yeah.



LEO:  Yeah.



STEVE:  You betcha.



LEO:  Questions you've pulled together, I might add.  So we won't be stumping Steve on any of these.  Well, maybe not, anyway.  Starting with Christoph Angerer in Zurich, Switzerland, who writes - he's asking about adding some salt to the grid, for more than just seasoning.  Steve and Leo, I just listened to your latest Episode 315.  Love the idea of walking through a Latin Square - by the way, you've got to listen to 315, our last episode, to find out more about this - according to the domain name in constructing the passwords on the fly, depending on the path you're taking.  My concern is that you effectively change the password security factor from "something you know" to the single-factor "something you have," that piece of paper.



He's right.  The problem is, something you have is much easier to steal or copy from you than something you know.  Well, so he's not exactly right.  If an attacker such as a work colleague, spouse, or friend simply copies your grid, then they can easily reproduce all of your passwords without you ever knowing.  The problem, of course, is that your algorithm of how to use the grid is well known.  Therefore I suggest you should add some sort of salt to your algorithm.  This could be a password that you prepend or append to the domain name in the first phase, kind of like Password Haystacks there.  Or it could be some secret change in the algorithm when constructing a password such as, instead of overshooting two characters, you personally, in your own way, always go up four, left three, down one, and then take the characters from there.



Salting adds the "something you know" factor back to your scheme.  It will of course not be as secure as a computer-backed hash.  For example, if the attacker gets hold of your grid and a handful of generated passwords in cleartext, she could probably reconstruct your salt.  However, I think salting still makes the generated passwords much more secure for social engineering attacks.  Love your show.  Christoph.  Well, he got something out of this that I didn't get.  Do people know your algorithm automatically?  I mean, isn't that...



STEVE:  Well, they know THE algorithm.  That is...



LEO:  Yeah, that two over thing.



STEVE:  Well, yeah.  We assume, and all good crypto does assume, that the algorithm is not secret.  So, for example, that's the way we've got smart security people checking AES, looking for weaknesses and checking hashes and things.  So the concept is that the algorithm is public, and the key that you are using for encryption is private.  Well, in this case the key is the configuration of the specific Latin Square which the user has generated and is using as theirs.  And as we were just saying, there are so many of them that you just can't brute-force that.



But he's certainly right, and exactly as you reacted, Leo, we've gone from something you know to something you have.  So I'll restate again that my goal was to offer something better than what people were using now.  And my feeling is that, because this offers a per-domain password, which even those of us who say that's what we're doing, we're probably fudging a little bit on that, I mean, it's just impossible to have a per-domain password for all the different places we go.  You know, just to post some random nonsense to a blog somewhere, there may be like a standby, easier password for things you don't need to protect.



So again, the goal here was to offer something sort of simple and fun, which people would actually use, because of course security technology that is not used doesn't provide any security at all.  So, and many people, I should say many of our listeners, observed that, gee, this meant that, if someone stole your grid, they had all your passwords.  And it's like, yes.  So that's a...



LEO:  Don't lose your grid.



STEVE:  Don't lose your grid.  Keep it in your wallet and so forth.  Now, Christoph is right, though, that I would encourage people to do something custom, do something of their own.  They could tack on, prepend or append, some Password Haystack-style stuff, which does not come from the grid.  So nobody who had the grid would know.  The weakness there is that if someone saw one of your passwords with that tacked on, then they might guess what was going on, that is, like what your salting was.  So it's a little better maybe to stick it in the middle or to maybe feel comfortable with evolving the algorithm a little bit.  I worked for - I went for something simple and usable.  If you'd like a little more security, you could do something different.



I mean, basically one of the things I like about this whole Off The Grid, this whole technology, is that it's just a template.  It's a very secure Latin Square that you can use in all kinds of ways.  So you could definitely, for example, instead of overshooting and taking the two characters after, you could take the one before and the one after.  Or whatever.  So, yes, by all means, listeners should feel free to innovate on top of this underlying technology.  And you would get some more security against your grid falling into someone's hands if that happened.



LEO:  Steve Gowin in Northridge, California wonders about compromised passwords:  Thanks, Steve, for all the hard work.  I intend to implement this for all of my website logins.  But one question, though.  What happens if one of my passwords is compromised?  Would I need then to create a new password for that site?  Or actually he would obviously need to create a new password.  The most obvious solution:  First, I could keep a list of all the sites that have been compromised and use a different starting point to generate a new password.  Because he needs a new password, and he's still got the same domain.



STEVE:  Right.



LEO:  The second option would be to create a different grid and use that.  Both have drawbacks.  There'd be a need to keep track of what sites he's used the original algorithm and original grid, what sites use the new starting point or new grid.  What do you have for me if I have to change a password on a site?  What do you recommend?



STEVE:  Well, okay, a couple things.  It has been observed that just starting in a different place in the grid will give you a completely different password.  So, for example, in the normal mode we would have people starting on the top line.  And I should say that's another way of creating an effective salt is you could start somewhere else always than on the top line, or you could switch to looking up the first character in a row of your choice, rather than in a - I'm sorry, in a column of your choice, rather than along a row.  So since it's a 26x26 grid, we've got 52 possible rows and columns where you could look up your first character.  But this is handy for people who need an alternative password; or, for example, where policy requires that you change your password occasionally.



Any of the systems that always hash the same domain name into the same hash have a problem that they're unable to do anything else.  So this Off The Grid approach does give you the flexibility.  So it's one of the things I like about it being on paper, for example, is you could make some notes on the back that this domain, my normal starting place was compromised, so I'm using my backup starting place for the following domains.  And it's one of the reasons that the technology I'm in the process of finishing that allows people to reprint their grids anytime is something I think is important because you can imagine over some length of time the back of your grid might get messy with erasures and cross-outs and so forth.  And so being able to print a new one and then copy over only the delta information, the little changes that you've had to make over time allows you to sort of keep a nice grid and keep it neat.



I don't think throwing out your entire grid makes sense.  Of course that would obsolete all of the passwords that were based on the first grid.  And having two seems a little bit of an annoyance, too.  It's maybe, you could argue, a little more secure to have a second one.  But then you've got to, as Steve mentions, you have to keep track of which one you're using where.  So I just think starting, altering your own algorithm some way and then making a note that that's what you've done.  And of course you could also - you could sort of just have a standard backup.  And if you generate the password for a domain you haven't been at for a while, and it doesn't work, the act of it failing might jog your memory.  It's like, oh, that's right, this one uses...



LEO:  If that doesn't work, how about three over or something, yeah.



STEVE:  Yeah, it goes to Plan B.  And so then it's like, ah, then it works.



LEO:  I do that all the time.



STEVE:  Yes.  I do, too, as a matter of fact, Leo.



LEO:  Let's see.  Moving along to Question 3 from Rik Schreurs.  I'm not doing well on the names today.  Rik Schreurs.



STEVE:  Through no fault of your own, Leo.  They're tough names.



LEO:  Sorry, Rik.  He wonders about an option to decouple the output from the Latin Square.  Steve, I thoroughly enjoyed watching your OTG explanation on Security Now!.  I've made multiple attempts in the past to create something similar to this, but my attempts always turned out to be too complex or too trivial, either side of the coin there.  I've heard of Latin Squares before, and now I feel like an idiot for not coming up with this idea myself.  I would add one more thing because, as you said, you can't be too paranoid.  Instead of taking the output letters from the grid, you could also add other independent symbols between the navigation cells and use those as output.



For example, between each two square navigation cells, there's a rectangular half cell, say, containing two symbols, let's say a red and a green one.  When overshooting the cell with the matching letter, you take one red symbol from the first half cell you jump over and the green symbol from the second.  This would totally decouple the password output from the input as the output symbols are independently generated without the Latin Square constraints, and also make it easier to mix in some digits and symbols instead of having to scan all the way to the edge of the grid for those, as you suggest.



Of course you'd have to print the grid a bit bigger in order for room to exist for those extra symbols, and this addition may be too complex for some users.  But it would be nice to have something like this as an option in the final program, hint, hint.  I'm definitely going to write some code on my own to experiment with this and see if enhancements like the example above are feasible.



STEVE:  Okay.  So it's a great idea.  And that was my original idea, in fact.  For those who are looking at the video, Leo, if you go to GRC.com/otg/26x26-ppc.png...



LEO:  All right.  Let's pop that thing up.  Holy cow.  This has got reds and greens in it, as he suggested.



STEVE:  Well, okay.  So the "ppc" stands for Personal Paper Cipher, which was my original working name before I came up with Off The Grid, which I really like so much.  So there's a 26x26.  And if you just change it to 13x13 you'll see an alternative.  This went through many stages of evolution while I was working to come up with, like, the right compromise between ease of use and security.  But you can see from that 26x26 grid, essentially the idea was we take the standard 26x26 Latin Square and interleave columns of complete random characters.  And so exactly as Rik says...



LEO:  Is that what the green columns are on this image?  Or the white columns?



STEVE:  I think the green are the Latin Square.  What's all lowercase?



LEO:  The green, okay.  So it's green, okay.  So green is the actual square, the traditional OTG square.  And then you've added, in the white rows, you've added randomness.



STEVE:  Exactly.  So the idea would be, you use the Latin Square as we do now for the navigation, but the output characters you don't take from the Latin Square itself.  You take those from the intervening.  And I think maybe I was going to go, like, one on each side.  So take the left-hand character and the right-hand character that fall on either side of the target Latin Square character.



LEO:  Now, these are truly random because I see for instance in the middle column there's three uppercase E's.  There's no attempt to make it unique like a Latin Square.



STEVE:  Exactly.  And that's strength.  And Rik's point...



LEO:  That's truly random.



STEVE:  Yes, is that an attacker would have absolutely no information about your Latin Square because you're giving none of the Latin Square away.  You're generating characters just that are physically associated with it.



Okay, so there are a couple problems.  First of all, what do you do if you get one of these annoying websites that won't let you use special characters?  And they're out there.  There's a surprising number where you still cannot - you only can use alphabetic and a digit and not special characters.  So then I thought, okay, well, we could remove the special characters.  But there are even some that won't let you use digits.



So I thought, well, they could just, you know, if you run across one of those, you could just skip it, blah blah blah.  But the biggest problem is, as you said when you looked at it, it's like, whoa.  I mean, it's...



LEO:  It's big.



STEVE:  Yeah.  We use the fact that letters are taller than they are wide in order to keep the thing from being, like, really wide.  So it's scrunched down a little bit.  But it's still, it's twice as much information that we've crammed into this grid.  And but here was the key, was with the group in the Thinktank newsgroup, and there are some really smart crypto-oriented people who hang out there, that we've had - we have great conversations.  And we carefully looked at what was the nature of the leakage.  This is what I call the "structural leakage" that does come out of the grid every time you use it because any attacker would know that there would be the character of the domain name, which we assume they know.  And then the two characters that you output, the so-called "overshoot characters," would be right next to it, given that you're using the normal default algorithm that we talked about last week.



So, yes, that does leak a three-character sequence that occurs somewhere in the grid.  But I looked at it long and hard before I made the determination that there just isn't useful structure.  The idea would be you would apply constraints, those constraints to a grid generator, which would then be responsible for generating candidate grids which obeyed the constraints of all these little triples that you got.  But, and this is where the insanity of the number of possible Latin Squares comes to our aid.  There are so many of them.  Again, it's like 9.333 times 10^436 or something.  I mean, that's just a ridiculous number.



And so what I was able to show was that, sure, even if an attacker had a bunch of your domain name and matching passwords, and had all of the triples from those and applied them to constraints on the grid, there's still too much that's left unknown and that you are forced to brute-force.  So each one, each little bit of information does leak a little, but there's just - there's so much to be leaked that you really are secure.  And an attacker having a whole bunch of your passwords and matching domain names, I mean, that's a weird attack scenario anyway.  I mean, we want to understand what the consequences are.  But it's unlikely that that happens.  I mean, otherwise you've got some other sort of serious problems.



LEO:  Yeah.  Well, and it's like all the attacks that require people have access to your hardware.  I don't worry about those so much because so much can be done if they have access to all your passwords.  You've got other problems.



STEVE:  Anyway, I just want to say Rik's point is right.  I mean, and I did want to let people know I went there, looked there, and the two links to those PNG images are in the notes on the site, if anyone's curious.  If you actually go through and read all the text, I do address that issue.



LEO:  Great.  Brent Nesbitt wonders if Off The Grid goes both ways.  Is it possible to decipher a message if you have the grid that was used to encipher it?  If so, what's the process?



STEVE:  Okay.  This is such a neat question, I am posing it to our listeners.



LEO:  A stumper.



STEVE:  Can you, and under what conditions can you, decrypt from the password back to the domain name?  I mean, it's a perfect little puzzle for everyone to think about.



LEO:  I like it.



STEVE:  So I'm not going to answer Brent's question.  I'm going to say, well, what does everybody think?



LEO:  And how would people respond to you?  Go to GRC.com/feedback?  Is that what you'd recommend?



STEVE:  Yeah, or tweet.  



LEO:  Or tweet.  @grc, that's Steve's...



STEVE:  @SGgrc.



LEO:  I'm sorry, @SGgrc, that's Steve's handle.  Good.  Can you go both ways?



STEVE:  Yes.  Can you, given a password, do you have enough information to figure out what the domain name was?  And because you could find those - we know that the password is character pairs that occur in either horizontal or vertical relationship to each other.  And then you'd see the other character pair.  And so one's going to be horizontal; the other's going to be vertical.  And it's wonderful to think about, so I'm going to let our listeners think about it.



LEO:  Think about that.



STEVE:  Think about that.



LEO:  Think about it.  Billy Spelchan, Billy D. Spelchan has been thinking about how the Latin Squares are generated:  When I was watching your Latin Square generator working - which is fun.  Turn that on.  It slows it down, but it's so fun to watch it go [vocalizing].  I noticed that you generate the rows randomly.  I'm assuming you're using data from the above rows to determine valid letters, then randomly choosing from those.  When you run into a non-solvable cell, you then back-step - and you'll see that sometimes it goes [vocalizing] - and try with different letters.



STEVE:  And it makes just that sound, Leo.



LEO:  [Vocalizing]



STEVE:  You can almost hear it.



LEO:  And this is just because you're doing it by brute force; right?  You're not being smart about it.  You just go and, boom, let's make it work.  And it's fast enough that it's fine.  In fact, you probably do use a more powerful algorithm, I would guess, to just do it.



STEVE:  Oh.



LEO:  Yeah.  But I like it when people think about this stuff.  Wouldn't it be easier to create a basic - each row shifted over one - Latin Square and then do a few dozen iterations of randomly swapping each row with another random row and each column with another random column?  So you've solved it in one direction, and then you swap it around.  This would be easy to recreate if you used a cipher and a sequence of numbers for getting the random numbers for the rows and columns to be swapped.  I'd love it if you explained your choice of and design of Latin Square generation algorithms.  And actually you didn't really talk about how you did it in the fast technique.



STEVE:  No, no, I didn't.  Okay.  So the algorithm, and I will have - I'm going to release the source code to all of this as soon as I get it finished.  There's been a bunch of people asking if they could implement it in little utilities and apps and smart phones, which just delights me.  So absolutely, I'm going to encourage that, and I will help that effort by letting people all have my well-commented JavaScript source as soon as I get it done.  I didn't want to let people run off half-cocked before I'm finished because I'm still making, like in the case of this ultra-high-entropy pseudorandom number generator, which is the key of being able to recreate these things, I'm still making some changes.  So I've got the code stripped of comments and obfuscated just while I'm getting it finished.



I'm really pleased with the algorithm.  So think about going across, filling in the first row of the Latin Square.  For the very first character, it could be any one of the 26 characters of the alphabet.  The second one could be any one of the 26 except the one we already have because we can't have two in the same line.  The third one could be any of the remaining 23, and the fourth one any of the remaining 22, and so on.  So as we move across, what the algorithm does - and the implementation came out really nicely because I use bitmaps to represent the characters which have been used so far.  So as we're moving horizontally from left to right, I'm keeping track of the characters that have been used behind us on that line, and then selecting at random - and so there's the key, selecting at random - from the set of remaining possible characters we haven't yet used on that line.



So the first line, zip, I mean, nothing ever stops us.  We just go right across and in some random sequence we lay out all the 26 characters of the alphabet.  But now we're on the second line.  So the first cell of the second line has to consider what's above because we can't have any duplicates down that column, that first column.  So I also have bitmaps which I maintain for all of the columns.  And this is where bitmaps are so cool, because I'm able to AND the current row's bitmap with the current columns bitmap in order to get, instantly get that subset which doesn't appear either in the column so far, or in the row so far.  



So now we move along again doing what we were before, but also considering making sure that we don't have a collision of anything above us.  And even there it is possible that we could make a wrong - that randomly we would have chosen something where we would use a character on the line incorrectly, where we really need that character to be used later and a different character that would have been left over later used earlier.



So what happens is it gets to the point, it can get to the point where it's on a cell, and it does the ANDing of the two bitmaps, and it's zero.  That is, there are no available characters which, due to the choices we've made before, which don't occur, that we haven't already used, either in the row behind us or the column above us.  In which case we backtrack.  So this algorithm is a pseudorandomly driven, back-tracking tree search because we're searching through a tree of possible Latin Squares.  And when we backtrack, we remember what didn't work.  So that when we back up a cell, a memory is kept of the choice we made that time, and we know that since we're coming back, there's no solution downstream of that choice.  So that choice is removed, and the pseudorandom number generator is asked if we've got any more available characters.  And that's the way this proceeds.



So it just - it works its way down, line by line.  And of course, as we get down further, it becomes increasingly difficult, which is why you'll see the generator just cruises along without much trouble at all toward the beginning of the square.  But around about halfway down, it starts choking a little bit because it's got so many characters above it in each row, and so it knows it can't choose any of those.  And it's also having, as you'd expect, more trouble toward the end of the lines because it's got more characters that it's already chosen behind it that it can't choose ahead of it.  And the other really interesting thing is the last line is a freebie.  So if you think about it, every character in the last line is predetermined because it's all of the characters that didn't occur in the column above that cell.  So that one we get for free.



One of the things that I noticed, though - and, I mean, I watched this thing obsessively for quite a while, and it was tricky to get it to run as fast as it does, actually.  I had it running at 13x13, and for a while I was thinking I was going to use a 13x13 Latin Square and just double-up characters in each cell in order to keep the grid size down.  And then, expanding it to a larger one, it became tough to get it to run fast enough.  And I did expand it up because I just wanted all of that entropy that a full 26x26 Latin Square has.



What I noticed was that sometimes it could make a mistake early in the line.  It could choose a character, like in the fifth cell from the left as it's moving from left to right, which is wrong.  Yet it could go way downstream, down that line, and just never be able to solve that line.  It would just - and essentially it would be backtracking, choosing a different character, and then trying to move forward again, backtrack again, choose a different one, then go back even further because that, I mean, the point was I realized an early mistake could take us a long time to recover from.



So there's two modes in my generator which you can choose on the website:  Watch It Work or Get It Done.  The Watch It Work uses the algorithm I was just talking about for generating the square.  But it can get stuck and take a long time.  It's kind of cool when it does because you can see it, like, changing its mind and doing what it can.  The just Get It Done is a different strategy that I developed from watching it get stuck otherwise.  And that is, the first instant that this thing has to backtrack, it just scraps all the work on that line.



LEO:  Oh, it starts over.



STEVE:  It starts the line, yes.  And for whatever reason, I mean, and actually when you think about it, for it to be able to fill out a Latin Square as easily as it does, it never, for example, goes back up into earlier lines.  It has the ability to do that.  It can backtrack all the way back out to the beginning, if it had to.  But the fact that it never has to go back up to a prior line means that there's always a solution downstream.  Which gives you some sense for how many Latin Squares there must be, if it's always able to work itself out.



So anyway, that's the algorithm.  Now, Billy suggested something very clever, which was think about a - here's a trivial Latin Square.  Let's just think of it as maybe a 10x10, and we'll use digits, so 0 through 9.  We fill the first row with 0 through 9.  Then we fill the second row, shift it over.  So we start with 9, then 0 through 8.  And the third row we shift again, so it's 8, 9, and 0 through 7.  Well, if you keep doing that, think about it.  You've just made a Latin Square, a trivial one.  Because obviously all the lines are going to be okay because they're all only 0 through 9.  There's no attempt to repeat there.  And you've automatically fixed the rows because that skew means that there'll be a different digit automatically in every column space.



So as Billy says, that's a simple Latin Square.  Then we already know that swapping rows and swapping columns never breaks the Latinness of a Latin Square.  If you think about it, if you swap rows, well, the rows are all going to still be fine, and the columns will be fine because you're not creating any duplicates that didn't exist before.  So that kind of random transposition of rows or columns always is safe to do to a Latin square.



Well, that is the genesis of the Latin Squares Workbench.  And in fact, in the podcast last week I said "latinsquare.htm," that is, GRC.com/latinsquare, and I think it's plural.  So some people tweeted they couldn't find latinsquare.htm.  It should be latinsquares.htm.  And that's this little Workbench that I wrote, also in JavaScript, to familiarize myself with manipulating Latin Squares.



My original concept was, boy, it's exactly as Billy suggested, it would be so easy to generate Latin Squares that way.  And in fact one of the - rather than randomly exchanging them, what I would have done in a more robust crypto standpoint would have been, once I had that simple rotated or shifted rows Latin Square, then I would have taken another, like a blank Latin Square, and randomly have chosen one of the rows and stuck it in the first row of the new one, randomly chosen one of the remaining rows in the original one and stuck it in the second row of the new one, and so forth.



What that means is, what that says is that I could choose any one of 26 rows in the first one to be the first row of the second, any of the remaining 25 from the first one to be the second row of the second, and so forth.  Meaning that there are 26 factorial ways of rearranging the rows on a 26x26 grid.  Similarly, there are 26 factorial ways of rearranging the columns.  So what that says is that there's 26 factorial-squared arrangements.  Which is a huge number.



But it turns out you cannot get to all Latin Squares that way.  It's huge, but it's not huge enough for us.  It's not all possible Latin Squares.  It turns out that there are - I think they're called "paratopy sets."  The Wikipedia page on Latin Squares discusses this, where these are like closed sets of Latin Squares which are large, but they're disjoint from other Latin Squares.  So you cannot get between any two Latin Squares just by swapping rows and columns.  And that I proved.



I wanted to see that for myself and develop a feel for it, so I wrote that Latin Squares Workbench to actually play with swapping rows and columns.  And that's what that is.  That page on GRC, latinsquares.htm, allows you to, like, with your mouse, click on rows and columns or even click on symbols and swap them and experiment with different configurations.  So anyway, I wanted - you know me.  I wanted, if I'm going to do it, I'm going to do it once and do it right.  And so having an insanely high entropy pseudorandom number generator that potentially lets us get to at least as many Latin Squares as we know exist, is the solution that we'll have shortly.



LEO:  Very cool.  Really neat.  Let's see here.  Moving along to Question 6, Drew Monrad wonders about the Off The Grid source code:  I am just starting to take a look at iOS programming.  I thought I'd like to try something related to your OTG, make an interesting starting challenge.  I think that would be neat, to have an iPhone app out of this.  I don't know how much I'll be able to get done.  Are you able to share your JavaScript coding?  This would let me concentrate on the Objective-C side of the project.  This is more of a personal challenge than an attempt to release a new app.  But if it turns out to be worth sharing, I'd consult with you before publishing anything with Apple.  Thank you.



STEVE:  Yeah, so I say to Drew and all of our listeners, yes, absolutely.  I'm going to let everyone have the source code for this as soon as I get it done.  And, frankly, I love the idea of turning this into some smartphone and, like, little standalone utilities because what that lets us do then is we kind of get the best of both worlds.  We could keep our grid in a drawer or in our wallet as the master paper backup reference.  So we could generate a password with zero technology if we wanted to.



Yet if we had a little app, it would make it much easier to just type in "Amazon" and, boop, there's our 12-character matching password.  So we have a piece of technology that makes it easy, but with the caveat that, if it's online, if it's in your phone, I mean, it's potentially vulnerable to being compromised.  But with the understanding of that tradeoff, then, yeah, I think it's a cool little project.  And I will happily provide all the source to help people make that happen.



LEO:  Very kind of you.  And the truth is, even though it's obfuscated JavaScript, it's fairly easy to use tools to get that source code.  But I'd rather see Steve's commented source code than anything else, obviously.



STEVE:  Yeah.  I had somebody sent me a note who said that he looked at my JavaScript.  I think it must have not been this project because I think it must have been something else I had done because I think only one file is currently non-obfuscated.  And he said, "Steve," he said, "I hardly even needed to read the code, your comments were so good."  And actually I learned the lesson a long time ago.  I write this stuff for myself mostly because I know I'll put it down and won't come back to it for a decade.  And then I'll be thinking, what the heck was I thinking?



LEO:  Well, if you're an assembly language programmer, commenting is essential.



STEVE:  Yeah.



LEO:  I mean, you really learn that, I think.  But, I mean, it is for every programmer.  But assembly language, you...



STEVE:  Well, actually these algorithms will, that Latin Square finder, people who enjoy code will love looking at it because the way I implemented it with these bitmaps, it's like there's almost nothing there.  It's like, wait a minute.  Where's the code?  I mean, that little blob generates Latin Squares?  It's like, yeah.  It ended up being really good.



LEO:  That's neat.  That's excellent.



STEVE:  I'm proud of it.



LEO:  Yay.  You're a good man, Charlie Brown.  Question 7 is from Justin Lowmaster at TheSpaceTurtle.com.  It's in Portland, Oregon.  And he has a special case for what we were talking about, just why would you need WAN administration on a router?  Just turn it off.  Steve, regarding the Universal Plug and Play UPnP exposure and WAN-side administration:  When I was "dating" my - he puts that in quotes, I don't know why.  When I was "dating" my now wife, she lived all the way across the country and three hours later in time zones.



STEVE:  Oh, that's why.



LEO:  That's why.



STEVE:  Because that was sort of virtual dating.



LEO:  Not much of a date.



STEVE:  Yeah.



LEO:  As the night wore on, her Internet performance would get flaky and drop, needing a reboot of the router.  Well, obviously they were heating up the router a little bit.  Unfortunately, the router was located in an area that would cause her parents to get annoyed if she left her room to go reset it.  My mind, I'm sorry, it's just bad.  Okay.



STEVE:  Yes, Leo.



LEO:  I got her to turn on WAN administration, but only allowed for my IP - and any malicious people who knew a workaround, but I was young and in love.  This allowed me to remotely log into her router and reset it without waking Mom and Dad, and soon she'd be back online, and we'd be getting back to chatting.  It might not have been the most secure thing to do, but I certainly think it was worth the risk.  Now if I could only find a way to remotely log into our two kids and adjust the auto sleep timers on them.  Isn't that cute?  That is adorable.  He's doing a very strange smiley face that I don't really - I don't understand.  Maybe...



STEVE:  He must have a mustache or something, I don't know.



LEO:  Oh, maybe that's it.  Maybe the chatroom could explain what this is here.  What is that?  What is that?  It's a brace...



STEVE:  I guess the colon is his eyes.  So he's got hair and eyes.



LEO:  He's wearing a Mexican hat.  And a beard.



STEVE:  Oh.



LEO:  That's what it is.  He's wearing, okay, he's wearing a sombrero.  He's going, "Oh," and he has a beard.



STEVE:  Okay.



LEO:  Or else he's got a really big nose, and he's sticking out his tongue.  But those are the two choices.  Love the show.  Own SpinRite.  Recommend it to anyone who says "hard drive."  I'm still young and in love, but I have safer routing settings now.  Well, he's right, that would be a use case, so to speak.



STEVE:  So I did want to mention that a number of people suggested that the reason Universal Plug and Play was open on routers is for ISP administration.  And it's like, oh, goodness.  Okay.  Again, it's such a horrible security exposure.  Now, what he did, which is limiting access by IP, is actually very good.  It's still a little nerve-wracking to have something that could listen.  But as we will learn next week in our How the Internet Works continuing series, this time on TCP, the Transmission Control Protocol, filtering by IP is very good because nobody coming from any other IP or even spoofing his would be able to access his router, assuming that it was over TCP.  And that's important.



Universal Plug and Play is a UDP protocol, and it is possible to spoof that source IP so that the packets would appear to be coming from, for example, Justin.  However, if the protocol, that is, the UPnP protocol itself required some transaction, some interaction, then the router would send them back to Justin, that is, to the apparent source IP, not back to the attacker.  So again the attacker would be unable to do what they wanted unless a single packet was able to accomplish their nefarious purposes, in which case UDP could have its source IP spoofed.  But otherwise it's pretty secure.  And I did want to note that, to remind people again, to shut down WAN-side UPnP administration.  And if your ISP says, well, we need you to turn it on so we can get in there, it's like, well, then turn it on for that purpose, but then turn it off again.  You just don't want to fly with it open.



LEO:  Or fly with an open fly.



STEVE:  With your open fly.  I was thinking the same thing, Leo.



LEO:  There's a joke there somewhere.  I was just too slow to pick up on it.  Number 8, Caio Katayama in Hyannis, Massachusetts, corrects you about LPCXpresso's IDE:  Steve, just wanted to let you know that the LPCXpresso IDE does not support Mac OS.  Windows and Linux only.  Aw.



STEVE:  I thought that that was important, so I had said last week, Windows, Mac, and Linux.  And I just assumed that, if they were doing Linux, they would have done Mac first.



LEO:  Well, you said it was Eclipse; right?



STEVE:  Yeah.



LEO:  Well, Eclipse works on the Mac.



STEVE:  Okay.  So maybe it's possible to make it happen.  They may just not offer it by default.



LEO:  Yeah, I mean, I could see they might have an SDK that doesn't work on the Mac.  That's probably what it is is that whatever the software development kit is doesn't work on the Mac.  But I...



STEVE:  It's all just C, though.  It's all just C library stuff.  So...



LEO:  It's generic C.



STEVE:  ...maybe if someone has it running, or is able to run Eclipse on their Mac, they'll be able to do this, too.



LEO:  I've run Eclipse on my Mac many times.  I still do.  It's how I do the Android development.  But...



STEVE:  Ah, but it does use USB.  So there will be a USB driver, probably.



LEO:  Might be a USB driver.  But that's not a big deal.  I think that's doable.  I think you could figure it out.  The other thing is to make sure - sometimes people run up against this.  The Mac does not install its developer tools by default, which means you won't have a C compiler on the Mac.  So that could be that maybe he needs those, and that's a new install.



STEVE:  I think it brings GCC along with it, though.  I think it...



LEO:  Okay.  Yeah, Eclipse has GCC, yeah.



STEVE:  Yeah.



LEO:  I don't know.  Okay.  Well, take your word for it.  Something to look into.



STEVE:  But I did want to alert listeners that maybe not the Mac.



LEO:  Right.  Scott Maser in Colorado Springs wonders how many?  Steve, during your Off The Grid podcast you mentioned that nobody knows how many Latin Squares there are that are greater than 11x11 because it's just impossible to compute.  Later on you went to say that there are at least 9.337 times 10^426 possibilities for 26x26.  If you can't tell how many there are for a 12x12, how can you tell for 26x26?  I'm just curious.  How do you do it, Steve?  Whatcha looking at?



STEVE:  I was looking around for the book because I bought a very expensive huge combinatorial math book...



LEO:  Oh, my god.  You are such a geek.



STEVE:  ...at the beginning of this because I wanted to understand this stuff, too.  And I absolutely can't.  So here's what I know.  And Wikipedia again has a nice coverage of this, but not the derivation of the math.  And it was by following the links that I found this textbook, and I plowed into the textbook, and I got in a few pages, and I just thought, okay.  And then a miracle happened, and here was the result.  What we know is there is a formula which has been arrived at which I show on the Off The Grid pages at GRC, where mathematicians that have studied this - and, I mean, Latin Squares have really intrigued mathematicians powerfully for...



LEO:  I can see why.  It's fascinating.



STEVE:  Yeah, it really is interesting.



LEO:  It's a simple concept that's got incredible combinatorial issues and powers and so forth.  And look how much we love Sudoku, which is just a special case of this.



STEVE:  Yes, yeah.  And as you said, Leo, that's a perfect way of phrasing it.  It's so simple to say, not have anything repeat in any row or column.



LEO:  I got it.  That's easy.



STEVE:  Then look what happens.  What falls out of that is many, many grids will have duplicates.  Some won't.  And so the natural question is, well, okay, how many don't?  Well, it just - we don't even, in this day and age, have the math for describing it.  But the mathematicians have watched the way - they've looked at simpler squares and worked to understand why simpler, smaller Latin Squares, how they function and what can be known about the smaller ones.  And they've arrived at two different formulas, one which says we know that there are fewer than this many, and another formula that says we know there are more than that many.



And it's that second formula, we know that there are more than that many.  They've been able to say, we've been able to prove that a certain n-by-n Latin Square will have at least this many.  And so there's a floor that they've been able to establish.  And that's the number I've been using.  That's that 9.333 or 337 or something times 10^436, which the log2 of that, that is, the number, the equivalent number of bits, is 1418.  So 2^1418.  We know there are probably way more than that many, but at least that many.  And I thought, okay, that's enough.  That'll be all.



LEO:  Okay.  That'll do.  That's all I need.



STEVE:  Yeah.  Because, I mean, consider that most of the crypto we're dealing with is 128 bits.  And so this is 1418.  And the pseudorandom number generator that I'll have soon is working from an entropy pool of 1536.  So, yeah, we're okay.  So anyway, we don't know how many.  We just know that the mathematician gods tell us it's...



LEO:  It's a lot.



STEVE:  ...at least - it's a lot.  It's more, it's so much ridiculously more than we will ever need.  But that's where we get security because, even though this is leaking a little bit of structure, it turns out that there's just too - even limiting them in half or, I mean, like even hugely limiting them, down to a few percent, even a few percent is still ridiculously impossible for a bad guy to brute force.  And that's the key.



LEO:  That's the key.  Walter, I'm sorry, Willem Jan - let me do it right.  We have such an international audience, I love this.  Willem Jan Gerritsen in the Netherlands is chafing under his company-enforced password policy:  Steve, in our company we have an enforced password policy, such as every eight weeks we have to change the main password.  It can't contain your username.  It must contain digits, upper and lowercase, and non-alphabetic characters.  And it has to be at least eight characters long.  All of which sounds like good password policy.  But since we have to change it so often, almost everybody is using an incremental number in his password.



Oy.  So they're having the first name, last name, and then 46, 47, 48.  What I learned from your Haystacks story is that a long password is what really helps.  And eight isn't very long, is it.  How does a password refresh policy make passwords stronger?  I suspect it just drives people to put it on paper on their desk.  In fact, this has been a whole discussion.  I think it was Bill Gates who brought this up, who said the problem with strong passwords is people write them down and put them on Post-it notes.



STEVE:  Well, and I have to say there was an article floated around a couple of weeks ago that someone was claiming that, in a survey that was done, that in corporations the IT people were the most disliked.



LEO:  Yeah, I think that's probably true.  I hate to say it.



STEVE:  And this is why, Leo.  I have to agree with Willem, I do not see a benefit.  If you, for example, have a stronger password policy, like come on, at least eight characters, as you said, that's just not long enough.  We need 12.  It would be better to have 16.  Come up with, you know, like, give everybody a password school as we do here on the podcast.  Explain to them what's necessary.  Choose a really good password once, and something you don't have to write down, so you don't have to worry about it being stolen.



I mean, I don't get this change it every eight weeks.  That doesn't fit the model of exploitation.  It's not as if passwords are traveling by camel after they've been stolen, going to the bad guys, and so there's, like, some weird eight-week window, like, oh, we're going to change your password so that the stale password no longer works.  Well, passwords are used instantly.  Sometimes they're used on the fly, between keystrokes they escape, and they go beamed off somewhere else and then someone's logging in as you immediately.



So this, I don't get this change it every week.  And all this does is make IT people despised because users, who are not dumb, they think, why am I - why do I have to do this?  What problem is this solving?  And when you make people take their shoes off to get on an airplane, all you do is - that doesn't have any clear security benefit.  You just upset people.  And this nonsense of forcing people to change their passwords continually is exactly like that.



LEO:  Yeah.



STEVE:  So I agree completely.  I don't see any benefit to it.  Have a good policy and just let people come up with a  password that they can stay with.  Otherwise you're just asking for trouble, I think.



LEO:  Our last question, I think.  Yes?  Eleven.  James Higgins...



STEVE:  It's an odd number, but then it's prime, Leo, and...



LEO:  It's prime, and we love that.



STEVE:  Yes.



LEO:  Speaking of primes.  James Higgins in Gadsden, Alabama.  He's worried about the UPnP vulnerability we discussed:  Steve and Leo, I can't say I'm a long-time listener.  I've only been listening for the last few months.  But I love the show.  Good, because you know there's, like, how many?  Plenty more, 315 previous episodes.  You have plenty of listening ahead.  I was listening to 315, and the part about UPnP really caught my attention.  I'm just wanting to confirm if this is firmware-related or something involving a piece of hardware.  Reason I ask is that I, like many other listeners, use one of the open source firmwares, DD-WRT being my poison of preference.  I like that, too.  Can you please confirm where this vulnerability lies in these routers?  And thanks for the great show.



STEVE:  It is absolutely in the firmware, meaning that DD-WRT does not have this problem.



LEO:  Good to know.



STEVE:  So if you took a Linux router, which does - Linux.  I'm sorry.  If a Linksys, a Cisco Linksys router...



LEO:  Well, ironically running Linux, so you're all right there, I think.



STEVE:  Yeah.  But which does have UPnP exposed, and you reflash the firmware with DD-WRT to give it a much beefier, nicer, feature-powerful router, then this problem goes away in the process.



LEO:  Right, right.



STEVE:  Just as James was hoping.



LEO:  Yeah.  I love it.  Tomato, too.  Those are both great router firmwares.  You have to have the hardware that the firmware works on, just like putting a ROM, a custom ROM on your phone.  You have to make sure that they match.  But if you've got the router that does it...



STEVE:  Right.



LEO:  As my mom says, the "Linksies."  I have the "Linksies" router.  Hey, Steve, always fun, always informative.  Just love the show.  And I'm glad we got so many questions about OTG because I think it's just really a great and fascinating subject and a neat technology.



STEVE:  Well, I'm just glad that it's out there.  Now it exists.  It's simple to understand.  People get a kick out of it.  And we have a paper-based cipher.  I just wanted there to be one because I looked around and there just - no one had done one.  So, and now we did, and I stumbled on the idea of the Latin Square as a means of maneuvering and creating state, so that you end up having a dependence among everything that's come before.  So it solves the criteria of being a useful, paper-based cipher.  I'll get the pages finished and updated, and then on to my next project.



And next week, speaking of which, we're going to, as I have said, plow into TCP.  I don't think we'll be able to do the whole thing in a single podcast.  TCP, there is so much going on there, and it is so cool, it's probably going to be worth giving just that one protocol, which happens to be the most used protocol on the Internet, its due.



LEO:  And by the way, we have a stumper.  We're asking if you can figure out, is OTG, Off The Grid, is that magic square reversible?  Can you decipher as well as encipher using Steve's OTG grids?  And you can mail your answer, email your answer, well, just go to the website, GRC.com/feedback, and fill out the form with your suggestions.  Chatroom already says they know.



STEVE:  Well...



LEO:  You're so smart, NinjaHacker.  If you're so smart, just send a note to Steve and tell us why.  NinjaHacker says, "I know."



Steve, thank you so much.  We do the show every - now that we're back on schedule, Steve's back home we do it every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern at live.twit.tv.  You can watch, of course, live.  Love it if you do.  I don't have to say "live.twit.tv" anymore, by the way.  With the new web design, just TWiT.tv.  There is - I don't know what happens if you go to "live" anymore.  But it's just TWiT.tv.  Live's right on the front page there.  Just click the Watch Live button.  But you'll also see there the Security Now! link, and you can go to the Security Now! page and get all the previous, all 315 previous episodes, and this one, too.



Now, Steve maintains an archive of low-bandwidth versions, 16KB versions, as well as full typed out transcripts by a human.  So that's another resource, and that's all at GRC.com.  While you're there, check out SpinRite, the world's best hard drive maintenance utility.  It's Steve's bread and butter, so let's support Steve by all buying a copy of SpinRite.  What do you say?  GRC.



STEVE:  And I did want to mention that the Off The Grid section has its own feedback page, which a lot of people have been using.  And that helps me because it does then segregate the Off The Grid-related feedback from the general Security Now! feedback.  So Security Now! feedback is GRC.com/feedback.  But if you go into the Off The Grid pages, you will see a Send Us Feedback link, and there's a special little form there just for Off The Grid.  And it comes into a different email account for me and allows me to see those coming in.



LEO:  That's great.  That's great.  GRC.com, it's all there, my friends.  Thank you, Steve.  We'll see you next week on Security Now!.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#317

DATE:		September 8, 2011

TITLE:		TCP Part 1 - Getting Connected

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-317.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 





DESCRIPTION:  After catching up with a week of the amazing news of the security breach of the DigiNotar certificate authority, Steve and Leo continue their "How the Internet Works" series with the first of several episodes describing the operation of the Internet's most used protocol:  TCP.



LEO LAPORTE:  It's time for Security Now!, the show that protects you and your loved ones online.  And here's the guy who does it, Mr. Steve Gibson of GRC.com.  He's the guy who discovered the first spyware, coined the term "spyware," wrote the first antispyware program.  Steve, we're in - welcome, first of all.



STEVE GIBSON:  Hello, Leo.  Great to be back with you again, as always.



LEO:  Thank you.  And as we've been talking about, we're in a kind of a different set here.  My office is busy being soundproofed.  I guess I screamed too much.  They say I yell.  I don't know.  And...



STEVE:  Ah, you're just excitable.



LEO:  That's what I think.



STEVE:  And you're drinking coffee.  So that doesn't help, either.



LEO:  That's part of the problem.  Now, wait a minute, now, wait a minute, Mr. Sexti Venti Latte.



STEVE:  Six shots now.



LEO:  Six shots.  But basically, did you start at one, then two, then three, then four?  I mean, are you ramping up?  Are you building up a tolerance?



STEVE:  No.  No.  I just like the taste.



LEO:  I drink it - it's like reading Playboy for the articles.  I drink it for the taste.



STEVE:  That's right.  I don't look at the pictures.



LEO:  Ah.  So they know, though, when you come in the door at Starbucks, they say, oh, here's the six-shot guy; right?



STEVE:  Oh, yeah.  They fire up the machine.  Actually they turn on the spare.



LEO:  Bring - yeah, really, exactly.  Bring in reinforcements.  Here comes Gibson.  So today we are going to start another part of what you've done so well, which is these kind of basic, educational, how-technology-works segments.



STEVE:  Well, yeah.  How the Internet works, specifically.  We've talked about the underlying packet-oriented operation of the 'Net.  We then talked about, while you were on jury duty, about the ICMP and UDP protocols, which are built on top of that.  Today we're going to start the beginning of discussion of the Internet's No. 1 most used, most important protocol, which is TCP, the Transmission Control Protocol.  And it's much more complicated than the other ones.  So this one is - I'm calling it "TCP Pt. 1 - Let's Get Connected."



We're just going to attempt to explain really clearly what TCP's goals are and the process of initiating a connection, and sort of talk about the most important aspects of that, and also what the hackers have done because it's interesting that every aspect of TCP has been attacked because it is pervasive.  Since it's the glue that connects everything, essentially, it's been a big target for attack.  So we'll look at how attackers have tried to leverage the way TCP works.



But we also have a week's worth of, first, amazing news on the whole DigiNotar nightmare that we began to talk about last week.  You'll remember, Leo, that I said, you know, based on what I've seen and the source code of the Mozilla and the Chrome browsers, we haven't been told the whole story.  We will be revisiting this.  Well, we didn't waste any time because there's been a whole bunch of more information has come out.  So we've got a bunch of other sort of interesting updates.  We will catch everybody up on the DigiNotar news and then plow into TCP.



And I have to say, at the top of the show, where is Apple?  Apple is completely absent from this.  Everybody else has been scurrying around and fixing their browsers.  And I fired up my Mac just this morning, just before the podcast, to make sure that Apple hadn't suddenly woken up.  I mean, people are - PC World has an article wondering why Apple hasn't responded at all to this, which is now more than a week and a half old.  It's crazy.  But no word.  Not a peep from Apple.



LEO:  So, Steve, DigiNotar.  I saw that they think it was an Iranian hacker involved.



STEVE:  Well, we're going to talk about that.  It's been confirmed pretty much that it's the same guy who did the Comodo hack this last March.



LEO:  He's claiming it, anyway; right?



STEVE:  Well, he's claiming it, and he's also offered some proof.  The people that DigiNotar brought in to check over, like to do the analysis of their own systems, did find some fingerprint information left behind that was identical to what was used in the Comodo attack.  And I've got two really interesting posts that I'm going to share with our listeners from this guy.  I always like to start off by talking about security updates.  And across the board there have been updates in direct response to this problem.



LEO:  So Chrome is up to date.  IE's up to date.



STEVE:  Yeah, Microsoft issued an out-of-cycle update and pushed out to all their supported platforms to remove DigiNotar's trust from Windows.  Mozilla, we talked about 6.0.1 last week, which was the first phase of this.  Now we have 6.0.2, which is the second phase.  And we'll be talking in detail about what they did.  But again, really, I mean, notably absent from the party is Apple.



LEO:  Now, that's probably not a problem if you're using Safari, Apple's browser, on Windows because they use the Microsoft certs.  So your IE update will have fixed that.  But it's a big problem on the Mac.



STEVE:  Well, yeah.  And, I mean, I would say, all ye who value security, abandon Safari.  I mean, it's just - switch to Chrome or to Firefox or something.  I mean, there have been blog postings where people are showing how to remove the DigiNotar trust.  I have also seen other unconfirmed reports that doing so doesn't fix the problem.  So the only advice I have for people for now is just don't, over on the Mac platform, just suspend your use of Safari until Apple responds.  I mean, I just can't figure out what Apple is doing, why they're alone in not having responded to this.  And we'll talk in a second about what "this" is.  I have some other stuff I want to do first so that we can give DigiNotar enough time.



There was a sort of a strange DNS hijack which occurred which a lot of people tweeted me about to make sure I knew about it.  The thing that was of concern was that people were saying that hundreds of websites had been defaced.  I actually got email through my regular GRC channel saying that UPS.com had apparently been defaced and TheRegister.co.uk had been defaced.  And so essentially UPS, Vodafone, TheRegister.co.uk, Acer.com, BetFair.com, NationalGeographic.com, and Telegraph.co.uk were defaced.  And that's all.



There were reports that there were hundreds of websites, but it turns out that a site that was tracking this had a history of other defacements and hacks, and the press didn't properly understand what this third-party website was showing.  And so they were saying, oh, this is hundreds, when in fact it was only that little handful.  But what they all have in common is that they all used the same domain registrar, which was NetNames.  Turkish attackers were able to hack into the DNS management panel of those NetName user accounts using an SQL injection, and they modified for those sites the DNS pointers.  They took wherever their registered DNS was, and then essentially overwrote them, pointing them to ns1. and ns2. and then a name I can't even pronounce.  I won't try.  It's y-u-m-u-r-t-a-k-a-b-u-g-u dotcom.



LEO:  Yumurtakabugu.



STEVE:  There you go.  And those then pointed people to this defaced page.  So The Register, I saw a relieved note that The Register posted saying, well, as far as we know, we haven't been hacked at all.  It's that our DNS got redirected.  So, I mean, for UPS to have theirs redirected was an embarrassment and a problem.



LEO:  No kidding.



STEVE:  But as soon as this got fixed, all that had to happen was that they just reset their DNS.  And after it was able to propagate out through the Internet, people would have been returned to the proper website.  So this wasn't a penetration of those sites.  It was actually a penetration of their registrar's that unfortunately had a security problem.  And we'll be hearing a lot more about security problems on servers here in a second.



I got my attention drawn, thanks to another Twitter posting, from Drew, who posts as @dochouse7, he turned me onto a very nice-looking Finnish IT security banking trojan detector.  It's at FITSec.com, FITSec.com/blog.  And at the moment it's the top blog entry there.  It's a very small and nice detector of the top five banking trojans:  Zeus, SpyEye, Carberp, Gozi, and Patcher.  And what I like about it is that it's small.  It's less than a meg.  It's 768K.  And it only takes about less than a minute to run because it's not rummaging through your hard drive.  It's just doing an in-memory check of the processes running in your system now to see whether the banking trojan, any of those five banking trojans might be present in your system, that is, present and running.  So it's very simple and quick to run, and I recommend it for Windows users.  So FITSec.com/blog, which I hadn't known about before.  So thank you, Drew.



And finally, this just sort of popped up on my radar.  This was the first time I had seen a US-CERT/NIST vulnerability with a CVE index number, which directly related to something that was arguably health threatening.  Reading from this CVE statement, it said, "An unspecified vulnerability in Medtronic Paradigm wireless insulin pump models 512, 522, 712, and 722..."



LEO:  What?  Geez, Louise.



STEVE:  I know.  Listen to this.  An unspecified vulnerability in this wireless insulin pump "allows remote attackers to modify the delivery of an insulin bolus dose and cause a denial of service," which then it says "(adverse human health outcome) via unspecified vectors involving wireless communications and knowledge of the device's serial number, as demonstrated by Jerome Radcliffe at the Black Hat USA conference in August.  Note:  The vendor [Medtronic] has disputed the severity of the issues, saying, 'We believe the risk of deliberate, malicious, or unauthorized manipulation of medical devices is extremely low.'"  And we want it to be, of course.  "'We strongly believe it would be very difficult for a third party to wirelessly tamper with your insulin pump.'"



LEO:  I hope so.



STEVE:  Yeah.  "'You would be able to detect tones on the insulin pump that weren't intentionally programmed and could intervene accordingly.'"



LEO:  You'd hear it being reprogrammed, in other words.



STEVE:  I don't really know what they mean.  But let's - I just - I thought as I was reading through anything to see if there was anything new that I ought to bring to people's attention, I thought, okay, wait a minute.  So now we have a hack of a wireless insulin delivery system by wireless attackers.  Now, the good news is they have to apparently know the device's serial number.



LEO:  And the range on these isn't great.  I mean, you couldn't sit outside the hospital and target these guys.



STEVE:  Or across the planet, yes.  So that's good news.  But still, we would like to have our insulin pump security a little higher than that.  Okay.  So from where we left off last week, which was that we knew from looking at the source code of Mozilla with Firefox and Google with Chrome that a bunch of certificates had been created without apparently the knowledge of this DigiNotar certificate authority in the Netherlands.  Now what we know from the report which has been issued by Fox IT, who is the independent auditing firm that DigiNotar hired to come in and analyze their breach, is that a number of DigiNotar's servers were compromised by intruders who obtained administrative rights through the interval between June 17th and July 22nd.



So first of all, that's six weeks, essentially, of time during which bad guy or guys had access to the ability to produce fraudulent certificates signed by an authority that all of our browsers at the time trusted completely.  So that's really bad.  DigiNotar detected this intrusion on July 19th and said nothing to no one.  Which is really the problem.  And I will get back to that in a minute because in the Mozilla blog, the Mozilla security blog, this is one of the reasons they have issued a second update to Firefox is they're not pulling any punches any longer with DigiNotar.  They did more of a surgical removal of trust, which I described in detail last week.  Now it's just gone.



They're not - they want nothing to do with these folks any longer because of the way DigiNotar handled the breach.  It's one thing to get breached.  It can happen.  But it's an entirely different thing if somebody who is trusted doesn't immediately belly up to the bar and take responsibility for what has happened.  And these guys stayed silent.  What we now know is that - are you sitting down?  534 fraudulent certificates were issued.  It was just a party.  And somewhere, if you scroll down the file I've given you, Leo, you'll find a CSV link there under GOVCERT.NL, you might want to open it up and find some choice ones while I continue to talk to our listeners.



LEO:  Okay.  Will do.



STEVE:  So you can mention those.  So, okay.  So the first known mention of any activity using these certificates was what we talked about last week, back in August, with a Google forum posting where an Iranian user reported being warned by the Google Chrome browser that there was something wrong with his certificate.  Well, that was because it was revoked.  And that was a certificate created on July 10th.  So there was a revocation of the certificate by DigiNotar, who began to realize that something was wrong, yet even then they said nothing.  Investigating further, Fox IT found that the offending certificate was revoked on August 29th.  But by that point it had affected, it had directly been used in 300,000 unique IP addresses of users, 99 percent of which were in Iran.



LEO:  But look at these:  AOL.com, Comodo.com, Google.com, LogMeIn.com, Microsoft.com, Mozilla.org, Skype.com, Thawte.com, I mean, these are all - and the number of certificates, I mean, Equifax Root CA, 40 certificates.



STEVE:  It's a Who's Who of the Internet.  And so these guys had weeks to synthesize fraudulent certificates, all signed by somebody we all trusted.  And in two weeks we're going to talk about, we're going to revisit the issue of this whole hierarchical certificate authority trust model because the problems that we're seeing are finally beginning to come to the attention of the industry.



LEO:  But this is my question.  I see all these certificates - WordPress.com, Twitter.com.  But so they've got a certificate.  That means they could pose as this site.



STEVE:  Correct.



LEO:  And how difficult - what would they do?  How would they do that man-in-the-middle attack?  How would they grab your Internet connection?



STEVE:  So all you need, the only requirement for leveraging these certificates is that you somehow are able to get into the traffic flow.



LEO:  I click a link, in other words.  Yes.



STEVE:  Well, you as the user, if you were in Iran, and you attempted to go over an SSL connection to Google, you are passing through Iranian-controlled ISPs.  That's where the certificate is installed.



LEO:  Ah.



STEVE:  So there's a proxy setup which sees that you are trying to get to Google.com, and it connects to your browser instead of just allowing the traffic to go through to Google.com.  Your browser then receives a certificate from apparently Google.com signed by DigiNotar.  And if, for example, you were running Certificate Patrol - that I am a fan of, and I've talked about now for many months.  If you were running Certificate Patrol, it would pop up at that point and say, wait a minute, I last saw Google's certificate signed by VeriSign.  Now I'm getting a certificate for Google signed by DigiNotar.  Oh, and VeriSign's certificate still had two years to go.  So it doesn't seem logical that they would have replaced their certificate.



Or actually Google signs their own.  Google is a certificate authority.  So it would say the last certificate was signed by Google.  Now we're getting a Google certificate, apparently a Google certificate signed by somebody else, by this random DigiNotar certificate authority.  So that would have alerted any really security-savvy user in Iran that something was going on here.  Instead what happened was, while that certificate was in use and being delivered to users in Iran, DigiNotar revoked that certificate.  The user's browser checked for revocation, saw that it was revoked.  That's what popped up a notice that caused this user to make a forum posting, and that's where the world began to first know that something was going on that was not copacetic.



Okay.  So we've now heard from the guy who did this.  He said...



LEO:  Well, the guy who takes credit for it.  We can't prove he did it.



STEVE:  Well, and it's confirmed.



LEO:  Oh, it is confirmed, okay.



STEVE:  Yes, because he used DigiNotar's private key to sign an executable, which he posted.



LEO:  Okay.  That proves it.



STEVE:  And only he - yes, exactly.  So he posted to Pastebin.  He said, and I'm going to share this because it's interesting, and there's lots of details in here.  And we get some sense into his psyche:



"Hi again.  I strike back again, huh?  I told all that I can do it again."



LEO:  The ego of these guys, god.



STEVE:  Oh, yeah.  "I told all in interviews that I still have accesses in Comodo resellers.  I told all I have access to most of CAs, you see that words now?  You know, I have access to four more so HIGH profile CAs, which I can issue certificates from them, too, which I will.  I won't name them.  I also had access to StartCom CA.  I hacked their server, too, with so sophisticated methods, he was lucky by being sitting in front of HSM for signing."  And what he's referring to is that the StartCom CTO did actually see a hack in process and was able to stop it.



And so this guy, going on, says, "I will name just one more which I still have access:  GlobalSign.  Let me use these accesses and CAs.  Later I'll talk about them, too.  I won't talk so many detail for now, just I wanted to let the world know that ANYTHING you do will have consequences.  ANYTHING your country did in past, you have to pay for it."



LEO:  Oh, boy.



STEVE:  "I was sure if I issue those certificates for myself from a company, company will be closed and will not be able to issue certs anymore.  Comodo was really, really lucky."  Actually, Comodo responded immediately to the nine that this guy made.  We were able to - the browsers were immediately updated to block those, and essentially this leak was plugged.  DigiNotar, of course, the breach was vastly larger and longer.  And they didn't take responsibility for it.  So they are, essentially, out of business.



So he says, "I thought if I issue certs from Dutch Gov. CA, they'll lose a lot of money.  But I remembered something, and I hacked DigiNotar without more thinking in anniversary of that mistake.  When Dutch government exchanged 8,000 Muslim for 30 Dutch soldiers and Animal Serbian soldiers killed 8,000 Muslims in same day, Dutch government have to pay for it.  Nothing is changed, just 16 years have been passed.  Dutch government's $13 million which paid for DigiNotar will have to go DIRECTLY into trash.  It's what I can do from KMs away," whatever that means.  "It's enough for Dutch government for now to understand that one Muslim soldier worth 10,000 Dutch government."



Okay.  And he says, "I'll talk technical details of hack later.  I don't have time now.  How I got access to six-layer network behind Internet servers of DigiNotar, how I found passwords, how I got system privilege in fully patched and up-to-date system, how I bypassed their nCipher Net Hardware Security, their hardware keys, their RSA Certificate Manager, their sixth-layer Internal "CERT NETWORK" which have no any connection to Internet, how I got full remote desktop connection when there was firewalls that blocked all ports except 80 and 443 and doesn't allow reverse or direct VNC connections, and more and more and more.



"After I explain, you'll understand how sophisticated attack it was.  It will be a good hacking course for hackers like Anonymous and LulzSec."  Then get a smiley face.  "There was so many zero-day bugs, methods and skill shows.  Have you ever heard of XUDA programming language which RSA Certificate Manager uses it?  No.  I heard of it in RSA Certificate Manager, and I learned programming in it in same night.  It is so unusual, like greater-than sign in all programming languages is "<", but in XUDA it is "{".  Anyway, I'll talk about DigiNotar later.



LEO:  You don't have to read the whole thing.  I mean, I get the gist of it.  What do you think of this guy's skill?



STEVE:  Well, he does show one thing, which is disturbing.  He says, "By the way, ask DigiNotar about this username/password combination."  So he says, "Username is production\administrator, which is the domain administrator of certificate network."  The password, he claims, is - it would be prodadmin, p-r-o-d-a-d-m-i-n, except that the "o" is changed to a zero, the "a" is changed to an at sign, and the "i" is changed to a one [pr0d@dm1n].  So if that was truly the password...



LEO:  That's pathetic.



STEVE:  ...that this certificate authority that the whole world was trusting was using to protect their domain, their network domain, then that's very sad.



LEO:  Yeah.  It's not a good password.



STEVE:  Not a good password.



LEO:  It's basically the login with the standard LEET replacements.



STEVE:  Exactly.  So GlobalSign, because they were named in this first posting, immediately suspended the issuance of any further certificates.  They posted in their blog, under what they called an "incident response," although at this point it's only a potential incidence response, they said:  "On September 5th, 2011, the individual/group previously confirmed to have hacked several Comodo resellers, claimed responsibility for the recent DigiNotar hack.  In his message posted on Pastebin," which is what I just read, "he also referred to having access to four further high-profile certificate authorities and named GlobalSign as one of the four.  GlobalSign takes this claim very seriously and is currently investigating.  As a responsible CA, we have decided to temporarily cease issuance of all certificates until the investigation is complete.  We will post updates as frequently as possible.  We apologize for any inconvenience."



And to their credit, they hired the same third party to come in, this Fox IT, since Fox IT now has internal confidential information about this attacker and how they were able to penetrate DigiNotar.  GlobalSign said, okay, we're willing to and want to leverage what you've learned.  Let us know if we actually have been hacked by this guy.  So I salute them.



LEO:  But again, does it strike you that this guy, I mean, these are a lot of boasts, typical kind of kid hacker boasts.



STEVE:  Yes.



LEO:  Does it strike you that - it strikes me just looking at it, this guy might actually know what he's talking about.



STEVE:  I think he does.  I think his English obviously is not his native language.



LEO:  You can't judge it on that.



STEVE:  No.  And if anyone's curious, I won't drag our listeners through his second posting, but he's made another posting, and we have the link in the show notes, where he gives additional details and essentially responds to, on a Q&A-like basis, to the other things which have been posted about him in the interim.  So my take is, the fact that he did prove that he has the private key that DigiNotar used to sign their own certificate - he signed an EXE using it, which he posted - means that he's the guy.  Or he got it from someone who is.  But very likely he's the guy.



LEO:  And there's a lot of bravado in this.  You know, at the end he says, "Never forget, I'm just 21.  You have to see much more from me."  And there's a lot of boasting and bravado.



STEVE:  Right.  But that's the nature, I mean, it's why...



LEO:  It's pretty common.  That's why people do this.



STEVE:  That's why we coined the term "script kiddie" was because, yeah, I mean, it's...



LEO:  Well, this guy's more than a script kiddie, I would guess.



STEVE:  Yeah, he is.  Well, depending upon what he - he obviously found a way in.  Remember that years ago, Leo, I stumbled on just the number of root CAs which were in our browsers.  And that's when I just said, okay, stop the presses.  We're in trouble.



LEO:  Right.  So there's a vulnerability, obviously.



STEVE:  Yeah.  This is trusting too many people.  And there's no way...



LEO:  And this guy sounds politically motivated.  I think that's a little scary, too.  I mean, he sounds like he might be a terrorist, in effect, a digital terrorist.  He wants to be called "unstoppable genius digital hacker."



STEVE:  I don't think that's even a good acronym.



LEO:  UGDH.



STEVE:  And then the question is, how did one of the certs that he made get put into service at a border for the Iranian network traffic?  Because that...



LEO:  And he addresses that.  He says that people say this is a governmental hack.  He says, no, it's just me, all by myself.  No governmental hack involved.



STEVE:  Yeah, except that somehow the certs did, that one cert got used.  And, I mean, so much so that 300,000 IPs of users, 99 percent of whom were in Iran, were having their traffic filtered through this bogus certificate.  So the pieces don't still add up, but there's more pieces.



LEO:  He gives a login and a password that he created on a Berkeley LMI.net server.  He says, "Ask them about that."  And he says, "I owned all their Linux boxes and got access to all their DNS servers.  I am really sharp, powerful, dangerous, and smart."  Really creepy, to be honest with you.



STEVE:  Yeah.  So Mozilla, following up, said, "Earlier this week we revoked our trust in the DigiNotar certificate authority from all Mozilla software."  Now, that's different from what we discussed last week, where, as I said, they made sort of a surgical, we're going to suspend trust in the following certificates, which we know have been compromised.  Now they're saying, get a new copy of Mozilla stuff, we're pulling the plug.  They said, "This is not a temporary suspension.  This is a complete removal from our trusted root program.  Complete revocation of trust is a decision we treat with careful consideration and employ as a last resort.  Three central issues informed our decision:



"One:  Failure to notify.  DigiNotar detected and revoked some of the fraudulent certificates six weeks ago without notifying Mozilla.  This is particularly troubling since some of the certificates were issued for our own addons.mozilla.org domain.



"Two:  The scope of the breach remains unknown.  While we were initially informed by Google that a fraudulent *.google.com certificate had been issued, DigiNotar eventually confirmed that more than 200 certificates had been issued against more than 20 different domains."  Of course now we know it's way more than that.  So, and this says, "We now know that the attackers also issued certificates from another of DigiNotar's intermediate certificates without proper logging.  It is therefore impossible for us to know how many fraudulent certificates exist, or which sites are targeted.



"Three:  The attack is not theoretical.  We have received multiple reports of these certificates being used in the wild.



"Mozilla has a strong history of working with CAs to address shared technical challenges, as well as responding to and containing breaches when they do arise.  In an incident earlier this year we worked with Comodo to block a set of mis-issued certificates that were detected, contained, and reported to us immediately.  In DigiNotar's case, by contrast, we have no confidence that the problem had been contained.  Furthermore, their failure to notify leaves us deeply concerned about our ability to protect our users from future breaches."



And then they talk about the subsidiary, which is Staat der Nederlanden Certificates, saying "DigiNotar issues certificates as part of the Dutch government's PKIoverheid," that is, the PKI government program.  "These certificates are issued from a different DigiNotar-controlled intermediate, and chain up to the Dutch government CA," which is this Staat der Nederlanden.  "The Dutch government's Computer Emergency Response Team (GovCERT) indicated that these certificates are issued independently of DigiNotar's other processes and that, in their assessment, these had not been compromised.  The Dutch government therefore requested that we exempt these certificates from the removal of trust, which we agreed to do in our initial security update earlier this week."  That is what I was talking about, about this surgical removal.  That was the 6.0.1 update to Firefox.



"The Dutch government has since audited DigiNotar's performance and rescinded this assessment.  We are now removing the exemption for these certificates, meaning that all DigiNotar certificates will be untrusted by Mozilla products.  We understand that other browser vendors are making similar changes."  Except Apple, apparently.  "We're also working with our Dutch localizers and the Bits of Freedom group in the Netherlands to contact individual site operators using affected certificates.  The integrity of the SSL system cannot be maintained in secrecy.  Incidents like this one demonstrate the need for active, immediate, and comprehensive communication between CAs and software vendors to keep our collective users safe online."  Signed by Johnathan Nightingale, Director of Firefox Engineering.



So this has been a significant event in the history of the way the Internet works because of the nature of this trust model which we have for SSL.  All over the world are authorities that we are trusting to issue and sign certificates which web servers hold in order to assert their identity to we users when we connect to them.  Our browsers then trust those signers of those web server certificates.  If that trust is broken, then our recourse is to stop trusting anything they do.



The problem, of course, is all the people who legitimately purchased DigiNotar certificates are no longer trusted by Mozilla, and increasingly by any other browsers because they bought their certificate from somebody who turned out to be untrustworthy and, sadly, who didn't accept responsibility for this immediately, which is what has really shaken people.  And basically this company is probably gone.  They're now out of business.



Microsoft's emergency update, their out-of-cycle update, did exactly the same thing.  This is advisory 2607712, where Microsoft said in their very sort of generic bland way, "Microsoft is continuing to investigate this issue.  Based on preliminary investigation, Microsoft is providing an update for all supported releases of Microsoft Windows that revokes the trust of the following DigiNotar root certificates by placing them into the Microsoft Untrusted Certificate Store."  And so this is the DigiNotar Root CA, DigiNotar Root CA G2, DigiNotar PKIoverheid CA and two others, basically those ones I just mentioned where the Dutch government said, okay, it looks like we can't keep trust even on those.  So I imagine that Windows users with the currently supported security platforms will have received that update, and that's something that you will want to apply.  And you read through a bunch of those.  There was a *.*.com.  So, I mean...



LEO:  Wow, that's everything.



STEVE:  That's pretty much everything - *.*.org, *.android.com, I mean, it's just - it's everybody, essentially, 500-plus certificates.  So the good news is anybody who has received the update from Microsoft and rebooted Windows, anybody who's updated to Firefox 6.0.2 on whatever platform and Chrome are all safe.  Inexplicably, Safari users are not, unless you're on Windows.  But over on the Mac, I just can't understand why we've heard nothing from Apple.  But that's the case.



LEO:  Do we know how many - I guess we couldn't possibly know how many attacks are based on this.



STEVE:  The EFF has this SSL Observatory which is used to track the use of certificates.  And that's what the Mozilla people have used in order to give them some handle on the use of certificates.  So that has been queried a lot in order to track the use of these certificates.  But remember, to use them you have to arrange to have them delivered to a user's browser, rather than the website, the legitimate website that the user's browser is trying to connect to.



So it is all about man-in-the-middle attacks.  It's about intercepting traffic.  So you have to be in a place where you can intercept traffic going in both directions.  And that's pretty much an ISP, either at the user's local level or at the nation-state border level.  That's how these certs end up being used.  I really think the guy went overboard to issue himself so many certificates.  One wonders how many...



LEO:  Really?  He went overboard?  What a shock.



STEVE:  One wonders how long this could have been, I mean, the only way this is valuable is if the CA that signed the fraudulent certificate continues to be trusted by the browsers.  So you really want to just sort of sneak in and do this without being detected, ideally.



LEO:  Well, it's pretty clear that he's self-aggrandizing, and he wants the attention.  The good news, probably, is that he's not doing this - maybe he is - to hack.  Now, it's also possible, and Eon pointed this out in the chatroom, that this whole Pastebin manifesto could be disinformation.  It could be a government in fact doing this, but wants people to think it's a kind of cracked up individual.



STEVE:  That's a very, very good point.  We don't know otherwise.



LEO:  We have no idea.



STEVE:  And we do know that somehow 300,000 Iranian users, or 300,000 IPs inside of Iran did have one of these certificates used to allow someone to essentially hack into all of their Google accounts, which is what this meant, because...



LEO:  Which the government might well have wanted to do, looking for dissidents.



STEVE:  Yeah.  And remember that the way Google maintains login is that there's a cookie which any attacker who had this certificate and a man-in-the-middle position on the traffic flow, they would have grabbed their Google login cookie and then been able to impersonate them across any Google services that that user was using.  So that's a very powerful hack.



LEO:  None of the people that he gives out passwords to have admitted that this, well, I guess, I mean, we know that, because he used a key, a private key, that he had access to this data.



STEVE:  Yeah.



LEO:  So we know that this is a legitimate Pastebin posting.  We just don't know if it's disinformation or misdirection or really...



STEVE:  Exactly.  We don't know who the individual is, if it is an individual.  But we know that whoever posted this has proven that they were inside of DigiNotar.



LEO:  Right.  And as Zephyr I think posted in our chatroom, the guy doesn't really matter.  What matters is what the hack was, how it happened, the failure to protect us, all of that, much more so than who did it.



STEVE:  Yeah.  And again, I got a tweet from someone who communicates with me through Twitter, Walid Damouny, who tweeted...



LEO:  We've talked about him before, yeah.



STEVE:  Yes.  He tweeted from Lebanon, saying, "The question on my mind is how trustworthy are other CAs.  Like DigiNotar, other CAs are not uncompromisable."  And my thought is, well, it's worse than that because, for example, in the United States we have now - we know that we have legislation, the whole Patriot Act stuff, where our government is able to issue orders for corporate entities to behave as the government wants them to and to prevent them from saying anything.  So who's to say that VeriSign, that Network Solutions, that GoDaddy, that other trusted certificate authorities haven't issued certificates on behalf of our government or other governments.



I mean, again, I've said, I've poked fun at the Hong Kong Post Office.  But the fundamental problem here is that our browsers are trusting a huge network of third parties.  And the nature of this architecture is every single one of them must be perfect in order for the system to work.  Well, that is a bad model.  So in two weeks we're going to revisit this.  We're going to look at the Certificate Authority Trust Model:  Past, Present, and Future because people are beginning to talk about alternative ways of setting things up.



LEO:  Yeah.  And in fact that's what this kid says, if this is a real kid, in his post is this breaks SSL.  This breaks the Internet.  And if I could do this, then you really have to - and he also, of course, asserts he's got a perfect system that would work, but he's not going to share it with us.  Okay.



STEVE:  Okay.  So in other news, I did want to update our listeners about my Off The Grid project.  Last week you'll remember that I mentioned I was going to be working on what I called an ultra-high-entropy pseudorandom number generator, the reason being that there are so many Latin Squares possible, I want this system which is online to be able to get to them all, potentially.  And if we only use a standard pseudorandom number generator, there just isn't enough bits of state in the pseudorandom number generator to allow it to access all of those Latin Squares.



So I did write a pseudorandom number generator in JavaScript, which is much faster than what I had before.  It has 1,536 bits of entropy.  And it has just successfully passed multiple batteries of independent testing by the denizens of the GRC newsgroup, over in the GRC.thinktank newsgroup.  They ran it through the Fermilab, the Diehard, and the Dieharder tests, and it passed with flying colors.  In some cases they were giving it multiple gigabytes of - that is, giving these tests multiple gigabytes of data generated by this pseudorandom number generator, and it's passed.  So we now have a very solid new high-entropy pseudorandom number generator which I'll be bringing online.  There is a new link underneath the block of links on the Off The Grid pages, if anyone's curious, to a page where that new ultra-high-entropy pseudorandom number generator is located.  And of course it's free for anyone to use who has an application for it.



LEO:  Not easy to say "ultra-high-entropy pseudorandom number generator."



STEVE:  No.  I've been practicing that.



LEO:  I think an acronym is called for here.



STEVE:  And I did also want to mention the cool little embedded ARM Cortex-M3 board, which was sold out last week when we talked.  They got 50 in.  They sold them out immediately.  They got 50 in again.  And let's see if there's - last time I refreshed the page there were four left from the second batch of 50.  Oh, now there's three at this point.  So if anyone listening live wants one, it's LPCTools.com, and it's the LPC1769 LPCXpresso board, and there's three left.  And I imagine they'll get some more when those are gone.  And I have to say I'm tickled that our listeners are hardware hackers to the degree that they are.  I'm sure we'll have some fun together playing with that, as soon as I'm able to spend some time over there.



LEO:  Pretty cool.  And by the way, they now say "As talked about on Steve Gibson's Security Now!, Episode 315."  So actually there is much deeper discussion of what you can do with these on 315.



STEVE:  When they were sold out, they said, "Well, we're sold out again, thanks to Steve Gibson.  So we'll have more in soon."



LEO:  We've really created a run on the Xpresso board.  That's great.



STEVE:  Yeah, well, it's very cool.  And for $29.95 it's just - it's a beautiful little thing with all the software being free.  I wanted to share a note I received on August 31st, so about a week and a half ago, from a Terry J. LeBlanc, who shared his SpinRite success.  He said, "Thanks, Steve.  I haven't worked with SpinRite in quite a few years.  Then I needed to run chkdsk on my Dell OptiPlex 755 over the weekend, and chkdsk would hang at 36 percent during Phase 5, checking the available free space.  No matter how long I let it run, chkdsk would not continue.  It would not finish.



"So I thought of SpinRite, accessed your website, bought it, and downloaded it; created the ISO image; burned a bootable CD.  I booted from the CD and got an opcode error.  Researching the error on the Internet, I found references to others with the OptiPlex 755 boxes, trying to run SpinRite, getting that error that indicated that changing the BIOS from RAID-AHCI to RAID-ATA would eliminate the opcode error.  So I changed the BIOS setting and restarted from the CD.



"Sure enough, SpinRite came right up with the familiar DOS interface I had not seen in years.  SpinRite ran successfully at Level 2.  I restarted the workstation, ran chkdsk successfully, and booted up normally.  Problem solved.  I'm using it right now.  SpinRite and the other tools from GRC have helped me so many times over the years.  I'm happy that you're still around and still making these tools available.  I'm happy to have SpinRite back in my toolbox.  Great job, folks.  Keep up the good work.  Thanks, Terry LeBlanc."



LEO:  That's nice.  So did you know that little bug, well, it has to run in ATAPI mode, not AHCI?  Is that...



STEVE:  Yeah, what's happened is over the years bugs have crawled into BIOSes, and they're not being found because there are not that many programs any longer like SpinRite that depend upon the BIOS.  So Greg has a whole toolkit of available things to try when people run across a problem.  And so he could have written to Greg, and Greg would have told him the same thing.  Or he Googled and found other people who had solved the problem.  So that was perfect.



LEO:  Apparently KD5AMB in our chatroom says that, oh, that fixes my problem, too.  Well, a lot of people with those Dell motherboards, that's for sure.  All right, Steverino.  Let's talk about - now, usually we say TCP IP, TCP/IP.  What is that?  What is TCP, Terminal Control Protocol?



STEVE:  Transmission Control Protocol.



LEO:  Transmission Control Protocol/Internet Protocol.  How does TCP relate to IP?  Why do we bundle them together like that?



STEVE:  Yeah, it's interesting.  I remember in the beginning sort of being curious about the same thing.  It's like, okay, well, what about UDP/IP and ICMP/IP?



LEO:  Right, right.



STEVE:  And I think that is really - that demonstrates what I was saying earlier, which is the importance of TCP.  TCP is a peer, really an equal peer with ICMP, UDP, and other protocols that are all riding on top of the IP protocol.  So it's called the TCP/IP stack traditionally.  And we talk about TCP/IP.  But in fact, I don't know why, but ICMP, UDP and the other guys just don't get equal billing.



But so the idea is that, as we originally talked about, the Internet exists as a confederation of interconnected routers where routers connect users and services and servers to each other through links that individual packets move around.  We talked a couple weeks ago about the UDP protocol because it's very simple.  Essentially the IP protocol thinks in terms of IP addresses, and then that carries other protocols sort of on top of it, UDP being one.



UDP adds the notion of ports.  So you can have a source port and a destination port, each which are 16 bits.  So that's where you get the 65535 ports because zero is not a valid port number.  So one through 65535 are the number of combinations of 16 bits.  So UDP just adds that to IP.  So you have a port number, a source port number, and a source IP; a destination port number and a destination IP; and then whatever payload the UDP packet wants to carry with it.



The problem with UDP is that that's all it is.  I mean, that's all it does.  So a sender who puts a packet onto the Internet, aimed at a destination IP, doesn't know what's going to happen.  As we've talked about, the genius of the architecture of the Internet was that routers made their best effort to forward packets in the direction of their destination, but that's all.  And if their queues got too full, if too many packets were, like, coming in from four different places and all trying to go out through one, you could imagine that there would be a congestion there.



Well, the routers have the right by agreement to just discard packets that they don't have time to send, or for whatever reason they choose not to.  The router might receive the packet and then crash.  Routers could go down.  Links could drop.  So all kinds of things could happen that could cause a packet not to arrive at its destination.  The other thing that can happen is that packets could arrive out of sequence, that is, because routers have, again, the right to choose which links they send packets from or forward them to, one link might be busy.  So the router says, oh, I've got another link here.  So it would send a second packet down a different link.  Well, that one might have a shorter path to its destination so that it arrives before one that was actually sent prior to it, which is to say that the order of the packets arriving is not guaranteed the way the Internet was designed.  So there's a problem with reliability and with out-of-orderness.



So the designers of the Internet said, okay, we've created this wacky kind of strange foundation, packet-switched networking.  But what happens when applications just want to send a file?  You want all the pieces of the file to arrive.  You need them to arrive somehow and be reassembled in the right order.  You don't want pieces of your file scrambled around.  So we need, on top of this admittedly, and even by design, sort of rickety foundation, we need to take responsibility for its ricketyness.



And so that's what they did with TCP.  And that's the brilliance of this is because that foundation was assumed to be error prone just by its nature.  Even when it's working perfectly, it might not deliver packets at all, or they might deliver them out of sequence.  So, I mean, that's part of the genius is that they then said, okay, now we have to design around those problems.  So we need to somehow impose order from chaos.



So they said, first of all, we're going to create an abstraction called a "connection."  Remember, traditionally, a connection was actual wires connected between here and there.  And you had your own pair of wires connected.  That's the way the phone system used to work is, if any of our listeners ever remember, like, pictures of the old phone-switching rooms, they were huge banks of relays that, as you dialed, stepped up and stepped over to take your pair of wires and connect them to another pair, which then stepped up and over to another pair, and so forth.  So you're actually connecting your wires to somebody else's wires.



The Internet broke that model with this concept of packets of data.  But for an application, for example for a web browser, a web browser doesn't - it's not its job to worry about the vagaries of packets.  It simply wants to view the Internet as a reliable connection between it and a server, where it's able to send something and know that it's going to get there.  And the receiver of a query, for example, sends a reply, and it knows it's going to get there.



So what we needed to build was we needed to build a layer on top of IP, with all of its known and designed-in problems, to essentially insulate anything running above from all of the problems of what goes on below.  So this notion of connecting endpoints was what was created, a pure intellectual abstraction.  The way this was done is that every byte which is sent is numbered.  They're counted.  And the sender numbers the bytes, and the recipient acknowledges the bytes that are received.  So if packets are lost along the way, the recipient won't acknowledge those.



What happens is the acknowledgment is the highest numbered packet received in order.  So if packets did come in out of order, then the recipient would hold that packet, assuming that the missing one might be arriving here any second to fill in a gap.  In which case the recipient would acknowledge everything it had received up to that point.  But if it just sits there waiting for a gap to be filled in, which isn't, it will not acknowledge.  And at some point the sender notices that it's only got acknowledgment up to a certain point.  So it thinks, hmm, okay, enough time has gone by, and I haven't heard from the other end, so I'm going to resend this again.



So one of the things that TCP does is it autonomously resends lost data in order to make up for that loss.  What that means is it has to buffer down sort of in its layer, it needs to buffer all outbound data until it has been acknowledged by the other end.  Which is to say that the application running above sends data down to TCP to be sent and then doesn't give it a second thought.  The application is able to trust that TCP will achieve its goals of guaranteeing that it gets sent.  The TCP protocol layer thereby receives the data and holds it until it has been affirmatively acknowledged by the other end, at which point it's able to let go of that data because it knows that it's been sent.  It will not have to resend it again.



So how does all this happen?  The first thing occurs when a connection initiator wants to connect to a connection receiver.  Typically, for example, in the model we're all familiar with, we're sitting in front of a computer using a web browser.  And so we want to initiate a connection to a server, and that server is listening for incoming TCP connections from anywhere in the world.  The Internet is global in the typical case.  Anyone, anywhere in the world, can initiate a connection to a server anywhere in the world, barring nation-state firewalls and Chinese firewalls and so forth.  In general it's just an open global network.



So the connection initiator sends what's called a synchronize packet, or it's also called a SYN, S-Y-N, the first three letters of synchronize.  The initiator sends a SYN packet to the connection recipient, the one who is open, waiting for incoming connections.  What that packet does is it contains a declaration of the endpoint.  If we're going to have a connection, we need to have endpoints.  So the endpoint is identified by the one endpoint, the initiating endpoint, by the source IP and source port; and the other endpoint is identified by the destination IP and destination port.  IPs are 32 bits; ports are 16.  So together that's 48 for each endpoint, and you merge those, and you get 96 bits.  So essentially it's the uniqueness of a local port and IP and a remote port and IP is the identity of a connection.  And it's one of the reasons we have ports on our computers is we might want to have multiple connections to the same location.



For example, my browser might want to open three or four different simultaneous connections to a single remote location, like to Google.com.  So we would always be connecting to Google's IP at Google's port for services, like port 80.  That would be constant.  But on our local end we would always be using our own IP, but we would then - we would disambiguate the traffic by using four different local ports.  So the ports being different allows this four-tuple, containing source port, source IP, remote port, remote IP, they all have to match up in order to identify a connection.  We use four different local ports to essentially create four different connection abstractions.



So this SYN packet is the connection initiating packet.  It contains the local port, the source port that we will be connecting from, and our IP, and inherently contains the remote port, which would be typically port 80 if we were connecting to a web server.  It might be 110 if we were connecting to a remote POP server, or 143 for a remote IMAP server, and so forth.  25 for remote SMTP server.  Those are the so-called well-known port numbers.  The idea being that a remote IP could have different services listening on different ports for incoming TCP connections.  And each of those ports implies a different service.  SMTP, listening on port 80, implies the use of SMTP protocol over the TCP connection, where the SMTP protocol is layered on top of TCP.



So the SYN packet, the most important thing the SYN packet has, in addition to declaring this is the source port and source IP and destination port and destination IP, is a sequence number.  Thus the word "sequence" and SYN, which is to say it declares to the recipient, I'm going to start numbering all of the bytes that I'm going to be sending you from the following count.  And that's a 32-bit count.  So that's - we know that 32 bits is 4 gigs.  So the sender says just make a note on the receiving end that as I start sending you things, I'm going to be counting the bytes I'm sending you, starting from this number.



So the server receives the SYN.  And if there's something listening on that port number, like on port 80, and it's willing to accept a connection and ready to do so, it will reply with a SYN ACK.  This is a synchronize and acknowledgment.  It's actually, it's like a two-part packet.  The SYN part is its own numbering scheme, that is, it is telling the connection originator that, okay, I've received your SYN, and I've made note of how you're going to be numbering your bytes.  I'm assuming you're going to want something back from me because a TCP connection, although it doesn't have to be, it is inherently a full duplex connection, meaning that each end is able to, at any time, at will, send data to the other end.



The connection can be brief.  It could be connected.  Something is sent, and it could be dropped.  Something can be sent and received and then dropped.  Or it can be persistent, and it can last as long as both ends agree that they have a connection because - and this is sort of a cool thing about TCP.  The reason I say this is an abstraction of a connection is it's just their agreement that creates this.  It's a virtual connection.  The endpoints are connected only if and because they agree, they both agree that they are.



So the server side sends back this SYN ACK packet.  The SYN portion, as I said, is its corresponding starting numbering of the bytes, of the data bytes it's going to be sending, and the ACK is its acknowledgment of the receipt of the initiator's SYN.  Upon receiving the SYN ACK packet, the connection initiator sends its final packet, acknowledging the receipt of the server's SYN side.  So really there's a SYN and an ACK, a declaration and an acknowledgment, a SYN and an ACK, which passes in between both endpoints in each direction.  And because they're overlapped, we only need three packets to make that happen.  And so that's called the TCP three-way handshake because the endpoints are establishing each other and the numbering for the bytes which follow.



Well, several important things are also going on because we know how crazy the Internet is with routers and sort of this very ad hoc means of routing packets.  It's conceivable, with the way routers are set up, that traffic flowing from endpoint A to endpoint B will flow over a given path, jumping between routers to get there, and that the reverse traffic coming from endpoint B back to endpoint A, nothing says it has to go the same route.  It could, for whatever reason, there might be a faster link in a different direction or who knows what.  But nothing guarantees that, like, data in each direction is going to be passing each other over the same link.  They could easily be going on different routes.  But it also says that there may not be a route back.  There may not be any way for traffic to get back, just because of something being broken.



So the beauty of this TCP three-way handshake is that it validates to each endpoint that the other is able to receive its traffic.  When the sender sends its SYN packet, the initiator, the connection initiator sends its SYN packet and receives a SYN ACK from the server, it knows the server got its request to open a connection, and it knows that it's able to receive traffic back from the server.  Similarly, when the final ACK packet is sent by the connection initiator, the server knows - of course it knows that it originally got the SYN packet from the connection requestor.  But it sent off a SYN ACK.  It doesn't know, unless it gets that final ACK of its SYN back, that the connection initiator was able to receive its traffic.  So getting that final acknowledgment back does verify that.



So now each endpoint, they've found each other; they've verified that they're able to exchange traffic back and forth; and, importantly, they've each declared the starting point for the numbering of their bytes.  Now, why don't they just use zero, you might ask?  Like, okay, what's with this 32-bit counter?  Why not just always start numbering from zero?  The reason is, again, the craziness of the Internet.  As I mentioned, connections might be persistent or might be short-lived.  And we might be connecting between the same ports, that is, the same two endpoints, over and over and over.  It might be that we grab a local port, we connect to a remote web server, make a query, receive a response, drop our connection.  But then we decide, oh, we've got something else we want to ask it.  So we grab the same endpoint and connect again and so forth.



The problem is, if we always started numbering our data from zero, it's possible that data from a previous connection could be confused with data from this connection.  That is, if we always started at zero, because the Internet is as ad hoc and prone to crazy behavior as it is, for example, say that a packet was delayed.  And so, because of the delay, the receiver that was waiting for the packet got tired of waiting and sent out the data again.  So we know that there can be duplication of data on the Internet in addition to data being lost.  So what could conceivably happen is a short-lived connection is brought up and then torn down and then brought up again.  Yet, due to the vagaries of packet delay, it's conceivable that old traffic from the prior connection could be confused with new traffic from a reconnection.



So, smart as these guys were who originally designed this, they recognized that problem.  And they said, okay, let's agree that we're going to use a 32-bit count.  And they just used that so that they had plenty of margin, especially compared to speeds before.  And the idea is that, as we send data to the other side, we're going to be advancing this counter with the number of bytes sent in each packet so that the sequence number continues to advance in an upward-pointing direction.  And if it hits the 32-bit limit, it'll just be allowed to wrap around back to zero in the same way that binary numbers wrap around when they get maxed out.  And that's fine.



What we want to make sure, though, is that the number is big enough, that is, there are so many combinations, binary combinations of this sequentially numbered byte ordering that it's just inconceivable that traffic would be still floating around the Internet long enough that it could ever be confused with earlier traffic that just hadn't died during a connection.  And so they said, okay, let's just make it four bytes.  We'll make it 32 bits of traffic.  That's four billion bytes of traffic.  Certainly that'll give us enough headroom.  And it turns out that it did.  That has not turned out to be a problem.



And so after the SYN, and SYN ACK, and the ACK packets, then this full duplex connection is established, and either end is able to send the other data over this virtual connection whenever it wants to.  It looks at the amount of data it's sending and advances its sequence number that it's sending in that packet to point to the last, the number of the last byte that it is sending, and it puts that packet on the Internet, and routers send it towards its destination.  And it then takes another packet and adds data to that, advances that same sequence number again, up by the amount of data that it has put into this next packet, so that the last byte of the packet is the number which it is declaring as part of this packet, and sends it off.



The recipient of that data has the job of acknowledging the, as I said earlier, the last-in-order byte that it has reassembled of that sender's data.  So if packets are lost, it has no way of knowing that they're lost.  The recipient doesn't know that more data is being sent because there's never a declaration ahead of time at the TCP level of how much data is going to be sent.  It simply receives it as it comes in.  And it looks at how much data is in the packet and then moves this numbering forward as far as the amount of data in the packet would indicate, and acknowledges back to the sender that it has received up to this much data correctly.  So if it gets a packet out of order, it waits to see if the other one is going to come in.



Whether or not it does, because it's TCP, it knows that if the sender does not receive an affirmative acknowledgment within a certain expiring length of time, the sender has buffered that data and is able to send it again.  And it will send it again and again and again, trying over and over and over, until that data finally gets through, and the recipient of that data has acknowledged the last byte which has been sent.



All of these TCP packets contain both a synchronized field and an acknowledgment field.  And the beauty of that is that, this being a full duplex connection, they are able to simultaneously send data in each direction.  And the acknowledgment field of the packets going in each direction is always acknowledging how much in-order data has been received up to that point, while the SYN field is always setting the expected byte numbering of the data in the packet.



So this flow in each direction is having a dual role.  It is able to send new data to the other side, numbering that as expected.  And the same packet contains an acknowledgment field of any data that's been received.  And so that's in a nutshell the way endpoints identify themselves; how ports are "open," which is the term we use for one that is accepting TCP connections; how connections are established and how data is numbered and how duplicate data is ignored; how lost data is retransmitted if that occurs in order to guarantee the receipt; and ultimately how each end is able to reassemble a coherent block of data that the sender has sent.  And this is all the responsibility of the TCP protocol.  The application, the web browser, the email client, the web server, the email server, whatever the application level is, it knows it's able to trust TCP to get the job done.



Next week, or actually in a few weeks from now when we pick this up again, because we're going to talk a little bit in two weeks, after next week's Q&A, we're going to talk about certificate authorities, as we said, looking again at the whole CA structure.  When we come back to TCP, which we will in our next available slot, I'm going to talk about the hacks which have been created as a consequence of this.  We've talked about denial of service, SYN floods, and the problems those create.  And then we'll look at what was done in order to make this all go faster because, as the Internet has gotten bigger in terms of its diameter, the number of router hops, bandwidth has been strained, and it's necessary to come up with ways of allowing the sender to know how much data that has not yet been acknowledged it's able to send ahead.  And that allows it to essentially not have to wait for everything it sends to get acknowledged.  So there's lots more cool stuff to talk about in the way the TCP protocol operates.  And we'll pick up where we left off.



LEO:  It's very elegant, very straightforward, and it gets the job done, as we can see.



STEVE:  It works.  It works.



LEO:  It works, yeah.



STEVE:  We're using it all the time.



LEO:  Yeah.  Well, Steve, this is fun.  So next week we do Q&A, which means if you want to ask a question of Steve, you can go to GRC.com/feedback, and we'll pick 10 good questions.  Steve will answer those.  You know, we've been doing, Steve's been doing all along with Security Now! these go-deep explanations of how things work - how a computer works, how the Internet works.  So if you like this, and you want to know more, I mean, you've got 316 other episodes to listen to.  And if you look at the name, it'll be very obvious where the ones where we explain, where he - I say "we" - "he" explains how stuff works.  So the chatroom gives you a standing ovation, by the way, Steve.



STEVE:  Oh, no kidding.



LEO:  They enjoyed this quite a bit, yeah.



STEVE:  Neat.



LEO:  So you'll find all the shows at GRC.com, along with SpinRite, Steve's bread and butter and the world's best hard drive maintenance utility, his free stuff like Off The Grid and the Perfect Paper Passwords, all the things that Steve does such a great job with.  Do read the Password Haystacks article.  That's a great one that will change the way you do passwords.  And of course lots of free software like Wizmo and - I guess nobody really needs Shoot The Messenger or DCOMbobulator anymore, Unplug n' Pray...



STEVE:  Not so much.  They're still there for old-timers.



LEO:  Trouble In Paradise.  If anybody has a ZIP disk, it's clicking - hey, it's possible.  Somebody finds some ZIP disks in the attic and says I wonder what's on there, and gets the Click of Death?  You know, things like that.



STEVE:  Yup.



LEO:  So GRC.com.  He also puts 16KB versions there for people who don't have a lot of bandwidth and full transcripts, too, if you like to read along, which is frankly a great way to follow along what Steve's saying.  I know I've talked to many people who actually use Security Now! in the classroom.  Lot of college courses, Security Now! is required listening.  So the transcripts are useful for those folks, as well.  GRC.com.  Of course we have it all, too, at TWiT.tv.



Steve, thanks so much for joining us, and we'll be back.  We flipped days again for Paul Thurrott.  Next week we will be back on our Wednesday, regular Wednesday schedule.  That's 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1800 UTC at live - I keep saying "live.twit.tv."  Don't need that anymore.  Just our new site now, it's right there on the front page, TWiT.tv.  Thanks, Steve.  We'll see you next time...



STEVE:  Thanks, Leo.



LEO:  ...on Security Now!.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#318

DATE:		September 15, 2011

TITLE:		Listener Feedback #126

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-318.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 318, recorded September 14, 2011:  Your questions, Steve's answers, #126.



It's time for Security Now!, the show that covers protecting you and your loved ones online, privacy, security and all that.  And who better to do Security Now! than my buddy right here, Mr. Steve Gibson of GRC.com...



STEVE GIBSON:  Yay.



LEO:  ...the Gibson Research Corporation.  Yay.  And the crowd goes wild.  Steve is the creator of so many useful programs to protect you online.  And now we've got 318 Security Now! shows that you can study up on, which is great.  Welcome, Steve.



STEVE:  Hey, Leo.



LEO:  Q&A today.



STEVE:  So we have a Q&A.  Not much, happily not much news.  Boy, we've been buried in security news the last few weeks.  So very light on the news this week, but we've got some on the long side questions from listeners, but that I felt were important.  So you'll be doing some reading today, Leo.  And but I think in all it will balance.  And I have a very exciting announcement of a new science fiction author discovery to share with our listeners.  So lots of good stuff, and a super-short SpinRite mention, just to keep that on everybody's radar.



LEO:  Have you been following, have you been watching the Microsoft Build Conference, the new Windows 8?  I guess you of all people probably care the least about...



STEVE:  Leo, from everything I've seen, just shoot me now.  I mean, I look over, and my Windows 7 that I built just to run Skype on is now telling me that XP has 936 days remaining.  And I just think, good, thank god, or thank Microsoft.  Because the next thing I'm going to build, I'm going to update my processors to i7s, but I'm going to use 64-bit XP.  I cannot stand Windows 7.  I've tried to get used to it.  It's on a few machines.  It just - every time they do another iteration, they move it further away from something that just makes sense.  And Elaine had to switch to Windows 7, oh, my goodness, you wouldn't believe how, I mean, I could relate to everything she was saying about how she just hated it.  And so I'm so glad I've got three years left of XP support.  And then I look at this Windows 8, and it's like they've just gone off the deep end.  And I meant to ask you, what does Paul think about this?



LEO:  Well, I don't know.  We're going to do a whole show about it.  He's at the Build Conference, which is where they're announcing this.  I've downloaded it, and I have it installed and running in a virtual machine on my computer.  But I think that this early version is a little buggy, this evaluation copy.



STEVE:  Oh, you think?  We're going to have a field day.



LEO:  Yeah.  See, you and I are different kind of ends of the spectrum.  I like the new thing, and you hate the new thing.



STEVE:  Well, I love iPads.  I mean, for what it is, iOS is just fantastic.  But the idea of trying to pad-ize the desktop that I'm going to be sitting in front of and want to get serious work done with, I just - no.  That's just wrong.  I mean, I hated XP.  They just put sugar-coating on top of Windows 2000.  But boy, what they did with Win7, I just - it just fights me.  It's like...



LEO:  Well, you probably won't like 8 because I think, as far as I can tell, it's Win7 with a tablet shell on top of it, which is probably from your point of view the worst of all things.  But we should point out the reason that you don't like the new thing is not so much because it's the new thing, in general, it's because you want something tried, true, tested, bug-fixed, and secure; right?



STEVE:  Well, yes, there's a security aspect to it.  But, for example, I run with an Explorer window open, showing me a tree view of my system.  I mean, and I can instantly jump around.  I've got everything organized.  I know where everything is.  The moment I start using Win7, I just immediately come to, okay, wait a minute, how do I get that?  And it's gone.  They took it away because they said, oh, people don't want that.  Well, Steve Gibson does.



LEO:  And who cares what Steve Gibson...



STEVE:  They didn't ask me.



LEO:  Oh, Steve.  Thank goodness.



STEVE:  The good news is that XP has three years to go, and I'll be with it to the dying moment.



LEO:  By then they'll have figured out Windows 7, and you'll be set. 



STEVE:  Yeah.



LEO:  You skipped Vista.  You're going to skip Vista, probably.



STEVE:  Probably?  Oh, my god.  Waiting was the best thing that ever happened.  I can just completely jump over that nightmare.  Yeah.



LEO:  I wish - it would be kind of nice if they would, somebody would just kind of make a version that would be kind of like, for those of you who don't want updates, upgrades, improvements, this is the reference version of the operating system.  You know, like DOS.  DOS hasn't changed in 20 years.  Be nice to have a version of Windows that just, this is it, we're going to leave it like this for those who want it.  I guess that'll never happen.



STEVE:  Well, and you could almost do that because, I mean, the fact is, by the time that, like, three years from now XP will have settled down, and they will have stopped messing with it.  Well, they have stopped messing with it.  And they will have, however, been dealing with any backfilling, any old security problems because it'll still be under security support.  And at that point all of the new stuff will be what's under attack.  It's very much like people using Windows 98 2nd Edition, 98 SE.  Boy, I mean, nothing infects that now because it's of a different entire DNA strain.



So it may very well be possible to just stay with XP.  The problem is that developers will be developing for lord knows what we'll have then, Windows 26, and it won't even - none of their software will run on XP.  And that's going to be a problem.  People who want to stay way far behind with something that just works, that gets the job done, we won't be able to.  We'll be forced forward because applications will be forcing, or new peripherals or whatever.  I remember, for example, like remember USB was sort of forcing us forward because only the later Windows platforms 10 years ago supported USB.  And if you wanted to have peripherals that were USB, you kind of had to move forward.  So it's inevitable.  But still, some of us will just be bringing up the rear, and that'll be me.



LEO:  Proudly.



STEVE:  Happily



LEO:  Proudly bringing up the rear, Mr. Steve Gibson, ladies and gentlemen.



STEVE:  Absolutely.  Unabashedly, without apology.  I know what's on my hard drive.



LEO:  All right, Steve.



STEVE:  Okay.  So I was pounding for several weeks on Apple, the fact that Apple had not taken the DigiNotar trust out of their root for Safari on the Mac, and anything else that was using trusted certificates on the Mac.  And it was later that day that we recorded Security Now!, last Thursday because we swapped with Windows Weekly last week, that the announcement was made and the update was made available.  It's 188K, so not very big.  And it did exactly the right thing.  It completely ripped all trust of DigiNotar out of the Mac.



I wanted to see it myself, to prove it to myself, so I went to DigiNotar's site.  And I drilled down, followed a couple links, basically pretended to want to be buying an SSL certificate.  That of course is the last thing I wanted to be buying from those guys, I would say those clowns.  But it did allow me to get to an SSL page because of course they were trying to bring up their own security in order to give me an HTTPS connection to their server.  What I found was two things.  One was that the certificate itself had expired, interestingly, a few days before.  And I thought, well, okay, that's odd.



But then in viewing the certificate details there was a chain of trust back up to the Certificate Authority.  And I forgot to say that, before I applied this patch, I used Safari to do this.  And I saw that I couldn't just bring up the SSL page because the certificate was expired.  But if I looked at the chain of trust, the root CA, the DigiNotar root was still trusted.  So then I thought, okay.  So that's established.  Then I applied Apple's patch and did the same thing again.  And sure enough, as we would hope, not only was the certificate itself expired, but when I then examined the chain of trust, the root was no longer trusted by Safari.  So that was my way of verifying that Apple did the right thing.



I tweeted the link that I found that afternoon because it's a way of allowing people to verify that their Macs and their Safaris no longer trust DigiNotar.  Unfortunately, this was a little convoluted because the certificate itself was expired, and you had to look at the root to see whether that was not trusted.  And it's hard to convey that over a 140-character Twitter tweet.  So some people were confused.  People were trying iOS or their iOS-based devices, their iPad or their iPhone, which have not been updated.  A good friend of mine commented that as far as he understands, iOS cannot currently be incrementally altered, that is, all the updates that we've had of iOS have been "Here's your new iOS."  It's, what, it's a 500MB blob that you're forced to download.  That'll be one of the good things they're doing with iOS 5 is they'll finally be giving us incremental updates.



So it may just be that iOS is not going to be changed because Apple already plans to change it shortly, and they don't want to be forcing another half a gig download just to remove a single certificate from the iOS store.  So I didn't even think yet to try my iPad, but I haven't seen any updates that would have changed iOS.  So as far as I know, it still trusts DigiNotar stuff.  The good news is Mac and Safari don't after last Thursday's small 188K update.



And there has been confirmation from GlobalSign that they were breached.  We'll remember that the hacker known as Comodo Hacker, whose lengthy Pastebin online post I read to our listeners last week, he was claiming to be in four other major Certificate Authorities, and he named GlobalSign as one.  Upon hearing themselves named, they suspended certificate issuance and hired the same people that DigiNotar hired.  However, GlobalSign has been a model of proper behavior for this sort of problem, well, saving the fact that they were apparently breached.



They've confirmed that one of their web servers, the web server that hosts its website, was breached.  And they said, "As an additional precaution, we continue to monitor all activity to all services closely.  The investigation and high threat approach to returning services to normal continues.  All forensics are being shared with the authorities and other CAs to assist with their investigations into other potentially related attacks."  GlobalSign said that "system components" were taken offline, but started to come back online with the help of Cyber Defense Institute Japan on Monday.



So they haven't said, which means, because I think they are acting responsibly, they do not know of or suspect that any certificates were issued behind their back.  It looks like some sort of web server breach did occur, and they're sharing details with other CAs to help them spot the same sort of problem.  But it doesn't look like we have a problem with GlobalSign, certainly not like we had with DigiNotar, but not even like we had with Comodo before.  Remember Comodo had nine certs issued without their knowledge due to that hack, and the serial numbers of those certs were then blacklisted by the various browsers quickly.  But it was felt that Comodo did the right thing in notifying everybody quickly.



Two things in our Miscellany category.  I spent about an hour Monday morning being interviewed by KABC TV.



LEO:  Really.



STEVE:  Yeah, their consumer guy, Ric Romero, was doing a story on Password Haystacks.



LEO:  Hey, that's great.



STEVE:  Really cool.



LEO:  Kind of surprises me, to be honest.



STEVE:  Yeah.  Well, I think it's because, if understood correctly, and I hope I was able to make it clear to a standard TV-watching audience, remember that the conceptual realization I had when I was actually working on something different, I was working on an interactive tool to help people design secure passcodes, that's when it hit me that what really mattered was length over complexity.  As long as the password you had wouldn't be found in a dictionary, and that meant you forced someone who really wanted to crack your account to do a brute-force attack, then what you want is the largest possible haystack for them to be searching, which means a longer passcode, or password, passphrase, whatever you want to call it.  So Time magazine 

had a column a couple weeks before which mentioned coming to GRC and the Haystacks.  And the producer, Alan Gitterman of KABC here in L.A., he read the page, found it over on GRC, thought, wow, we should tell our viewers.



LEO:  Wow.  That's just amazing.



STEVE:  So in the next day or two, they're not sure when it's going to air, I will tweet when it does, for those who have a more real-time connection to news from me.  But certainly the week after there will be a link to it on the KABC website for anybody who is interested.  So that was cool.  And it did force me to clean.  If you notice, you can sort of see, like, back there, there used to be a visible pile of papers on the desk.



LEO:  I know.  You got rid of the microphone and everything.



STEVE:  Yeah, I did some housecleaning.  However...



LEO:  It's great.  It's very pretty.  Did they do it via Skype?



STEVE:  No, they were here.



LEO:  Oh, they were there.  That's cool.



STEVE:  And the cameraman is a listener.



LEO:  Awesome.  Of course he is.



STEVE:  And so it was very cool when Ric and the cameraman were walking up to the front door.  He said - because I had already met Ric downstairs, and he was waiting for the camera to show up, who rolled up in the big bright blue KABC Eyewitness News van with the antenna sticking out the top and everything.  And so when Ric and he were approaching, he said, "Steve, our cameraman is a regular listener to Security Now!.  He knows all about you."  So that was really - that was cool, and it made it also all very comfortable and sort of - Ric I think knew that, okay, this isn't, I mean, he didn't know where I'd come from.



LEO:  Yeah, Ric's kind of a legend among Farkistas.  But I'm...



STEVE:  Well, Ric Romero, I certainly recognized the name immediately when the producer...



LEO:  He did a - but Fark gave him a really hard time because in 2005 he did a report on the "new phenomenon of blogging."



STEVE:  Oh.  Well, new for his viewers.



LEO:  But new for him.  But he's made up for it because I'll tell you what, Fark doesn't even know about Password Haystacks, probably.  So that's good.  He's getting ahead of the curve now.



STEVE:  So my cleaning efforts over the weekend in preparation for Monday morning's visit were slowed down.



LEO:  Uh-oh.



STEVE:  Because I could not stop reading.  I sat on the Starbucks patio, I said, okay, I'm going to read till 9:00 a.m. on Sunday morning.  Then I said, okay, I'll read till 10:00.  And then that deadline passed.  And I said, okay, I'll read till 11:00.  Then I'll read till 12:00.  Then I'll read till 1:00.  And I ended up finishing the book.



LEO:  Isn't it exciting, you've discovered the immortal words of Nathaniel Hawthorne finally.  No?  Not Nathaniel Hawthorne?



STEVE:  Not Nathaniel Hawthorne.  Someone mentioned to me a new author and a series that sounded interesting.  And so I tracked it down, put it into Amazon.  And Amazon had the paperbacks, but nothing on Audible, nothing on - well, Amazon wouldn't tell me about Audible.  But nothing on...



LEO:  No, actually they would because they own Audible.



STEVE:  Oh, okay.



LEO:  So if there's an audio book, they'll often say we've got the audio version.



STEVE:  Now I don't remember whether there was.  But it certainly wasn't Kindle, which is what I was looking for.  So I thought, well, okay, I'll just get the first one of the series - of 12, Leo.  So I'm, like, oh, could this be good.



LEO:  Damn you, Steve Gibson.



STEVE:  So the first book arrived in dead tree form, pulp.  And I start reading it late last week.  And actually I was having dinner with Jenny, and I left it by mistake.  I was distracted and left, I walked away from the restaurant where I had been there reading and waiting for her and a friend of hers to show up.



LEO:  Oh, dear.



STEVE:  So I got to the car, ran back to the restaurant, and in the meantime they had seen that I had left it and had given it to Jenny, who had driven off in her own direction.  So I sent email because I was all set up to spend the morning on the patio reading some more because it was already seeming really good.  So I sent her email saying, uh, I need that book desperately because, even if I bought another copy, I couldn't get it till Saturday.  So anyway, I Googled the name "Honor Harrington eBook."  And it turns out it is in electronic format.  And moreover, the first two are free.  And it's in every format known to man - EPUB, MOBI, PDF, HTML, I mean, and it's - so Baen is the publisher.  This first book, Honor Harrington, it's titled "On Basilisk Station," was written in '93, I think it is.  Maybe '92.



LEO:  Before people start looking for the author Honor Harrington, you're talking about she's the heroine of David Weber's books.



STEVE:  She is the protagonist, yes, of David Weber.  Now, I wanted to give credit for whomever it was that turned me on to this.  I mean, because Leo, oh, my god.  Now, I have to characterize it a little bit because it's different than the other stuff, but fabulous.  So this morning I put Honor Harrington into my Eudora full-everything search.  And up started popping references in the Security Now! email folder...



LEO:  They've been telling you about this all along, Steve.



STEVE:  April '07, Serge Beaumont.  June '07, Steven Thompson.  November '09, Matt Horton.  Something must have happened in December of 2010 because John Weatherby, Gary Berg, Javier Gordo, and Denis Sherman, oh, and Jaime, all mentioned it, one using the subject "Looking for a (very) large sci-fi story?"  Then...



LEO:  Now, wait a minute.  This can't be it.  No, that's not it.



STEVE:  Last month Mike Lopez, Tim Lahey, John Whitlock, G. Wade Johnson, Neil Laubenthal, all mentioned this series, and one saying "The ONLY sci-fi recommendations you'll ever need."  So, and then Robert this month, earlier, said "Good sci-fi series in the same vein as Lost Fleet."  Okay, so, okay.  The guy is a fantastic writer.  And I'm seeing words like "perspicacity" or "perspicacious" or words I haven't seen since my college skills review class in high school.  Beautifully put together sentences.  It's hard sci-fi.  It is absolutely the most unsexist series I've ever read.  Honor Harrington is a young woman who does a great job in the first book.  I couldn't put it down because I just wanted to see whether the reviews, which were all glowing, could be true.  And they are.



LEO:  Now, this is neat because it looks like "On Basilisk Station," which is the first, right, that you can read online.  You don't even have to download it.  The text is online.



STEVE:  Yes.  Everything has been converted to Audible.  So for those who are Audible listeners...



LEO:  Now I'm happy.



STEVE:  ...all of this is on Audible.  The books get bigger toward the end.  I was looking at their sizes in various - after reading the first one, I bought - I downloaded the second one for free.  And then I bought - they sell them there for $5.  However, you can also poke around the 'Net and find them, with authorization, free.  Because at various points some of the hardbacks were published with a CD containing the full text of the prior books.  So they're not locked up.  None of this is password or, what am I trying to say, protected.



LEO:  DRM, yeah.



STEVE:  DRM'd, exactly.  Anyway, so now, they're heavy on character development and sort of the political interplay and the interplay of the characters.  So it's much less torpedoes firing and...



LEO:  Good.  I never liked that much.



STEVE:  Right.  And what this brought me back in mind of was, back when I had a whole company of people, like 27 employees, they did something very cool for me one birthday, which is I received the writers kit for "Star Trek: Next Generation."  One of them pretended to be my agent.  And acting as my agent, she contacted Paramount and got the writers kit.



And the last thing I was going to do was, I mean, it would have been fun to write an episode of Star Trek:  Next Generation.  But I did sit down and read what writers were given.  And one thing that stuck in my mind was it made it very clear, it said, yes, we have photon torpedoes and tractor beams and beaming and a warp core, you know, you never want to let the - you may have to eject it if things get bad and so forth.  But it said "Star Trek:  Next Generation" is not about those things.  The stories are about people.  They're about...



LEO:  Shocking.



STEVE:  ...human drama set in that, placed in that setting.  So writers, would-be writers, we caution you, we're not going to give your scripts a chance to hit the screen if you get yourself all wound up in dilithium crystal breakdown.  We just, you know, Scotty has a problem with dilithium crystals every so often, and they may need to be recrystallized.  We don't want to know what that means.  We're more concerned about whether Scotty's going to pull this off, and Kirk is going to sleep with a green alien.  That's more interesting to us.



So this is like that.  I am rapt with this author, with his style of writing, with his development.  He's already setting up a fantastic scenario in Book No. 2.  Now I'm not in a hurry because, if I am, nothing else will be getting done here at GRC, and I want to get the Off The Grid stuff finished.  There's been a little delay in that because I just had to read the first book.



LEO:  Well, at least you're honest, now.



STEVE:  Now I don't want to finish them because I don't want them to be over with.  And I'm feeling guilty because the only reason I allowed myself to read the first one was I thought it was only available in paperback, and I've been reserving everything that's available electronically for my stair climber to force me to work out.  So now, if I refuse to allow myself to read these unless I'm on the stair climber, I'm going to be in fantastic physical shape.



So anyway, the good news is they are around on the 'Net.  If you put in "Honor Harrington eBook" - there's also Wikipedia entries, of course, with links to CDs.  And you can find the text, if you don't want to pay.  I happily paid $5 for the other nine of them.  And the author is still at it.  Wikipedia made mention of the fact that another book or two are coming out in 2012.  So this is all alive and kicking.  And, oh, boy.  You can get into it for free with the first book and see if it's your cup of tea.  Because, as you said, Leo, it's easier than Hamilton, a little less tech-y than Peter's stuff.  But, oh, really, really nice writing.  And I really like the way he handles characterization.



LEO:  Darn you.  Darn you, Steve Gibson.  And if our podcasts are late coming out for the next three weeks, you'll know why.



STEVE:  Oh, it really is good stuff.  So I give it...



LEO:  I have to admit, the covers make me think it's kind of a little bit of a romance novel.  But it's not; right?



STEVE:  Absolutely not.  In fact, we learn in the beginning of the second book that Honor has never really had any interest in guys.  And she doesn't like women; she actually says that.  But just she hasn't run across a guy yet that she's going to.  However, I did see something in a synopsis later on where...



LEO:  I figure he's saving his powder for later.  Yeah, oh, yeah.



STEVE:  Oh, and it's been called - it's been reminiscent of the Hornblower novels.



LEO:  Really.  Well, see, I was a big fan.  I love those kinds of novels.



STEVE:  Well, and it's like that.  In fact, the technology uses Warshawski sails to sail along gravity waves in hyperspace.  And we have her looking out of her viewport at the frozen lightning appearance of the sails as she's sailing through hyperspace.  And it's not overdone.  I mean, it's just, oh, it's fantastic.  So thank you, all of you, who for the last five years have been trying to tell me about her...



LEO:  Finally, he paid attention.



STEVE:  ...and this author and series.  And I wanted to pass the word on to all of our listeners because absolutely worthwhile stuff.



And just a short note from Sam in Texas, who says, "Wow."  He says, "I applied SpinRite to a very old hard drive that had stopped working completely.  It wouldn't boot into safe mode, or any other mode, for that matter.  And even though the drive had many unrecoverable sectors and one recoverable sector after using SpinRite, the drive now works.  I'm very happy that this product works like it said it would.  I mainly use it for drive maintenance.  Keep up the good work.  Sam in Texas."  So, Sam, thank you.



LEO:  Yeah.  All right, Steve, I have questions.  I know you have answers or you wouldn't have given me these questions.



STEVE:  And we got just a bunch of great stuff this week.  So let's plow in.



LEO:  "Fire when ready, Gridley."  Question 1 from Tudor Gazdac - what a great name - about "Watch it work" and "Get it done."  Dear Steve, I've been watching for a while about how Off The Grid actually works.  This was a couple of episodes ago, your great kind of non-electronic password system.



STEVE:  Right.



LEO:  That's why it's Off The Grid.  And I noticed something weird.  When I selected the option "Watch it work" - so we should explain.  When you go to Steve's website, GRC.com, what is it, GRC.com/offthegrid.htm.



STEVE:  Yup.



LEO:  It'll generate a grid, and there's two ways to do it:  quick, or you can see it actually happen.  That's the "Watch it work" thing.  He memorized the position of some characters as they were generated.  But after it's finished generating the entire Latin Square, I observed a change in the distribution of characters I had memorized.  The final result was totally different, a totally different Latin Square from the one that it was working on initially.  For example, I memorized the position of three characters, OmG - capital "O," lowercase "m," uppercase "G" - as they appeared in the first column and the first row.  When the Latin Square got generated, the characters moved from their positions, the result being a totally new Latin Square.  Is this a bug?  But it also can't be such a big deal.  But it's something I noticed, and I thought you should know.  Congratulations for everything you're doing.  Tudor Gazdac.



STEVE:  So, Tudor, you and many people mentioned that and asked.  And so two things happened.  First of all, I changed the way it works because it was confusing people, so that it no longer does that.  But it was deliberate and not a bug.  It was actually doing it in both modes, but in the "Get it done" mode you couldn't see it happen.



LEO:  You could see it, yeah, yeah, yeah.



STEVE:  Here's the problem.  The way I was generating Latin Squares, where I'm moving through each cell and selecting from among those that are still candidates, that actually results in a tiny bias from if all of the cells in the row were chosen at once.  There's a famous logical problem.  You probably will remember this, Leo, and I'm not sure I'm going to get it right.  But it's like there was a game show where you had to choose between...



LEO:  Oh, yeah, yeah, yeah.



STEVE:  ...what was behind Door No. 1, Door No. 2, and Door No. 3.



LEO:  So it's counterintuitive, to be honest.



STEVE:  Yes.  And so...



LEO:  But your first pick can actually affect your second pick.



STEVE:  Yes.



LEO:  Which doesn't seem right because, you know, if you flip a coin, what happens in the first flip doesn't have anything to do with the second flip.



STEVE:  Exactly.  And so I think, was it Alex Trebek, or I don't know who it was, but somebody, there would be some fantastic car...



LEO:  I think they did Let's Make a Deal, is what they used as an example.



STEVE:  Ah, okay.



LEO:  Monty Hall.



STEVE:  Right, Monty Hall.  And so you'd try to guess, like, where the prize was.  It was behind one of these three doors.  And you would make your guess.  And then, given that you weren't right, they would open one of the other doors to show - or, no, they would open that door, yeah, they would open that door and show that it wasn't there where you had chosen.  And you had the opportunity then to change - no, wait.  You made your guess.



LEO:  No, here's the deal.



STEVE:  Okay.



LEO:  So the player picks Door No. 1.  Now, they don't open Door No. 1.  That's not how - if you've ever watched Let's Make a Deal, what they do is they open another door, let's say Door 3, to reveal a goat.  And then they say, do you want to stick with Door No. 1, or would you like to change your pick to Door No. 2?  And if you study game theory, you apparently understand, because I've never understood this, that you should always switch.



STEVE:  Yes.  And that is...



LEO:  It's to your advantage to switch.  Now, it seems to me it doesn't make any sense because whether there's a goat behind 3 or not, why should you switch?



STEVE:  Exactly.  And what's really freaky, Leo, is you can do this with coins.



LEO:  You can prove this, yeah.



STEVE:  You can prove that it actually matters.  Anyway, so that's kind of what was going on with the way the grids are being made because the characters at the end have less choices because the characters that preceded them on the line have already taken those choices up.  So, and again, it's like counterintuitive.  But some of the guys in the newsgroup, when I was working on all this, demonstrated it.  I produced a whole bunch of 4x4 Latin Squares, and they counted them up.  And sure enough, they were not equally distributed.  There was a bias to this approach toward generating them.



LEO:  How interesting.  So the Monte Carlo problem, which is the other way you describe this, bit you.



STEVE:  Yes.  And so what I decided to do was, once I had arrived at a completely finished Latin Square, I would randomly permute every row and every column, so that I get an extremely impossible-to-predict, incredibly high-entropy Latin Square.  Then I have another empty grid, and I randomly copy the columns into randomly chosen other columns, in order to make a new grid.  And then I randomly copy rows from this new one back into the original one in a random sequence.  So that permutes all the rows and all the columns to completely remove the fact that there was otherwise a detectable bias in the way that these grids were being generated, even though it really doesn't matter.  But you know I'm a perfectionist, and I want this to be just nailed down the right way.



So that's what people were seeing was they would, because the "Watch it work" mode plunks the characters out slowly, you could memorize the beginning of the grid as it's working down further down below.  Then suddenly I would perform this permutation that completely results in yet another grid.  It is a variant of the first one, and it's necessary to go through that first process in order to have a chance to get to all possible grids.  So this just is a short little hyperspace jump, essentially, to the final grid, which people were seeing.  It no longer does that because it really didn't matter for people who wanted to see it work.



LEO:  Awesome.  Awesome.  Question 2, John Benson from Twitter, @JBenson2, wonders - I love the Twitter questions because they're 140 characters.  None of this "love the show"...



STEVE:  We're about to make up for it, though.



LEO:  Oh, got a long one.



STEVE:  Yeah.



LEO:  Some program logins ask for my Twitter or Facebook username and password.  Seems risky.  Could you comment on Security Now!?



STEVE:  Okay.  So that's a really good question.  And I'm seeing it more and more, too.  There was somewhere I was looking the other day that offered me the option of logging in using my Twitter or Facebook account.  Now, hopefully what John is talking about, certainly what the page I was looking at was talking about, was something we have done a show on called OAuth, or Open Authentication.



LEO:  So you should know that in the early days of Twitter they did not require OAuth, but they now do.  So anytime you give your Twitter credentials to anybody, you're not giving it to anybody, you're giving it to Twitter, which is then sending an OAuth token to that third-party site.



STEVE:  Well, okay.



LEO:  Twitter does not allow this third-party login anymore.



STEVE:  The way it works, though, you still, you should absolutely never put your Twitter or Facebook or other site into a page other than Twitter or Facebook.



LEO:  Somebody could trick you into saying, oh, we'll do it for you.  But they can't.  So if they're asking you for that, they're stealing it.



STEVE:  Exactly.  So John, and anybody else who's confused about this, when you say yes, I would like to use my Twitter or Facebook authentication to authenticate to this other third-party site, when you click one of those buttons you will be taken to Twitter or Facebook.  There you're logging in with Twitter or Facebook, assuming that you weren't already logged in, like statically.  And then you're brought back.  And so what the OpenAuth authentication protocol does is behind the scenes it allows that site you were going to authenticate to via a site where you already have credentials established, it allows them to exchange things.  But you, yourself, should only ever provide that authentication to the site that you are intending to authenticate to.  And then you bounce back to the third-party site.  And he'll say, oh, okay, fine.  Facebook has said they know who you are.  Twitter has said they know who you are.  And now we have a token that represents who you are.  And it is completely secure.



LEO:  Yeah.  And you should know that I think both Twitter and Facebook have deprecated any other form of authentication.  You have to - so if somebody's saying, oh, we'll do it for you, that's a lie.



STEVE:  Oh, yeah, yeah.  You never want to provide your credentials to other than this site where you are known by that credential.



LEO:  I guess they could spoof Twitter.  But you should be able to tell that it's a Twitter...



STEVE:  Oh, you ought to have an HTTPS connection.  You ought to be able to verify the credentials of the page by looking at the SSL certificate and go through the whole thing, yes.



LEO:  Now the long one, from Simon Bartholomeusz from Melbourne, Australia with a troubling and true, because you confirmed it, tale of widespread, sophisticated, attempted social engineering exploitation.  [Bang]  Ow.  [Australian accent]  Steve and Leo, I'm a longtime listener of the show and have been dying for an opportunity - I'm not going to do it the whole way that way - an opportunity to write in.



STEVE:  And actually, he actually wrote "cue Australian accent."



LEO:  Oh, that's not you?  He said that?



STEVE:  No, that was him.



LEO:  [Australian accent] It finally happened on a Saturday evening as I was watching the football.  And he wasn't - he was watching Australian rules, no doubt.  Go Cats.  While watching TV, the home telephone line rang.  Suspicious that it would be one of the usual telemarketing parasites, I answered the phone anyway, looking forward to the opportunity to vent some frustration.  I guess the Cats were losing.  Sure enough, I was immediately presented with a dial tone that transferred me through to a young man with an Indian accent called "Carl."



[Indian accent] Carl explained that he worked for an organization that had been monitoring the security of my computer - Oh, yeah.  You know what, this is happening all over because I've gotten calls on the radio show about this - and could confirm that it was infected with malicious software.  Now, of course Simon's a listener, so he immediately said it's a little odd that he could figure out which one, given I have a bunch of computers behind a router.  He knew the name of my girlfriend, who lives with me, presumably from the phone book, and stated that "I am here to help."  Yeah, right.



Having been a listener of the show, the word "scam" immediately came to mind, but I continued to indulge my curiosity.  Carl told me to boot up my computer.  And I guess he did it, which is great.  While it was booting, he explained that 98 percent of the files on your computer are corrupted, whatever that means.  He also explained that he worked for a company based in North Sydney that had been involved in monitoring security software that had been installed in my computer before it was sold to me.  Quite farcical, since I was booting up a Mac that had been reformatted umpteen times over.



We booted up the computer into Windows (I'm a dual booter), and I was immediately told to hit Windows-R to load up the Run box and type "eventvwr."  That was quite funny.  He directed me to the application log and explained that all the error and warning events were instances of Windows telling me my computer was truly infected.  Bugger all.



Then back to the Run box.  I was told to type "inf."  INF, of course, stands for "infected files."  That's what I was told.  "Can you see a lot of .inf and .pnf files in the INF directory?" I was asked.  "These are corrupted files."  I was asked to double-click one of the PNF files.  When Windows brought up a dialog saying it didn't know how to open the file, this was taken as further damning evidence my computer had indeed been taken over.  Amazed that the Russian Mafia could so easily have compromised my system, I asked Carl what to do to fix this seemingly dire, utterly hopeless situation.  Sure enough, there was a solution:  "Go to the Run box and type www.ammyy.com."



I obviously knew better than to go to a website I knew nothing about in circumstances such as these.  At this point I told Carl as much, giving him a polite piece of my mind, and I explained that I would immediately ring the police.  And it gets better.  I was transferred to his superior, another man with an Indian accent, who transferred me to his superior, an angrier man with an Indian accent, who explained to me that he was happy to patch the police in right now.  I said, "All right, go ahead, mate."  Then after being on hold for five minutes I decided to hang up and leave it at that.  30 seconds of Googling ammyy.com made it clear that the initial goal of the scam was to load up remote-control software on my PC.  In fact, Steve, you checked this, and that is a free desktop access program.



STEVE:  Yes.



LEO:  What frustrates me about this nonsense is I know plenty of otherwise intelligent people who would probably fall for this sort of scam, unknowingly handing over their bank account details and openly handing control of their computer across to join the ranks of some botnet army.  If I have a question out of any of this, it is what can ordinary people do to stop these people?  I don't take sufficient comfort in the fact that I can protect myself.  Security Now! has plenty of devoted followers.  There must be something we can all do to proactively cut the heads off the hydra.  Well, you know what happened when that happened.



Anyway, on a much more positive note, I just want to say thank you to both of you for your efforts on the show.  My reading list over the past 12 months - Peter F. Hamilton, Daniel Suarez, and Fatal System Error - has been purely Security Now! inspired.  That's amazing.  We've taken over his reading list.  Moreover, the show has further inspired me to take a much broader interest in computer science, with many hours spent playing around with MASM and better understanding some of the most fascinating technology phenomena of our time.  I might even load up on vitamin D supplements.  Man, this guy's devoted.



If either of you are ever in Melbourne, let me now, and I'll happily take you to a footy game, my shout.  Kind regards, Simon Bartholomeusz, Melbourne.  Well, good news, I'm going to be in Melbourne in November, Simon, and I'm going to count on that footy game.  Because, you know what, footy, Australian rules football, is by far the best sport ever invented by god or man.  With the exception, perhaps, of Quidditch.



So, Steve, I have gotten this call on the radio show numerous times.  So it's not just Australia.  They do this worldwide.  Probably there's a large group of out-of-work call center guys who they just say, hey, in between supporting Dell calls, why don't you make these?



STEVE:  Well, yeah.  And if you do Google, as I did, ammyy, up comes all kinds of people saying, for example, how Google does little summaries, and I'm looking here, it says, "Help, a guy just rang our phone and asked my wife to turn on our PC.  She hung up.  It rang again, and a guy said he was calling as some error..."  Another one, December 8, 2010, someone claiming to be from Microsoft phones you at home and tells you their logs are picking up an infection from your computer, blah blah blah.  I mean, there's, like, people are falling for this and getting caught out by it.



LEO:  Well, and I don't worry about our audience.  I know they are smart enough.  But I do worry about the radio show audience.  And I suppose I should just make a blanket warning every single episode because those are the people they're going after; right?



STEVE:  Yeah, yeah.  And, I mean, I didn't know you could type "eventvwr" and immediately bring up Windows Event Viewer, but it works.



LEO:  Well, they know.



STEVE:  And so it's a very clever way of getting buy-in from pure social engineering attack, getting buy-in from a Windows user.  And here's somebody who says, first of all, we're monitoring your security, we're going to prove it to you, and he brings up this log.  And the Windows Event Viewer is always full of a bunch of random nonsense that isn't working right, or something didn't start up, or tried to boot, or who knows what.  So, I mean, I can totally see that they would be bringing a person along and allow someone to believe that their system was in bad shape.  And who knows what happens, I'm interested to know what happens if you do download the remote desktop stuff and they probably connect to your system.  Somehow they're going to have to get money from you, so they probably drag you along and say, oh, well, yeah, now we're taking over your cursor, and poke around and do magic-looking incantations and then say, oh, well, now we need your credit card number, and we'll fix the problem for you.



LEO:  I had a call on the radio show in May from Mike, who was in Edinburgh, Scotland.  And he had exactly the same call, but he had the good sense to record it.



STEVE:  Ah.



LEO:  So you can listen a little bit, if you're curious.  It's on YouTube, if you search for "Windows Service Centre Phone Call Scam."  [Playing YouTube file]  "I understand that you have received a call from the Windows Service Center.  And we are the associate of all the Windows operating systems all over the world.  And the reason why we are calling you, because we have been receiving a lot of errors and warning reports from...."  We received a lot of error reports from the computer you're using.  It's the same script, I believe - "which has been malfunctioning with the Windows operating system and the [indiscernible] still going on.  [Indiscernible], okay?"  "All right."



So then this is exactly what you described.  It's funny, I mean, Scotland, Australia, I think it's all over the place.  I'm sorry it's not louder.  But you can hear Mike talking to them.  "[Indiscernible?]"  "Mike:  Sorry?"  "Can you see all the [indiscernible]..."  It's such an elaborate scam.  I'll let you folks go and watch Mike's video.  It's "Windows Service Centre Phone Call Scam."  And apparently there are quite a few of these on YouTube.  If you'd like to know what these sound like, maybe just send a link to friends and family.  Mike did a great job of documenting this with video and everything.  It's fascinating, isn't it.



STEVE:  Well, and it's been going on for about at least three quarters of a year because here's one that was posted on December 8th of 2010.  I just can't understand how these people haven't been shut down.  It's just mindboggling.



LEO:  I'll tell you how they haven't been shut down.  It's international.  In the U.S., if you call, if you get a solicitor's call, by law you can say put me on your do-not-call list, and it would be a violation of federal law for them to call you back - unless they're in Bangalore.  Then what do you do?  And I think one of the reasons this works is because cheap international calling using voice-over-IP, they can afford to do this.  Because you've got to remember that it costs them both the time of a person to make this call, the phone call itself.  They must get some pretty good paybacks out of it, I would guess.



STEVE:  Yeah.  Wow.



LEO:  Wow is right.



STEVE:  Anyway, I wanted to bring it to our listeners' attention just because it was from the bizarro world, from our perspective.  But Leo, I'll bet it works.



LEO:  It's the real world.  Here's Question 4, a worried listener who has asked for anonymity.  He's in India.  He says:  Steve, I'm a listener in India and follow your podcast very regularly.  Thanks for the information - by the way, I just want to apologize for the bad Australian and Indian accents of the previous letter.  Didn't know we had any Indian listeners.  Oh, boy.



STEVE:  There's a lot.



LEO:  I know we do.  I'm just kidding.  Thanks for the information you share as I drive around for long hours.  I have a query that relates to TCP/IP, and I would be grateful if my email ID and name are not disclosed.



Recently I was approached by the police, who traced my IP address for some harassing emails sent to an individual.  I was pretty surprised.  I was sure it was a mistake.  How can a security-focused listener fall for hacks; right?  Well, it turned out that the authorities had traced one of many emails to my IP, and other emails are being evaluated.  The only outcome possible is that all emails end up being traced back to my broadband connection or to random people.  I'm hoping it's the latter.



I had an ADSL 2Mbps line that plugs into an integrated modem and wireless router.  The model is a Beetel router provide by the telecom company, but I believe my question is independent of the model being used.  I was using WPA/TKIP for protection - that's good.  Made sure that all services - Telnet, HTTP, TFTP - were only available to the LAN, not the WAN.  That's good.  I thought I was secure, and I didn't bother to change the default router admin password.  Big, big mistake.



I started exploring my router in more detail.  From an independent Internet connection, if I typed the IP address of my router in the browser, I was prompted for the username and password and was promptly taken to my admin page, which needless to say required only the default password [angry frustrated sounds].  I don't know what the definition is of WAN for my router.  My modem has an option for showing the password as plaintext - sounds like a terrible modem.



STEVE:  I know.



LEO:  So from the Internet my password was visible, along with the hidden SSID.  To make things worse, my ADSL PPPoE username is my_phone_number@my_service_provider_name.  So if somebody hacked into my router, he now has my SSID, my password, my phone number - of course that could be used to obtain my address through social engineering - even though my IP is dynamic.  So now I have reason to believe my router has been hacked.  Now I do understand I'm vulnerable, but the hacker needs to get in close proximity of my house.  He needs to be on the WiFi in order to use my router for malicious intentions.  My question to you as a security expert is as follows.  I don't know, does he need to use the WiFi?  That may not be the case.



STEVE:  I don't think so.



LEO:  Yeah, I think he could do that over the Internet.  Assuming my machine was not compromised by altering the DNS or other means, whether a router can be configured such that a hacker is able to bounce his IP traffic off my router so that it looks like I am the sender of the email.  I explored the DMZ, NAT, and Virtual Server protocols.  They didn't seem to fill the bill.  The router, which is a Broadcom router with a fancy marketing name - so it's Broadcom based, I guess - also has a Linux prompt and has very basic commands, one of which is IPtables, which is a Linux firewall.



I am really going bonkers while trying to narrow down whether the hacker came in close proximity to my house or did the bouncing of packets remotely.  Is the latter possible, as it is more convenient?  And, if so, what protocol should I be looking into my router?  VPN is not supported in my router, which was a suggestion provided by one of my friends.



Please note that cyber investigations in India are pretty new and nave, and authorities believe an IP trace implicates the router owner, even if you've never met the person who has received the malicious emails.  Spoofing, ability to hack WPA the way I describe above are really beyond comprehension for the police, and any insight could you provide with regards to IP routing that affects my everyday use is going to be greatly appreciated.



Please do keep up the good work - boy, I feel for this guy - and hope you bump up this question for the upcoming podcast.  I'm looking forward to your views on this unfortunate episode.  It's really nerve wracking, and it's making me angry.  He has changed the default password.



Now, I guess I have a question.  They don't really need to hack his router to spoof his IP address, do they?  Can't you just spoof that?



STEVE:  Well, yeah.  No, because email uses TCP, and you need to establish a connection before you're able to send traffic over TCP.  So unlike UDP, like DNS queries, where it's a one-way transit, somehow you actually have to have - the three-way handshake that we discussed last week has to complete, and that does prevent IP addresses from being spoofed.  Now, he said, first of all, he said his IP was dynamic.  So although typically IPs are not changing often, my first thought is, who had the IP at the time that these emails were being sent?  Because...



LEO:  Oh.  Well, that's a good point.  It might not have been him.



STEVE:  Yes, exactly.  I mean, that would be the first thing I would say.  However, the fact that he was able to log onto his router's administration page from outside on the Internet, knowing his current IP, is obviously a huge concern.  It's, for example, what ShieldsUP! is designed - GRC's ShieldsUP! service is designed to detect that, and would.  So if he were to go to ShieldsUP! and just run a scan, he would come up with a red box on port 80 saying that you've got an HTTP server running on this IP address which is accepting TCP connections from anybody.  And so...



LEO:  Oh, that's interesting.  So that's one of the things you'd see in ShieldsUP! is that there's access externally.  And it shows up as port 80.



STEVE:  Exactly, yes, because it would just be...



LEO:  It's a web page.



STEVE:  Yeah, exactly.  He said he went to a different web browser and typed in his IP address and got his page.  So that means he's got a web server exposed to the Internet, and ShieldsUP! would make that very obvious that that was going on.  So if any other listener wants to make sure that they're not in the same situation, GRC's ShieldsUP! service, it's been around forever...



LEO:  Love it, by the way.



STEVE:  ...designed to let people know.  Now, as to could a router bounce traffic or be involved somehow, the fact that it's got Linux in it means that it's potentially got the power to do that.  But in order to bounce a connection, you actually have to have a proxy of some sort.  You have to have the router able to accept a connection and then reissue another connection on your behalf from its IP.  That way the connection to a remote SMTP server would be terminated at the router's IP.  And it's unlikely that, I mean, that's not typical software in a router that's available over on the WAN side.  So it's unlikely that that would be going on.  And by the way, I'm looking at the traffic to GRC, and everyone who's listening to the podcast just started using ShieldsUP! at once.



LEO:  Including me, by the way.  My ident port is turned on.  We're using an ASG.  The only thing bad about having an ident port turned on is then that does identify that there's a router at that IP address.



STEVE:  Exactly, it demonstrates that it's not just a disconnected IP.  And the only possible problem would be if there was a bug in the ident server, like a buffer overflow, that someone could then go, oh, let's see if there are any known problems that the ident server has, that kind of problem.



LEO:  Otherwise we're fully stealthed.  Of course we're using ASG, so I think we're pretty safe.  I'm not too worried about that.



STEVE:  Yeah.  And of course ident open is necessary for some connections to be completed on other ports...



LEO:  Often chats and things like that.



STEVE:  ...as we've talked about in the last couple weeks, yeah.  So my best guess is, first of all, it's nice that he knows that he was exposed.  Hopefully he's able to, I mean, he can use ShieldsUP! to verify that WAN-side access is shut down.  Certainly that's better than changing his password.  And, wow, I would worry, if you believe you've turned off WAN-side access, but it hasn't been turned off.  That's a problem.  So there's that.



And secondly, it's really unlikely that a proxy is or was running in your browser unless it's very sophisticated.  But he said his doesn't support VPN connections.  And I can't imagine a WAN-side proxying service that would be part of a router, which is what would be necessary in order to loop traffic through someone's router.  Just spoofing wouldn't work.  So I think it's more the most likely scenario is that somebody else previously had his IP.  And I would just tell the police, hey, verify...



LEO:  It's dynamic, dudes, yeah.



STEVE:  IPs, they do change, and somebody had it before him.



LEO:  There's nothing more scary than a government authority with half knowledge of technology.  That's just terrifying.



STEVE:  Yeah.



LEO:  You have our support, sympathy, and - so it's not possible to spoof headers, then, in an email?  At least as far as the servers go?



STEVE:  You can spoof headers, but you're going to finally send it to the SMTP server that will then deliver it.  And that last header cannot be spoofed because it's putting the header on and then sending it on.



LEO:  So the intermediate servers could be spoofed.



STEVE:  Yes.



LEO:  But not the final, the ultimate server, or the first server.  See, could the originating server be spoofed?



STEVE:  It's actually a chain of servers where the first header is - it's a chain of servers where headers are successively added to the list.  But the one that really matters cannot be spoofed, only the previous headers.



LEO:  Okay.  We're assuming, of course, that the police understand that, which doesn't sound like they...



STEVE:  Oh, goodness, yes.



LEO:  They're not even close.  At least, hey, they looked at the headers.  Ben in Reading, U.K. wants to implement Off The Grid for Android devices.  I'd support that.  Steve and Leo, I want to create an Android application for generating those Latin Squares you use in Off The Grid, which can be then used to generate a password, as you explained in Episode 315.  The original idea was to use a master password to somehow seed the generation of the grid.  But following discussions on Episode 316, I realized that this would significantly reduce the number of possible squares.



The revised decision on the design of the application is, when it first runs, a Latin Square will be generated and saved.  The square will be both generated and saved locally on the device.  When the user wants to access it, they can provide a master password to unlock the saved square.  Then they enter a website address which will use the square automatically to generate the password.  The user will have the option to select a starting square from the grid after entering their password and the website address.  That's nice.  I like that feature.



The way I see it is in order for someone to obtain your password for a site, they would have to, A, have your phone; B, have the master password to unlock the square; and selecting a square to start with.  I am not considering an extra level of security because there's only 26x26 different starting locations to choose from.  Still, that's a fairly large number, so it would take some time, perhaps enough for you to change your passwords because your phone was lost.  I realize if someone does steal your phone and knows what they are doing, they might be able to somehow extract the Latin Square, removing the need to even enter a password.  But I can't think of a way to overcome that.  Does this seem like a secure approach?  Anything I'm missing?  Is this how you would implement this, Steve?



STEVE:  Okay.  So here's what I would do.  First of all, he's right that using a master password just doesn't have enough entropy in it for the Latin Square generation.  So, and some people have said, hey, will we be able just to use our own password to create a Latin Square?  And I'm not going to allow, I'm not going to provide for that option because I really want there to - part of the security of the system is that there are just so many, 10^428 or whatever that number was, a ridiculous number of possible Latin Squares.  That's where it does get some of its security.



So we can't use a passphrase to directly seed the generation of a Latin Square.  What I would do, and what I will suggest Ben does, is use a good pseudorandom number generator, and I've got one that I developed in JavaScript, and that's public domain, and I'm encouraging people to take it and use it.  That's the ultra-high-entropy pseudorandom number generator that we talked about a week or two ago, which is posted on my website.  If you go to offthegrid.htm, down at the bottom is a link to a page that shows that.



So that generates 1,536-bit-based pseudorandom numbers from a key of that size, 1,536 bits, which when it's base64 encoded is 256 characters.  So that's a big, long - that 256-character ASCII blob is your master password, or actually the key which then generates the squares.  That you could encrypt using a passphrase.  So that's arrived at, that 256-character key is arrived at pseudorandomly, and that's what is used to key the Latin Square generator.  That, then, you symmetrically encrypt using a passphrase.  So the beauty of that is that, if someone got your phone, they could put in a passphrase, and it would decrypt to some key that would generate some Latin Square, and not yours.  So they would get a Latin Square, and they would have no way of knowing if it was the right one.  Only when you put in the proper passphrase would it decrypt that 1,536 bits into the proper key to result in the proper Latin Square.



So it's actually sort of nice because nothing is on the phone that can be taken from you.  Your passphrase decrypts the encrypted key into something.  Any passphrase will decrypt it into something.  It just will always be the wrong something unless it's the proper passphrase.  But even the wrong something will happily generate a Latin Square.  It'll just be the wrong Latin Square.  And then they're really up the creek because then they have to start using the wrong Latin Square to try to guess your passwords, and those won't work, either.  So it's kind of cool.



LEO:  Good solution.  So I'm looking forward to this app.  Ship it.



STEVE:  Yup.  And I meant to mention also, many people...



LEO:  I bet there's others, yeah.



STEVE:  Many people have expressed an interest in turning this into an app where you put in the domain name, and it gives you out the password.  So basically it automates the whole Latin Square path-following process.  And I like that because you have that for convenience.  It's not so much Off The Grid any longer, that is...



LEO:  No, it isn't, yeah.



STEVE:  It's now in your phone.  But I like the idea then of also having the same Latin Square printed out and folded up and tucked away in your desk drawer or stuck in your wallet so you always have that as a fallback, doing the same thing that you have automated with your smart phone.  



LEO:  I use a web-based solution called SuperGenPass that hashes - you use a master password, which never changes.  And it hashes that with the domain you're at, GRC.com, to generate a unique password.  I don't know, I mean, it's not completely clear how secure it is and so forth.  But it's good enough.  I don't use it on the bank and stuff like that.  But it seems good enough for me, and it's automated, and it comes - because it's web based I can use it on any device, including my mobile phone.



STEVE:  Right.



LEO:  Moving right along, Question 6 from another Australian.  We get - I love it that we have listeners all over the world.



STEVE:  We sure do.



LEO:  It's fantastic.  India, England, Australia, and Alabama coming up next.  But first, Richard Wilkinson in Sydney wonders why so many certificate stores.  What's the point of so many certificate stores?  He's talking about, I think, CAs, right, Certificate Authorities.



STEVE:  No, like storage spots for certificates in a computer.



LEO:  Oh, okay.  Why isn't there just one for the operating system, and the browser queries that?  Actually, that's how Apple does it.  What is the advantage of having separate stores for each browser?  If there were just one operating system managed store, one update would do it for all of them.  That's a good question.



STEVE:  He's actually right.



LEO:  That's a legit question, although I presume that Google wants their own store, and Firefox wants its own store, and now Microsoft, et cetera, et cetera, et cetera.



STEVE:  That's exactly right.  I think there are two motivations.  One is that some, many of these browsers are deliberately and by design cross-platform.  Firefox runs on Mac, PC, Linux, UNIX, Sun machines.  It's multiple platform.  So they have their code base, which includes their certificate store, and so they're managing them as a whole.  So when you add a third-party browser, it's often bringing along its own certificate store.  Now, as you mentioned last week, Leo, it's not necessarily the case because, for example, Safari on Windows uses the Windows certificate store, just as IE does.  And I think that Opera does also.  But many times a browser, a third-party browser will just bring its own along.



And so on one hand, part of it is that they're often open source and multiplatform.  And I think the second part is that it's in the politics of browser vendors, third-party browser vendors who are doing their own browser, part of their whole philosophy is, well, we're doing one because we want control.  We want to decide what add-ons operate and how they operate.  We want to control the features.  And so I think they proactively don't want to rely on the platform's certificate store and whatever policies it may have.  For example, Firefox on Mac was secure against the DigiNotar problem several weeks before Safari on the Mac.



LEO:  Precisely.  Precisely.  So Firefox doesn't want to wait until Apple fixes it.  They want to fix it.



STEVE:  Right.



LEO:  It gives them a selling point, too.  Not that they're selling anything.  Okay.  Question 7, Ronald Stepp, Enterprise, Alabama.  He wonders about what he calls an "interesting potential furball service," in other words, dropbox client-side encryption.  Just picked up on this article about a new service called Bitcasa.  By the way, I know exactly where he picked upon it because it was TechCrunch that wrote about it heavily.  In fact, yeah, he gives us the link.  And interestingly enough, of course, it's a TechCrunch investment.  And they wrote so many very positive articles about it, each of which ended with, and by the way, we have an investment in Bitcasa.  And it's like, come on, guys, stop that.



Anyway, it's promising seamless and integrated unlimited infinite cloud storage of everything on your hard drive, terabytes or petabytes even.  They say they will encrypt it client-side - so it's PEE or PIE, Pre-Internet Encryption - but that one way they minimize costs is they can find out which files are duplicated across different users' machines and then only store one copy of it.  What?  That makes no sense.  But okay.



The security concern, and what makes it interesting, plus lots of people are pointing it out in this article, is this:  If you're encrypting the stuff client-side, how is it possible they securely eliminate duplicates by comparing files encrypted with different keys?  A lot of good posts there in the discussion at the bottom of the page, TechCrunch.com slash slash blah blah blah, thought you might get a kick out of it.  Well, obviously that's patent nonsense; right?



STEVE:  Well, it can be done.



LEO:  Really.



STEVE:  And I wanted - so Ronald has his name on this question, but I wanted to acknowledge all of the people who have tweeted ever since TechCrunch did this, people saying, hey, Steve, how is this possible?  How can it be possible for them to claim that they cannot decrypt the files?



LEO:  Oh, I think Stride got it in our chatroom already.  I'm curious to see if he's right.  Go ahead.



STEVE:  I'll be surprised if it could have been explained so quickly because we're about to have a serious propellerhead discussion.



LEO:  Really?  Well, he said what if you generate a hash before encryption?



STEVE:  Yes, that's part of the solution.



LEO:  Okay.



STEVE:  But then you still can't - how could you only store one copy?  That's the hard part.



LEO:  Oh, good point.  Oh, you're right.  You could know it's the same, but you couldn't - yeah, okay, good.  So that's part one, okay.



STEVE:  So I went to their site to track this down.  And they make a big point of saying, first of all, they have 20 patents.  Well, we're about to bust one of them, or maybe more than one, because I'll tell everybody how we could do this.  And I'm sorry if they got a patent on it...



LEO:  Well, patents disclose how you do it, so they're protected.



STEVE:  Yeah.  But again, the problem is patents are also supposed to be non-obvious to someone trained in the art.



LEO:  Oh, and you figured it out, yeah, good point.



STEVE:  So if someone just asks me how we do this, I'll tell them how we do it.



LEO:  It's obvious.



STEVE:  But they didn't ask me.  And it may - some listeners may feel that they deserve a patent after they hear how it can be done.



LEO:  Okay.



STEVE:  So they make a point of saying that they cannot respond to subpoenas, that this stuff is truly secure.  Even if they were coerced to provide anything to any government agency, they can't.  Which means they do not have the keys, period.  They're also saying that they are eliminating duplicates, and that the reason they can offer for $10 a month truly absolutely infinite storage is that so many copies of files are duplicated, they're not having to store duplicates.  So on one hand they're saying they don't have the key, which means that what they're storing is pseudorandom nonsense that is completely opaque to them.  On the second hand, they're saying that they're doing duplicate elimination, so that multiple people having the same file are able to store, are able to access it even though it has a single copy.



LEO:  Boy, this seems like something we should make a contest out of for next week, like how would you do this?  Because I'll tell you, it's obvious to you, maybe, but I'm wracking my brain now.  I mean, the hash makes sense, but how do you store a duplicate?





STEVE:  Okay.  So here's one way it could work.  And I just thought about this when I was assembling the questions this morning.  And I thought, okay, well, I could solve the problem.  So all users have a private key and a public key.  And the public key, being public, is part of their account information.  So on the client, on the user's computer, it generates an asymmetric encryption key pair.  One is kept private; one is public and is sent up to Bitcasa.  So first user wants to store some files up there.  So his files are blocked at certain sizes.  We've talked about blocking, which - take a large file, break it down into one MB or four MB or whatever size big chunks you want.  That, prior to encryption, is hashed.  So everyone agrees - so that's sort of the easy part, is we're going to take the block and hash it to create a fingerprint of the pre-encrypted data, the plaintext data.



Now we generate a random 256-bit key which we'll use to encrypt that block.  And that random key is - the user has it, that is, the user keeps this random key and sends the block and the pre-encrypted hash up to Bitcasa.  And they say thank you very much, we're storing this, we don't know what it is, but we have its fingerprint.  And remember that the fingerprint, the signature, the hash, tells them it uniquely identifies it from all the other possible ones.  But they still don't - they have no idea what the content is.  They don't have a filename.  They don't have anything, just a blob.  So this user has lost no security.



Now, somebody else, User B comes along, signs up for Bitcasa, downloads the client, and says I want to store this big file up there.  His client breaks the file up into big blocks, makes a hash, and this - here now there are a couple ways it could work.  But suppose the hash goes first.  Bitcasa has all these hashes indexed and says, hey, we already have a hash that matches.  So we're holding a block which was encrypted under a key we don't have.  But we know who does have the key.  So they take User B's public key and send it to User A, asking User A to please encrypt the randomly chosen symmetric key for the following block under User B's public key, which nobody but User B can decrypt using their private key.  And so then Bitcasa sends that back to User B, who decrypts this private key that User A had which was encrypted with User B's public key, decrypts it with his private key.  Now he has the key to the block.  He never needed to uploaded it.  He merely needed to say I have the following hash.  Now he has a key to the block, which gives him access to that file.  So the block only needed to be sent to Bitcasa once, and then only tiny keys are sent around.  And the problem of User A maybe not being online is solved by the fact that, in fact, very quickly, hundreds and thousands of users will all be sharing the same blocks.



LEO:  It also, and somebody in the chatroom is pointing this out, and I think this is an interesting - tell me if this is not right.  If authorities got any one user's key, they'd have access to that file from all the users.



STEVE:  Yes.  Except that's not a liability because it's just like any other file system.  So I'm trying to think.  So it is the case that there's metadata which Bitcasa is storing which knows which users are sharing which blobs.  But Bitcasa themselves cannot decrypt the blobs.



LEO:  No, they'd have to get - so authorities would have to go to one of the key holders.



STEVE:  Yes, one of the key holders.  And then the authorities would be able to, just like going to your computer - and we assume also that there's some login process and so forth.  So if that user didn't give up that information, then the authorities would still not be able to have anything.  So it is possible to share hashes of plaintext and to arrange so that the randomly chosen keys are never in Bitcasa's possession, yet they could arrange a socially networked key-sharing service using public key technology that would make the whole system work.



LEO:  So the scenario, for instance, that would be potentially risky for you as a user, let's say "The Hurt Locker," which is a film that the owners of which have been very aggressive about suing people.



STEVE:  Ah, very good point.



LEO:  So I have a copy of "The Hurt Locker."  I upload it, and 50 other people also upload their copy of "The Hurt Locker."  The authorities can't go to Bitcasa and say, who are these people?  But they could get a list of everybody.  They could find - if any one of us says "Here's the key," they can then verify that all 50 people have "The Hurt Locker."



STEVE:  Right.



LEO:  And from Bitcasa they can subpoena the information that these 50 people have this file.



STEVE:  Right.  Now, using the scenario I painted, all I was trying to do was to solve what little we know about this.  It's not even in beta yet.  Hopefully they will...



LEO:  Oh, here's a good one.  Web7088 says, what if the authorities upload a copy of "The Hurt Locker"?  That's actually a great scenario because now they have a key.



STEVE:  Okay.  They have a key, except they would still need Bitcasa to tell them everybody who is sharing that block, and that they are one of the people sharing the block.



LEO:  But Bitcasa does know that, so they could be subpoenaed for that information.



STEVE:  I don't see how Bitcasa could not know that.



LEO:  So we don't know, we're guessing about how they're doing it.  But assuming that they're doing this with this eminently reasonable way, if what your concern is, is that you want to keep a copy of a pirated movie that is a problem on your site, all the authorities have to do is upload a duplicate, and then they have a key.



STEVE:  Everybody sharing that file would be potentially taggable.



LEO:  And all they then do is they subpoena Bitcasa and say, by the way, who else has this file?



STEVE:  Right.



LEO:  Okay.  Interesting.  We don't know if that's how they're doing it.



STEVE:  Maybe it's even fancier, and I hope that - but all I was trying to do was to solve those features that seemed contradictory.  And in fact we can see how public...



LEO:  There is a way to do it, yeah.



STEVE:  Yes.



LEO:  That's interesting.  Somebody in the chatroom says, oh, well, then it's obvious this is being funded by the Recording Industry Association of America, the MPAA.  That's how they can do it for free.



Moving along, Question 8.  Tim Miller and his son, in the Bay Area of California, rely upon, from last week, possibly hackable Medtronic insulin pumps:  Steve, I'm a SpinRite owner and user, listener since the beginning, et cetera, et cetera, et cetera.  Love the podcast.  I'm a Type 1 diabetic on the MiniMed pump.  Regarding Medtronic's defensive reply about users hearing the pump's beep, while it's audible, I don't always hear it.  We were talking about the fact that you could hack the pump remotely.  Not too remotely, but you could hack the pump.  And Medtronic said, well, yeah, but we have audible beeps whenever the pump is reprogrammed, so the user would go, oh, yeah, somebody's messing with my pump.



While it's audible, I don't always hear it.  My 10-year-old son is also on the MiniMed.  He ignores or doesn't hear it beeping half the time either.  My wife is the one who says, uh, I hear beeping, you should check your pumps.  It beeps for all warning signals, by the way, which include low battery, low insulin, reminder to check your blood sugar, et cetera.  So of course I'm concerned about this possible threat.  The serial number that's required for the threat is a 10-digit alphanumeric number.  However, it appears that four of the digits are always alphabetic, maybe the model number since mine and my son's are the same, and the other six characters appear to be numeric.  So if the hacker only has six digits, and if the pump replies, this is a very fast crack to get into a pump.



Leo is correct about the pump range.  You do have to be close to the insulin pump for radio reception.  I've found the max to be about 20 to 30 feet.  If an attacker were to shut it down, then any diabetic that tests regularly every two to six hours would notice their blood sugar rising without the insulin provided by the pump.  But if an attacker could induce the pump to deliver a large dose of insulin, that of course could be fatal.  And the way the pumps beep, you would typically not know until it beeped when done delivering the fatal dose of insulin, or when your blood sugar had dropped dangerously low.  This situation could be life threatening.



Just thought you should have a few more details.  And I will be contacting Medtronic to get a better response than, "Oh, we're not worried about it."  Boy, I'd be worried about it, yeah.  I mean, you'd have to, somebody would have to be wanting to get you.  But it's just one more, you know, I can see there'll be a movie of the week based on this one.



STEVE:  Exactly.



LEO:  From Hyderabad, India, our second writer from India, Gopi Krishna Reddy Guntuku wonders how a Certificate Authority can revoke a certificate that's already been issued:  Steve, I love your show.  I've been following from Episode 1.  I understood almost everything that you explained about DigiNotar except for one thing.  How can  a CA revoke an already issued SSL certificate, technically?  The CA signed the cert, which is given to the website owner; right?  When an end-user connects to the web server, handshaking will occur.  And during this process the end-user's browser isn't going to go to the CA website to check if it's revoked.  But if that's the case, the browser can check if the cert is valid or not by this call, as well.  Why would you trust to store it locally if you're not going to check?  And what if the CA site has been hacked, or the end-user's browsers got attacked by DNS spoofing?  Am I thinking impractically?  Please clarify.  That's a good question.



STEVE:  It's a great question.  And we've touched on it a little bit here and there.  We'll be talking in great depth next week, returning to the whole issue of the PKI, the Public Key Infrastructure, where we have defined the roles of Certificate Authorities and chains of trust and so forth, because there have been some proposals recently for ways of addressing this increasingly creaky foundation which relies on every single Certificate Authority in the world that our browsers are trusting all being completely perfect in their behavior.  And we've seen very recently that's not only difficult, apparently it's impossible.



But part of this model has always been the notion of revocation.  The need, the recognition was always there that a certificate might need to be revoked.  The person whom it was issued to might be breaching the agreement under which the authority signed it.  They might be misbehaving.  They might be conducting themselves poorly.  They might have lost control of the certificate themselves so that somebody else has it, and they might say, please revoke the certificate.  We were hacked.  Somebody may have gotten ours.  We'd like another one.  But in the meantime, definitely kill off the one we were using before because we don't want anyone being able to masquerade as us.



So there's many scenarios where there might be some need for not an entire Certificate Authority to be untrusted, as we have just seen with DigiNotar, but for specific certs to be untrusted.  Now, we saw this with Comodo where nine certificates were issued fraudulently.  And in fact it is because there really isn't a really well-functioning solution to this that the serial numbers of those certificates are now embedded in the source code of Firefox and Chrome and other browsers.



There are two solutions that are part of the actual structure, but unfortunately they don't work reliably enough.  One is called a CRL, a Certificate Revocation List, the idea being that certificate issuers also maintain a site, a URL, typically under their domain, where by automation any browser is able to pick up a list of the certificates they have previously issued which have not yet expired, because remember that's where the expiration of certificates comes in handy.  Every couple of years we who use them are forced to jump through hoops to renew them.  But the good news is that keeps these lists of problem certificates from having to grow forever because they only have to revoke those that haven't revoked themselves, essentially, by virtue of having expired.



So the CRL is an example.  And just when I was preparing this question I put into Google "VeriSign Certificate Revocation List."  And if you Google that, it'll immediately take you to VeriSign's very nice page where they list all the different types of certificates they issue and the URLs of their CRLs, their Certificate Revocation Lists for each type of certificate.



And in fact, for example, I was in Firefox.  I clicked on one of the links, and up popped a dialogue with Firefox saying, oh, I'm adding this CRL to my store.  So Firefox was happy to add that computer-formatted CRL, that Certificate Revocation List, to its knowledge of certificates that were revoked, although that was a manual process.  One of the fields in certificates is a link to the signing authority's revocation list.  So it is possible for a browser to be told, prior to trusting any connection, check for revocation.  So that if I were to go to somewhere that wanted an SSL-secured connection, the browser could be configured to look at the certificate which the server has provided, asserting its trust.  And in that certificate will be a URL which the browser could immediately then visit in order to see whether, by serial number, the certificate it is in the process of considering trusting is, as far as the Certificate Authority knows, still trustworthy.  Have they declared it revoked or not?



The problem is that's a slow process.  That requires additional steps every single time.  Now, you can also cache this knowledge, so you would trust for a while, which of course does create a window of opportunity where there could be some exploitation.  That's one of the two approaches.  The second is something called OCSP, which is a certificate revocation service.  And under Firefox, if you're curious, you can look, Firefox can be configured to make an OCSP query on a per-certificate basis.



The advantage there is that there's a third party maintaining revocation lists, and the browser makes a query by serial number, saying is this serial number revoked.  And then the OCSP protocol will say no, it's not.  Or there's even an option that Firefox has for not trusting certificates that aren't affirmatively confirmed, that is, if the OCSP server that you've configured in your browser doesn't respond, normally browsers fail open, meaning fail in a trusty direction, rather than in a not-trusty direction.  You can change that behavior in Firefox.



So there are mechanisms, complex and messy.  They slow things down.  But no one has ever figured out any other way around it because we have this infrastructure right now where we're sort of statically trusting authorities that are in our certificate authority store, and we're trusting, as long as nothing has expired, the things that they have asserted we should trust.  And the problem is, since that signing is done, things can happen to cause certificates to be revoked.  The problem is incrementally, like, verifying every single time we make a connection introduces so much additional overhead, browsers don't typically do it.  The systems are there in place, and hyper-security-conscious people could tell their browsers I really want you to be really secure, but it would slow everything down.



LEO:  Wow.  I think that, you know, it's interesting because this is what the Comodo hacker asserted.  I have broken SSL.  Is no good.  Certificate no good.



STEVE:  Well, he certainly has given us all something to think about.



LEO:  Yeah.  Maybe not so good as we thought.  Last question, actually correction, from Jim Schimpf of Derry, PA:  I've been listening with interest to your development of the Portable Sound Blaster, aka the Dog Killer.  The development board you found is a huge value.  The Xpresso board; right?



STEVE:  Yup, the LPCXpresso.



LEO:  For only a little bit of cash.  I'll have to look into this for some of my projects.  But the Arduino is definitely not in that machine's class.  It's a 16MHz, 8-bit processor.  But I did want to let you know that it is not interpreted code.  You do have the full Atmel GCC tool chain on an Arduino, and you are compiling C or C++ code.  What makes the Atmel chip an Arduino is a boot ROM and a loader.  It's that plus the boot ROM and loader.  You build code that's compiled and linked.  If you use the tool chain outside of the Arduino IDE you can compile and link multiple files, then loaded via the boot loader.



STEVE:  Yeah.  I wanted to make the correction.  A number of other Arduino users were more knowledgeable about it and said, hey, Steve, you mentioned that it was an interpreted platform.  And they're of course correct.  I chose the ARM Cortex M-3 because it runs at 120MHz and is a 32-bit processor and, for example, has a single-cycle 32x32 multiply.  So it's an incredibly powerful little chip.  And amazing that it's $29.95 for the full development platform and all the software.



I poked around to understand what it was, how I got the impression that Arduino was an interpreted platform, and it's just that they use the term "sketches."  They talk about "Arduino sketches" as being these, essentially the source code.  And they do have a wrapper which sort of attempts to make the platform easier to program.  Instead of where in a normal C program you have a main subroutine, and main is invoked by the loader at runtime, and then it's pretty much up to you, well, it is totally up to, typically, what happens, in this sketch mode with the Arduino platform you've got two routines, a setup and then something called "loop."



And so you put in the setup subroutine anything that you want to happen first during initialization at the beginning.  And then the loop subroutine is just continuously called.  And so you put in there all of the code that you want to sort of keep alive and have operating and then - but within that it is just a regular compiled C/C++ framework.  So not with the overhead that I was assuming of interpretation, just a much less powerful based hardware platform, but also certainly there's a lot of support for that, as well.  So I just wanted to make sure everyone had the clarification.



And the guys at the LPCXpresso site, they got 50 in, sold them out, got 50 in, sold them out, got 50 in again, and they were, when I looked this morning, about half sold out of that one.  So I'm just tickled that we've got so many listeners that are interested in poking around with hardware because it's just - it's a world of fun.



LEO:  Yeah, I think that you've started something there, and I think that's kind of cool.  We want to do a show, by the way, kind of about this stuff.  Not a robotics show or an Arduino show, but just a maker show, where we talk about people doing things like the Portable Dog Killer and robots and 3D printers and all of that stuff.  I think it would really be cool.  We want to build a space in the back here.  We have a little lab area where we can do that, be kind of fun.



STEVE:  Cool.



LEO:  Well, Steve, that's it on the 10 questions from our great listeners.  Boy, you all are fantastic.  We appreciate those questions.  We do this Q&A show every other week.  So if you want to get questions in for two weeks hence, all you have to do is go to GRC.com/feedback, and Steve's got a form for you.  Much easier for him to handle than email.  GRC.com/feedback.  GRC, of course, is the spot where you can get 16KB versions of this show, transcriptions, the show notes.  Steve's done a great job there.



We also offer it at TWiT.tv, and you can watch live on TWiT.tv every Wednesday at 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1800 UTC.  If you're at GRC.com, don't forget to check out SpinRite, the world's best hard drive maintenance utility.  It's a must-have, if you've got a hard drive.  GRC, that's Steve's site.  You can follow Steve on the Twitter, he's also there, @SGgrc.  And you've been using Twitter a lot.  Now we've got to move you to Google Plus.



STEVE:  Yeah, I'm there, but I just haven't really figured out what it is yet, so...



LEO:  It's just longer.



STEVE:  I'm busy...



LEO:  And more conversation.



STEVE:  Yes.  I'm busy reading David Weber, our newly discovered author, thank everybody again for that.  Wow, I mean, great, great space warfare stuff, space opera.



LEO:  So I'm wondering if I should get an Audible version of it, look at the free version, get it on the Kindle.  I can't decide.



STEVE:  It's all there for you, Leo.  I mean, you're an Audible user.  Just try the first book.  And I tell you,  you've got - you're opening a serious, beautiful adventure.  And, oh, I should say this author does something I was worried about.  I mean, it's why I really wanted to vet him first before I mentioned him, even though it was that afternoon that I began reading him, after the last podcast, so I didn't really have any opportunity to mention him before now.  But it annoys me when authors of what is clearly a series spend a lot of time in the follow-on books telling us all about everything that we already know from the previous books.  It's like, yeah, okay, I know, I read that one.  And I read the one before.  I don't want to - and this guy, actually I've been very impressed because I'm sensitive to that.  He just beautifully sort of in context tells you only what you need to know.



So if you've picked it up in the middle - and why would anyone do that when all the books are there?  Start at number one.  But if you did for some reason, only Book 5 washed up on the island that you were stranded on, then you beautifully get only what's necessary.  Sorry, you didn't read one through four, you're out of luck on that.  But he does fold in enough just beautifully.  So it's not frustrating.  It's in context.  It's only what you need to know.  I'm just - I'm going to have to stop reading this on my Kindle.  I'm going to force myself back onto the stair climber so that I'm going to...



LEO:  What a good excuse to get some exercise.



STEVE:  Oh, god.  And I think I'm about two thirds of the way through "FreedomTM."  And again, I'm only allowing myself to read that when I'm working out.  So now I have my next series; and, oh, it's going to get me in good shape.



LEO:  Steve, you're the greatest.  Thank you for being here.  I've got some reading to do.  So do you.



STEVE:  And next week we're going to talk about, yup, next week we're going to talk about how we come up with alternatives to what we've talked about several times just now in this podcast, the whole certificate authority infrastructure.



LEO:  Oh, good.



STEVE:  How do we solve these problems?



LEO:  Steve's modest proposal.



STEVE:  No, no, not mine, other people's.  Because everybody knows we've got a big problem here.  So I'll be doing research on that and present it to our listeners next week, Leo.



LEO:  There's got to be a better way.  Thank you, Steve. 



STEVE:  Thank you.



LEO:  Thank you all for joining us.  We'll see you next time on Security Now!.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#319

DATE:		September 22, 2011

TITLE:		CA Trust - Time to Change It?

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-319.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with just a bit of the past week's news, Steve and Leo explore the most mature possible replacement for the Internet's existing (and failing) "trust model," which has always been based upon the unequivocal trust of Certificate Authorities.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 319, recorded September 21, 2011:  CA Trust.



It's time for Security Now!, the show that protects you online against all those sharks and meanies out there who are trying to get your credit card numbers, get your information.  Steve Gibson is here.  He is the host of our show and our anti-shark defender, I guess.



STEVE GIBSON:  That works.  I'd be happy to be the anti-shark defender during TWiT's...



LEO:  Shark repellent.



STEVE:  ...Shark Week.



LEO:  Yes, it's Shark Week on TWiT, by the way.  We have a little toy shark that floats around the studios this week.  I figure it will only last a week because it's inflatable.  So we probably won't have it - it probably won't be around much longer.  But it's a lot of fun.



STEVE:  There used to be, like, networked screensavers, didn't there, where something would wander around the screens...



LEO:  Oh, what a good idea.



STEVE:  ...within a network?  And so it was like, you know, Where's Waldo or whatever this thing was, like it turned all the screens into a single looping fish bowl.  And so the fish, like, swims onto your screen and swims off of yours onto someone else's.



LEO:  Let's do that.  I've got to find those.  I don't know if those are around anymore.  Nobody uses screensavers anymore.



STEVE:  Yeah, true.



LEO:  Used to be that was fun.



STEVE:  True.



LEO:  You don't need them anymore.  So, Steve, today we're going to talk about really kind of the offshoot of Comodo Hacker's attack on DigiNotar.



STEVE:  Right.  There have been - for years it's been understood that the existing model that we have for SSL/TLS trust that is based on Certificate Authorities, which we unequivocally trust to always do the right thing, that model is getting a little creaky and having problems.  And of course in the last couple of weeks, as you said, we've really seen this with DigiNotar, which by the way has declared bankruptcy, which is a...



LEO:  What?  I didn't hear that.  Holy cow.



STEVE:  ...fabulous, yup, fabulous outcome.  I'm hoping that - because basically they had really lame security.  We saw, if we're to trust what was posted by the Comodo Hacker guy, a ridiculously insecure password protecting their stuff.  And they were vulnerable to SQL injection attacks, which just can't be allowed to happen.  So I'm hoping that other security authorities will look at that and say to their IT people, okay, I don't care what it costs, we can't have this happen to us.  So we may have to lose a few along the way to get the rest to pay attention; but, hey, that's a price I'm willing to pay, so...



LEO:  I hate it, though, that this kid, or whoever this Comodo Hacker is, is sitting there gleefully saying, "I brought 'em down, I brought 'em down."  It just makes me - it's almost like he's won.



STEVE:  I don't mind.  I don't feel the same way.  I feel like, if a kid can do this, then other people can have also.



LEO:  True.  True.  



STEVE:  Maybe other people were doing it more quietly.  The problem is of this happening and us not finding out about it.  Because this guy generated 500-plus certs, he wasn't very stealthful.  What we really don't want is this to be done without our knowledge.  So this is, well, there are several things wrong with this whole model, and that's our topic for the day, is how was it broken, and what can we replace it with?  Moxie Marlinspike, our old friend, has come up with something that he suggests, which is actually based on some research and prototypes that were put together by some researchers at Carnegie Mellon.  And that's really going to be the model for what we talk about as a whole different approach toward establishing trust on the Internet.



LEO:  Before we get into all of that, you appeared on Channel 7 in Los Angeles last night.



STEVE:  I did.



LEO:  With consumer reporter Ric Romero, making a case for better passwords.



STEVE:  Well, yeah.  They picked up on a mention in Time magazine a couple weeks before about the Passwords Haystack page and the concept, and they got it.  They understood what it was about.  And they said, "Wow, isn't this important?"  And I said, "I think so."



LEO:  Might be.



STEVE:  So they said, "Let's tell everybody."



LEO:  Well, let's watch Steve Gibson on ABC7 in Los Angeles.



[Begin KABC7 interview]



RIC ROMERO:  How safe are your computer passwords?  Well, I'm going to show you two passwords, and you try to figure out which one is harder for a hacker to crack.  Now, this first one is going to be a series of symbols, and we're going to also put in a few letters and a couple of numbers.  All right?



Now, here's the second one.  This one we're going to use the letter "D," a zero, a "g," and then just a bunch of dots after the "g."  Well, believe it or not, this one right here is harder.  And here's why.



STEVE GIBSON:  Making the password longer slows down their ability to figure out what the password is, and length matters more than complexity.



ROMERO:  Steven Gibson is a computer hacking expert.  Because every password is like a needle in a haystack, he came up with something he calls a "Haystack Calculator."  It's a website that can show you immediately how easy or how hard it is to crack your password.



Unfortunately, people like to use simple passwords so they can remember them, and "123456" is the most common password.  And the word "password" is also near the top of the list.  And so is this phrase:  "iloveyou."  In fact, they are so common, hackers actually put them into a dictionary of passwords.



So Gibson says you need to make the haystack as big as possible to really hide the needle, and Gibson's calculator shows how longer passwords make the haystack bigger.  Here he demonstrates by adding one character at a time.



GIBSON:  We can see that the length of time required is increasing very quickly, to the point where now we're at, in the worst case, 38 centuries.



ROMERO:  Before the password is hacked.  In other words, you don't have to make the password so complicated you can't remember it.  Just add more characters.



GIBSON:  And it doesn't matter what they are.  They could just be colons; or, you know, come up with something that is like your own personal secret.  And you add that to your password, and it makes it vastly stronger.



ROMERO:  But the safest passwords will have at least one letter in uppercase and another one in lowercase.  There will be at least one digit and one symbol.  12 characters long is optimum.



[End interview]



LEO:  That's great.



STEVE:  Isn't that good?



LEO:  I can't believe that ran on a mainstream nightly news telecast.



STEVE:  Yeah, I know.  And I showed it to my baristas at Starbucks this morning, and they're like, wow, "I'm going to change my passwords.  That's really good.  I thought they had to be absolutely impossible to remember."  I said, "Not so much.  You want it not to be in a dictionary.  But as soon as it's not in a dictionary, then length trumps complexity from there."  So, yeah, I mean, it was at 5:40 p.m. in L.A. on - I guess they have the biggest market share down here, too.  So a lot of people watch KABC.



LEO:  Good.  You did good.  You did good, Steve.  That's excellent.



STEVE:  That was very cool.  Came out nicely.



LEO:  Yeah.  So I'll tell you what.  Why don't we launch into our news and our hack updates and all that stuff, and I will get the commercial after we do those, before we talk about our conversation of the day, which is the future of Certificate Authorities.



STEVE:  Okay, well, we have very little, happily little security news.



LEO:  Yay.  I love it when that happens.



STEVE:  Yes.  Especially since we have plenty to talk about, non-newsie stuff.  I did note that DigiNotar has declared bankruptcy.  Wired.com's Threat Level page covered the story, as did a number of other venues, and they said:



"A Dutch Certificate Authority that suffered a major hack attack this summer has been unable to recover from the blow and filed for bankruptcy this week.  DigiNotar, which is owned by Illinois-based Vasco Data Security and was the primary provider of digital security certificates for domains owned by the Dutch government, was breached in early June due to lax security."  So RIP, DigiNotar.



And I will say again, this is a fantastic outcome.  It's like, yes, it's not convenient for all the people who purchased DigiNotar certificates.  I don't know if there's any recourse for them except to write off the balance of amortized time and cost that they had on their certs before they expired and go buy replacements from someone else.  But there's no way that a Certificate Authority can survive if none of the browsers are willing to trust them.  And that's exactly what happened.  As we've been covering over the last three weeks, all the browsers yanked their trust for DigiNotar in order to defend the security of the browser users.  And that immediately puts the authority out of business.  It's RIP time.



So, I mean, this is a great outcome because all other Certificate Authorities looking at this have to recognize - I mean, these are companies.  There are hierarchies of management.  Nobody ever has enough time.  IT never has enough money.  And so in a boardroom they're deciding who gets how much money.  And the amount of money that the IT get for security is a function of the perceived need for it.  So this kind of event filters down through corporate hierarchies and changes the priorities in a way that benefits us, the people who are trusting these Certificate Authorities that our browsers are trusting never to make this kind of mistake.



So as we know, security is not black and white.  We need this kind of - we need the security of the remaining surviving Certificate Authorities to be maintained and kept as high as possible.  So this was - I celebrate this.  This is a great outcome.  I'm glad that it happened as cleanly and as quickly as this.  And really there was no other outcome.  If browsers are not going to trust you, it's over.  I mean, your entire business is issuing certs that are trusted.  And if you can't do that, you're gone.



LEO:  Yeah.  I just dread another manifesto, another Pastebin manifesto from Comodo Hacker saying, "I'm the king of the world, yay."



STEVE:  I would say he earned it, so...



LEO:  Okay.  There you go.



STEVE:  I really, you know, it's like, if they're going to have something as lame as an SQL injection attack on their browser, boy - and then policies where, remember, they knew about this for weeks, many weeks.



LEO:  Yes, no kidding.



STEVE:  And they kept it quiet.  And it's their behavior as much as the breachiness of their network that is responsible for their downfall.  Mozilla was livid that they were not notified.  They saw indications that DigiNotar clearly recognized that they had had a breach, and they said nothing.  So it's like, okay.  It's one thing to have a breach.  It's another thing to misbehave afterwards.  So it's not only that their security was untrustworthy, but they themselves, their own response to that.  Because, I mean, I would cut them slack.  I would say this could happen to anybody, unfortunately.  We don't want it to happen to anybody, but it can.  The question then is how do you respond?  And they did not respond properly.



Okay.  Speaking of not responding properly, the, quote, "news," unquote, outlet that I love to hate, TheRegister.co.uk, ran the headline:  "Hackers break SSL encryption used by millions of sites."  This was endlessly tweeted to me over the last week.  And so it does - something has happened, and it's interesting and significant, and it is the topic for Episode 321.  But everybody, don't unplug your browsers.  The end of the world is not nigh.  We're going to be fine.  They said, that is, TheRegister.co.uk said:  "Researchers have discovered a serious weakness in virtually all websites protected by the secure sockets layer protocol that allows attackers to silently decrypt data that's passing between a web server and an end-user browser."  And that's not true.



Later this week some researchers in, I think, Brazil, at a conference in Brazil, are going to demonstrate something that they call "BEAST," which is a cool acronym for Browser Exploit Against SSL/TLS.  BEAST is described as a "cryptographic Trojan horse."  And quoting from one of the articles that I had seen written up, they said, "An attacker slips a bit of JavaScript into your browser, and the JavaScript collaborates with a network sniffer to undermine your HTTPS connection," says Trevor Perrin, an independent security researcher.  "If the attack works as quickly and widely as [the researchers] claim, it's a legitimate threat."



Okay.  So I will, just so people understand what's going on a little bit before we cover this in really some fun detail - because this is an interesting hack.  This is nothing new that was discovered.  A vulnerability was understood about six years ago in our SSL protocol.  The nature of the problem is that we've talked about encryption modes, modes of encryption where we take a symmetric cipher, and instead of encrypting each 128-bit block, for example, in the case of AES's Rijndael, which is 128-bit-at-a-time symmetric cipher, instead of encrypting each 128 bits, and then the next 128 bits, and the next 128 bits all independently, there is some weakness there because that would mean that anytime the same 128-bits was encountered as plain text, it would encrypt into the same 128 bits of cipher text if it was under the same key.  So that's not a good thing.



So they take some residual from the prior block's encryption and mix it in with the next block's encryption to create a chain.  And we talked about this, in fact, when we were talking about my Off The Grid cipher.  I wanted to create the same kind of dependence between encryptions of individual domain name characters, and that's where you have this notion of sort of walking around this Latin Square where your position creates memory in the system.  Well, similarly, the prior encryption block creates memory that feeds into the next encryption block.



Well, the way all encryption up to v1.1 of TLS operated was that the residual from the last block of the prior packet was used to initialize the first block of the next packet.  But that's the nature of the vulnerability.  Because there's a little residual crossing between individual packets, that allows bad guys to get in there.  And again, this has been known as a problem for six years, and it was fixed in v1.1 of TLS, and it's continued into v1.2 of TLS.



Anyway, it's an interesting hack.  We're going to talk about it in two weeks.  But it isn't the end of the world.  Hackers didn't discover anything.  And it's not even clear how exploitable it is because apparently you have to get JavaScript into your browser first.  Well, the JavaScript, unless they've come up with a way of breaking the same origin policy, which no one has come up with a way of doing yet so presumably they haven't, then the JavaScript has to somehow come, the malicious JavaScript, in order to execute, from the site you're visiting.  But if you have SSL up then, or even on an SSL page, then it's not clear how you get the bad JavaScript in in the first place in order to somehow collaborate with the sniffer.



Anyway, there's a lot we don't know.  It looks like it's sort of a - it was a theoretical problem six years ago that is somewhat less theoretical today, but far from "Hackers have broken SSL for millions of websites that use it."  So I wanted to let everybody know, we're going to go into it in detail in two weeks, but in the meantime don't worry about it because it looks like it really can't get anybody.



LEO:  All right.



STEVE:  And finally, just a little miscellaneous comment.  The boards for my Portable Sound Blaster have been bouncing in and out of stock.  They get 50 at a time.  They sold out again after last week.  They're back in stock and currently have 36 in stock.  I imagine this is probably - we have to be winding down.  But I'm just tickled that so many of our listeners have been curious about this and are buying these little puppies.



LEO:  We don't have to be.  We might sell all 35 before the end of the show.



STEVE:  We may well.  But I wanted to let people know, who may have been disappointed that it was sold out again, that it's back in stock at LPCTools.com.  And you know that you're at the right page because they added a little blurb in red saying this is the one Steve Gibson was talking about on the podcast.



LEO:  I love it that they did that and gave a link to the podcast.  That's fantastic.



STEVE:  Yeah.  And sort of an interesting note from Loncey Mills about SpinRite.  And she said, "Dear Steve, I recently purchased my first copy of SpinRite to help with an issue I've been having with my laptop.  Now, this isn't a story about how SpinRite saved me in the last second of the last minute of the last day before the big collapse.  Neither is this a story about how running SpinRite on Level 5 recovered my data and found my neighbor's lost kitten in the process.  No, this is something more sublime.



"Following other investigative procedures, I ran my new copy of SpinRite on Level 4 and was able to determine that my physical memory dump blue screen errors - Windows XP, folks - are not related to drive issues, but more likely due to excess heat.  SpinRite told me about that.  But finally, long story short" - and I think Loncey's probably wrong about this, I think it probably was a hard drive problem, as we'll see in a second.



But she says, "Finally, long story short, I ran my Windows defrag utility on my five-year-old laptop after using SpinRite and was then confronted with something I had never seen before:  a 100-percent perfectly defragmented main drive.  I was intrigued when I first saw the red stripes of unmovable regions that I had grown so used to beginning to disappear rapidly in the defrag window, and then I froze when they disappeared altogether and didn't come back.  I had to take a screen shot to prove this to myself after the utility was done.  Apparently I wasn't hallucinating.  SpinRite has many uses, as I've heard on the Security Now! podcast.  But this is a great side effect of the medicine that is SpinRite.  Thank you.  I feel better now.  Sincerely, Loncey Mills, New York, NY."



LEO:  I love the name "Loncey Mills," too.



STEVE:  Yeah.



LEO:  Love it.



STEVE:  So thank you, Loncey, for sharing.  And it's probably the case that there was something subtly not happy on the drive that was keeping Windows from being willing to relocate those areas, and SpinRite cruised across them.  Even though it may have reported nothing clearly done, the drive is happier now.  So probably the blue screens are gone.  And certainly we got a complete defrag, which I have seen before also.  So that's very cool.



LEO:  All right, Steve.  Let's get to work here.



STEVE:  I actually have two other little bits of completely random miscellany.  I thought you'd get a kick out of knowing that I, Monday, made the mistake of trying an eight-shot latte.



LEO:  [Laughing] No good?



STEVE:  Not.



LEO:  Steve, you've got to build up slowly.  You went from five to six.



STEVE:  Yeah, went five to six.  I've been doing six for a while, and I thought...



LEO:  Slowly.



STEVE:  I've been thinking, you know, six just doesn't really have much zing to it anymore.  Well, boy, let me tell you.  Eight shots.



LEO:  Yeah, you felt it with eight, huh?



STEVE:  Oh, yeah.



LEO:  What is that?  Is that like - that's 1.6 grams of caffeine?  Something like that.  That's a significant amount of caffeine, of just pump right in, boom.  You know, you could inject those, and you'd probably...



STEVE:  I enjoy my mornings on the patio, and I just don't feel cold, no matter what temperature it is out.  So...



LEO:  And you get a lot done.



STEVE:  Yeah, I really do.



LEO:  So you're back to the six?



STEVE:  Yeah, I went back.  I dropped back to six, and I'm happy there.  I'm going to stay there for a while.



LEO:  Yeah, yeah.



STEVE:  The second thing is I have sworn off any more reading of David Weber until I'm on my stair climber.  I slipped into book number two, which I finished already because I just cannot put it down.  And I will tell people, and I know you, Leo, especially, anyone who is not nearly moved to tears or at least really choked up at the end of book two isn't human.



LEO:  Wow.  Wow.



STEVE:  Oh, my god, it's good.  It is...



LEO:  So basically I'm getting this picture of Steve Gibson, hopped up on eight shots of caffeine on his treadmill, bawling his eyes out.



STEVE:  Not on my treadmill.  That's been the mistake - or the stair climber - is that I broke down and started reading on the Kindle, which I could do almost 24 hours a day.



LEO:  Ah.  Now you're eating it like candy.



STEVE:  I am not going - first of all, I'm not touching it until I finish FreedomTM.  I'm about two thirds of the way through.



LEO:  I'm surprised you were able to put that down because that's a pretty - at the end especially gets very gripping.



STEVE:  Well, believe me, Leo, after 60 minutes with your heart rate at about 155, and saturating a paper towel that you've got rubber-banded to your forehead, it's not about putting it down.



LEO:  [Quietly hysterical]



STEVE:  It's about I'm rereading sentences because I have a hard time understanding them any longer.  So, yeah.



LEO:  Oh, well.  I'm just glad - I can't wait to read these books, but I am holding off.  I have too much to do to get hooked into a series.  How many books are there, 20?



STEVE:  There's 11, and there's a 12th one coming.  And, oh, they're just - it's so well done.  The writing is spectacular, and the characterization, the development of the people.  And he doesn't mind killing off important people.  So it's like, ooh, I like that guy.  Whoop, he's space dust now.



LEO:  Space dust.



STEVE:  But, oh, boy, it's just - it's fantastic space opera.  So I wanted to remind people again, David Weber is the artist - is the artist - is the author, and the series is Honor Harrington.  The second book, well, the first one was "On Basilisk Station."  The second one was "The Honor of the Queen."  So, yeah, I just, oh, wow.  But for those of you who are waiting for the completion of Off The Grid, I am not reading any more of this.  I actually had someone tweet me, "Steve, just put the Kindle down.  We want Off The Grid finished so we can start using it."  I know there's a ton of people waiting for me.  So know that I am back on it.  I did lose two days cleaning up my office in order to have KABC come in and do their filming.  That ended up being worthwhile.  So I'm back to work now, and I'm going to get Off The Grid Finished.



LEO:  Good for you.



STEVE:  Okay.  We know that the - okay.  I had a note to myself.  Reality Check #1:  Some problems are hard and do not have good solutions.  This is one of them.  Another one, for example, is terrorism.  People don't want to acknowledge the nature, the fundamental nature of asymmetric warfare and that there just is not a way to defeat a tactic.  You can't go to war against a tactic.  And so, like terrorism, the problem of trust on the Internet is arguably an intractable problem.  It doesn't have a good solution.  There just isn't, like, some magic  thing we haven't thought of yet.



And you could probably, if you were a student of philosophical logic, you could probably assemble a proof that there isn't a good solution, that you have to trust somebody, and if you're going to do that, then they have to be perfect.  And we understand that perfection is something which is inherently probably impossible for our solutions today to provide.  So we've had to settle for something less than perfect.



Well, we've just seen a beautiful example of the way the Certificate Authority hierarchy fails us, and that is, our browsers trust, unfortunately, a distressingly large array of Certificate Authorities, each of whom has the ability to sign any certificate for any server on the Internet.  And because we have to trust in the perfect performance of every one of those Certificate Authorities, if any one of them screws up, then we're vulnerable to a certificate that they have signed which we inherently trust.  So a lot of bright people have said, okay, this is getting kind of creaky because now the number of Certificate Authorities is up to 600, and we're beginning to see cracks in this infrastructure.  What can we do different?



Now, the other problem that we've talked about in past podcasts - and those of our listeners who haven't gone way back to number - I wish we did start with number zero, Leo.



LEO:  That would have been the right way, the right thing to do.



STEVE:  It would have been the right thing.  The number one.  We have talked, for example, about - and I've grumbled about that these things are not free, either, these certificates that I'm buying from - I have been buying them from VeriSign.  VeriSign never gets any more of my money.  As we know, I'm switching over to DigiCert toward the end of the year.  When the first one of my VeriSign certs expires, I'm going to move them all en masse over to DigiCert because they look really good.  They haven't made any mistakes.  And they're a lot less expensive for the certs that I want.  I'll be able to switch up to the extended validation certs, and they just look like a great company.  So I'll be moving over.



But there are many websites where arguably we don't require the authentication which a real-world process, an inherently offline process requires for someone's identity to be asserted.  But we would like to have an SSL connection for privacy's sake.  Which is to say that - and I'm sure all of us, probably these listeners of a podcast like this more than the general public, and I know you have, Leo, will go to a site which is sort of off the main beaten path, and maybe it's run by some UNIX curmudgeon who refuses to pay anybody any money to have an SSL connection to his server.  So what he does is he self-signs.  He has a certificate that he made himself, and he signed it himself.  So he's just saying, "I am me, darn it, take it or leave it."



LEO:  Yeah, right.  That gives you SSL; right?  It's just that you can't verify identity.



STEVE:  Precisely, because he signed it himself.  Which is to say anybody could sign a certificate.



LEO:  I've done it.  We've all done it.



STEVE:  Yup.  In fact...



LEO:  I'm a self-signer.



STEVE:  I have a server that, not surprisingly, is called "Steve," which is what I use for testing my stuff locally before I publish it up on GRC.  So I have "www.steve" and "steve."  And I've got self-signed certificates that last a hundred years, so I don't have to worry about them all the time.  And so I've trained my browsers to stop bitching about them.  Yes, I trust this strange person named Steve who apparently signed his certificate by himself, for himself.  And that way I'm able to establish my own local SSL connections to test the SSL paths of things I'm doing.  So it's very useful for me.



And so what happens is some people will go to a site, which is not a major site, which can arguably afford the every-two-year expense of having certificates reauthenticated and signed by a trusted authority, and they don't want to.  They're just saying, look, if you want an SSL connection, here's my certificate.  I signed it myself.  Take it, and whoever I am, you can have privacy, but you don't get authenticity because I'm not willing to pay any money to a third party to tell me who I am.  So, okay, fine.  But the problem is - we have a new acronym, which I really love, and our listeners will, too, which is called TOFU, T-O-F-U.



LEO:  So first you have PEE, then PIE, and now TOFU.



STEVE:  We have PEE; then we have PIE; now we have TOFU.  TOFU stands for Trust On First Use, which is inherently what we're doing.  We're going to somewhere where the site says, hey, I've got SSL, but I'm not having any third party vouch for me, so trust me.  Now, theoretically, if at that instant somebody had a man-in-the-middle attack up against you, then you're accepting as that site whatever certificate they give you.  And you're not having it verified with a third party.  So you are trusting what you get on first use, that is, TOFU.  And you're telling your browser, yes, I know, it's okay, trust this and don't bother me about it anymore.



So that's a worthwhile model, which is to say, I mean, in general it would be nice.  We've talked about the overall problem that we're not using SSL all the time.  It would be a much better Internet if we were.  Yet, arguably, lots of servers don't feel the need and for whatever reason don't want to expend the cost of maintaining certificates.  So as a consequence we don't have private connections to them.  We've got completely sniffable, in any public WiFi or in many LAN situations, completely sniffable communications.  So, and then there are other situations where, for example, we've got multiple web domains hosted on the same IP, and that causes problems with SSL certificates because servers need to bind to an IP because you establish your connection before you exchange SSL data, and so it's difficult to disambiguate multiple domains on the same IP, although that has been addressed in later versions of these protocols which are not yet prevalent.



So we've got a number of problems.  So it would be nice if there was, first of all, potentially a way of doing something better than our current certificate hierarchy, where we've got our Certificate Authority, and we trust those guys to be absolutely perfect.  And it would also be nice if we had something better than, maybe not perfect, but better than the TOFU model which allowed us, for example, imagine if it were possible to have sufficient trust in self-signed certificates so that users were not even bothered.  If that were the case, then it would be much more likely that all websites, or a much greater percentage, could say, hey, let's add self-signed certificates to our server because all the browsers now support this alternative model.



So Moxie Marlinspike, our old friend, has put together - he gave a Black Hat presentation about a system which he has put together called "Convergence."  It's at the website Convergence.io.  And he currently has a Firefox add-on which you can download and install, which essentially lifts you up off of the traditional CA, Certificate Authority, hierarchy into an entirely different model of certificate verification authenticity which is based on what I guess I would call a "federated trust" model.  It's based on some work from about three years ago that was done by folks at Carnegie Mellon.  And they even produced, these guys, the CMU folks produced a Firefox add-on called "Perspectives."  Their project is at Perspectives-Project.org.  And anybody who's curious can find a PDF, it's a 14-page PDF from the USENIX '08 conference where they presented this.  Okay.



The idea is that you would change your browser or enhance your browser, or browsers, to trust a sort of a top-level notary organizer.  The idea is there's a network of geographically distributed "notary servers," they call them, because the notaries, just as a real-world notary, witnesses you signing some document and then adds their own notarization to the document, saying we witnessed this.  These notaries are sort of independent probes of the SSL/TLS certificate system.  The idea of them being geographically spread is you would like them to be widely distributed across the Internet so that they have completely independent links into all of the different web servers that they're probing and completely different links into you.



So the idea is this geographic spread gives us network-level robustness against man-in-the-middle attacks where a bad guy is able to insert themselves somewhere in the network.  So if immediately your traffic, as we the client probes these notaries, if it heads off in different directions, then any one link or set of routes that may be compromised still leaves out others that aren't.  So this geographic spread is a good thing.  And the same thing is true on the side of the notaries, which are checking in with the various servers.



So the way this works is that our browser holds the public key of one or more of these notary organizers.  The notary  organizer is sort of the master coordinator of a group of notaries under its management.  So, for example, the EFF might be running a Perspectives set of notaries, spread all over the globe.  And our client that uses this system would come probably with their public key built in.  And maybe other organizations would run, like well-known trusted organizations would also be running their own notary networks.  So the point is we somehow receive these notary coordinator public keys out of band, meaning not over the Internet or not through normal daily processes, but probably bound into, sort of like built right into the clients in the same way that right now we have Certificate Authorities whose public keys are bound into our browsers.



So again, you always have to have some beginning trust route that you work from.  So the client asks the notary organizer for the list of notaries that it manages, and it provides a list by their IP address and their public key.  So, note, not their DNS name, but their IP address.  So this lifts us immediately away from a dependence on DNS.  So that requires that these notaries be at fixed IPs, or at least that this list be updated if those IPs should change.  But they're not expected to change often.



So now we have a trusted, signed list of notaries.  And we're talking about, oh, maybe 20 that are scattered around the globe.  Our client maintains, that is, a browser, or whatever utility we're using that wants to establish verifiable SSL connections, maintains its own local cache of the public keys it has seen before.  Now, that's different than what we have today.  Remember that today, as we make an SSL connection, we receive the public key from the remote server, which is bound into a certificate, which has been signed by someone we trust.  And on the spot we verify the timestamp, that the certificate is not expired, and also that this certificate was signed by someone that we currently trust.  That happens every time we make a connection.  So, and because it's all local, it's very low weight.  It doesn't cost any time for us to do that right here.



So we add something - so this system starts by adding something different.  Now we have the notion of a cache of certificates that we have seen before and that have already qualified themselves as trustworthy.  So in the typical case of, like, going back and reestablishing an SSL connection to Amazon or to MSN or to Facebook or Google, we will be receiving public keys which are already in our cache and have already passed muster.  And we'll talk about what that process is next.  But so in general we're seeing, oh, yeah, same key we've seen before, trust it, period.  And so off we go.  So there isn't a lot of overhead in the case of ever revisiting a site that we've seen before which has not changed its certificate and also which is not currently suffering some sort of an attack.



So in the case that we encounter a new certificate, the client looks and says, wait a minute, never seen this one before.  Let's see what the Internet thinks.  Essentially, let's see what our network of notaries thinks about it.  So we use a very lightweight protocol, which - and we've talked about UDP before.  There's no three-way handshake, send SYN, SYN/ACK, and ACK packets and all that.  It's much more lightweight in the same way that DNS is.  We randomly select maybe 10, for example, and in their paper they use a range 4 to 10, so a bunch of notaries from our trusted notary list, which we get from sort of this essential notary coordinator.  And to those IPs we immediately, in parallel, send out, using a UDP protocol, so it's just a single packet, we send out a query for the most, well, for the history - and this is another important aspect - for the history of certificates that each of those geographically dispersed notary hosts has seen in the past.



They receive our single UDP query.  And if they know something about that machine, they respond.  They maintain a cache and a history of each domain's certificate past.  So if they have not yet encountered, if they don't already have some history, then that stimulates them to go query that domain and initiate a history for their response, which won't be much of a history, but at least it's something.  And again, even that is significant because we've asked the server, over a direct path from us to the server and back, for its certificate, and it gave us one.  But in order to, even with no other history, in order to verify that through this system, we send out a call to the four corners using UDP, saying what does anybody know about this guy?  So that goes out immediately in a whole bunch of different directions to servers which will then make a query to that domain name, if they haven't encountered it before, from a whole bunch of different directions.  So immediately we get away from the notion of a single path being compromised.  



Now, in the typical case, though, of a high-use website like Amazon or Google or Facebook, whatever, there will be an existing history.  These notary servers typically probe all of the domains that they are maintaining a list of several times a day.  And as long as they see the same public key come back as is the last one in their records, they simply update a time-last-seen timestamp.  So this history of public keys, which they maintain, it has a time first seen, timestamp of last seen, and what the public key is.  So those geographically distributed notaries send all this information back in responding UDP packets.  So very quickly our client has, from the four corners, it has a blob of data.



Now, the last-seen timestamp will probably be different on all of them, as will the first-seen.  But what happens is, if you can imagine that all of these notaries are independently probing this domain, poking at it a few times a day, asking for its public key, they're ending up with a growing level of certainty over what this domain's public key is.  So if the client receives the records from all these different notaries, which all agree about what this domain's public key is, and if there's large overlapping agreement in how long this key has been valid, and it matches the key which is pending for the conversation we're in the process of starting up - remember, we only have to do all of this if we haven't ever contacted this site before so that we don't already have its public key in our cache, or in the typically unlikely case of the key changing, which will happen, for example, every two years.



So this allows us, without a single point of trust, which we have always had so far with the CA-based technology, it allows us to establish a substantial level of trust which is also inexpensive, unlike the inherently sort of human overhead of verifying real-world identity, which is what I go through, for example, every couple of years with VeriSign, where they make me jump through some hoops.  There's, like, telephone confirmation, and I've got to get Sue standing by GRC's phone line because that's the number that they've got, so she's got to be there to say, yes, this is me.  And there's a lot of physical world hoops you jump through.  That's never going to be inexpensive.  So we would call that a way of binding the identity to the public key.



This system is fully automated and establishes sort of a geographically distributed and temporally distributed trust in the binding of a public key to a domain in a way that's automated, so it's fundamentally less expensive.  And what it means, for example, I would argue that this probably doesn't replace BofA's certificate being signed by VeriSign.  You still really maybe ultimately want authenticity, or authentication.  And the only way you can really get that is if you really trust VeriSign to never make a mistake, and VeriSign is asserting this is really BofA.



But we've seen this break down.  And what's arguably superior about this distributed system is it doesn't have a single point of failure.  A bad guy that compromised a key would have some of these notaries not agreeing.  If bad guys compromised one or two of these widely distributed notaries, then the notaries wouldn't agree.  So we have redundancy among these notary servers.  We have redundancy because we're not running all of our verification across a single link.  It immediately spreads out as it leaves us, going in different directions to widely geographically distributed notaries, and their probings of the server comes into the server from their widely geographically distributed locations.  So we get a lot of redundancy, a very lightweight UDP protocol, which we only need in the instance of having a non-expired certificate that we have never seen before, and one that we don't already trust.



So what the user's client also gets is something we've never had before, that is, the notion of security policies.  At the moment, we've either got yes or no.  Either the browser trusts the certificate because it was signed by someone it trusts, that is, in the existing model, or it doesn't.  It's either good or bad.  But now we have much more control over the nature of the way we want to trust.  So, for example, in the clients, they're able to tell us what they have found out and bring it to us in a sort of a user-friendly way.  They could say, for example, the key you've just received from this domain that you're wanting to connect to has been seen consistently across the notary network for X days.  And that could be 572.  And so if that's what you're told, if you're told from this widely distributed network that this is the same key that they've all been seeing for 572 days, that's better really than anything in terms of real reliability that the Certificate Authority system we have today is able to assert.



LEO:  Sounds like a good way to do it.  I like it.



STEVE:  Yeah.  Or it could say we have a suspected attack.  The offered key is not consistent.  Only X out of Y notaries currently see it.  So that would raise some alarm.  Or you could get a warning:  The server key has only been consistently seen for the past X days.  So, for example, maybe two.  Or the offered key conflicts with the cached key, but has been consistently seen for X number of days.  Now, that's what you would expect to see if somebody had just updated an expiring key with a new one.  You would have the old one in the cache, and this would be changed.  But the notary network that would have already been probed, it would be probing multiple times a day.



And probably other people would have certainly driven that target domain's current key into their new list.  You would be able to see, oh, your old key was in the list, and it's been replaced by the new key.  So you could see that there was an old key that they all had, which is what you still have in your cache, but now everybody for the last five days has got this new key, and that's what you've just received.  So it allows you to basically track major changes and really not fall prey to the kind of attacks that we are seeing before.



So on Moxie's site, Convergence.io, what he's basically done is implemented everything I've just said in a Firefox plug-in.  And he's got a page of, like, benefits.  And I'm just going to run through them, now that we've got an understanding of what this architecture is, I want to run through the things that he's claiming, and we'll just discuss it in that context.  So he says his Convergence.io system is secure.



He says, "Convergence is a secure replacement for the Certificate Authority System.  Rather than employing a traditionally hard-coded list of immutable CAs, Convergence allows you to configure a dynamic set of notaries which use network perspective to validate your communication."  And that's exactly what we've just heard me describe.



He says, "Trust Agility.  Convergence allows you to choose who you want to trust, rather than having someone else's decision forced on you.  You can revise your trust decisions at any time, so that you're not locked into trusting anyone for longer than you want."



He says, "Distributed.  Convergence makes it easy for anyone to run their own trust notary."  Which is a good point that I didn't bring up.  Individuals can run their own, if you chose.  Or your organization could run its own, if you were, like, a big company like IBM with offices spread all over the place, set up trust notaries, manage your own central organizer, and then have your own IBM client browsers use this system as opposed to the centralized Certificate Authority system.  So that's entirely possible within this same scenario.



He says, continuing on this topic of running your own trust notary, "Each notary can only make security decisions for the clients that have chosen to trust it.  So the security, integrity, or accuracy of a notary does not affect those who have not selected it" for trust.



"Robust.  Convergence can be configured to require trust consensus amongst multiple notaries, preventing any single notary from having the ability to compromise security."  Which is another good point.  Right now we rely entirely on one single Certificate Authority operation to sign a certificate.  Here we're inherently not relying even on a single notary because, if we send out probes to 10, and a couple of them have been compromised, or a couple of the links to or from them have been compromised, they won't agree with the rest.  So we can go, okay, something's a little flaky here; but the majority of them agree, so it looks like this is good to go.  Or we could be really super cautious and say, uh, we're going to decide we don't want to do any trusting right now, until we figure out what this means.



And he says, "Simple.  Convergence is fully backward-compatible with the existing deployment of certificates and does not require website operators to change anything."  Oh, I forgot one point, and that is that, if a site wanted to make sure it's Convergence friendly, or Perspectives friendly, all - for example, say that I wanted to make sure that I was listed.  All I would have to do as the site owner would be to send a request to these various notaries.  If they didn't already have me in their list, they would treat me like a client.  And so they would request GRC's public key on my own behalf.  And so that's a way I have of making sure that they're able to respond to queries about me quickly.  So that's another sort of a cool thing.



And he says, "Just install the Firefox add-on, select whom you trust, and be done with Certificate Authorities forever.  Everything will look exactly the same, and you'll never get a self-signed certificate warning again."  Which is one of the very cool things, which is, as we were saying at the top of this topic, going to a site which has a self-signed certificate has had the downside that people would get warnings, and I'm sure many people go, "I don't know what that means.  I'm just going to - I'm going to click away from this."  Now this system beautifully solves the self-signed certificate problem in a way that doesn't cause any trouble.



So I wouldn't - while this could be used as a replacement for the Certificate Authority system, I see this as really nicely augmentative, and potentially allows lots of sites that have not, before now, been able to justify the loss in traffic of a self-signed certificate to say, yeah, this is not going to raise alarms.  And now we're going to be able to give people privacy, and at zero cost.



Ah.  And he also says, "Anonymous.  Convergence caches trust information locally, and has a mode to shield your IP address from notaries when communicating with them, so that you never leak your browsing history to anyone else."  Now, that is a downside of this system which is worth mentioning.  And that is that, if we don't have a domain in our cache, we are asking a third party for verification of that site's specific public key.  Which means - and we're sending UDP packets, which means the notary can, if it wished to, monitor where we're going.



Now, that is, I mean, like I said, there aren't any free lunches here.  The beauty of the existing system is that it is fully anonymous.  We trust Certificate Authorities.  There's no traffic from our browsers when we go to a site we've never seen before because it will be signed by someone we trust; therefore we trust the certificate implicitly.  Well, we don't have that.  If we use this notary-based system, we are leaking out to this network of notaries where we're going.



Now, I don't know how Moxie has gotten around that.  Maybe, well, I just don't know.  It's hard for me to imagine, and I haven't looked into it.  But it is worth noting that in this case, in the case of at least the Perspective systems, we are leaking our browsing history.  So that's reason, for example, to use a network like the EFF, where it's really clear that these guys are on the side of privacy and on our side, so that they're not logging and not tracking us and doing anything else nefarious with this information.  But that is a downside of an active traffic-based approach.



At the same time, we were talking about revocation the other day and the OCSP problem.  The Online Certificate Status Protocol has the same problem, that is, for our browser to be told to check for a certificate being revoked means that we're sending that off to a third-party server to ask if the certificate is still okay, and it's able to see who we are by our IP address, and also what site we're asking it about.  So again, some of these problems do not have really good solutions.



And he says it's fast.  "Convergence is so lightweight you won't even know it's there."  And proven.  And he says, "Convergence is based on the ideas originally developed by the Perspectives Project at Carnegie Mellon University."  So that is arguably the alternative architecture that has, I think, a very good chance of gaining traction.  We've got a plug-in now for Firefox.  If this begins to gain traction, I could see other browsers supporting it, at least as an option, as a lightweight solution for maybe not existing signed certificates, but certainly certificates that are self-signed, if we want to say, okay, I really don't want to see these as long as a bunch of notaries whom I trust are all saying, yep, this is the one we've seen this site providing.  This is probably really theirs.



So it's a neat system.  And by getting around the need for real-world verification of identity by binding it through an automated system rather than a physical system, we end up being able to do it at no cost and very little overhead.  So that's the alternative.  And no one's come up with anything better.



LEO:  I like it.  And thank you, Moxie Marlinspike, not his real name...



STEVE:  Yeah.



LEO:  ...for the plug-in.  And the idea.  Do you think there's - okay, let's be honest.  Is there a chance in hell this'll happen?



STEVE:  No.



LEO:  [Laughing] We have such an entrenched system.  Although the notary addition doesn't seem like such a big deal.



STEVE:  Yes.  And, I mean, if we - okay.  So there's really no way to bring up ubiquitous SSL except to solve the problem of self-signed certificates annoying users.  This really does that.  This really, if all the browsers had this system - and if they did, of course we would then add nice, simple-to-use utilities that all webmasters could use to generate self-signed certificates - then this would be really cool.  And, in fact, you could imagine something nice where a header in non-SSL communications could mention that, in the same way that we have a do-not-track header, there could be a header saying  "I support a self-signed cert."  Then that would tell your browser, oh, let's bounce back to this guy over SSL rather than over not, knowing that we've got a self-signed cert, and that would allow us to have privacy.  So you can see that it could be implemented in a safe and clean fashion that would allow people to switch over to privacy by default, rather than no privacy by default, which would certainly be an improvement for the Internet.  That I could easily allow this, I could easily imagine this system doing.



LEO:  It's the kind of thing that - I'm just trying to think of who would, who could use, who could strong-arm this kind of system.  Is it ICANN that could kind of push this kind of system in?  Who...



STEVE:  Well, actually ICANN, or the IETF...



LEO:  IETF, that's who could do it.



STEVE:  Yeah, they are looking at...



LEO:  Because it's their standard.



STEVE:  Well, they're looking at a DNSSEC-based approach, where secure DNS would be used to independently offer certificates instead of the Certificate Authority.  So the idea would be we would use the next-generation signed DNS records in order to say, okay, this is a way of now we're getting the IP address in a way that we absolutely can trust, and we're getting the domain's public key, similarly, in a way that we absolutely can trust, not with a Certificate Authority.  So that's the direction the IETF is approaching, or pursuing.  And the problem is we're still a long way away from DNSSEC being ubiquitously deployed.  But that could happen, too.



LEO:  Steve, hope springs eternal in the secure mind.



STEVE:  And so does Honor.



LEO:  And Honor, yes, Honor Black - what is her name, last name?



STEVE:  Honor Harrington.



LEO:  Harrington.  She didn't get killed.  You couldn't kill her.



STEVE:  Oh, no.  She got...



LEO:  She's the star of our show.



STEVE:  She got some serious commendations.



LEO:  I can't wait.



STEVE:  Oh, Leo, you'll be choked up.



LEO:  You can just see Steve wanting to go back.  I can't wait to read it.



STEVE:  Oh, I desperately do.  I'm going to be in such good shape because I'm just going to have to be on the stair climber in order to read, start into book three.  But I'm going to get Off The Grid finished first.



LEO:  That's a brilliant way to do it.  Say I'm only going to do this when I'm exercising.



STEVE:  Exactly.



LEO:  Steve is at GRC.com.  That's his website.  That's where you'll find SpinRite, his bread and butter and the world's finest hard drive maintenance utility.  He also has a lot of great stuff there for free, including Off The Grid and...



STEVE:  Almost.



LEO:  ...Password Haystacks.  Well, you've got the Off The Grid concept there.



STEVE:  The concept's in place.  I've just got to get it nailed down so people can actually use it.  And I'm really pleased that so many people are, like, panting.  It's like, hey, I want to use this thing.  So it's like, oh, cool.



LEO:  Yeah, Steve gets a lot of thrill out of this.  He's definitely an enthusiast, and that's what makes it so...



STEVE:  Why I do it.



LEO:  Yup.  You'll find also 64 and 16KB versions of the audio of the show there, as well as transcripts, at the Security Now! page on GRC.com.  We have audio and video on our page at TWiT.tv.  And of course you can watch us do the show Wednesdays at 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1800 UTC at live.twit.tv or TWiT.tv.  So you can watch live or get it after the fact.  A lot of times people watch live and then get the show and listen again, then get the transcript and read that.  And by the third or fourth time through, they understand it.



STEVE:  Oh, boy.



LEO:  [Laughing] Hey, there's only 319 of them to do that with.  I was talking to somebody who's a professor, uses it.  I think a lot of college professors use it in computer science classes and security classes.



STEVE:  Yes.  We have heard a lot of feedback from people saying, hey, this has been assigned to me in my class.  So...



LEO:  Steve, that concludes this edition of Security Now!.



STEVE:  It does.  Next week we'll do a Q&A.  So anybody who's got any questions raised by this, I imagine there will be some, by all means, GRC.com/feedback.  Drop your note to me there, and I'll see them, and we'll address them next week.



LEO:  Excellent.  We'll see you next time on Security Now!.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#320

DATE:		September 29, 2011

TITLE:		Listener Feedback #127

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-320.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 





DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 320, recorded September 28, 2011:  Your questions, Steve's answers, #127.



It's time for Security Now!.  The Kindle Edition, I have a feeling, this week.  Steve Gibson is here.  He is the man in charge at GRC.com, a security guru and expert.  He's done 320 of these shows talking about protecting yourself online.  And a good day to you, Steve.



STEVE GIBSON:  Well, it would be 320 had we had the foresight of numbering from zero.  As it is, we've done 319, and this one is #320.



LEO:  I'm including this one.  This is an extra one.



STEVE:  I'll tell you, it's those little details that trip up programmers an unbelievable number of times, like how many numbers are there between numbers 7 and 10?  It's like, okay, wait a minute.  Now, you mean inclusive or exclusive?  Do we want to, it's like, is it 4 or is it 2 or is it 3?  It's like, oh, got to be real careful with that stuff.



LEO:  See, that's Steve for you, right there.  He can turn anything into a teachable security moment, even numbering of podcast episodes.  Did you watch - I'm sure you did - the Kindle announcement this morning?  And I'm sure you had some thoughts on it.



STEVE:  Yes, I did.  As we mentioned before we began recording, like you, Leo, I ordered one of everything.



LEO:  No, I only ordered the Fire.



STEVE:  Oh, no kidding.



LEO:  I'm tempted to order that Classic.  Not the Touch.  So there's three new Kindles, for those who were not paying attention.  There's the new Kindle Classic, which is basically the same as the current Kindle except they kind of cut off the keyboard.



STEVE:  Yes, thank goodness.



LEO:  They still have a jog thing and some buttons at the bottom, but nothing like that.  And then there are still switches on the side, but they're smaller.  Then there's the Kindle Touch, which is like the Classic, but you could touch the eInk screen to turn the page.  And then of course there's the new Kindle Fire, which is a seven-inch tablet, looks a lot like a BlackBerry Playbook, but with specialized software on it.



STEVE:  And since you have given people the go-ahead for saying that the sponsored editions are really not obtrusive, we should mention that there is now a $79 Kindle.  That one that has the XY, the little what-do-you-call-it, navigation pad down on the bottom, and then buttons on the side for turning the page, which I think is going to be my absolute favorite Kindle.  It looks like the color is silver, too.  It's not either that graphite or the white.  So I think there's a new color.  But $79.  So they've broken the hundred-dollar barrier by a good margin for a top-of-the-line eBook reader.  Although that's WiFi-only, I think.



LEO:  It is.



STEVE:  So not 3G.



LEO:  But again, not something that bothers me because I load it up with books before I hit the road.  So I'm usually pretty happy on it.  So that's interesting.  You ordered one of each.



STEVE:  Yeah, because I have, I mean...



LEO:  Now, how many Kindles do you have?  You have a DX.  You have one, two, three generations...



STEVE:  I have two DXes because I wanted one of each color.  I don't remember why now.  Oh, because there was a second - they, like, updated the DX to something that was supposed to change the screen fast or something.  I said, oh, well, that sounds good.  So I got two of those.  I have my first-gen, the second-gen, the third-gen.  And I got them in white because I like that better than the graphite color.  And, I mean, I actually - I really use my Kindle when I'm - the first two Honor Harrington books were read entirely on my Kindle 3.



And I'll be switching to the one without the keyboard.  I like the small size.  So it's mostly just screen that you're getting.  And then you hold it and then just flip the pages with your thumb sitting on the edge of the device.  So I think for $79 it's going to further accelerate what Amazon is doing with the Kindle.  And of course I did also pre-order - oh, and that comes tomorrow, by the way.  This new one, the $79 one, is available for immediate shipping.  So I'll have it tomorrow and be able to talk about it next week.



LEO:  Now, of course one of the things that we knew that you would be talking about on today's episode is the new Kindle Silk browser.



STEVE:  Yes.



LEO:  Go ahead.  I mean, this is a browser that's somewhat like Opera Mini in that it intercepts all your browsing on the Amazon EC2 cloud servers.  And then, if it's got a cached version, it sends you the cached version.  And it also does, it sounds like, some digesting of the content.



STEVE:  Well, yeah.  What Opera Mini does is they do things like deliberately re-render images, knowing that it's going to go to a mobile device.  So very often websites will have large images which are dynamically downsized for, like, when it gets to - after it gets to your browser, then the browser sizes it down to the size specified in the HTML content, which wastes a lot of bandwidth and of course slows things down.



Here, I've read everything that's available online at this point since this morning.  And there isn't a lot, and there is some ambiguity which I think is a consequence of them just trying to dumb it down for the typical Kindle Fire user.  So what's controversial is that they do seem to say that they're going to be filtering secure connections.  Under the Amazon Silk info on their topic, "What about handling secure HTTPS connections?" they say, "We will establish a secure connection from the cloud to the site owner on your behalf..."



LEO:  Aha.



STEVE:  Yes.  Aha.



LEO:  Although I'm telling you, I read this paragraph, too, and I have no idea.  So I'm very curious what the hell that means.



STEVE:  "...for page requests of sites using SSL.  Amazon Silk will facilitate a direct connection between your device and that site."  So we don't know what "facilitate" means because then they say, "Any security provided by these particular sites to their users would still exist."  It's like, okay.  Then, elsewhere, under their Terms & Conditions, they say, "You can also choose to" - and this is good news potentially.  "You can also choose to operate Amazon Silk in basic or off-cloud mode."



LEO:  Oh, that's good.  I didn't know that.  That's good.



STEVE:  Yes.  "Off-cloud mode allows web pages generally to go directly to your computer rather than pass through our servers.  As such, it does not take advantage of Amazon's cloud computing services to speed up web content delivery."  So users can opt out of having Amazon essentially being a man in the middle.



Now, one thing that is possible, and I'll know - the day mine comes I'll know everything about it.  But that's about six weeks away, so we're not going to know everything about it for a while.  But it is also possible that using the Amazon filtering would actually increase your security in the case of being an open WiFi hotspot because we would have to imagine that Amazon's services will establish a secure connection to the Kindle Fire tablet and then negotiate even insecure connections from its cloud services out.



So we ought to back up a little bit and explain that what Silk does - and they call it "Silk" because they say a silk thread is invisible but strong.  So they're saying that their - I was hoping they were going to do more than I think they are.  I was hoping they would actually be rendering pages on their servers and sending us post-rendered or pre-rendered content.  That would be exciting because it would mean that our Kindle Fire tablets would be completely protected from security problems.  That is, if the rendering is actually being done by Amazon servers, then we're not subject to infection through any browser problems.  For example, they'd be running JavaScript there rather than locally.  Well, I just don't think that's practical.



So what they say they're doing, and I also listened to their 5.5-minute video where they pretty much only repeated what they already had in print, they talk about how - and we've talked about this often.  The model of a browser interaction with the 'Net is that you download the page's HTTP content, and then the browser parses it, figures out all the other things that are necessary, and then sends out requests far and wide, often having to look up, do DNS requests to get the IP addresses to make the connections, negotiate connections, which will be slower if all this is over SSL for encryption, then go and get all of the content and so forth.



So what Silk does at the least is you have one connection between your Kindle Fire browser and Amazon's network technology and web servers and so forth in the cloud.  So you request the page.  Amazon fetches the page and all of the assets.  They're able to do DNS lookups much faster.  They're sitting with peering relationships with all of the main backbone providers.  They, in fact, often are hosting the websites that you're going to, so you even stay within Amazon.  It never even leaves their big aggregate services.



LEO:  Because so many people use their EC2 and S3 services.



STEVE:  Precisely.  So potentially your requests for all these other assets don't even leave them.  They're instantly available.  So Amazon pulls it all together and then shoves it all down in a single response to your browser.  And we'll be able to play with this.  We'll be able to turn it off and on and see how it feels.  The immediate concern that people had was that even absent the issue of them intercepting SSL, which they have to do in order to do what we just said, but even if SSL wasn't brought into the picture, there's a privacy concern because everything is going through Amazon.  We know that they're doing tracking and polling and content filtering and no doubt building statistics.  And they talk about how, if they notice that most of the people who go to The New York Times home page then click on a certain link, they'll recognize that the chances are - and I think they used the metric 80 percent - that you're going to click on that link.  They'll preload that down this back channel to your browser so that the content is already there.



Well, that's some cool stuff.  So if the experience really was much snappier with this on than off, then users would at least have the option of having a faster web surfing experience.  The problem is that people may be concerned that bringing up a secure, like, form submission, assuming that Amazon intercepts form submissions, well, that would be username and passwords, which would be briefly decrypted at Amazon before being reencrypted from the cloud.  I mean, basically Amazon's being an SSL proxy that we've talked about in various contexts over time, and they would be doing this with our knowledge and permission.  But it can be turned off, if you don't like that.  And if it doesn't make it that much slower, then maybe some users will choose to do that.  It looks like a very nice device.



LEO:  So it might even be that when you add all that stuff together it's actually more secure, especially since you might trust Amazon.  They already have, in many cases, our credit card numbers.  It's not like breaking - we don't even know if they break SSL.  But if they break SSL, well, it's Amazon.



STEVE:  But I'm sure they're establishing a secure connection to your browser, which gives you total protection when operating in a WiFi hotspot for browsing things.  And that's very cool.



LEO:  So will you leave it on?  Will you trust it?



STEVE:  We'll have to see how it works either way.  I mean, if it's...



LEO:  I think they're not clear.  We talked about this with Opera Mini before.  It's kind of a man in the middle.  They have a certificate that they use when they go to the SSL site, and then you have a certificate with them.  But they have, during the interim in the middle, access to all that content.  And of course that's how they can cache it and squeeze it and so forth.  If they do this.  We don't know.  It's not clear from their prose.  I wish they'd been a little clearer what they're doing there.



STEVE:  Yes, because they say, "Any security provided by these particular sites to their users would still exist."



LEO:  Well, but that could just mean it's still SSL.



STEVE:  Yeah.



LEO:  It's just that it's our certificate and not theirs now.  Right?  I mean, they're all weasel words, and I wish they would just be very clear and say what they do.  Opera does, so you can make that decision on the Opera browsers.



STEVE:  Yeah.  And it must be, Leo, that they are doing this.  Otherwise, why make it clear that we can turn this off?



LEO:  Good point.



STEVE:  In order for it not to - if it had no downside at all, then they just probably wouldn't bother to have us turn it off.  It's got to be for people who are concerned about it.



LEO:  But then again, you have to just ask, "Well, do I trust Amazon?"  Because they're the only people who'd have access to it as a man in the middle.



STEVE:  Right.  Now, this tablet doesn't have 3G, so it's WiFi only.  Right?



LEO:  Right.  Although we were speculating that that might be a next-generation version.



STEVE:  And apparently it has no Bluetooth.  



LEO:  Right.  So you can't use battery life.  Remember, they only get eight hours of battery life.



STEVE:  Yeah.  So what I'm wondering is, what's the status about Smartphone WiFi tethering?  For example, the iPhone 4 will do that now.  But will it do it to non-Apple products?



LEO:  Oh, yeah.  A hotspot's a hotspot.



STEVE:  Okay.



LEO:  So if your question is could I then use my smartphone as a WiFi access point, use its 3G, yeah, I'm sure you could do that.  And that would solve that issue on those particular times when you wanted to, say at an airport or a coffee shop, oh, I've got to get this magazine before I get on the plane, you'd still be able to do that, yeah.



STEVE:  Right.  And I did want to mention that the screen resolution, because I'm super sensitive to that issue - that's why I'm so excited about the iPad 3, where we seem to get increasingly confirmation that it's going to be quadruple the pixel count of the current iPad.  The current iPad is 1024x768.  iPad 3 is going to be 2048x15 whatever it is.



LEO:  Maybe.



STEVE:  So it's going to be the same "retina display" that the iPhone 4 is now.  I like the feeling of the screen on the Kindle Fire because in a seven-inch diagonal screen it has the same large-dimension resolution as the iPad 2, which is to say the iPad 2 is 1024x768.  The Kindle, the new Kindle tablet, is 1024x600.  So it's a 16x9-ish aspect ratio, so it's got the same horizontal pixel resolution in seven inches that the iPad 2 has in 10 inches.



LEO:  And it's the same IPS LCD, which works so well on the iPad.



STEVE:  Yes, the in-plane switching.  So, yeah, I'm glad it's on its way.



LEO:  I think it's a hell of a product.  I think they did the right thing.



STEVE:  And $199.  So here we have a dual-core, state-of-the-art, full-day battery life, color LCD touchpad at $199.  So that's really significant.



LEO:  Yeah.  And well below what we were hearing predicted.  They showed some real aggressive pricing there.  And I think that's what it's going to take.  The teardown folks say that's about what it costs to build.  But that makes sense.  If you sell everything - it's a portal to buy everything on Amazon.  So that makes a lot of sense.



STEVE:  And you may know this.  We know that Amazon has an Android store.  We know that it's, we think, Honeycomb based.  Does this mean that you can run Android apps that you buy from Amazon on that tablet?



LEO:  They showed Plants vs. Zombies.  They showed Fruit Ninja.  So, yes.  But they have to be the apps that you buy from the Amazon store.  I would guess.  We don't know.  But I would guess that they would not allow you to buy apps from third parties, including the Android marketplace.  You have to buy them from Amazon directly because they vet them.  They're secure.  They probably can have a - I would guess they'll have a special Fire section that's written specifically for the Fire.  They may even restrict you to that section.  But they showed a lot of apps in both their videos and at the demo today.  So, yes, absolutely.



STEVE:  Okay.  So I restarted Firefox and was told that there was a new version.  Oh, no.  I went to see if there was a new version, and it immediately moved me from 6 to 7.  So any users who checked, if they're still using Firefox 6, and you just looked under the Help About...



LEO:  Well, since you asked, yes, here.



STEVE:  Exactly.  And suddenly, whoosh, okay, now I have 7.  And we were being told we were going to have superior memory management.  And it looks like that's somewhat true.  What I was finding with my handful, or large handful of tabs open, like 40-something tabs open, oddly enough, when I would unblank my system at the beginning of a new day, after it had been idle all night, it had used up about a gig and a half of memory.  So Firefox itself was just slowly chewing through memory.  I got out...



LEO:  Geez.  That's not good.  You think it's a leak?



STEVE:  Well, 6 was.  7 does seem to be behaving itself better.  So I'm glad for that.  And then just after - in also security updates, just after we put last week's podcast to rest, Adobe pushed an emergency, out-of-cycle Flash Player update out.  This was to deal with a number of security problems, one of which was an actively being exploited in the wild, and Adobe felt it was critical, cross-site scripting vulnerability which existed in all players before 10.3.183.10.  So that is the current version, 10.3.183.10.  You can go to Adobe.com/software/flash/about, and that will show you the current version number.



So I just wanted to give everybody a heads-up about that.  I think probably all of our listeners are up to speed on Adobe updating itself and keeping itself current and themselves, but that did just happen just minutes after we finished recording the podcast last week.  And Leo, I heard you talking, and I don't remember now which show it was, about the issue of secure boot.  There was a flurry of issues...



LEO:  Yeah.  Microsoft announced that Windows 8 would be using UEFI instead of BIOS - actually it sits on top of BIOS - which is an Intel standard.  And in fact Apple uses EFI.  But this UEFI would validate the booting operating system.  And in order to put a stamp that says "Certified for Windows 8" on your hardware, the hardware manufacturer would have to support UEFI and turn it on.  There would be a way to disable it.  But the concern was it would keep people from launching Linux or other operating systems on that hardware.



STEVE:  Right, which turns out not to be the case.



LEO:  It's not.



STEVE:  Because you are able to disable it.  So I wanted to make a comment, that this has been something that has been 

moving along slowly, as everything Microsoft does regarding security tightening, because they want to make sure they don't horribly break anything.  And so it's just very...



LEO:  Right.  But you don't want a bad guy putting a bug, a malware in the master boot record and have the machine blithely boot up.



STEVE:  Correct.  So this is all based on TPM, the Trusted Platform Module.  And the acronym itself, Trusted Platform Module, the idea is that all of the critical components that exist in your system would have - if you want to use this, if you want to take advantage of this, they all have to have digital signatures, and they have to be verifiable by the TPM module.



So the idea is that from the moment you turn the power on your system, the BIOS itself uses this Trusted Platform Module as the anchor.  And we've talked about a lot recently when we were talking about Certificate Authorities and the way that works, and even the Convergence or the Perspectives approach that we talked about last week, where you had a federation of servers that were all giving you different perspectives onto the web servers that you were looking at in order to all agree about the validity of the certificates that they were offering.  Even there, there was an anchoring sort of overseer whose private key you had.



So the point is you always have to anchor trust somewhere.  And the problem with the traditional SSL Certificate Authority model is that there's too many anchors.  There's 600 individual entities that we have to trust in order for us to trust the certificates that they all issue.  Well, so with the Trusted Platform Module, that itself, this piece of hardware on the motherboard which has been carefully designed so that it cannot be attacked by software, it is the anchor.  And so the BIOS says to it, do you know this hard drive?  Has the first track of the hard drive or the boot region been altered?



And so the system is able to, step by step, sort of creep forward, verifying every phase of the boot process in order specifically to prevent it from booting if there's been any change to the boot record.  Then it will check that the various core components of the OS, each one in turn, is digitally signed, verify the signature before it loads it into RAM.  So it just builds this house of verified trustable modules step by step until the operating system gets going and is then able to implement all of its own security systems which are normally what a boot time rootkit subverts.  It gets in there and, like, does an in-memory alteration of the kernel of the OS in order to subvert some of the functions before they're even used the first time.  And so when this all works together, that kind of problem ends up being nipped in the bud.  And so...



LEO:  So this is all a good thing.



STEVE:  It's all a good thing, yes.  It really is.



LEO:  There was some concern in the early days of TPM and so forth that Microsoft would use this - and the same kind of concern that you're having now...



STEVE:  For control.



LEO:  ...for control, so that Microsoft would prevent using Linux or prevent you from using a different operating or different word processor, for instance.  Or TPM would be used to revoke documents after the fact, delete them from your hard drive, things like that.  None of which has emerged.  And it is a sensible thing.  It's hardware security.  And this is a good thing, locking down the boot process.



STEVE:  I mean, we could certainly argue that this is a huge annoyance.  I mean, it's like...



LEO:  Well, if you want to run Linux, yes.



STEVE:  Well, yeah, I mean, just sort of like it just adds more baggage.  There's going to be some overhead in terms of boot time.  I heard Paul, I guess it was you and Paul who were talking because I heard Paul just sort of like with his head in his hands, thinking, "Oh, who doesn't think this is going to misfire?  And I'm going to be told that I don't have a trusted module when in fact I do and so forth."  So it's like, and it is, it's more things to break.  But sadly, this is what we've been brought to because the hackers are so good and our systems are so prone to this kind of problem.  So this is the future.  We'll all end up with this kind of trusted boot strapping in order to get our systems to go.



There was an interesting blog post because Moxie Marlinspike's Convergence.io, which was his Firefox add-on implementation of the Perspectives work from Carnegie Mellon that we talked about last week, many people said, hey, what about Chrome?  It's available for Firefox.  But I'm liking Chrome, and I'd like to have this, too.  So I wanted to share with our listeners the blog posting from the Chrome guys who are in charge of this.  And their posting dated September 7th was titled "Why Not Convergence?"  And they said, "In light of recent events" - or he said, the poster.  "In light of recent events, I've had several requests to implement Convergence in Chrome.  For those who don't know and, frankly, for anyone interested in SSL, I highly recommend watching Moxie's talk on the subject from this year's Black Hat.  You can also check out the project website.



"Moxie, having actually thought about the issue and coded something up, has already done a thousand times more to address the problem than almost anyone else."  So he's given a tip of the hat to Moxie for this.  He said, "But I don't think that Convergence is something we would add to Chrome.  Although the idea of trust agility is great, 99.99 percent of Chrome users would never change the default settings.  (The percentage is not an exaggeration.)"  And thus, remember, Leo, how many times - the phrase I have coined is the "tyranny of the default" because we just know most users leave everything alone.  It's sort of, if it's not broke, don't try to fix it.



So here's this guy who's able to monitor all the settings in Chrome because that's one of the natures of the feedback that Chrome provides them.  99.99 percent of them would never change the default settings.  And he says, and that's "not an exaggeration.  Indeed, I don't believe that an option for setting custom notaries would even meet the standards for inclusion in the preferences UI.



"Given that essentially the whole population of Chrome users would [therefore] use the default notary settings, those notaries will get a large amount of traffic.  Also, we have a very strong interest for the notaries to function, otherwise Chrome stops working.  Combined, that means that Google would end up [having to run] the notaries.  So the design boils down..."



LEO:  That's not good.



STEVE:  Yeah, "...the design boils down to Chrome phoning home for certificate validation.  That has both unacceptable policy implications and very high uptime requirements on the notary service.  It also doesn't address the two problems that Moxie highlights:  internal servers and captive portals.  It's not clear how either would work in this design, at least without giving up on security and asking the user.  (Those two problems, captive portals especially, are the bane of many an idea in this area.) 



"None of the above argues against allowing Convergence as an extension for those who wish to run it.  We don't currently have an extension API for controlling certificate decisions, and I'm not inherently opposed to one.  It would be additional complexity and something that we would have to support in the future, so it's not without costs.  But mostly it's not there because nobody has written it, and I'm afraid that I don't have any plans to do so."  So that's the status.



LEO:  Good response, actually.  That's a great, thoughtful response.



STEVE:  Yes, yes.  Great response.  And I think in our Q&A today I do address the issue that he brought up, so I won't preempt myself.  But there are some problems with Convergence.io and Perspectives, which everyone who's looked at it closely recognizes, that we'll be talking about in today's Q&A.



I did want to note that I saw the news that the MySQL.com site was...



LEO:  Oh, this one's horrible.



STEVE:  Was, yeah, breached on Monday, two days ago, for the second time in a year.  Now, the first breach was a little ironic, and we did talk about it at the time.  That was earlier this year due to an SQL injection fault.



LEO:  Hoist with their own petard.



STEVE:  Exactly.  Now, the nature of Monday's breach still remains unknown.  It just happened.  However, our friend Brian Krebs noted that administrative access to the site was being offered for $3,000 on an underground hacker site.  So perhaps somebody said, oh, great, I'll pay three grand in order to have admin access to the site.  And the nature of the breach was that, until it was removed, JavaScript code known as the Black Hole exploit kit was attempting to launch a series of known browser attacks against all of the site's visitors.



LEO:  Wow.



STEVE:  So, whoopsie.



LEO:  Was it a MySQL injection - it must have been; right?



STEVE:  No, well, the first time it was, definitely.  But we don't know...



LEO:  We don't know.



STEVE:  ...and no one has yet said how people got in there.  It may have been that they decided, hey...



LEO:  Could be something was left there.



STEVE:  Yeah.  May have been.  So under the title of - this is my name - "The Devil Made Me Do It!" alleged LulzSec member Cody Kretsinger was identified by the "Hide My Ass" (HMA) VPN and web proxy service, which acknowledged that it had provided information that led to Cody's identification and subsequent arrest last week.



LEO:  Hide My Ass until the police ask for it.



STEVE:  Exactly.  And that's why I wanted to bring it to our listeners' attention.  Hide My Ass said it was complying with a court order requiring it to disclose the IP address with which Kretsinger had logged into its VPN service.  HMA notes that its terms-of-service agreement stipulates that it will not be used for illegal purposes.  HMA logs users' IP addresses at the beginning and end of their VPN sessions.  So here's a real-world example of a company responding to a subpoena which then got a person arrested who was using this for some illicit purpose.  So, whoops.



LEO:  Whoopsie.



STEVE:  Yeah.  And I did want to mention we're seeing, and I'm sure you're noticing, Leo, more and more Mac malware things beginning to happening.



LEO:  That's sad.



STEVE:  Yeah.  SANS reported that a Trojan horse program masquerading as a Flash Player installer has been detected in the wild.  The malware, which targets Mac users, does not exploit a vulnerability but simply relies on users who do not have Flash installed clicking on the offered link.  The Trojan disables some security software and installs a dynamic loader library with auto-launch that injects code into applications the user then runs.  It also sends information about the infected computer out to a remote server.



And SANS Editor William Hugh Murray commented that "Adobe sets users up to be victim to such attacks by encouraging Flash-powered websites to offer it from their sites.  While most of the sites that offer Flash of course are legitimate, the practice is a dangerous one."  And so he says, "One should download Flash only from the Adobe site."  And this put me in mind of that fantastic rule that I saw Brian Krebs write about.  And I'll remind our listeners:  Never install software you don't seek out.



LEO:  Oh, very good.  Perfect.



STEVE:  That is just a golden rule.  Any time you are offered software, just, uh, no thank you.



LEO:  Yeah, very good advice.



STEVE:  Don't install it unless you go seek it out.  A couple little blurbs from the Twitterverse:  Mike Lopez in Coconut Creek, Florida said - he tweeted - "Honor Harrington Book 3, 'A Short Victorious War,' is amazing."  Well, I think he must have said that to taunt me because...



LEO:  You haven't read it, Steve?



STEVE:  I know.



LEO:  You've been saving it.



STEVE:  I have got to finish "FreedomTM first."  And I will not, I refuse to start another Honor Harrington book because it just takes my life, and I just can't have that happen.  So, and then Ken Knight in Michigan tweeted, "I'm listening to 'On Basilisk Station" - I'll talk about that in a second - "on Audible."  He said, "@SGgrc is right.  This is VERY" - in all caps - "good."



LEO:  Oh, great.



STEVE:  And finally, and that's the first of the Honor Harrington series.  And then many people tweeted about the old-school mechanical keyboards that they noted I'm using, which they were able to see on that KABC TV clip.  And of course we've talked about this a number of times.  These are my original Northgate OmniKey 102 keyboards that are now about 25 years old and going strong.  I just - I love them, traditional clankety, clickety-clank keyboards.



LEO:  Well, I've got questions.  Oh, I'm sorry, go ahead.  More tweets?



STEVE:  We have a few more.  I did note that - I tweeted out the news before it happened, on Monday morning, that there was going to be a new, maybe interesting, sci-fi series aired and premiering, a two-hour premiere on Fox called "Terra Nova."  I watched it, having TiVoed it, Monday night.



LEO:  That looked really cool, except for it says it's a family show, which kind of scared me off.



STEVE:  Yeah.  And...



LEO:  It's like a Swiss Family Robinson meets the dinosaurs kind of a thing.



STEVE:  Yeah, it's like a Jurassic Park meets maybe Lost or something.  There were some, you know, they were trying to set us up for some spooky, we're not sure, stay tuned to find out what happens about this, and so we're being teased forward.  It's like, okay, well, Monday night's sort of a dead night away, so maybe.  But anyway, I wasn't blown away by it.  But I do have some information that will blow, hopefully, us away.  This is not it.  It's the one after this.



But Elaine wrote to me, our illustrious transcriber.  She said, "Steve, before I forget yet again, I hear you having problems uttering the book title 'On Basilisk Station,'" because I had been called it ba-SIL-isk.  And I had been careful to pronounce it correctly and was doing so wrongly.  She said, "I'm starting to think that either you don't know what one is, or you've never heard it pronounced."  And I said "Yes, Elaine, correct on both counts."  "It's a legendary reptile reputed to kill with a glance, pronounced BAS-a-lisk," she did phonetically.  Signed Elaine.  So Elaine, thank you for that.  It's Basilisk Station.



LEO:  We know, by the way, from this that she's a Harry Potter fan because in book one of Harry Potter, I think book one or book two, he meets a basilisk.



STEVE:  Ah, cool.



LEO:  Yes, there you go.  Probably, considering that she transcribes it, when you pronounce something wrong, it probably grates on her greatly; right?



STEVE:  Yes.  So my big news - and this was posted yesterday afternoon.  Thanks to @fryguy451 for giving me a link to and the news:  David Weber, the author of the Honor Harrington series, says, "According to my 'Hollywood representative,' we have officially closed the deal on the movie option for the Honorverse series.  I should be seeing the contracts in the next few days, and there are a couple of other legal documents that need to be traded back and forth.  But we have a deal.



"The studio involved is headed by people who have actually read the books, who like the characters, who know the characters, and who have pulled up blocks of actual dialogue from the books in face-to-face discussions with me to illustrate their understanding of Honor's character and the reason they're excited about the project."



He said, "Although the studio is a cutting-edge CGI/3D studio, what they said to me more than once when we were discussing the option is that 'All the special effects in the world cannot make a successful movie.  Special effects make a visually satisfying spectacle.  But a successful movie requires storyline, and a successful series of movies requires characters.  It's the characters and the fully developed background of the Honorverse which have drawn us to this project.'"  He said...



LEO:  That's a good sign.



STEVE:  Oh, Leo.  Oh, wait.  But, see, you don't know how amazing these books are.  Remember I was in tears as I was finishing the second one.  I was so choked up, it was like, oh, my god.



LEO:  I've been skeptical.  I'm sorry, I just can't believe.  They sound like fantasy books.  But all right.  I mean, I know you have good taste, so...



STEVE:  Oh, I haven't steered you wrong yet.



LEO:  Not yet.  Not yet.



STEVE:  And he said, "The producer and the studio are the same entity, which is going to preclude or at least hugely reduce the kinds of pissing contests producers and studios  can get into.  They have not simply hired me on as a creative consultant, but we've already been in fairly intensive coast-to-coast video conferences about the characters and the story line, and they are clearly listening to me.  They are thinking in terms of not a single feature film, but a series of films."



LEO:  Well, how many are there?  There's like 20 of them; right?



STEVE:  There's 12 books.



LEO:  12, all right.  By then there'll be 20.



STEVE:  But oh, my god.  And he said, "...based not on generated-for-the-movie plots but on the actual storyline of the series."



LEO:  Oh, great.



STEVE:  "As a result, they have a very strong interest in treating the characters and the story line with respect."  And finally he said, "The critical thing to me is that these people are interested in the Honorverse and in the characters who live in it, and they clearly don't see it as the opportunity to make just one movie and then get out.  I think these people are going to treat Honor and the Honorverse with respect, and they clearly really, really know the characters and the books."



So all I can say, listeners, is that David Weber's Honor Harrington series, it's among - it's different than any of the other stuff we've talked about.  It's yet another sort of dimension of sci-fi genre, different than the Lost Fleet series, different than the Peter Hamilton stuff, different than the other books we've talked about.  But it's some of the best fantastic space opera I've ever read.  And, oh, goodness, the idea that we're going to have these as movies is beyond exciting.  So I will say again, I encourage everyone to read these.  And the first two are available for free as eBooks.



LEO:  [Yawning] Oh, I'm sorry.  I've downloaded "On Basilisk Station" from Audible, and I will listen.  I'll be listening to it as soon as I finish my current book.



STEVE:  Good, good.



LEO:  So I'll give you a book report.



STEVE:  Yes, we need to hear what you think, Leo, because so far I'm the only one raving about it.



LEO:  No, you've got the correspondents love it, your Twitter fans.



STEVE:  That is true.  We have had that, too.  A listener, Mike Goodrich - his subject was "Happy User" - was able to save a USB drive from the trash can.  He said, "I've owned SpinRite for years, but never used it much.  (Takes too long to run, does it really work, et cetera.)  The boot CD just sat on the shelf.



"Yesterday one of my important USB hard drives failed to read.  I believe the problem was caused by too much fragmentation, and the drive got too full.  And he says, "(Thanks, Microsoft, for your inadequate defrag utility.)"  And he said, "I said, what the heck, I'll try the SpinRite CD and see if I can do anything.  Yep.  In less than two hours I had a working drive again.  SpinRite had never seen this drive before.  It just went in and did the repairs.  Well worth the 89 bucks that I spent several years ago for the program.  Thanks."  Mike Goodrich, Columbia, MO - what's that?  Missouri.  Columbia, Missouri.



LEO:  Missourah.  I'm from Missourah, he says.



STEVE:  So thank you for the report.



LEO:  Well, and thank you, Steve, for your questions and answers.  We've got them coming up in just a sec.  All right.  I have questions, if you have answers.



STEVE:  Yeah.



LEO:  I'm ready to launch into the Q&A portion, #127 in a continuing saga of, "Wha....?"



STEVE:  Which, by the way, is seven 1-bits in binary, Leo.



LEO:  Oh, that's right:  111 111 1 0.



STEVE:  Actually be zero, if we're going to have a byte...



LEO:  I'm sorry, 01111, yeah, yeah.  The other way around.  Matt Bailey, who is @VidioGeek with an "i," says:  Steve, if people are testing potential real passwords on your Password Haystacks page, shouldn't that page be secure, using SSL?



STEVE:  Many people have asked, and so I just wanted to take a moment to say that the link on the menu at GRC is HTTPS, and so I do have the page come up on HTTPS.  But I don't force it, if for some reason somebody wants a non-HTTPS connection.  It is not a concern, though, because that page never transmits anything.  That is, the passwords are - they exist locally in the user's machine.  So it's just the browser and local JavaScript which is running that does all of the computation and all of the calculations.  There's no conferring back and forth with GRC.  Now, having said that, HTTPS is potentially significant because you would like to make sure that the JavaScript code is not altered on the fly.  So if the page is...



LEO:  Ah, good point.



STEVE:  Yes.  So if the page is not secure, then it could be altered to drop HTTPS from the JavaScript.  And then when that's coming in, it could be altered in order to send the person's passwords out.  So bringing up HTTPS is a good thing.  I'm sort of transitioning to move GRC to 100 percent enforced SSL.  I'm doing it incrementally to make sure I don't break anything in the process.  For example, the Off The Grid site, all of its pages live underneath the OTG directory, and that directory itself, it has enforced security so that every page there is.  And so I'm experimenting, and over time I'll be moving more and more stuff over to the point where eventually you won't be able to get to GRC without being over SSL.



LEO:  Good.



STEVE:  Which, you know, more and more sites should over time.



LEO:  Yeah, I think that's great.  I'm glad to hear it.  Question #2.  Wait a minute.  I put them away.  Let me bring them back.  From Seth Anderson in Fruitvale, Texas.  He has lost his fleet.  Uh-oh.  Thank you, Steve, for recommending so much of The Lost Fleet series.  I ordered them a couple of weeks ago.  When I got home after church last Wednesday I found them waiting for me.  I literally could not put them down.  I was up till 2:00 a.m. Thursday morning reading the first one.  I went straight home, hurried through my workout so I could start Book 2.  I stayed up till 2:30 a.m. Friday morning reading it.  I read book - this guy, man.  I read Book 3 Friday night after work.  These are not little tiny novellas, either, are they.



STEVE:  Unh-unh.



LEO:  And started Book 4, staying up until 3:00 a.m.  Saturday I finished Book 4 and read Book 5 that night, staying up until 2:00 a.m. again Sunday morning.  Needless to say, I was very tired at church Sunday morning.  As I was able to read some during the day, I was only up till 1:00 a.m. Monday finishing the last book.  I loved them.  Oh, my goodness.  While recent events kept me from a long-weekend mini-vacation over Labor Day, the Lost Fleet provided the mental getaway that I needed.  I mean, five books in three days.  Thank you so much.  I've been a regular listener since the Password Haystacking episode.  Well, so he's a relatively new listener.  That's great.



STEVE:  Yes, he's a new listener.  So anyway, I just wanted to share that.  I thought - the problem I've had when I've read books too quickly is I don't really feel like I get as much out of them as when I read a little bit and can sort of think about it, and then I'm anxious to get back to it.  So I'm glad that my stair climber will be metering the rate at which I'm able to read the rest of the Honor Harrington series.  The Lost Fleet series is great.  Honor Harrington is better.  So if anyone...



LEO:  Really, it's better.  Wow.



STEVE:  Oh, it's better.  Oh, Leo, it's...



LEO:  Don't tell Frank or...



STEVE:  It's really good.



LEO:  Don't tell this guy.  He's not going to go to church or anything.



STEVE:  No, Seth will drop off the map.  No one will see Seth for...



LEO:  Seth will waste away.  Hey, this could be a good diet.  Read all 12 of the Honor Harrington books without eating.



STEVE:  So, Seth, wherever you are, I know you finished the Lost Fleet.  Know that there is a sixth book now.  There's a next series beginning, but be aware that it is the next series.  The Lost Fleet series is a single contiguous story spread out, which is of course why probably Seth didn't sleep for five days.  The good news about Honor Harrington, you will not be left hanging.  So don't fear.  I mean, I really am annoyed when I start in on a series that isn't finished by the time I start them because I want them to all be there.  The good news is these are not cliffhangers.  And he also doesn't drag you through a lot of the prior book at the beginning of the next book, which I really appreciate.  He very cleverly sort of tells you just as much as you need to know for continuity.  But I just - we've got to get Leo to read the first one so that you can add your opinion.



LEO:  Oh, I have it.



STEVE:  It's really good stuff.



LEO:  Well, I could just stop reading what I'm reading.  Actually I'm reading two books on Audible right now.  One is a history of the Inca Empire.  That might take a while.



STEVE:  Okay, yeah, forget that.  Stop that.  That's ridiculous.



LEO:  The other one is "American Gods," which is kind of a dramatization of a classic Neil Gaiman book.  But maybe I'll pause that and - it won't take me long to read the first one; right?



STEVE:  No.  And then they're not huge tomes.  Later on they get bigger.  But, I mean, we need to know next week if you're sucked in, even if you haven't finished.



LEO:  All right.



STEVE:  Although I bet you will.



LEO:  By next week I will - all right.  I will start today, and I will let you know.



STEVE:  See if you can.



LEO:  And if I cry, I'll tell you.  You don't cry for the first one; right?  It's the second one.



STEVE:  No, the first one didn't make me cry.  Second one I was verklempt, as they say.



LEO:  Question 3 from Frank in Mnchen, Deutschland, or Munich, Germany to us English speakers, reacts to Moxie Marlinspike's Convergence:  I love the idea behind Convergence.  By the way, you talked about that last episode; right?



STEVE:  Right, that was last week.



LEO:  People want to know more about that.  I actually thought of a similar thing myself, so it's great to see I can come up with good ideas myself sometimes.  But I have a question, and an annoyance in the implementation.  What keeps someone from faking the responses from all of the notaries that you queried?  Obviously, they're in different geographic locations.  But if the man in the middle is your ISP, that isn't going to help.  Are the notary responses encrypted with an asymmetric key for which you have the public key stored?  That's his question.



Here's his annoyance:  Convergence doesn't work with Intranet sites.  Obviously the default notaries don't have access behind my firewall.  I could of course have set up my own notary that has access to the sites, but then I won't have the advantage of using notaries in multiple locations anymore.  Thanks for providing an excellent show.  So why would you even want to use it on the Intranet?



STEVE:  Well, and that's been a very good point.  This is one of the problems.  Remember that the cool benefit of the traditional Certificate Authority model is that we trust these CA roots, and we trust everything they do.  Well, that's the dubious part of that.  The good news is that we're able to verify the authenticity of the certificates that they have signed ourselves.  We don't have to ask anybody else any questions.  So we have full privacy, and we're able to do this verification locally.



The whole problem with the Perspectives approach, which is the same as what Moxie has done with Convergence.io, the problem is the benefit.  And that is we're doing dynamic trust, which means we have to ask somebody else what their opinion is.  That has to happen on the fly.  So that creates, first of all, a privacy concern because that somebody else we ask knows that we're doing so.  But most importantly, it means there is non-web-related traffic.  And there's a problem with many corporations that are now filtering everything.  They run an email server inside their firewall.  They run DNS inside their firewall.  They proxy your web traffic.  I mean, they are locked down tight.



So remember that this technology wants to send random UDP packets off.  Well, many corporations just don't let you do that.  So the whole Convergence/Perspectives system won't run at all inside of such a locked-down network.  And that really is a problem for intra-web sites.  But you are right, Leo.  I think that the idea of having to verify the trust of a server that's in the closet next to you...



LEO:  You've got a bigger problem if you don't trust it.



STEVE:  Exactly.  Exactly.



LEO:  Ken in New Orleans - did you answer his question, too?



STEVE:  Yeah.



LEO:  Yeah.  Ken in New Orleans wonders whatever happened to IPv5?  We went from IPv4 to IPv6.  I'm a new listener.  I've been listening to past episodes to get caught up.  Love the show.  Happy user of SpinRite, da da da da da da.  During your discussion of how the Internet works, you went over the creation of IPv4 and briefly mentioned that 1, 2, and 3 came before and were developed and obsoleted when the Internet was just in its infancy.  My question is, with all the talk about needing to move to IPv6, whatever happened to 5?



STEVE:  Well, and that's an often-asked question because people who are somewhat savvy all know that we've been using 4 and that we're now talking about IPv6.  What happened was that a long time ago in Internet history, in fact when IPv4, well, IP at all was still not very well known, we're talking in the '70s, there was another project begun to experiment, believe it or not, Leo, with streaming.  Even back in the '70s there was this notion of, well, you know, we've got this all packetized stuff happening, so how could we stream voice and video?  And whereas we've talked about how the IP system, IPv4 is based on packets that only have an IP source and destination address, and then they can contain other protocols within them.  UDP, for example, is not connection oriented.  TCP is connection oriented, although with a lot of buffering and really not oriented toward real-time streaming.  So IPv5 was actually a streaming protocol.



LEO:  Was it related to MBONE?  I remember the MBONE Multitask.



STEVE:  No, that's multitask...



LEO:  Multicast backbone.



STEVE:  That's multicasting; right.  No, it predates that, even.  It was, like, way back before any of us were on the Internet, before it existed really.  They said, okay, IPv4 will have this architecture, and for streaming voice and video we'll have IPv5, where those packets, the IP packets themselves will have a completely different construction, and it will be inherently connection oriented.  So it was - the idea is that the first four bits of the packet are the version number.  So IPv5 would have a 0101 at the first four bits that came in, which would tell the routers what the rest of the packet was.  And it wouldn't look anything like IPv4 because it would be entirely different, a streaming connection-oriented protocol.



So some companies messed around with it a little bit.  IBM, NeXT, Apple, and Sun sort of considered implementing it and playing with it, but it just - it never got off the ground, never made it out of the lab, never was, like, really even at the point where it could be used publicly.  And then it just sort of died.  Nothing further happened.  But the number had been consumed, and so it was no longer available.  So we had to skip over it and do 6.



LEO:  Question 5 we did not skip over.  Dave Fugleberg from Minnesota provides some additional information about Moxie's Convergence.io implementation of the Perspectives concept:  In Episode 319 you talked about Perspectives and Convergence.io.  I heard Moxie Marlinspike's talk on this at AppSec USA today, and he explained a little about how his concept protects you from leaking your browser history.  Basically, your client would encrypt the domain name you are trying to validate with the public key of Notary B, but proxy it to Notary B through Notary A.  That way Notary A knows your IP, but not the domain you're checking; and Notary B knows which domain you're checking, but not your IP.  The notaries would need to collude to match your IP with the domains you're checking.



The most interesting part of the concept is it's up to you as the user to decide which notaries to use, and you can change them any time.  This is very different than the current CA system, where dropping a CA from your trust list can cause large parts of the Internet to suddenly be untrusted.



STEVE:  So this is a little bit like, I mean, first of all, I'm not surprised by that.  It makes sense.  And it's what I would describe as a kludge-y solution to the problem.  I mean, it's better than nothing.  And it's a little bit like The Onion Router, like the TOR project, inasmuch as your traffic goes to a first node that is unable to interpret what you want to protect about it and is forced to forward it on to another node that then is able to protect the next layer.



In this case we only have essentially a one-layer onion, that is, one layer of encapsulation, that being the domain name you're querying.  But it does bounce through the first notary and then goes to the second.  That one then, if it's going to obscure your IP, it would do the lookup for you, decrypting your packet using its private key, and then would return the response to that first notary that would reflect it back to you.



So it's like, well, okay.  You are inherently going to have some privacy leakage with the system.  It's what's so nice about, as I said, about trusting root authorities.  And if you're going to do any kind of probing in real-time, whether it's this or if it's the OCSP technology which we already have, which is making per-site queries, you're going to be leaking the fact that you're going to those sites.  There's sort of no way around it.



LEO:  Question 6 from Matthew in London.  He worries about insufficient entropy:  Steve, I'm a little worried about the ultra-high entropy pseudorandom number generator you're writing for Off The Grid.  This is exciting.  You've promised us this.  From what I understand, you're using the local source of entropy from JavaScript as entropy is quite scarce on a PC.  This can be seen by observing /proc/sys/kernel/random/entropy_avail, which gives how much is available from /dev/random.  Is this in Windows, or is this - this must be Linux.



STEVE:  That's Linux.



LEO:  Yeah.  Now, I'm not a security expert, but from what I understand from the theory of information, you cannot "create" entropy.  So isn't the total entropy available to your PRNG dependent upon the implementation of PRNG in JavaScript?  If so, I worry - he's from London, that's why he talks that way.  He talks funny.  I worry that the implementation of the default JavaScript pseudorandom number generator (PRNG) wasn't given enough scrutiny to be the basis for our Off The Grid system.  I understand you've tested it against automated tests, but would it pass on all browsers?  Regards, Matthew.



STEVE:  Okay.  So he's absolutely right.



LEO:  Isn't this why you're writing this, so that you don't use Java's PRNG?



STEVE:  Correct.  Although, and this is where it's sort of confusing, and I wanted - it brought up an interesting point that I thought was a great opportunity for some clarification.  There's two different aspects to a pseudorandom number generator.  There's the initialization of it with starting entropy, and then there's the quality of the random numbers it generates once it's been initialized.



So, for example, say that you just initialized a high-quality PRNG to all zeroes.  Well, if it were high quality, it would spit out the same stream of high-quality pseudorandom numbers every time you did it.  Remember like in BASIC we had the "randomize" command.  It would sort of cause the very poor random number generator that was in BASIC to start in a different place, at least, so that you would get a different set of random numbers each time.



So the problem with JavaScript is that its pseudorandom number generator is known - well, okay.  First of all, there are different implementations on different browsers, on different platforms.  Some of them are really not very good.  And then the other issue is they may not be initialized with high entropy.  So I needed two things.  I needed a pseudorandom number generator that itself could possess enough entropy to allow us to reach as many of these Latin Squares, at least as many as the minimum we know are possible.  And I also need, for that to mean anything, for it to be initialized with high entropy.  Thus Matthew's question is a really good one.



And the source code that I've published so far is just sort of a simple demo that does initialize itself only from the local machine's JavaScript source.  That is, it uses the local machine's JavaScript pseudorandom number generator to get itself going.  The sequence of numbers it produces, however, from wherever you start it, we've now proven, is ultra-high quality.  It passes every test of randomness, and many of them are excruciating.  So the pseudorandom number generator itself has been proven.



Now what we need to do is make sure that, in production use, that we're initializing it with enough entropy.  Otherwise we're not going to be able to access all of the possible Latin Squares that may exist.  And there I will do what I have done elsewhere, which is I get a starting entropic seed from GRC over an enforced secure connection, so no bad guys can get to it.  And then we locally alter it.



So the idea is - and again, Matthew is right - you cannot create entropy out of thin air.  That is to say software cannot.  Software is unable to produce pure entropy.  But at GRC we will take, like, a starting pool of entropy to initialize the page.  And then in order to get protection from GRC knowing anything about your grid, we'll then mix in the entropy from the local JavaScript PRNG and a bunch of other stuff, like mouse movements and size of your screen and, like, all kinds of other stuff that is unknowable by GRC.  So you get the best of both.  You get a guaranteed minimum amount of entropy because that - so you're not reliant on your local computer because that you get as an initial blob from GRC.  And you get protection from GRC knowing anything about your grid because you immediately pour a bunch more entropy in on top of it.  And we solved the problem that way.



LEO:  Will in the United Kingdom wonders about disk drive deterioration, something you know a lot about because of course SpinRite.  You've been a hard drive expert for a long time.  Steve, I work at a software security company, and a discussion came up the other day when we were discussing backups.  Now, I know it's foolish not to have backups of all my drives.  However, I've taken the position that a hard disk drive that is in a locked drawer will not deteriorate or fail.  At the office they said I was foolish, and I should back up everything.  However, why do I need to back up a drive I rarely access, and I know it's safe from knocks and bumps?  Could anything happen to that drive in his drawer?  He's got drives in his drawers.



STEVE:  Well, the one thing that can happen, if you do not use a drive for a long period of time, is stiction.  You can actually get a molecular level, like a "weld," it's called, between the drive's heads and the platters.  And that can be a problem.  Traditional or contemporary drives have solved the problem, more or less.  In some cases they move the head all the way in.  In some cases they pull it all the way off of the disks.



What I have found is that the moment of truth for a disk drive is when it is first starting up because, if anyone has listened to drives, they go through a lot when they're starting up.  They're full subsystems.  I mean, the idea that they store the kind of data that they do still boggles my mind.  And they're just not as simple as drives used to be.  Drives used to be a motor that spun the disk, and then another motor that moved heads in and out, and then wires had amplifiers hooked to them in the drive.  But that immediately went out to the controller.  So there just wasn't much that could go wrong in the drive.  Today's drives are full microprocessors, amazing microcosms of technology in this little box.  And sadly, there is a lot that can go wrong.



So, I mean, on one hand I feel that your drive is going to last longer in a drawer than maybe if it's spinning 24/7.  But you still just never know when the drive is going to die.  So, Will, I have to sort of agree that there is no substitute for a backup, which is - that's the wisdom that Leo and I follow and what I would really recommend to everyone.  If there's only one copy of that data, it's just not safe.



LEO:  And of course there's always theft and fire and all that stuff.  But I guess the other question that comes to mind now is, well, assuming no stiction or startup issues, is it possible that the magnetic media would deteriorate over time, that it would start to lose its signal or whatever?



STEVE:  I don't think so.  What used to happen was that drives did not have servos on them.  That is, or the servo platter was on - it wasn't a platter.  The servo information was on a separate layer or surface in the drive.  And you could get some mechanical wear and tear that would cause the alignment of the head to drift over time, which is one of the famous things that SpinRite did.  Because it was able to re-low-level format the drive, it would electronically realign the drive.  Well, that just isn't - that doesn't happen any longer because all drives have servo, that is, head positioning, head tracking data mixed in with the data so that they're self-servoing, essentially.



So I just - and I don't really think that you do have bit decay over time.  The technology is such that it's really very strong.  SpinRite, running it on SpinRite does reread and rewrite all the data to sort of reverify and make sure that you're not having any problem with defects.  But typically it's the head flying over the surface that does create a little bit of wear.  Just it flying over is putting some wear on the surface.  And that can grow defects over time.  So you could argue that having it not running in a drawer is better.  But I still don't think there's any substitute for having extra copies of it, if it's really important.



LEO:  Right.  Question 8 from Karl Kranich in Indianapolis.  He wonders about Latin Square mobile apps.  This is your password-generating technique.  Some people seem to be suggesting Latin Square mobile apps that don't also involve printing out the square.  Is there any point to that?  Don't they just need a hash algorithm that's keyed to a password and has a 12-character output?  In other words, he's saying your whole idea of your portable passwords is they're non-electronic, Off The Grid; right?  So if you're putting them on a mobile device, well, clearly they're on the grid.  And at that point, why do you even need to do Latin Squares?  Just do a hash.



STEVE:  Exactly.  And he's right.



LEO:  Of course.



STEVE:  I mean, you could certainly do that.  The advantage, I think, first of all, there's a disadvantage of Off The Grid being on the grid because then it's potentially subject to somebody - to a malware attack, to somebody getting it.  The flipside is it's convenient to have Off The Grid on the grid, that is, to have it automated, because you could just put in a domain name, and it would give you the matching password.  And then the benefit of that, which you don't have with a hash, is that it's still an electronic version of a printed grid, so you have that as backup.  So if you ever had a device that didn't support the Off The Grid system on the grid, then you'd still have it as a grid in your wallet, for example.  So it's sort of the best of both worlds, which you don't get if you have to run a hash algorithm.  Lord knows how you'd do that on paper.  I don't think you really can.



LEO:  All right.  Put your beanie on now because we're going to get a little wacky.  This goes back to our conversation last week about the Monty Hall dilemma.  Marv  Schwartz, who is at Case Western Reserve, so he knows where he's talking, he says:  The source of the Monty Hall problem is provided on Wikipedia in the article about Marilyn vos Savant.



STEVE:  Whose name I haven't heard for a long time.  Remember her?



LEO:  Yeah.  She used to write a column in Parade.  I've interviewed her.  She was billed as the smartest woman in the world, and she would pose these really tough brainteasers in Parade.  I think it was Parade magazine.



STEVE:  It was.  Good memory.



LEO:  So here you go.  Assume - I thought we did a very good job describing it last week.  But anyway, assume there's a shiny new car.  See, he's already left out the most important part.  You're playing "Let's Make a Deal."  Now, if you've ever seen that TV show, they give you three doors, and there's prizes behind each, but you don't know what they are.  Presumably, in fact for this to work, Monty has to know what they are.



There's a shiny new car behind one of the three doors in front of you, goats behind the other two.  The key to understanding the answer is that initially you have one chance in three of choosing the car.  Three doors, 33 percent chance of success.  But Monty knows, see, Monty knows what's behind every door.  He's the host of the show.  After you pick a door, now there's a 100 percent chance that one of the remaining doors has a goat.  He opens a door that he knows has a goat behind it.  This gives you no new information, and your initial odds don't change.  There's still a one in three chance that your initial choice was correct.



When asked whether you want to keep your initial choice or switch, this is the key.  The odds are not 50-50.  Nothing changed your initial one-in-three odds.  Therefore you double your chances of winning by switching.  I know that seems counterintuitive.  But the point is that Monty has added information into the pot here because he knows where the car is.  You had one in three.  You had a 33 percent chance of picking the right door.  Now, by eliminating a door that has a goat, Monty is saying you now have one in two.



STEVE:  Right.



LEO:  David Singer, a wonderful professor of mathematics at Case, helps people see this by taking a deck of cards and asking to pick one without looking at it, then asks if they would bet even money that they chose the ace of spaces.  Of course they won't.  The odds are one in 52.  He then takes the remaining cards so that only he can see them, placing all but one of them face up on the table, boom boom boom boom, except for one.  He then asks if they would bet even money that they have the ace of spades.  Nothing's changed the odds.  They're still one in 52.  Hopefully people can see this.



The Monty Hall problem is exactly the same.  One car - he's not helping.  This is not helping, I can tell you right now.  One car card and two goat cards, pick one face down.  The odds are one in three you chose the car; right?  I pick up the two remaining cards so that only I can see them.  There's a two in three chance that I have the car and a 100 percent chance that I have a goat.  The odds that you have the car didn't change, not even when I place a goat face up on the table.  You don't know.  Is that card that I'm still holding a goat or a car?  You don't know.  You don't know if the card you chose is a goat or a car.  But the odds that you have the car don't change when I place a goat face up on the table.  There's still a one in three chance you have the car and a two in three chance that I do.



[Laughing]  Where's something?  I've got to hit myself in the head.  I hope this explanation is clear to you and Leo.  He actually said that.  I had a lot of fun with this problem in an introductory programming - the problem is, if you understand it, it's clear.  If you don't, it's not.  I had a lot of fun with this problem in an introductory programming course at Case and would be happy to send you the code if you tell me how.  We were able to do simple automation of doors opening and play sounds of a car horn or a baaah.  Thanks once again to you and Leo for a wonderful program.  It's been a high point of my week for 6.09445585 years.



STEVE:  So I did a little research because I was curious, and it turns out that Marilyn did this in a Parade column, and she had professors and academicians disagreeing with her.



LEO:  People went crazy.  I remember when this happened.  Lots of mathematicians wrote, "No, you're full of it.  The odds can't change."



STEVE:  So our listeners should not be chagrined if they don't get it because professors and academicians the world over were sure she was wrong.  And so here's the final takeaway.  If you are ever presented with the opportunity to get a car or a goat, you do change your choice.  That's all you have to remember.



LEO:  And if you do that over and over and over again, in time you will do much, much better because you have a 50 percent chance of getting it right on that second choice compared to a 33.3 percent chance of getting it right on the first choice.  I think that makes sense.  Monty has put information into the system, and it's that information you're basing your choice on at this point.  Right?



STEVE:  Yup.



LEO:  Seems simple to me.  Steve, our last question comes from Peter in Brisbane, Australia.  He waxes philosophical about the social hacking "I'm from Windows Support" callers.  Remember this?  We had a guy, where was he from?  He was from - one was from Scotland, and one was from Australia.



STEVE:  Oh, and Leo, you wouldn't believe how much - the mail bag was full of people who have been contacted by these clowns.



LEO:  Very common.  And so they call up to say, I'm from Windows Support.  We can tell, we can see there's a problem on your system.  Do this, do that.  They scare you.  And then they hack you.  Steve and Leo, I've been listening to your FAQ Episode 318 where you read a letter from a listener who had received a phone call from somebody claiming to be from "Windows Support."  I had a quiet laugh about this.  I get one of these calls almost every day when I'm at home.  I had just settled back into the study after listening to the show, and the phone rings.  Would you believe it?  [Indian accent]  "Windows Support" is calling.



I've got a number of ways I handle these calls, ranging from just hanging up to letting them have their way, all the way up to when they ask me to download something from the web.  By the way, this is why Bruce Schneier's recom- or is it Brian Krebs? - Brian Krebs's recommendation that don't put anything on your computer that you didn't go out and get?  Well, this would be something you went out and got because you were socially engineered.  So that's my only kind of caveat on that advice.  That's why I don't say that on the radio because people say, "But I went out and got it."  Yeah, you nitwit.



This time I tried something different.  The Indian fellow went through his script as before, saying they had detected problems with my computer, which was in fact a Linux machine - [Indian accent] "You are running Windows, I can tell" - and asking if I was the main user.  I said yes and then decided to ask him, "Are you happy with your job?"  Silence, then he tries to get back on the script.  I asked if he thought he was doing a good job.  He had obviously lost track, as I was not following the script.  I asked if he thought stealing from people was a good job because he certainly knew that everything coming out of his mouth was a lie.



I got a little carried away.  I told him I thought he was a bad, bad person - "You're a bad person" - and should be ashamed of what he was doing.  I asked if he would go into an old lady's house and steal her money because that's exactly what he was really doing.  Silence.  Then this small voice:  "But I need a job."  I think he may have been crying.  Oh, heck.  What could I say?  It was obvious he was well aware of what he was doing, but he had little choice.  I hung up the phone feeling a little guilty.



I have recently been reading Cory Doctorow's "For the Win," and this got me thinking about how things must be for people who have no choice but to take on these jobs.  The problem is not that these people are out there trying to take advance of people's ignorance of technology.  The problem is the systems we use are so bad that they can ring up a random person and be fairly sure their computer will be behaving so poorly that the person who answers, anyone who answers, will be ready to believe the caller has magically appeared to assist them.  He's absolutely right.  It's no surprise that the iPad and to a lesser extent Mac computers are selling so well.  People are just looking for a computer that will run well without an IT support team on call 24/7.  Steve, thanks for the show.  Leo, thank you very much for your excellent network.  I listen every day.  Peter.



Peter, thank you for that.  That's very thoughtful.  And he's thinking about the other guy on the other side.  And you know, it's true.  He probably needs that job desperately.



STEVE:  Yeah.  And I guess I hadn't been focused on the fact that it is so clear that the person doing these calls absolutely knows how illegitimate they're being.  I mean...



LEO:  Oh, of course.  You'd have to be an idiot.



STEVE:  Absolutely, yeah.



LEO:  Not to know.  I liked that email.  Thank you, Peter.  It's a very good point.  And there's two points.  One is these guys probably have no choice.  They're in a third-world nation.  It's hard to get jobs, whatever.  But the other point is it only works because our systems are so crappy.



STEVE:  Yup.  We have set ourselves up for this kind of call because, exactly as he says, most systems are limping along, barely functioning.  And people are grasping for the idea that they could get some help and make it better.



LEO:  The chatroom just published an article.  Apparently Microsoft was doing business with one of these scammers and recently terminated their relationship, possibly - I haven't read the article, but I would guess that sometimes these guys are in fact Microsoft support houses.



STEVE:  Ooh.



LEO:  That realized there was no money in it.  And they thought, well, we can do some other things, too.  As long as we're here.  As long as we've got the phones.



STEVE:  Yes, we've got their numbers.



LEO:  They never showed that on "Outsourced."



STEVE:  Wow.



LEO:  Wow is right.  Steve, thank you so much, as always.  What a fun show to do.  I learn so much.  I appreciate your working so hard on it, putting this all together.  Next week what do we have on the docket?



STEVE:  Next week we're going to talk about the BEAST, the hack that has recently been sort of implemented.  It's a problem that has been known with SSL and TLS for about a decade, but not really believed to be a problem.  Well, a couple of researchers showed how it could be done, and we're going to talk about the need to update SSL and TLS to give us the privacy that we think that we're getting.



LEO:  Fascinating.  If you want to know more, of course, go to Steve's site, GRC.com, the Gibson Research Corporation.  It's awaiting you.  Steve keeps 16KB versions of this show there, and transcriptions as well.  We have audio and video on our site, TWiT.tv.  And of course you can watch us do this live every Wednesday at 11:00 a.m. Pacific, 2:00 p.m. Eastern at live.twit.tv, or actually just TWiT.tv works now, as well.  And 1800 UTC, if you're tuning in from outside the U.S.



But again, GRC.com.  And while you're there, get SpinRite.  That's Steve's bread and butter, his great hard drive maintenance utility.  There's lots of free stuff there, like the Perfect Paper Passwords, the new Off The Grid, of course the Password Haystacks.  I was on the radio in San Francisco on Monday, Steve, and somebody called and asked about passwords, and I used that as a way to - and you know what, you can fairly easily describe how it works.  I said, "Here's a way to beef up your password strength."  So we're spreading that word.  I think it's good.



STEVE:  Yeah, and in fact NPR is going to get a studio for me because they want to do a story on it, too.



LEO:  Wow.



STEVE:  So the word is spreading.



LEO:  Well done.



STEVE:  Yeah.



LEO:  GRC.com.  Do come back and join us next Wednesday when we do this show all over again.  Thank you, Steve, and I'll see you next week on Security Now!



STEVE:  Thanks, Leo.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#321

DATE:		October 6, 2011

TITLE:		The Beauty of B.E.A.S.T.

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-321.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 





DESCRIPTION:  After catching up with the week's security news, Steve and Leo examine the implications of a recent Internet-wide exploit known as BEAST: Browser Exploits Against SSL/TLS.  They share the process used by the discoverers of an exploit for this long-known vulnerability and consider its implications.



LEO LAPORTE:  It's time for Security Now! with Steve Gibson, Episode 321, recorded October 5, 2011:  The Beauty of BEAST.



It's time for Security Now!, the show that protects yourself and your loved ones and the Bank of America online.  Here he is, ladies and gentlemen, the star of our show from GRC.com, the creator of SpinRite, the world's best hard drive and maintenance and recovery utility, but also a lot of security utilities, and a man who's really made it his mission in life to study security, Steve Gibson.



STEVE GIBSON:  Sometimes we scare our listeners, but that helps to keep them on their toes.



LEO:  Sometimes they need to be scared.



STEVE:  I do think, yes, I think in general if we can show people the actual consequences of clicking on links in email, then they are less likely to succumb to that ever-present temptation to do so.



LEO:  Well, we do more than that, of course.



STEVE:  Yeah, of course we do.  We've got a great show today.  We've talked about something that has been much in the news recently:  A couple of fun security researchers managed to turn a decade-old theoretical problem in secure connections - as we know, that's SSL and TLS - into a working exploit.  So the news went all over the place.  They presented at Black Hat and also at a conference more thoroughly in Buenos Aires recently.  And I promised our listeners we would, like, really dig into this.  Well, when I did, I thought, okay, maybe the excruciating details would be apropos to a graduate course in cryptography, not so much an audio podcast.



LEO:  It's that bad.



STEVE:  Oh, my god.  But what I found was actually something even better, which is one of the guys' write-up of the process they went through.  And so that's mostly what I want to share.  We'll talk about what it is they did in enough detail that nobody will come away unsatisfied.  That I can guarantee you because I understand how they did this.  And it's like, okay, how do I ever explain that?  But what's cooler is their chronology of the development of this because that, of course, in its nature applies, not only to this particular instance, but this is in general how these things happen.  And I think that gives us a really interesting - that's something we've never had before, a really interesting look into the development of an exploit from the first little itch that something might be possible.



LEO:  Hmm.



STEVE:  Yeah.  It's going to be great.



LEO:  All right.  We've going to get to that in just a second.  We also have security updates and news and a programming note.  Next week you may be on a jury yourself, I understand.



STEVE:  Well, I'm on call.  I start phoning in Friday evening of this week.  And the good news is the court is close by.  And this is, I guess, what you went through about a month ago; right?



LEO:  I did,  yeah.  I got on the jury, which I was shocked.



STEVE:  Yeah, and I've never been impaneled before.  But I guess - and it's funny, too, because who was I - oh, I know.  I've got an NPR spot set up for next week, and the producer of that, when I was explaining that, well, I hope I'll be available, but I'm not sure that I will be, he said, well, just show up in your security officer uniform from Star Trek, and that might put them off.  And I thought, yeah, that'll probably just piss off the judge because...



LEO:  Yeah, the judge knows.



STEVE:  ...I don't think they take that with much humor any longer.



LEO:  People don't like it when you try to skate.



STEVE:  Unh-unh, exactly.



LEO:  And you know what, it's kind of fun being on a jury.  So if you're on a jury, so be it.  But we'll figure it out.



STEVE:  Oh, absolutely.  I had a friend who said, just don't send back the form, and they'll, like, forget about you, even though it says you can be hauled off to prison.  And I thought, well, hey, you know, I vote.  And I've seen some juries; and, boy, they could use some help.  So I'm happy to do that.



LEO:  Yeah, good for you.  You're a good, civic-minded person.



STEVE:  Oh, and I did exchange some email already with your staff, and I'm sure we can arrange to record Security Now! even, like, in the late afternoon or early evening.  I think that Tom would be available for doing that, so that'd be great.



LEO:  And also the courts in California take one weekday off a week.  So you'll have a day that you could do this, even if you get on a jury.  So we'll figure that out.  We'll make it work.  I am taking next week off for just the five days, just the Monday through Friday.  So it will be Tom Merritt.



STEVE:  Try to even out your tan?



LEO:  Yeah.  Well, now, yeah.  I was just saying how blotchy I got from getting some sun the other day.  I'm thinking old age has struck.  I need that, what is that they call Porcelana age cream, that smoothes out the age spots?  But anyway, enough of that.



STEVE:  So is Tom going to be covering all the shows?



LEO:  No, no, no.  We have many people now.  Iyaz will be doing This Week in Google.  We have - MacBreak will be Alex Lindsay.  No, we're pretty well covered now.  We've got hosts.  Hosts galore.  We're going to get to - go ahead.



STEVE:  Sorry.  I was just going to say Tom and I will have fun with a Q&A, as we always do.



LEO:  Yeah.  Yeah, yeah.  That's what's next week, by the way.  You can leave your questions for Steve at GRC.com/feedback.  All right, Steve Gibson.  We have, I think, a few security updates.



STEVE:  Yeah, we do.  Well, actually one that's almost, well, everyone thought it was - well, okay, nobody thought it was funny.  I was thinking maybe everyone but Google.  As some of our listeners certainly know because I got a lot of tweets about this, an update last week, since we've last spoken to our audience, of Microsoft Security Essentials mistook Google's Chrome browser - Google's competitive Chrome browser - as a notorious ZeuS botnet Trojan and removed it from apparently, Microsoft's instrumentation says, about 3,000 customers.  So, oddly, not a huge number of customers, but a bunch.



So Microsoft posted on the 30th, they said an "incorrect detection" of this botnet "was identified; and, as a result, Google Chrome was inadvertently blocked and in some cases removed from customers' PCs.  We have already fixed the issue.  We released an updated signature" - actually it was a few hours later - "at 9:57 a.m. PDT, but approximately 3,000 customers were impacted."  Oh, so that's why.  It's probably because they caught it - it was reported, and they caught it, and they fixed it so quickly that they were able to fix this before it made more problems.



LEO:  Yeah, but you've got to wonder how many people are using Microsoft Security Essentials if it only affected 3,000 people.  I mean, what?



STEVE:  Probably it's that it was - not all systems are checking all the time and downloading it constantly, so it's being staggered out over time.  And they got it fixed before it got out to many of the Windows users.  And they said, "Affected customers should manually update Microsoft Security Essentials to the latest signatures.  To do this, simply launch MSE, go to the update tab and click the Update button, and then reinstall Google Chrome."



Now, it turns out it wasn't quite that easy because some users were trying to do that who had had their Chrome.exe executable deleted.  And it wasn't until they went into Add/Remove Programs and manually removed all of the other components of Chrome that then an updated Chrome with their updated MSE signatures was able to install.  So this is the first time, you know, false positives happen from time to time.  We've talked about it.  I've had random AV suites every couple of years will declare one of my EXEs that's been sitting around on my server untouched for five years, it's like, oh, suddenly it's infected.  It's like, no, no, it's not.  Just update your patterns, report it to the vendor, and let them fix their stuff.  So this sort of happens.



The problem is you can't - Microsoft can't, for example, make an exception for files named Chrome.exe.  Or if they did, bad guys would start naming their malware "Chrome.exe," knowing that MSE would skip over it.  So this is inherently an error-prone process.  They have to do things heuristically.  They can't simply make a fingerprint, like a cryptographic fingerprint, to check to see if something is a known piece of malware because now the malware is all polymorphic and changing itself from instance to instance and from infection to infection on the fly.



LEO:  Explain what that means, "polymorphic."  That's a good term.



STEVE:  Yeah, it essentially means that the malware is deliberately working to make it difficult for it to be recognized.  It's built from many different small pieces, and it'll dynamically rearrange them so that the same code is not in the same location.  Or there are even some algorithms that will, on the fly, rewrite themselves in different ways to achieve the same end.  So it's truly different code on a per-instance basis.  We know that computers are powerful.  Software is powerful.  And often the bad guys are spending an awful lot of their own mental cycles trying to figure out how to get around being caught by antivirus.  And so this is sort of the escalation of the cat-and-mouse has been the evolution of malware so that individual instances are actually different files.  They do the same thing.  They're technically the same malware.  But they don't even look like the same program.



LEO:  It's amazing.  That's so sophisticated.  It's like the rhinovirus of malware.



STEVE:  Yeah, exactly.



LEO:  It's mutating.



STEVE:  So consequently that means that the AV guys have to actually do behavior analysis.  They have to look at what this thing does, what things it hooks, because they can no longer look at what it looks like statically.  They've now been reduced to watching its behavior dynamically and see if it's behaving in a way that seems suspicious.  And so you can imagine programs that want to do the same sorts of things with a system for benign reasons sometimes get caught.



Like my code, the very popular tool I have that allows people to see what capabilities their processor has, which has been used because people have been wanting to see which levels of virtualization they have, that got called malware for a while until people complained and the AV people fixed it.  And the reason was I was looking at the same sorts of things that malware needs to look at to decide how it should act.  And so immature AV systems said, uh, this might be a bad thing.  It's like, no.  I'm on your side.  So it is, it's tricky.



LEO:  Well, I'm glad they figured it out.  False positives are a real problem.



STEVE:  They're not going to go away, either.  It's just...



LEO:  No.  And I don't know if heuristics are enough.  That's the proactive kind of looking at bad activity.



STEVE:  The only ultimate solution is just not feasible within our current ecosystem, and that is to have all applications signed, cryptographically signed, and only run the things that are signed.  We talked about this in a similar vein last week when we talked about secure boot, where every single component of the system that would be booted would have its signature cryptographically verified prior to it executing.  And the immediate hue and cry went up, it's like, wait a minute, you're anti-Linux because Linux is open source, and we want everyone to be able to submit code and blah blah blah.



So the idea there is you would deny all execution unless it was proven to be a known and trusted publisher.  So that flips the model upside down, and there's just no way that's going to fly because people who make freeware who aren't able to pay for and maintain certificates would just not be able to have their software run, I mean, without all kinds of warning dialogues.  And then you train users just to click yes, yes, yes, yes, yes, and then you've lost all your protection.  So this is a problem that we don't have a good solution for.



The other big news was a huge problem that was uncovered in HTC handsets.  What happened was HTC added a raft of logging technology relatively recently to a large number of their handsets.  Essentially they were rolling it out across their line - the EVO 4G, the EVO 3D, the Thunderbolt, the EVO Shift 4G, probably the myTouch 4G Slide, the Vigor, the View 4G, and probably the upcoming Kingdom.  Oh, and those are, I guess, HTC Sensation models that were affected.



So the discoverers of this notified HTC, doing the right thing, received no response.  HTC just apparently blew them off.  So they thought, fine, we'll go public.  So of course HTC has now responded and in fact acknowledged with a blog posting that said, "A privilege escalation vulnerability allows a potentially malicious app that uses only the Internet permission [token] to connect to HTC's HTCLoggers service and get access to data far exceeding its access rights.  This data includes call history, the list of user accounts, including email addresses, SMS data, system logs, GPS location data, and more."



So the guys that found it were the Android Police group, and they said, "In recent updates to some of its devices, HTC introduces a suite of logging tools that collects information.  Lots of information.  Lots.  Whatever the reason was, whether for better understanding problems on users' devices, easier remote access, corporate evilness, it doesn't matter.  If you, as a company, plant these information collectors on a device, you'd better be damn sure the information they collect is secured and only available to privileged services or the user, after opting in.



"That is not the case.  What Trevor found is only the tip of the iceberg.  We're still digging deeper, but currently any app on affected devices that requests a single android.permission.INTERNET, which is normal for any app that connects to the web or shows ads, can get its hands on the list of user accounts, including email addresses and sync status for each; the last known network and GPS locations and a limited previous history of locations; phone numbers from the phone log; SMS data, including phone numbers and encoded text," and then he wrote, "not sure yet if it's possible to decode, but very likely; and system logs, both kernel level and app level, which includes everything your running apps do and is likely to include email addresses, phone numbers, and other private info."



And so they said, "Normally, applications get access to only what is allowed by the permissions they [explicitly] request [and the user explicitly allows].  So when you install a simple, innocent-looking new game from the Market that only asks for the Internet permission, for example to submit scores online, you don't expect it to be able to read your phone log or [your] list of emails."  So that's the story behind that.



So essentially, obviously, the model that we have in our phones is one where - and we've talked about this in more detail in the past about Apple's model for the iPhone, where you do have careful inter-application sandboxing, where each app is only able to see those services and those portions of essentially a shared file system that you explicitly give the app to.  This has been a source of some chafing for iPhone users because it does certainly restrict the kinds of things the app is able to do.  People who wish their smartphone was more like a computer, where they could freely browse through the phone's file system, drag and drop files around, download with one app and transfer it over into another, those features don't exist specifically for the sake of security.  It's those features that do make our PCs much more susceptible to exploitation.  So we don't have that in our smartphones.  And what was found, of course, was that this logging system really did not have sufficient security.  So HTC probably, I expect, in the future will be a little more responsive to people who find and report problems.



LEO:  Well, they only gave them five days.  I guess that's normal, though.



STEVE:  Well, they gave them five days after no response.  I mean, they didn't - it wasn't five days to fix it, it was...



LEO:  They said they didn't hear anything for five days, right.  Not even a, oh, we're looking into it kind of a thing.



STEVE:  Not even an acknowledgment, let's work together, show us your data kind of thing.  Just nothing.



LEO:  Right.  You know there was a security flaw with the Samsung Galaxy S2 on AT&T that was kind of silly.  If you had a screen lock on it, and you turned this phone on and just let it sit for a second until it turned itself back off again, and then turned it on, there was no screen lock at all.  So they have to fix that, too.  Both HTC and Samsung have patches to do.  That was only on the AT&T platform, by the way.  There's a little sloppiness going on here, and I think these handsets are just going to be so ripe for attacks, they'd better start paying attention.



STEVE:  Oh, Leo.  Yup, absolutely.  So Brian Krebs, our friend who watches security things very closely, blogged an interesting post that had a couple lessons that I wanted to refresh our listeners about.  What he blogged was that - the title was "Monster Spam Campaigns Lead to Cyberheists."  And a little excerpt from it said that "Phishers and cyber thieves have been casting an unusually wide net lately, blasting out huge volumes of fraudulent email designed to spread password-stealing banking Trojans.  Judging from the number of victims who reported costly cyberheists in [just] the past two weeks, many small-to-medium-sized organizations took the bait."



Now, interestingly, I deliberately maintain some honeypot email accounts, and I have noticed a huge volume of subject lines "ACH Payment Cancelled" notices.  And that's the subject which - in fact, I just got two this morning in one of those accounts.  So, for example, just in three instances, recent known attacks within the last two weeks:  On September 13th, computer crooks stole approximately $120,000 from Oncology Services of North Alabama.  Also in late September, $98,000 was stolen from the coffers of North Putnam Community School Corporation, which serves the children of six northern townships of Putnam County, Indiana.  And in a separate attack on a public institution, malicious hackers last month struck the city of Oakdale, California, stealing $118,000 from a city bank account.



So these are large bank transfers.  And what happens is, the money is - so you click on one of these malicious emails.  It installs a Trojan horse in your machine which is designed to watch you log into your electronic banking.  It hijacks your credentials, uses them to then transfer funds to so-called "mules," which are anonymous individuals that have been recruited, third-party individuals recruited by these organizations to receive the money and immediately cash the money out of their accounts and then forward a portion of it, they get to keep a commission, essentially, and forward the bulk, the rest of it on to the actual perpetrators of this.  So this is all going on.



And Brian concludes his posting with exactly the advice I have often stated.  He said, "No single approach or technology will stop all of these account takeovers.  But preventing the theft of your online banking credentials is a critical first step."  Yeah, no kidding.  He says, "That's why I continue to advise that small- to mid-sized organizations use a dedicated computer for online banking," which is what we've talked about several times.  "Using a non-Windows PC, such as Live CD or a Mac, is the safest approach," because these are Windows-based Trojans because they're trying to cast the widest net possible, "but not necessarily the most practical or affordable solution.  An alternative approach is to access bank accounts from an isolated Windows PC that is locked down, regularly updated, and used for no other purpose than online banking."



And of course what I'll just add to that is what I have done for myself is I have said to Sue, I know doing these things online would be a convenience, but we just can't.  So our accounts are locked down.  The accounts themselves deny all electronic fund transfers, these so-called ACH transfers, these clearinghouse transfers.  And though it means that she has to physically go in, she's got to write checks from one account and deposit them in another, it's a pain; but, boy, you know, we're talking about hundreds and thousands of dollars that disappear.  In some cases there's insurance that will cover this.  In some cases some of the funds can be recaptured if this is discovered quickly enough.  But you just don't want this exposure.



So this is really happening.  And I would imagine among our listeners that, if I talk about this "ACH Payment Cancelled" email, I mean, I'm seeing so much of it.  I am absolutely seeing, in my honeypot email accounts, what Brian is talking about.  There's been a huge escalation, only in the last few weeks.  And of course it's because these attacks are so successful.  People just can't help themselves.  They click on the link.



LEO:  Of course, if you're using Gmail, which I'm sure most of our listeners use, I'm sure that Gmail is catching them all and killing them.



STEVE:  Yes, it would have immediately come up to speed and said, whoops, this is spam, and put it in.  Although remember that RSA was hacked because someone went into their spam folder and clicked the link.  So even that...



LEO:  Bad idea.  Kids, don't go into your spam folder and then click links.  That's a bad idea.  So what is the subject line?  ACH Cancelled?



STEVE:  ACH - I just scrolled past it.  "ACH Payment Cancelled."



LEO:  Payment - I'm just going to search in my spam and so forth, see if I see it.  So when you do a honey bucket, it's something that has no filtering.



STEVE:  Yeah.  So I'm looking at two emails.  ACH01 is the "from" address.  And the subject line is "ACH Payment," and then it's got a random number, a random seven-digit number to make it look more authentic, and so that a subject line match won't.



LEO:  Ah, I found a couple.



STEVE:  And then it says - huh?



LEO:  I found a couple.



STEVE:  Uh-huh.



LEO:  Escalation.  Re action required.



STEVE:  Yup.  In fact, I've got one here on 8/2 and 8/3.  I've got two more on 8/2 and 8 - so that's just in the last couple days.



LEO:  These are from - this is in July and from AP Associates.  They're meant to look like an Amazon Associates account.



STEVE:  And actually what's changed, and Brian talks about this, is they're now coming from a different source that apparently - I'm looking at, okay, here's 8/3.



LEO:  I think I fell for this, actually.



STEVE:  It's NACHA.org, which is a well-known non-profit organization.  And in fact the one I'm looking at here has a .pdf.zip attached.  And there's a different attack which is using a subtle glitch in URL rendering.  There's a Unicode character that induces right-to-left reading.  And so it's been used as a hack, a new way of covering up the fact that this is actually a .zip, which is - it's made to obscure that and make it look just like a .pdf.  So, I mean, these guys are just doing everything they can.



LEO:  Now, I have to say, this is I think actually legitimate.  ACH is Amazon Associate payments.  And the link in here is - and I can see the actual link - is associates.amazon.com.  So it's not a bogus link or a hidden link.  It's not an HTML email.  And then you say there might be a PDF attached?  Is that another vector of attack?



STEVE:  Well, what I'm seeing is, yeah, I've got two of them.



LEO:  So what I'm saying is the one you've got is an attempt to duplicate legitimate Amazon emails.



STEVE:  Ah, okay.



LEO:  I would guess.



STEVE:  Although mine clearly comes from NACHA.us.



LEO:  Yeah, this is from Amazon.com.  Although you could spoof that.



STEVE:  Yeah.  And Brian did talk about this as the source of these new emails.  So anyway, there just is a lot of this going on.  So all of our listeners, don't click those, no matter where you find them.  And really do take the issue of protecting your online electronic funds transfer-accessible accounts carefully because the bad guys want to get your money, unfortunately.



LEO:  Yes, they do.



STEVE:  Yeah, and they're clever.  So, last week I completely forgot to talk about something from the prior week.  And if it's not in my notes, because I'm notes-driven here during the podcast, I forget it.  And so I forgot to write it down, and I just cruised right past it.  We talked two weeks ago about how Bitcasa was doing file merging, and how they were managing to offer truly unlimited file space under the explanation that they were merging files from different users, yet they were unable to decrypt it.



And I'm really impressed with our listeners because I on the spot cooked up a complex means using public key encryption which would allow that to be made true, using a random encryption key for the file, which was then encrypted under the user's private key.  And if Bitcasa wanted somebody else to have access to it, then they were able to pass that through using the other person's public key and so forth.  Well, a bunch of listeners said, uh, Steve?  And actually it had occurred to me, too, by the time I saw it.  But I've got to give credit to all of our listeners who came up with a super elegant, much simpler solution, which is exactly what Bitcasa, among other things, is doing.  You're going to love this, Leo.  This is just beautiful, beautiful crypto.



LEO:  Okay, cool.



STEVE:  They hash the file, and that's the key.



LEO:  Okay.



STEVE:  So think about it.  If you...



LEO:  So they're using the plaintext hash as the key?



STEVE:  No.  Well, you take a file...



LEO:  You're hashing the plaintext.



STEVE:  Yes.  You hash the plaintext, and that gives you a signature.  And you encrypt the file with that.



LEO:  Clever.



STEVE:  So only if you have the file...



LEO:  You can only unencrypt if you have the plaintext.



STEVE:  Yes.  And so the idea is, well, just incredibly elegant.  So all that you ever share with Bitcasa is the - well, okay.  All you ever share, all that is ever shared with Bitcasa is an encrypted file.  And the file is encrypted under or using that unencrypted file's hash.  So only somebody who legitimately has the identical file is able to hash it and get the same key.



LEO:  Ah.  Got it.



STEVE:  And then you could either do a different type of hash of the plaintext, or simply hash the encrypted file sort of as the token.  So you, a user, you hash the unencrypted file to get the key.  You encrypt the file with the result of that hash, with that key.  Now you have the ciphertext.  Then you hash that to get a token which represents that file.



LEO:  Now, the hash is considerably shorter than the original file.



STEVE:  Oh, gosh.  The hash, remember, it's going to be 256 bits.  It's going to be, like, that's - it's going to be a fixed-size digest of the entire file, no matter how big the file is.



LEO:  So you run it across - so let's say we all have the song "I've Got a Lovely Bunch of Coconuts."  And I run that...



STEVE:  Leo, that's the song I had in mind.



LEO:  I thought it might be.



STEVE:  Amazing.



LEO:  And so then I - and I don't know what it is, an MD5 hash.  It's some common hash algorithm.



STEVE:  Let's hope that it's an SHA-256.



LEO:  Yeah, MD5 was cracked, we know that, yeah.



STEVE:  We would like to have it also produce a 256-bit key, which we then use AES-256 in order to encrypt.



LEO:  So we take the plain file, the unencrypted song.  We hash it using SHA.  And we get a 256-bit key.



STEVE:  Exactly.



LEO:  Okay.  And then, now, then we encrypt the file using that key and upload it to Bitcasa.  Any - no?



STEVE:  Well, actually we - no, because we don't want to be uploading files they already have.



LEO:  Well, they get, oh, yeah, yeah, right.  We push the button to upload it, and Bitcasa says, no problem, I already have that key.



STEVE:  Yes.  So actually we push the button to upload it, and the pushing the button hashes the encrypted file to produce a signature for it.  That gets sent to Bitcasa, 256 bits.



LEO:  Just to check.



STEVE:  They check.



LEO:  They say, yeah, we got that, yeah, yeah.



STEVE:  Yup, exactly.  And they say, you're covered.  So...



LEO:  Now, this still would make you open - but this all comes from this whole issue of how do you encrypt and only keep one copy of a file, which we were trying to figure out.  Now, this still makes you prone to the same problem that, let's say I'm the MPAA, and I'm looking for people who have "The Hurt Locker."



STEVE:  Yes, and so...



LEO:  I do the same thing, and now I have access to all the people who have "Hurt Locker."



STEVE:  And the lesson is, this is not to avoid, I mean, this is not to enable piracy.  Everyone...



LEO:  It doesn't make you anonymous.



STEVE:  Precisely.  Well, it doesn't make it impossible to prove what files you have.  If that's what you want, you've got to encrypt with your own private key and pay some money to use the cloud.  This is free because it's unlimited because it is amalgamating all the files across all of  their customers, which allows them to offer unlimited storage for free.  Now, frankly, Leo, what you could do is there's lots of metadata in the headers of audio files and video files.  So you could change, you could just change one bit...



LEO:  One bit, and it's different.



STEVE:  Yes.  And so, strange how this one guy doesn't share any files in common with everyone else.  Yet we're still offering him unlimited file upload storage.



LEO:  So that's the problem.  If everyone were to do that, it would break Bitcasa's model.



STEVE:  Exactly.



LEO:  So is this - I forgot how we - okay.  This all came up because Bitcasa, I think, won TechCrunch Disrupt, or was one of the - now, didn't win it, but it was one of the big names that was very excited, people were very excited about it.  And they purport to offer unlimited cloud storage for, I think it was 10 bucks.  Or free, or whatever.  And we were trying to figure out how can - and they claimed that it would be private because they support encryption.



STEVE:  That they were unable to respond to a subpoena to produce the file contents.



LEO:  Right, right.



STEVE:  And so we quickly, two weeks ago, came up with a hack that was overly complex.



LEO:  This is easier.



STEVE:  But really what I wanted to share with our listeners was just the elegance of hashing the file to produce its key that you then use to encrypt it.  That's just spectacular because...



LEO:  Web8349 asks about hash collisions.  How often does that happen?



STEVE:  Yeah.  With an SHA 256-bit hash - and that's, again, another reason you want a lot of bits.  You'd rather - many hashes are secure with 128 bits.  256 bits, oh, my goodness, even a birthday collision where two arbitrary files have a collision, it's just, it's apt, it's, well, and you could also keep the size.  So do the hash and the size.  And the possibility of a collision both in hash and size is, like, astronomically low.



LEO:  Got it.



STEVE:  But that's a great question.  So this is completely miscellaneous, but I just wanted to remind our listeners.  I encountered somebody the other day who runs their Kindle battery to the ground.  That is, they read and read and read and read, and actually my mom does that, too...



LEO:  I do, too.



STEVE:  ...but I'm not going to try to change her behavior.



LEO:  I do it, too.  Is it bad to do that?



STEVE:  Very bad.  Lithium ion batteries hate that.  I've done, just in the last few months, I did a lot of research into care and maintenance of lithium ion batteries for the whole Portable Sound Blaster project.  And I saw again a lot of information that says that's not the way to get the  maximum lifetime out of lithium ion batteries.  Now, it's one thing if the batteries are removable.  But increasingly on our electronics devices they're not.  Kindle's batteries are not user serviceable.



LEO:  They used to be.  They were in the first one.  Not anymore.



STEVE:  Yup.  Mac Air batteries are not; iPhone, iPod and so forth batteries are not.  So I just wanted to say to our listeners, what lithium ion batteries want is to stay charged.  So, I mean, if you want to get the maximum lifetime out of them, just in the same way that phones - phones generally stay charged because they have such a short lifetime of use that people get into the habit of docking them at the end of every day.  Sometimes even at work they'll go plug them in to bring them back up.  But something like the Kindle or like the Air and so forth, in general, if you can, plug them in.  So just, again, pure miscellany, but I just - every time I encounter people running their batteries to the ground, I think, oh, lithium ion doesn't like that.



LEO:  See, the reason people do it is because that was the thing to do with nickel metal hydride.



STEVE:  Exactly.



LEO:  You wanted to fully..



STEVE:  NiCads.



LEO:  And NiCads, too.  You want to fully discharge them because of the memory effect.



STEVE:  Exactly.  And so that absolutely is the wrong procedure for lithium ion.



LEO:  It's the opposite for lithium ion.  Just remember this, folks.  So you're saying, whenever you have the opportunity, plug it in.



STEVE:  Yes.



LEO:  Smartphone, anything.  This is good to know.



STEVE:  Kindle.  You'll get much more lifetime if you keep those guys charged up.



LEO:  So you just don't want to deplete them all the way.



STEVE:  Right.



LEO:  Is that the issue, is letting it go all the way down?



STEVE:  Well, it's just the nature of the way at the molecular level that the chemistry works, is the chemistry of the battery is happier, for lack of a deep electrochemical explanation, if you keep it charged.  They like to be charged.  And in fact, there's one thing that can happen is that the batteries of unused devices will drop below a threshold, and then they say that they're dead.  It's like, not even...



LEO:  They can't be recharged, yeah.



STEVE:  It cannot be recharged.  There is actually some circuitry on every single cell that prevents the cell from being overcharged.  That creates a tiny drain on the cell, which is why, if you don't use your device for a long time, like you pick it up after a few months, you'll find it died, even though you weren't using it.  It's because there's a little bit of drain on lithium ion cells which is part of the cell protection circuitry.  So, again, keeping it charged makes it happier.



LEO:  Wow.  That's really good information, thank you.  I'm going to plug in everything.



STEVE:  Yeah.



LEO:  Like your laptop.  You should leave your laptop plugged in when it's sitting on the desk.



STEVE:  Yes, yes.  And what will happen is sometimes the laptop battery management circuitry, or actually the software, will say, you know, we need to do a couple charge cycles to recalibrate our battery meter.  And that's an explicit sort of reconditioning process that the laptop will take you through.  Normally you leave it plugged in, and the circuitry itself deliberately stops using the AC power, takes the battery all the way down, brings it all the way up, takes it all the way down, brings it all the way up, and that allows the metering circuitry to see how long, what the lifetime is in order to then properly guess what percentage of fullness the batteries are at any given time.  But you'll generally get a pop-up that says, hey, we need to do some reconditioning, so leave your laptop plugged in overnight, and we'll take care of it for you.



LEO:  Good to know.  This is very useful.  Thank you.



STEVE:  Yeah.  So I just did want to mention that a lot of our readers are picking up on Honor Harrington.  I wanted to encourage...



LEO:  It's time - wait a minute, I should get a sounder.



STEVE:  No, no...



LEO:  Doo doo ta doo, it's time for the Honor Harrington Update, de de de.



STEVE:  I'm just - I'm going to keep this very short because a couple grumpy people said, okay, you need a sci-fi podcast...



LEO:  Well, there is one.  But okay.



STEVE:  So I just wanted to encourage people to send me feedback.  I would love to hear what people think either way.  So put it in your GRC.com/feedback, and put "Honor Harrington feedback" or "Honor Harrington whatever" in the subject line so it'll catch my eye because I would love to know what people are thinking.



LEO:  Yeah, remember I was going to try it and report back to you.  And I have downloaded - I downloaded the Audible version, and it was horrible.  The reader on the Audible version is the worst.  So I started it, and it was just - just my opinion.  And maybe others like it, I don't know.  But I just - I was very disappointed.  So, and I didn't go very far, so maybe it got better.  But I just didn't want to spoil it; right?  It was just the pro- I didn't even finish the prologue.  Just a page, and I'm thinking, this woman is the worst.



So then I downloaded - the nice thing is you can down- now, I felt I've already bought the book because I bought it on Audible.  So I felt like, well, now I can download the free version, which I did, and put it on my Kindle.  And it formats quite nicely on the Kindle when you download the free version.  So I did that, and I'm reading it on the Kindle.  But that put me back a little bit.  So I've only read the first chapter.  I like it so far.  It's a little - it's a little bit of a potboiler for me.  But I like it all right.  I think Peter F. Hamilton's a better writer.



STEVE:  Oh, well, no one's better than Peter.



LEO:  Yeah, he's a great writer.



STEVE:  He's top of the food chain.



LEO:  Yeah, yeah.  And I will go on Audible and rate that as a poor performance because you can rate the performance as well as the book.  So after I read the book, I'll rate the book highly, and I'll rate the performance low.



STEVE:  Well, so we will like to know what you think.



LEO:  I will let you know, yeah.



STEVE:  I tweeted about a strange article that I encountered on Gizmodo when I was doing some research for the HTC attacks.  I was looking at Gizmodo's page because they had some good coverage of it, and this other, like other top-read stories caught my eye.  And this was one about claiming that the big problem, Leo, the big problem...



LEO:  Yes.  The big problem.



STEVE:  ...with interstellar space travel...



LEO:  Yes?



STEVE:  ...was the difficulty of having sex in space.



LEO:  That's the big problem?  I think - is it difficult or more fun?  I don't know.  I think the jury's still out.



STEVE:  Nothing I have ever tweeted before...



LEO:  What did you tweet?



STEVE:  ...generated so much reply, many of them clever, like, well, they're just not doing it right.



LEO:  That's right.  You're holding it wrong, yes.



STEVE:  And more, you know, give the engineers some time, they'll figure it out.



LEO:  You know, there have always been rumors, much denied, but that both the Russian and the U.S. space programs have experimented with that because, for that very reason, because that's an important human function, and five years' travel to Venus or whatever, you don't, you know - but the Americans hotly deny it.  The Russians not so much.



STEVE:  What do you mean, "hotly"?  Well, anyway...



LEO:  NASA says absolutely not.



STEVE:  I'll tell you, the space suits make it a real problem, though.



LEO:  Well, but in the shuttle, you know, or the ISS.  You could do it in the ISS.  And I would, not to get too randy here...



STEVE:  How many miles high club does that make you?



LEO:  That's pretty high.



STEVE:  That's way out there.



LEO:  But I would think, and I may be wrong, maybe I've read too much science fiction, but weightlessness would make it interesting, to say the least.



STEVE:  Oh, I mean, and...



LEO:  Peter F. Hamilton has a lot of sex in space.



STEVE:  Anyone who's read enough science fiction knows that we have solved this problem.  This was - we need to deal with faster-than-light travel.  We don't need to worry about how to have intercourse with zero gravity.  And some people said - and this was quoted.  This was a serious biologist in a university...



LEO:  Well, it's legitimate.  That's a...



STEVE:  ...who was really very concerned about this problem.  And I'm thinking, boy, she doesn't get out very much because there's definitely going to be a way to solve that.  So anyway, I just - I wanted to thank everyone who tweeted, got a kick out of my tweet and sent their comments back because...



LEO:  Now, on a waterbed, forget it.  But space I'm sure.



STEVE:  Yeah.  And I did want to mention that in my opinion it took four generations, but Amazon has perfected the Kindle.



LEO:  Oh, I agree.  You got the little one, the basic.



STEVE:  Oh, it is done.



LEO:  Isn't it sweet?  Just the right size now.



STEVE:  Yes.  It is cute, and it, I mean, it's done.  It is perfected.  Again, it took them four shots.  But, boy, they're done now.  So I'm just completely happy.  It's a spectacular little device.  And for $79, come on.  I just hope they do really well with it.



LEO:  I think there's no doubt they will.  And actually I can't wait to get a Fire.  I know you ordered one, as well.  The Touch hasn't arrived yet, has it?



STEVE:  No.  And that's actually a little bit later than the Fire is expected to.



LEO:  Oh, interesting.



STEVE:  Yeah.  I did want to share an anonymous note from somebody who had some feedback about SpinRite, my bread-and-butter product.  He said, "I've been a user of SpinRite through its many versions, and it has saved me from complete disaster more than a few times.  Months ago I upgraded to SpinRite 6.0" - the current version - "even though I didn't have an immediate need for it.  But this morning my normally problem-free laptop wouldn't boot.  It just went into the BIOS setup over and over.  So I booted and ran SpinRite 6.0 from the CD.  It immediately found and fixed a defective sector at the beginning of the drive.  I then rebooted normally, and everything was fine.  Thanks again, Steve.  SpinRite has saved me many, many times what I've spent over the years.  It's no doubt the single most valuable disk utility in existence."  So I wish I had his name to thank him, but he sent it anonymously.  So thank you, Mr. Anonymous Person.



LEO:  Yay.  Happy anonymous person, thank you.



STEVE:  Yeah.



LEO:  Okay, Steverino.  What the heck is BEAST?



STEVE:  So the story begins a decade ago.  I checked some dates, and the Transport Layer Security, TLS, which is the evolution from the so-called SSL, Secure Sockets Layer, its RFC 2246 is dated January of 1999.  So what's that, that's 12 years ago.  The next generation, the point update to it, TLS v1.1, has an RFC of 4346 versus 2246, so, whoa, [2100] RFCs later.  Of course, you know, the Internet's been going crazy since then, so lots of publications.  But it's dated April '06.



In drilling down to find out where this problem first occurred to someone, I found some email dated 2001, so fully a decade ago.  And in some of the documentation at OpenSSL.org, so the open source version of the Secure Sockets Layer and Transport Layer Security, TLS, which was - and that document I found was last dated '04, but was originally written earlier - said, quote, "There are some problems with the CBC-based cipher suites in SSL 3.0" - which is the last version of SSL - "and TLS 1.0" - which was the first version, obviously, of TLS.  And they're actually the same suite.  They basically renamed - they made tiny changes to SSL 3.0, nothing substantial, and basically renamed it because they liked TLS 1.0 better - "that can be exploited by active adversaries under specific circumstances."



So that of course says nothing about the problem.  But there was lots of analysis of the problem at the time, and it was one of the major fixes in TLS 1.0, which then abandoned SSL completely.  SSL is no longer moving past 3.0, where it stopped, where it died, essentially, and was taken over by TLS, which is the same thing, just under a different name.  So one of the things they fixed with that updated RFC, but essentially this has been a problem that's been known for 10 years, appeared in TLS 1.1.



Now, the problem is that there was never any pressure on anyone, really, to adopt TLS 1.1, let alone 1.2, which is the currently available version.  The standard exists.  It's even in Windows 7 and Microsoft Server 2008, and it's disabled.  It's in OpenSSL and it's disabled, that is, these later versions, because there have been some compatibility problems, notably with IE6 that had some trouble with it.  So because there was no, like, urgent need to move off of 1.0, no one has.



Well, that changed, happily, when a couple very clever security researchers, Juliano Rizzo and Thai Duong, settled down to figure out how to make this thing happen.  As I mentioned at the top of the show, they talked about it at Black Hat.  They demonstrated at the ekoparty Security Conference in Buenos Aires.  And I'm going to talk about the attack in detail in a minute.  But first I think what's really interesting and educational is to understand how this happens.  How do a couple sharp guys who kind of get an itch about maybe there's something here, how do they, like, nail it down to something that actually works?  So in Thai Duong's blog on BEAST, September 25th, so that's the Sunday before last, he writes:



"So we gave a talk and a live demo at ekoparty last week to show how BEAST exploits a weakness in SSL to decrypt secret cookies.



"Please note that BEAST does not do any harm to remote servers.  In fact, no packet from BEAST has ever been sent to any servers.  We chose PayPal because they do everything right when it comes to server-side SSL, and that is good to demonstrate the power of BEAST, which is a client-side SSL attack.  We reported the vulnerability to browser, plug-in and SSL vendors several months ago."  So these guys were being very responsible.



"Current version" - and English is not this guy's first language.  So I'm going to read this as he wrote it because it's kind of quaint, and they have a sense of humor which comes through, too, which I like.  "Current version of BEAST consists of JavaScript/applet agents and a network sniffer."  And actually it's more than that, it's a full-on man in the middle that needs to be able to not only sniff, but block and intercept and alter network traffic.  But we'll get to that in a second.



"We have some choices for the agent.  At the time we reported the bug to vendors, HTML5 WebSockets could be used to build a BEAST agent."  Now, that's significant because all modern browsers support HTML5 with WebSockets.  So that meant that just native technology in browsers would work.  "But, due to unrelated reasons, the WebSockets protocol was already in the process of changing" - this is a few months ago - "in such a way that stopped it.  We can't use the new WebSockets protocol shipped with browsers.  We use a Java applet in this video, but please be aware that it may be possible to implement a JavaScript agent with XMLHttpRequest, as well."  Now, that's the whole - that's the part of JavaScript where the browser is making queries back to the server in order to do all kinds of fancy, on-the-fly things.  So this XMLHttpRequest is a technology also built into contemporary browsers.



So he says, "Be aware that that it may be possible to implement a JavaScript agent" - meaning that doesn't need Java also, a Java applet - "with XMLHttpRequest, as well."  Then he says, "Why don't you take a look?  Note that it is relatively easy to run a script or an applet in your browser without you doing anything (e.g., by intercepting any HTTP requests from your browser)."  That is, like the man in the middle could intercept the request and then return content that would cause your browser to invoke a Java applet from somewhere.  So, and that somewhere is another problem because we have the whole Same Origin Policy that prevents things from coming from places other than where we're surfing.



So he writes, "It's relatively easy to run a script or an applet in your browser without you doing anything by intercepting any HTTP requests from your browser.  After all, each agent is just a piece of JavaScript or an applet.  Once an agent has been loaded, BEAST can patiently wait until you sign in to some valuable websites to steal your accounts."  Now, that's significant because some of the advice I've seen, for example, some of the stuff that Microsoft has been advising people who are worried about this is close all the other tabs on your browser and then log in over HTTPS to a secure site, and you're going to be safe against BEAST.



So what they're saying is that some other tab could have been compromised.  And because this is not running, even though it's not running in your current tab, BEAST running on that other tab in cahoots with this network sniffer man in the middle could perform the attack, which is true.  So, and again, one of the things I'm sure our listeners are going to take away from this is this is not something to worry about a lot.  I mean, this is a very sophisticated proof of concept.  The good news it's gotten everybody's attention, and we're going to close this problem before it ends up being escalated into a serious attack.



So he continues, "In order to make the Java applet agent work, we have to bypass the Same Origin Policy," which is to say that has to get bypassed, too, because they've got to load the Java applet from somewhere that won't be the site you're visiting because PayPal isn't going to send you this malware Java.  It's going to be, it's going to come from a server that these guys provide.  And we already know that the Same Origin Policy in all of our browsers, which is avidly supported because it prevents so many exploits, that's going to stand in the way of this thing happening, too.



So they said, "Some people have gotten the impression that BEAST required an SOP bypass bug to work and so it's not a threat by itself.  That's not true.  It is well known that even with a SOP bypass in Java, you cannot read existing cookies.  [But] you can send requests and may read responses," which actually is part of what their BEAST system does, which he says "may include new cookies; but, no, you cannot read existing cookies.  In the video (and the live demo, as well) we show clearly that we decrypt existing cookies that were already stored in the browser's cookie jar.  During our research, we indeed found" - and here, this is key.  "During our research we indeed found a Java SOP bypass.  We wanted to focus on more important parts of BEAST, such as the actual crypto attack and optimizations, so we stopped looking for alternatives and used the SOP vulnerability [that we had found for our purposes] to make an agent."



So that's really significant and interesting, too.  So here are some guys who say, okay, in order to do this, we need to be able to load malicious Java from somewhere else.  So Java doesn't - Java is designed to prevent that.  The browser is designed to prevent that.  But we need that.  So they just do.  Like there just happens to be one when they go looking for it that exactly suits their purposes.  So that's sort of a summary.



Then he says, "It began [this search of theirs] with the alleged backdoor in OpenBSD's IPSEC stack."  And Leo, you'll remember we covered that and talked about it like, what, a year ago or so.  He says, "One day in late December 2010, Juliano sent me an email telling me that he got a new idea.  He was at some beach in Indonesia reading tls-cbc.txt."



LEO:  Oh, that's just sad.  



STEVE:  And then he says, "I know that 'beach' and TLS and CBC should not appear in the same sentence [as the beach]."



LEO:  I agree.



STEVE:  "But, well, maybe [Juliano] is not very interested in bikinis."  Actually, later we learn that Juliano was interested in bikinis because he's not making much progress on the beach.  And so he says, "And he came up with the chosen-boundary attack," which I'll get to at the end of this, the "chosen boundary attack on TLS/CBC, which is the TLS protocol when you're using the CBC cipher."



TLS, and our listeners who remember, we did a whole podcast on how SSL works.  You'll remember that the browser in its initial SSL handshake sends a list of all the different cipher suites that it supports up to the server.  And from among them the server chooses whatever one it wants in order for them to agree on something that they both know about.  So not all of these cipher suites use CBC.  Many of them use RC4.  Now, RC4 got a bad rap because that's what WEP used, and it was the misuse of RC4 - which is just a fine cipher, but it was misused in WEP, which meant that some keys that users might use were weak, and essentially that was one of the ways in.  But RC4, when used properly, as it's used by SSL and even TLS properly, is perfectly secure.



And so one of the things Microsoft has suggested is that webmasters could change the order of preference of cipher suites used by SSL and TLS so that RC4 suites are chosen before CBC, and that also completely solves this problem.  And everybody supports RC4.  Google has actually been doing this for a long time.  They didn't move to CBC, so they've never had a problem.  So he says, so Juliano on the beach, reading this technical document when he wasn't being distracted by the bikinis, came up with the chosen-boundary attack, which I'll explain at the end.



"In hindsight, it's obvious that somebody would think of that when they read about Dai's attack."  Dai is a previous security researcher who laid some of the fundamentals of this.  "In hindsight, however, everything is obvious."  Which of course is true.  "It takes somebody like Juliano to have such a good idea.  I am so lucky that he always shares his ideas with me.  I wrote some test cases using the wonderful TLS Lite library, and after some hours my conclusion was it can't work in browsers.  I then moved to the States and was busy with new life, new job and schooling, so I didn't have time to research that idea any further, even after Juliano kept asking me to check it again."  And this guys says, I love this:  "Don't listen to me if I tell you your attack can't work," and he has a smiley face.  Don't listen to anybody telling you that.



"Fast-forward to early April [2011]. I was working on some project at Matasano, and some SSL code that I saw that day made me realize that I wrote wrong tests for Juliano's idea.  In fact, it seems that I didn't quite understand it back then.  As soon as I got back home [that night], I re-read Juliano's email [from December], my notes and scripts. I decided that I needed to make it work with pen and paper first, so I drew some diagrams.  The result looked hopeful. I then modified the test cases, re-ran them, and for the first time I saw that chosen-boundary attack may work.  That moment was so wonderful.



"It turns out that I had to 'reverse' the idea to make it 'compatible' with browsers; and, after some more hours, not only I saw that the attack is possible, but I also understood which conditions I need to make it really work.  The conditions looked easy, too. I was very excited.  I would have screamed loudly, ha ha ha. I took note of what I had seen so far and sent it to Juliano.



"At first, Juliano didn't understand my note because it's a reverse of his idea, but he caught up very quickly, and he agreed that it looks doable.  So the main condition is to be able to send two SSL records in the same cookie-bearing request.  If you've read the leaked draft, we call this the 'blockwise privilege.'"  And I'll explain what that is, also.  "We were both very excited because at that moment we know that it is just a matter of browser features for us to create a reliable exploit for something that people have thought un-exploitable in years.



"I collected a list of browser features and plug-ins that allow me to send cookie-bearing requests."  So now they've got the fundamental concept.  They have figured out, okay, this kind of looks like we can make this happen.  So now it's time to convert it to code.  He says, "I took a look at the "Browser Security Handbook" by Michal Zalewski" - who we've also talked about and mentioned many times in the past - "and found some candidates:  JavaScript XMLHttpRequest" that we talked about, "Java URLConnection, Flash URLRequest, and Silverlight WebClient API.  We really wanted to make the attack work with [just] native JavaScript, so we spent a lot of time on XMLHttpRequest object.  At some point, Juliano and I were even reading C++ source code of various browsers (which is even harder to understand than assembly, as a friend once said).



"Maybe we've missed something really obvious, but we've never made XMLHttpRequest work the way we need.  It was both surprising and frustrating that it is so hard to do request streaming in modern browsers.  People have to invent a lot of ugly" - and he says "bitches," I think maybe hacks - "known as Comet techniques.  I studied every single one of them, but none of them meets what we need.  I also studied HTML5 WebSockets, then concluded that it's not what I need because it includes a [null] byte in front of every packet.  More about WebSockets in a moment.



"So I moved on to Java URLConnection."  So that's an API in Java that allows outbound connections to be made.  He says, "I had never written an applet before," so he'd never written a Java applet before.  He briefly refers to learning Java here in a second.  He says, "But researching is doing exactly things that you haven't done before.  So I wrote an applet and tried to make it perform the blockwise step.  The Internet is really helpful.  I found a wonderful 'URLConnection Mini Guide' in Stack Overflow. I also wrote a small SSL server to test my applet.  It worked as expected.  I could open a request, append more data to it as long as I want" - and that's the key, as we'll see in a second - "and each time I 'flush' the output stream, Java would send out a record in the same SSL connection.  So wonderful, but I want more.  I want something that works without any plug-ins.  Once again I started writing tests...."



So he's got something using Java, and the idea is he's able to send out multiple HTTP requests, or HTTPS requests actually, over the same connection.  Thus he calls that "streaming."  And these are requests from Java out to a remote server.  But as we'll see, they don't make it.  They get intercepted by this man in the middle.  But so now he's got Java, but he wants to refine it.  He really wants to just use JavaScript because it would just make it a better attack.



So he says, "I want more.  I want something that works without any plug-ins.  Once again I started writing tests for XMLHttpRequest," which is just the Java, which is the Java command or API for doing the same sort of thing, for JavaScript being able to reach out and query remote servers, generally using XML, but it really can be anything you want.  So he says, "...reading [more] C++ code or studying Comet."  And he says, "Rinse and repeat.  Nothing worked.



"One day, while in the shower, I realized that those things haven't worked simply because they can't work.  That's why people have to invent WebSockets.  Hmm, why couldn't I use WebSockets?  I re-read my note.  So they have a" - and he has a "\x00," which is C notation for a null byte - "prefix, which prevents me from fully controlling the chosen block [I want to send].  I remembered that [Mihir] Bellare et al. also had the same problem when they tried to attack SSH, so I re-read their paper.  I was quite disappointed to know that they didn't describe any practical way to solve that problem.



"Then I came up with the idea of chaining of predictable" - he says IVs, and that's Initialization Vectors that we'll talk about in a second.  "I wrote a small WebSockets simulator to test it, and it works.  Not very fast, though, since WebSockets requires that my chosen block to be a valid UTF-8 string.  It's funny that we also had to deal with UTF-8 in the ASP.NET exploit.  Anyway, it doesn't need any plug-ins.  It was late April.



"We split the work.  I wanted to work on the paper, and Juliano wanted to work on the exploit.  I started writing [the paper] right away, but Juliano had to delay the exploit several months later.  He got a name for it, anyway.  'This thing is so complicated, I would like to call it B.E.A.S.T so people kind of get stuck calling it "the BEAST attack."  We can figure out what BEAST means later,' [he wrote].



"Writing in English has never been easy for both of us.  It took us several months with a lot of help from friends to finish the ASP.NET paper, and I couldn't believe that I had to write" - that's not this one.  That's the work that they were known for before, about a year ago - "and I couldn't believe that I now had to write another one even before releasing that [one].  But I did eventually.  Along the way, I found Bard's papers, which was extremely helpful for me.  I read his paper carefully.  So many 'We believe,'" he has in quotes.  We believe this; we believe that.  "I have to confess that I am a non-believer, so I made a rule for myself: no 'We believe' in my paper.  Anyway, although Bard's attacks can't work, his papers were written in very nice English.  So I stole a lot of phrases, expressions and statements from him."



LEO:  I believe he did.



STEVE:  "Of course I cited him many times, [too].  So I kept writing, and Juliano helped with editing.  By mid-May, we finally had something good enough to ask for review from friends.  I guess that no 'We believe' is a good rule, since everybody said that the paper is easy to understand.  We also got an" - I don't know who his friends are, but boy, they're post-graduate cryptographers because I've read the paper, too, and it's like, well, there's no 'we believes' in it, but there sure is some serious, whoo, some serious crypto.



LEO:  I love it.



STEVE:  "We also got an awesome review from Kenny Paterson.  If you happen to write a crypto paper and need some cryptographer to review it, you may want to ask Kenny.  He's very friendly, encouraging, and his review always teaches us a lot.  So we got a not-so-bad paper, but still no actual exploit because Juliano was still in some beach somewhere.  We agreed..."



LEO:  I guess he found the bikinis.



STEVE:  I think the bikinis actually were a distraction.  "We agreed that we should contact browser and SSL vendors early so they can work on the patch, since we planned to, but didn't, release something in July.  We sent the paper to Google, Mozilla, Apple, Microsoft, Opera, and Oracle.  All of them responded very quickly, which is [very] impressing.  Mozilla created bug 665814, and it became the discussion board of all people working on the fix [within the industry].  Later I discovered that there were also people from IETF and other vendors [who] we didn't contact.



"It turns out that fixing this is not easy because every proposed solution is incompatible with some existing SSL applications.  OpenSSL has already included a fix several years ago, but it is turned off by default, thanks to Internet Explorer 6's broken SSL implementation."  And we remember how many IE6s are still out there, like half of them.  Microsoft just can't seem to kill that thing.  "Somebody also pointed out that, due to another attack released in March, the WebSockets protocol was already in the process of changing in such a way that stopped our attack."  So that forced them to go back to Java.



"People kept asking for a working [proof of concept], but we could not give them anything [because we didn't have it yet].  At some point, it seemed that no vendor wanted to patch this.  We also started losing interest in convincing them.  We got more compliments from cryptographers we contacted.  We didn't release anything in July as planned, since nothing has been fixed."  Meaning that the patches for the problem didn't exist then because vendors were kind of wandering off.  "Instead we went to Black Hat..."



LEO:  I can't understand why.



STEVE:  Yeah, well, it's like, because the problem has been known for a decade, and these are the first two guys who are claiming they can make it work.  But you know there's a lot of that going on in the background that we never hear about.  And so the vendors are like, well, okay, what do you want us to do?  Anything we try breaks stuff.  And so there was counter-change tension from the fact that no one could figure out how to fix this without breaking things.



So they won a "Pwnie," the P-w-n-i-e, at Black Hat for their ASP.NET bug.  "Delivered a presentation on the attack at Matasano's private dinner."  That is, on this attack.  "People liked it.  We got several follow-up emails and an invitation to present it again at some internal conference of a client.  Juliano and some other friends rooted all servers and yet lost their CTF game.  Still no actually BEAST.  'We can work together on BEAST when I visit you next week,'" - that must have been Juliano writing, "but we ended up drinking all nights.  So many high five," he writes.  "Then Juliano submitted the talk to ekoparty.  Opera patched.  We got excited.  That was five weeks ago.



"Juliano told me that the talk got a 10/10 rating from all of the judges, and he felt that it's time to give birth to BEAST.  Since WebSockets is not a good option anymore, and there was so little time to research other alternatives, we agreed that we should focus on Java and Silverlight.  He worked and worked and worked.  It turns out that BEAST is not easy to code.  At some point, Juliano had to install Windows and Visual Studio..."



LEO:  Oh, dear.



STEVE:  I know, horrors, "...to write a Silverlight applet in, cough cough, VB.NET.  Well, he has to do things he's never done before, [too].  BEAST finally decrypted the first byte of some cookies."  So he says, "It is so surreal to witness some idea that exists only in your mind actually evolves into working code.  Moments like this are very rewarding, and it makes researching very worth doing.  Juliano was so tired, so I asked him to send the code to me.  This is why we've enjoyed doing things together.  We can make progress as long as there is at least one guy up.  He has done the heavy work; now it's my turn to baby-sit BEAST.



"I installed Eclipse, learned Java, and started hacking the code.  Since Juliano stopped as soon as BEAST decrypts the first byte, I had to fix bugs to make it decrypt more bytes more reliably.  The next thing I did was to find a way to bypass the Same Origin Policy with some agent.  A friend was so generous that he gave me one of his Java zero-days to bypass SOP."  So there again, they're out there, and it's like he says he asks one of his hacker friends, "Hey, do you happen to have a zero-day, something no one has ever seen before, that will bypass Java's zero-day?"  And the friend says, "Oh, yeah, hold on a second, I'll email it to you."



"Anyway," he says, "that bug [that his friend provided] has a dependency that we couldn't satisfy, so I had to find another one.  I started reviewing JVM's source code."  Okay, the source to the Java Virtual Machine.  "Honestly, I didn't expect to find a Same Origin Policy, but I did."  What do you know?



LEO:  What the hey.



STEVE:  Want some source code, there it is.  "What's interesting is that the bug is very good for BEAST, but not so good for other types of attackers.  You need to be able to do MiTM to use it."  But that's what they needed, so it worked perfectly for them.  "Well, that makes sense when you know that I found the bug when I was MiTM-ing a Java applet.  I could look for other ways to create an agent, but both of us agreed that we should focus on optimizations.  I needed to make BEAST fast.  The version that Juliano sent me was so slow that all we got were expired cookies."  I love that.  "The version that Juliano sent me was so slow that" by the time they managed to decrypt it, the cookie had expired.



LEO:  They were gone.



STEVE:  All we got were expired cookies.  And then he writes, "BEAST is just a baby.  It deserves fresh cookies."



LEO:  Aw, yes.



STEVE:  "I spent the last week or so working on that.  As you see in the demo, BEAST now takes [only] minutes to decrypt very long, unexpired cookies.



"In summary, we had an idea, and we've done several things we've never done before to make it work.  That's our story of penetrating crypto.  Thank you for your time."



LEO:  Oh, wow.



STEVE:  So, really neat.  Now, okay.  I've promised a whole bunch of things, but we're running short of time.  But that's kind of okay because this is not a post-graduate course in cryptography.  And that's really what we get down to.  What I will explain is that CBC, that you've heard me - that acronym, Cipher Block Chaining.  That's a means for using a cipher like AES in practice.  The problem with a block cipher as opposed to a stream cipher, a stream cipher like RC4 simply generates a pseudorandom stream of noise, of absolutely unpredictable noise.  And we know, those listeners who've been listening for a long time, although I'm constantly reminded that people are still just discovering the podcast or only recently discovering it from the things that we see in our Q&As, if you mix a pseudorandom noise stream with data - by "mix" I mean XOR individual bits from the pseudorandom stream of data - what you get is a different pseudorandom noise stream, and it is absolutely secure because you've mixed noise with your real file.  If you then send that somewhere, and the recipient can regenerate that same pseudorandom noise stream and mix that with the encrypted data, out drops the original unmixed plaintext.  So that's the way a stream cipher works.  That's all you need to do.



A block cipher encrypts, as we know, blocks at a time.  In the case of modern block ciphers, they use a 128-bit block length.  Older ones use 64 bits.  The problem is there aren't that many possible combinations of "just" 64 bits.  So those block ciphers are not considered secure enough for, like, way into the future.  AES is 128 bits.  And even though the bit length is only twice as long, it's, whoa, I mean, you're going up 2^64 times more combinations when you add that 64 bits to another 64.  So the block cipher, though, it takes, in the case of 128 bits, it takes 16 bytes at a time and ciphers them into a completely different 16 bytes.



But the problem is, if you simply took your plaintext and did that for 16 bytes at a time, if you ever had the same plaintext occur, then it would encrypt to the same ciphertext.  So that presents some information leakage.  And as we'll remember, on the Wikipedia page talking about these encryption modes, modes of encryption like CBC, they have a startling image of the Linux logo where you can see, you can still see what the image is, even though it's been encrypted in a non-modal, simple AES cipher.  The penguin bleeds through, and you can see it.  So it's clearly not good.



So instead, what cryptographers did was invent like a little addition to just using a block cipher.  And that is, for each successive block, before enciphering that block, they take the ciphertext from the previous block, that is, the output from the previous encryption, and they exclusive-OR it, they mix it with the plaintext prior to that plaintext encryption, which creates the next block.  Then they take that output and XOR it with the third plaintext and feed that through.  Well, then, what about the first one?  And that's the key.  We need something called an "Initialization Vector," an IV, to start this chain of ciphering and exclusive-OR operations.



The mistake that was made, which was figured out a decade ago, is that there's a weakness in SSL, and that followed over in to TLS 1.0 because that chaining from one block operation to the next, it extends out between packets.  That is to say that in blocks of encryption - actually it's a little more complicated because packets and blocks aren't necessarily the same thing.  But AES does things in blocks.  And the last cipher of the last block is used as the IV, the initialization vector of the first cipher of the next block.  In other words, the same way that within a block we're chaining these together, the developers of SSL made a mistake - tiny, subtle little crypto mistake which are so easy to make - of chaining that initialization vector from the end of the prior block into the next one.  That gives somebody visibility into the cipher.



So the way this attack works, and I'll say it just in a few seconds, I mean, I'm going to sum it up quickly, is that if you somehow manage to get malicious code into the site that you are contacting, or you get malicious code into a tab, essentially, of the browser, doesn't have to be the site you're contacting, but somehow you want to infect a page with SSL, that invokes Java.  And, in fact, as a consequence of this Mozilla has been considering disabling Java because this particular implementation of the exploit does require Java, and so this is a rather brute-force change.  Anybody using NoScript is safe from this, as long as you don't enable scripting, because you have to have scripting in order for the JavaScript and the Java to work hand in hand.



But so what happens then is you also need to somehow arrange to be a man in the middle.  So this is still not something that could get you, even if you clicked on links in email.  But don't do that.  The attacker has to be somehow local to you and able to sniff and intercept your traffic.  So what happens is, with this evilness in place, you've gone to a bad site which installed BEAST into a tab.  Then it's living there.  And you also have to have an attacker doing a man in the middle right, you know, as part of this.



Then you open a different tab, and you go to PayPal.  So you log into PayPal, and PayPal will give you a session cookie which is fresh and not expired.  Then you poke around PayPal; and, as you do, your browser is sending back - it's making queries.  And as we know, it's sending that cookie back to maintain your session state, to remind PayPal this is who you are, and you're logged in.  The sniffer, which is sitting there on your connection, sees encrypted packets go by that it has no visibility into.  It can know that you're going to PayPal if it, like, figures out what the IP is and does reverse DNS, I guess.  But it has no visibility into that.  But it sees something happen that's encrypted.  And it knows that, if it's an HTTPS query, there will be headers in there that are encrypted that will include the session cookie.



So now this thing comes alive.  On a different tab, BEAST wakes up, and it begins working to decrypt that SSL packet that was on a different connection to a different location, and it's able to do so because of this mistake that was made where between SSL blocks they're able, with a man in the middle, to see the last block of ciphertext, which they know is going to be used as the initialization vector for the beginning of the next block.  But they know that before the next block is encrypted.  That is, they're able to intercept; and, knowing the initialization vector, they can mount a plaintext attack feeding in what they want to have XORed with the initialization vector and see what the output is.



And essentially they've come up with a clever way of, within 128 guesses, they're able to get a byte.  So no more than 256, but with 128 guesses, they can get a byte.  Then by changing the padding, they shift the whole message over one byte, and then they're able to decrypt the next one.  And so they have a byte-wise attack which requires malicious code in the browser; man-in-the-middle attack; oh, and the man in the middle, this BEAST tab which awakens, it's generating queries out to the man in the middle, reusing the connection which the PayPal tab had, so that it's using the same encryption.  So they're able to essentially probe the encryption and decrypt that earlier packet that they captured which they assume had the session cookie in it.



So at this point there isn't a solution that doesn't break things.  The good news is this video that we have a link to in our show notes is really interesting to watch because you see this happen.  And it's probably scarier than it ought to be because all of these requirements are sort of glossed over.  But they do capture the cookie in plaintext.  Then they go to a different browser.  They launch Firefox instead of using Safari, and they launch Firefox and give it that cookie.  And sure enough, they're magically logged into that PayPal account without ever having to actually log in.  So they steal that PayPal session cookie through no fault of PayPal's at all.  As they said, they use PayPal because PayPal does everything right.



Problem is, we've known about this for 10 years.  But because nobody actually made it happen, nobody created a video like this or gave a presentation, there wasn't any hurry to fix it.  So now there's pressure.  What needs to happen is that those implementations that are broken and cannot run with TLS 1.1 need to get updated and fixed, and we need to just move to TLS 1.1.  And then we'll be okay.  In the meantime, the browser vendors are trying different tweaks and things.  Microsoft has one of their little Fixit buttons which you can click on to enable it in Windows 7 and in Server 2008 because it's there, but it's disabled, as it is everywhere else.



And what I haven't been able to track down is the nature of the incompatibility that people report when they simply enable the higher level versions.  SSL protocol is designed to allow you to negotiate whichever version you both support.  So we'd like to have everybody starting to support the latest versions, and but only when they both agree would that be the one that we support.  So maybe there are some bugs in some implementations of 1.1 such that when you actually try to use it, it doesn't work right.  Anyway, I'll see if I can find out, and I may have that news next week.  In any event, that's the story of The Beauty of BEAST.



LEO:  Awesome.  Thank you, Steve Gibson.  If you want to know more about this, Steve puts show notes on his website, GRC.com.  We also put them on the TWiT wiki.  You can also find 16KB versions of the show for the bandwidth impaired.  What else?  Full transcriptions.  Elaine takes, like, a day to do those; right?



STEVE:  Yeah.



LEO:  So in a day, Steve will have those up there at GRC.com.  While you're there, check out SpinRite, world's finest hard drive maintenance and recovery utility, and all the freebies that Steve offers, including Password Haystacks.  We saw you last night with Diane Sawyer, you superstar, you.



STEVE:  Thanks to a friend of yours, or a friend of TWiT, Bert Rudman, and the reporter Matt Gutman, they did a nice piece about the BofA site being down for five days and needed a talking head sound bite.  So some guy...



LEO:  Do we have any why that site was down for so long?



STEVE:  Well, there's no way to prove it.



LEO:  Because they're not saying.



STEVE:  Yes.  They're denying that it was any kind of attack.  On the other hand, what else could it be?  It wasn't like it was an hour because someone tripped over a cord somewhere at Bank of America, or they updated something that, like, broke their site, because if that happened they would immediately roll back to the code that was working an hour before.  And it also came and went.  When I first heard about this earlier in the week, I went to BofA, and it was up.  But then later it was down.



So, I mean, it has every hallmark of this being a denial of service attack where they were bringing up a page that had links to deeper in their site.  So you couldn't get to the home page, but Akamai was serving a page which got you around it.  So, I mean, it's exactly what a denial of service attack on a big website would look like, which I think it is.  I think they were denying that it was any kind of attack because the public might get confused between a denial of service attack and a breach of Bank of America's security, which this probably wasn't, as far as we know.



LEO:  Yeah.  Interesting.



STEVE:  But anyway, it was fun to...



LEO:  I guess we'll never know.



STEVE:  It was fun to be on World News Tonight with Diane Sawyer, so thanks to Bert and Matt.



LEO:  Good exposure.  Did you talk about, well, I guess you didn't talk about Password Haystacks.



STEVE:  No, it was literally, if you blinked, you would miss me, so...



LEO:  And how long did it take, by the way, to tape something that, if you blinked, you would miss it?



STEVE:  Well, we did a more extensive interview.  But when I saw the piece air last night, I realized, you know, for the general public, you were amazed when I did that piece with KTLA because the general public is really not ready for any of this stuff.



LEO:  Yeah, this is hardcore stuff.  This is not your - so good on you.



STEVE:  That's our listeners, hardcore crypto security listeners.



LEO:  Hardcore crypto fanatics.



STEVE:  I'm glad to have them.



LEO:  Steve, we'll be back next week.  We do this show at 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1800 UTC on Wednesdays.  And it will be a Q&A with Tom Merritt.  Now, there is a schedule calendar at TWiT.tv.  If jury duty calls, we'll reschedule.



STEVE:  As soon as I know anything, I will tweet, and I will let your staff know so that we can update the calendar, and Tom and I can find an alternative way.  The podcast must go through, Leo.



LEO:  GRC.com the website.  But the Twitter handle is @SGgrc.  So that's easy to remember.



STEVE:  Yup.  And if anyone wants to check on all of the tweets that were resulted from the sex-in-space problem...



LEO:  [Laughing] Did you come up with a solution?  Just out of curiosity.



STEVE:  Uh, I'd love to try it, Leo.



LEO:  And we'll leave it at that.  Thank you very much, Steve Gibson.  Thank you all for being here.  We'll see you next week on Security Now!.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#322

DATE:		October 15, 2011

TITLE:		Listener Feedback #128

SPEAKERS:	Steve Gibson & Tom Merritt

SOURCE FILE:	http://media.GRC.com/sn/SN-322.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Tom discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



TOM MERRITT:  Hey, everybody.  It's time for Security Now!, the show that helps you stay safe online.  I'm Tom Merritt, filling in for the vacationing Leo Laporte, which is always a treat for me because I get to hang out with Steve Gibson, the man from GRC.com.  Steve, great to be on with you again.



STEVE GIBSON:  Well, this time, or this week, I would say better late than never.  I don't think we've ever been late.  We've never missed one.  Actually, last Christmas was the first time we ever deliberately repeated a podcast, and we got a lot of flak from listeners who said, oh, Steve, you've broken your record.  You went six years with never having missed one.  But in this case I was performing my civic duty, as many of our listeners will all probably already know.  Spent the day in court, or in the courtroom, at least.



TOM:  Right, as a prospective juror.  You weren't subpoenaed there.



STEVE:  No, no.



TOM:  But you didn't get on the jury, so I'm sorry to hear that.



STEVE:  Yeah, it's a mixed...



TOM:  Actually, I'm not sorry to hear that because it means you can keep doing the show on time.



STEVE:  Yeah.  It would have been an annoyance, and it was going to be a long trial.  They were guessing about an 11-day trial with lots of witnesses.  And it sounded like it was going to be interesting.  But on balance, I think I'm glad that I had those 12 espressos in the morning, and they seemed to think I looked way too interested in the trial.



TOM:  That's the key.



STEVE:  I was way more present than I should have been.  So we don't know what this guy's going to do.  Anyway...



TOM:  All right.  Well, we've got some Microsoft and Apple updates to get to today.  The fighter drone cockpit story, we talked about that on TNT.  I'm very interested to get your perspective on that.  Germany deliberately installing some malware.  Well, let's get into Security Now!.  Security updates, we've got a Patch Tuesday on the way.



STEVE:  Yup.  We went through the second Tuesday of the month, and there's really no earthshaking news:  23 vulnerabilities fixed by Microsoft, nine of which were ranked critical, meaning that no particular action on the user would be required.  And eight of those nine were in IE, which got updated.  And Microsoft did make a comment that they are expecting some flaws in Media Center, which were fixed in this round, to be exploited soon.  So if you have a habit of not rebooting your machine for a while after you've installed updates, I would say probably better to do it sooner than later because Microsoft is even saying themselves that they're expecting this not-yet-exploited problem in Media Center, which they have fixed, to go live out in the wild and catch people who have not fixed it.  So good to do.  And of course Apple has had a big week this week.



TOM:  Yeah, a bunch of software coming.  Not just...



STEVE:  Yeah, right.  iOS 5 is out.  iTunes got a major update in support of that.  But it also fixed, over on the Windows side, they fixed 75 different security flaws in the Windows version of iTunes.  There's a new Safari.  It is at 5.1.1, which is reputed to improve JavaScript performance by 13 percent.



TOM:  That's not bad.



STEVE:  They backed that up with some metrics somewhere.  And then we also got an OS X update.  And that, for me, it was 142MB, so it was a sizeable replacement of a chunk of the OS.  And hopefully in the future one of the changes with iOS 5 is that it will be able to do incremental updates.  One of the reasons they've been reluctant to untether it from iTunes and landline-based broadband bandwidth is any time they had to change it, they had to replace the entire thing.  So them now being able to update over the air, even for people who don't have a wireless connection, or who have a cellular connection, the only way they can do that practically is to finally introduce what everybody else has, which is little bits and pieces update only the bad parts and leave everything else there, which iOS 5 now has.



TOM:  OS X, I got a Lion Recovery Partition update, as well, which I think updates that part of your hard drive that you can recover from if you have a problem with the operating system, but the hard drive is still intact.



STEVE:  Right, right.  And then of course we had two big stories this week, one that you mentioned - I was sure you were going to be covering it on TNT.  And that is that Wired magazine reported first, as far as I know they were the first people out with a story of a drone cockpit keystroke-logging malware infection that affected the installation at Creech Air Force Base in Nevada, which is the location from which our military flies or conducts the drone missions overseas.  And I had heard...



TOM:  Not only was Wired the first one to report it, but they were the first one that some people in the military heard about this from.



STEVE:  Well, and they got a few of their facts wrong, but not substantially.  So the military was quiet sort of from a policy standpoint for a few days.  But so much flak was generated by Wired's story that the military finally broke their silence.  They explained that they have two separate systems that are involved, their ground control support and then the air support, and that they are separate, and that at no point were the air aspects - the whole system is called RPA, Remotely Piloted Aircraft.  And so at no point was the air mission side affected by this.  And what was happening was it was portable drives that were being used to transfer data between systems not networked, for security, and systems that were networked.  So what's a little freaky is this is exactly what we used when we reverse-engineered the famous virus that attacked Iran's nuclear enrichment facilities.



TOM:  Stuxnet, yeah, yeah.



STEVE:  Stuxnet.  Stuxnet was similarly designed to get itself propagated onto non-networked machines that were deliberately not connected to anything in order to keep them safe.  Yet, as we know, Stuxnet was able to jump onto thumb drives and catch a ride over to those machines.  Well, apparently that's exactly what this thing was doing.  Now, no one is saying that this is targeted.  It's very likely that the systems, well, the one thing we do know is that they were Windows based.  And so many people groaned at the idea that down in the heart of this flight control center they were using Windows as the core of these arguably mission-critical systems.  But it wasn't a keystroke logger.  What the military...



TOM:  Which is what Wired had reported.  Wired had reported it was a keystroke logger.



STEVE:  Yes, right.  The military characterized it as a credential stealer, and they said it was similar to the type used to steal login and password information for online games such as Mafia Wars.  So anyway, Colonel Kathleen...



TOM:  This was run-of-the-mill malware.  This wasn't Stuxnet.  This wasn't targeted...



STEVE:  Correct.



TOM:  ...at stealing military secrets, per se.



STEVE:  Yes.  I would say there's absolutely no reason to believe this thing did anything other than to behave as it does for its own purposes, and it just happened that its propagation model matched that of the environment that it fell into.  And a Colonel Kathleen Cook, who is a spokesperson for the Air Force Space Command, said that it was important to, she said, quote, "declassify portions of the information associated with this event to ensure the public understands that the detected and quarantined virus posed no threat to our operational mission and that control of our remotely piloted aircraft was never in question.  So it's because of all the interest that was generated by Wired's story that they finally said, okay, look, what we'll tell you is we've got separate systems for ground control systems and flight control.  They are not related, and flight control was apparently never at any risk.



TOM:  And flight control makes sense.  That's what you pilot the drones with.  Do we know what ground control systems do?



STEVE:  No.  We could just use our imaginations; but I don't have any, like, enumeration.



TOM:  But it still makes me wonder, if this was a credential-stealing system, could it have stolen logins and passwords for the ground control system?



STEVE:  Yeah.  One wonders, I mean, we know nothing about the system, although it's unlikely that you could log into that from somewhere else.  I mean, they clearly...



TOM:  Right, because it's not networked.



STEVE:  Right, exactly.  So it was an embarrassment and an oops.  And they'll have to, I mean, the good news is it sounds like it did not damage to anything but their reputation.  And with any luck they'll figure out how this got in and prevent that from happening again.



TOM:  What I heard is that this system was not under the ban against thumb drives, and that since this occurrence it has now become under the ban against thumb drives.



STEVE:  Well, makes sense.



TOM:  Yeah, exactly.  And that doesn't mean they can't use anything to put software on there, but it means you can't just use a random thumb drive, which they probably shouldn't have been to begin with.



STEVE:  You never know where that thumb drive has been, Tom.



TOM:  That's right, you really don't.  This is an example of that.  Also some malware in Germany, but this is on purpose?



STEVE:  Well, yes.  There's a well-known German hacker club, the Chaos Computer Club, which uncovered Germany's apparently deliberate use, installation and use of spyware on its own citizens' laptop computers.  The Chaos Computer Club was quoted as saying:  "The malware can not only siphon away intimate data, but also offers a remote control or backdoor functionality for uploading and executing arbitrary other programs.  Significant design and implementation flaws make all of the functionality available to anyone on the Internet."  So it wasn't even well designed and secure spyware that was being installed.



TOM:  It was open spyware.  A little too open.



STEVE:  Yeah.  They said the spyware could even be used to plant evidence on a computer, and they said:  "Functions clearly intended for breaking the law were implemented in this malware."  And a number of AV companies got a hold of the source code and looked at it and confirmed that, among them F-Secure.  One of the F-Secure guys said:  "We have no reason to doubt the Chaos Computer Club's findings.  The CCC has a long history of trustworthy research," adding, "I think it's more than likely that the German government developed the malware."  And since this report initially broke, a number of German states have admitted to using the malware in the conduct of various investigations and data gathering.



TOM:  This is pretty disturbing.



STEVE:  Well, it is.  And the one instance where it was discovered, what was alleged was that the customs officials planted this on a traveler's laptop when the traveler was going through customs.  So, I mean, I have not dug in and looked at the legal implications.  I don't know whether there were warrants in place, whether this was legal or not based on German law.  I'm much less familiar with that than I am with the law here in the U.S.  So I can't judge that.  But all the evidence points to the fact that something was going on, that there's definitely poorly written malware - oh, it was also able to turn on webcams, to record conversations, to load any other software into a user's computer.  And the allegation was made that it could be used to plant evidence on people's machines.



TOM:  Sure.



STEVE:  So a full-on backdoor.



TOM:  I have to say I don't know whether this is technically legal or illegal either, but it shouldn't be.  I don't believe that a government should be able to plant malware on anyone, even if you're a suspected criminal.  You shouldn't be able to infect someone else's device.



STEVE:  Well, yes.  And there has been, unfortunately, over the last decade, a general, I think, sort of a softening of that, just as a consequence of the so-called U.S. "War on Terror" and the Patriot Act and so forth.  But I well remember having discussions with our government in the days when Code Red and Nimda were prowling around the Internet and being a huge problem.  And many of our own listeners, because when we talked about this, the question came up is why couldn't we use the same backdoors in vulnerable machines that the worms were using to disinfect them?  That is, why wasn't it possible or wouldn't it be possible for a government-endorsed program, even if it was put together by private industry, to go and disinfect these machines, where we have the IP of the machine because it's out scanning around for other ones?



So there are online honeypots collecting incoming traffic.  We know the IPs of these machines.  And I remember I was actually in a teleconference with someone high up in Justice at the time, and she made it very clear that she understood the issue, it was oft talked about, but clearly against the law.  So you couldn't do it even if it was for reasons of, like, benefiting the people who were your targets.  It was still illegal.



And so if we end up with a situation where it's legal for the government to install spyware - and, I mean, there have been similar situations where for data-gathering purposes the FBI has been involved in various types of surreptitious monitoring of targets of investigation.  As I understand it, here in the U.S., at least, you can - obviously you can get wiretap warrants that formally allow the FBI to listen in on conversations when a court has been convinced that the evidence that the FBI has so far merits that.  So again, I don't know where...



TOM:  But that's not what was going on here.  They weren't going to court and getting a warrant, saying I want to place a piece of software.  Then it would just be about the fact that they put some pretty bad faulty software on it.  But this was just unilateral action; right?



STEVE:  We don't know.  I don't think it's known.  From what I saw, reading the individual reports from the states that acknowledged they were doing it, they weren't explicit, either.  But the sense I got was that they were taking the position that this was, I mean, they weren't admitting to criminal action.  They were saying, yes, we've used it, and we believe we have legal foundation for having done so.



TOM:  Yeah, just I find the most disturbing part of this story being that it was put on machines at customs because that has become the get-out-of-jail-free card for governments.  Oh, you're crossing an imaginary line?  Well, then you lose all your rights.  And I think that's a horrible precedent to be set.  And it's one of the things people fear.  When they actually go through customs, and they want to look at your laptop, it's like, well, what, are you going to steal my data?  You going to put some malware on there?  Well, apparently yes.  Sometimes they might be putting malware on there, if they think, without any justification to you why, but they just happen to think that you might be worth investigating for any reason, they might do that.  I mean, they can't open your mail, can they?  I guess customs officers can open your mail.  So if you were shipping your computer to yourself, you'd still run into the same possible issue.  There's really just no way around it if you want to cross a border.



STEVE:  Yeah, I mean, and we've talked about the problem of customs officials having the legal right to force you to turn on your machine and look through your files.  And there were some cases a few years ago where files and filenames got people in trouble at customs.  And I remember that being walked back a little bit.  But it certainly is an issue of some tension.



TOM:  All the more reason to use a hidden volume and TrueCrypt.



STEVE:  Yup.



TOM:  And you know what?  The really nasty people are going to do that.



STEVE:  Right.



TOM:  What have we got from the Twitterverse?



STEVE:  Well, last week we covered in some detail this really neat technology that was - the acronym for it was BEAST, Browser Exploit Against SSL and TLS, which two developers, Juliano Rizzo and the guy who posted a detailed chronology of their development, Thai.  I read Thai's post.  And apparently Juliano is either following me or he was tipped to it because I got a really nice tweet from him, who said:  "Awesome.  Steve Gibson @SGgrc explains B.E.A.S.T. and reads Thai's post."  Then he gives a URL for the YouTube link, and then he says "includes jokes about bikinis and me."  And our listeners from last week will remember that there was some conjecture on Thai's part that maybe Juliano was busy looking at bikinis, and so there was not as much code being written at one point as was being hoped.  But prior to that, Juliano was not being distracted by bikinis because he was actually reading the detailed operation of SSL while on the beach in Buenos Aires.  So I think that all ended up working out for the best.



TOM:  All right.  Sounds good.



STEVE:  And I wanted to give all of our listeners who are not fed up with the whole story of the passing of Steve Jobs - I'm not yet - I wanted to give everyone a heads-up that Discovery Channel has commissioned the MythBusters guys to a one-hour documentary titled "iGenius:  How Steve Jobs Changed the World," which will be airing this Sunday, October 18.  So, wait, October 18th.  This is the 14th.



TOM:  Yup.  So is it...



STEVE:  No, it's October 16th, sorry.



TOM:  Okay.  It's on Sunday, for sure.



STEVE:  Yes.  It is this Sunday.  I verified the schedule.  I tweeted about it earlier, and some people sent back, well, what time?  It's like, I don't know what time zone you're in or when.



TOM:  Check local listings for show time.



STEVE:  Thank you very much.  So it's "iGenius:  How Steve Jobs Changed the World."  And what I do know is that they managed to score some very significant interviews from many of the people who were present in the early years, the founder of the famous Homebrew Computer Club in Silicon Valley where Jobs and Steve demonstrated their first Apple I machine.  And so, anyway, I'm not going to miss it, and I didn't want any of our listeners who would have wanted to know about it to miss it, either.



TOM:  Sony Pictures has apparently gained the rights to the Steve Jobs biography that was written by Walter Isaacson that's still - that book comes out later this month.  But we might see a movie in the offing.



STEVE:  Was that the authorized or unauthorized?



TOM:  That was the authorized one.  That was the one that Steve apparently gave unprecedented cooperation with.



STEVE:  And access, yeah.



TOM:  Yeah, yeah, exactly.



STEVE:  Well, I did have a nice note from a Mark Ping, who is a listener in Chico, California, and the subject caught my eye.  It said, "SpinRite Saves the Sawmill."



TOM:  The sawmill.  Like a "Twin Peaks" story, huh?



STEVE:  He said, "Steve, I'm new to a lumber company with lots of automation in the sawmills.  This morning we were getting started on day two of a software fix onsite, where there is a ton of vibration.  It's a hard drive's worst nightmare."  And actually he's right about that.  We've talked about vibration in the past.  Vibration can really cause a problem because the drive, in order to get the density that modern drives have, the track density is incredibly high, meaning that it's super delicate to keep the head over the data and not skipping over to adjacent tracks.  So the drives are designed to be as vibration tolerant as possible.  But a good friend of mine had a situation where just the fans in a server case, the vibration from the fans was causing much lower drive performance because the drives were having so many errors and having to retry and reread their data.  So vibration is not good.



Anyway, he said, "The lead programmer's laptop was doing the" - and he says, quote, "'boot almost to Windows, then blue screen' dance."  He said, "Well, I've been a Security Now! listener since Episode 100 and a SpinRite owner for nearly as long.  I knew what to do.  I OpenVPN'd to my home computer to get my ISO file, which I've built on top of MS-DOS instead of FreeDOS, and burned a CD onsite.  I booted SpinRite into Level 2 and let her rip.  At about 5 percent I saw the progress stop, and DynaStat" - that's SpinRite's Dynamic Statistics system - "kicked into gear.  After one R" - meaning that it recovered that data in the sector - "it sped right up again.



"Figuring the odds were good that the problem was fixed, I canceled out, crossed my fingers, and booted.  Windows came up the first time, and we were able to copy off the source code and were right back in business.  I'll be talking with my boss about site licenses later today.  Thanks, Steve, for a great product and the best netcast out there."  Sorry, Tom.  "You saved us a lot of time and made me look great at a very good price.  Plus I'll get home to my wife and kids sooner.  Did I mention this mill is a 12-hour drive from my house?"  No wonder he used OpenVPN.  He said, "Keep up the good work, and hurry up with CryptoLink.  Mark Ping in Chico, California."  So thank you, Mark.



TOM:  Wow.  Great story.  I don't mind if he calls it the best.  It's one of my favorites, for sure.  Shall we get a little Listener Feedback #128 going, Steve?



STEVE:  I love it.  Let's do it.



TOM:  All right.  #1 is part feedback, part question.  Feedback part - this comes from Mark Botner in Little Rock, Arkansas.  He wants to know:  Where's my SNU diploma?  I believe that I have met all of the requirements for my Security Now! University diploma.  I have, #1, starting on or about May 24th of 2011, listened to all of the Security Now! episodes.  I listened to Security Now! while I was walking my dogs, commuting, et cetera.  I have switched from a DDWRT-based router to an Astaro Gateway system for my home firewall.  I moved my SSH server to a non-default port.  I use two-factor authentication for all my bank accounts, Gmail, Facebook, et cetera.  I started using LastPass with a YubiKey for all my online accounts.



This is a big one.  I taught my wife to use unique random passwords for each site with LastPass and YubiKey.  I used ShieldsUP! and reconfigured my DSL router until I achieved a perfect scan.  Boy, this list goes on and on.  He talks about DNS Benchmark, enabled hardware DEP on his systems, uses NoScript in Chrome and Firefox - I guess he's using NotScripts in Chrome - uses Amazon's S3 for backup.  Installed Carbonite on his parents' and sister's PCs.  Already said he was Netflix customer.



Started taking daily vitamin D supplements.  Cabernet Sauvignon is his favorite wine.  Turned off JavaScript and external program access.  Uses WPA2 on his wireless router, switched Windows over to Microsoft Security Essentials, scanned Windows system with MRT, scanned Windows with Microsoft System Sweeper.  And finally, I use my licensed copy of SpinRite regularly to maintain all of the hard disks in my house.  So I ask you:  Where do I go to receive my SNU diploma?  Where does he go, Steve?



STEVE:  Well, boy.  Consider also that he began on or about, he says, May 24th of this year.



TOM:  And caught up on everything.



STEVE:  Yes.  So he listened to, what, 320 episodes in that period of time.



TOM:  Yeah, exactly.



STEVE:  So congratulations, Mark.  That's quite an accomplishment.



TOM:  Now, he also has a serious note, a crypto question.  He says:  A couple of days ago for me, which was a few weeks ago for you two guys, I listened to Steve discussing a possible reduction in strength with an attack on the AES cipher.  My question is, in a manner much like cipher block chaining, why can we not chain multiple encryption ciphers together?  For example, one could encrypt a block of data with AES, then Blowfish, then triple DES.  By chaining multiple ciphers in a manner like this, even if one cipher is completely compromised, your encrypted files would be safe, I think.  I realize that each cipher would add some amount of processing overhead.  But if secrecy was really important, why not consider doing multiple encryptions?  I'm not a crypto expert, but wondered what Steve thinks of this.



STEVE:  Well, he's exactly right.  And people who are familiar with TrueCrypt will have probably seen the option which TrueCrypt offers for doing exactly that, for choosing a collection of ciphers and sequentially running through them in one direction for encryption, and then of course you have to run through them in the reverse order for decryption.  And it is suggested that, if somebody were really, really just, I mean, over-the-top concerned with security, they could do that.  And exactly as Mark suggests, really the only downside of doing so is performance.



In the measurements I've made of recent versions of TrueCrypt, I've seen no measurable slowdown from TrueCrypt's operation because with current state-of-the-art chips, especially the newer Intel chips, for example, which support AES in the instruction set itself in order to speed up that encryption and decryption operation, the speed of the drive is the limiting factor, rather than the process of getting the data on and off the drive, even if you throw in the overhead of ciphering.  So you really don't see much performance overhead.  Probably when you layer on additional ciphers you would start to see that.



But it has the advantage, again, exactly as Mark hypothesized, that if by some bizarre coincidence, from out of the blue, a huge problem was found in the cipher you were using, if you were only using that cipher, you would be vulnerable at that moment.  By using even two - I would say three is really, I mean, first of all, the chances of any problem like that occurring in a really well-known, well-tested, well-proven cipher is so vanishingly small that, if you were really concerned about it, then do two.  I can't imagine the reason to do three because there just - the worst that could happen is that one of the two might be rendered useless, but you'd still have the other one, and then time to change that first one that had been rendered useless for a different one, if you still wanted to have two.  So I can't ever see a point in going beyond two.  But frankly, I'm quite content with AES and just using one.  Still, his point is a great one.



TOM:  And you made this clear on that episode that he's talking about, reduction in strength of AES does not in any way make AES weak.



STEVE:  Correct.  Correct.  In fact, AES uses multiple rounds where the rounds are identical with only the difference of the intermediate steps mixing from different key-derived data.  So, for example, one round of AES is easily penetrated.  It doesn't provide enough scrambling to confuse cryptographers.  And that's true for two and three and four and five.  And generally what happens is that the cryptographer will analyze some number of rounds to determine really quantitatively how much strength that offers.  And then they add a padding.



And in fact I read some commentary by Bruce Schneier, a favorite cryptographer of this podcast, and he has suggested that all that we have to do to settle the whole issue of AES once and for all is just all agree that we're going to do a second version and just increase the number of rounds.  That's just - that's really all you have to do.  No fundamental weakness in the underlying algorithm was found.  It was just we've pushed ourselves a little further than we expected to by this point in time in the number of rounds we need to obtain as much strength as we would like.  Therefore the margin, which was always deliberately built in, has been shaved off a little bit.  And so Bruce says, just do some more rounds, and problem solved.



TOM:  Yeah, here, easy.  Lars Mikkelsen in Denmark writes:  Hey, Steve.  This might be of interest.  This is how Windows got infected.  And he has a link that we'll include in the show notes [http://www.csis.dk/en/csis/news/3321/].  It's from csis.dk.  There it is on the site there.  But I didn't open it in a new tab, so I have to leave it now - sorry about that, Alex - to go back to the notes.  But Lars continues by quoting the site, says:  "CSIS has over a period of almost three months actively collected real-time data from various so-called 'exploit kits.'  An exploit kit is a commercial hacker toolbox that is actively exploited by computer criminals who take advantage of vulnerabilities in popular software.  Up to 85 percent of all virus infections occur as a result of drive-by attacks automated via commercial exploit kits."



STEVE:  So this was a great link.  And to help our listeners I tweeted a number of links this morning as I was assembling the notes for the podcast.  So everyone who's interested can just go to Twitter.com/SGgrc.  And since I'm not tweeting often, these will not be pushed far down in my stream, if at all.  And there is the link there.  And as Tom said, it'll also be in the show notes.



This was interesting because it made a very clear exposition of how in the real world people were getting infected.  And so, not surprisingly, IE, Internet Explorer, takes two thirds of the vector for the way people are getting infected.  But Firefox was at 21 percent.  So IE was at 66 percent, Firefox about one third of IE, but still it's substantial just for no other reason than due to its popularity.  Google Chrome, though, was in there for 8 percent, Opera at 2 percent, and Safari at 3 percent.  But what's probably most interesting is the third chart, which talks about the way that these tools are allowing people to be infected.  That is, it's the programs that are being invoked.  And the largest percentage of that pie, 37 percent, was the Java Runtime Engine.



So we've talked about this before.  We've talked about removing Java from your system if you know you don't need it because what's happening is browsers are being caused to invoke Java, and mistakes in Java are being leveraged into exploits.  And in fact we were just talking about the BEAST exploit where those developers were, for them to do what they needed, they needed to find a brand new zero-day fault in the Java Runtime Engine that no one knew about, that would deal with the same origin protection which keeps browsers from allowing scripts to run from one site and then getting data on another.  So just by going to the Java source code and looking for a specific problem that they were hoping was present, they found one.



And so you have to wonder, I mean, if that's the state of the world, then bad guys get an idea for a way they might be able to exploit something and just go and take a look, and look for what they're trying to find, which is fundamentally not the mindset that the developers have.  The developers don't expect there to be a problem, don't think there's a problem.  So, what do you know, they don't find any problem.  So Java Runtime Engine was the largest share at 37 percent.  Not surprisingly, #2 was Adobe Reader and Acrobat at 32 percent, so just a little bit less than the Java Runtime Engine.  And Adobe Flash was #3 in line at 16 percent.  Again, no surprise there.  So we don't really - we don't see anything we didn't expect, but it's interesting to see the numbers and the breakdown, and they did a really nice report that I wanted just to bring to people's attention.  So thank you to Lars for bringing it to ours.



TOM:  Yeah, good stuff.  Thank you, Lars.  I had a conversation on Google+ the other day about I started a virtual machine of Windows 7 that I hadn't started in a couple months, and I was complaining about all the updates that you have to go through when you have - just even after a couple months.  And someone's like, well, why don't you just say no to them?  I'm like, well, that's pretty bad security practice because if you're talking about zero-day Java Runtime, I definitely want my Java up to date before I start doing anything important.  But you've got to sit there and wait through all that stuff.



STEVE:  Well, yes.  And of course, as we know, we talked about this just earlier in this podcast, the older the problems are that are not fixed, the more likely users are to encounter them in the wild because the bad guys know that there are machines that, for whatever reason, are not being updated.  So if you deliberately aren't updating a machine, you're increasing the window of opportunity for bad stuff to fall through it.



TOM:  Yup.  A listener who wished to remain anonymous, did not share a name or location, commented about lithium ion batteries:  Steve, following up on discussion of the care and treatment of the lithium ion batteries, HP, for example, says to discharge to 5 percent now and then so that the "smart battery" technology can recalibrate, as you say.  But if the calibration is already wrong, wouldn't the 5 percent be impossible to guess?  I recently bought a secondhand HP NC4400 with a battery that said it only had 40 minutes left, even after I charged it.  So I fully discharged it until it went off and then recharged it, and now it says four hours, 20 minutes, almost like new.



Apple seems to say that it isn't full discharges that cause the trouble, but a deep discharge - for example, the result of a battery left fully discharged.  HP says:  "Remove the  battery from the notebook if the notebook will be plugged into AC power continuously for more than two weeks."  So perhaps it's not a good idea to leave laptops always plugged in.  Now, this is almost a religious controversy in some ways.  But what do you think?



STEVE:  Well, okay.  So I wanted to explain a little bit more about the need to cycle lithium ion.  First of all, I don't disagree with any of that.  But it needs to be sort of explained a little bit more.  And I mentioned - this was just my - I brought the point up myself last week, out of the blue, because I saw a friend who was draining some electronic device of hers, I think it actually was a Kindle that had "I am discharged" on the screen, and it wasn't happy.  And I asked her, I said, "So do you just read your Kindle day in, day out, day in, day out until that happens" - and frankly I know that my mom does - "and then you plug it in?"  And she said, "Uh, yeah."  And I said, "Okay, that's not good.  Lithium ion batteries do not like to be run that way.  It is much better for them if you keep them charged up."



And so that was the point that I wanted to make, and I generated a bunch of feedback through our mailbag and also on Twitter of people wanting links, people asking me if I was sure and so forth.  So relative to this recalibration, the reason it's necessary to do that is the lithium ion batteries do not produce anywhere near a linear decrease in voltage as they discharge.  If they did slowly drop down their output voltage as they're losing charge, then it would be easy for the battery management technology to simply measure the voltage on the batteries to determine what percentage of them that they were full.



Instead, lithium ion as it's discharging from a full charge initially drops its voltage by a few tenths of a volt, from 4.2 down to about 4 or 3.9, 3.8.  Then it's absolutely or nearly absolutely flat for the bulk of its lifetime.  And only at the very end does the voltage then suddenly drop off.  Which means that the battery gauges that we have on our laptops, which I love, just handy to be able to look at it and say, okay, you've got about three hours left.  I mean, it's much nicer than not having any indication of when the lights are about to go out.  So they can't, there's no feedback they can use from the battery itself because the battery is just giving them the same output voltage all the way along, except at the very beginning and at the very end.



So they use timing.  And so there's been a lot of human effort that's gone into developing this technology, the idea being that the system monitors the total amount of current being drawn, that it's able to measure moment by moment.  And so in software it integrates the instantaneous current drawn from the battery in order to determine how many total amp hours have been taken from it, estimated against its known full size of the battery.  So basically it's just - it's knowing when you're running it, and it knows how much current you're pulling it over time.  It knows when you plug it in, for how long you plug it in, how much current is put back in.



So it's sitting here looking at this straight line of voltage and just sort of juggling, saying, okay, now we just added 10 percent.  Oh, now we took out 17.  Oh, now we put in 12.  Oh, now we took out 20.  Now we put back in 15.  And so you can imagine that all of that is better than nothing, but it's a little error prone.  You're going to, over time, it's going to become desynchronized.  Thus the need to occasionally, and only occasionally, bring it all the way down.  If you leave your laptop on, that allows your laptop to drain the battery into that final drop-off.  Then when the battery sees that, then it knows, ah, now I'm able to realign myself with that discharge point.  And that allows it to reset its otherwise just sort of ad hoc tracking of energy in, energy out.



So that's the reason why occasionally you need to bring it all the way down, so that your battery management technology is able to synchronize.  But the rest of the time it is much better for it, as I originally said, to keep it charged up near the top because just the way the chemistry works, that's what the lithium ion battery is happiest having.



TOM:  Yeah, I think a lot of people get confused because nickel cadmium batteries had memory, and they kind of - they mix that up with lithium ion.  I'm not saying that that's what our emailer did.  In fact, I'm pretty sure he didn't.  But, yeah, that does confuse the issue.  Lithium ion doesn't have memory.  And what you're saying is it's okay every once in a while to drain it all the way down because you might want to recalibrate.  But you don't want to drain it down all the time.



STEVE:  Correct.



TOM:  But it's really tempting with an Amazon Kindle because it doesn't need to be plugged in that often.  A laptop, you use it unplugged for a while, a few hours, maybe six hours it's going to start giving you alerts.  A Kindle won't, and so you kind of forget it needs to be plugged in.



STEVE:  Right.  And I think that's a perfect example because when we were talking about it last week, a cell phone is the same way.  Most people, because you don't really get more than a day of use out of your cell phone, you're in the habit of docking it at night and charging it back up.  It would be a little better for it if it was convenient to charge it at the office or during the day at some point, if you weren't using it, to sort of give it a midday boost just to keep it up because it's continuous deep cycling that ends up aging the lithium ion chemistry faster than the same total amount of current flow which is kept more up near the charged state.



TOM:  I keep my batteries plugged in as often as possible.  I don't see any shortness in their life.  The only thing I've run into with lithium ion batteries, a couple of times I have forgotten to turn them off.  I've put them into sleep, just closing them, and forgotten to turn them off when I got on an airplane, and they have swollen up because of that.  Now, over time that has gone away, if I don't do it again.  But I actually had to replace one battery because it swelled up so much from being on during takeoff.



STEVE:  Yeah, there's gas that is produced, and that will cause the individual cells to bubble up.



TOM:  Yeah.  Question #5 from Frijol in Houston notes that Apple is not rolling in the hay.  He says:  Guys, I'm sure you've heard this, and my apologies if that is the case, but I found this interesting enough that I had to share.  It appears that Apple doesn't buy into the Haystack concept.  In fact, they explicitly forbid it.  In trying to create a new iCloud account, I tried to use a variant of an old MobileMe password but was denied.  The text read:  "Passwords must be at least eight characters, including a number, an uppercase letter, and a lowercase letter.  Don't use spaces, the same character three times in a row, your Apple ID, or a password you've used in the last year."  I assume that meant three or more times in a row.  Anyway, I found it interesting that they would include this in their rules, especially knowing what we know now, thanks to your analysis.  Regards, Frijol.



STEVE:  Okay.  So this brought up a good point, and that is that, in my example, because I sort of wanted to use an extreme example of a really simple password on the Haystacks password page, which is also very easy to remember, in my example I use just a string of dots.  So that clearly, as we see, would be denied by Apple.  But I would recommend that in practice you did something like alternating characters or a pattern of three that repeats or something else.  So that still gives you largely the same benefit of something that's easy to remember that you add on to the end of an already strong password to make it stronger, yet not always repeating just the same character endlessly.  Be a little more creative.  Have some fun.  You could make some pictures or do whatever you want.  And that'll avoid the problem but still give you the benefit and actually make the result a little bit stronger, as well.



TOM:  This doesn't bother me so much.  I understand why they're saying don't use the same character three times in a row because they're not concerned with Haystacks, they're concerned with people who are only making six, eight-letter passwords using the same character all the way across, or three characters...



STEVE:  Like 0000000 or something.



TOM:  Yeah, and I think that's probably a good policy.  What really frustrates me are the sites that won't let you use non-alphanumeric characters.  That just - because I have got a system, based actually very much on the Haystacks principle, that non-alphanumeric characters are essential for me to use.  And then those sites are making it harder for me to be secure and also making it harder for me to remember the darn password.



STEVE:  Well, and they are actually less secure sites.  



TOM:  Exactly.



STEVE:  Because a site that won't let you use a password with a large alphabet, the bad guys know that, and it makes their brute-force cracking that much more efficient because they don't bother trying passwords which they know the site doesn't allow in the first place.



TOM:  Abe in Chicago comments about changing passwords and government interference.  He says:  I am sure that you have heard of HIPAA, but you may not know about some of the things it requires of companies who are forced to follow its guidelines.  One of them is that the IT department cannot know the users' passwords.  That's of course good, but they also require that users be forced to change passwords every six months with no guideline on password strength.  What do you think?



STEVE:  Well, we've talked about this, I think, once before.  But I saw the question, and I thought, okay, this is worth just going over again because I cannot for the life of me understand what the threat model would be that would bring some security person to think that requiring people to change their passwords every six months was beneficial.  You want to do that because there's some problem that you're solving.  Certainly it's an inconvenience to users because you are suddenly telling them that the password you have finally memorized, which was strong enough to be a pain to memorize, they now have to change.  So not only do they have to come up with a new one, but they have to remember to forget the old one and then remember to remember the new one.



And, okay, so the only way this makes sense - so how could this be good news, or beneficial?  The only model I can imagine would be one where a user's password becomes compromised, and something endemic to the world prevents the bad guy from using it for six months.  That is, there's some, for some reason, bizarre six-month delay before the bad guy can try to use it.  In that case, obviously, changing your passwords every six months would always mean that your change would occur between the time the bad guy got it and six months later when they were first able to use it.  So if the world worked that way, with this weird six-month delay between the time an exposed password could be exploited, this makes total sense.  But it's not the way the world works.  Passwords that are compromised are tried that afternoon, that night, I mean, at 2:00 a.m., immediately.  So...



TOM:  That's what they want you to think.  The clever hackers are holding onto them for seven months.



STEVE:  So it's only the model that, like, imposes some fictitious, wacky delay allows that advice to make sense.  It makes absolutely no sense.  And in fact there are companies that have policies, for example, where you must change your password every X weeks or months or whatever.



TOM:  Every three months, and you can't use the same password you used for the past three times.  Place I used to work at drove me crazy with that.



STEVE:  Yes.  And in fact I remember telling Leo in our podcast, I once overheard, when I was having breakfast somewhere, a group of guys with laptops, and one of them was talking about how he was getting around that policy.  He realized the system didn't keep track of when the prior passwords were used.  So every time he hit against this, he changed his password immediately, once, twice, three times, and then back to the same thing he always had.  Which satisfied the system, he was always able to use the same password, and basically he hacked around the policy and got what he wanted and so defeated the ridiculous imposition of the IT department.  Which some survey showed recently, and we talked about it, Tom, that the IT department is the most despised group in most companies.



TOM:  It is, because...



STEVE:  They're not seen to be adding much value.  They're just in everyone's way.



TOM:  And the IT department should be the most respected because you need them.  But, yeah.  Question #7 comes from Gary McCleery in a small house on Clyde Street, Oamaru, New Zealand - kia ora! - ponders a question about Ethernet switches.  Go All Blacks.  Hi, and greetings from Oamaru, New Zealand.  I love your broadcast.  Pity you can't do it at least five days a week.  I'm with you, Steve, I prefer XP and hate Win 7.  I tried Win 8 and hate that, too.  Yes, Leo and Paul, I realize it's only a developer's edition.  But the whole concept sucks, think Microsoft has lost their way.



Anyway, my question has to do with Ethernet network switches.  I work for a school, and one day every computer connected to a particular switch lost access to the network.  I tracked it down to a classroom where someone had plugged a network cable into two live ports of the same switch.  I have since disabled one port to stop this happening again, and I understand some switches can be configured to deal with this problem.  Could you tell me at the packet level what is happening?  Does the cable plugged into two live ports cause something like an infinite loop, creating so much traffic that it overwhelms the switch?  Thanks and cheers, Gary.



STEVE:  Yes.



TOM:  He answered it, didn't he.



STEVE:  What happens is Ethernet switches have a little bit of intelligence in them.  When an Ethernet packet comes into an Ethernet switch, its job is to only send that packet down the arm or leg of the switch where its destination Ethernet adapter is located.  So in order to find that, it needs to send out a broadcast, if it doesn't already know.  Now, "doesn't already know" means that there is some memory in an Ethernet switch, which there is.  There is typically, like, 4,000 entries, 4K entries in an Ethernet switch, the idea being that the switch associates specific MAC addresses, the Ethernet MAC addresses with individual links, so it learns on the fly which connections are connected, which of its ports are connected to, downstream, which Ethernet adapter or adapters.



So what happens is it sends this broadcast out and looks for a response from whichever port contains the Ethernet adapter.  Then it adds that to its table so that in the future it has learned which MAC address is on which port and doesn't need to do that again.  Similarly, switches have to be transparent; that is to say, in an Ethernet network, broadcasts have to be broadcast.  So any Ethernet adapter is able to send a broadcast which needs to be heard, by the definition of Ethernet, by every adapter.  Which means when a broadcast comes into a switch, it has to forward it out of all of the other ports.  And what that does is that makes the switch transparent on the network, transparent to broadcasts.  It's not transparent to directed traffic because there the switch directs specific packets, as we were just saying, only down the port that contains the target adapter with a MAC address.



Okay, so we put those two things together, and you can see where the infinite loop comes in because, if you have two ports connected to each other, and the switch is not sharp enough - and exactly as Gary says, he had heard that there were switches where this wouldn't be a problem.  But it does require extra intelligence.  So a packet comes in the switch addressed to a MAC adapter, or a MAC address that is not currently in the table.  So the switch broadcasts a query out of all of its ports for the adapter with that MAC address.  Well, that broadcast goes out of one port, and it's looped back immediately into one of the other ports, coming into the job queue as a broadcast, which because we were just talking about broadcasts, has to be sent out of all ports.  So it is exactly like a data short circuit.  One unknown destination will cause the switch to lock up in an infinite loop of broadcasting to itself and just flooding itself with its own data.  And it quickly just ends up filling its queue and essentially crashes.



TOM:  So it's shouting the MAC address to itself.



STEVE:  Yes.  Well, it's shouting the question to itself.



TOM:  Right, right.



STEVE:  And then saying, oh, I've got to repeat that question.



TOM:  Where is this MAC address?  Like someone kind of rocking in the corner shouting until you unplug that Ethernet cable.  So how do you find a router that is smart enough to figure out that that's going on?



STEVE:  You know, I've never seen that in a spec sheet.  So the only thing you could do is short circuit one and see if it collapses.



TOM:  See if it works, yeah, okay.



STEVE:  If it collapses, then it's like, okay, I don't want to use this one.



TOM:  That's not the one.  You see people going into Fry's, trying to short circuit routers.  Question #8, Nathaniel Hall in Springfield, Missouri - that's where my uncle lives - suggests a correction regarding TCP and UDP port 0.  Hey, I was on that show.  Steve said:  I have been listening to the show for many years and love each and every episode.  Unfortunately, I tend to get behind on episodes and am just now listening to Episode 317.  Steve doesn't say this, Nathaniel says this.  But I had one minor correction to make.  When describing TCP you said port 0 was not a valid port.  This is not correct.  Zero is a valid number for TCP and UDP packets, but it is a reserved port that cannot be used.  I find this important because some attacks actually utilize port 0 as the destination or source port in order to fool the destination host and/or security devices in the middle.  Thanks for all the work you and Leo do to educate the community.  It's a big help to keep up on things that I otherwise may not be able to keep track of.



Now, when I'm reading this, I start to think, well, maybe that's a distinction without a difference, if it's a port that could be used, but is reserved for un-use.  But does he have a point here because of the man-in-the-middle thing?



STEVE:  Well, I would say we're - it's exactly as you said.  We're mincing terms a little bit.  First of all, he's absolutely correct.  As I have said about TCP and UDP packets, the port designation is just a 16-bit field which can contain values from 0 through 65535.  And port 0 can occur because obviously you could send a packet onto the Internet that had all of those bits set to zero.  And in fact the most recent version of ShieldsUP! - and when I say "recent," I tend to do things that last.  I mean, SpinRite was finished in 2004.  ShieldsUP! was before that.  And I haven't touched it because as far as I know it all works perfectly.



But my point is, it tests for port 0 because I understand that you can have packets that have all zero bits in the port number, and that such packets have been known to sneak through firewalls and NAT routers because they're not designed properly to say, wait a minute, this is not valid to have a port 0, and just to ignore the packet.  So ShieldsUP! has, for a decade probably, checked to make sure, I mean, I generate port 0-based packets from my site to make sure that I get no response from them over at the user end.  And if so, they don't pass.  So thank you, Nathaniel, for clarifying that and giving me an opportunity to talk about port 0.



TOM:  Question 9 from Fausto in Mexico City.  He says:  I would like you to share your thoughts on Steve Jobs.  I admire him, and I would like to know what did you learn of him, if anything; what do you think he contributed to our tech world as we know it; and, important, how do you think we can make a tribute to him?  Buy Apple stuff?  Or even better, try to incorporate some of his ideas into our daily lives.  Thanks, Steve.



STEVE:  Well, I'm sure this has been talked to death, and everyone knows Jobs, or knows of him and his work and so forth.  I met him on a couple occasions in the early days of the Apple II at the various Apple Fests which Apple sponsored in order to pull vendors together.  I had designed a hardware and software combination, a high-resolution light pen for the Apple II, and was selling it.  And actually I got to be very good friends with Woz at the time because he appreciated the technology that had gone into it at my end.  And I've watched Jobs.  And I think my feeling is sort of the consensus which has evolved, which is Apple is probably going to be fine for three or four years because they've got enough products in the pipeline and there's enough Jobs-ness already imbued that the inertia of Steve will continue.



But it really - I'm skeptical about the idea that it's really possible for Apple never to drift.  I'm afraid it will because it was very difficult to be Steve Jobs.  I mean, it was who he was, so it wasn't difficult for him.  But there was some controversy always surrounding him because to be that much of a perfectionist, to scream at engineers because the radius of curves was obviously wrong to Steve, but looked fine to everybody else, I mean, to have that kind of personality, which is why we got, it's how we got the products that we did here after Steve's return, and especially lately as he really ramped up and got enthused about the consumer side, I just don't see anybody replacing him.



And I really think it's so difficult to demand this kind of quality.  There are prices that are paid, and most organizations ultimately aren't willing to pay it.  It was because he was running it, he was in charge, and he would accept nothing less.  And he was willing to stop the presses, he was willing to stop production, he was willing to, I mean, look how late Apple was with a tablet.  They talked about it a long time.  Many tablets were tried.  And I remember reading that in engineering they were scrapping their own products before even getting it to the point of even showing it to Steve because they were afraid of what his reaction would be, until they had something that they really thought had a chance.  And even then it was rejected many times.



So without Steve there to really be that, I'll be surprised if the future continues.  He was unique, which is why there's a documentary about him on Discovery Channel this Sunday evening, and why I almost selfishly am sorry for losing him because I loved what Apple's been producing.  I mean, it's been uniquely wonderful product in this industry.  And again, I'm going to get my iPad 3 with its quad res display.  That's all I really want.  I just marvel at how good the iPad 2 is.  I was just shaking my head, playing with it with iOS 5 this morning when I was having my 12 shots of espresso.  I think I was happy because of the iPad.  Might have been the coffee, but...



TOM:  The espresso doesn't hurt, but, yeah.



STEVE:  Yeah.  It's just, it's such a perfect device.  I mean, it's just a joy to use it.  I've used other touch tablets, and they don't respond.  They're clunky.  There's a delay.  They're not sensitive enough.  I mean, just everything about them pales in comparison to the iPad 2.  And it's because there was somebody there who demanded nothing less.  And I think here's how I would prove this point, prove my feel for this.  And that is there is no other Apple.  That is, Apple is unique in doing this.  It's not like they're in a herd, and so one of the herders died.  They're not in a herd.  They are unique.  They came late.  They enter late into whatever market they're coming into, and they do right what other people have done wrong.  If it was easy, if it was even possible to do this without Steve Jobs, somebody would have because there's a tremendous need for it.  But Apple was the one, only Apple.  And it's because only Apple had Steve Jobs.



TOM:  Yeah, I mean, we've talked a lot on the network about it, and because of timing you haven't gotten to talk about it here, which is why we're talking about it.  But I agree that Steve Jobs's legacy is his passion and his uncompromising nature.  And I think that's the test of Apple is, now that he not there, how much was he able to, as you say, imbue them with that spirit to be like that.  Not to try to be him, but try to be like him as far as being uncompromising and being passionate and only accepting it when you think it's right.  And that's what we're going to have to wait to see in a few years because I think there's a lot of criticisms you can make of Steve Jobs.  He was not a perfect man in any way.  None of us are.  But the things that you can take positively from his life were his philosophy.  He was a philosopher.



And I think that's why people use that Stanford speech that he made so often in memorial was because that really laid out the way he approached life.  He may have been able - because he didn't surround himself with yes men.  A lot of people who are uncompromising and dictatorial just want a bunch of people to say yes.  He didn't want that, either, from what I understand.  And I never got to meet him.  He wanted people who were just as uncompromising and passionate as he was.  And so if he was able to pull that off, then Apple should be in good hands.  But it will never be the same.  That's the one thing I would say.



STEVE:  Yeah.  And, again, if I can have my iPad 3, and my iPhone 5, I think I'll be happy.



TOM:  We'll get that iPad 3 in March, I have a feeling.  I don't know when iPhone 5 is coming, whether that's - might have to wait till next October for that.  All right.  Our final question from Jason in Torrance, California asks:  Where can I get the free copy of Honor Harrington, "On Basilisk Station"?  I'm going to start buying the books, but wanted to read the first one's free copy, if possible.



STEVE:  Okay.  Now, our listeners thought they were going to get through an entire podcast without hearing about Honor Harrington.  [Buzzer sound]  Sorry about that.  Okay.  I just, again, for our listeners, it turns out the page where you can download the first two eBooks free is a little tricky to find.  So it is in my Twitter stream, both that first book and also the parent page, which you can also reach by clicking on the blue UP arrow on the "Basilisk Station" page, to get to the page where that, the second free book and all the other non-free eBooks are available with no DRM, in every eBook format imaginable, even PDFs and HTML.  So there's just - anyone ought to be able to read them.



I wanted to take a moment to summarize in just three pieces of feedback what I've received from a phenomenal number of listeners.  These are representative, and I'm going to try not to mention it again.  I think maybe next week we actually will have a podcast where Honor Harrington's name does not come up.



James Troutman in Philadelphia, Pennsylvania sent on the 4th, he said regarding "On Basilisk Station":  "Steve, I want to thank you for your *repeated*" - he has that in asterisks - "recommendations of the Honor Harrington series.  When you first mentioned it, I decided to give 'On Basilisk Station' a try, since I thoroughly enjoyed 'Daemon' after you praised that.  I downloaded the free version to my iPad but was dismayed when the opening prologue was unnecessarily confusing.  It seemed to introduce a new character in every other paragraph and was so jam-packed with exposition that it was hard to follow.  So I stopped reading.



"Then the following week you praised it again, so I thought I'd give it another shot.  This time the prologue didn't seem confusing at all as I reread it, and I made it through nearly 20 percent of the text before I got distracted and put it aside.  Although I was enjoying it, it didn't grab me.  It just didn't seem so compelling that I had to know what happened next.



"Then for the third week in a row you sang its praises once more.  So I decided to try again.  Literally, and I do mean literally, within two pages of where I had left off, the author introduced a character conflict that piqued my interest and curiosity.  Within just a few more pages I was hooked.  I see what you mean about David Weber's writing.  He's a master of plotting.  He lets events unfold in a way that you think you know where the story is going, and then in the next chapter he completely subverts your expectations in a good way.  Anyway, thanks again for *repeatedly*" - again in asterisks - "recommending this series.  I'm hooked now, and I wouldn't have been if you hadn't talked about it three weeks in a row."  Okay, count 'em, four now.  But this is it, I promise.  "Thanks.  And tell Leo that he's crazy if he doesn't drop everything in his reading queue to read 'On Basilisk Station' right away."  Okay.  That's one.  The next two are shorter.



TOM:  Okay.



STEVE:  James Ford on the 7th of October in Apple Valley says:  "Based on your enthusiasm and recommendation, I read 'On Basilisk Station.'  I absolutely loved it and immediately knew I had found a series that I was going to complete.  Then I read 'The Honor of the Queen,' and I only have one word for it:  'Wow.'  I understand why you had tears in your eyes.  And I had them also, but they were wiped away with the culmination of the final battle.  The few words that describe the battle's culmination provided me with a big internal cheer and a visible fist pump.  I've started 'The Short Victorious War' knowing I will enjoy it, but I am wondering how any of the rest of the series is going to top 'The Honor of the Queen.'  I'm a Trekkie from way back, watch and love a number of programs on Syfy, but for some reason I've not been much of a reader of science fiction.  But this series changes that.  Thanks for turning me and the other Security Now! listeners on to the Honorverse series.  P.S.:  David Weber is a very good writer."



And finally, just a tweet:  Mike Lopez in Coconut Creek, Florida, he tweeted me that Book 3 was amazing.  And so I sent back something like, "Oh, great, thanks," because I'm not allowing myself to read anymore until I'm - only now when I'm on the stair climber am I allowing myself to read these.  Otherwise I will get nothing else done.  So he sent, "Sorry, Steve, but I had to share.  Honor Harrington Book 3 is awesome.  I know you have many projects to complete, but this book really kicks it up.  I'm listening to the books on Audible, makes it easier when trying to watch a three year old.  And the narrator does an amazing job portraying all the characters.  I am excited to continue the series and look forward to your feedback on Security Now!.  Thanks for the great podcast.  I'm a Citrix admin for a large health insurance company, and the info provided in Security Now! is vital to my role."  So there you go, folks.  I've said all I'm going to say about Honor Harrington.  You can read the first two for free.



TOM:  Don't believe him, folks.



STEVE:  [Laughing] You're heard from our listeners.  They're really good.  So we're done.



TOM:  Well, you know what, I'm not going to give you a hard time because I was going on about "Ready Player One" by Ernest Cline for about the same amount of time after I read that.



STEVE:  Okay.



TOM:  So I understand the impulse.  I'll definitely have to check these out.  I'm reading "Reamde" by Neal Stephenson right now.



STEVE:  Okay, right.



TOM:  I want to finish that.



STEVE:  I just did finish "FreedomTM," and so I have now been able to start on Book 3 of the Honor Harrington series.  I'll be taking it slowly because I only read while I'm on the stair climber, which is good because it paces me, and it's going to keep me from just sitting down and reading them all in a week and getting nothing done, as one of our listeners did.  So, oh, no, that was the Lost Fleet series.  He read all six in, like, less than a week.  So it makes it go over - it makes it end too soon.  So I'm happy it's going to be strung out a little bit.



TOM:  Hey, before we wrap up, I just wanted to note the passing of Dennis Ritchie.  We just found out about it.  He passed this last weekend, creator of C, big contributor to the founding of UNIX.



STEVE:  UNIX, yup.



TOM:  And you want to talk about somebody who affected your life, if you're watching this show, you're using something that Dennis Ritchie helped to make possible.



STEVE:  Yup, absolutely.



TOM:  So it's sad to see him go, as well.  Yeah, it's been a sad couple of weeks in technology, for sure.



STEVE:  Yeah, our pioneers and founders.



TOM:  Yeah.  Well, thank you, Steve.  It's been great hosting Security Now! again, and I really enjoyed it.



STEVE:  And you go to do Feedback #128, nice power of two episode.



TOM:  That's right.



STEVE:  And I'm sure you'll be back next time Leo is not.



TOM:  I will, absolutely.  You know I love it.  Don't forget to try out ShieldsUP!, try out SpinRite, all the great things at GRC.com.  Anything else we need to mention before we take off?



STEVE:  I think everybody knows they can send me feedback at GRC.com/feedback.  I did ask people to, if they want to send me feedback about Honor Harrington, just put that in the subject line.  And that's how I found these and many, many others from people who are really having fun doing reading when they're not listening to the TWiT podcast family.



TOM:  Excellent.  Well, Leo will be back from vacation next week.  Until then, stay safe out there.  That's it for Security Now!.  We'll see you next time.



STEVE:  Thanks, Tom.



TOM:  Thanks, Steve.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#323

DATE:		October 20, 2011

TITLE:		TCP Pt. 2 - Attacking TCP

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-323.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with the week's news, Steve and Leo return this week to their "How the Internet Works" fundamentals series.  They examine the operation of the various attacks that have been made through the years against the Internet's most popular and complex protocol:  TCP.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 323, recorded October 19, 2011:  TCP Attacks.



It's time for Security Now!, the show that covers your security needs online, your privacy protection, and throws in a little sci-fi to boot.  Mr. Steve Gibson is here.  He's our man about town, our security guru with GRC.com, creator of SpinRite and many useful utilities.  And we're so glad to have you here, Steve.  We're going to continue on with our conversation on how the Internet works today.



STEVE GIBSON:  Right.  We know enough now about the low-level plumbing and the way TCP initiates connections to share a really fun topic, which I think is going to really be interesting to our listeners, which is how TCP is attacked.  Everyone is familiar with the term "denial of service attack."  There are, it turns out, some particular vulnerabilities that TCP has always had, which are not defects in it, but just, as always, ways that attackers can use anything complex in order to leverage things to their advantage that the designers just didn't think about.  So this is attacking TCP today.  Of course we've got a bunch of interesting news of the week, which we'll cover, and a real short little SpinRite blurb, a little surprising use of SpinRite.



LEO:  And I'm here to report that I am really loving "On Basilisk Station."



STEVE:  Oh, yay.



LEO:  Not quite finished.  I'm reading it on the Kindle.  But what's interesting to me, and one of the things I know, I was a huge fan of, well, the Horatio Hornblower tales and later the Patrick O'Brian's Aubrey-Maturin series, which is a 21-volume seafaring novel that follows the exploits of Captain Jack Aubrey, "Lucky Jack" they call him, and his bosom buddy, the ship's doctor, Maturin, Stephen Maturin.  And it's during the Napoleonic Wars.  They're a British man-of-war.  And it starts very similarly.



And I'm really wondering if the author of these Honor Harrington novels - if I had said to myself, gee, I love these Patrick O'Brian novels, I wonder if I could set them in the future.  Because it's exactly, not plot-wise, well, there's somewhat a similar plot.  I mean, just as Honor is getting her first command, the Aubrey-Maturin books begin with Jack getting his first command.  But also a lot of - all the naval tactics are very similar.  It's like they have to broadside these ships and so forth.  And even to the naval hierarchy is identical to the British naval hierarchy.



STEVE:  Oh, that's a good point.  I hadn't thought about that.  But, for example, the cannons are aimed out of the side, and that's...



LEO:  They broadside each other because they're protected by the pattern from their impellers.  Their high-speed impellers protect them.  It's clearly crafted to be a direct analog to British naval warfare.  So I thought it was - and even down to they have the Captains of the Green and the Blue, or Admirals of the Green and Blue, they have two different.  And they have the list.  All of this is very much out of the - you should read some of the Aubrey-Maturin books.  I'd be very curious what you think.  There's no lasers in it, though; I'm sorry.



STEVE:  Well, we did have, last week with Tom, some discussion of Honor Harrington.  I shared three representative notes.  First of all, we've been getting fabulous feedback from our listeners who have followed us into this new series also.  And so I shared that.  And I said, okay, I'm not going to pound everyone over the head.  But one of the pieces of feedback talked about how someone started to read it, then put it down.  Then I'd mention it again the week after, and he picked it up again, he read it for a while, then he put it down again.  Then I'd mention it again the next week.  And he finally, like, he said, two pages after I started the third time, he said, it finally got me, and I have not been able to put it down.  So, and a number of people have talked about Audible, saying that it gets better, or that maybe the readers of the later books are better or something.  But so I've been hoping that...



LEO:  I'll give Audible another chance.  Yeah, I'll give Audible another chance.  And I only got - I didn't even get through the preface, I thought the reader was so poor.  But maybe she does get better, so I'll give it another chance.  You know, that's me.  If it's an audio book, it's much more likely that I'm going to get to read it because I have more time to read audio than I do - but I was on vacation, as you know, last week.  By the way, thanks to Tom Merritt for filling in.  So that's when I got a lot of reading done on the beach, which was nice.  All right, Steve.  Let's launch into the security and attacks portion of the show.



STEVE:  Well, speaking of attacks, we pretty much covered all of the major player updates last week.  We had our second Tuesday of the month standard Microsoft updates.  Apple, of course, across the board, updated iTunes and Mac OS X and...



LEO:  Huge updates for - mostly not security.  Well, some of them security, but the Apple stuff was also about iCloud and iOS 5.  And it was half a gigabyte.



STEVE:  Right, and there were also some Safari updates that were security, and also some performance, actually, of Safari's JavaScript processing.  They were claiming they'd made it faster.  Also I mentioned, you and I talked the week before that, our topic was BEAST, the browser exploit against SSL and TLS.  We shared the fun chronology of the development of that hack.  And our listeners will remember that, at the time, I described that the developers of this looked into the Java source for a vulnerability to fit their particular needs and found one.  And Mozilla blogged shortly afterwards that they were considering blocking Java in order to protect people from the BEAST.  What ended up happening was that Oracle, who now bought Sun and controls Java, immediately, I mean, relatively quickly updated Java to what is now Version 6, Update 29.



So I wanted to let our listeners know - oh, and Mozilla did update their blog saying, okay, now that there's a new Java, we're not going to do anything as draconian as just shutting down all Java in Firefox.  I was at 1.6.0 Update 26, which is Version 6, Update 26.  So I went up to 29.  You can just go, if you Google "verify Java version," then the first link you get is to sort of the official page that Oracle is maintaining at Java.com that will allow you to click a button to have Java test itself and tell you what version you're using.  You can also open a DOS box, it turns out, and if you have a DOS prompt you can just type "Java -version," and it'll dump out - in my case it dumped out three lines of various version information, so plenty of detail there.  But you do want to be up at Version 6 Update 29.



Technically there is a Version 7 now, which is, as it sounds like, a major update, adding a bunch more features and so forth.  But it has not yet been widely deployed.  It's available for developers and offers some additional performance enhancements, some security enhancements, and even support for using the Java Virtual Machine with non-Java languages, so that you'd have languages other than Java that would compile to the Java byte code for speedy interpretation by the Java Virtual Machine.  So new stuff is coming.  And that's really all I had in the way of updates.



I did just - this is completely random, but I thought I would share it with my listeners because at some point I'm going to mention this, and people are going to go, what?  I'm back to v3.6.23 of Firefox, having come all the way back from 6, because I just got fed up with its memory problems.  Firefox, I don't know what happened, but at 4...



LEO:  It's horrible.  It's horrible.



STEVE:  Yes.  At 4 they broke it.  And when I would unblank my machine in the morning, Firefox would have grown to 1.6 gigabytes.  It was basically taking over my machine because I had left it up with some tabs open, which is ridiculous.  And so, as I was experimenting with it, if I would open a new tab and then close it, that would sort of wake Firefox up somehow, and then I would watch its memory consumption drop back down.  Not back where it should be.  It would go back to about half of that, about 800MB.  And then if I closed it and then reopened it so that it would just reload freshly those tabs that I had left open, it would be back at maybe 250MB.  So something was really wrong, and I just objected to it in principle.



So I went back to 5.  I tried 4.  I went to the very first 4.  That was still doing it.  So I thought, okay, forget this, and I went back to 3.6.23, which is the last one prior to 4, which they are still maintaining, and no problem at all.  It's a beautifully behaving, every morning nothing has grown, it's taking up much less memory.  And it's like, okay.  I'm on the verge of abandoning it altogether in favor of Chrome.  But I like the tabs on the side.  Chrome on Windows gives me tabs on the side, as we've talked about.  But they are much taller tabs, so they just take up more space.



But, and I like - obviously I like having NoScript and a number of the other plug-ins that are available for Firefox, just because it's been around and is so much more mature than Chrome is.  But, boy, I don't know.  They've got to get their act together, or they're losing me.  It's annoying.  So I just thought I would share that.  If any listeners have been seeing the same things, for what it's worth, 3.6.23 works just beautifully.  Yeah.



So, security news.  The EFF, our friends at the Electronic Frontier Foundation, were as concerned as we were about Amazon's announcement with their Kindle tablet and their so-called "Silk" technology, which in our careful parsing of their privacy agreement and technology statements - you'll remember a couple weeks ago, Leo, you and I looked at this very closely, trying to figure out what it was they were doing, that is, were they going to be proxying SSL?  We had talked before about how Opera behaved and how the Silk browser or the browser in the forthcoming Kindle tablet might have a certificate for Amazon's cloud which would allow it to filter and enhance the performance of SSL encryption.



And so the EFF was as concerned as we were, got a hold of the lead developer for the whole Silk project.  And I wanted to give a tip of my hat to Fabrice Roux in Marseille, France, who tweeted me the link that put me onto this.  So I was really glad to have the information.  So here's the deal.  Absolutely never, not under any situation, circumstances or configuration, will Amazon interpose themselves with SSL connections.  Period.  They're never doing it.



LEO:  Oh, yay, yay.



STEVE:  Yes.



LEO:  That's the right thing to do.  Fantastic.  Of course, that breaks all caching on secure sites.



STEVE:  Yes.  Well, it means, yes, it means that the cloud services are not available for SSL.



LEO:  That's fine.



STEVE:  But I really agree with you, Leo.  I think that is absolutely the right thing to do.



LEO:  Ironically, it's Amazon's own site that won't be sped up.



STEVE:  Right.  Maybe they can...



LEO:  Actually, you know what, that site they could speed up because they legitimately have the certificates for that.



STEVE:  Yeah.  There was a group that I talked to a couple months ago, they have a project called "Cocoon."  And I spent some time on the phone with their techie guy.  And they are proxying SSL.  And I just said, you know, that's just not okay.  I mean, they're doing it so they can filter and interpose and add AV and protect you from downloading stuff.  And I said, I'm sorry, but that's a problem.  That's something that I just cannot get comfortable with, the idea that, well, the idea that some service like that, which is free, is seeing my username and login when I'm logging into things, and also seeing secure session cookies.  I mean, it just, as we all know, everyone who follows this podcast knows it is too difficult to be perfect.  And perfection is what's required in order to have perfect security.  And the bad guys are just looking for the weakest link in the chain, just one little notch, one little niche somewhere where a mistake was made, and that's all they need.



So it is just - it is better for no third party to try to get itself involved in our secure connections, so they never have that responsibility.  I'm sure that's what Amazon was feeling was we don't want that responsibility.  So, first of all, SSL is never intercepted by Amazon with their Silk cloud services.  Secondly, all Silk optimization can be completely disabled on the very first browser options page.  So it is right in your face.  I haven't seen it myself because I don't yet have the Kindle.



But the EFF, in talking to the developer, he made it very clear that for people who were concerned about the privacy, the potential privacy, tracking, logging implications of having Amazon interposing itself, sort of as an active or overactive caching service, I mean, they are deliberately looking at the page you are requesting and going and fetching all of the third-party and successive content in the page, even before your browser gets it and then turns around and asks for it.  So they're actively participating for the sake of speeding things up.  That does make people nervous, as I think it should.  So the good news is, if you don't want that, you can turn it off.  And then your individual Kindle browsing will go direct to the third-party, well, first-party and third-party sites, and Silk and Amazon are not in the way at all.  So from your connection, your system will resolve DNS and make direct connections, not running through Amazon.



Now, on the good side of Silk, something that I had guessed and was hoping for was confirmed, which is when you are using Silk, which is by default enabled using the Kindle tablet, they do create a single persistent connection, and it is always encrypted.  So what that means is users in WiFi hotspots end up with complete protection.  When you're using SSL, you get the encryption of SSL, and Amazon is not a third-party proxy in your connection.  There's no man in the middle.  When you're not using SSL, that is, the rest of the time as you're poking around the 'Net, just doing other things on nonencrypted web pages, and you have Silk enabled, and you've left it enabled, then Amazon establishes a single connection.  They're using a protocol that we'll talk about soon called SPDY, which is short for "speedy."  And that's some of the work that Google's been doing with the Chromium project to make the web faster.



So this is a - it's a protocol different from and faster than HTTP, which is of course, as we know, the hyper text transfer protocol that everyone has always been using for web surfing.  So the Chromium project, the Chromium guys, as we've talked about this in a couple different contexts in the past, is really looking carefully at where time goes, how delays creep into web page loading - and, for example, we talked before about how one of the things they've experimented with is coming up with ways to improve the speed of SSL, to cut down on the number of roundtrips that data have to make over connections.  That's one of their make-the-web-faster aspects.



Well, this SPDY protocol that they have developed and have a preliminary spec for is what Amazon is using.  So it is an encrypted end-to-end protocol which allows Amazon to stream the content of pages over the single connection.  And what it means is that, even in open WiFi hotspots, when you're using the tablet with Silk enabled, nothing that you do can be eavesdropped on, whether you're using SSL connections or not.  But the EFF, being the EFF, is still concerned about logging because they recognize that with Silk on, for non-SSL connections, we're running through Amazon, and Amazon is busy, sure, on our behalf.  But their question was, what's being logged?  So I want to read exactly from what the EFF wrote so that I don't misquote this.  They said:



"For the persistent SPDY connection between the device and Amazon's servers, Amazon assures us that the only pieces of information from the device that are regularly logged are the URL of the resource being requested, a timestamp, and a token identifying the session.  This data is logged for 30 days.  The token has no identifying information about a device or user and is only used to identify a particular session."  So that's a so-called "fully opaque nonce," or an opaque cookie, essentially, but not a cookie in the normal sense.  It's their own session token.



Then they say:  "Indeed, Amazon's director of Silk development Jon Jenkins said, 'Individual identifiers like IP and MAC addresses are not associated with browsing history and are only collected for technical troubleshooting.  We repeatedly" - we the EFF - "repeatedly asked if there was any way to associate the logged information with a particular user or Amazon account, and we were told there was not, and that Amazon is not in a position to track users.  No information about the ongoing requests from the AWS servers is logged.  With respect to caching, Amazon follows caching headers, which offers some protection against caching sensitive information sent over HTTP."  Meaning that, for example, there are headers that say "No caching, please."  And so Amazon will honor such headers, which is the right behavior.  It's the only proper behavior for any sort of a cache on the web.  It's very important for anything that's caching to obey the headers which talk about expiration and non-caching and so forth because otherwise all kinds of things break.



Once upon a time, years ago, Leo, you may remember, I'm sure you do, that there were strange sort of caching things where you'd get obsolete copies of pages, and you'd have to do, like, control-shift-refresh or something.  Or you'd bring it up, even with a different browser, and now that browser would show a different instance because of, like, local caching that wasn't working right.  But those are just sort of people not implementing old or original protocols properly, which they have since fixed.



However, the EFF page says Amazon does not operate as an anonymizing proxy.  So we should not assume it does.  For example, even the IP addresses of the user are not shielded by Amazon.  We might think that they were because, if we're making requests which go to Amazon, and Amazon is in turn making those requests on our behalf, which is what a caching proxy does, you might say, okay, that means that sites that we're technically visiting are actually being visited for us by Amazon, so those sites would be seeing Amazon's IP.  Except that proper behavior for such a web forwarder or web proxy is to add their own header.  There's a header called X-Forwarded-For, so it's a forwarded-for header.  And Amazon is putting that into their queries on our behalf, and that means that our IP address is forwarded by Amazon to the destination.  That can help prevent the breakage of things which are IP based, which is why this is done.



So Amazon is providing no anonymizing services.  And again, it's like they're playing by the rules as a standard web proxy, not wanting to get in the anonymizing business.  So I guess users should accept the idea that there will be a privacy versus performance tradeoff.  If any of that upsets you, you can easily turn off Silk and see how it feels.  I mean, I can't wait to play with this and see what kind of benefit this much-touted technology with Amazon in the cloud actually provides us, and whether it just feels like it's worth the modest, what I think is probably a modest loss of privacy, and probably not a big deal.



Google, also in the news security-wise, has taken another step towards SSL.  They announced on Tuesday, that's just yesterday for when we're recording this on Wednesday, that they are going to be defaulting to SSL connections for users.



LEO:  Woohoo.



STEVE:  And I wanted to make - yes.



LEO:  Although it seems more like a publicity - well, I'll let you tell me whether it is or not.  Come on, really?  Do we need to have secure searches?



STEVE:  Well, the concern has been that without secure search, anybody who's looking at your connections is able to see what you're searching for and the results you get.  And so it's like, yeah, I agree, Leo, it doesn't seem to me like a big deal.  To me, what I like about this, and the reason I mention it, is it's just - it's movement in the right direction.  And I also noted that both on Amazon and at the EFF and in looking at all this Google news, there's never a mention of TLS.



Well, so I wanted to formally say to our listeners that I'm also going to stop constantly saying SSL/TLS because that's just too obnoxious.  Nobody else seems to be talking about TLS.  We know that technically SSL's been obsoleted in favor of an upgrade which is TLS protocol.  But everyone calls it SSL.  It's just simpler.  So I'm going to be saying SSL from now on.  And from now on our listeners will know that, yes, that's technically the Transport Layer Security instead of Secure Socket Layer acronym.  But SSL's what everyone is calling it.  I just think it's easier and less confusing.



So what Google is doing is for their logged-on users.  That is, if you have logged into Google Services, so that when you go to Google it knows who you are because your browser is returning a persistent cookie, a session cookie identifying you, what Google will do is, if you just enter Google.com into the URL, or www.google.com, then your browser will be redirected to a secure instance of that, so security will come up, so that the searching that you then do and the query you make will be over an SSL connection.  Well, I tried that this morning, and it didn't work for me.  So they may still be in the process of rolling it out.  I don't understand why it didn't because...



LEO:  That's not unusual.  That's not unusual.



STEVE:  Yeah.  I did log in; and it's like, okay, now it knows who I am, and I tried it, and it didn't work.  Now, this has caused some concern for educational institutions because they're a perfect example of an organization that has an arguable need to block queries that they feel are inappropriate from their students and to filter the results for inappropriate content.  And searching Google over SSL prevents them from doing that.  Or at least it makes it much more difficult.  So being sensitive to that, and this is of course an issue that Google understands and has dealt with, Google on their pages which describe this move that they're making, they provide a workaround for such educational institutions.



This has to be rather large because it requires that such an organization be running their own DNS.  So this is probably university scale, I would think, more than just elementary school scale.  And what they tell such people who want to defeat this automatic, and I would say this forthcoming automatic switch to secure search is to put in what's called a CNAME record for Google.com, pointing it to nosslsearch.google.com.  So what will happen is, when your browser asks for - when you put Google.com in, and I guess also www.google.com, your system will look for the IP address, look up the IP address of Google.com.  Instead, it will be told, oh, that's actually a nickname for, sort of a short name for nosslsearch.google.com.  So then your system will ask for, oh, then give me the IP address of nosslsearch.google.com, and that will return a special IP address.



To check all that out, I checked what IPs come back for Google.com.  And I get a list of six IPs:  74.125.73. and then 99, 103, 104, 105, 106, and 147.  So those five are returned.  And normally those will be rotating in order to do load balancing, so different users will get a list which is in a different order, and typically your browser takes the first one in the list.  And if there's a problem with that, it takes the second one and so forth.  So that sort of spreads queries being made by users out over all those servers.  But if you look up the IP address of nosslsearch.google.com, you get just one, which is 74.125.127.114.  So it's in a different C class network, off by itself, obviously expecting to have lower traffic because there's only one and not six IP addresses.  And queries made to that IP don't get bounced around, that is, don't get redirected into a secure mode over SSL.  They're just left alone.  So that provides a means for anyone who doesn't want searching by default to be protected inside of an SSL secure tunnel to avoid that.



So anyway, mostly, in answer to your question, Leo, I just think it just represents the direction we want to be going in.  We'd like to have SSL on all the time...



LEO:  Everywhere, yeah, yeah.



STEVE:  ...pervasively for everything.  And this is like, okay.  And Google being very careful, they're sort of just moving us forward.  It's not non-logged-on users, for example, it's only logged-on users.  So they're trying not to break anything as they sort of cautiously move us forward.



LEO:  It's more of a statement than anything else.  It's putting a flag...



STEVE:  I'm sorry?



LEO:  It's more of a statement than anything else, I think.  It's putting a flag in the ground, saying others should do this, too.  Facebook is who needs to do it.  And they kind of have.



STEVE:  Yes, although they're still - they also sort of incrementally moved forward.  We talked about how, if you ran across an app which could not run over SSL, then you would be forced to drop back to non-SSL.  And then we discovered it reset the setting of you asking for SSL.



LEO:  I think they fixed that a little bit, or at least they notify you, because I've noticed lately that it's turning itself back on.  So they're - I think it's good.  They're paying attention.



STEVE:  Okay.  So here's one where you just kind of have to roll your eyes and say, okay, are you really kidding me?  And a little tip of the hat to Jimmy LaMaster in Fort Wayne, Indiana, who tweeted this to me, and I got a kick out of it.  He picked up a story about security researchers at Georgia Tech who have managed to achieve 80 percent accuracy on word detection rates for words typed into a keyboard when an iPhone was resting next to it on the desk.



LEO:  Some special app they wrote?



STEVE:  Well, turns out that the 3GS iPhone, the earlier pre-4 iPhone, only had accelerometers.  And it didn't provide them with quite enough information.  Basically it's picking up the vibration of the user typing keys on the keyboard.  But as of the iPhone 4, which added the gyro, that's all they need.  And so with an iPhone 4 or later sitting on your desk next to your keyboard, they're able, with 80 percent accuracy, to determine what you're typing.  What they do is they break each - so every key you press is going to transmit a little bit of vibration via the desktop to the phone.  And what they do is they take each pair of letters at a time.



So, for example, in the example they gave in this Wired article, take the word "canoe," C-A-N-O-E.  They take CA, then AN, then NO, then OE.  And for each pair they determine whether it's on the left-hand side or the right-hand side, and whether it's far or near.  So this CA-AN-NO-OE translates, from a vibrational standpoint, they turn that into left-left-near, left-right-far, right-right-far, and right-left-far.  Then they use that to reference a dictionary where they have completely translated all the letters of the dictionary into these codes based on where the letters are on the keyboard.  And so they search the dictionary with these codes, and 80 percent of the time they can figure out what word was typed.



LEO:  Wow.  That's impressive.



STEVE:  This is, you know, we've talked about side-channel attacks often where, for example, crypto algorithms are themselves secure, but weird things they do, like the amount of power they pull depending upon the actual data that they're processing or the amount of time they take to respond, where it's like the algorithm itself is doing everything right, but something completely off-axis can be observed to see into what's going on.  So here's somebody typing on a keyboard, and just the vibration patterns picked up by their phone laying next to them is able to give away what they're doing.  And they said that microphones, which are able to sample at a much higher sample rate, typically I guess 44KHz, give them much better access to what's happening.



And there have of course been plenty of articles about how listening to someone typing can reveal often what they're typing.  And they said that, by comparison, the sample rate from the phone's inertial and gyro positioning systems has a much lower resolution.  It's about a hundred samples per second is all they can get.  But they said microphones are better secured.  That is, apps will ask for permission before allowing a microphone to be used; whereas accelerometers, not so much because you think, oh, what can an accelerometer give away?



LEO:  What could it do; right, right.



STEVE:  How could it spy on me?  Well, turns out it can.  And I did want to also mention, for people who are Android users and Firefox users on Android, that NoScript, our favorite scripting control tool for Firefox on other platforms, is now available for the Android platform.



LEO:  Really.  Oh, that's neat.



STEVE:  Yes.



LEO:  That's really great.



STEVE:  Yes.  There are a few features that don't make sense over on the Android platform, but all of those that do have been moved over.  So anyone who's using Firefox on Android, as I may be at some point if that's available to me as an option through Amazon with my forthcoming Kindle Fire...



LEO:  Oh, I guess you will be, won't you, yeah.



STEVE:  I'll want to do that.  And then, just closing this, I wanted to give everybody a quick update on my Off The Grid project.  Many people have said, hey, Steve, whatever happened to that?  Well, I'm working on it.  If you do go to the printing page of the Off The Grid pages, which are still not linked to the main menu because I haven't gone official yet, you'll see lots of changes.  The ultra high-entropy pseudorandom number generator that I created and talked about is all integrated now, in and working.  A ton of entropy is coming from GRC to initialize it, and entropy from all other sources is being mixed in.  There's now a visible high-entropy key which you can use.  And if you always use the same one, you always get the same grid.



So those things are done.  I just now need to finish up the printing aspect.  I want to allow people to choose fonts, set the sizes, turn off the border if they don't want to use the border, change the character padding and other things.  So just user interface stuff is where I am.  So I just want to let people know it's not dead by any means.  It's where I am spending my time.



Then I promised a strange but happy short SpinRite story from Sam Cannon, who on October 5th, a couple of weeks ago, sent to me, he said, "My wife lost her Android phone SD data, and I simply plugged it into my laptop.  SpinRite saw it."



LEO:  Wow.



STEVE:  "I ran SpinRite 6.0, and it was all back."  He said, "Another unexpected SpinRite miracle, when the estimate for professional recovery was greater than $800.  Good investment for a retired UNIX guy.  Happy wife, happy life.  Thanks."



LEO:  That's true, as well.



STEVE:  Exactly.



LEO:  Wow.  What a great...



STEVE:  So thanks for sharing that.



LEO:  So that's interesting.  I didn't know that you could work on Flash memory.



STEVE:  It works on everything, Leo.  It's just, I mean, it does things I frankly am surprised by.



LEO:  Shocked.



STEVE:  But I don't complain.



LEO:  No, no, no.  All right.  I'm ready to begin, Steve.  I'll put on my beanie.  The lecture is about...



STEVE:  Spin up your propeller, my friend.



LEO:  The lecture is about to start.



STEVE:  Okay.  So we last talked about TCP in the context of how connections are established and the use of sequence numbers which maintain and establish the notion of a virtual connection.  So that the point of sending this so-called SYN, or synchronized packet, is for the sender of the SYN to declare the starting 32-bit numbering of its packets.  And the reason that we don't always start at zero - well, actually, as we'll learn in a second, there's a security and attack-oriented reason also.  But the main reason is that a connection is identified by the source IP and source port, the destination IP and destination port.  Those four items uniquely establish the identity of a point-to-point connection between two different machines on the Internet, that is, a TCP connection.



And if we were, for example, to number packets always at the beginning of a connection starting from zero, there would be the possibility that we would create a connection, send some data, drop the connection, create a new connection, start numbering it also from zero and then, like, for example, send some data.  But just due to the vagaries of the way the Internet functions, it might be that packets from our prior connection were mistaken for packets from our new connection because they had overlapping or similar numbering.  So you could see that there's a need.  And since we've got 32 bits of packet sequence space, we're able to sort of jump forward and make sure that when we start a new connection we say, okay, we're going to be numbering it from here, which is unique numbering for this endpoint, so that if any packets came in, then we would ignore them.



What that also implies is that there's some window during which we would believe incoming packets' sequence numbers.  Meaning if they're, like, lower sequence numbers than when we began, we ruled them out.  But also, if they were, like, much higher than is reasonable to assume could be valid, we would just discard them also.  Well, that's important because it gave us some protection for the first kind of attack on TCP.  And what we're going to be talking about here are attacks which are sort of inevitable due to the protocol.  They're not vulnerabilities created by mistakes anyone made.  They're just the demonstration of what clever hackers can do when they look at a protocol and think, okay, how can we get up to some mischief?



One of the important links between routers, and we've talked about routers in this How the Internet Works series, is them sharing their routing tables with each other.  So a router in a given location has networks that its interfaces are connected to.  And so it also has an interface connected to another router, and it wants to advertise to that router the networks that it services.  That way the other router, when it receives a packet which is intended for networks that that first router has access to, it'll go, oh, I know which of my interfaces to send this to in order to forward it on its way.



So this is called - they use a protocol called BGP, Border Gateway Protocol, which uses TCP connections for security.  That is, as we've discussed, there is an automatic spoof prevention in TCP as opposed to, for example, UDP or ICMP protocols, because of this three-way handshake.  When TCP sends its SYN packet over to the other endpoint that it wants to connect to, that endpoint needs to acknowledge that by returning the packet.  No hacker is able to know what sequence number a given SYN packet that's establishing a connection will use.  So that gives their dialogue some protection against TCP/IP spoofing.



So BGP was always assumed to be safe for its communications among routers.  Except that, as we know, attackers are very clever.  And in some routers and in some regular old-school UNIX systems we're not doing a good job with this initial sequence number randomization.  So bad guys figured out a way of actually taking over, splicing into an existing TCP connection.  By sending some connection requests to a router, they would get back some - and by that I mean they would send SYN packets, synchronized packets to the router.  They would get back the router's answering SYN/ACK packet, which contained its SYN, that is, contained its direction synchronized number.  So that allowed them to figure out where the router's own internal stack was at that point in time.  And by doing some guessing and being clever, they were able to surmise when routers were talking to each other, to probe a router, to have it divulge the current state of its internal sequence counter, which, for example, might always move up by 64K.



There were some simple algorithms originally used where - because, again, the developers said, well, sequence numbers are to protect packets from being confused with older ones, so here's what we'll do.  And they did something that solved that need but wasn't attack proof.  And so hackers were able to notice the pattern of the way initial sequence numbers were being allocated by a router and then guess what the sequence numbers would be in existing dialogues and essentially splice themselves into an existing TCP connection; using BGP, this Border Gateway Protocol, poison the routing tables of routers; and end up being able to cause routers to divert traffic to faraway places.  And we've heard that this was being done before.  I've never gotten into the details of how it was often being done because we weren't at that level of detail.  Now we can understand how that's possible.



So you have TCP connections between routers which are assumed to be secure, but they're not because this initial sequence number can be determined.  If the router is not really using cryptographically secure determination of sequence numbers and actually was using a very simple approach, bad guys were able to inject packets into the other router, simulating spoofing the router whose sequence numbers they've been able to probe, and get that router to accept bogus routing table information which immediately the router would adopt, and suddenly all traffic would go off somewhere else.  I mean, maybe across the planet somewhere.  So when it was found out that hackers had figured out how to do this, of course, there was a big kerfuffle, and people updated their routers' operating systems in order to prevent this from happening, and we stopped having that kind of problem.  But that was one of the earliest protocol-level attacks on TCP.  Now, the more famous attacks - say what?



LEO:  I said nothing.



STEVE:  Oh.  That was actually an echo coming back to me.



LEO:  Hellooo.  Sorry about that.  Continue on, my friend.



STEVE:  The more famous attacks, of course, are denial-of-service attacks, which have been plaguing the Internet and the industry for a long time.  And there were several types of denial-of-service attacks which are a little more clever and which systems turned out to be more vulnerable to than most people appreciated.  We talked about how a TCP connection is established.  The user, for example, of a browser wants to connect to a server.  So we, the user, send a remote server a SYN packet to declare our interest in connecting to it.  The server, upon receiving a SYN packet, allocates a chunk of storage to represent that connection, meaning that it fully believes we're good guys.  We want to connect to it.  So we're declaring, for example, in that SYN packet, this is our initial sequence number.  This is the port we're connecting from, and from this IP.



And remember, these are the things which make our traffic to that server unique from all the other people in the world that have connections to it.  So it needs to allocate memory, to start some record-keeping, to record the sequence number from that remote IP and that remote port which is coming into it.  And it then generates its own sequence number to send back in its SYN/ACK acknowledgment, which also declares its sequence number.  So it needs to record what sequence number it's starting with because those are the numbers it's going to be numbering its bytes back to us with.  So then, if all goes well, we receive its SYN/ACK and respond with a final ACK, acknowledging the receipt of the SYN portion of its packet in a so-called three-way handshake.



Well, the Internet is a strange place.  We've established that.  Routers by law, by agreement, have the ability, if they're overloaded, to just drop packets.  If their buffers can't handle buffering anymore, if their links are full because a lot of traffic is coming in on some interfaces and all trying to squeeze out of one, but that one doesn't have enough bandwidth, the router is just able to discard things.  Which means that all of the systems have to be tolerant of delays and of lost packets.



So consider what this means for a high-profile server on the Internet.  A SYN packet comes in, and it has to, first of all, assume it's valid.  It has no reason not to.  All the connections that are coming in start with SYN packets, so ours just looks like anybody else's.  So it receives it, allocates a chunk of memory, and sends back an answering SYN/ACK.  



Well, if we do nothing else, a timer in the server expires because it has to assume that we didn't receive its SYN/ACK, that we're sitting around patiently waiting for a response to our SYN packet.  So that means that there also has to be timers that it's allocated as part of our connection.  So there's a block of data and responsibility that goes along with this connection-opening process.  But it turns out that it is possible - more in the old days than now, more in the original implementation of TCP than so much today - but it was once possible for a single user on the Internet to take down a major web server, just by sending SYN packets and never responding to the SYN/ACKs.  And in fact, since we don't have to respond to the SYN/ACK, we can create a fraudulent source IP, that is, we can pretend that this packet is coming from someone else and never even get the return traffic.



So we spoof the source IP on the SYN and just send it.  The server, again, has no reason not to believe it's as good as the one we sent before.  So it allocates a chunk of memory, sends a SYN/ACK off to where that packet apparently came from, and it waits for the answering acknowledgment.  If it doesn't come, it sends another one off.  Meanwhile, we keep trickling SYN packets in.  We may be sending them as fast as we can, but consider what's happening is every one of those SYN packets it has to treat as valid.  Some of them are.  Some of them are real users.  It can't tell the difference.  So it's allocating chunk of memory after chunk of memory after chunk of memory, one for every single incoming SYN packet, until it finally collapses; until finally it cannot allocate any more memory.



Normally that's not going to be gigabytes of server memory because down in the kernel there's no provision for allowing the TCP/IP stack to take over the memory of the system.  It's given some reasonable amount of allocation, some reasonable elasticity to that allocation.  And at some point it's filled up with what looks like connections which for some reason have never made it to the next stage.  And so it turned out that it was originally extremely simple for someone to bring down a major site.  It did not require, as we've often seen more recently, huge zombie fleets with tens of thousands of unwitting computers, hopefully on high-speed broadband cable modems, all concentrating their fire onto a single beleaguered server somewhere.  It actually was originally possible for a single machine to take down a major site, just by sending it a bunch of SYN packets, forcing it to allocate memory, and it couldn't determine which one was valid or not.  And once that memory pool filled up, it wasn't able to create any new connections, meaning that valid SYN packets coming in from people who wanted to get to a site, they had to be ignored.



So when this attack became understood, what was done?  Well, a couple of things were done.  First was that firewall vendors jumped in with appliances which they stuck on the front end.  They stuck these appliances in front of vulnerable servers or server farms, and those appliances took responsibility for this.  They would, for example, have much more memory allocated to them.  That's, like, all they were was connection pool memory.  And they've been hand-optimized to be able to do a better job at this.  So they would respond with a SYN/ACK.  And then only if an ACK came back would this appliance then turn around and open a connection to the server behind it.



In other words, this was a TCP connection proxy, which was built to be heavy iron, very robust, high performance.  And it would, essentially, it would take the attack itself and isolate and insulate one or more servers behind it from this incoming SYN flood.  The other thing it could do was be smarter.  As it began to see that SYN packets were piling up and were not being completed, it could just start freeing memory from the oldest SYN packets forward.  So it was always giving preferential handling to the newest ones, hoping that they might be valid users even amid a SYN flood coming in, trying to push them off the 'Net.



But it wouldn't just fill itself up and collapse.  It would say, okay, I'm going to start throwing away the oldest ones because, if they never got - the oldest ones that had not been completed.  And so when a three-way handshake got completed, it would say, okay, now we've got a good connection, and would pass it through.  Otherwise it would wait until it got that completion, and in the meantime discard the oldest ones so that it was still able to receive new ones.  So that was one thing that was done.



Then a very smart security researcher named Daniel Bernstein realized there was a whole different way possible to create a TCP connection.  And someone else you guys know well independently realized the same thing.  That is, me.  I didn't find out about Dan and what he called "SYN Cookies," which existed as an option in Linux, until I proudly produced my own system, which I called "GENESIS," which was a SYN-flooding protection system.  And then everyone said, "Oh, nice, Steve, but that's already been done."  It's like, oh, okay.  Well, I mean, it didn't keep me from having the fun of inventing something independently.  And I did mine a little bit different than what Dan did.



But consider this:  The goal here is to survive a TCP SYN-flooding attack of this sort, is to keep from letting any resources be depleted.  This is a resource-depletion attack because just by doing something at a relatively modest rate, you don't have to burn up the wires, we just take advantage of the fact that some connections can take a while to complete, which means that servers have to be patient.  If they have to be patient, then we can leverage that patience against them and burn up all of the resources they have for connections within that patience window, which is what this first type of SYN flood does.  It doesn't saturate the bandwidth at all.  It saturates the memory, the connection resources.



So what Dan first realized is there was a way to establish a TCP connection such that you responded to a SYN packet with a SYN/ACK and allocated nothing, which was extremely cool.  He used a cryptographic approach - and I will say that I did also - to encrypt the information about the remote user's IP, source port, and initial sequence number, and encrypt that into our responding sequence number in our SYN/ACK.  So that what that meant was we did a little bit of work upon receiving a SYN packet and sent back a very special SYN/ACK which involved some crypto of the incoming fields, which would still be the same in the server's final acknowledgment packet.  And what that meant was that we receive the SYN, we respond with a SYN/ACK, and we remember nothing.  No resources are allocated on our end in response to an incoming connection request SYN packet.



The cool thing then is, if our SYN/ACK (which contained essentially our cryptographically encoded sequence number), if our SYN/ACK made it back to a legitimate connection target, which then echoed an ACK (it was the incoming ACK when we did not have a connection established with that remote endpoint), we were able to look then at the remote IP, the remote port, the sequence number, and our sequence number which was being acknowledged; do the same crypto; and verify that essentially this was a cryptographic cookie, which Dan called a "SYN Cookie" because what it meant was the only way that this incoming ACK could be valid is if the person sending it had received our SYN/ACK, which involved some crypto, to take the IP and remote port and encrypt that with its sequence number.



So what this technology did was essentially to solve the problem of resource depletion attacks.  I implemented it independently in the way, what, like maybe 10 years ago, whenever it was that...



LEO:  You had to.



STEVE:  ...GRC was being attacked all the time.



LEO:  It was a defense.



STEVE:  Yes.  It was a defensive measure against these kinds of attacks.  And now that technology is much more widely available.  In some cases, in fact, Windows incorporated it, I don't remember when.



LEO:  Oh, interesting.



STEVE:  I don't think it was Windows 2K.  It might have been Server 2003.  For the sake of compatibility they're not always operating in that mode.  But if they see their connection queue growing to a certain size, then they dynamically decide, whoops, this looks like we're under attack.  And so it switches on this non-resource-depleting connection mode in order to respond.  And Linux has, last time I looked, but it's been a long time since I looked at this stuff, Linux did not have it enabled by default.  But you could certainly build a Linux or maybe use options at boot time in order to turn SYN cookie behavior on.  And it didn't break many things.  It was a highly compatible solution.  But that solved the problem of resource depletion attacks.



Now, I should mention that it was because of all this that I got in Microsoft's face with Windows XP because none of this was possible unless you had something called "raw sockets."  That is, remember that the whole point of the TCP/IP stack, as it's called, this is all networking technology in the kernel.  At the application layer, everything is much simpler.  All of this is being done for you.  At the application layer you say, you the application - Opera, Firefox, a browser, email, whatever the application is just says please give me a connection to this remote IP and port.  So you ask for that.  But all of that packet traffic, all of the SYN, SYN/ACK, ACK stuff is done by the operating system in the networking stack.



You cannot produce - there's no code, there's no API is the technical term, an Application Programming Interface, there's no API for generating a SYN packet.  You can't do it.  You can send an ICMP packet to ping or to do a traceroute.  But you cannot generate a SYN packet unless you have something called raw sockets, which is an API that was originally available in UNIX only.  It was also available in Windows 2000.  And what I saw Microsoft doing, as they were going to XP, was they went from Win2K to WinXP, basically just changed the UI, gave it a whole candy sugar coating user interface so that it no longer looked like Windows 3.1 and Windows NT, which is what Windows 2K looked like.



Windows 2K had a much more advanced networking technology, including, finally, raw sockets.  Microsoft was always being laughed at by UNIX people, saying, oh, well, it's not really a real operating system because you don't even have raw sockets.  So I think in response to that Microsoft said "ouch" and added raw sockets, which was fine for Windows 2000 because it wasn't a consumer operating system.  Consumers were still using Windows 95, 98, ME.  And it was with XP that Microsoft was going to migrate all of that legacy OS over to Windows XP, which they did.  That was the source of my concern because I recognized that Windows XP users were going to get themselves infected, and that malware running on XP that had access to full raw socket API would be vastly more dangerous for the Internet than any malware that had been on any previous consumer platform.



I got all kinds of flak for that because many people did not understand my argument, which ended up being shown to be correct.  It took years.  And it wasn't until Service Pack 2 of Windows XP that Microsoft said, "Oh, that's what Steve meant," and they removed the raw sockets API from Windows XP.  Which, I mean, they never remove things.  They're notorious for not breaking stuff.  Apple has traditionally been willing to remove things and upset their developers because they wanted to keep things simple and limit their legacy support.  Microsoft has really been reticent to do that, historically.  But they did pull raw sockets out of XP because they realized they were just too dangerous.



But it turns out there was another type of problem which SYN packets created which was different than resource depletion.  And that was routers.  A router is designed, as we've talked earlier on in our How the Internet Works series, to accept packets and send them on their way.  That's what they do.  So a typical packet is around 1500.  For some reason 1536 sticks in my mind, but that's also two to the power of [indiscernible]...



LEO:  It's got to be a power;, right.



STEVE:  ...that I've been seeing recently.  But anyway, so it's about 1500 bytes.  So the idea is, if you've got certain bandwidth on your connections, and packets are coming in at 1500 bytes at that bandwidth, that means that you're going to have packets at a certain rate.



Now, applications are typically giving the TCP/IP stack a big blob.  You may send a small query to the server, and that maybe fits in a single packet.  But it's going to respond with a page, which is going to be tens, maybe hundreds of K.  So the server up at the application level sends this 100K file, probably out of its cache, if other people have asked for that page, down to the TCP/IP stack and says, "Send this off."  So the TCP/IP stack, wanting to be efficient, chops this up into the largest packets possible.



And there is technology which we briefly talked about for figuring out how large a packet I can get from one endpoint to the other because one of the ICMP plumbing protocol features says that I was unable to forward a packet from where I am to the next router because the interface, the technology over the interface can't take a packet the size you've given me.  So routers can fragment packets, but you can also tell them "do not fragment; instead, send me an error."  So it's possible for links to establish the maximum packet size, which is worth doing because you get a lot more efficiency.  So what I'm trying to say is that, in general, the Internet works with packets being as large as they can be because...



LEO:  Isn't that the MTU size?  When I see an MTU setting, is that...



STEVE:  Yes, Maximum Transmission Unit.



LEO:  Okay.



STEVE:  Yup, that's exactly what that is.  And so routers are always being designed to be as inexpensive as possible.  And if you've ever looked inside of your typical Cisco router, it's a little old MIPS chip from the 1900s.  I mean, just there's not much in there, which is why Cisco was doing so well for so long is they were able to sell something that looks pretty impressive from the outside, but it's hollow on the inside.



LEO:  It's all industrial design, yeah.



STEVE:  Yes.  And it actually doesn't have to do very much.  It just receives this packet.  It looks at the first few bytes.  And then it sticks it in an outbound buffer, and off it goes.  So what happens with small packets?  What happens is the switching rate.  At a given amount of total bandwidth coming into the router, routers are rated in terms of the amount, the number of packets they can process per second.  PPS, packets per second, is one of the specs for routers.  And what it turns out is almost no routers, in fact I could almost, I think I could say no routers are able to process the amount of bandwidth they can handle in small packets.



So if packets are 1500 bytes - and I'm reaching for my calculator because I used to know all this stuff by heart, but I haven't talked about this for a long time.  If packets are 1500 bytes for regular data-bearing packets, and SYN packets are 60, which is a number I seem to have in my head also, well, that's a huge difference between a data-bearing packet of 1500 bytes and a SYN packet of 60 bytes.  That's a 25:1 ratio, which means if routers are receiving the smallest possible packet, which is a TCP SYN packet, then given the amount of bandwidth connecting them to the Internet, somebody sending SYN packets back to back as fast as possible is able to present the router with 20 times the rate of packet headers.  The headers are what causes the router to do work because it's got to look at the header, read the destination source, or the destination IP, and send it on, also check its routing table and figure out which interface it goes to and so forth.  So there is substantial per-packet routing overhead.



So just by sending smaller packets somewhere, all the routers between you and the destination, if you send lots of small packets, are doing far more work, and they're just not rated for it.  They're generally rated for a mixture of packet sizes, and you can see that in the specs, too.  They'll say they can handle 20 percent minimum-sized packets, 80 percent typical-sized packets.  And they'll explain that minimum-sized packets are a lot more work.  So one of the not-very-well appreciated, sort of unforeseen consequences of SYN floods is that they were the smallest TCP packets possible, and they were 1/25th the size of the normal payload-carrying packets that routers switched, and they just collapsed the router.  The routers just went underwater, could not, I mean, in a way that they were ill-equipped.  Routers can handle dropping packets by design if their interface buffers are overfull.  But if you just pour in packets at 25 times the rate they expect, the router just collapses.  I mean, it reboots, it crashes, it freezes up, it does horrible things.



And so what the DoS attackers learned was that they may not even be reaching the actual server they're trying to attack.  If they do have a number of bots, and again, not even that many, all concentrating their fire at a single IP, their traffic will be aggregating around the Internet as it begins to filter closer and closer toward the target IP.  And at some point the routers along the way will just collapse under the strain.  So the server is sitting around with no traffic because the routers serving it have collapsed.  And of course users, valid users who send innocent TCP/IP SYN packets or just want to transact regular data, they can't because the routers have been pushed off the Internet by the packet-switching rate, the number of packets that it's possible to send a router if each packet is very small.



And so that ended up being sort of an unforeseen side effect of these denial of service attacks.  It was small packets that routers - it could be 25 times the number of packets per second that DoS attacks were creating.  And the result was the same as if the server itself had been blown off the Internet, but the attack never even got to the server because it collapsed the Internet's infrastructure upstream of the server.  And that's our episode on attacking TCP.



LEO:  There you go.  From a man who has had some experience with this, direct.



STEVE:  Unfortunately, yes.



LEO:  Yeah, alas.  Very interesting stuff.  And very practical, if you have a website.  Now you know what's happening.



STEVE:  Yeah, and really no one's fault.  I mean, these were...



LEO:  Right.



STEVE:  It wasn't because of implementation problems.  Many people have scrambled around, and there are robust routers now that talk about their packet processing rate, and then they say they're able to handle the bandwidth of their interfaces at minimum-sized packets.  But that required more cost and more expense, and it wasn't the case in the old days.



LEO:  So you would use this to attack an individual, as well, I guess.  You could attack their router.



STEVE:  Oh, gosh, an individual has none of the higher end hardware.  So, yeah.  You could easily take one of these little blue box routers off the 'Net by sending a bunch of SYNs to it.  And in fact, that's what the script kiddies were originally doing when they were in IRC chatrooms.  They would want to blow somebody who had IRC privileges off of the 'Net so that essentially they would capture the flag, and then they would be running the IRC chatroom.



LEO:  Slapping them.



STEVE:  Yup.



LEO:  If you want to know more about this, well, Steve's got a whole website just full of good stuff at GRC.com.  That's where you'll find SpinRite, his bread and butter, the world's finest hard drive maintenance and recovery utility.  Heck, hard drive, you can do compact Flash, too, apparently, phone memory.  He also has a lot of freebies there which you should check out:  his Perfect Paper Passwords, Password Haystacks, great information, lots of things.  GRC.com.  He's on Twitter @SGgrc.  And we'll do a feedback episode next week, so you want to email a question, best way to do it is go to the website, GRC.com/feedback.  And there's a form there you can fill out.  There's very active forums there, too, though.  Good place to go to ask questions.



STEVE:  Yeah.



LEO:  Thank you, Steve.



STEVE:  Thank you, my friend.



LEO:  We'll be back Wednesday at normal time, again, 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1800 UTC at TWiT.tv.  And we'll see you then.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#324

DATE:		October 27, 2011

TITLE:		Listener Feedback #129

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-324.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 324, recorded October 26, 2011:  Your questions, Steve's answers, #129.



It's time for Security Now!, the show that protects you and your loved ones on the Internet.  And that's why I'm dressed like the Chief of the Chicopee Police.  Here he is, a real security guru - don't trust me to protect you - Mr. Steve Gibson of GRC.com, the Gibson Research Corporation.  Hi, Steve.



STEVE GIBSON:  Hello, Leo.  Great to be with you again, as always, for our 324th episode of Security Now!.



LEO:  Holy Camoly.  Wow.



STEVE:  Wow, yeah.



LEO:  So today is a Q&A, 129th Q&A.



STEVE:  Yes, it is.  And I have to say I tried not to make it all about the need to change passwords because running through the mailbag, 95 percent of our listeners all wanted to weigh in on their feelings and opinions and so forth about changing passwords.  So it was difficult not to do an entire Q&A about it.  I did...



LEO:  Refresh my memory.  Why is it that they're - did we talk about that?



STEVE:  Yeah.  I argued that - I was grumbling about how dumb it was that corporations often required their employees to periodically change their passwords for no apparent good reason, and about how - I related, as I had a couple times before, overhearing some executives in a coffee shop one morning grumbling about this and how their system wouldn't let them use any of the last four they had previously used.  So whenever this was required, they would successively change their password four times in a row...



LEO:  Oh, I remember that, yeah.



STEVE:  ...to get back to the original one.  So anyway, as always, our listeners are on the ball and brought up some interesting points.  One went through what some of the legal requirements are exactly, which I think is interesting.  And a couple other people did bring up some interesting points.  So there was that, and a couple more questions about battery care, which has been - when I mentioned it a few weeks ago...



LEO:  Oh, I loved that, yeah.



STEVE:  Yeah, it's been a huge focus of interest.  And actually when Tom and I were doing the Q&A two weeks ago, he skipped a question which I had that I thought, ooh, we'll take care of that in two weeks.  And so we've got one which references a site, BatteryUniversity.com, that I sort of wanted to leave everyone with because it's the ultimate reference for this kind of battery treatment stuff.  So anyway, we've got not too much news actually this week, but the Q&A episode that I think everyone is going to find interesting.



LEO:  As always, plenty to talk about.  All right, Steve.  Let's get the news out of the way, and I've got your questions.  I'm staring at them.



STEVE:  Cool.  Well, as I said, not too much happened in the week that our listeners have been on their own, away from the podcast.  Brian Krebs, our intrepid security researcher who blogs often and is really focused on security stuff, did post a very interesting list for the first time ever under the topic "Who Else Was Hit by the RSA Attackers?"  We'll remember that RSA, of course, was famously breached in what they called an - the acronym just dropped, I've lost the acronym - an Advanced Persistent Threat, APT, Advanced Persistent Threat...



LEO:  Oh, I don't know how you could have forgotten that.



STEVE:  ...where they discovered that, over the course of some length of time, bad guys were in and operating within their network.  Now...



LEO:  Whose network?  RSA's network?



STEVE:  Within RSA's, yes, inside of RSA's private network.



LEO:  This gets worse and worse.



STEVE:  Well, in following down, doing all the forensic analysis, a large network of command-and-control servers were located, more than 300 of them, the majority being in the neighborhood of Beijing, China.



LEO:  Uh-huh.  Is this like botnets or...



STEVE:  Well, these are, I mean, this attack was very sophisticated, so that some - so these are command-and-control servers.  These are not attacking systems.  These were systems present to interact with the malware which had infiltrated or been infiltrated into RSA.



LEO:  They had 300 of them.



STEVE:  Yes.



LEO:  That gives you some idea of the scale of this.



STEVE:  Yes.  So once they had those, they began looking at  the traffic that was heading toward them.  And here's the punch line:  More than 760 other organizations have or have had networks that were phoning home to the same set of command-and-control servers.



LEO:  Wow.



STEVE:  Brian posts the list.  There are 20 percent of the U.S. Fortune 100 companies on the list.



LEO:  Oh, boy.



STEVE:  And he says, "Among the more interesting names on the list are Abbott Labs, the Alabama Supercomputer Network, Charles Schwab & Co., Cisco Systems, eBay, the European Space Agency, Facebook, Freddie Mac, Google, the General Services Administration, the Inter-American Development Bank, IBM, Intel Corp., the Internal Revenue Service (IRS), the Massachusetts Institute of Technology, Motorola Inc., Northrop Grumman, Novell, Perot Systems, PricewaterhouseCoopers LLP..."



LEO:  Oh, my goodness.



STEVE:  "...Research in Motion (RIM) Ltd., Seagate Technology, Thomson Financial, Unisys Corp., USAA, VeriSign, VMware, Wachovia Corp., and Wells Fargo & Co."



LEO:  Well, I mean, forget the rest.  I mean, that's enough.  They probably could put together a pretty good attack.  Holy cow.



STEVE:  Yup.  Now, there were some AV companies there, but it was presumed that they had deliberately set up boxes which were infected.



LEO:  Honeypots.



STEVE:  Honeypots, exactly.  So they were watching this.  And it was by analyzing the operation of this malware that they were able to develop this list of command-and-control servers.  And a distressing number and demographic of companies are connected to this, or have been.  Traffic has been seen going to the vicinity largely of Beijing, China, from these companies.



LEO:  Does that mean that it was a Chinese attack?  Or could it be, I mean, how conclusive is it?



STEVE:  It really doesn't.



LEO:  It doesn't.



STEVE:  That really doesn't.  Our listeners know I'm very careful about attribution.  And attribution, of course, is the big problem with Internet-based attacks of various sorts.  You just don't know who's behind these things.  And so it could easily be that, for whatever reason, these group of Chinese machines were infiltrated, and command-and-control servers were set up in them, much as any bot network is essentially a set of machines controlled by a third party.



LEO:  In fact, that would be a prudent way to do it, and that's how traditionally hackers do do it.



STEVE:  Correct.



LEO:  But I bet it's China.



STEVE:  Ah, well, yeah.  And there's lots of mumbling about 

cybersecurity and state-based attacks.  We now believe that the U.S., for example, was involved in the development of Stuxnet, which was responsible for slowing down the nuclear enrichment program in Iran.  So it does seem that the Internet is becoming a true attack platform.



Which brings me really to my second topic, which is I'm seeing increasing discussion - and this is not like a news bullet point.  But just sort of I wanted to share with our listeners that I'm seeing dialogue about the notion of two Internets.  It's been around for a while, the idea that we somehow can't secure the Internet that we have.  And so there's a desire on various parties' parts to somehow come up with a second one.



An [FBI] spokesman was talking recently to a group about the concept of leaving our existing Internet alone, but then creating a deliberately non-anonymous Internet, which would be one of the things they were promoting, where it wouldn't be like the one we have now, where it's just this global open free network that anybody can connect to and get on and do things with anonymously.  It's more or less anonymous.  We talk a lot about tracking and passwords, of course, and all that, which are deliberately identifying activities.  But they would be talking about, or the FBI is beginning to talk about the fact that we just can't make what we have secure.  And this is becoming...



LEO:  Isn't that kind of throwing the baby out with the bath?  "Oh, we can't make it secure, let's just start over."



STEVE:  I know.  A Microsoft spokesman at a recent conference was saying the same thing.  He was talking about a Red and a Green Internet.  He said the Red Internet would be exactly what we have now; but the Green Internet would be much more restrictive, difficult to break into, and fundamentally have technology that made it easier to track down miscreants who were doing things.  So he wasn't making the mistake of saying it would be impervious because we know that's not possible.



But as I have spoken about, the underlying technology of the 'Net is such that it was never designed with security in mind.  When we were starting our series that we're in now on how the Internet works, the basic underlying nuts and bolts, the idea that you can just drop any packet into the Internet anywhere with an IP address, and it's the goal of the Internet and the Internet's routers to send it to its destination, not caring where it's from, what it contains, anything about it.  It just sends it.  I mean, that's architecturally beautiful, but it absolutely says nothing about security, and thus we're having problems.  So, I mean, it just...



LEO:  I think it'd be a fun show at some point to think about how would you design such an Internet?  How would you make a Green Internet?  What would you do differently?



STEVE:  Right.  Right.  And again, it's not like we could do a perfect job.  I mean, we can't do even bits of it perfectly.  Here's RSA, arguably a super-secure security organization, who is massively penetrated over the course of it's now believed many months.



LEO:  Well, see, that's kind of the reaction I have to this idea of let's have a second Internet, is...



STEVE:  I know.



LEO:  ...why don't we just make the first Internet secure?  What is it that we're doing, what is it we would do on a second Internet?  We'd do authentication.  We'd require packets to be authenticated.  We'd use SSL.  I mean, can't we do those things on the existing infrastructure?  Why do we have to have...



STEVE:  Well, yes.  And another example is - and there is a question about this that we'll be getting to in this podcast.  But even SSL, here we have SSL, and it's basically strong.



LEO:  It's kind of broken, too.



STEVE:  Except that then we go, oh, wait a minute, there's a problem with renegotiating sessions that we wish we didn't have anymore.



LEO:  And with CAs that have been compromised.



STEVE:  Precisely.  The fundamental idea of having certificates that we trust, well, if we can't trust the people who issue them, then that doesn't work.  So, yeah, problems.



LEO:  They've been talking about a second Internet for a long time.  For a while it was we want a fast Internet just for us.  That was one thing.



STEVE:  Right.



LEO:  And now it's a secure Internet.  I think the Internet2 Coalition down at Stanford was working on this.



STEVE:  I was just going to say, yes, educational institutions have talked about wanting their own, like, separate platform.



LEO:  There's too many unwashed masses on my Internet.  Get off of my Internet.  I just, I think, let's fix - I bet we could fix the one we have instead of throwing it out.  That just seems to me.  But it'd be a fun exercise, wouldn't it, to...



STEVE:  To fix - okay.  If we started, like, where I was just saying, like this problem of autonomous packet routing, if we were to say that, for example, in order to avoid denial of service attacks of the bandwidth flooding kind, they are all about concentrating traffic from many senders to a single recipient.  And there are many problems with blocking that.  And that is, for example, way out on the fringes before the traffic starts to concentrate, we have routers which are, without knowing it, they are passing invalid traffic.



So what that says is we have to rethink everything.  We can't, like, we can't just put a better SSL, a TLS 1.3 on top of what we already have now because that wouldn't solve any denial of service problems.  So the idea would be some sort of authentication mechanism before you were even able to put traffic, I mean, I was going to say connect, but a connection is a higher level abstraction of placing a packet on the Internet.  So you would have to have some sort of authentication mechanism that permitted you to inject a packet into some next-generation network.  Which means nothing we have done could we keep.  I mean, if that was the requirement, it starting from scratch, not a piece of the hardware that we have would work in that kind of scenario.



LEO:  Wow.



STEVE:  So anyway, yes, you're right, Leo.  It's been talked about a lot.  And I just saw two pieces of news this week, these two different people, one guy with the FBI, one guy with Microsoft, seriously addressing large audiences and saying maybe we need another Internet.  Don't worry, we're not taking this one away, but...



LEO:  And also maybe I'm paranoid, but I also feel like what they're saying is, maybe we need another Internet that we can control a little bit better.



STEVE:  Exactly.  Well, control would be part of it somehow.  I mean, who...



[Talking simultaneously]



STEVE:  Who provides the authentication that allows us to inject packets on the 'Net?  So anyway, we've got a problem.  And I just think we'll live with it.  I think we're going to limp along.  The investment is too great.  And Leo, it's not even clear to me that such a restrictive Internet would have ever functioned.  Had we started at the beginning, then could it have gone global?  One of the reasons it was so successful is that it was open, is that anybody could use it, that people could look at web pages and say, oh, that's how he made that effect work.  I mean, it was the organicness of it.



LEO:  It's about open.  I think open is very key.  And isn't a VPN, in a sense, a secure network over the existing infrastructure?  I mean, why don't we do that?  Why create a second Internet?  Even on the face of it, it sounds nutty.



STEVE:  Yeah, I know.



LEO:  What about encryption?  What about tunneling?



STEVE:  Yeah, and all of those work - kinda.  A VPN kinda works.  SSL kinda works.  Tunneling kinda works.  I mean, when we're finding little mistakes that we've made in our fundamental protocols, then that sort of argues that we're not capable of building something this big and secure as we want it to be.



LEO:  Remember when Microsoft said we're going to write a completely new stack for Windows?  Was it Vista or 7?  And you just said, well, that's crazy because we know all the flaws in the old stack.  We've patched them.  We've worked on them.  Inevitably, you write a whole new TCP/IP stack, you're going to introduce a whole new unknown bunch of bugs.



STEVE:  Well, and it's the classic expression of "Those who forget history are doomed to repeat it."  Remember that I made that comment because an old, old bug that had been stomped on back in the UNIX era resurfaced.



LEO:  Right, came back, yes.



STEVE:  It came back because they, it's like, oh, yeah, well, oops, new code, same problems.



LEO:  And I think that's the fallacy of, oh, well, let's start over again.  We now understand it.  We can do it right this time.



STEVE:  Now we know how to do it.



LEO:  Now we got it.



STEVE:  Speaking of starting over, Symantec and McAfee have both found and been analyzing instances of a Stuxnet variant.  I was talking about Stuxnet a few minutes ago relative to the Iranian nuclear enrichment program.  This one is called DuQu, so named because it tends to put a DQ on the front of the various file components that it uses.  Portions of it are identical to Stuxnet.  It seems to be targeting industrial control firms.  No one's quite sure what's going on with it yet, where it came from and so forth, and it does remove itself from infected systems after 36 days.  So a bunch of people...



LEO:  Why would it do that?



STEVE:  Well, probably because it doesn't want to be found.



LEO:  Job done.



STEVE:  And, yeah, exactly.  It's either going to get its job done within that window, or it's...



LEO:  Well, that's what Stuxnet, that's right, yeah, yeah, Stuxnet did that, yeah.



STEVE:  Yeah.  So anyway, a bunch of people tweeted.  I just wanted to acknowledge that I'd seen it.  There really isn't much more news on it yet.  Maybe if it's found somewhere really important or doing something really bad or they understand more about it.  But also this was expected.  The Stuxnet stunned researchers by its level of sophistication and how many different parts there were of it which was necessary to get it to do its job.  Which is really the reason that people were feeling, wow, you know, this feels like it's a state-sponsored piece of work.  This is not script kiddies.  This is not amateurs.  This is serious, heavyweight people.  So I thought that was interesting.



And then the other, right behind people talking about passwords in the mailbag was people telling me about the Spanning Tree Protocol, which I had implemented once upon a time, so I do know about it.  This relates to the question, I think it was two weeks ago, where a listener was experiencing a switch that was being brought down to its knees because essentially a cable was plugged back into the switch, which created a broadcast storm.  And I made the comment that I wasn't aware of anyone who specified whether switches did that or not, that is, prevented it.



Well, of course Spanning Tree Protocol is exactly for that purpose, except that what I meant to say was that, as far as I know, none of these little $10 blue box switches, which is the level of technology I was referring to, implement anything as sophisticated as Spanning Tree Protocol.  Spanning Tree Protocol, STP, was developed by a well-known researcher at DEC who is now at Sun.  And it is specifically to allow complex topology Ethernet networks, which can be interconnected, not just in a simple tree, where by definition of a tree you would never have more than one link between any two nodes, which prevents the kind of network loops and broadcast storms that I was explaining in answering that question.  And it uses its own protocol, a very sophisticated network probing protocol, to find best paths through the network and to even support the concept of deliberately establishing multiple links between switches.  Or, for example, you might build an Ethernet topology deliberately in a ring so that, if a link went down between a couple switches, there would be deliberately an alternate path the other way around the ring to get to those switches.



Anyway, so that's what Spanning Tree Protocol is.  I do understand about it.  But that's sort of at a level way beyond the brain-dead switch which I was describing as I was answering the Q&A.  But I did want to let our listeners know that I saw their feedback and thank them for it.



LEO:  Good.



STEVE:  And speaking of feedback, I found a - actually this was a little bit older.  This was a LockerGnome blog posting from Marc Erickson, who apparently posted to the LockerGnome blog.  He said, "Another SpinRite success story."  And he said, "I've been using SpinRite for about six months now.  The first time I tried it was on a customer's computer that wouldn't boot into Windows XP.  I thought, well, I'll try this software first; and, if it works, I'll save the customer the cost of backing up their data, reinstalling Windows and all their other software.  And it did.



"Then, earlier this week, it happened to me.  I got the BSOD [the famous Blue Screen of Death] inaccessible boot device [ugh, that's one I hate] error."



LEO:  That's not good.



STEVE:  No.  And he said, "When I ran the Windows CD to do a repair/install, it did not see any Windows installation present at all.  I ran SpinRite in Mode 2 - data recovery - and, after it finished, rebooted.  Voila.  Windows was back.  By the way, Steve Gibson and/or GRC.com haven't paid me anything for this blog."



LEO:  I am an actor with a paid testimonial, yeah.



STEVE:  "I'm just happy to promote a product that has saved me time and money and may help someone else also."  So he was just spreading the word.  And so, Marc, if by any chance you hear this, thank you for letting people know.  I appreciate it.



LEO:  Awesome, awesome.  Steve, we have - I have - I have in my hands, in the words of Joe McCarthy, 12 great questions or something like that.  All right, Steve.  I'm set up here.  I've got my questions.  I'm ready to puzzle you with a few of them.  Are you ready to answer them?



STEVE:  Absolutely.  Great feedback from our listeners.



LEO:  We love our listeners.  I tell you, every - I love coming in to work.  We're putting in the new bricks and all the great messages.  People come to visit from all over.  We've got visitors from Oklahoma City in the studio today.  It's just really - it's like you're working with buddies every day.  Not just you and all the other hosts, but our audience.  Anyway, here we go, 12 questions good and true, as they say.



James Russell starts us off from Australia.  He says:  How do programs know when the correct password was entered?  Well, that's an interesting question.



STEVE:  Yeah.



LEO:  How do utilities like TrueCrypt, Disk Utility, 7-Zip, know when the user has entered the correct password?  The decryption algorithm will run regardless of whether the password is correct; won't it?  I assume it will just produce pseudorandom noise for incorrect passwords.  Or do these programs append some kind of identifying token to the data before encrypting it, check for the identifier after decrypting it?  Or would that weaken security somehow?  Thanks, Steve.  Love the show.  James, this is a fundamental question.  How do it work, Steve?



STEVE:  Yeah, it is, it's a good question because, I mean, if the security program were to perform any kind of a test against a password, like is it right or not, checking it against the right password, well, I mean, that would be crazy because it would be super simple to simply reverse-engineer the operation of the code, step through where it's checking the password to see if what you entered matches what it's expecting, and then proceed if it were to match?  You couldn't work that way.



LEO:  Right.



STEVE:  So it is as James suggests.  The system runs the decryption algorithm under - and that is to say, using the key that the user has provided.  And generally what will happen is there'll be a header that the system has put onto the front of a file which is of a known format.  It'll be a known layout.  They may have, like, a version number of the protocol, or the encryption system may have some identifying information about the program and so forth.  So that stuff it knows the proper format for.  And so only the use of the proper key would decrypt the encrypted header into the proper format that the program would then look at.



So it looking to see whether the decryption was performed correctly in no way weakens the system because it doesn't matter if someone were to reverse-engineer that and see that, oh, look, it's checking to see whether this random noise equals the name of the security program, for example.  I mean, it's like, okay, that still tells the attacker nothing about what key needs to be used in order to decrypt what's encrypted into something that it can see the program is looking for.  So, yes, essentially it just uses whatever it's given.  And then it's not going to give you the file and say, here you go.  It's going to tell you that, whoops, that's not the right key.  But the way it tells you is by checking something whose format it knows, which was part of that encryption, and verify that that part was properly decrypted.  So, great question.



LEO:  Yeah.  I mean, yeah.



STEVE:  That's the way you'd do it.



LEO:  Yeah.  Francois Lagrange in Brussels, Belgium - Bruxelles - offers some reasons to force periodic password changes.  Oh, here we go.



STEVE:  Here we go.



LEO:  Here we go.  Get ready.  Steve, I am a security architect in a large bank, and I work daily with people managing security devices.  So this is the guy who makes you change it.  While mandating to change user passwords is a needless annoyance indeed, there definitely are reasons to do so in some cases.  Passwords for security equipment must be changed regularly, say every six months, in the enterprise.  Think about it:  engineers sharing passwords, writing them in notepad files, on Post-its.  I've seen passwords of equipment written on a piece of paper - I have, too - next to the equipment itself.  Of course.  That's the Post-it note; right?  Shared to colleagues by telling them almost out loud?  Right.  Or even think about the many engineers that occasionally have to look up passwords while the project manager is standing right behind them.



I know, I know, there are ways around all this.  Still, changing passwords from time to time just ensures the list of those knowing them is just reset from time to time to those that really need to know.  It makes sense.  People leave, stuff like that.  Thank you for everything.



STEVE:  Yes, I completely agree.  So that's different than the model that I was discussing, where you have a one-to-one relationship with an entity where you're not disclosing your password for any other purpose, and it's within your self-interest to protect the password yourself.  What Francois suggests is certainly a valid and different scenario.  But I like what he said at the end there best.  He said, because changing the passwords from time to time resets the list of people who know it.



LEO:  Right.



STEVE:  And so this is definitely a valid use case, where you sort of have more of a community of people who collectively know, who share the knowledge of a password.  And it's like, if they're shouting it from office to office or writing it down and handing it to a friend because, oh, he needs to be able to have access to it, that's a different model.  And so there I absolutely agree that it would clearly make sense to change the password just to - I guess I would call it "diffusion."  There would just be sort of diffusion of the knowledge of the password over time.  It would just sort of diffuse into the environment.  And so definitely change it.  And exactly as the way he phrases it, it resets the list of those who really do need to know it.  And so, yes, I thought that was a really good point.



LEO:  Fair enough.  Question 3, Zach in Madison, Wisconsin.  He shares his discovery of a slick Kindle utility:  Steve, not related to the show, but I know you own several Kindles, so I thought I'd pass...



STEVE:  As does Leo.



LEO:  As do I.  I think I own them all.  I thought I'd pass long this tool I just found that has greatly improved my PDF reading experience.  Well, I'm reading a PDF right now.  Let me - help me.  Help me.  Normally I shy away from reading PDFs on the Kindle since the text is so small and zooming in or rotating the screen is just annoying to me.  So there's this program, K2pdfopt.  It's a small EXE from Willus.com.  You simply drag a PDF onto it, and it will optimize for Kindle reading.  Oh.



STEVE:  That's nice.



LEO:  Yeah.  Though you can tweak many of the settings, I find the defaults work great.  Take a look; share it with your listeners if you like.  It is, and I like this, although he did say it's an EXE, it is Windows, Mac, and Linux, or versions exist for all of them.



STEVE:  Yes.  He did talk about an EXE.  I went to the site and looked at it.  And the problem with the PDF that we've talked about in the past - well, there have been many problems from a security standpoint.  But, from a reading standpoint, PDFs are inherently page-based.  You're formatting a page to be a certain size.  And if you put it on your Kindle, well, it's going to squeeze it down to be the size of the screen.  What this utility does is it breaks that.  In your benefit, that is.  It says, wait a minute.



LEO:  Hold on.  Hold on.



STEVE:  Let's reformat this.  We're going to make this content readable, figure out about columns, figure out about sizes.  And just, I mean, it completely re-renders the PDF in a fashion that allows you to get the content out of it at the expense of the page layout.  But there are many instances where that's a good thing.  That's something that you want.  And I did verify that he's got it for Windows, Mac, and Linux.



LEO:  I'm downloading the Mac version right now.



STEVE:  Yeah.  And you can see on that website - it's www.willus.com.  And even on that home page he does refer to this K2pdfopt program.  And you can see some before and after pictures of here's what the PDF page looked like first; here's what I did to it.  And it clearly makes it much more legible for small screen readers.  It even shows it for a smart phone, so like a really small screen.



LEO:  Really cool.  What a great idea, yeah.



STEVE:  Yeah.  So thank you, Zach.



LEO:  Yeah.  Thank you, Zach.  Moving along - and I'm downloading it right now.  And then what you do is you just email it to your Kindle.  You have the PDF, and then you email it.  And I think they charge you, what, a dime for that.  But that's the problem, is that.  Or I guess you could hook it up via USB.  I have never done that with any Kindle.



STEVE:  I have, actually.  It works great.



LEO:  Yeah, and saves you money.



STEVE:  There's a folder called "Documents," and you just drop all of your files there.  And then when you disconnect the Kindle it does an inventory and discovers new things there and adds them to its home page.



LEO:  I shouldn't be so lazy.  I just mail it.  An anonymous listener wanted to weigh in on lithium-ion battery care.  You talked about that a couple of weeks ago.  He says:  Steve, you mentioned that lithium-ion batteries want to stay charged to get the maximum lifetime.  So you see, when I get to work I plug in my phone.



STEVE:  Yay.



LEO:  So that it's, even though I may not need it, it's always charging; right?  According to BatteryUniversity.com, which is cited on the Wikipedia page for lithium-ion, that's not completely accurate.  According to Battery University, if you continuously keep lithium-ion batteries fully charged at 100 percent permanent capacity, the loss is greater than if you keep the lithium-ion battery at half charge.  Oh, yeah.  But how are you going to do that?



Take a look at "Table 3:  Permanent capacity loss of lithium-ion as a function of temperature and charge level."  If you keep the battery 100 percent charged all the time at 25 degrees Celsius, you'll lose 20 percent of the capacity in about a year.  However, if you let the battery discharge and leave it at about 40 percent most of the time, you should only lose 4 percent capacity.  It is correct that you shouldn't run lithium-ion batteries down to zero; but also you shouldn't repeatedly keep charging it, which would keep the battery near 100 percent and then of course reduce the lifespan of your battery.



STEVE:  Well, our listener is close to correct.  And this is sort of the last bit of lithium-ion battery-handling care that I wanted to share with our listeners.  Where he's wrong is that this is specifically and only true for storage.  So, Leo, for example, all of those old Palm Pilots...



LEO:  You should discharge them to half and then put it in the fridge.



STEVE:  Yes, exactly.



LEO:  I get it.



STEVE:  So it is storage, it's long-term storage of lithium-ion batteries that you do not want to store them fully charged.  They don't like that, either.  But in your normal daily cycling, as long as you're taking them down and bringing them up, taking them down and bringing them up, like we use phones and other devices and laptops, you do want to, as I originally said at the start of this whole dialogue, plugging it in and keeping it topped off is the right thing to do.



I was just at Starbucks yesterday morning for a couple hours, reading.  And there was somebody there with his laptop, sitting there working.  And after some length of time he suddenly, in a little bit of a hurry, went rummaging around in his backpack to grab his charger because clearly he'd received a warning on his screen, saying, oh, your battery is almost depleted.  Turn me off or plug me in.  Well, my point was that he should have always been plugged in.  If you're in a situation where you can be plugged in, then you absolutely always should be.



LEO:  If you can plug in, do plug in.



STEVE:  Right, exactly.



LEO:  That's the takeaway.



STEVE:  Exactly.  And Leo, we just had a power failure here.



LEO:  I heard the [mimicking sound].



STEVE:  And you and I cruised right through it thanks to my UPSes.  Nothing went down.



LEO:  Sweet.  You're kidding.  So it was just a brief little flick.



STEVE:  Yep.  It was off for about 15 seconds while I was talking about batteries.



LEO:  I heard a little buzz.



STEVE:  I looked around.  Lights went dim and screens are off.  But the critical systems, which is to say me talking to you, just went through without batting an eye.  That's routers and switches and all kinds of stuff here, just working...



LEO:  What are you running?  You're running obviously a pretty hefty UPS.



STEVE:  Yeah.  I've got a couple big old APC monsters, those things that take several people to move, yeah.



LEO:  Yeah, love those.



STEVE:  They're old 19-inch rack-mount deals.



LEO:  And you have enough for all the wattage that you use?



STEVE:  Yup.



LEO:  For how long?



STEVE:  Well, for 15 seconds.



LEO:  Uh-oh, wait a minute.  Wait a minute.  The blinking lights have gone off.  Your PDP-8s shut down.



STEVE:  Oh, yup, they just did.



LEO:  You don't keep them on a UPS.



STEVE:  I did deliberately decide what needs to survive and what doesn't, so...



LEO:  Right.  No point in keeping those running.  Well, hey, that was cool.  That's really cool.  Moving along to Question 5, Tom Minnick of Baltimore, also in Maryland.  What?  Oh, also MD.  I'm not sure what that means.  Wonders about lithium - I think, oh, wait a minute, I got it.  Baltimore, Maryland also wonders - the words got swapped - about lithium-ion versus lithium-poly and the effects of deep cycling:



Steve, I really love the podcast.  In your Q&A you had mentioned it's bad to deep cycle lithium-ion batteries.  Are Li-Ion batteries and Lithium-poly batteries the same?  The reason I ask, I've been playing around with RC aircraft for a time, and they all now use lithium-polymer batteries, which by the nature of how we run these planes are being deep cycled.  They just run it till it crashes, I guess.  There are safety mechanisms in the speed controllers to prevent the batteries from being drawn down past a certain threshold, but these devices don't meet your keep-plugged-in-and-topped-off model.  I haven't had a chance to look into this.  I thought you'd be interested.  Regards, Tom.



STEVE:  Okay.  So, yes, lithium-ion, lithium-polymer are identical in the way they're handled.  And Tom...



LEO:  What is the difference between the two?  Is there different materials involved?



STEVE:  Well, it's the same fundamental chemistry.  One of the nicest things about the polymer technology is that they can be made in what's called "prismatic" shapes.  And that, for example, is specifically what allows our iPads and thin tablets and so forth, where you're able to make a battery now, no longer does it need to be cylindrical or of limited flexibility.  You can really create wild shapes using this technology.  But basically it's the same lithium chemistry throughout.



So Tom's situation is a little bit different.  There he is really seriously using the power in the battery.  He's pulling a lot of amperage out of it over a short period of time.  And there he's going to run into cycle life limitations where he's just - as we know, the battery technology is not perfect.  When you discharge it and recharge it, not everything comes back exactly the way it was.  So it's a little bit like friction inside the battery.  There's fundamentally some wear and tear with the technology.



So my comment about keeping batteries topped off was aimed mostly at our consumer devices, like Kindles, and Apple is now going this direction in general, not having user-serviceable batteries.  It really wouldn't even come up as an issue if you could easily take the battery out of your Kindle or out of your iPad and put in a new one.



LEO:  You can't take it out of the Kindle anymore, can you.  That's right.  They used to have them.



STEVE:  Only the, yes, only the very first generation Kindle you could open the back and exchange batteries.



LEO:  In fact, when I bought it, I bought two batteries because I thought, well, maybe I'll need another battery.



STEVE:  Yup.  I'm the same way you are, Leo.  But so my point was that, as I'm seeing people, and it was a drained Kindle that really brought this to mind, it's like, ooh, you know, you can't change the battery in that.  So, boy, keeping it plugged in is the best solution.  So Tom's usage case is very different because he's probably going through batteries relatively quickly, just using them up, essentially burning them out, because they are just - they're giving all of their juice virtually right down near zero, and then he's charging them all the way up again and draining them all back down.  Very different than a Kindle, which just sort of sips at the vapors of the battery.



LEO:  Interesting.  So he'd actually be a good test case for this.  If he does go through batteries, that would be why.



STEVE:  Oh, yeah.  And the hobby battery pack technology is very cool.  You plug the battery in, and it's got a fancy connector which taps every cell in the battery and individually manages the charge per cell in order to keep them balanced.  And, yeah, they've done a lot in order to get maximum amount of juice you can out of these batteries of cells.



LEO:  Well, enough about batteries.  Let's get back to passwords.  Question 6 is Geoff Forsyth in Ipswich, U.K., who admonishes us not to blame the IT department:  Steve, don't blame us for forcing password changes.  We have an obligation to do it as part of credit card compliance rules.  Blame Visa.  Every business that takes credit card payments must comply with the security rules enforced by Visa, MasterCard, and Amex.  These rules are designed to reduce card fraud, but they do drive all IT departments absolutely nuts.



Visa, MasterCard, and Amex formed the Payment Card Industry (PCI) Security Council a few years back (PCISecurityStandards.org) and will fine an organization up to half a million dollars if it doesn't meet their rules - the rules are called the Data Security Standard - and then subsequently suffer a breach.  The whole world seems to be struggling to implement these IT rules.  And though in general they are set up with the best intent, they do insist password changes are implemented for all staff every 90 days.  So the DSS says change user passwords every 90 days, require a minimum password length of at least seven characters...



STEVE:  [Buzzer sound]



LEO:  How about at least 10?  Use passwords containing both numeric and alpha.  At least they said "at least," right?



STEVE:  Yes.



LEO:  Not some between seven and 10 or something like that.  Use passwords containing both numeric and alphabetic characters.  Do not allow an individual to submit a new password that is the same as any of the last - oh, that's where this comes from - as any of the last four passwords he or she has used.  Limit repeated access attempts by locking out the userID after not more than six attempts.  Set the lockout duration to a minimum of 30 minutes or until administrator enables the userID.  I really hate it when they do that, when they make a call.



STEVE:  But it is safer.  I mean, it's...



LEO:  Well, it works.  If a session has been idle for more than 15 - this is to prevent brute force, obviously.  If a session has been idle for more than 15 minutes, require the user to reauthenticate to reactive the terminal or session.  So this is the kind of thing that - now, see, as a bank customer, though, I don't have to change my password.  So this is for staff, not for customers.



STEVE:  Correct.  And so, for example, my own organization is abiding by these rules just because I originally implemented my one-time password system.  So we're never - every password we use is different from the prior password.



LEO:  Do you make them change every 90 days, though?



STEVE:  There's nothing to change.  Every time you log in.



LEO:  Oh, it's one-time, they're one-time passwords; that's right.



STEVE:  Yeah, yeah.  So we're - and I do have something like a lockout and so forth.  I mean, all of that is sort of - it's what somebody who was conscious of security would build from the beginning.  And what I do wish, the one thing I wish that was pervasive was locking users out after some number of guesses.  It's just so often the case that the companies don't want the hassle of users saying, well, I tried six times because I have 12 passwords I use all the time, and I couldn't remember which one of those 12 it was.  And now I'm locked out.  They just, from a customer support standpoint, no one wants to get that call.  So, but boy, that would just make such an improvement for security.  But at the cost of people being hassled, exactly as you said when you read that rule, Leo.  I mean, you're right, it does bite you sometimes.



LEO:  Oh, it drives me crazy.  Keith in St. Louis, Missouri brings up a very good point about password changing:  Steve, listen to you and Leo all the time.  Love it.  Feedback regarding the password changing policy topic that keeps being brought up - I love it, this guy is saving us time by eliminating unnecessary or redundant words.  Sure this has been thought of, but you keep saying you can't find a good reason as to why users need to change their password every X months.



Let's say I attack a user and get the user's password.  I've got the clear text password; right?  I want to keep my access, but I'm not going to do anything to let the user know I've compromised his or her account.  If the user is forced to change his or her password every so number of months, I'm screwed.  Of course, if I had the rights I could create another account, put in a backdoor.  But if those are found, I could go back to the user's account unless they're forced to change it.  So isn't that a good reason why we need to force users to change passwords every so many months?



I think it would make sense.  Yahoo mail, AOL mail, where users don't do a good job with their passwords and probably do get compromised, at least if you encourage them to - this is Leo adlibbing here.  At least if you encourage them to change it on a regular basis, that'll protect them against having been hacked.



STEVE:  Yeah.  This, to me, I mean, I see Keith's point.



LEO:  It's a little paternalistic.



STEVE:  Well, and to me it feels a little bit like the user ought to have responsibility for recognizing whether their password might have been compromised.  For example, if you give it to someone because you need them to log in for you or something, and then, sure, you could say, oh, and please never use it again.  But the smart user would say, okay, now I'm going to change it because I was forced to give it away, and I want to restore my privacy.



So, I mean, I certainly understand what Keith is saying, that, yeah, if a bad guy got your password and was loving on a persistent basis having access to your account, then, clearly, changing it periodically would shake those people loose.  But to me that feels like a little bit of a stretch, relative to the hassle that users would be put through changing all of their passwords every X months for no good reason.  If you've got a really strong password, and you're responsible with it, my sense is, eh, keep it.



LEO:  Good, because that's what I plan to do.



STEVE:  Yeah.



LEO:  Chris Strzelczyk in Michigan.  Strzelczyk.



STEVE:  You did a good job with that, Leo.



LEO:  That's a good try, anyway.  Strzelczyk in Michigan reminds us about - for all we know, he pronounces it Sade, I don't know - reminds us about insecure fingerprints:  Steve, I'm a listener in the programming and server administration profession for many years.  My brother is somewhat of a clean freak and tends to wipe his iPad screen often.  Hmm.  After leaving his iPad at my house one day, I observed the fingerprints left on the screen could be mapped to his unlock code.  Since they were pretty much the only fingerprints on the screen, it was trivial to figure out the actual numbers.  Now I just had to write them down and decode.



Since my brother is not a Security Now! listener, I suspected his passcode would be something he could easily remember, probably some number that binds to some personal information.  I was right.  A couple of birthday combinations later, I was inside his iPad.  Oh, yeah, that's right, because it doesn't tell you what order.  It just tells you what he tapped.  Now, on the swipe, like on the Android phones they have a swipe, then you could even see the order.



I wanted to bring this to users' attention.  When you have a code on your iPad, you should, well, maybe not wipe it as often so that there's lots of fingerprints, or have a code that doesn't bind to any personal information.  Thanks for a great show.  Yeah, Dvorak, every time he gets my phone, tries to read the fingerprints to figure out what the unlock code is.



STEVE:  Ah, John.



LEO:  He knows.



STEVE:  So I've noticed the same thing.  I can't remember what it was, but when the iPad, when my iPad was new, and probably before I added the antiglare film because that really does cut down on the fingerprinting problem, there was something I was playing, a puzzle I was solving or something, where it was inherently a grid.  And I remember looking at the screen after a few days, I mean, and you could really see the grid that I had been touching.



But I liked Chris's point because this has reminded me to say to our listeners something that I have been intending to for weeks.  And that is, I've been very happy with changing my iPad to the setting that gives you the full keyboard, not just the number pad.  And it's a beautiful change because you can still use just a very few keys.  But because you're dealing now with a much larger alphabet, with more than 26 things, including special characters, you can just go tap tap tap and enter.  And even in a situation where you weren't clearing your screen, there's, well - let's see.  I guess that is not the case.  You'd have more locations if you...



LEO:  At issue is the order.  So the more presses you have, the more difficult it is to figure out what the order is.



STEVE:  Correct.  So you could certainly use - you could use more than the limited four numbers.  But my sense is, if you were using the keyboard, those taps would be obscured among all the other uses of the keyboard and other things.  It's over much - you're spread out over a much larger surface area, and much less easy to see what it was you were typing.



So anyway, I think I've mentioned this, or someone mentioned it once before, and I ended up following up on it, that is, switching from the 10-key pad to the keyboard.  It is no additional work and substantially greater security because the number of combinations possible on a keyboard, and I don't remember now how many keys there are.  It's certainly A through Z, but also a number of special characters.  And of course you have Shift, as well, if you wanted to do that.  So you could add a couple shifts.  Oh, and that would - shifting the numbers would completely obscure the sequence because no one could tell when you had pressed the Shift key or not.  So that would be good, too.



But anyway, a simple change to make to your iPhone or your iPad that really does jump the security up.  And the thing that I realized was that I have persistent logons and sessions and remember-me settings on my iPad, just for convenience.  And it occurred to me, well, what if someone just picked up my iPad, I mean, or if it walked off by itself at Starbucks when I wasn't looking.  What would that really mean?  I mean, ask yourself the question.  If somebody actually had it, what would that mean?  And I thought, oh, that would not be good.



So I enabled the option of wiping it if multiple attempts were made that were unsuccessful, wipe the memory, that's now turned on, as is that screen which proposes very little usage overhead and always reminds me that nobody else can get into it.  And there was a breach, by the way.  I didn't pay attention to it, but it involved a way of bypassing that with the iPad cover.  Did you see that, Leo?



LEO:  Yeah, it was pretty funny.  What it does is it will - it's the Smart Cover.  I don't have an iPad in front of me, so I can't show you.  But so what you do is you lock your iPad, which has a Smart Cover on it.  And you can trick it, by using the Smart Cover, to put it to sleep; and then opening it up again, it will go to whatever program is open.  Now, if you're in your desktop, they won't be able to run any program.  They'd just be able to see it was the desktop.  However, if you were in email, or you were on your browser, they have full access to that one app.  So whatever app was running when you locked it, that's what they'd have access to.



STEVE:  Interesting.  And if you try to change apps?



LEO:  You can't.



STEVE:  Oh, okay, interesting.



LEO:  You can't.  So you only can - so it's kind of like it's still somewhat secure, but not totally secure.



STEVE:  So obviously Apple will fix it here in the next update and so forth.



LEO:  And by the way, you don't have to have a Smart Cover, as Zeph88 is pointing out in our chatroom.



STEVE:  Use a magnet?



LEO:  Any magnet...



STEVE:  Yeah.



LEO:  ...will do it.  Or if you're a bad guy, just carry a Smart Cover in your back pocket.



STEVE:  Speaking of which, I did tweet something this week that'll still be up near the top of my queue for any iPad 1 owners who are missing their multitasking gestures, which were removed even in developer mode when we updated to iOS 5.  Many people who have the original iPad 1 did use the developer mode in order to enable multitasking gestures.  It's very nice.  I like you can squeeze it in order to go back to home.  You can lift in order to get to your - which is the equivalent of double-tapping the Home button - and also then just swipe sideways in order to change apps.  Someone developed a non-jailbreak way of reenabling multitasking gestures for the iPad 1.



So go to Twitter.com/SGgrc, and right near the top of my feed you will find that.  And I tweeted a link, and a whole bunch of people sent back responses saying, yay, this is fantastic, because they were really happy to have it.  So you don't have to jailbreak your iPad to do it.  It's something that the guy figured out how to do to get those back for original iPad owners.



LEO:  Yay.



STEVE:  Yeah.



LEO:  Yay.  Fabio...



STEVE:  Now back to our regularly scheduled program.



LEO:  Fabio Esquivel, whose name I adore, in Costa Rica, he's in Cartago, Costa Rica, asks:  Should I be scared of TLS 1.0?  After listening to your podcast about the SSL v3.0/TLS v1.0 and TLS v1.1 vulnerabilities, I ran to disable Windows support of these protocols.  It's in Control Panel > Internet Options > Advanced > Security Items.  I only left TLS v1.2 checked and so felt safe.  Days later my iTunes 10.5 started to fail.  I could no longer log into my iTunes Store using an Apple ID, so I couldn't download updates for my iPhone.



I didn't think disabling TLS 1.0 and 1.1 would affect iTunes, so I ran some diagnostics, and there I could see some connectivity issues.  The detailed diagnostics showed that iTunes could no longer establish a secure connection to the App Store.  So I guessed I was wrong.  I went again to Internet Options, enabled TLS v1.1, restarted iTunes, still no luck; then enabled TLS v1.0, restarted iTunes, and it worked.  As app downloading worked just fine on the iPhone, I guess iOS 5 is using TLS v1.0 internally.



Should I be worried about 1.0 vulnerabilities?  Should someone cry at Apple's doors to oblige them to update TLS to at least v1.2?  What's going on?  Did you look into this?  It's interesting.



STEVE:  Yes.  Yeah.  So on Windows, which is what he's talking about, there is a scrolling option box.  You can scroll all the way down near the bottom, and there it lists SSL v2.0, SSL v3.0, TLS versions 1.0, 1.1, and 1.2.  Now, even my brand new Windows 7 has, of those five options, only SSL v3.0 and 1.0 are enabled.  So it is supporting the other ones, but they're disabled.



Now, what would be interesting would be to see whether enabling 1.1 and 1.2 would cause problems.  That is, in theory, as we've discussed the way SSL functions - and of course that applies to TLS, same thing - the client offers a suite of supported security ciphers, literally a suite, a cipher suite to the server.  And the server should have a prioritized list of from, like, the most secure that it knows down to the least secure.  So it compares the client's list of options to its list and selects the most secure.



So what would be nice, and what I think should happen, is if you enabled 1.1 and 1.2, then those servers you were connecting to that were aware of 1.1 and 1.2 would preferentially choose those, and you'd have the most secure connection possible.  But if you were connecting to a server that didn't know about 1.1 and 1.2, it would choose 1.0 as the best that it knows.  Now, that's the way things should work.  And as far as I know, they do.  When this was all happening, that is, when - this is relative to the BEAST and this vulnerability that was found in the block cipher, the so-called CBC (Cipher Block Chaining) that is used preferentially by SSL and TLS.  That was where the problem was.



So, first of all, we should all just step back and take a breath.  I'm really glad this research was done.  And it's putting pressure on organizations like Apple to increase the level of protocol support at their servers.  So I don't think we need to cry to them.  I imagine, I mean, you could complain; but I imagine they understand, and they're probably in their own time moving in that direction.



But this is also a theoretical attack, I mean, over the course of some period of time, by breaching the Same Origin Policy in the browser using a Java Virtual Machine hack, which has since been patched.  And you would still need to be able to breach Same Origin Policy in order to pull this off.  Then it was possible for them to, through a lot of number crunching, to successively decrypt bytes of a cookie, which gave them access to an existing session.  So, I mean, this is - it can be done.  I imagine maybe we'll see at some point some packaged schemes for doing it.  People are scrambling around, trying to lock down browsers and prevent this from happening.  But it's the kind of problem that's ultimately going to be fixed.



However, that said, there actually is something that server administrators could do, if they were concerned.  And that is, the older, non-cipher block chaining cipher, meaning RC4, is absolutely strong and useful and bulletproof and doesn't succumb to this problem at all.  And so it is possible on the server side for administrators to simply disable the Cipher Block Chaining protocol options and fall back to RC4, which everybody supports.



So if this were a much bigger problem, if it were more of a concern, then I would say maybe that ought to be recommended policy until we get more widespread support of 1.2 version that doesn't suffer from this problem because they're not carrying the initialization vector from the end of the prior block into the beginning of the next one.  That's the little tiny mistake they made that has been fixed years ago, but no one has gotten around to updating their protocols because it just didn't seem like a big problem.



So anyway, I would say you should not be scared, Fabio.  You might turn on 1.1 and 1.2.  That way your system is offering the more secure protocols, and it will use them if they're available, and it'll fall back to 1.0 if they're not available.  But don't sweat it.  My sense is the browsers are going to get this locked down.  And the good news is we'll be moving forward with a more secure protocol as a consequence of these researchers who showed everyone, whoops, there is a way to take advantage of this problem that we've known about since 2004.



LEO:  All right.  Our last - are you ready? - our last question.



STEVE:  And Netflix reversed themselves, didn't they?



LEO:  They were going to separate the DVD business out, yeah.  And they decided not to.  Qwikster, they were going to call it.  I don't, you know, Netflix is struggling a little bit because they lost a bunch of subscribers.  Mostly it's a stock thing.  The stock market's lost faith in them.  I think they're great.  I use them all the time.  And I will never, you know, maybe you want to quit your DVD subscription.  But I like that, too, because I like having a disk.  But I just think the streaming is such a good deal.  To me, that's the way to do it.



Miamiandy, who lives in Troy, New York - he probably just wishes he were in Miami - wants to comment on iPhone keyboard vibrations:  I was attending CCS this past week and heard Georgia Tech people present their paper about the iPhone detecting typing via the vibrations it produced.  We talked about this last week.  Is it because of an accelerometer in there?



STEVE:  Yup, yup.



LEO:  And you can actually detect the vibrations on the table.  During the Q&A that followed it was pointed out, when they were probed for more detail, that this was only under some very specific circumstances.  First, the iPhone was always on the left side of the keyboard in the same spot.  Second, they made sure to use a wood desk.  Those resonate the best, of course.  When they tried it with another desk or on a concrete floor, it just didn't work.  Third, they tried it in an isolated environment.  This was pointed out to be an issue since vibrations from other items like desk fans or maybe even some speakers would ruin the results.  It was an interesting paper, but I think the flaws in its proof should be pointed out so people aren't suddenly paranoid about leaving their phones on the desk.  Please, don't ever stop the podcasts.



It's not their phones you've got to worry about.  But if you see a stray iPhone to the left of your keyboard, and you're on a wooden table, and there's no other vibrations in the room, be afraid.  Be very afraid.



STEVE:  And people are saying, "Shhh, he's typing."



LEO:  "He's typing, shhh."



STEVE:  Yeah.  So this was a very good point.  I brought it up because I thought it was fun and clever.



LEO:  It was cool, yeah.



STEVE:  And it perfectly demonstrates this whole class of crypto concerns known as side channel attacks where, without intending to, you're leaking information through an entirely unrelated vector that you wouldn't anticipate.  For example, we've seen - and we're now aware of this, for example, modern ciphers and hashes are - they get dings against them in their competitions if the amount of power the processor consumes is a function of the keying material.  So, or if the length of time it takes - newer hashes and ciphers are time invariant, meaning that it always takes them the same amount of time to do their work, independent of what your key is and what the data is.



So those are examples of, I mean, these are things we've seen attacked before.  Timing attacks are real.  They have been used to crack ciphers and to perform decryption.  So anyway, this was just another wacky cool example of a side channel attack.  But I did want, as Miamiandy says, let's not get ourselves carried away.  It's not like our phone is spying on us and actually able to determine what we're typing by listening.



LEO:  Steve, as always, you debunk; you explain; you teach; we learn.  And love doing the show.  We do it every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1800 UTC at TWiT.tv.  You can watch live.  But if you don't, don't worry.  Steve makes copies available on his fine site, GRC.com.  Not only 64KB audio, but 16KB audio for the bandwidth impaired.  That's the smallest file size anybody offers on any show on this network.  He also does transcriptions, which is just great, so you can read along as you listen.  If you want video, we have that, as well as all the audio, at TWiT.tv, as well.  And next week what are we talking about?



STEVE:  I'm not sure.  We'll either continue with talking about some of the inner workings of TCP the protocol, or if something comes up in the meantime, there are a couple other things I wanted to research.  So I may take us off that for a minute, tackle something else interesting, and then come back.  I expect that next week I will be announcing the completion of Off The Grid.



LEO:  Really.



STEVE:  I believe it's finished.  I came so close yesterday to posting it for the newsgroup folks to pound on.  There's a little different Firefox behavior.  If anyone was curious, you could - I did post a PNG image of the grid-customizing UI.  If you go to GRC.com/miscfiles/gridcustomization.png, you will see just a snapshot I took a couple days ago to show the folks who are in the newsgroup and waiting for me to give them something to pound on.  You can change the font, the size, the horizontal and vertical padding for the characters; you can turn off the upper and lowercase randomization change, the run length of that, even the colorization of the various aspects of the grid.  So it's got all kinds of bells and whistles.  And it's working.  I'm just - I'm very close to having it finished.  So I suspect next week - many listeners have been saying when, when, when.  So I hope it'll be next week.



LEO:  Awesome.



STEVE:  And we'll certainly have a good podcast, in addition.



LEO:  No matter what.



STEVE:  Yup.



LEO:  Guarantee you that.  Thank you, Steve.  Thanks for joining us, everybody.  And we'll see - and for those who are wondering, I just thought I'd wear a security outfit during Security Now!, that's all.  They said, "Is he moonlighting?"  Yeah.  Got to make a little money on the side.  Thanks for joining us.  We'll see you next time on Security Now!.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#325

DATE:		November 3, 2011

TITLE:		TCP Pt. 3 - Necessary Refinements

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-325.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with the week's news, Steve and Leo return this week to their "How the Internet Works" fundamentals series.  They examine the challenges presented by "packet-based connections" to further understand the operation of the Internet's most popular and complex protocol:  TCP.



LEO LAPORTE:  It's time for Security Now!.  Hello, everybody.  Leo Laporte here.  And there he is, Mr. Steve Gibson of GRC.com.  He's cheerful.



STEVE GIBSON:  I cracked you up.



LEO:  How are you cheerful?  I would be so - in fact, after this show I'm often a little bit glum because I always feel like the bad guys are winning on this stuff.



STEVE:  Yeah, we're just spectators, Leo.  We and our listeners, we're sitting back, watching all of the packets fly.  And lord knows what's going to happen.



LEO:  Better sitting back than sitting ducks.  And I guess if you listen to this show, at least you can say "I'm not a sitting duck."



STEVE:  I think that's absolutely true.  So no duck.



LEO:  So today, Part 2, no Part 3 of our TCP explanation.



STEVE:  Yeah.  What I wanted to talk about, and I thought I was going to initially, was this interesting next-generation application layer protocol called SPDY, which Google and the Chromium Project are working on.  The thing that put it on my radar was that it's going to be in our Kindle Fires when they come in a couple weeks.  That's the technology used for dramatically speeding up web access.  And we've often talked about HTTP, which is the traditional web protocol, the application layer protocol, meaning that we have the underlying protocols which we've been talking about recently, the IP protocol and then ICMP, UDP, TCP.  Those are transport layer protocols, part of what's regarded as sort of the underlying transport of data.  But the application layer runs on top of that.  That is, TCP is the carrier for HTTP packets.



Well, what Google, because they're so web focused, and I'm really glad that they are, what they recognized was that the web has changed dramatically in the last decade, certainly in the last two, since HTTP was originally conceived.  The nature of pages, the type of content, the way pages are being used is very different from what it was.  And HTTP is beginning to show its age.  There are many things we could do now, taking advantage of higher bandwidths, stronger servers, and helping us to deal with just the complexity of today's pages.



So this SPDY protocol is really interesting in that it addresses those things.  But as I sort of laid out what I want to talk about, I realized that many of the problems it solves require an understanding of TCP that we don't have yet.  So I said, okay, we've got to lay down another layer of TCP understanding in order to get what it is that the SPDY protocol which runs on top of TCP helps to solve.



So today we're going to look more closely - we've already looked a couple times at some aspects of TCP.  Now we're going to look at what it takes to get as much speed as you can, because that's of course what everyone wants, over a packet-switched connection.  Because it's very different, when you think about it, to be sending blobs of data off.  And the question is, how fast can we go, and how do we know how fast we can go.  And that's what happens, you just saw it, if you try to go too fast.



LEO:  You fall apart.



STEVE:  Yeah, the message does not get through.  So that's today's topic.  It's going to be a great one.



LEO:  Excellent.  I imagine there's a few security updates in the hopper today.



STEVE:  Things have been quiet, actually...



LEO:  No.



STEVE:  ...on the update scene.



LEO:  Yay.



STEVE:  Happily.  We do have a bunch of news, though.  I got a lot of it from the SANS newsletter, which just sort of - this is a newsletter I've been subscribing to for years, and I would really recommend it.  I've referred to them throughout the entire length of the podcast.



LEO:  Some day I would love to get you just to write down the stuff you do to keep up on this stuff - the newsletters, the websites, all that stuff.



STEVE:  I'll tell you, what I do often now, thanks to Twitter, is watch my own feed because people are just - our listeners are just...



LEO:  Great use for Twitter, yeah.



STEVE:  ...so great about sending me stuff.  I'll see something and click a link and open a tab.  That's actually one of the reasons I end up with so many tabs in my browser is they're placeholders for things I want to get back to for research that I'm doing.  People mention things, and I go, oh, yeah.  That looks good.  I'll come back and read that later.  But...



LEO:  Well, so it's @SGgrc, by the way.  So if you want to follow Steve or feed Steve, you can do it there.



STEVE:  Yeah.  So the EFF has done a study.  They have something they call the SSL Observatory that we've talked about a couple times.  And I have it in my notes here to do a complete podcast on it because it's very interesting.  It's basically an Internet-watching system that watches SSL traffic and builds lists of things going on.  And what came to their attention was that four major certificate authorities have been compromised in the last four months.



LEO:  Four.



STEVE:  Four.



LEO:  So we all heard about the Dutch one.  But this is four.



STEVE:  Yeah.  DigiNotar, of course.  And Comodo, I'm not even sure if Comodo was part of this.  But there are the so-called Certificate Revocations Lists, these CRLs we've talked about as one of the means for a browser to verify that the certificate it has is still trusted.  Because certificates expire, but it may sometimes be necessary to revoke them.  I've, for example, taken advantage of that system when - and I don't remember now what it was.  It was a few years ago.  But I needed to supersede a certificate that was otherwise still valid with another one.  I had to change something about it, or I was experimenting.  I don't remember what now.  But I found that - and it was funny because I got some feedback from people who said, hey, my browser just said a certificate was revoked.  It's like, yeah, but it was on purpose because I've got a new one.  And so somehow they weren't seeing the new one, or their browser was telling them something was going on with GRC.



But in the CRL, the Certificate Revocation List, there's a reason for the revocation specified.  And they are - there's a null, it could just be not specified; or the affiliation was changed; the CA was compromised, that is, the Certificate Authority who issued the certificate was compromised; the certificate was put on hold; the certificate was formally ceased operation, so it's a way of sort of like formally shutting down your use of a certificate; a key compromise.



And in the list of these, surprising how many, in terms of count, key compromises there were.  So that would mean that, for example, the owner of the certificate, like an Amazon.com, just to draw an example, would have lost their private key, which the certificate contains the matching public key.  So if they realize that they no longer control the key for the certificate they're issuing, that's not safe because it allows other people to intercept and decrypt their traffic.  So key compromise would be another reason that you would administratively revoke a certificate.  Also privilege withdrawn; superseded, as I had mentioned before; and unspecified reason.



So this SSL Observatory has been collecting data.  And what they found was that there had been, in the last four months, a substantial jump in the number of certificates revoked for reason of CA compromise.  And when they weeded out the duplicates and the same CA saying that it had been compromised and so a number of certificates were withdrawn, they found that there were four which were now claiming that that was the reason for withdrawal.  So that represented an interesting uptick in the rate at which this is happening.  And I liked what the SANS editors had to say.



An editor whose last name is Liston said:  "The entire SSL Certificate system is founded on the faulty premise that we should trust a corporation simply because they claim to be trustworthy.  These companies have taken on a huge responsibility as a part of their business model, and have simply not taken the kinds of precautions one should take when voluntarily positioning oneself as the basket containing all of the chickens."  And Murray...



LEO:  In other words, don't put all your chickens in one basket.



STEVE:  Yeah, but unfortunately, as we know, that's the way the CA system works.  We have 600-plus Certificate Authorities that our browsers trust.  And the model, unfortunately, is such that every single one of them must do a perfect job in order for the system to work.



LEO:  Ah.  If any one is bad, like DigiNotar, then you're screwed.



STEVE:  Exactly.  And that's why our really old-time listeners will remember the shock that I shared once, many years ago, when I looked after - a long time ago I remember there were, like, 12 Certificate Authorities.  And that was VeriSign and Thawte and a couple others.  It was like, oh, that seems manageable.  Then I looked, and this list had exploded without my having noticed.  And I remember sharing with you, Leo, and our listeners, it's like, oh, my god.  This is not good.  And that's what it turned out to be.



Another editor said:  "We do not have to have a perfect system of key management.  But vendors who want to offer services in the security space have to have good security.  Their brands are essential to their viability, and they are very fragile."  And of course that's exactly what we saw with DigiNotar, which is now bankrupt because they didn't have good security.  In fact, we learned that some of their passwords were ridiculously weak, and they're gone now.



I also picked up a little blurb, also from SANS, that said that a U.K. high court judge has just given the British Internet Service Provider BT, which I think is British Telecom, two weeks to implement a plan to block a site, Newzbin2, which is a membership-only site known for making pirated content available.  The ruling is the result of a lawsuit brought by none other than the U.S. movie companies.



LEO:  Oh, boy.



STEVE:  Our friends at the MPAA.  The judge decided that BT was aware of the copyright infringement activity occurring on the website Newzbin2, and had ruled in July that the company must prevent its customers from being able to access that site.  The judge - now, here's also the point that was brought up as being a real problem by these editors.  The judge also ruled that "the costs of implementing the order should be borne by BT."



So let's step back a minute from this.  This says that a random service provider - I mean, BT didn't do anything wrong.  They're just the target of this lawsuit brought by the U.S. movie companies.  And a judge has ruled that they, the ISP, have an obligation to block their customers' access to this one particular website, which is known to make pirated content available, at their cost.  So anyway, the editor, Murray, in his little editorial comment, said something that just jumped out at me.  I loved - I wanted to share it with our listeners because it was just, I mean, I'm sure this will be retweeted by the people who are listening live and others when they hear it.



So Murray said:  "It seems to me that BT is a victim here.  They're being made responsible for the criminal activity of others.  They are being forced to do something both expensive and ineffective."  And here's this line I love.  He said:  "The Internet routes around censorship."  I just - I love that.  It does.  We've talked about packet routing.  Well, on a higher level, the Internet routes around censorship.  I think that's just a beautiful phrase.  And he said:  "How much damage are the rest of us supposed to endure because the publishers cannot figure out how to offer their products at a price both profitable to them and not so high as to create a black market."



Now, okay.  I would argue a little bit that the Internet creates so little friction in the area of piracy that it's not clear to me that you could have products which are both profitable sufficiently to support the expense of creating them, and also not so high as to create a black market.  I mean, it's just too easy and simple to steal bits on the Internet.  But I do love that phrase, "The Internet routes around censorship."



And the other editor, Liston, said:  "This all sounded somewhat reasonable up until the last sentence.  If the movie companies expect ISPs to block access to sites at their behest, then they really should be footing the bill.  They own the copyright.  They benefit financially from its protection.  So expecting a disinterested third party, the ISP, to cover the costs of implementing a block on infringing websites seems a bit over the top.  So anyway, I certainly agree with those things.  And it's a little troublesome that an ISP is being told, you have to prevent your customers from accessing this particular website.  A judge has ruled it, and they have to support the cost and provide the technology of doing so.



LEO:  [Disgusted sigh]



STEVE:  Yeah.  And, unfortunately, we talked a couple weeks ago about remote access to Medtronic insulin pumps.  You'll remember that, Leo, because your comment was at the time correct, which was that it didn't seem like it was that big a problem, and you had to be very close to them.  Well, turns out - this reminded me of Bruce Schneier's great quote, where he said, "Attacks never get worse.  They only get better."



LEO:  Oy.  The attackers only get smarter.



STEVE:  Exactly.



LEO:  They don't get dumber.



STEVE:  So a researcher who last year developed a method of taking control of ATMs so they would dispense cash at his behest, has now devised an attack that allows him to take control of certain wireless insulin pumps.  The attack could be used to deliver incorrect doses of insulin to patients.  The pumps in question, which are made by Medtronic, contain radio transmitters that allow doctor and patients to make adjustments.  With specialized equipment, the attack could be conducted at a distance of up to 300 feet and no longer requires the attacker to know the device's serial number.  The pumps at present do not use encryption while transmitting information.



So when we reported on this earlier, the distance was much lower, and you did need to know the serial number of the device.  Well, the attack has improved, and it's no longer necessary to know that.  And the distance has improved, as well.  And I remember that in one of our Q&As we got feedback from a user.  He and his son were both users of these devices.  And I'm just recalling this now, I think this might have been the Q&A that Tom and I did, Leo.  So I don't think it was you and me.  But what I remember coming out of that was that the great danger would be that a large dose of insulin could be dumped into the person's bloodstream.



LEO:  Could kill him, of course.



STEVE:  Exactly.  And it could have fatal consequences.  So I hope the security on these devices is fixed quickly; and that, if anyone has them, they may want to, I mean, our listeners, being security aware, may want to be at the front of the line for getting an improved device.



We've got troublesome legislation that's been submitted in the House of Representatives in the U.S.  There is now a bill that would increase the government's authority to shut down websites that offer products that violate copyright and trademark laws.  We've seen this sort of legislation being talked about before, but this is only last week.  Another bill has been introduced.  This proposed legislation would allow the Justice Department to obtain court orders requiring ISPs in the U.S. to stop resolving DNS for the offending websites.  The sites would still be accessible outside the U.S.  The bill would also allow the government to order search engines to remove certain websites from their results.



And what's really odd - and I don't understand what this means, and unfortunately things that are not well specified are always sources of trouble in the law.  It says the attorney general would also be granted the authority to block distribution of workarounds to allow access to blacklisted sites.  So our technical listeners - which would probably be pretty much everyone here who's been following along.



LEO:  Everyone who's still awake, yeah.



STEVE:  Yeah, we know that DNS prevents - blocking DNS prevents a user from resolving the domain name into the IP address.  So all you have to know, if you were a pirate who wanted to access these sites, is the IP address.  And you could use somebody else's DNS servers to get that, rather than using your own ISP's DNS servers.  And so it's - I don't know what it means for the attorney general to be granted the authority to block distribution of workarounds.  But, you know, that's worrisome.



LEO:  Doesn't sound good, yeah.



STEVE:  It does not sound good.  And Symantec also noted that they had seen a concerted attack against chemical and defense companies, with targeted attacks using a tool that they call "Nitro," which is based on a readily available Trojan known as Poison Ivy.  And these attacks are being launched largely at computers in the U.S. and the U.K. and Bangladesh, for some reason.  But there were 17 other countries targeted, as well.  And they're being launched through email attacks sent to IT departments at these targeted organizations, pretending to be requests for meetings or warnings about unpatched Adobe programs.  So unfortunately they're email that IT departments would tend to believe because who wouldn't believe something about Adobe.



LEO:  Yeah, of course.



STEVE:  And unfortunately these targeted attacks are infecting people with this Poison Ivy malware or trojan that allows people to gain backdoor remote access.



And a number of people in Twitter sent me this news.  You may have seen it also, Leo, that there is now a MAC OS X bitcoin mining malware.



LEO:  Yeah.



STEVE:  So it's malware known as DevilRobber, which has been detected on Mac OS X computers.  It makes its way onto computers by being bundled with Mac applications available on filesharing networks.  DevilRobber has several components.  It attempts to steal usernames and passwords; tries to steal users' bitcoin wallets, so if there's existing money, currency in the bitcoin wallet, it tries to steal that; and also hijacks computers' processing power to conduct bitcoin mining.  So anyway, that's also happened.  And I guess that was...



LEO:  Are you still hot on Bitcoin?  I mean, I think it's kind of over; isn't it?



STEVE:  Yeah, it is.



LEO:  I mean, it crashed, the market crashed for it.



STEVE:  Yeah.  I wouldn't say I was ever hot on it.  But I thought it was really interesting crypto technology.  And it was cryptographic stuff that we've studied and understand on the podcast, applied to something completely different than communications.  It was like, okay, we're going to make a currency, and make it secure.  And they really did.  They did the crypto right.  But it's all the other, all the social side of stuff that has been, of course, the problem.



And I did want to mention that I'm seeing backpedaling on this DuQu trojan.  Remember that we mentioned that there was a lot of fervor a couple weeks ago, saying that it was closely related to Stuxnet.  Now people are beginning to say, well, now we're not thinking that's so much the case.  It's turning up all over the place, all over the world.  So it is propagating, and it's getting itself around, although researchers are not yet clear about this thing's intentions.  So it's funny, as I wrote that note to myself, I thought, okay, what world are we living in where we're concerned about the intentions of something that's, like, loose on the Internet and operating autonomously.



LEO:  Oh.  It's the camel's nose in the tent, you know?



STEVE:  It does feel a little bit "Daemon"-like.



LEO:  Hmm, what are the intentions of that malware?



STEVE:  And so two things from the Twitterverse.  Matt Yakel sent - he said, "OK, SGgrc, you're right.  My Firefox 7.0.1 was about 800MB of RAM this morning.  I killed it and restarted, now 250MB.  Two minutes later it's up to 320."  And he did the #FAIL in his tweet.  And then along the same lines, Sean T., whose handle is @SeanT6, says, "Hi, Steve.  Try out Memory Fox.  It really works and reduces Firefox memory use.  It's at the Mozilla add-ons page.  And when I went over to get the actual name for this person who was using the handle SeanT6, and I saw that he was Sean T., I saw that he had also tweeted: "Testing Firefox 8, I can say Mozilla has awakened."  And I'm not really sure what he means by that, but then he continues, "But another add-on called Memory Fox has fixed the memory bug.  I need to load 100 tabs."  So, like me...



LEO:  Why, why, why?  Need or want?  Need or want, that's my question.



STEVE:  Yeah.  Sean is a tab user, the way I am.  And so I have hope.  I found Memory Fox.  I haven't checked to see whether it's compatible with my Firefox 3.something or other, because I went all the way back to 3 in order to protect myself.  I'm not sure what I'm going to do.  People said Firefox 7 fixed the problem.  Now we know from Matt that 7 did not fix it, that it's still got a problem.



LEO:  Can I ask you, though, I mean, we get, on the radio show, I get calls all the time.  "Oh, my gosh, my Windows has no memory free."  And modern operating systems are designed to let apps use all the memory they need as long as it's available.  I mean, why let - if you have a ton of memory, as we all do now, why let it sit fallow if an application can use it?  The key is not whether the application's using it, but whether it releases it when politely asked; right?  Or it's not needed.



STEVE:  Well, kind of.  I noticed, for example, that when I'm running IIS, Microsoft's Internet Server - I run a copy on my system here because I use it for developing websites and all of my JavaScript code and everything.  So, for example, at this moment the IIS process is using 5.8MB of memory, yet its virtual machine size is 260MB.  So what that means is that it has allowed itself to be moved out of memory.  It's actually, it's got a small little footprint in actual memory; yet most of it, again, it's like 6, little less than 6MB of actual memory being used.  But it's allocated 260MB, most of which has been swapped out and is sitting on the hard drive.  Which is really good behavior.  Firefox, on the other hand, right now, I'm looking at the memory stats, is using 271MB of my memory.  And I've got one, two, three, four, five, six, seven, eight, nine, 10, 11, 12, about 15 tabs open.



LEO:  But how much memory do you have?



STEVE:  280MB.



LEO:  Yeah, but wait a minute?  How much memory?



STEVE:  280MB.



LEO:  But how much RAM do you have?



STEVE:  4GB.



LEO:  Okay.



STEVE:  Yeah.



LEO:  Well, shouldn't it just use as much as it needs until somebody else needs it, and then release it?  I don't think paging, unless you need to page, is a good idea because that slows you down.



STEVE:  Well, okay.  But why is it, then, that I come in in the morning, and I'm getting a message saying that I'm out of, I'm completely out of all memory.



LEO:  That you don't want to see.



STEVE:  And Firefox is 1.5GB.



LEO:  That is a memory leak.  But I'm saying that people often will get upset because there's no free RAM.  But that is how modern operating systems work.  Programs allocate RAM as needed and then release it if other programs need it.  There's no reason to release it prematurely.  It slows down operations.  So if Firefox is prefetching a lot of pages or doing - I don't know what it's doing with all that memory.  But let's assume that it's doing something reasonable with that memory, as long as it releases it when it's needed.  But otherwise you've got 8GB just sitting there.  You want to use as much RAM as necessary, as long as there's free RAM when needed; right?



STEVE:  Well, there really is no "give us back the memory you're not using" API.



LEO:  Sure there is.



STEVE:  No, there isn't.  You can't ask an application to give up memory.



LEO:  Really?  I thought all modern operating systems...



STEVE:  No.  They're not elastic.



LEO:  Are you sure?



STEVE:  Oh, yeah.  They're not, I mean, so I've been programmed...



LEO:  Well, I'm not talking about malloc and calloc and all that stuff.  I mean - well, all right.  I may be wrong.



STEVE:  Yeah, there isn't a, hey, do you really need what you've got?  See, I think what...



LEO:  Well, I think that there's a way to mark the memory you've allocated as releasable.



STEVE:  Well, okay.  But that, yes, you're able to lock it in memory, or you're able to say - you can release it for the OS to swap it out.



LEO:  Right.



STEVE:  But the presumption is, when you access it, it'll be there.  So you can definitely page lock memory to keep it in active RAM.  Or it is much better behavior, and I think that I'm sure this is what you're thinking of, to let the memory that you don't actually need in real-time, sort of more like reference stuff, to be swapped out.  The problem is that, for example, 32-bit operating systems have an actual physical limitation of 4GB of allocation.  That is, that's what 32 bits can access.  So you really need - we really need to go to 64-bit OSes in order to get that much more memory.  But I guess I'm arguing that this kind of memory consumption for pages that scroll, called a browser, is ludicrous.  I mean, it represents a level of slop and waste and poor coding that is just egregious.  I mean, granted, browsers are doing a lot these days.  But 1.5GB is just crazy.



LEO:  I stand corrected.



STEVE:  Yeah.  They're just, they're - yeah, anyway.  I did want to mention, I had in my Miscellania to mention what I mentioned to you before the show, and that is, for those who are using Gmail, Google just released and the iTunes store just posted, but you said just pulled away, pulled back, a native Gmail app for iOS for the iPhone and the iPad.  I did get it on my phone because I had sucked it in, I guess, before they took it out.  But you said that they had just yanked it.



LEO:  Yeah, apparently Google yanked it because of a notification issue.  I see it's not there right now.  It'll be back.



STEVE:  Yup.  So, soon there will be a native Gmail app, which I think a lot of people will be really happy with.  And also in Miscellania I just sort of thought I would, as I'm tracking XP, the operating system I'm still happily using - and, by the way, we have 887 days of support remaining.  I saw a CNET story with the latest desktop operating system market share.  XP is still more than any other desktop operating system in the world at 48 percent.  Windows 7 is in second place at 35.  Vista at 9.  Mac OS X v10.6 has a 4 percent share; v10.7 has a 2 percent share; Linux a 1 percent share; and all others combined 2 percent.  So XP is still in the lead.



Microsoft, of course, is famously pushing companies away from XP, trying everything they can, talking about how insecure it is, and Windows 7 is much better and so forth.  But there's just so much resistance, mostly on corporations' part, to move.  They've got their IT departments who understand XP.  It does everything they need.  And that's my problem, too.  It does everything I need.  And I look at 7, and I think, well, okay, it's bigger, and I've got to fight with it to get a UI that I'm comfortable with and so forth.  So XP is still No. 1 at 48 percent, with Windows 7 in second place at 35. 



And I did want to share a short blurb from a nerd, a Nerd On Site nerd, who sent a nice note saying, "Steve, I have my own copy of SpinRite that I've been using on clients' machines.  I have on occasion suggested it to clients and other nerds," which of course I appreciate because that's how we sell more copies of SpinRite.  We're, as you know, Leo, we're relaxed about licensing.  I like people who are consultants to follow our consultants agreement, which says, if you have four copies, then you are free to use it on your clients' machines.



And the reason I sort of have it that way is that allows a person to get one copy, try it, see how they like it.  If they realize, hey, they're profiting a lot from their use of SpinRite, well, it'd be nice if GRC was, too.  And so if you maintain four copies, we call that either the consultant or the site license, meaning that a company that was using it on all of their machines to maintain their computers could also do so if they just keep four copies.



Anyway, going on, he says, "It's a nice tool to have along.  I've turned non-booting PCs into booting ones, and in one case a workstation on a domain with a bad sector in the user's local profile, which caused them to instead log in as a temporary new profile every time they tried.  SpinRite read and restored the data, and in a few minutes they were able to log back on into their original profile and could finish up while I sourced a replacement drive and then cloned it for them.  Thanks so much for a great product."  So thank you, Nerd.



LEO:  Yay.  Nerd On Site.  Already, Stevie.  Let's talk TCP.



STEVE:  Okay.  So everybody needs to close their eyes and put their propeller beanies on because this is really cool conceptual stuff.  So we have a network which, as we know from the How the Internet Works episodes we've done so far, exists sort of as a loose confederation of routers where we send data to destinations by addressing them with an IP address, and the routers along the way each forward the packets of data, the individual packets of data that they receive to the destination.



Now, the question that we haven't looked at yet - we understand about packets and IP addressing, about the TCP protocol that lives inside the IP protocol.  TCP adds the abstraction of a source and destination port, which it adds to the IP packet, which has the source and destination IP address.  We've talked about the need to number the bytes.  We use a synchronizing approach where a SYN packet is sent to establish the numbering that the sender will be using for the subsequent data that it sends.  The recipient of that sends back a SYN/ACK which is acknowledging the receipt of the SYN and also sending a SYN to establish its packet numbering.  So we've got the mechanism of data going back and forth.



What we haven't talked about yet is speed.  And speed is really tricky.  It's actually incredibly tricky, so much so that, even recently, researchers are still working on refinements and tweakings to the question of how do we make this system work robustly and give us as much speed as we can get.  Now, back before the Internet, this wasn't a question.  We would have a modem at each end, and it was the connection itself, the baud rate, as we called it, that established the rate at which the sender could squeeze data through the phone line to the other end.



And so the application would just dump a blob of data into a buffer on the modem and basically sit around twiddling its thumbs while the modem went [imitating modem sound], got that data, through audio tones of various levels of complexity, through to the other end.  So it was a matter of, like, just put as much data in the buffer and wait for that buffer to drain to the other end.



Well, that model isn't anything like what we have now.  Now we have this loosely connected network.  And imagine that a sender wants to send a big file.  And the problem is that the data needs to be packetized.  The packets need to be sent from the source to the destination over a set of links that we know nothing about.  We don't know how fast they are.  We know, we may know the speed of our own connection to our ISP.  We're buying a certain amount of bandwidth from our ISP.  But the data may go over a slower part, or there may be a router that it's passing through which is not functioning right or bogged down carrying a lot of traffic because it's a very centralized located popular router.  And so the router may be having trouble.



So when you think about it, this question of speed is a real dilemma because we may be able to send packets out at a speed faster than they are able to arrive.  And then there's the other question of what about the sender being able to receive them?  You and I, Leo, were just talking about buffer space in the operating system and not having enough memory.  So we also need some way of knowing that the sender can receive the data that we're sending.  The packets are coming in, whether the receiver wants them or not.  What if it doesn't have enough memory?  It's like, aagh, stop.



So the designers of TCP knew there were going to be all these problems.  And over time the approach has evolved.  But one of the first things that happened was a concept known as a "receive window."  TCP uses the term "window" sort of from a - just sort of as an abstraction for something going on that you need to watch.  So every acknowledgment for data received - remember that the ACK packets are coming back acknowledging the highest numbered byte which has been received so far.  So that if acknowledgments don't come back to the data that the sender has sent, the sender thinks, oh, well, maybe the recipient didn't get it.  It got lost in transit on the way.  Or it could have - the acknowledgment packet could have gotten lost in transit on the way back.  So the sender sends it again.



And so these acknowledgment packets acknowledge the highest numbered in order byte that has been received.  And I say it that way because remember the other thing that can happen is the Internet can deliver things out of sequence.  And if packets come in out of order, the receiver will hold ones that it wasn't quite expecting yet, hoping that the missing pieces get filled in.  But the way TCP protocol handles this is it only acknowledges the latest in-order packet.  That way, if one was missing in the middle, then that one would never get acknowledged.  The data that it contained would never get acknowledged, so the sender would know that one needs to get resent, even if it had already sent some other ones later on in the stream.  So as soon as that packet got received, then the recipient that was still holding the later packets could jump its acknowledgment way forward so that the later ones wouldn't have to get reset.  It's really very clever.  I mean, when you look at something basically simple, perfectly thought out, it's very clever.



So the question is, one question, is how much can we send?  Not how fast - we'll get to that in a second - but how much?  That question is answered by every acknowledgment which comes back to the sender containing a 16-bit field in the TCP header which is called the "TCP receive window."  And that's just the name of this 16-bit blob, this 16-bit data field.  And what that means is the value in that field is the amount of buffer space, the amount of received buffer that was available at the other end at the time the packet was sent.  So when that acknowledgment was sent, the acknowledger, who's receiving data and acknowledging it, says, okay.  At the moment I've got this much space available in my receive buffer.  So it sends that, along with the acknowledgment, to tell the sender that, as of - and think about it, that the acknowledgment also contains an acknowledgment of the highest numbered byte received.  So it has that and, at that time, how much receive buffer was available.



So again, just so cleverly, what those two pieces of information tell the sender, even if the sender has already sent additional data, because all of this is sort of happening asynchronously, it's all - we're wanting to keep everything moving.  So there is permission in the system for data to be sent ahead of being acknowledged.  And that's important because otherwise nothing would go very fast.  If we had to wait for every single packet we sent to get acknowledged, then our total bandwidth would be constrained by something called the "bandwidth delay product" of the network.  That is to say, we know that packets can be typically like 1500 bytes, which is the maximum size.  We have to subtract some from the header for the packet.  1440 is the typical size.  It's the number I was trying to remember a couple weeks ago, and I had...



LEO:  The MTU says it's 1500.  But after overhead, 1440 is what's...



STEVE:  Right.  MSS is the Maximum Segment Size, 1460.  Anyway, so imagine that we sent 1460 bytes, and they got there and then were acknowledged, and we couldn't or didn't send any more until they were acknowledged.  Well, so we would never be able to go fast because the roundtrip delay through the Internet of waiting for the acknowledgment of what we had sent would - and the fact that packets are of a certain limited maximum size - we would only be able to send the amount of a packet times the roundtrip time to get that packet acknowledged, which would really constrain the speed at which we could operate.



So the designers realized we had to make it possible to have data outgoing to a recipient in flight, essentially, and have that being in advance of acknowledgment.  The acknowledgments could be delayed.  And in fact senders don't even have to acknowledge every packet they send.  If data's coming in quickly enough, and it's been only a short time since the last acknowledgment was sent, the TCP protocol allows the sender to wait a few, get a few more packets, so that fewer acknowledgments are being sent, just in order to, again, further decongest the Internet overall.  So this receive window is extremely clever because, at the time that that acknowledgment is sent, the sender is saying I have received up to this much data from you, the sender.  And at that time I've got this much buffer space available.



So every acknowledgment that is received by the sender tells it, at the time that the receiver had received this much data, this much buffer was still available.  So that gives the sender permission, a kind of ongoing permission for how much data it absolutely knows it's able to send.  Now, naturally, as always seems to be the case, there have been some attacks which have some warpages, some abuse of something so cool as this facility.  So one interesting hack occurred to the hackers, and that is...



LEO:  They spend a lot of time thinking about this stuff.



STEVE:  Exactly.



LEO:  Constantly.



STEVE:  What would happen if we sent back an ACK packet that said zero, that is, with a window, a TCP receive window of zero, saying, hold on a second.  I don't have any buffer space available.  Stop sending.  And it turns out that, I mean, the system has to allow for that.  It has to allow that a recipient, I mean, who knows what the receiver is doing.  They may be spooling it off to a printer, or to mag tape in the old days, or waiting for something to happen.  And for whatever reason they just - there's nowhere they can put any more data that the sender wants to send.



So they send back an acknowledgment of what's been received with a receive window set to zero.  What that tells the sender is, stop.  There is no room available at the other end for your data, so you can't send any.  Now, TCP connections are full duplex, meaning that they inherently go in both directions.  They don't actually have to be, interestingly enough.  It's possible for, after the connection can be established, for one side to send a FIN packet and shut down the traffic in one direction.  That's sort of an unusual case, but the spec does allow for it.  But in normal case the TCP connection is full duplex.



So what happens is, if the receiver has sent an ACK packet saying I don't have anywhere to put anymore data, don't send it, then the sender has to stop.  It cannot send anymore data.  What it does is it sends something that's called a "window probe."  A window probe is an acknowledgment of the last byte number sent by the other end.  And what that does - oh, actually I'm wrong.  It's been a while since I actually wrote this stuff, because I have written all this.  The window probe is a deliberate mistake.  It sends one byte less than the last one.  It acknowledges one byte less, and that forces the other end to correct it.  That forces an acknowledgment packet to be sent by the other end, and every acknowledgement packet contains the current TCP receive window.



So this so-called "window probe" is a means for getting updated information on the availability of buffer space by the other end.  It's very clever.  It's a little bit of a hack itself, I mean, like a legitimate hack of the way the TCP protocol works.  But that's what our TCP stacks do.  If you tell it that you have no available buffer, then you'll find yourself receiving these little ACK packets because it kind of wants to tickle you to get an update for when you do have data available.



The reason hackers have found all of this useful is it is a very nice way of capturing bad guys, like creating a black hole or a honeypot, essentially, that worms will fall into.  If you've got a worm which is creating TCP connections, trying to scan the Internet, and it creates a connection to you, you can tell it, "Ah, hi there.  Happy to connect; but, by the way, I don't have any buffer space."  And what it does is it hangs the connection.  The other end really can't let go because there's stuff that they're trying to send to you, but you've said, I can't receive it just now.  Hold on.



And so very little bandwidth is consumed, yet we talked about the amount of resources consumed by every TCP connection.  A TCP connection is expensive in terms of all of the counters and timers and buffers that need to be allocated in order to manage that connection.  So with us doing almost nothing on the receiving end, we're able to get the worm to stall a connection.  And if lots of people were to do that, it's possible to bring worms to their knees because the connections can't get done what they need to, yet they still have to allocate statically all of the data required to manage that.



LEO:  Of course, it would bring them to their knees if they had knees.



STEVE:  If the worms had...



LEO:  Worms do not have knees.  I'm sorry, Steve, I have to point that out to you.



STEVE:  Do not have knees.  Thank you.  Glad you corrected me.  So now we understand how we manage the question of how much we can send.  That's with the receive window.  The second part of this is how fast can we send it?  Because nothing limits us, technically, except our own local connection to our ISP.  That is, whatever it is, the bandwidth we're purchasing, that's a constraint.  But we've got a long way to go, often, between we who are sending the data and where we're trying to get it to.  Maybe something along the way can't handle as much as we want to send.  How do we know?



So what TCP does is something called - it's called a "slow start."  And this slow start is one of the problems with the way browsers work in terms of us getting pages loaded quickly.  The problem is the TCP stack running in our computer doesn't know how fast it can send something.  Now, what we're often sending with a browser is just a little query, so it might just all fit in one packet.  And so the packet is a packet.  There's no way to send a packet slowly.  The granularity of the speed at which we send data is in the timing of our packets.  Although I guess you could send smaller packets if you wanted to, like, if you had less to send.



Normally, as I mentioned a couple weeks ago, packets are as large as they can be because we are trying to send as much data per packet as possible.  But the sender of our data, that is, the server we're making a query to, the query might be very small, but we might be asking for something big, a huge file, for example, or a very large and complex web page.  The connection in the other direction has to figure out how fast we're able to receive data.



Now, we know that, if we send data too fast, we can overload routers along the way.  And we also remember that routers have permission to drop packets.  That's part of this funky packet processing scheme, the whole packet orientation of the Internet.  Routers that cannot send data out of their outgoing interface because there's just too much, there's not enough bandwidth, like many incoming interfaces are receiving data that are all trying to go out the same one, for example.  Routers have the permission by decree, by design, to just drop packets that they can't send.  And remember, they never send us an indication because that would further increase a congestion problem.  So the designers said routers make a best effort to send the data; but when they can't, they drop them.



So what does that mean for us as a sender, trying to send data as quickly as we can, that is, with as high a packet rate as possible?  Well, it means we need to kind of creep up on it.  And that's what TCP does.  It means we just can't send the data as fast as we possibly can because something somewhere is going to collapse.  And, boy, if the whole Internet worked that way, if everybody on the Internet sent as much data as they possibly could, as fast as they could, nothing would work.  I mean, all the routers would be collapsing and having problems.



So by universal agreement, TCP being this very clever protocol, it does something called a "slow start."  It's generally given permission to send some number of packets without acknowledgment.  So the idea being, let's just get things moving here.  And typically that number is two.  And so when TCP starts, it can send two packets off, one after the other.  Without having the first one acknowledged, it'll send the second.  But then it waits.  And then the rule for throttling is we allow the number of unacknowledged packets to increase by one for every acknowledgment we receive.



So let's think about that.  We allow the number of unacknowledged packets to be increased by one for every acknowledgment we receive.  So we first send off two packets as our agreed-upon start.  They get acknowledged.  So we have our first acknowledgment.  We were allowing ourselves to send two.  Now, with the receipt of this first acknowledgment, we increase that by one to three.  So we can now send three more packets off without any further acknowledgment.  When an acknowledgment comes back for whatever we've sent before, we increase that to four.  This is known as the "congestion window."  It's not a window that's ever sent on the line, that is, it's not like the receive window, which is 16 bits of the TCP header that tells us how much data we're able to send ahead.  This one is - it's a window.  It's basically a counter maintained by the TCP stack for the purpose of avoiding connection, the idea being that at some point this is going to break.



If we keep increasing the number of unacknowledged packets we're allowed to send by one every time we receive an acknowledgment, at some point we're going to reach a limit.  And the beauty of this system is that it will, as we start trying to send packets faster than the weakest link, literally link, between routers, at some point we find the point where the weakest link breaks.  It drops the packets we're trying to send because we're trying to send them too fast.  So acknowledgments from the other end stop because the data is no longer getting through.



And what TCP does is, if it has failed to receive - and this varies in strategies.  Over time, the strategy, the actual congestion avoidance strategy has varied a lot.  There's names like Tahoe and Reno, and a whole bunch of other ones that you'll see if you do some Googling and Wikipediaing, which specific exactly what the behavior is.  But the idea is that, when the sender realizes that its data is no longer getting through because it's missing acknowledgments, it cuts back its sending rate quickly.  Typically, it divides it in half.  So it dramatically scales it back, and then goes back to increasing it.



So essentially what this means is that losing packets is the signaling function for "We can't send the data any faster," and that the TCP senders at each end of a connection, all over the Internet, are always sort of - they're trying to go faster than the maximum speed that is available between the two endpoints, that is, that weakest link, wherever that is, and they're always pushing it to the limit.  So given that there is a point somewhere that is weaker than their ability to send packets, they're going to find it because they will pump packets out.  As long as there's data to be sent and they've got a high bandwidth connection, the sender will increase the rate of sending, that is, the number of outstanding packets, the packets that are allowed to be out there on the fly as acknowledgments come back, aggressively keeps moving that number upwards until it pushes it too far.  Then it backs off a lot, and then again moves forward.



So this is what's actually going on between TCP connections which are, like, probably, I don't know what percentage, but the vastly greatest percentage of traffic on the Internet are over TCP connections.  All of our operating systems down in the kernel, in the so-called TCP stack, have these counters.  And when we're sending a file, when we're uploading a big file or we're receiving a web page, the server at the other end is doing the same thing.  It's pushing, on an individual connection basis, as many packets that have not yet been acknowledged out as it can, increasing the packet rate until it hits the point where it starts to fail or stutter.  Then it backs off, to sort of allow things to recover, and then starts working back up again.



And so that ends up being a sort of a self-throttling system which, given the constraints, I mean, it really seems kind of funky and crude.  And you'd think, well, gee, couldn't they come up with something better than this?  I mean, like, we go until we're going too fast, and we only know we're going too fast because the system starts to break, and then we back off, but start trying again.  So, and again, it's exactly because of this that networking engineers have for years thought, okay, can't we be smarter?  How about if we back off less?  How about if we back off adaptively?  How about if we have more memory than just this congestion window?  How about if we have more history?



All kinds of things have been done, trying to, like, find that sweet spot where we're sending data reliably and as quickly as we can, yet also sensitive to changes.  And remember that it's not like the connection between us and some local destination is also constant.  Routers are inherently, as when I'm receiving a web page, I'm getting a burst of data.  It's [sound], out it all comes, and here's the page.  Then I look at it for a while, click on a link, making another request, which creates another burst of data.  So there's these bursts that are happening in a web page model.  And certainly that's the case with images being downloaded and pages being displayed.  So it's all very burst-y, which means that, if anyone has ever sat in front of a phone system with lots of lines, you'll notice, I don't know why this is, but they all start to ring at the same time.  Have you ever noticed that, Leo? 



LEO:  Yeah, yeah.



STEVE:  It's like, it's weird.  I mean, it's the strangest thing.  Either I'm just noticing the pattern - but I've talked to people, and it's like they've noticed it, too.  And, like, receptionists have said it's the strangest thing.  It'll be just, like, quiet for a long time.



LEO:  And then all at once.



STEVE:  A line will ring, and then another one and another one.  And they don't seem in any way related.



LEO:  Life is burst-y.  Life is burst-y.



STEVE:  Yes.  And so you can imagine, here's the plight of this router that's sitting around, like with all this extra bandwidth to spare.  And suddenly all this data comes pouring into it that it's got to try to send out.  Well, it may not be able to.  So the state of the connection between endpoints is also varying with time because these packets are having to move across routers whose own traffic may be burst-y.  And what they were able to handle a minute ago, they're no longer able to handle now because there's another burst coming through some other interface.  So all of this has to be dynamic and adaptive.  And, amazingly, it works as well as it does.  It's just incredible.



And now that we know all this, in two weeks we can talk about SPDY.  We can talk about what Amazon - Amazon.  Well, yeah, what Amazon and the Kindle Fire are doing with their cloud-based browser enhancement which originated with the Chromium project, which is Google looking at how can we make the whole web faster.  And, boy, they have succeeded, like 58 percent improvement.



LEO:  Without changing underlying protocols, which is, I think, very interesting.



STEVE:  Yes, exactly.



LEO:  Yeah.  Well, I'm glad we got that out of the way.  So you say two weeks because next week we're going to do a Q&A.  We do feedbacks every mod 2 episode, so every even episode.  So if you have a question for Steve about this or any topic having to do with security, or science fiction, or eReaders - I think that's your portfolio - you go to...



STEVE:  Oh, by the way, I have to say, Leo, there was a wacky bit of blurb that a bunch of people tweeted me.  It turns out that, when you load an eReader full of books, it gets a little heavier.



LEO:  Yeah, I know.  Yeah, I saw that, too.



STEVE:  Oh, my god.



LEO:  Your joules weigh something.



STEVE:  10^-18 femtograms or something.  I mean, absolutely.  It's the electrons.  There's more electrons.



LEO:  You can calculate it.  There's more electrons.  You can calculate it.  We know the weight of the mass of an electron, and we can easily calculate.



STEVE:  They don't weigh very much.



LEO:  No, they don't.  But there's a lot of them.  So...



STEVE:  They do add up.  They do.



LEO:  Yes, to something.  Somewhat less than a thimbleful.  GRC.com/feedback for questions, suggestions, comments.  We'll go through a few of those next week.  GRC is a good place to go, of course, to find SpinRite, the world's best hard drive maintenance and recovery utility.



STEVE:  Yay.



LEO:  Yay.  All his wonderful tools, many of which, most of which, with actually the sole exception of SpinRite, are free.  Although there will be a new commercial product emerging soon from GRC.



STEVE:  I wish soon.  But started soon.  Started soon.  Yeah, I've got to get the Off The Grid project finished first.  And that's almost done, by the way.  It's all functional and working, as I told everybody it would be by this week.  It is.  After I let my newsgroup folks play with it, they came up with some really useful improvements to the UI, where it was a little - some things that I was assuming weren't really clear.  So I'm reengineering that.  But it's essentially done.  I'm going to have a few other web pages, related web pages to catch up on.  But it's there.



LEO:  Yay.  What else?  So there's lots of freebies on the site, plus 16KB versions.  Steve has both audio versions and transcriptions.  We have audio and video, not the transcriptions, not the 16KB versions at TWiT.tv.  And you can watch us do this show Wednesdays, 11:00 a.m. Pacific, 2:00 p.m. Eastern, that's 1800 UTC at live.twit.tv or TWiT.tv.  We keep both alive.  Either one will work.  I think that is everything I need to say.  Don't forget to sign up for the barbecue.  Click that banner at TWiT.tv for our Ford barbecue coming up on the 13th.  And Steve, I'll see you next time on Security Now!.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#326

DATE:		November 10, 2011

TITLE:		Listener Feedback #130

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-326.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode #326, recorded November 9th, 2011:  Your questions, Steve's answers, #130.



It's time for Security Now!, the show that protects you online.  And here's the man who's doing the protecting, Mr. Steve Gibson of the Gibson Research Corporation.  That sounds like a big enterprise, like you might have a tower downtown in L.A.



STEVE GIBSON:  I have a large name and a short domain name, GRC.com.  I love it when I...



LEO:  Yeah, you got it early.



STEVE:  Yeah, when we first got it - actually, we got ours within a month of Microsoft getting Microsoft.com.



LEO:  So that was, what, 1994, '95?



STEVE:  It was early.  I remember the disappointment that Gibson.com was not available.  But the guy that I had assigned to get us a domain name said, "But how about GRC?"  I said, "Oh, I'll take it."



LEO:  Let me do a whois on GRC.com because I think it would say...



STEVE:  Oh, yeah, it does.  First registered...



LEO:  First registered.  It must be - if it was that early, it must be '94, '95.  Record created 1991.  Steve Gibson.  You were an early mover.  There was no Internet in 19...



STEVE:  I wasn't sure what I was going to do with it.  But I had one.



LEO:  No kidding.  So, I mean, the World Wide Web, which of course this dotcom address was useful for, was created in 1989, and its first demo was, like, 1990.  So you were literally, you were right at the beginning there.



STEVE:  Well, and we primarily used it for email.  It was our email gateway.  We used some funky - we were using cc:Mail was the client, and some funky gateway that we dialed up to, which was like a store-and-forward thing in San Jose or something.  And it's, like, weird.  But, yep, I was there, got GRC.com.  It's funny, too, because sometimes people send me email:  "Hi, would you be interested in selling your domain name?  Because we like it."  And then it's like, uh, no.



LEO:  Well, we were talking about this on the radio show over the weekend because somebody called up, said "I have a three-letter domain name, and I'm wondering, how would I go about selling it?"  I said, well, it's probably worth quite a bit because I don't think there are any more three-letter combinations available even.  I mean, maybe there are.  But mostly I would guess they're all owned by somebody who perhaps would sell them.  And GRC is one of them.  But I think GRC is a little less value than SEX or something like that.



STEVE:  Yeah.  Speaking of which, the Triple X top-level domain is moving forward.  There's some sort of a - you now can, if you're involved in the XXX-rated industry,  you can petition with, not ISPs, with registrars using your trademark rights to get the second-level domain under the .xxx domain and begin to move that.  Oh, and if there's competition for the same one, then there will be an auction to decide who gets it.  So they're trying to do this thing right.  And someone's going to make a lot of money, I imagine.



LEO:  When we had this conversation, I was referred by somebody in the chatroom to Domain Name Journal, DNJournal.com, where they list the year-to-date top-selling domain name prices.



STEVE:  Ooh.



LEO:  The No. 1 was sold in July of this year, was Social.com.  You want to hazard a guess as to what Social.com was worth?  $2.6 million.  DomainName.com, $1 million.  But...



STEVE:  DomainName.com?



LEO:  I think - I don't know if they're really worth that.  Gay.xxx, half a million dollars.  Look.com, $400,000.  And then numbers are popular:  11.com was more than half a million dollars; 33.com, $358,000.  So SUV.com, that's one of the three-letter domain names that's worth something.  See, GRC, I don't know who that would be worth - it's worth more to you than anybody probably else.  But SUV sold for $210,000.



STEVE:  Wow.



LEO:  I know.  It's kind of a hot market right now.  And there you go.  Okay, enough of that.  We have important things to talk about, thanks to Steve.  We've got security news.  We've got security updates.  And this is a Q&A episode, so we've got...



STEVE:  Yeah, we have a bunch of news, enough that I'm not going to go in super detail on any of it, just sort of hit the high points so people know what's going on.  We did have a - we are past a second Tuesday of the month with two very important Microsoft-related problems.  A bad problem that's been discovered, a zero-day kernel exploit, which is one of the ways the Duqu worm is propagating.  I tweeted about a Fixit patch that we'll be talking about.  And also there's a new remote code execution vulnerability using UDP packets.  And a bunch of other information, and a Q&A.  So lots of good stuff.



LEO:  You know, I should mention we had another exploit on our website this weekend.



STEVE:  It's actually in my notes was to ask you if something had crawled into your servers again.



LEO:  Do you mind moving that up, and I'll explain it, and then we can get on with the updates and everything?



STEVE:  Yeah, do, do.



LEO:  So any time you put new code in - and we're running a Drupal install on TWiT.tv - it's I think really important to make sure that when you put that new code in - and Drupal mostly works through modules.  So we added - I think we added an RSS module.  And it had an exploit on it.  And I don't know - we're working now very closely with our sysadmins, who are great - Mike Taylor (Bear), and Chris Dieterle - and with IMAGEX Media, who does the web design.  And IMAGEX put something new in, and it was immediately exploited.  Which just shows you that there are people hammering on our system all the time.  All the time.



And, I mean, literally, within minutes of it being implemented, they used it to embed a JavaScript exploit that - it's the same Java, I believe, my sense is it's the same Java, old Java exploit that they were trying to put on people's systems.  So you weren't vulnerable if you've been listening to this show and you've been updating Java.  You'd have to have a very old version of Java on your system for this to even be a risk to you.



But what I really like is within, I don't know, an hour of this exploit being put on our system, Internet Explorer and Chrome both started warning people.  Google is so good about, well, first of all, they keep us pretty indexed, I imagine.  And so their crawler's always looking at our stuff.  If I look at my logs, the Google crawler is always in there.  They're just constantly crawling us.  And I'm sure that's true of any large site.  So they immediately flagged it because they see the malicious code.  So I don't think anybody got bit.  I hope nobody got bit.  And we, of course, since that malicious code warning comes up, I get flooded with email.  Thank you, everybody.  I mean, if I didn't respond to you, I apologize because we got a lot of messages.  But I do appreciate people letting us know that.  And we got our...



STEVE:  Well, and from your perspective this probably gives you a better sense, relative to this podcast, of just how difficult it is these days to have a complex, multifaceted, interactive, social, I mean, dynamic site that has to be perfect.  If there's a little mistake, that's all it takes.



LEO:  That's right.  That's exactly right.



STEVE:  Something will crawl in.



LEO:  Whew.  So we fixed it, and we have implemented - you know I say this every time.  This is, I think, the second or third time this has happened.  We've implemented, of course, new procedures to try to keep this from happening again.  But it is very difficult because there are exploits, and it's PHP code, I mean, there are exploits everywhere.  And it's hard to put something in production that you can say absolutely is bulletproof.



STEVE:  And even if there are not mistakes made, there are unintended consequences of the interaction of things.  I mean, technically, allowing SQL commands to be interpreted by the server is not a mistake.  But it is exploitable if a bad guy realizes that, when the server displays a page, it's going to run through the SQL interpreter, so they can post to a forum code that they want executed when their posting is displayed.  I mean, so that it wasn't a bug anywhere.  It was just a bad idea.  I mean, it was something that was convenient, I mean, just as all get-out, super convenient from an implementation standpoint.  But, whoops, it was abusable.  There was a way to abuse that.



And it's just so difficult these days, as our systems become multiple layered.  Authoring is coming from every different direction.  Individual authors have different sets of expectations and assumptions which, if they don't match up, and you put these things together, clever people can find a way through.  So, I mean, it really is a challenge.



LEO:  Boy, I'll tell you.  It makes me feel terrible.  I mean, I hate to have that happen.  And it's embarrassing; but I also just, I mean, more than the embarrassment I just feel bad because I don't want anybody to get bit by visiting our site.  So I'm really actually very grateful that Google and IE flag you so quickly.  I think that's really good.  But it is a big issue.  This was not an SQL exploit.  I believe, believe it or not, it was another JavaScript issue.  But I'm not sure exactly how it happened.



STEVE:  Yup, scripting.  You know how I feel about scripting, Leo.  We don't have to go any further than that.



LEO:  Anyway, so there's that story.  And again, I apologize.  And you'd think we'd know better, but it's so difficult to do.  But I think we've put in new - I think part of the problem is IMAGEX, which is a great Drupal company, is not used to working with a site that is, like ours, under attack 24/7.  And I think they just really didn't realize.



STEVE:  Well, and I don't know that it's a responsibility that you and the TWiT crew really ought to accept responsibility for.  You are going to be using - almost no one is writing all the code themselves from scratch.  Like me.  But that's probably it.  And it's just not feasible.  To compete today, you have to be able to take modules from different places and just say, oh, this is a Drupal module.  We want to add that service.  Drop it in.  Well, and we've seen, it's not practical to imagine you can audit it because...



LEO:  You can't.  You can't.



STEVE:  ...even people who know what they're doing read the code, and they go, oh, yeah, that looks fine.  Until it doesn't.  But all you can do is what you have always done, which is respond immediately and fix the problem.  I mean, that's all anyone really can ask of anyone, you or any other group.  So...



LEO:  Thank you.  But I feel the - I just - I feel bad.  It shouldn't happen.  But we're going to do our best.  So, and then, by the way, it does make me feel better that it happens to everybody, including Microsoft.  A zero-day kernel exploit?  Holy cow.



STEVE:  Yeah.  So in examining what Duqu was doing, and this is this sort of maybe it's related to Stuxnet.  No one's really sure.  There's now a question about whether there's actually any common authorship involved.  Initially people said, oh, look, it's derived from the source code.  It's like, well, maybe not.  So, but in analyzing it, they saw it doing something, that is, propagating in a way that they had never seen before.  And what it turns out was that it was using a previously unknown, which is to say zero-day, Microsoft Windows kernel flaw, which the authors of this worm obviously knew about.  It's in the parsing of TrueType fonts.



And somebody, when this news broke, I saw a tweet that came to me and said, okay, and why are TrueType fonts being processed and parsed in the kernel?  It's like, yes, I know, I know.  It was a decision Microsoft made a while ago in the name of performance, back when Windows was still too sluggish, and we didn't have chips that were fast enough.  And so Microsoft moved GDI, the Graphics Device Interface, into the kernel.  The proper architecture, the original architecture was to make that run outside as a subsystem.  And Microsoft could not resist the temptation of moving it down into the kernel.  And we've seen a series of problems that have resulted.



And you and I talk about these things sort of from a theoretical standpoint.  But when we're talking about the Duqu worm, using this as an example, to propagate, I mean, these are machines that are actually being infected by this.  So this is not - sure, it's an inconvenience for those of us who are not infected.  We've got to update Windows and patch and so forth.  But, I mean, it really does represent a problem when these things end up being the entry vector for malicious code into people's machines.



Now, this has happened so quickly that Microsoft has not been able to respond.  This has not been fixed in yesterday's, that is to say the second Tuesday of the month's patch.  A different bad problem was fixed.  This one hasn't been.  So I tweeted, as soon as Microsoft produced one of their single-click Fixits, I tweeted that to the - I think I have about 26,000 followers now, and I saw that it was heavily retweeted.  This is a way of essentially denying access to one DLL.  The DLL is t2embed.dll.  And so people could go to either my - look at my Twitter feed, where it's still right there at the top, so that's Twitter.com/SGgrc.  And you will see that and a few other things that I've been tweeting recently.  So anyone with a web browser can do that.  You don't have to be a subscriber to Twitter or anything.  Just Twitter.com/SGgrc.  And that contains a link to support.microsoft.com/kb/2639658.  And that's the page with the one-click Fixit.



Now, there are some command line options which can be used.  But they vary depending upon what version of operating system and what service pack and everything.  So it's just easier to let this little Microsoft one-click Fixit solution go.  And I would suggest, since we don't know whether Microsoft will do an out-of-cycle patch, this is bad enough I will be surprised if they don't.  I can't imagine they're going to wait until December's Patch Tuesday for this because this is not good.  This is being actively exploited by a worm which is having its way with Windows right now.  So I expect we'll see an out-of-cycle patch, but we don't know when.



So people listening to this podcast can simply follow those links, click a button, and it will - basically this shuts down access to a DLL that we don't need.  It's there.  It offers some features.  It involves embedding of TrueType fonts.  There's both a Word file exploit and a web-based exploit.  So Microsoft, in their executive summary, they said, "Microsoft is investigating a vulnerability in a Microsoft Windows component, the Win32k TrueType font parsing engine.  An attacker who successfully exploited this vulnerability could run arbitrary code in the kernel.  The attacker could then install programs; view, change or delete data; or create new accounts with full user rights.  We are aware of targeted attacks that try to use the reported vulnerability.  Overall, we see low customer impact at this time.  This vulnerability is related to the Duqu malware."



And then in mitigating factors they said, "By default, all supported versions of Microsoft Outlook, Microsoft Outlook Express, and Windows Mail open HTML email messages in the restricted sites zone, which disables font download by default.  If a user clicks a link in an email message, the user could still be vulnerable to exploitation of this vulnerability through the web-based attack scenario."  So Microsoft recognizes the problem.  I think they have to be working on getting this thing fixed quickly.  But there is a way for us all to protect ourselves in the meantime.



What they did fix, I think there were four updates in yesterday's, that is to say, November 8th, which is the second Tuesday of the month, Windows patch.  And the security community is telling everyone, do not be slow in updating Windows.  There was one very bad problem, and surprising.  It fits in with what we've been talking about with Internets and packets and UDP and TCP and so forth.  This is not being taken advantage of, exploited, in the wild yet.  So this was a privately reported vulnerability which Microsoft says, ooh, crap, let's get this thing fixed right now.



LEO:  Did they really say that, "Ooh"?



STEVE:  I think somewhere.  Believe me...



LEO:  Somebody said that.



STEVE:  ...probably more than that, even.  I clean it up for the podcast.  They said, quoting Microsoft, "This security update resolves a privately reported vulnerability in Microsoft Windows.  The vulnerability could allow remote code execution if an attacker sends" - get this, Leo - "a continuous flow of specially crafted UDP packets to a closed port on a target system."  So that's freaky.  I mean, that's just - you would think...



LEO:  Closed should just bounce off.



STEVE:  Exactly.  It ought to have no effect whatsoever if a UDP packet hits Windows.  And apparently the Windows firewall is no protection.



LEO:  Oh, dear.



STEVE:  Yes.  They said, "The security update addresses the vulnerability by modifying the way that the Windows TCP/IP stack keeps track of UDP packets within memory."  And again, you'd think, okay.  But, okay.  So the fact is the packet's going to come into the machine and affect things.  It's going to bounce around.  It's going to do something until the system decides that there's nowhere for it to go, that is, there's some processing upstream of that port is being - that port is closed.  For example, certainly there's a list of ports that are open.  And so something's got to rifle through that list.  So there's got to be list pointers that are being followed and so forth.  So we're able to sort of stand back and say, well, the port's closed.  How could it go anywhere?  Well, how did it know it was closed?  So some work was done when that packet came in.  And that must be where this problem is.



So they said, "For more specific information about the vulnerability, see the FAQ subsection for the specific vulnerability entry under the next section."  And it didn't say much.  But it said, "An attacker could exploit this vulnerability by setting a continuous flow of specially crafted UDP packets to a closed port on the target system."  For workarounds it said, "Block unused UDP ports at the perimeter firewall."  Meaning like an Astaro...



LEO:  The NAT router.



STEVE:  An Astaro sort of thing.  



LEO:  Or an Astaro box, yeah.  Well, that answers the question because one of our chat people said, "Well, does  this affect your router?"  But, no.  It's a Windows exploit.



STEVE:  Correct.  And they said, "Blocking unused (closed) UDP ports at the perimeter firewall helps protect systems that are behind that firewall from attempts to exploit this vulnerability."  So...



LEO:  How bizarre, though.  I mean, I don't get it.



STEVE:  I know.



LEO:  It's not supposed to, if it's a closed port - you've been saying stealth your ports.  Is stealth port, would that be - I guess you can't really stealth in Windows, can you.



STEVE:  Windows does some stealthing.  I'm a little rusty on what they...



LEO:  Or their firewall does.



STEVE:  ...stealth versus block.  But, yeah, the firewall does.  But it is the case that the port, the packet data is going to come into the interface and go into the stack in the kernel, and somebody has to decide to drop it.  So it's something about - I saw something about a sequence counter or a sequence count or a state or something.  So anyway, Microsoft's not talking about this.  But this was fixed in today's, or in yesterday's, updates.



So in general, sometimes these are not very interesting fixes that Microsoft does.  They go around with 29 of them in Word or Excel or something.  But this is expected to be exploited before long.  And your router will protect you.  But your Windows firewall won't.  And you don't want this thing to be left open.  Oh, and XP is not vulnerable, Leo.



LEO:  Just the newer ones.



STEVE:  Every other one, from Vista on.  This was something that they introduced at that...



LEO:  Remember we talked a lot about when - you were worried when they rewrote the TCP/IP stack from scratch that this kind of thing would sneak in.



STEVE:  Yup.  And early on we talked about some longstanding old problems that have been solved that came back because that's just going to happen.  So, ha ha ha, Adobe...



LEO:  Yes, go ahead.  I like that.  Ha ha ha.  Ha ha ha.



STEVE:  ...formally abandoned Flash...



LEO:  Yes, thank god.



STEVE:  ...on mobile devices.



LEO:  Oh, yeah, by the way, very important, that last clause.  I interrupted.  On mobile devices.



STEVE:  Yes.  It is a little bit of a shame that Steve Jobs isn't still here with us to see his victory because you could argue that it's the iOS, the absolute refusal of iOS to support it.  They're going to finish out with v11.1 for Android and BlackBerry PlayBook devices.  But that's it.  And the day before that was announced, they announced a 7 percent global workforce cut.  They are eliminating 750 jobs...



LEO:  Oh, dear.  Oh, dear.



STEVE:  ...from their global workforce.  And this morning the Adobe stock was down 12 percent at market open.



LEO:  Yeah.  Oh, dear.



STEVE:  So, yeah.  It's tough.  Adobe said they agree HTML5, which is what Apple has always been saying, is the proper solution for things like just displaying video.  If all you want to do is, if you're YouTube, all you want to do is display video, you just don't need all of the everything else that Flash is.  And it's everything else that it is that causes all these problems because it is, it's a very powerful interpretive environment which has been nice and portable and multiplatform and evolving over time.  But as we know, it's very hard to do security right.  And so Adobe's just going to give up on it for mobile devices.



LEO:  Wow.  Wow.



STEVE:  Newzbin, we talked about last week, was the site that had been asked by the MPAA, or, well, it was the site that the MPAA was requiring BT, British Telecom, to start blocking for their users.  And I saw a little blurb that said that Newzbin was saying that almost all of their users are already using a workaround that renders whatever it is that BT is doing ineffective.  And I did a little more research, because I was curious, and BT is just using apparently a relatively simple to work around technology called Cleanfeed, which they had already had in place to block child abuse sites.  So essentially BT just added Newzbin to their existing site block list and said, okay, fine, we've complied with the court order, knowing full well that Newzbin users since the fall have had some technology that just avoids this Cleanfeed thing, whatever it is.



And then, on the heels of that, another music industry trade group, BPI, has now asked BT to block access to the Pirate Bay and have threatened legal action if they don't immediately do so.  I think they gave them a few weeks to do that.  So I'm not sure where this is going to lead.  It's going to be interesting to see because we have this question of, is it the ISP's responsibility to arbitrarily be compelled to block access to sites that industry trade groups would rather not be on the Internet?  I mean, we're seeing an evolution here in thinking about whose responsibility this is.



LEO:  Very interesting.



STEVE:  Yeah.  Many people tweeted the news that on November 4th LastPass updated to v1.80.0 and added multifactor support, courtesy of the Google Authenticator.  We talked about Google releasing a free and open source authentication system which Google supports on Android, iOS, and BlackBerry devices.  But there's third-party support, because it is open source and anybody can support it, for Windows Phone, webOS, and Symbian.  So it's got very good across-the-board support.  And of course we like multifactor.  Multifactor is good.  The more factors you can have for authenticating, as long as it's not too burdensome, the better.  So I did want to let anyone who hadn't picked up the news that Google Authenticator was available.



What that means, of course, is when you are proving to LastPass that it's you, for example, you went to a browser that you wanted to use LastPass to help you log in on, and you needed to tell the browser and convince the browser and LastPass itself that this is you, you would have to provide additional authentication beyond just your account name and password.  You'd need to use the Google Authenticator, which uses - and we'll talk about this in our Q&A a little bit, this comes up again - the technology, the specific technology that they're using.  But it's very much like the original time-based football that you and I discovered, Leo, the little PayPal football with the six-digit code that is varying constantly.  And I've got the VeriSign Authenticator loaded in my BlackBerry, and it's the same thing, a six-digit code with a little clock that shows you how much longer that code will be valid, and then it changes.  So anyway, anybody using LastPass can update to 1.80.0.



LEO:  I think it does it automatically in most cases, doesn't it?  Yeah.



STEVE:  Yeah.  And we've had some more news and trouble over the certificate authority world.  Mozilla, Microsoft and Google all together moved to remove a Malaysian intermediate CA from their browsers.  So remember we've talked about certificate authorities.  The root, the so-called "root certificate authorities" are the big guys like  VeriSign and Entrust and DigiCert and so forth.  And their certificates are what our browsers trust and all contain.  It's possible for an intermediate certificate authority to be granted their ability to issue certificates by a root authority.



And so, for example, in this case this Malaysian intermediate CA was found to be issuing bad certificates.  Not fraudulent, but they had weak keys, and they had some parameters missing.  It was like their technology was behind the times, or it had been misconfigured, or maybe something got into their systems and deliberately weakened the certificates that they were producing.  We're not really sure what the back story is.  But their certificate was signed by the Texas-based company Entrust.



And so, because this Malaysian certificate authority was found to be issuing certificates that the browsers did not feel was secure enough, they've been prevented from doing that.  And a Dutch telecommunications certificate authority, KPN, has stopped issuing certificates when they discovered that the web servers which they were using as the front end for processing these certificates had been compromised, perhaps as long as four years ago.



LEO:  Whoa.



STEVE:  Yeah.  So it's like, whoops.  Okay, we're not going to issue any more until we figure out what's been going on and how big a problem this is.



LEO:  If a compromise happens in the forest, and there's no one there to observe it.  I mean, really, it's been going on for four years and nobody ever noticed.  I mean, I don't know what that means.  It sounds like...



STEVE:  Yeah, well, they don't know.  They don't know that any bad certs were issued.  They just realized that there was - malware had been installed in the systems.  And these guys are doing the right thing.  This is as responsible as you can be.  You'd rather not have anything in your server.  But if it is, then you say, okay, whoops.  And the only way the world knows is that they said, okay, we're going to stop issuing certs now because we have to figure out what this means.  Which is all anyone could ask of them.  They're absolutely behaving responsibly.



And I did pick up a little security news that Apple has postponed their enforcement of app sandboxing, iOS app sandboxing.  So Touch, Phone, and iPad.  It was going to go into effect around now, but they're moving it back to March 1st and then saying we're not moving it again.  Now, the problem is that this is - it's a mixed blessing.  It is an enhancement to the security of iOS and of all iOS apps at the inevitable cost of features.  So developers are not happy and have not been implementing Apple's sandboxing because it is restricting.  It's restrictive and restricting some things that they would like to be able to do, reaching out of their own file system zone in order to...



LEO:  It's actually, Steve, it's worse than you think.



STEVE:  Okay.



LEO:  It's not iOS, it's the desktop.  They're talking about all apps sold in the Mac App Store.  And I understand your confusion because you don't use an iPhone.



STEVE:  No.



LEO:  They're not talking about iOS.  That's already implemented.  They're talking about in the App Store for desktops.  So it's really kind of a shocker.  And it's something I'd actually been worried about for some time because, while you can still, and always probably will be able to - well, I shouldn't say always - for the time being be able to sell apps outside the App Store, there's so much convenience and value to buying apps in the App Store that I think a lot of users have moved to the App Store.  So what Apple's now saying, they've said all along no demos, no betas.  What Apple is now saying is, if you want to...



STEVE:  I'm stunned.



LEO:  I'm stunned, too.  If you want to sell apps in the App Store on the desktop, your apps must be sandboxed.  We've talked about this on MacBreak Weekly.  I think the iOS-ification of the desktop is where Apple's headed.



STEVE:  Ah.



LEO:  Yeah.  And so what they would like - and you're a security expert.  I mean, there's certainly security value to doing this.



STEVE:  Oh, yeah, as I said, with the inevitable loss of features.  Now I'm stunned.



LEO:  Can you imagine an application that cannot write to the file system?



STEVE:  Holy moly.  



LEO:  I truly believe that Apple's intent is to get everybody using its desktop computers to essentially be in an iOS-style state.  It will be undoubtedly secure.  And I don't, at some point, I don't understand how the transition's going to occur because of course you can still - I can buy an app that can write to the file system and for the time being will continue to.  At some point, for this to make any sense, Apple's going to have to turn that feature off and say, just as on iOS, you must buy from the App Store, unless you jailbreak it.



STEVE:  So maybe they're - okay.  So...



LEO:  Yeah, now you've got to think about this, don't you.



STEVE:  Whoa.  Mac OS X apps, which I buy from the...



LEO:  From the App Store.



STEVE:  ...from the Apple App Store...



LEO:  Right, will be sandboxed as of March.



STEVE:  ...as of March 1st, will enforce sandboxing.



LEO:  Yes.



STEVE:  So for a while the user will have a choice.  They'll be able to say, well, everything I'm hearing says that the apps that I buy from the Mac App Store are safer.



LEO:  They're secure.



STEVE:  They're more secure...



LEO:  They may be a little inconvenient...



STEVE:  ...because of whatever.



LEO:  ...but they're more secure.



STEVE:  Wow.



LEO:  Now, my suspicion is that Apple's apps will not have to be sandboxed.  So what I'm suspecting - here's what I think will happen.  I don't - and they may back down on this.



STEVE:  Are these toy apps?  I mean, these things...



LEO:  No.  No.



STEVE:  They're not toys?



LEO:  Final Cut Pro 10...



STEVE:  No, that's not a toy.



LEO:  ...is sold in the App Store.  In fact, that's going - right now you can still buy a disk, but that's only - that was they bowed to pressure on that one.



STEVE:  Well, you can't have Final Cut Pro unable to reach out of its own little...



LEO:  Am I wrong?  If you sandbox, does that not mean that you cannot write to the file system?  Isn't that what that means?



STEVE:  Well, I will know next week.



LEO:  I think what's really happening, and I think - now, with Steve gone, this may change.  There are already some changes happening.  And I think that this was a Steve.  But with Steve gone, some of this is up in the air.  But here's what I think they were headed towards:  making, essentially making - and by the way, Microsoft's kind of doing the same thing with Windows 8 - making the desktop essentially an iOS, which is more secure, more controlled.  I suspect Apple's apps, just as on the iOS, Apple's apps can do things that other people can't, because we trust ourselves, I suspect that what this does is pushes you - and Apple's always wanted this - into Apple apps.  Apple would like you to buy only Apple apps for...



STEVE:  But they don't have, I mean...



LEO:  They do.



STEVE:  They don't even begin to have the breadth of what today's desktop has.



LEO:  No, of course not.  But they have office suites.  They have the bulk of it.  When they started creating iLife...



STEVE:  And it comes with so much.



LEO:  And it comes with it.  And it's very inexpensive.  I don't, you know, who knows what this is.  It's nuts.  I think what will happen is that people who want a full operating system will have to migrate somewhere else.



STEVE:  I was going to say that.  I was going to say that, if this continues, then this really changes the terrain, where these mainstream, high-volume, consumer OSes become closed systems, and Linux for the first time really starts to look like the place where the hackers...



LEO:  If you want to do anything, yeah.



STEVE:  ...and the power users live, yeah.



LEO:  Now, Knox Harrington says, well, wait a minute, isn't Chrome sandboxed?  It is.  I mean, tabs within Chrome are sandboxed.  But that doesn't mean the app is sandboxed; right?  The app can...



STEVE:  Well, and a browser is not trying to be Final Cut Pro.  It's just - it's a viewer into things, basically, with the ability to send some stuff back to the mothership.  But, wow.  Wow.  And I'm looking at my little line I quoted here:  "Developers fear loss of useful features" [choking].



LEO:  On the desktop.



STEVE:  You think?  You think?



LEO:  But they look at the success of the iPad.  And the iPad is really the computer for the rest of us.  And I think what they say is, well, the rest of us want a desktop operating system that's...



STEVE:  Well, some of them would like a keyboard also.  So we're going to give you the - we're going to call it the iPad with a keyboard is your Macintosh.



LEO:  So the idea is to minimize the damage the application could cause if it were malware or were compromised by malware.  So that makes sense.



STEVE:  Precisely, the idea being that within the sandbox applications are - they're given, I mean, I understand a little bit how it works on iOS.  You have this - because I looked and remember when iOS was beginning to happen, we talked about it.  There's a sort of a pseudorandomly generated directory leaf off of the file system, and all of this is opaque.  The application doesn't get a file system.  It doesn't see a root.  It doesn't see a hierarchy.  It just sort of sees, here's your spot.  Good luck with it.  



LEO:  Now, the question is also how Apple implements sandboxing.  We're interpreting it in the most draconian, strictest form.  And I'm looking at what they do right now in OS X Lion, and they do allow an app, for instance, to write to the hard drive.  But they have to go through Apple's dialogue box to do so.  They can't examine other people's files.  In other words, it's almost like application-based permissions.



STEVE:  Yes.  I'm looking at something here, it says, "To then meet the program's needs, the developer includes a sandbox rule called an 'entitlement.'  That allows the program to access the needed resource defined in that entitlement.  The entitlements are managed by Apple, and thereby allow Apple to centralize how sandboxed programs can access resources in OS X."



LEO:  So I imagine Apple will not make it the most draconian possible sandboxing, at least initially.



STEVE:  Right.  Says, "The developer can add as many entitlements as he wishes to give his program as much system access as is necessary.  However, the idea is the developer only enables the entitlements that are needed to allow its program to run."  So that's interesting.  What this creates is, it's like having a firewall between the API of the OS and your application.



LEO:  Right.  And the API controls access.



STEVE:  Yes.  Well, normally the API is everything.  And so an application can use the OS's API to do anything it wants.  But now imagine that we deliberately impose a layer between the application and the operating system's API, like a firewall.



LEO:  And require you to use it.



STEVE:  And require you to use it.  And it's like ports.  In the same way that a firewall, you can open ports through a firewall, you would be able to specify which aspects of the API your application needs.  And the idea would be that that would be as minimal a specification as possible to create insulation between your application and the operating system if something should go wrong with your application.  If it should get infected or made malicious, anything that got in there, into your application, would be unable to alter those entitlements, which were defined for the app, and so could not access areas of the OS on an ad hoc basis.  So that's what we're talking about.



LEO:  Yeah.  I think what'll happen is Apple understands that people will rebel against this.  You know, it's interesting.  There's a good article on this on Ars Technica, who interviews two different developers.  Rich Siegel, who does Bare Bones Software, he does BBEdit, says this is going to be fine.  Most of our apps will be okay.  We'll just go through the API.  But then they also talked to Panic, which does a really great FTP program called Transmit.  And they say this will break.  We can't do it.  This will break it.



So, and I think that also what'll happen is Apple will interpret this liberally, will provide a liberal API.  But there's no guarantee they won't continue to shrink capabilities and so forth.  And there's also a debate in the security world about whether this will have a benefit in terms of security.  So it's a really interesting debate.  It's a shocker, to be honest.  And it's not getting a lot of coverage.  I could see your jaw drop when I said, no, no, this is the desktop they're talking about.  Yeah.



STEVE:  Yeah.



LEO:  It's very interesting, isn't it.  And, you know, only Apple could do this.  You can't see Microsoft doing this.



STEVE:  No.  No.  Microsoft is dispositionally completely against the idea of ever removing anything like this.  Remember, Apple in the past has obsoleted chunks of API.  They've said, "We're not going to support that anymore."  It's like, what?



LEO:  All the time.



STEVE:  Microsoft never does that.



LEO:  And I think Apple will appeal to a certain kind of consumer.  And I will probably recommend it to a certain kind of consumer.



STEVE:  Yes.



LEO:  But if you want to hack your system, or you want to play with it, or you want to develop software, you know...



STEVE:  And here we've been saying, well, look what's happening to the Mac.



LEO:  It's one way to do it.



STEVE:  It's beginning to crumble under the pressure from malware.  It's like, well, no.  Apple is working to respond.



LEO:  Yeah.  And they will be more secure.



STEVE:  They must be looking at the fact that they're succeeding with this kind of protection on the iOS platform, so here's our migration strategy.  Anyway, something big just happened, Leo.



LEO:  Yeah.



STEVE:  No, no.  It's something else.



LEO:  Oh, what else?



STEVE:  We just passed, just now, two minutes ago...



LEO:  48 minutes into the show.  44?



STEVE:  ...400 hours of Security Now!.



LEO:  It feels like that sometimes.  400 hours, wow.



STEVE:  Dejan from Stockholm, Sweden, when I was going through the mailbag pulling the Q&A together, the subject was "400 Hours of SN!!"  And I thought, what?  And so he says, "Hi, Steve and Leo.  Congratulations on cumulative 400 hours of Security Now!.  According to my calculations, you will fill and finish the 400th hour at 44:28 of Episode #326."  He said, "For the record, I excluded Episode 185a, the 'Gray Hair Computing' episode, from this calculation."



LEO:  Oh, yes, I forgot about that one, yeah.



STEVE:  So I thought that was very cool.  Thanks, Dejan.



LEO:  400 hours.



STEVE:  And I got a nice note also in the mailbag from Jeff Leckemby, with the subject - caught my eye, not surprisingly - "SpinRite does it again."  He said, "Steve, slightly over two weeks ago a college professor and coworker of mine explained that his home computer would no longer boot.  With a exam coming up soon, it was extremely important to him that the content of the hard drive be recovered since this is where the exam materials all lived.  I took a look at the machine and found that immediately after POST" - the Power-On Self-Test - "the screen would say no boot disk was found.  Not good.  I thought this was a job for SpinRite.  I put SpinRite on a CD and rebooted the machine.  I selected Level 2 and let it run.  That was on October 6th.  Well, on October 20th it finished."



LEO:  Okay, 14 days, that's not too bad.  Two days, two weeks.



STEVE:  "It ran for approximately 342 hours."



LEO:  Almost as long as this show.



STEVE:  "There was one" - exactly.  "There was one recovered sector, seven unrecovered but repaired.  The CD was removed, and the computer was rebooted.  Amazingly, the machine booted all the way into Windows, and the exam materials could all be used again.  I was astonished.  No, not that it worked.  I've used SpinRite before.  But because I thought after 14 days that the hard drive was going to have so many bad areas that it would likely not boot, and much would be lost anyway.  The drive was in bad shape, but SpinRite recovered it.  That was not the case.  It's been my experience with SpinRite that it usually takes a couple of hours to work its wonders.  But this effort shows that patience pays off.  Many thanks to you for producing such a topnotch program."  And thank you, Jeff, for sharing that with me and our listeners.



LEO:  Moving along, are you ready for questions?



STEVE:  You betcha.



LEO:  I got 'em.  Starting with an anonymous listener.  He's wondering why higher levels of TLS break the lower ones.  So, and we've talked about this a little bit when we talked about SSL and TLS.  He says:  I tried adding TLS v1.1 and 1.2 by enabling them on my system as you described.  I also left TLS v1.0 and SSL v3.0 enabled.  As also I think you recommended.  But now I get connection errors with some sites.  What happened?



STEVE:  Yeah.  So [sighing].  That shouldn't happen.



LEO:  Right, right.



STEVE:  That's not supposed to happen.  We've talked about SSL and its evolution.  And it was deliberately beautifully designed to handle exactly this situation, where there would be an interest in migrating - it was just presumed in the beginning there would be an interest in migrating - to future more advanced protocols, for whatever reason - more features, fixes to old things, who knows what.  One way or another, the designers said we need to facilitate that.



So as we've discussed, when the client is initiating a connection to a server, it establishes a TCP connection first, which we've just been talking about.  Then the first thing it does is an SSL handshake.  The first packet it sends is a list of all the protocols that it knows about and would be happy to use, in order from most secure to least secure.  And there have been attacks on SSL where, for example, a bad guy will intercept that and strip out all the more secure ones so that the client appears to only support very insecure ones.  And in fact, when I say "very insecure," it goes all the way down to none.  It goes all the way down to "do not encrypt."  So you can actually have a nonencrypted communication over technically an SSL connection.  But now that's not normally allowed or accepted.  But the spec does support that.



So this list of the things the client would be willing to use, knows how to use, goes off to the server.  The server is supposed to choose the most aggressive one, the best one, the most secure one from that list that it also knows how to use.  And that's how this handshake is negotiated, how they end up arriving then at the highest level, the latest version of the protocol that they both understand.



So that means, if all this was working right, you could turn on - you, we, users of this podcast, listening to this, could go to our browsers and operating systems and turn on 1.1 and 1.2, knowing that they're better than SSL 3.0 and TLS 1.0, both that now have known problems.  And it ought to just work seamlessly.  Servers which are up to speed on 1.1 and 1.2 ought to negotiate those improved protocols, and those that aren't should be able to fall back to the ones they do know about, the best that they can do.



Get this, Leo.  When people started actually trying this, they found out they couldn't connect at all.  And that's what happened to our anonymous listener and many others.  It turns out that this had never been tested, if you can believe it, at the server side.  And there are servers on the Internet, popular ones, which, when they see TLS 1.1 and 1.2, send a reset on the connection.  They interpret it as an attack, and they instantly drop the connection, and the browser says "could not connect, sorry."  It's just it's a hard - they don't even fall back and renegotiate.  It's just essentially the client is hung up on as quickly as the TCP protocol, the underlying protocol, allows, with the server sending an RST, a reset packet, which instantaneously terminates the connection.  And so for anyone else who's listening who has tried this, that's what happened is there are buggy servers.



The good news is, now that we realize we really do need to move to 1.1, away from 1.0 of TLS, there will be pressure on servers to get themselves patched and to work correctly.  And so we can presume this is hopefully a short-lived phenomenon.  But that's what's going on right now.  That's why we really can't...



LEO:  Interesting oversight.



STEVE:  Yeah.  Ooh.



LEO:  Try it with a server first.



STEVE:  Yeah.



LEO:  Oops.



STEVE:  See if that works.



LEO:  Question 2, Frank C. in Mississauga, Canada wants to share news of, he says, quote, "The Best Version of Firefox to Date."  Wow.  Steve, I was listening to Episode 323, and I couldn't agree with you more about versions 4, 5, and 6 of Firefox when it comes to memory leaks.  I was also ready to give up on Firefox, but they came out with version 7 just in time, and I was happy again.  Now, I know you don't like using the latest version of things, but do try version 7.  Really.  The memory handling has been greatly improved, especially when multiple tabs are left open overnight, which was the issue you had.  I usually have 25 to 30 tabs open at all times.  Thanks for a great show.



STEVE:  Yeah.  So I've heard people go both ways.  I tried 7, and I still had trouble.  I'm now, as you know, famously back on 3.  And I'm happy.  So 4, 5, and some - they broke something at version 4.  Now, 8 has just happened.  In fact, I got it, and I played with it a little bit a couple days ago when it was two days away from release.  It was in late-stage beta at that point, so maybe it's already out.  "But it takes a lot to move me off of somewhere I'm happy," he says, using XP.  So I'll be staying with 3 for a while.  It does everything I need.  All my add-ons work just fine, and I have got no memory problems at all.



So, although I will say that the gizmo I talked about last week - and I'm trying to look at it to bring the name back up.  Memory Fox does work.  That little Memory Fox add-on, what it does is it pushes your in-memory allocation down, does not reduce the total size of the app.  So virtual memory consumption remains the same, but it does free up working memory, so that can be a benefit and help speed up your computer.  So the Memory Fox add-on is useful under all versions of Firefox.  And so that I could say that I like.



LEO:  I am now - I have version 8 on my system.  I am going to open 25 tabs, leave it open, we'll see what happens.



STEVE:  Okay.



LEO:  Of course, I'm on a Mac.  Does that change anything?  Is it the same issue?



STEVE:  The problem is over on the Mac.  I think actually we have a Q&A later on about the Mac.



LEO:  Okay.  Stay tuned, boys and girls.  Moving along to Question #3, a surprised IT admin wonders how iPads keep their cool:  Steve and Leo, I've been a listener of Security Now! since Episode 1.  And believe it or not, I used to watch TechTV in the day.  Wow.  You're a gray-hair.  I still meet lots of people who watched TechTV, I'm happy to say.  In fact, now what the latest thing is I meet people who say, "When I was a kid my dad and I..." or "I grew up watching."  That's what I meet now.  And these are adults, in their 20s.  I often say, "You must have been a little kid when you were...."  "Yes, I was a child."



Anyway, I've heard you and Steve - you, Leo, and Steve go on and on about iPad this and iPad that.  One thing you both failed to talk about, at least that I can recall, is how well it handles heat.  I work in IT at a public school district, and we've recently started allowing iPads to connect to our network.  When we ordered them for compatibility testing with our network, I figured it would be nothing more than a paperweight because I love my Droid and my Windows tablet.  Boy, was I wrong.  I found that not only can I do just about everything my Windows tablet and Android can do, it can run much longer, and temperature-wise it runs much cooler.  I've never felt my iPad get hot, actually.  My question to you...



STEVE:  You mean your Droid or your iPad?



LEO:  My iPad.  My Droid gets really hot.  So my question for you guys is how did Apple manage to keep the thing running so cool and efficient?  Yeah, every smartphone I've had on the Android side gets pretty hot.  But neither the - actually, my iPhone can get pretty hot.  But I've never had the iPad get hot.  But remember, the iPad has a large cooling surface on the back there.



STEVE:  Well, it does.  What Apple did, Apple had the advantage of starting relatively late.  Smartphones existed, BlackBerries and Palms and all these other things.  So they were able to say, okay, what do we care about?  We know we need long battery life.  And they had at that time Steve Jobs, the overlord, making sure that it would meet his very exacting standards.  So it turns out that processors that are stopped don't use any energy.  It's only switching that uses energy.



The way our technology works is that essentially you're dumping electrons into or pulling them out of essentially metal conductive areas inside the chip.  But unless you are in the process of moving the electrons, there's no current flowing.  And if there's no current flowing, there's no heat being generated.  So what Apple did from the beginning was they arranged for the iPad, in much the same way that the Kindle gets its multi-weeks of life, these really long-life devices are stopped when they're not actually doing something.  The way...



LEO:  Yeah, Intel calls it "Speed Step."



STEVE:  Well, Speed Step has been around for a while.  This is actually stop step.



LEO:  Not just slowed down, just zero.



STEVE:  Yeah.  It stops.  The way these devices can play video is that they offload the entire job now to a video coprocessor, or at least to a video portion of their chip, if it's integrated, and because you've got to have processing power in order to decode H.264 and MPEG and so forth.  So there's going to be some work done.  But that's, I mean, in overall, that's relatively less work than what the processor is doing.



And so the processor, in either stopping completely, and it's very possible for these state-of-the-art, like the ARM-based processors, they could just stop.  They have like a wakeup timer that will tickle them and bring them back to life out of stop every so often to see if anything has happened that needs their attention.  So what you'll find is, if you were to do something with your iPad that really forced the processor to stay running all the time, you kept your fingers on the screen, you were moving things around, maybe like heavy-duty game play where you're really asking it to do a lot, you'll find that really will pull the battery down a lot faster.  But if you do things like reading or scrolling a page and then letting go and it just sort of sits there, battery life is a lot longer because the processor's actually stopped when it knows it doesn't have to do something.  And that's not something you can just add.  That's the problem.



When I said that Apple had the advantage of coming along later, Windows has this dilemma, and that is that its architecture, its fundamental architecture makes assumptions all throughout it that the processor is running all the time.  And Microsoft can try to play games, but this is why from the very beginning Windows CE had critical battery life problems, because it's got the word "Windows" in its name.  And this is an old operating system that was designed pre-battery life, I mean, pre-portable device.  And all of those assumptions are built in.  You just can't throw them away.  So that's an advantage that iOS has.



LEO:  Yeah.  And going back to that Flash story we were talking about, I was told, and I don't know much about this, but I was told that by knowing what applications you're going to run, you can also design the processor more efficiently.  And so the A4 and A5, because they knew they didn't have to support Flash, could be in fact fabbed differently.  Does that make sense?



STEVE:  Maybe not Flash.  But...



LEO:  It seems like that's going to be kind of a generic thing.



STEVE:  Yeah.  But certainly you could absolutely profile the processor so the things it does well are the things it is doing a lot.  And that's really what you want.  You want it to be as efficient as possible because if it has many more cycles to get the same work done, those are many more cycles of power being consumed, and longer before it's able to shut itself down.  So if you know what the target applications are and the things they need to do, you can design the hardware to do those well, and not waste space on your chip, which is expensive and can consume heat, not waste space on your chip with things that are not going to be used very much.  So, yes, tuning really does make sense.



LEO:  And this is something Apple's taking very seriously.  Of course they're using an ARM design as a foundation.  But they bought PA-RISC, or PA Semi, rather, which was a...



STEVE:  They got their design talent.



LEO:  They got design talent.  And I was told, and I find this hard to believe, but that there are 1,000 people working on chip design at Apple.  1,000 people.  That tells you how seriously they take this.  Very interesting.



Anyway, moving on to Michael Landers in sunny California.  He wonders whether Ars Technica is copying us.  He points to an article on Ars from October - "When Passwords Attack:  The Problem With Aggressive Password Policies" - that exactly echoes your comments on password change policies from a couple of weeks ago.  It's a good article, since it echoes you.  However, this isn't the first time I've seen an article from Ars that closely echoes your podcast, shortly after your podcast.  Perhaps one of their writers is using your show for inspiration?  I don't think so.  I love Ars.



STEVE:  Well, I was going to say, Leo, you know what they say about...



LEO:  Great minds.



STEVE:  Well, there's that, and also about flattery, is that imitation is the sincerest form.  And I don't know whether anyone's getting ideas from the podcast.  I hope so because I get great ideas from them.  Ars is one of my main sources.  In fact, they're one of the few Twitter feeds that I follow over on my account where I follow things.  And I'm always glancing up to see what's going on.  So I hope they're getting some value from me because I'm sure getting a lot from them.



LEO:  I think that a lot of the same ideas in the security field go around.  I don't know if you can say that - I would never accuse them.  Sean Gallagher wrote that article.  I would never accuse Sean or anybody else of stealing from us.  And I'm with you.  I think Ars is increasingly my go-to place for long-form intelligent articles on content.  I actually pay for a premier subscription, which you don't need to do.  But I just wanted to support them because I really feel like they're doing the kind of journalism, tech journalism I believe in.



STEVE:  Speaking of which, about paying for things, what's happening with Wikipedia?  They need money again already?



LEO:  Every year they do a - already.  You know, every year they do a...



STEVE:  I gave them a bunch of money not long ago.  I thought, wait a minute.



LEO:  Every year.  It seems like a long - I think it was a year ago they did the last time, where Jimmy Wales would show up on your front page saying, "Give me money."



STEVE:  Oh, he's back.



LEO:  He's back.



STEVE:  He's back, yeah.



LEO:  Well, I'll tell you, I don't mind.  First of all, I think Wikipedia is one of the great resources of the Internet, if not the greatest single resource.  And I use it almost every day.  And I remember talking to Jimmy.  And the board and others continually tell him and other people, look, we could make a million dollars a day if we just put ads on this page.  We have that much traffic.  And to his credit, Jimmy has consistently said there will be no ads on Wikipedia.



STEVE:  Oh, and think about that, context-based ads for, I mean, it's a natural.  It really is.  Well, we'll have them sooner or later.  It's inevitable.



LEO:  Well, no, I don't think so.  And I think that...



STEVE:  I don't know, Leo.



LEO:  There's a lot, they're turning their back on a lot of money.  But it costs money to run Wikipedia.  But that's why, whenever he asks, or whenever they ask - I shouldn't say "he" because it's not just Jimmy anymore.  But whenever Wikipedia asks, I always give them money because I believe that I get the value out of it.  I think they're well worth it.  Anyway, I'm on Wikipedia right now.  I don't see any begging going on, so I don't know.  Hey, your public radio station does this.  Right?



STEVE:  Oh, my goodness, yes.



LEO:  All the time.



STEVE:  Yes.



LEO:  It's just like that.  Moving along.  Question #5 from listener Jo-Jo - hey, Jo-Jo - in the European Union.  We were talking about dual Internets.  He thinks it's a good idea:  You've often mentioned how the original designers of the Internet were only focused on getting the mechanics of packet routing to work and paid no attention to security.  So it's no wonder that pretty much everything we use today is a failure from security perspectives - Ethernet, TCP, BGP, DNS, SMTP, FTP and so on.  Maybe the Apple approach of not lugging excessive baggage into the future should have been applied to the Internet and most of its crappy protocols 10 years ago.  Are DNSSEC and IPv6 the only signs of improvement for Internet 1?



STEVE:  So I read this, and I thought, it's not so bad.



LEO:  They're not that crappy.



STEVE:  I think that maybe, because this show is about focusing on problems, that that's what we focus on.  But let's remember that everyone has a front door whose lock can be easily picked.  I mean, security doesn't have to be perfect in order to provide value.  And we're all getting an amazing amount of value from the Internet globally.  And yes, it could be better.  Yes, there are bad guys lurking around who are taking advantage of these things.  And yes, it is true that the designers of the 'Net did not understand what was going to happen.  And were we to start from scratch today, maybe we could make it better.



But I'm not even sure that we really can because, when we were brainstorming a little bit last week about Internet 2, when that article came up, both Microsoft and the FBI were saying, yeah, well, we need to, like, authenticate every packet that we put on.  It's like, okay, stop.  What are the implications of that?  I mean, if that had - it could have never happened if that were the way it was designed.  It did happen because it was just this big, spongy, happy, friendly, packet-passing blob that all kind of worked.  So I'm glad we have it.



And I would suggest that there are security problems everywhere, which is why I had thought of the front door.  We also have glass windows that can be broken.  We've got people leaving car doors, like things in view inside a car that causes their windows to be smashed.  And, I mean, and back when alarm systems used to use phone lines, the phone lines would get cut, and then the alarm would ring, and the police would not come because the monitoring service had been disconnected.  I mean, there wasn't - I guess my point is that we know that security is hard.  Bad guys will always work to, and can, defeat security.  I don't see how we can ever move past the Internet foundation we have.  We can improve things incrementally.  And this show focuses on those areas which need improvement, I would say.  But, boy, I'm not unplugging.  It's fantastic.  And it works.



LEO:  And it works.  Yeah.  Good.  I like that.  "Wogsy," who apparently is in "Flyover Cornfield" - I'm thinking Nebraska - comments about Internet bandwidth:  I'm a little perturbed about this notion of selling tiered broadband or DSL service, based on the philosophy that a faster data rate costs more because it uses more bandwidth and encourages more use, therefore causes more congestion.  I think it's a rather mischievous, if not fraudulent, interpretation of electronic throughput.  Wouldn't the "tubes" be less congested if all packets were delivered more quickly, clearing buffers and giving routers and servers more free time to make fewer errors?  I should think more clear open bandwidth would be available for all, if all routers, switches, and servers ran at maximum speed at a flat rate, rather than deliberately holding, limiting, buffering, or rerouting lower tier data.  You know, that's a really interesting point.  What do you think?



STEVE:  Well, all routers, switches, servers and so forth do run at a maximum flat rate.  It's really not since modems that there was a variation in the rate at which the bits moved.  And it was, as we've talked about in our switching from wired, point-to-point connections with modems, it's when we switched to packet-based communications that this changed.  So the way bandwidth is apportioned is it's very much the way the cell services do, where as we have cell phones with larger bandwidth connections.  They're not actually changing the frequency of the carrier that allows the bits to pass between the phone and the local cell any quicker.  What they're doing is they're bundling up channels and using a greater percentage of the available bandwidth, for example, in the case of a cell phone, which is where you go from 1 to 2 to 3 to 4G.  It's channel bundling, essentially.



The similar analogy, for example, with broadband is that your data bits are not flowing in any faster when you have a higher broadband connection.  It's that they're flowing more often.  So everything is packetized.  Somebody who has a 1Mb broadband connection can be in the house next to you, and you've got 50Mb.  Well, the bits are coming in, and they're moving over the wire just as fast.  He's just getting more of them.  He who has the 50Mb connection is getting a greater percentage of those bits.



So all of the switching and all of the operation that we've got on the Internet, it's all running as fast as it can.  When you've got a 100Mb Ethernet connection, even if you're typing slowly, what you're sending is little tiny packets very quickly across that fast connection.  And if you transfer a huge file, you're sending a lot of large packets across that same connection.  But the actual speed is always the same, is always as fast as it can go.  So it's just the case that providers, see, their logic is, well, this user is using a greater percentage of our capacity, so we want to charge them more.  And if that's the model they want to use, I could see that it makes some sense. 



LEO:  I actually prefer - I think the solution of charging by data rate is far preferable to the other solution they're using, which is capping after a certain number of gigabytes are downloaded each month.



STEVE:  Yes.  That just gives you...



LEO:  That's more draconian.



STEVE:  That just gives me a queasy feeling.  It's like, well, wait a minute.  How much do I have left?  Am I going to run out?



LEO:  I'm willing to pay for faster service, God knows we do, and symmetric service, and that kind of thing.  And I don't think that that's unreasonable to ask.  Although I've had the debate many times with John C. Dvorak, I think essentially, once you pay for the infrastructure, the bits are pretty free.  They're pretty cheap from the point of view of the ISP.



STEVE:  Whether they're being used or not.



LEO:  Right.



STEVE:  Because the infrastructure still has to be there.



LEO:  Right.  But the infrastructure is a one-time capital cost that's amortized pretty quickly.  It's almost like the Golden Gate Bridge.  You build the bridge, and you've got to maintain it.  But the building of the bridge is the expense.  Then they put up a toll structure to charge by car; right?  And the truth is the bridge costs no more if it's full of cars or it's got one car.  So I just think that there's a, well, I mean, it's a business.  ISPs are going to get as much as they can out of you.



STEVE:  Oh, and believe me, they're making money, Leo.



LEO:  And I don't think they're going poor.



STEVE:  No.



LEO:  No.  Question 7, Jon in Lincoln, Nebraska - another cornfield flyover - worries about giving Google too many eggs:  Steve and Leo, I love the podcast.  I'm a long-time listener, LastPass and Vitamin D advocate.  I have the entire family well educated and believing now.  Yay.  Over the weekend I saw that now LastPass - as we mentioned in the news - supports Google Authenticator.  This is great news because I currently use the app on my Android phone to get into my Gmail account.  I also know how much more secure two-factor authentication is, thanks to previous Security Now! episodes.  But it makes me wonder if tying so many of my services to Google is a good idea or a potential security problem.  What happens if Google were to go down for a few hours?  Any thoughts or opinions on this would be appreciated.  Am I putting too many eggs in Google's basket?



Oh, by the way, I should point out that, and I guess you have also, but LastPass has always had two-factor authentication, which I use.  But the way they did it is they had a security program that you put on a USB key that you would run.  And so this was - the second factor was kind of like a YubiKey, coming from a USB key, which I carry in my pocket.



STEVE:  Right.  And so of course now using Google Authenticator...



LEO:  I don't have to carry it, right.



STEVE:  Right.  Precisely.  And so this was always our goal was to have a single solution of some sort.  We do know that any reliance on the cloud comes with benefits and costs.  And the costs are availability and security.  Is the stuff we're going to put up there secure so that nobody else can get it?  We've talked about that endlessly recently with all these free uploading services and how they work.  And then, is it going to be there when we need it?  So the good news with the Authenticator, Google's Authenticator, is that it is not dependent upon them.



There are two approaches for this kind of device.  There's the sequential one-time password and the time-based one-time password.  The YubiKey is famously a sequential-based authenticator, and my little PayPal football is time based.  Every time I turn it on, every 30 seconds it changes.  Now, the model that VeriSign has adopted is the "we want to make money" model.  And so anybody using VeriSign devices, that is, not the end user, but for example this PayPal football is a VeriSign dongle, and I've got also the VeriSign app on my BlackBerry.  I love them, but I've had some conversations with people who were considering adopting the VeriSign solution, and they're really expensive.  I mean, per authentication, PayPal is paying VeriSign some serious coin every time I use my little football to authenticate.



Google's model is different.  Google has open-sourced this.  And instead of what's called HOTP, which is the HMAC one-time password, which is the technology for doing it incrementally, and that's in RFC 4226 that was laid out, instead what I'm seeing becoming more popular is a time-based password.  And that's what Google wants to use, expects its users to use.  And the idea is that our phone knows what time it is, our computers know what time it is, and the authentication is inherently decentralized.  If you're going to have a counter-based one-time password, some one entity, for example VeriSign, needs to maintain their copy of the count.  And so by definition all authentication has to go through VeriSign.  And if VeriSign were off the 'Net, nobody could authenticate.  And that would be bad.



Similarly, Jon was wondering, he was assuming that Google was in the loop.  And the point is Google is not in the loop.  Nobody is in the loop.  There's no loop at all.  The Google Authenticator generates a six-digit code based on time, and anybody who has the algorithm and your authenticator's private key can generate for themselves the same thing Google authenticator shows.



LEO:  That has to be.  Otherwise LastPass wouldn't be able to use it.



STEVE:  Well, they wouldn't be able to use it for free.  And they wouldn't want to be paying VeriSign.  They could support VeriSign's tokens.  But they're not because, oh, boy, I mean, VeriSign's making money on that.  And Google is saying, okay, this is not where we want to make money.  We're going to enforce this.  We're going to keep this open source.  Here's all the source.  It's going to be RFC based.  Right now this time-based OTP, TOTP, is an IETF draft.  And so it's being ratified.  And actually VeriSign is participating in that process.  So they're part of wanting to be involved in making this approach work.



And the beauty is that all an individual needs, there is also - Google makes the authentication side, a PAM module that does the authentication, a Plug-in Authentication Module.  So anyone you wanted to authenticate to who supported the Google authentications solution only needs to know your device's secret.  And that's part of setting up an account with them.  Then they're able to make sure from then on that you actually have that device in your possession, a Google authentication device with the matching key.  So it's a neat solution.  I really think it's going to happen.



LEO:  Is the secret tied to, like, the IMEI or something hardware-based on the phone?  Or is it generated when you first run the app? 



STEVE:  Generated when you first run the app.



LEO:  Okay.  So it doesn't in any way identify that piece of hardware.



STEVE:  Nope.



LEO:  Except in the sense that a cookie would.  It's created.



STEVE:  Correct.  You need to share that with people who you want to be able to authenticate you.  And in theory you could only share it with one person, and everybody else could use them.  But the decentralized model of this is, I think, really what makes it go.  And again, it doesn't have to be absolutely perfect to be much better than not having it at all.  So again, we don't want the perfect to be the enemy of the really good enough.



LEO:  Yeah.  Fadele Adeolu in Nigeria, and I'm sure I'm butchering his name...



STEVE:  It's a good name.



LEO:  I love it.  Isn't it?  He's been thinking about the diameter of the Internet:  Steve, I work as an IT professional in Nigeria.  You should know that many are benefiting from Security Now!, even in my part of the world.  I was initiated into the Security Now! world in 2006.  Since then it's been - excuse me, I had a sneeze there - addictive.  I've also initiated many others who use the podcast as a learning tool.  That is so great.  So nice to know.  My question is on the idea of Internet diameter discussed in one of the episodes you did on How the Internet Works.  You mentioned, if we ever get more than 255 routers between two points on the Internet, no data would be able to get from one end to the other.



STEVE:  Right.



LEO:  Because of what, it's an eight-bit descriptor?



STEVE:  Because the TTL is only a byte.  And so there's no way, even if you set it up to 255, when it decrements to zero, routers drop the packet.



LEO:  Interesting.  Oh, that's really cool.  I wasn't paying attention when you mentioned that.  This very much caught my interest.  I've been thinking about it.  You didn't sound like there's any possibility of ever reaching this 255-router limit.  You didn't sound worried.  But I would like to know the extent of the limitation and if there's a way out.  So I'd like to ask, if this diameter is limited by the one-byte header of TCP v4 that's used for setting the TTL, as you just described, how flexible is it to enhance the implementation to increase the diameter?  What will the Internet diameter, for instance, be with IPv6?  Steve, this Internet thing could be a mystery but for you guys who are committed to demystifying many topics.  Your good job is really making significant impact on the Internet community.  Keep it up.  Bye for now.  Ade.  That is nice.  Thank you, Ade.



STEVE:  So with every opportunity to increase the size of the field - which is now called the "hop limit."  TTL kind of - it was never about time.  But it sort of sounded like it was about time.



LEO:  Time To Live kind of gives away that implication.



STEVE:  It does give you that impression, doesn't it.  Now it's called the "hop limit" in the IPv6 spec.  And it's eight bits.



LEO:  It doesn't change.



STEVE:  Doesn't change.



LEO:  So they, like you, are sanguine about this issue.



STEVE:  Yes.  When I trace from where I am to GRC's servers, and for reasons of architecture it goes up to Northern California and then comes back down, it's, like, 10 hops.  I mean, people have seen traceroutes.  You've done traceroutes to places.  And it's, like, seven.  It's 12, maybe.  But it doesn't scroll off the screen and keep going off, 255.  We're just no - we are so far away from that being a problem that where they took the IP size from 32 bits and went to 128, this would be the time to increase the hop limit if you had any concern that 255 would ever be a problem.  And, clearly, nobody's worried about that.



LEO:  I hope they weren't shortsighted.  I hope that they're, I mean...



STEVE:  That would be a problem.



LEO:  I mean, we just went - we're going through this thing.



STEVE:  We've got so many IPs.  Now we can't get to them.  Errgghh.



LEO:  Ade, now I'm worried.  Peter H. in Wiltshire - as in "shear," not "shire" - Wiltshire, England, says what about LastPass?  Steve and Leo, great show.  Thanks, love it.  I know you both previously have said good things about LastPass.  But with all the talk about Password Haystacks, Latin Squares, and the pros and cons of frequently changing passwords, I've gained the impression that neither of you actually uses LastPass.  No, I do.  I do.  That's all I use.  Why?  They've solved the problem so elegantly, and the job is done.  I'm aware of the network traffic anomalies that LastPass detected and understand the implications and possible consequences and limitations of any impacts, and as such am still happy with them.  Are there other concerns that I've missed, or do you simply prefer alternative apps, plug-ins, services, et cetera?  I'd really appreciate some feedback, even if you don't select the question for the podcast, because I think LastPass is great and have persuaded family members to adopt it.  So I don't want to give those near and dear to me bad advice, if there's something I've missed.  Thank you.  Nothing you've missed.  Actually, you did miss something:  why Steve did this.



STEVE:  I did it because I could.  I did it because it was there.  Seriously, Peter, I run my life on LastPass.  And Leo does.  I mean, it is so good, and it is still - it's what I use.  But I just had an itch, and I had the question, could a paper-based crypto be created?  And Off The Grid happened, using Latin Squares.  So it's not at all that I think LastPass doesn't solve the problem.  Actually I've talked about the two together.  I would use Off The Grid to generate the password which LastPass would then use automatically for me, the advantage being that I always have the ability to go back to paper if I ever need to.  I can have this thing in my wallet if I ever am without LastPass for some reason.



So it's not that they're really competing technologies.  But in the case of Password Haystacks, that was like, okay, wait a minute, let's think about what - do passwords that are secure also have to be really hard?  No.  That was kind of a cool thing to realize.  And for Latin Squares, it's like, hey, it's possible to do real good crypto with a piece of paper.  So they were just sort of cool technology things.  But in terms of what I use, I use LastPass.



LEO:  It's just that simple.



STEVE:  Yup.



LEO:  Yeah, and I do, too.  And I use the password generation.  It's just that - I guess that Haystacks is one thing, and a good point.  You know you could use, in fact I do, the LastPass-generated password and just add a standard haystack few characters to it to make it just that much more strong.  So I do that.  I have a certain set of characters that I use that I will never tell.



STEVE:  No.  Don't tell anybody.



LEO:  And the whole idea of Perfect Paper Passwords is if you're offline, or the Latin Squares is if you're offline.  And LastPass, of course, requires you to be online to use it.



Mario Arce in New York wonders about sending Steve Twitter messages:  I hear on your Security Now! podcast you say people send you tweets about security-related events.  Once, a while ago, I tried to make you aware of something, but I could not send you a message via Twitter.  Did I do something wrong?  Or do you need to follow someone to be able to receive Twitter direct messages from that person?  You do need to follow people to get DMed.  But I don't think you are saying "DM me."



STEVE:  No.  And I don't follow anyone on my SGgrc account because I can't.  I mean, if I were to follow everybody who follows me...



LEO:  [Indiscernible] all the time.



STEVE:  Well, or I'd be seeing 26,000 individual Twitter feeds, and nothing would happen.  I mean, I'd just not even going to get out of bed in the morning.  So Mario, to answer your question, the way people get things to me is they mention me in their own tweets.  They just put an "at" sign, SGgrc, and then say whatever they want to say.  They're actually tweeting that to everyone who follows them.  But my feed picks that up as a mention of my Twitter account, SGgrc, and so I see it.  And so there's a whole bunch of people who from time to time run across something they want to make sure I knew.  And so they tweet themselves whatever they want to say and just mention, by doing @SGgrc, and I will see that also.  So that's how I do it.



LEO:  That's how you do it.



STEVE:  Works great.



LEO:  Same thing for me.  I read my - anything you "@" to me, I read that usually.  Not religiously.  Hey, we've got a bonus, Question 11 from Paul Bone in Melbourne, Australia.  It's the Happy Camper of the Week story:  Oh my god, oh my god, oh my god, spelled OMG OMG OMG.  K2pdfopt.  Thanks for sharing this on Security Now! 324.  I'm visually impaired, having about 12.5 percent of normal vision, born cataract blind.  And after having my cataracts removed, I developed glaucoma - oh, my god, I'm so sorry - have since developed other vision problems.  I bought a Kindle DX with the hope that it would help me read scientific papers more easily.  Of course that's the big format Kindle.  I'm working on my Ph.D. in computer science.  Sadly, I found that zooming into PDFs was too clumsy, although I love the eInk screen and reading novels on it.  Thanks for your recommendations, and I use Audible.



I've pretty much given up trying to read PDFs on my Kindle and have since been waiting for a tablet PC that does this well, maybe the Kindle Fire.  But now I've heard about and used K2pdfopt, I'm so extremely happy.  I found the website and saw an example where they'd converted a PDF into large print format.  I was so happy that I might be able to read my PDFs comfortably - and believe me, there are a lot to read for this Ph.D. - that I cried a little.  Inside.



Anyway, I know you've simply passed on a message rather than created the product.  But I wouldn't have found out about it if you didn't mention it on Security Now! So thanks to you and to the listener who wrote in about it - K2pdfopt.  And remind me again, that's a PDF converter?  Is that what it is?



STEVE:  Yeah.  It is a processor of PDF files that basically it strips out a lot of the formatting and does make PDFs readable on much smaller screens.  You lose that - the PDF itself is a page-based layout.  And so if you're going to show a PDF page on a small screen, you're sort of stuck because it's got to fit the whole page on one screen.  It's a screen at a time sort of deal.  And so this just sort of says, no.  We're just going to grab the text and preserve what we can, but legibility and readability on small screens is our goal.  And they really achieved it.



LEO:  Well, there you go.  And it's from Willus.com.  Steve, we have completed your assignment, 11 questions good and true.  And you've answered each and every one with your usual grace, verve, and savoir-faire.



STEVE:  Okay.  And I'm exhausted.



LEO:  @SGgrc, that's the Twitter account, @SGgrc, GRC being the Gibson Research Corporation, GRC.com being the website - certainly the place to go if you, as most people who use hard drives, are looking for the best hard drive maintenance utility of all time.  SpinRite.  Go there.  Buy it.



STEVE:  Yay.



LEO:  Yay.  You also will find, as a bonus, many freebies, lots of great stuff.  Just browse around GRC.com.  And of course, if you've got a question for two episodes from now, there's a form there, GRC.com/feedback, is a great place.  And the podcast's there.  Now, audio only.  Steve does, for us, he does his own 16Kb version for people who have bandwidth issues.  So we've got a 64 and a 16Kb version there.  Also transcripts, which Steve does.  Thank you, Steve.  We also have video available at TWiT.tv, along with all the other versions.  GRC.com or TWiT.tv.  We do this show every Wednesday, 11:00 a.m. Pacific, that's 2:00 p.m. Eastern, or 18 - now, I guess UTC hasn't changed, but  because our time fell back it would be...



STEVE:  Right.  We changed.



LEO:  We changed.  So we're now minus eight.



STEVE:  Right.



LEO:  You figure it out.



STEVE:  As opposed to seven.



LEO:  I think that means 1900 UTC, but I could be wrong.  Yes, Sparky says 1900 UTC.  So I will now add eight to the Pacific time.  1900 UTC at TWiT.tv.



STEVE:  And Sparky knows of what he speaks.



LEO:  Apparently he does.



STEVE:  He's a good contributor over in the newsgroup.



LEO:  Oh, good.  Thank you, Sparky.



STEVE:  Paul Byford.  Next week I'm with you, Leo, in the studio.



LEO:  Yay.



STEVE:  There's a cool Internet identity conference on Tuesday, the day before, which I am going to be up in Northern California to attend.  And I figured since I was, I'd see my family and spend the night and then be in the studio with you.  And that will be the topic, will be what happened, what I learned, what I saw, what's going on in Internet identity.  We'll be talking about that next week.



LEO:  I think that's a really interesting subject.



STEVE:  Oh, it's the - it's THE challenge, as we all know, authentication.



LEO:  Yeah.  Wonderful, Steve.  I'm glad we're going to see you.  I'll order the burgundy right now.  And we thank you all for joining us.  We will see you next week, in studio, for Security Now!.  Bye bye.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#327

DATE:		November 17, 2011

TITLE:		Internet Privacy Update

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-327.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  The day before recording this podcast in the studio with Leo, Steve attended an annual Internet privacy conference.  After catching up with the week's security news, updates, and errata, Steve shares what he saw and learned during the conference, including three VERY promising new privacy and authentication tools.



LEO LAPORTE:  It's time for Security Now!.  Steve Gibson is here to talk about your privacy and your security online.  Hi, Steve.  I don't ever get to see you in person.  This is twice in two months.   



STEVE GIBSON:  Okay, but it's not going to be a habit.



LEO:  Oh, please.



STEVE:  No.



LEO:  I would like it if you'd come in on a regular basis.  It's nice to have you.



STEVE:  You have traffic up here, the same way we do in Southern California.



LEO:  Did you run into some traffic?



STEVE:  No.  This time I set my entire trip up so that there would be none.



LEO:  To avoid it?



STEVE:  To avoid it.



LEO:  Took back roads?



STEVE:  Specifically for that.  Everything was designed.



LEO:  Well, what brings you to our neck of the woods?



STEVE:  Well, I came up yesterday for an Internet privacy and identity conference, which was held down in Palo Alto, and spent the day listening to people who spend their days thinking about privacy.



LEO:  Wow, that sounds interesting.



STEVE:  Yeah, it was.  And so I want to talk about just a whole bunch of sort of tidbits that were thrown out.  It was - it's sort of disorganized.  It was disorganized there, and it's still disorganized in my head.  And I don't know that there is any way to organize it.  But it'll be fun to talk about that.  And then there were a couple product presentations, which is going to be of huge interest to our listeners.  And of course we've got news and updates.



LEO:  And I know that you did a little work on the Apple sandboxing thing that we kind of surprised you with last week.



STEVE:  I now understand what it is.



LEO:  Good.  I'd love to get your take on that.



STEVE:  So we'll follow up, yup.



LEO:  But I want to say this was a big sacrifice for you to be here today because you probably forgot that today is the day, actually it was yesterday...



STEVE:  I didn't forget.  I'm going home to get mine.



LEO:  ...that the Fires arrived.



STEVE:  It's waiting for me.



LEO:  In fact, they shipped early in some cases.  So you didn't get it on Monday, though; huh?  We had - Liz got hers on Monday.



STEVE:  No.



LEO:  Isn't that weird?  So anyway, I thought I would be - I would let you - this just came.  I haven't turned it on yet.  But I just thought you could maybe hold it to see what it's like.  It's got a kind of nice rubberized back.



STEVE:  Yeah, nice.



LEO:  People have compared it to the BlackBerry PlayBook.  It is roughly the same size, shape, thickness, and weight, although the iFixit guys have done a teardown, and inside it is nothing like the PlayBook.  And in fact that might be one of the criticisms.  It doesn't have as much horsepower, as much RAM, as perhaps it...



STEVE:  It has half, I think, of what the iPad has?



LEO:  Yeah.



STEVE:  Or the PlayBook?



LEO:  Yeah.  And maybe that's - some of the complaints, and we're already seeing some complaints on this, are on the speed, and maybe that's why is because it's not as powerful.  It's running Android, and there are some things, you can see it can already sign into - the first thing you do, it says "Welcome to the Kindle Fire."  I'll sign in and...



STEVE:  It's got all your networks there [indiscernible].



LEO:  Yeah, I'll sign into it.  Don't show my password, please.  Although you'd have to be sitting outside.  It's pretty easy to type on this.



STEVE:  Wow.  You're good with your thumbs.



LEO:  Yeah.  It's a good thumb typer.  And that's one of the reason I like seven-inch, because seven-inch is narrow enough that you can kind of do that.



STEVE:  It does feel solid.  It feels sort of heavy for its size.



LEO:  Yeah.  Which is not good for a reader because that's one of the things I like about the Kindle, it's basic.



STEVE:  Oh, and in fact I almost think that they've overshot the size goal with the new Kindle.  I've been using mine now, the $79 one.  It's almost too small.  I like the Kindle 3 that's got the keyboard on it because that paddle at the bottom sort of gives you something to hold. 



LEO:  Right.



STEVE:  I really...



LEO:  So you don't like that new $70 or $80 Kindle.



STEVE:  No, I had to have one.  But [indiscernible] kind of look at it.



LEO:  I like how light it is, and I can put it in my pocket.



STEVE:  Well, for travel, if you want to walk around, it does fit in your pocket better.  So I agree.



LEO:  Right.  So this is now - and we won't do any more because it's now going to download the Kindle software, an update to the software, and do a reboot.  So one of the complaints people had about it was that...



STEVE:  Anyway, thank you for letting me touch it.



LEO:  Well, you can touch it some more.



STEVE:  No, I'm done touching it.  I'm going to touch my own.



LEO:  Always touch your own.  I did play with Liz's yesterday.  And one of the complaints David Pogue and others have had is that it doesn't feel snappy.  Our MacBreak Weekly team said sometimes you'd tap an icon, and you wouldn't know if anything was happening.  And maybe that's what's happened a couple of times.  And we tried some page turns, and you can actually see a visible, not big...



STEVE:  Stutter?



LEO:  ...but minor stutter as it's redrawing the page.  So 200 bucks...



STEVE:  Oh, my god, for the price.  And I looked back at what I paid $400 for from Amazon, that funky wedge-y Kindle and went, oh, my goodness.



LEO:  That's right, that's right.



STEVE:  I mean, it just looks like a dinosaur now compared to the Kindles we have just a few years later at 20 percent the cost of the first one.



LEO:  I agree.  I agree.



STEVE:  So if this thing has the horsepower - well, and, I mean, we're all spoiled about gigahertzes.  I mean, of course it's got the horsepower.  If they need to tune it and optimize it, they can do so.



LEO:  Well, and in fact I wouldn't be surprised to see a firmware update addressing some of these complaints in the first...



STEVE:  Which is sort of a short way of saying what I just tried to.



LEO:  Yes.  Well, I think also what you're saying is there'll be new hardware, as well.  I mean, they're going to iterate...



STEVE:  Probably.



LEO:  They'll iterate on this.



STEVE:  Yeah, yeah, yeah.



LEO:  Yeah, I agree.  I do get a - now, I know you got a bunch of cases.  You'll probably end up talking about the ones you got.  I got the Marware executive case.  So it's kind of fun.  It's a leather - looks like a Moleskine.  It's got that little rubber band on it.



STEVE:  Yes.  And I'm not a fan of cases.  Well, I mean, I'm a fan of cases, but not of attachment things.  I like to have something where, like, I take it out, and I just - I use it.



LEO:  You know how hard this is to attach?  It's like you've got to snap it in and...



STEVE:  Yeah, good luck detaching it.



LEO:  Yeah, exactly.  So maybe this is the best choice.



STEVE:  So anyway, next week I'll have my opinion to add to all the other gurus.



LEO:  This is what we call a "first look."  I don't know.  I think this, for a tablet that's made of glass, something like this is kind of important; you know?



STEVE:  Yeah.



LEO:  And I think it looks good.  It's got a stand on it, and it seals up.  And I think this will be - and the little - one of those little hand - they do this all the time in these cases.  Like you do this.  I don't know.  Does somebody hold their - everybody seems to hold their case like this.  I don't know why they...



STEVE:  No.



LEO:  I don't do that.  But anyway.  Oh, I can get started now.  That was quick.  So it's going to reboot.  So it downloaded the update while we were talking.



STEVE:  Well, you have good bandwidth here.



LEO:  We're going to take a timeout before we get into the security updates.  Firefox 8...



STEVE:  And counting.  Although Chrome is at 17 or something.



LEO:  Yeah, I know.



STEVE:  It's like, my god.



LEO:  You're not supposed to look.  Just pay no attention to those numbers.  Also some news about Adobe's Flash.



STEVE:  Well, you know, get it.



LEO:  The usual...



STEVE:  Yeah, exactly.  You see I have one line there, just "update."



LEO:  All right.  Let's get into the meat of the matter.  We'll start with Firefox.



STEVE:  So, yes.  Firefox 8.  I grabbed it, I guess, a little before a week ago in beta, and loaded it, and looked at it, and then went back to 3.  



LEO:  3.  3.  We talked about this last week, but I just think it cracks me up.  Not 7, not 6, not 5, not 4.



STEVE:  They all bleed memory.



LEO:  3 is the last one that didn't leak.



STEVE:  Yes.  It is not leaking.  And I've had so much Twitter feedback from people who even are now using 8, and they wake up in the morning, and it's gone to 2GB of memory consumption.  Now, there is news just today that I haven't had a chance to follow up on in detail, that Mozilla is now saying it's the fault of the add-ons.  Which...



LEO:  Well, I always wondered because...



STEVE:  ...is entirely possible.



LEO:  ...we put so many extensions on our Firefoxes.



STEVE:  Yes.



LEO:  I noticed that that really does slow it down.



STEVE:  Yeah.  So they're talking about having some sort of solution for add-on and extension memory consumption.  So we'll see.  So this fixes seven security flaws, that is, the update to Firefox 8, four of which they rated critical.  And all four of those are exploitable through drive-by downloads.  So people who are on 4, 5, or 6 or 7, ought to update to 8 for the security benefits.  And, I don't know, turn your computers off at night.



LEO:  I thought they were going to fix this.



STEVE:  Well, in fact, I think 7 was supposed to fix the memory problem.  Now, there is that cool add-on called Memory Fox which does seem to be working for me.  It doesn't reduce its virtual memory footprint, so it's still consuming system memory.  But it does push it out of RAM, which is valuable just for itself.  Also, v8 gives us an optional Twitter search feature, built in.  So 8 can search Twitter for you.  It's like, okay.  I'm not sure...



LEO:  You've always been able to add a custom search to Twitter so that you could just do "t" and then the search.  But I think this does it...



STEVE:  Right.  And there was some problem that we talked about actually in the past where third-party add-ons could be installed without your explicit permission.  And so they've blocked that.  And now you'll get control over that happening, before that happens.  So anyway, Mozilla Firefox is at v8.



LEO:  Can I ask you a question?  Did anybody offer you a cup of coffee when you arrived?  Do you have a quinti venti...



STEVE:  I got 12 shots in me already.



LEO:  Okay, never mind.



STEVE:  I'm fine.



LEO:  In person you're just so calm and serene, I didn't realize.  Good, all right.



STEVE:  Yeah, when is that?  So Adobe has updated, yet again, Flash to 10 point whatever they are, 1 or 2.  So get it.  You'll get the notices and ...



LEO:  Did they say anything about the security?



STEVE:  Yeah, they fixed a whole bunch, I think 12 or 13 problems, so...



LEO:  It's not even worth mentioning anymore, is it.



STEVE:  No, it's not.  Just get it.



LEO:  Are you happy that Adobe is finally killing Flash on the mobile platform?  Because I think the other shoe on that is they're going to have to kill Flash on the desktop because, if websites stop using Flash, what's the point; right?



STEVE:  What we're seeing is, and I heard this yesterday at the conference, that HTML5, scripted, which is to say JavaScript and the capabilities, the hooks that are inherent in HTML5 really do obsolete Flash.  You just don't need it.  So it's going to end up that, when the history books are written, it will have been an interim technology.



LEO:  Right, just like RealAudio.



STEVE:  Yeah.  I mean...



LEO:  Just a temporary thing.



STEVE:  Not everything lasts forever.



LEO:  Nothing does.



STEVE:  And this one really, yeah, oh, good point, yeah.



LEO:  Not even us.



STEVE:  So, yeah.  So it served its purpose.



LEO:  Yeah.



STEVE:  So many sites that are only using it to display video, they don't need to, I mean, many sites just used it for that.  And so we don't need that anymore.  And if you need more fancy stuff, you'll be able to do it with the hooks that HTML5 provides and JavaScript.  And you get more performance.  You don't have to have an add-on.  You don't have all the memory consumption problems.  I mean, it's very much like what Windows CE tried to be.  Microsoft didn't have a battery-operated operating system when Palm and all of the OSes that were made for portability came out.  So they tried to take Windows and squeeze it in.



LEO:  Bang it with a hammer.



STEVE:  Exactly.  And that never worked.



LEO:  Now, are you worried that HTML5, because of its heavy reliance on JavaScript, is going to have issues, security, I mean, obviously it will.  And you can't use NoScript if the whole world is on HTML5.



STEVE:  Yeah.  And NoScript, I think, serves the purpose of giving you a gatekeeper, where you're able to go to a site and decide explicitly, it's like, okay, this looks like a place I'm willing to trust, or I need to, I have no choice.  So I think, again, we're seeing more focus on putting fences around things.  We are talking about sandboxing.  We have a lot of attention that Google has given to security in Chrome.  When I've got a bunch of Chrome tabs open, I see individual processes in my task list in Windows.  So each of those pages is a freestanding process that Google has gone to some measures and lengths to isolate from everything else.  And also, if the script hangs, you're able to just kill that one, and it doesn't kill the whole browser.  So we're seeing an evolution in all of that.



LEO:  Once the world is all HTML5, we'll have to obviously handle it.



STEVE:  And I like having - it's like Adobe had too much power and really didn't have - wasn't being responsible with it.  Too many, there were too many...



LEO:  Right.  In terms of security.



STEVE:  Oh, my god, I mean, there have been so many people who have been infected through Flash.  So it's like, eh, they had a shot.



LEO:  Duqu.



STEVE:  Duqu.  I've seen some rumor on the 'Net that we're going to be waiting a month before Microsoft fixes this TrueType embedding problem, which...



LEO:  So just to catch people up, if they didn't see last week's episode, Duqu is another worm kind of similar...



STEVE:  To Stuxnet.



LEO:  ...to Stuxnet that does take advantage of a TrueType font rendering engine in Windows.



STEVE:  Yes.  In the reverse engineering of Duqu, because all the security guys got samples of it, they started checking out, okay, how is this thing propagating?  And they discovered, by looking at how it was spreading itself, a previously unknown kernel flaw in the TrueType font rendering in all versions of Windows.



LEO:  And as we mentioned last week, odd that they put that in kernel, but there you go.



STEVE:  Well, they did it for performance back in the day.  And so this is biting them.  And it's not the first time that them moving GUI stuff, their GDI...



LEO:  Right.  Remember the WMF issue?



STEVE:  ...their Graphics Device Interface, GDI got moved into the kernel, and all kinds of problems.  Yeah, and of course the WMF flaw, too.  So by figuring out what Duqu was doing, they discovered a previously unknown flaw in Windows.  Microsoft is saying, whoops, we'll fix that as quickly as possible.  It did not make it in last Tuesday's, the second Tuesday of the month update.  And now the concern is that other malware will start using it, too.  So all you have to do is cause something to render a font in a specially crafted font that is able then to execute any code that it wants to in the kernel.  And that never has a good outcome.  So anyway, so I just wanted to say to users, to our listeners, that little quick fix that Microsoft has, I talked about it last week, it's still near the top of my Twitter feed.  So you can go to Twitter.com/SGgrc.



LEO:  I have it right here.



STEVE:  And there's a link there that'll take you there.  And click that button, and you're secure.  And then Microsoft will be fixing it for real.  I'm sure for December they'll have this thing ready because this just can't be that hard to get...



LEO:  Does the fix disable TrueType fonts or...



STEVE:  No.  It just disables something you don't need anyway.



LEO:  Okay.  So it's no big deal.



STEVE:  So thank you anyway, Microsoft.



LEO:  Thanks for turning that on in the first place.



STEVE:  So just in the news, everybody's in a big froth about this.  My own Twitter feed has been full of this, is this supposed rootkit that all of the phones have installed by default.



LEO:  What?



STEVE:  HTC, T-Mobile, a bunch of phones.  It's called CIQ, Carrier IQ.  And...



LEO:  This is intentional, though.  This isn't something they accidentally...



STEVE:  Yes.  It's like all the carriers are spying on you.  Boy Genius Report reveals that the HTC Sensation and EVO 3D - and that's like some time ago, and this is all just sort of...



LEO:  Look what it says here:  141,046,720 handsets deployed, right on their front page.  They're, I mean, they're saying everybody uses this.



STEVE:  Yes.  So what this actually is, this is like, everybody calm down.  This is a third party that offers technology to handset carriers to enhance the customer experience.  So this thing, I mean, you can call it a rootkit, but it's part of the kernel.  I mean, it's part of...



LEO:  It is kind of not appropriate to call it a rootkit.



STEVE:  It really isn't.  It's inflammatory, and it worries people.  So the question is, are our handsets spying on us?  Well, yes.



LEO:  We knew that.



STEVE:  They know where you are.  They know what you do.  And so...



LEO:  They didn't need a rootkit to do that.



STEVE:  Precisely.  And so it's - Carrier IQ is the company.  And, for example, Carrier IQ themselves say, "Carrier IQ is the market leader in Mobile Service Intelligence solutions that have revolutionized the way mobile operators and device vendors gather and manage information from end users," which is to say the people walking around with these phones in their pockets.  "Recognizing the phone as an integral part of a mobile service delivery, and using the device to measure key parameters of service quality and usage, the Carrier IQ solution gives you the unique ability to analyze in...."  Now, "you" meaning the carrier.



LEO:  The carrier, right.



STEVE:  "...analyze in detail usage scenarios and fault conditions by type, location, application and network performance while providing you with a detailed insight into the mobile experience as delivered at the handset rather than simply the state of the network components carrying it."



LEO:  So the way they're selling it to carriers is this is to help you in your network management.



STEVE:  Precisely.



LEO:  Network load management, usage, so forth.



STEVE:  And so one way to think of it is that the carrier always was providing your connectivity, but they were a ways back from you.  So this pushes some intelligence out through the cell tower, out to the endpoint, which is your handset.  And so, if a lot of users, when they all open a certain application, their phones crash, well, that's something that you'd like the carrier to know immediately.  And so this provides you with that kind of closing the loop feedback.



LEO:  The concern is that in the process it monitors, not only location, but could monitor what apps you've installed, when you use them, how you use them, how frequently you use them.



STEVE:  Anyone who thinks they have privacy from their carriers about what their phone is doing is fooling themselves.



LEO:  And Sprint says, "We just want to know what problems people are having with their network or devices so we can improve service quality.  It collects enough information to understand the customer experience and how to devise solutions to use and connection problems.  We cannot and do not look at the contents of messages, photos, videos, et cetera, using this tool."  HTC says you have to opt into this error reporting function.



STEVE:  It pops up a screen.  And then you're able to optionally send feedback about the event to explain...



LEO:  We're seeing those screens more and more.  Google, Microsoft, everybody does this now.  Which, when you install OS X, Apple says...



STEVE:  User experience feedback.



LEO:  Yeah.  iTunes, would you like to send information back to Apple?  And you know, the truth is, I've always just said yes.  I think most people are, yeah, I'll help you out.  I want to make it a better product.  So go ahead and collect that information.



STEVE:  Sure.



LEO:  Maybe now, if this is something that worries you, you should think about it.  But you've got the right point, which is they can do this anyway.



STEVE:  Yeah.



LEO:  They've got all this.  It's like your ISP.  Your ISP knows everything you do online.  They have to.



STEVE:  Right.  Right.  So I think the proper area of concern is what the third parties know and can do who have installed apps on your phone.



LEO:  Good point.



STEVE:  And we'll be talking about that a little bit later in this podcast, as we have talked about it for the last seven years.



There was a nice vote in the Senate, 52 to 46, to oppose regulation which was opposing the FCC ruling.  The FCC is currently fighting the large carriers on the issue of Net Neutrality.  And so the good news is that the Senate did what I think was the right thing because there was some legislation that was opposing what the FCC was trying to do.  SANS editor Murray said the FCC rule surrendered to AT&T and Verizon on the air side, where it matters, in return for sites on the wired side, where it doesn't.



LEO:  That's kind of what Google's manifesto with Verizon suggested, as well.



STEVE:  Yes.



LEO:  Don't regulate the wireless carriers.  You can do the landlines fine.  Don't regulate the wireless carriers.



STEVE:  Right.  And Alan Paller, who's the director of SANS, said the answer to William Murray's question "may be that AT&T and Verizon lobbyists, along with those of a few other lobbyists representing IT companies, are now approaching Enron's lobbyists in power..."



LEO:  Oh, boy.



STEVE:  "...to shape federal actions and in disregard for the public good.  Lawsuits by the big carriers who don't want to be bandwidth-neutral carriers are still pending."  So despite this, there is a fight which is underway.  And this is one of the things to watch is to what degree carriers will have control over the way they deliver bandwidth.  Are they common carriers that are just open conduits?  Or do they have the right to give preferential treatment to some services on the network over others?



LEO:  Now, that's the good news.  Here's the bad news.  You know this is American Censorship Day.  Today the Congress is having hearings on SOPA, IP Protect, which are two bills in front of Congress that would essentially turn on, as we've talked about before, an Internet censorship system, H.R. 3261.  And everybody and their brother, including Matt Cutts, I was really interested to see this on his blog - Matt Cutts is of course the antispam fighter for Google we talk to all the time.  He says, "I need your help.  Please call your congressperson."  Let them know, especially if you call them on the phone, he says.  If you live in Texas, Michigan, Vermont, and Iowa this is especially important.  Tell your friends.  Let people know about this SOPA and these SOPA hearings that are going on right now because it would really in effect shut down the Internet as we know it and give, basically give our government the right to censor, based not on due process, but just on...



STEVE:  Well, and this segues perfectly into another article that I wanted to mention.  Ars Technica carried a great piece about Warner Bros. admitting that they issue takedowns for files they haven't even looked at.  SANS gave this some really good coverage.  They sort of created a synopsis of this, saying that Warner Bros. has admitted that it used an automated takedown tool to request the removal of files from the Internet that were obviously not infringing on the company's copyrights.  The case involved Hotfile, a locker site that maintains it is in compliance with the Digital Millennium Copyright Act, the DMCA, because it follows the rules about notice and takedown procedures.  In fact, Hotfile provided Warner Bros. with a takedown tool to facilitate the process in working with them.  Hotfile is now arguing that Warner Bros. violated, that Warner Bros. themselves violated the DMCA when it ordered the takedown of files that were clearly not infringing copyright.  The data used in those takedowns appears to come from an automated data scraper, rather than a human being's examination.



LEO:  We can't be bothered.  We can't be - it's too much trouble.



STEVE:  Warner Bros. says it cannot possibly, okay, quote, "It cannot possibly examine all suspect files due to their sheer volume."



LEO:  There's just too many of them.



STEVE:  But the DMCA requires that copyright holders issue takedown notices only when there is, quote, "a good faith belief that the use of the material in the manner complained of is not authorized by the copyright owner, its agent, or the law."  So now what we're seeing is, we're seeing that these companies have automated scrapers that are going out and just gathering up thousands of URLs and dumping them onsite, saying remove all these.  And when you take a look at them, it turns out they're not, I mean, the scraper has over-scraped, and now this DMCA is being used to hit people over the head.



LEO:  Yeah.  And that's the issue is that these people who don't like piracy, these companies like Warner Bros., would love to just censor sites right and left.  You can see the broad brush and the...



STEVE:  It's like how they tried to prevent VHS tape from ever happening.  They didn't want consumers to be able to have recorders in their homes.



LEO:  So this is a good day to participate.  It's American Censorship Day.  And we just want to encourage everybody who wants to know more, you can go to EFF.org to read more.  PublicKnowledge.org has information on this.  There are lots of sites you can go to read more.  And then absolutely, please, send - electronic is not good.  You want to either write to them, or better yet call them.



STEVE:  Well, you can ignore electronic.  It's like...



LEO:  Well, they also want to know you're a constituent.  So if you mail it to them, they see the postmark.  They really want to know that you're a constituent.  It's fine to write other members of Congress.  But write your member of Congress especially, and do it with a postage mark because that way they know it's you, and you vote.  And we've really got to do this.  Today's the day.  Everybody, please, who's watching.  And it's not too late.  It's not too late.  If you're watching this later, you can get involved.  But I know, those of you who are watching live, we should absolutely do this.



STEVE:  Well, and one of the SANS editors, Tom Liston, followed up with this on this Warner Bros. issue, with something I thought was just exactly on point.  He said, "Warner Bros.' assertion that it 'cannot possibly examine all files' is more than a bit disingenuous.  What they're really saying is..."



LEO:  They just take down the Internet.



STEVE:  "...that they don't want to incur the costs associated with examining the files themselves.  Media companies are all about enjoying the monetary benefits of their copyrights, but are constantly looking for ways to foist the cost of protecting those copyrights off onto someone else."



LEO:  Yeah.  Just terrible.  Just terrible.  You know what I'm going to do?  I think we will - somebody's suggesting this in the chatroom.  I think it's good.  After the show is over, in between this show and TWiG, I'll call my member of Congress on the air.



STEVE:  Ah.



LEO:  And we'll just say, hey, SOPA, [sound effect].



STEVE:  Yes.



LEO:  Because this is just terrible.



STEVE:  Okay.  So last week you surprised me.



LEO:  I did.  I'm so sorry.  But you handled it gracefully. "What?"



STEVE:  Actually I saw, was it - it couldn't have been the chatroom, must have been a tweet.  Someone said, "If we could have a snapshot of Steve's face," which you, on the stream, yeah, exactly, when you said that the sandboxing was going to be for...



LEO:  Apps.



STEVE:  Apps.



LEO:  Desktop applications.



STEVE:  Not iOS, but Mac OS X apps.  So, okay.  What this is, this is not as onerous as the developers have been bitching and moaning that it is.



LEO:  Good.  Okay.  Okay.



STEVE:  This is technology which first appeared in Leopard.  So this has been since 10.5 of OS X.



LEO:  But they didn't require it.



STEVE:  Right.  First of all, all POSIX-based OSes - UNIX, the UNIXes, Linuxes, Apple, FreeBSD, all of these, even Windows - has these things called DACLs, Discretionary Access Control Lists.  And you can see them if you right-click on a file and look at permissions.  There's this very complex, hierarchical...



LEO:  ACL.



STEVE:  ...ACL which controls who is able to access that file.



LEO:  All multiuser operating systems need this.  Otherwise anybody could tree walk the operating system's hard drive and see your files.



STEVE:  Well, and root...



LEO:  Has access to everything.



STEVE:  The root user is god.



LEO:  Right.



STEVE:  It automatically has access to the whole system.  



LEO:  Right.



STEVE:  So what this so-called sandboxing is, is actually something called Seatbelt.  And Seatbelt has been around for a while, as this has been.  It was introduced some time ago.  So this sandboxing introduces something called - instead of being a DAC, a Discretionary Access Control, it's a MAC, a Mandatory Access Control.  Which is to say, it even affects root users, which is what it has to do in order to be effective.  Otherwise, running as root means that you're able to bypass this whole thing.



So the idea is that, in an operating system, at the API, you deal with everything with handles.  You have handles to files.  You have handles to sockets, which allow you access to the Internet.  You have - basically everything works with you wanting, you asking the operating system to open access to something, whether it's a directory or a file or a communications pipe or whatever.  The OS gives you back a token, if you have permission, if you have rights.  And so what Apple has done is they've created sort of a set of useful rights, which applications can request access to.



LEO:  They're called "entitlements."



STEVE:  Entitlements.  And the idea would be, is an application will only request the entitlements that it clearly needs.  And when the App Store is looking at your app and...



LEO:  Validating, approving it, yeah, yeah.



STEVE:  ...validating it for approval, they'll look to see whether you're asking for unreasonable things.  And so they'll say, wait a minute, why do you need access to the local network if you are just doing things on the Internet?  And so the idea would be that hopefully the authors will only ask for the things they need.  There may be some negotiation between Apple and the authors, where the author explains why they need access to the local network.  So, for example, applications that don't really need local network access would not have that entitlement.



LEO:  They'd uncheck the box that says "allow incoming network connections" and "allow outgoing network connections."



STEVE:  Or local connections.  So there would be, in this final version, and Apple is still working on making this granular enough, there would be a differentiation between local and Internet.  But in this example, if an application didn't explicitly have reason to require local network access, then Apple would put up a little resistance to...



LEO:  So they're going to look, when they're validating the app, and say, what did you request?  Will they - and this I would love to do, and this is certainly something that happens on Android - will they then publish that when you download the app, saying, by the way, this app has requested these permissions?  Android does that, and I like that feature.



STEVE:  Nice to be able to see.



LEO:  Apple has not traditionally done that.



STEVE:  And so the beauty of this is, when the application starts up, it puts itself voluntarily into the sandbox, only having those entitlements which it has been - which its code is written to require.  And if anything goes wrong with the app, it, for example, couldn't get local network access, if it didn't have that agreed-upon...



LEO:  It just never can.



STEVE:  It never can.  And that's a good thing.  Clearly that's a good thing for security.



LEO:  So if people were hacked, or a bad guy got into it, or it were a bad guy application, doesn't matter.  You can't write it that way.  But they have to enable sandboxing, which isn't necessarily required.



STEVE:  But we now know that it will be as of March 1st of 2012.



LEO:  And they have to be fairly specific about what entitlements they're requesting.



STEVE:  Right.  And they have to be able to justify those, show that their app actually needs the rights that they're asking essentially Apple and the OS to give them.



LEO:  I presume somebody will write an app that watches installs, or you could run it after the fact, that says here's the entitlements requested.  Because you do create an entitlements file that says here's what I need, here's what I'm allowed to do.



STEVE:  Correct.  And you are able to use that in order to make them additionally granular and then - so anyway, it's a good thing overall, not the end of the world.  And developers are just complaining because they're going to have to do a little more work.



LEO:  But you can still get access to all the things you would have before.  You just are announcing that you're going to do it. 



STEVE:  Yes.  And they're...



LEO:  That is not bad at all.



STEVE:  No, it's not.



LEO:  That's fine.  I could totally tolerate that.  Thank you for looking into that.



STEVE:  So we've talked a lot in our How the Internet Works series about whether there's going to be a need for a second Internet.  I talked about how someone at Microsoft was talking about the Red and the Green Internet, where the Green Internet would be somehow secure from the start, whereas the Red Internet would be the way it is now.  And at a recent talk, Vint Cerf, who is one of the fathers of the Internet who designed these protocols, who is now an Internet evangelist at Google, made a point of saying that there isn't a need to scrap what we have.  Don't throw the baby out with the bathwater is exactly what he said during this conference.  He said what we have is an underlying framework, upon which anything we need can be built.



Now, I would argue there are problems that the fundamental packet processing nature of the 'Net doesn't allow us to solve, like denial of service attacks, because if you have autonomous routing, and anybody who wants to can put any packet they want to on the Internet, and the Internet's routers will attempt to send it to its destination, well, you have a bandwidth aggregation problem that creates the possibility of denial of service attacks.  So that's not a security problem, but it's a problem with the architecture of the Internet.  So it's like, well, okay, yes, certainly we can fix security.  But there are things like traffic flow problems that we're not going to be able to fix unless we re-architect.  And we're not going to do that, either.



LEO:  I guess, I mean, look, it's his baby.  So what he's really saying is, look, we did a good job.  Just...



STEVE:  And I don't disagree.  I think it was brilliant.  It just didn't solve all the problems.



LEO:  Right, right, right.



STEVE:  And we mentioned a little bit Honor Harrington.  I've been very good, Leo.  I've been very good the last few weeks.



LEO:  Sci-fi book group time.



STEVE:  Kris Thurston sent me a note.  He said, "Curse you, @SGgrc, with your sci-fi novel recommendations.  I'm now bound and determined to finish the Honor series.  Second book was ridiculous."  So I thought I would just briefly tell our listeners...



LEO:  Wait a minute.  Ridiculous good, ridiculous bad?



STEVE:  Oh, ridiculous fantastic.



LEO:  Ah.



STEVE:  Like over-the-top ridiculous.



LEO:  Oh, boy.



STEVE:  Like, you know, forget about sleeping.



LEO:  I'm almost through with book one.  I've been diverted by the Steve Jobs book and other things.



STEVE:  Yeah.  And Mark Thompson read the Steve Jobs book.  He doesn't read anything.



LEO:  Yeah.  Well, it's fascinating.



STEVE:  And he, apparently, was - I guess Isaacson was pretty ruthless.



LEO:  Oh, yeah.  It's not in any way...



STEVE:  A whitewash.



LEO:  ...a whitewash.  But it's what Steve - I think it's what Steve wanted.  He wanted an honest book.  He said, "I'll read it later." 



STEVE:  Yeah, well, and Steve asked, he said, "Am I going to like - are there things in here that I'm not going to like?"  And Isaacson said, "Yeah, there are."  So it probably all worked out for the best with the timing of all this.  But anyway, I am 40 percent, I think, into book seven of Honor Harrington.



LEO:  Great.



STEVE:  My legs have never been in better shape.



LEO:  Because you only read...



STEVE:  No, I don't.



LEO:  ...on the treadmill.



STEVE:  I could not, I could not keep that promise to myself.  But I also read on the treadmill.



LEO:  How many are there?  How many are there?



STEVE:  12.



LEO:  12.  Well, you'd better slow down, dude.



STEVE:  I know.



LEO:  You've only got five more.



STEVE:  But we do have Hamilton.  I never did read, I never got into the Dream Void, whatever that thing is.



LEO:  The dream, the void?  Oh, that's quite a bit.  That'll keep you busy for a while.



STEVE:  That'll keep my legs in good shape, yeah.



LEO:  All right.  Well, I have to redouble my efforts to read more.



STEVE:  So I wanted to share a listener report.  Daniel White, a listener of ours in Bristol, England, caught me, caught my eye with a subject of "SpinRite cost me a laptop."



LEO:  Uh-oh.



STEVE:  "But that's okay," he says.  "Hi, Steve.  Here's yet another testimonial for you, if you want to use it on the Security Now! podcast."  Well, and what do you know.  "Last month a friend of mine mentioned that his old HP Pavilion laptop had just given up and was producing the dreaded 'boot device not found' error.  He was a bit annoyed because he had some family photos on there, and naturally he didn't have any backups.  Ordinarily I would understand, but the friend in question has a master's degree in computer science."  So he should know better.  But then, shouldn't everyone.



"He was ready to toss the laptop out, as he said it had been running like a dog for months and had been running so hot that the adhesive holding the rubber feet on the bottom had melted.  I suggested that there was probably a way to fix the hard disk and get his data back, and it would be a lot cheaper than buying a brand new machine.  SpinRite could have a try at recovering the disk; and, if it couldn't fix it, then the drive was definitely toast.



"My friend made me an offer.  He said he would pay for a copy of SpinRite to use on his drive; and, if it worked, I could keep the copy of SpinRite.  If it didn't work, I could keep the dead laptop so I could buy a new drive and resurrect it myself.



"I purchased a copy of SpinRite, burned a boot disk [meaning a CD] and set it running at Level 2.  At 18 percent of the way in, DynaStat kicked in and churned away for a while before reporting the sector had been recovered.  I left SpinRite to complete the disk, just to be sure, and two hours later" - okay, not two months, Leo.  I've done some testimonials here that I think have scared people.  It's only normally a couple hours.  "...[T]wo hours later it completed with no further errors.  I rebooted, and voila.  Windows Vista booted right up the first time.  I was so pleased to have got a free copy of SpinRite.



"I asked my friend if he wanted to speed up his system, and he said I could try.  I found to my horror it still had all the crud that HP preinstalled on it, as well as two antivirus packages and only 1GB of RAM.  I deleted all the HP crud, removed the out-of-date AV suite, and installed an extra 2GB of RAM for him.



"He now says his laptop runs better than new, and I have SpinRite to thank for getting his drive back.  Thanks to you and Leo for such a fascinating podcast, and thanks so much for making SpinRite such a great product.  It may have cost me a laptop, but at least I got a free copy of SpinRite.  Dan White, Bristol, England."



LEO:  Hey, when it's broke, it's broke; right?  What are you going to do?  There's nothing you can do about it.



STEVE:  And it worked.



LEO:  We were mentioning the SOPA hearings that are going on right now, and I just wanted everybody to know, if you go to EFF.org, they have a big banner on the front page.  I know it's up and down.  There are so many people doing it right now.  And if you look at my screen right here, they'll take you to a page where you enter your zip code.  And they give you, they couldn't make it easier, the phone numbers of each of your representatives and senators, and they even give you texts, suggested texts.  You can send an email, but I would suggest instead, and I would like everybody watching this show, that you call that phone number and just say I'm calling, I'm a constituent of, in my case Rep. Woolsey.  And I would just really strongly ask Rep. Woolsey to not pass the Stop Online Piracy Act, the SOPA Act.  It is bad for the Internet.  It is bad for the country.  Please ask her to vote against it.  That's all you have to do.  They just keep track of all the constituents who call.  And I think it's a very valuable thing to do.  And we will do it after the show.



EFF - see that bar, by the way?  I put that on my website, as well.  In fact, we should put this on the TWiT website.  If you go to Leoville.com you'll see this big thing pop up.  And this is what we're talking about, folks.  We don't want to allow this kind of censorship to happen.  So when you go to my site you'll see that.  And I think every - by the way, if you click that link, "Stop Censorship," you can get the code to put on your site.  Let's get everybody.  Let's get everybody today to put this on their front page and let everybody know about it.  This is a great way to spread the word.



STEVE:  So there's a lot of tension, and this is an example of what you're talking about, of the tension that exists between content providers and content consumers.  And the conference that I attended yesterday spent a lot of time talking about the tension that exists in the privacy side of this.  And...



LEO:  Well, I have this - I am a kind of living example of this because we - this is a free product.  And in return for this free product we sell you advertising.  And the more we - if we know a little bit about you, we can sell more appropriate ads.  We don't actually have to pry.  But you're getting Facebook for free, and the trade is you give them some information.



STEVE:  Yes.  And one of the things that - one of the speakers yesterday made the point about the phenomenal amount of value that targeting brings.



LEO:  Sure.



STEVE:  Because, I mean, in the old mass mailing days, the rule of thumb was maybe a fraction of a percent of the people who received a mass mailing had an interest in it.  So your effective cost was hundreds of times what it would be if you somehow had a way just to send something to the people who are actually interested.  So...



LEO:  And, not only that, you're getting bombarded with mail you couldn't care less about.



STEVE:  Yes.



LEO:  It adds to your junk mail.  So targeting is not just good for the advertiser, it can be very good for the consumer.



STEVE:  Yeah.  And I would say overall the conference raised more questions than it answered.  It was heartening to see a bunch of people gathered together, talking about this.  I mean, there were people in the industry who were on the side of talking about solutions to the problems.  There were companies who were looking for guidance, like what they should do from a policy standpoint.



And one of the points was made that was obvious to all of us, but it was good to hear it explicitly stated, was the degree to which mobile devices are a source for far more personal information than PCs ever were because the device itself knows much more about you.  It's got your contact list.  It's got - so much of your personal information is being stored on this device, more so than a PC, which traditionally has been more of a workstation where you did documents and web surfing and kept your - you weren't merging it with your phone.  Well, now the phone has subsumed a lot of the functionality of the PC.  So, and of course it also knows your location, which is additional information.



Now, the other thing that there was a lot of discussion about was this whole concept of reputation, which is one of the things we're beginning to see more and more.  There was an acknowledgment that there's a lot of noise, that there's a fundamentally high signal-to-noise ratio, or a low signal-to-noise ratio, meaning that a lot of users try to find the signal amid the noise.  And one of the reasons is, for example, that there's no notion of who it is, for example, who posts a blog comment.  Anybody can post a blog comment.  And they're all equally rated.  So wouldn't it be nice if there was, like, some feedback system, some way for people to be authenticated, thus the identity side of this, and for people to carry a reputation around that they don't have control over because what a reputation really is, is information about you that other people have, rather than just being your own data.



So one of the other little tidbits that I thought was interesting was one person commented, and I jotted it down because I thought it was a little frightening, that data which the government cannot legally get without a warrant, it's able to purchase.



LEO:  [Laughing]



STEVE:  So there are laws...



LEO:  Because you gave it to some site.



STEVE:  Exactly.  And it turns...



LEO:  So it's legal to purchase it, even without a warrant.



STEVE:  It turns out...



LEO:  Because you gave it up.



STEVE:  ...that the government is a huge customer of all of the data that we're trying to keep control over because it...



LEO:  That's why the CIA investment arm put some money into Facebook.  It's a good thing for government.



STEVE:  Precisely.



LEO:  Yeah.  Oh, man.



STEVE:  So I thought, whoa, there's a little takeaway.



LEO:  That's really interesting.  So it's legal for them to buy information without a warrant if you have made it available somewhere.



STEVE:  If it's available on the market.



LEO:  If it's publically available.  Wow.



STEVE:  If it's - yeah.  And so aggregators are pulling this stuff together and selling it to Uncle Sam.



LEO:  Sure.  I know they go down to courthouses now, and they scan real estate records.  Those have always been public, if you went down to City Hall or the courthouse.  But by scanning and putting them in a database, they're making public to everybody, anybody who has the buck 50.



STEVE:  There was an interesting story, actually, that came out yesterday.  There's a company called Reputation.com that special...



LEO:  Yeah, Reputation Defender, yeah.



STEVE:  That specializes in helping people.  And back in 2009 someone came to them and asked for some help.  He was in his mid-50s and had been unable to close the deal on getting a job.  And he finally - and he, like, would go through interviews, and everything would seem fine, and then they would hire somebody else.  Turns out, when you Googled him, the first link that came up was to a crime which this person had committed in his youth, that he had been convicted for and had served a year of hard time for.  And so the question was, well, he wasn't getting the job because this information had been scanned in about him as records were being put on the Internet.



LEO:  Exactly.



STEVE:  So this was back...



LEO:  You used to have to go to the courthouse.  Not anymore.



STEVE:  Right.  And so this was online.  And the guy who told the story said, you know, our justice system, this person, when he was young, made a mistake.



LEO:  Paid his dues.



STEVE:  Paid his debt to society.  But now - that was offline.  How does he ever make up for that, now that this information is online?



LEO:  It's something that I'm very aware of, and I know when I talk to kids they're very aware of.  The problem is, with sites like this, is they can only do so much.  And one of the things I tell kids today is you need to - the reason this worked is because this guy had nothing else on the Internet.  If he had a blog, if he had other stuff...



STEVE:  The link would be pushed down.



LEO:  It would have been pushed down.  But because it was the only link about him, it was the No. 1 result.  So I think really important as kids, I tell kids this all the time, you need to - I hate to say this, but you need to start creating your reputation online now.  If you did something great or made some great music or scored a touchdown, start a Tumblr log - it's cheap, it's free - and have it there with your name on it because the more stuff you put online now, the more likely that's the good stuff that will surface about you.



STEVE:  And there was actually some commentary about that yesterday.  There was somebody who talked about going through a process of interviewing people.  And what they said at some point of the process was, give us your Twitter handle, your Facebook ID, your LinkedIn ID, because they want to do research on you.  And the point was that they were finding that they were better able to hire, that is, they were hiring people who turned out to be better than they would have hired if they didn't have access to that.  That is, somebody who perhaps didn't interview that well, or didn't have an impressive rsum, but when they looked at who they actually were over time, they said, wow, look what this guy can do.  Or, like, wow, he writes poetry.  I want to get to know him a little bit better.



LEO:  Right, right.  So unfortunately, if you haven't been doing that, I guess these sites like Reputation.com are useful.  But there's only so much you can do after the fact.  I mean, I don't know about Reputation.com.  What Reputation Defender does is they'll create a lot of sites with your name on it and recipes and things, just kind of random fake sites.



STEVE:  Oh, so they're spamming.



LEO:  In effect they're spamming the Internet to try to bring your reputation up.  Much better for you to start today and do it.  And I think everybody who watches our show we don't have to worry about.  But that's an important thing for kids as they're even in high school now, start making a reputation for yourself.



STEVE:  Well, and be conscious of the fact that a reputation is...



LEO:  Everything you post...



STEVE:  ...online.



LEO:  ...is going to be seen. 



STEVE:  Yeah, and people do care about that.



LEO:  Even stuff that you wish weren't online.



STEVE:  So two really interesting products.  One is, like, top of the list.  This was on my radar.  It's on my list of things to get to one of these days.  And I had the really unique benefit of two of the main developers of this thing appearing and presenting.  The product is called Disconnect.  If you just Google the word "disconnect," it's the first link that comes up.  The URL is Disconnect.me, as in, obviously, Disconnect Me.



LEO:  Oh.  Look at this.



STEVE:  Brian Kennish and Casey Oppenheim presented.  Brian started at - I don't see it here in my notes, so I've thrown myself off the track.  I'll just remember.  He started at DoubleClick.



LEO:  Oh, okay.  So he certainly knows about this stuff.



STEVE:  He knows about privacy.  Or lack of.  Or information gathering.  Then he was at Google and worked on Chrome development.  And while doing that he was poking around at what Facebook was doing and was alarmed at how much - at, like, the amount of information about you that was going - that your browser was involved in passing between Facebook apps and your Facebook persona and the Internet.  And so he first created something called Facebook Disconnect, which was a Chrome-only extension, and then broadened it to just Disconnect, which is now Chrome, Firefox, and Safari.



LEO:  And free.



STEVE:  And free.



LEO:  Love this.



STEVE:  I am very impressed.  This thing disables third-party traffic.



LEO:  Now, aren't we supposed to be able to do that anyway, just by checking that box in the preferences, say no third-party cookies?



STEVE:  Well, third-party tracking is different than third-party cookies.



LEO:  Ah, okay.



STEVE:  So tracking is more pervasive than just cookies.  So it disables third-party tracking, truly depersonalizes searches, shows blocked resources and cookies, lets you easily unblock services, and it's free.  They have tried not to have it break things.  Sometimes it may be a little too aggressive, in which case you can tell it to back off if there are things that don't work, a little bit like NoScript, that can be too aggressive.  But anyway...



LEO:  Is it mostly through cookies?



STEVE:  No, referrer headers, for example, and other headers.  It'll sanitize the browser transactions in order to pull out any personally identifiable information and just things that, from taking a look at it, look questionable.  So I haven't yet had a chance to play with it because, as I said, it was on my radar.  These guys talked about it.  It's Disconnect.me.  And to me it looks like a win.



LEO:  I just installed it.



STEVE:  So I'll know more about it next week, but I wanted to give all of our listeners a heads-up about it right now.  And the second thing that...



LEO:  How is it different from Ghostery?  Strengths [ph] in our chatroom wants to know.  Well, Ghostery lets you know what's going on.



STEVE:  Yes.  Ghostery is a viewer only.



LEO:  Right.  That doesn't block anything, but this does.



STEVE:  Right.  Ghostery shows you what tracking is going on.  This thing actively works at blocking tracking.



LEO:  It will show you, though, what it's blocked.



STEVE:  And it also does show you, yes.  So you have visibility into it.



LEO:  Right, right.



STEVE:  Yeah.  Okay.  So they're also involved in another project, which I think is really interesting.  They call it the Privacy Icon Project.  And after they got it up and going, they started talking to Mozilla.  And Mozilla has gotten themselves involved in this.  What they realized was - and it's the same guys.  You can learn about this at Disconnect.me/db.  The goal of the Privacy Icon Project is to convert all companies' inscrutable, un-understandable, fine print privacy policies into just four icons.



LEO:  Oh, that would be nice.



STEVE:  They used to have five, but they managed to distill it down to four.  And you can read about and see the icons.  So the idea would be that this would be crowd sourced; that people would read companies' policies, figure out what they mean and which icons they deserve, and then collectively put this into a database.



LEO:  This is great.  So your data may be used for purposes you did not intend.  You data is used only for the intended use.  Your data may be bartered or sold.  Your data is never bartered or sold.  Your data is given to advertisers.  Your data is not given to advertisers.  Your data may be given to law enforcement even when legal process is not followed.  And then how long is your data kept for.  Interesting.



STEVE:  So the idea would be that...



LEO:  I like this.



STEVE:  And what Mozilla is looking at doing - because there would be a JSON API that would allow automated access to this database.  So Mozilla would end up adding this to the UI of the browser.  So when you go to a site...



LEO:  Love it.  Much easier.



STEVE:  ...the appropriate privacy notification icons appear.  And after a while you would get to know what they meant.



LEO:  Brilliant.



STEVE:  Just a fantastic idea.



LEO:  Brilliant.  Now we've got to get the people crowd sourcing it.



STEVE:  And what they found was, as they began to do this, there was true differentiation among sites.  That is, I mean, Yahoo! was very different than Google in the way they handle user data and the whole privacy domain.  So this is Disconnect.me/db for where this effort is at the moment.



LEO:  And it's green if it's good, and it's yellow if it's bad.  So, for instance, PayPal retains data indefinitely, may share with law enforcement without legal process, but your data is not shared with advertisers, bartered or sold, but it may be used for unintended purposes.  So that's great.  It's very clear.  Love that.  Love that.



STEVE:  Yeah, yeah.  It's a nice step forward.  Now, final little piece of something very tantalizing is called OneID.  It's OneID.com, or you put OneID into Google, it's the first link that comes up.  We got a presentation yesterday from Steve Kirsch, who is - he describes himself as a "serial entrepreneur."  He was the money behind InfoSeek; FrameMaker back in the day.



LEO:  Oh.  Love FrameMaker.



STEVE:  I know.  He says about every six years something comes along that motivates him.



LEO:  What an interesting guy.



STEVE:  He is tackling the single sign-on problem.  That is...



LEO:  He won't be the first.  I mean, Microsoft tried this with Passport.



STEVE:  And VeriSign with...



LEO:  VeriSign, everybody.



STEVE:  ...VIP and SecurID and so forth.  So it's why it's easy to be skeptical.  It's easy also to get caught up in his enthusiasm because he does, he comes across as a high-energy, we can make this happen, we've got the money, we're going to do this guy.  There's a video on his site which is only about a minute and a half, which is worth watching.  It explains the concept.  And what they've done is they have a website, and then the installation of a client on your system, which talks to a remote repository of identity, and then that talks to a device.  And in his example he was using, for example, an iPhone.  But there would be different clients for BlackBerries and iPads and so forth.  And the idea being that, if you globally turn your access on, there's like a big - it looks sort of like Hal's eye on "2001:  A Space Odyssey."  It's got a big "ON" on it.  If you turn that on, then you're able to log into sites with a single click.



LEO:  I like that.



STEVE:  And you're able to specify...



LEO:  So it's exchanging a token behind the scenes.



STEVE:  Well, it's exchanging a myriad of tokens.  This thing's got arrows pointing in every direction, every which way.  I mean, I drew the diagram, and he just gave a very quick overview of the way the thing works and what the process is.  I mean, he's going to - if you go to OneID.com, you can register to be notified when you're able to register nicknames.  And if this thing takes off and succeeds, you're probably going to want to have a cool nickname.  So it's like, don't we wish we'd gotten into Twitter from, like...



LEO:  I'm going there right now.  I'm going to get my nickname, yeah, yeah.



STEVE:  Exactly.  So it's supposed to be in beta early next year, I think March is what I remember, and pre-beta or alpha, like, next month.  So this is not years away.  He did show an impressive slide of all the different organizations that he has interested in this so far.  And so we'll see.  I mean, there's a little bit of a chicken-and-egg problem.



LEO:  Yeah, because you'd have to have Amazon or whoever participate; right?



STEVE:  Yes.  You'd have to have enough people involved that it was worthwhile for you.  And I raised my hand, and my question was, okay, what are the economics?  Like, why are you doing this?  Who pays?  And the answer was, it's free for you, and it's free for them.



LEO:  So who pays?



STEVE:  Until you are using it so much that it is clearly beneficial.  And then some sort of a micropayment or a charge a buck a month thing, something kicks in.  And he wasn't clear.  And other people said, well, what about if I lose my iPhone, blah blah blah?  And he said, yes, we know, we know.  There's, like, 50 different scenarios for bad stuff that can happen, and we've got it all taken care of.  So it's like...



LEO:  Yeah, it's interesting.



STEVE:  ...well, I hope, you know, we can cross our fingers.



LEO:  There have been a lot of people trying this and failed.



STEVE:  It's been tried before.  So I just wanted to give our listeners a heads-up, on the chance that this is the one that works.  And it has...



LEO:  I get some of these benefits from LastPass.



STEVE:  Yes.



LEO:  But not all.



STEVE:  Some from LastPass, some from SecurID, some from VeriSign's VIP.  But not all.  And he makes the point, he is able to attack every one of those as what's wrong with these solutions.



LEO:  Why people don't use them or whatever.



STEVE:  Well, exactly, that this doesn't have.  So the idea would be that you're able to globally enable or globally disable this system.  So if you know you're not logging into anything, you press Hal's big red eye, and it just shuts the entire network down so nobody anywhere...



LEO:  I like this.



STEVE:  ...is able to log in as you. 



LEO:  I like this.



STEVE:  And you're able to also, with granularity, say certain sites need, like, second-factor authentication.  So, for example, a banking site could say we want to support OneID, but we want to require on-the-fly verification that it's you.  So when you try to use OneID to log into the banking site, it will send a prompt to your phone that requires you to acknowledge it on the fly, type in a PIN, or respond to something that you saw on the website in your phone to confirm that you've got multifactor authentication.



LEO:  I'm liking this.  I'd love to see this work.



STEVE:  There's a lot of benefits to it.



LEO:  You know what's changed is that we all have smartphones - or not all, but many of us have smartphones now.  That was something that didn't happen...



STEVE:  It was a gating factor.  And so there's a zero cost aspect to it because it's a matter of...



LEO:  Right, you don't need a token.



STEVE:  Right.



LEO:  Steve, it's so nice to have you here.  Would you just come up every week and do the show?



STEVE:  Yeah.



LEO:  Normally Steve's down in Irvine.  You can catch him at the Starbucks there by UC Irvine, reading his Kindle.



STEVE:  Having my 12 shots.



LEO:  Wearing his little cap, drinking a big tall latte.  And of course he joins us here every Wednesday at 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 1900 UTC.  So you can  tune in, watch the show, learn about security, learn about privacy, keep yourself up to date on everything that's going on and a few little side things like Kindles and sci-fi.



STEVE:  I'll have a review of...



LEO:  I'll be very curious what you think of this.



STEVE:  I'll have my opinion for our listeners next week.  I won't drag everyone through a...



LEO:  Doesn't it feel good, though, in the case?  It's a little heavy, but it feels solid.



STEVE:  Yeah, I like it.



LEO:  Feels like a book.



STEVE:  And I'll just remind people that the first Kindle was an ugly duckling, too, and they fixed it.  And so if they could, I mean, remember, this thing has so much potential...



LEO:  I'm taking it back.



STEVE:  Oh, he wants it back.  Well, mine's at home, so...



LEO:  Okay, you can play with it.



STEVE:  That's all right.  I'll have it in a few hours.



LEO:  It does have a lot of potential.  And with Amazon behind it...



STEVE:  I wouldn't rule that out.



LEO:  Wouldn't bet against them, yeah.



STEVE:  I wouldn't bet against them, no.  And so I'll talk about that briefly.  And I'll have some more information about Disconnect.me, or Disconnect next week.  I wanted to give our listeners a quick heads-up.  And I'll be following OneID because, as we said, we're going to want to be part of the one that works, and it might be this one.



LEO:  Yeah.  We will, of course, answer questions, too, next week.



STEVE:  Yes.



LEO:  It's a Q&A.  So if you have a question for Steve, go to his website, GRC.com/feedback.  There's a form there.  Not email, that's the way.  So GRC.com/feedback.  You'll go through the most commonly asked questions, answer them all next week on our next episode, 328.  You can also find SpinRite there, the world's best hard drive and maintenance utility.



STEVE:  Yay.



LEO:  Sis boom bah.  You'll also find lots of freebies and information about Password Haystacks (better passwords through padding), his Perfect Paper Passwords, and a whole lot more.



STEVE:  Oh, Off The Grid is all finished.



LEO:  Is Off The Grid done?



STEVE:  I haven't put the link, I haven't made the grid, I haven't made the pages public.  I'm still working on the documentation.  But all the technology is nailed down.  Anyone who wants to begin playing with it, the grid printing technology is all there and finished.



LEO:  It's like having - you're like our Xerox PARC.  You're our little research R&D lab.  And he's got his hands in a lot of different things.  He's always doing something interesting, and we get the benefit of it.  So it's all there at GRC.com, including 16Kb versions of this show for those who want the smallest possible version; transcripts, as well, if you like to read along.  I guess that's an even smaller version, really.  It's just text.  We have the audio and video on our site, TWiT.tv.  Thanks for joining us, and we'll see you next time on Security Now!.



STEVE:  Thanks, Leo.



LEO:  Thanks, Steve.

	

Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#328

DATE:		November 24, 2011

TITLE:		Listener Feedback #131

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-328.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



LEO LAPORTE:  It's time for Security Now!, the show that talks about security online, privacy online, and a few other side issues like Vitamin D, eReaders, and science fiction.  And that's all because our guy, Steve Gibson - the man, the myth, the legend - besides being a security expert, is a man of the world and has many interests.  Good cabernet, we should include.  We've yet to do a show on cabernet, however.



STEVE GIBSON:  Oh, we'll let John handle that.  Dvorak.



LEO:  Hey, Steve.  How are you?  Yeah, Dvorak is the wine wiz.



STEVE:  We're sneaking this in under the wire of the Thanksgiving holiday.  Elaine, in fact, shot me a note, since she does our transcription, saying, uh, it might be a day later than usual for the transcript.  And I said, well, yeah, of course.  You need turkey along with the rest of your family.



LEO:  Oh, yeah, a holiday, that's fine.  I do hope everybody's planning - everybody in the U.S., anyway, is planning a good Thanksgiving.  You have to say that because in Canada they had Thanksgiving last month.  And the rest...



STEVE:  What?



LEO:  Yes, they do it in October.  And the rest of the world's going, Thanks-who-ing?



STEVE:  Yeah.  I also got some reminder of what an international audience we have when I guess I tweeted, yeah, it was, I tweeted a reminder about daylight savings time on Saturday afternoon.



LEO:  I saw that, yeah.



STEVE:  And I got a lot of people saying, eh, we did that last week.  It was like, what, uh, what?  Where?



LEO:  Yeah, the U.S. changed it...



STEVE:  I know.



LEO:  ...a couple of moons ago.



STEVE:  That was an annoying year.



LEO:  Broke a lot of things, yeah.



STEVE:  Lot of machines didn't know yet, so.



LEO:  That's right, that's right.



STEVE:  In fact, I have a clock that says, "New daylight savings time or old daylight savings time?"  It was built at a point when it was before the switch, but it knew it was coming.  So I thought, well, that's pretty cool.



LEO:  I think there are two interesting movements afoot that have no hope, but I would - actually three.  I'm going to give you three movements that have no hope because we're so entrenched in our way of life that I think just anybody with common sense supports.  One is getting rid of daylight savings time.



STEVE:  I'm there.  That's my choice, Choice A.



LEO:  Eliminate it.  Two is getting rid of the penny, which nobody uses, and that copper is expensive.



STEVE:  More than a penny.



LEO:  More than a penny, right.  But still, no point.  And three, get rid of the electoral college because clearly that does not work.



STEVE:  Yup.



LEO:  And all three, any thinking person - actually, though, of the three, daylight savings time might be the one that somebody could dispute.  Any thinking person I think would agree on all three.  And there's not a chance in hell that any of them will happen.



STEVE:  No.  I would also argue that, well, there's many problems with our political system.  But it is a problem that the Senate has as much power as it does because you get overrepresentation of very low...



LEO:  Low population, yeah.



STEVE:  ...low population states.



LEO:  And that's exactly why, to really go off track, you'll never get rid of the electoral college because it gives these states like Wyoming more power than a state like California because they're a small population, but you've got your two senators, so you've got your two electoral votes guaranteed.  And they're never going to go for it.  So anyway...



STEVE:  I promised Eileen that we would remember to tell our listeners about the TWiT plan for the holidays as it affects Security Now!.



LEO:  Oh, good.



STEVE:  And that is, apparently we're not going to, I mean, we couldn't run the Portable Dog Killer episode again anyway because we got away with it once, and I got a lot of complaints saying, well, Steve, you broke your "we've never missed a week" commitment.  It's like, well, okay.  But so tell us all what it is that you guys are going to do.



LEO:  Do I know?



STEVE:  Yeah.  It's like a "best of."



LEO:  Oh, yeah [laughing].  Oh, that.  I'm looking, "Eileen?  Eileen?"  Yeah, we're doing - so this is actually - it's good.  I'm glad you mentioned it because I do want to send people to the "best of" page so they can help us because - I would say cast your vote, but it's more than that.  Help us by picking your favorite moments from the past year.



STEVE:  But it's moments.  It's favorite moments.



LEO:  We don't want to do a whole show like we did last year.  We want to get bits.  Now, this is a little to tougher on this show because this show is really very fact-based, and there's not a lot of wacky, Steve dresses in a kilt moments.  So...



STEVE:  Well, and, yes.



LEO:  We may do the Portable Dog Killer if we don't get enough votes.  Let's put it that way.



STEVE:  Someone commented that when you, a couple weeks ago, told me that it wasn't just iOS that was being sandboxed, that the announcement was affecting the App Store for the main OS X, apparently my look on the camera as I just stood there with my mouth open, looking like a moron...



LEO:  That's a moment.



STEVE:  He said, oh, now, that's one we've got - the problem is it doesn't translate very well into audio.  All you get is silence from me, so.



LEO:  It may be - we may have to punt on this one.  But if we can come up with a half an hour to an hour worth of great Steve moments from 2011, we'll do it.  TWiT.tv/bestof.  And it's not just this show.  We're hoping to do every show a "best of" because we like to take the week after Christmas off.  I'm going to go back East and visit family.  And so we want to give all our hosts the time off, as well.  So...



STEVE:  Well, we certainly - I was going to say, what we certainly can do, although this doesn't help us this year, is everyone be cognizant of this approach for 2012 and make notes of things that you think would fit.



LEO:  We did it last year, but nobody remembered.  It's always a last-minute thing.  At least we're planning this one in November instead of the last week of December.  So TWiT.tv/bestof.  Your help is much appreciated.  Favorite moments.  And it could be - in this show it wouldn't be, like, wacky moments.  It would be important security news.  Your Bitcoin piece, for instance, I thought was very interesting.  I wasn't here for that.  Should be - I think parts of that should be repeated.  I think we should probably repeat your discussion of Stuxnet.  There are certain things that were newsworthy.  So it doesn't have to be goofy.  It really could just be the big...



STEVE:  Things that bear repeating.



LEO:  The big stories of 2011 I think would be perfect.  So keep that in mind.  And of course...



[Talking simultaneously]



LEO:  Yes, I'm talking to you, folks.  And if nothing happens, Portable Dog Killer.  The problem is, repeats of a podcast are kind of silly because you can download that episode and listen to it anytime you want.  That's why we prefer the "best of," because that's something that we put some work into.  Then one episode has just the highlights of the year, and I think that's a really great thing to do.



STEVE:  Let's hope we can have it.



LEO:  Yes.  The passwords would be good.  I mean, I can think of a lot.  Actually, I'm going to probably sit down and go through and say this one, this one, this one, this one.  Because I think there's some really important newsworthy things that we covered this year.  But...



STEVE:  In the meantime.



LEO:  In the meantime, all that aside, I think you and I have some stuff to talk about from this week.



STEVE:  We do indeed.  We're going to follow up on - I have some statistics from what happened to the SOPA, the Stop Online Privacy Act event which you and I covered as it was happening, on the day of it, last Wednesday, when I was up in-studio with you.  And some interesting tidbits of news.  Some feedback.  Also we'll talk about my experience with the Kindle Fires that arrived.  I had ordered two of them.  And so forth.  So I think we've got another great podcast for everybody.



LEO:  You know what arrived today?  A Nook tablet.  So we might compare the Kindle tablet to the Nook tablet.  Very similar, actually, in hardware.  This one's a little faster because I think the extra RAM has made a difference.



STEVE:  It might, although it has the same dual-core OMAP processor.



LEO:  Processor's the same.  But I noticed the page turns are much more smooth.



STEVE:  And I notice that it's being advertised by your friend from Glee.



LEO:  Yes, it is, Jane Lynch.  Did a great job.  No matter what she does.  So let's talk.  What's new in security news?  I guess we'll start with SOPA.



STEVE:  Well, yeah.  This was the reaction to this legislation, which was being viewed by many very popular websites as the most onerous and worrisome, sort of over-the-top government privacy-violating legislation yet - more so than the Protect IP legislation, which is probably, hopefully, thankfully stalled in the Senate.



LEO:  That's the Senate version.  Ron Wyden, all praise to Ron Wyden, who said "I'll filibuster it.  I'll stop it."  So we know that's not going to get through.  Although the thing is, these keep coming up.  I mean, maybe there'll be another one.



STEVE:  Yes.  I mean, one of my favorite slogans, unfortunately - I'm very active in following U.S. politics.  And my favorite phrase is "The best government money can buy."



LEO:  Yeah.  Bought and sold.  But the thing that - I think this is a very good lesson.  The thing they do with that money is essentially get votes; right?  So ultimately we have more control as a group because our vote is the final arbiter of whether somebody gets in office.



STEVE:  That is true.  And so of course, well, we don't really want to devolve into a political discussion.



LEO:  No, please.



STEVE:  Special interests end up with disproportionate strength.



LEO:  But we are special interests when we act in concert.  And that's what the Internet has done, and that's what's so exciting.



STEVE:  Well, the bad news is we're fighting the MPAA and the RIAA and these large organizations that keep putting pressure to make these things happen.  And in fact...



LEO:  They want to break the Internet, frankly.



STEVE:  Lamar Smith, who is the Texas Republican representative who's one of the sponsors of this bill, the SOPA, Stop Online Privacy Act bill, he said, "Well, you know, I'm not technical."  Well, okay.  And this is the problem, is that one of the many things this does is it breaks DNSSEC.  That is, DNSSEC is all about preventing DNS spoofing, which is essentially what this is, is legislated, government-backed DNS spoofing.  And so many of the people have been concerned because essentially it means we can't have DNS security if we're going to have a mandated, legislated, deliberate breakage of DNS.



LEO:  Because Lamar Smith says it's one quarter of all the Internet traffic is offensive infringement, and we're going to stop it.



STEVE:  Yeah.  He said one quarter of Internet traffic...



LEO:  One quarter.



STEVE:  ...is infringing.



LEO:  And you know he's being spoon-fed that from the RIAA.



STEVE:  Precisely.  Now, the good news is there was a serious groundswell that resulted, peaking last Wednesday during this day of everyone being called up and out to act.  One million emails were generated to U.S. representatives by people around the country that cared about this.  I don't know how they have this number, but 87,834 telephone calls.



LEO:  That was from Tumblr alone.  Tumblr...



STEVE:  No kidding?



LEO:  Yes, that's the Tumblr number.  Tumblr.com was very aggressive because they would be one of the companies that would really be screwed by this.  They'd suddenly be responsible for every bit of content on their - and they're one of the biggest web hosts in the world.  And they didn't want - so they were very aggressive.  And that count comes from Tumblr.com alone.  Talk about a great response.



STEVE:  Wow.  So the average length of those phone calls was 53 seconds.  The longest one was 31 minutes.  Got to feel sorry for the representative who got on the other side of - hello?  And a total of 1,293 hours of phone calls were spent talking to representatives.



Now, I wanted to give our listeners who care about this, as you and I do, a URL, because this is being organized around AmericanCensorship.org is the website.  And at the top of their website they mention, essentially, distill it down to three bullet points that I thought were worth sharing.  So under "Website Blocking" they explain that the government can order service providers to block websites for infringing links posted by any users.  And they said "Risk of Jail for Ordinary Users."  They explain, "It becomes a felony with a potential five-year sentence to stream a copyrighted work, even if you are a totally noncommercial user, for example, singing a pop song on Facebook."



LEO:  Well, and we do this all the time, and it's our position that it's fair use as a news organization.  It's protected.  But that doesn't mean that they don't take our shows down all the time.  And we would be faced with prosecution.  And we might be able to defend ourselves; we might not.  But it would certainly cost us a lot to do so.



STEVE:  And remember, it's certainly possible for people to take the position, oh, well, yeah, but that would never happen to a regular user.  But let's remind everyone of the case of the innocent mom of, like, I think her kids were, like, three and four years old, who was attacked by and sued by the MPAA for movies that were found on her machine which were loaded and being redistributed by malware that she had no idea was there.  And some huge, tens of thousands, for some reason the number $64,000, I mean, literally, the courts were coming down with cash judgments against her, requiring her to pay this money.  So this kind of thing does, I mean, and can happen, and apparently will.  Anyway, I don't mean to...



LEO:  I think the most important thing...



STEVE:  ...get worked up.



LEO:  ...for people who listen to this show is the message that it would break DNS, that it isn't a good solution.  It would - and I didn't know, but that it would impinge on the ability to do DNSSEC is huge.  I mean, we have a fight on our hands to get everybody to implement DNSSEC as it is.  But it's clearly...



STEVE:  And we need it to prevent spoofing.  And this is mandated, legislated spoofing.



LEO:  It's incredible.  It's incredible.



STEVE:  Yup.  And finally, the last bullet point on AmericanCensorship.org explains, under "Chaos for the Internet," they said, "Thousands of sites that are legal under the DMCA" - which I already have big problems with because it prevents, for example, researchers from being able to reverse-engineer crypto technology in order to research it - "would face new legal threats.  People trying to keep the Internet more secure wouldn't be able to rely on the integrity of the DNS system."  So it's just - it's bad.  And I think the point you make, Leo, is I don't know if we're going to win this, ultimately.  There is such continuous pressure from the powers that be, that do not want the Internet to be free and open, that want control over it, I don't know.  I mean, I'm glad everyone's putting up a fight.



LEO:  I think we can win this.  I think we won this round because I think enough members of Congress got the message.  When you get 87,000 phone calls, that's a significant number.  Now, somebody in the chatroom said, well, it's not the people who listen to this show, it's the dumb people we have to convince.  That's not true.  There are 70,000 people listening right now to this show.  There are plenty of technically sophisticated people.  There are more than enough.  Because remember most people never call their member of Congress, never have anything to do with them.  So each call counts a lot.  So we do have the power.  We can fight this.  And I think we will win in the long run.



STEVE:  And the other thing all of our listeners are, are opinion leaders.  I have, in a Q&A that we'll get to later, a point is made - and I chose this because I wanted to make a point to our listeners to tell their less security-aware friends, to remind them of the importance of something.  So that really does need to happen.



LEO:  As Puppy says, though, really the problem is complacency more than anything else.  Let's not be complacent.  We've got to continue this fight, continually vigilant, because it's our Internet.  And, yeah, most people may not realize the threat.  We do.  So we're the ones who have to fight.



STEVE:  Yes.  Yes.  Now, a ton of news was made in the last week, and my Twitter feed was full of people bringing this to my attention, about something that may or may not have happened.  And that was the news that an Illinois based water district had its SCADA system, the industrial control system for running it, hacked.  And the consequence of that was that a critical water pump was burned out.



Now, the question is whether this was true or not because now the Department of Homeland Security, who has a division called ICS-CERT, which is the industrial control systems cyber emergency response team, emphatically says that there is no evidence whatsoever of any external intrusion from Russia or anywhere else.  And what's odd is that the original blog posting that got picked up by the news organizations, and even an executive at that water district, who was then on, I don't know if it was radio or TV, but on some public live media, contained all kinds of information about log entries that were found, and IP addresses belonging to Russians.  And that for two or three months there was, like, odd behavior being observed by this system, and that apparently it was that the SCADA system was being, like, shutting down and then coming back up.  It was the fact that it was offline for a while that caused this pump to burn out because it wasn't - it lost its supervisory control technology that it was relying on and overheated.



So I don't know what to think.  You could see some pressure on the part of the Department of Homeland Security because this news got so much press and so much attention that they could be wanting to tamp down on anyone worrying that, okay, well, a water pump today, a nuclear reactor tomorrow.  Which of course...



LEO:  Right.  In fact, break a water pump...



STEVE:  ...is the concern.



LEO:  Right, break a water pump in a nuclear reactor, you could have a meltdown.  So this is not insignificant.



STEVE:  Yeah.  So I don't understand.



LEO:  The DHS and the FBI say that we found no evidence of a public water utility hack.  We also read that their password was three letters.



STEVE:  Actually, it's not their password.  There was some other confusion there.



LEO:  Oh, okay.



STEVE:  It's that there are SCADA passwords in use actually in other places, as I understand it, that are three letters.  And in some cases they ship with three-letter passwords, and no one changes them.  



LEO:  Oh.  Oh.



STEVE:  Yeah.



LEO:  ABC.



STEVE:  Actually I think the one I saw was "100" was the - it was one zero zero was a sample three-letter password that was in use somewhere.



LEO:  Somebody needs to remix the Michael Jackson song.  "Breaking into SCADA's easy as 1, 2, 3, A, B, C."  Oh, boy.  Oh.



STEVE:  Yeah.  Yeah.  So we don't know.  There was some good news, and that is that Google is moving forward with some efforts to increase the security of connections to them when using either their browser or Firefox today.  And apparently there's support for this in - and I think it was one of the later versions of IE under Windows 7.  And that is, remember how we've talked about the way SSL works, where you have a suite of available cipher systems which a web browser offers to the server.  And we were talking in the context of CBC, the one particular protocol used by block ciphers, had a problem under SSL prior to version - or actually TLS v1.1 and 1.2.  So TLS v1.1, which is SSL 3, had this problem, and that it was possible to simply fall back and not use the CBC technology, but use RC4 as your block cipher, which then would keep you from having this problem.



Well, in a different sort of tangent off of that, the guys at Google have implemented something known as "Ephemeral Diffie-Hellman" encryption.  And actually that's a key agreement protocol which is very efficient.  The efficiency of that allows them to change keys often.  And changing keys often, that is, like for every secure session that you set up, is very good because that creates something known as "perfect forward secrecy."  And several articles that I saw talking about this were written by non-crypto-savvy people who said that forward secrecy was a protocol, and it's actually not.  It's a feature of - it's something that you get which is a good thing when you change your key often because the point of it is that it keeps you from ever going back in time.  If someone were to hack a key that is now in use, they wouldn't be able to go backwards and hack stored encrypted sessions because those would have been encrypted under a different key.



So what Google has done is they've augmented the normal security suites that are available with some new ones which inherently use ephemeral keys which are easy to compute and won't load down servers.  They have built this into some updates to the OpenSSL suite and made that publicly available.  So what'll happen is this will filter back into OpenSSL with a future version of it.  It'll be available.  It'll then get pushed out and built into next-generation fundamental SSL suites that are available in the UNIX flavor OSes.  And apparently Microsoft is already in the process of adopting this.  And then, as our browsers are made aware of this, and currently Chrome and Firefox both are, we'll just all start using this, and that'll be a good thing.



So this is just a really - it's a perfect example of when a protocol was thought out well, and it was inherently designed to be upward compatible, how you can slipstream good evolution into that protocol, never breaking anything, and just automatically taking advantage of innovation in the crypto that just sort of filters out into everything.



LEO:  Maybe Vint Cerf was right.  He said it's the self-healing Internet.



STEVE:  Don't throw it away, yes.  And I did want to make a little TSA announcement.  I saw for holiday travel that children under 12 no longer have to take their shoes off.



LEO:  Yeah.  I know that because I traveled with a child under 12 about a month ago.



STEVE:  And has that always been the case?



LEO:  Nope, just happened.  Literally about a month ago, yeah.



STEVE:  That's what I thought, yeah.  So although people...



LEO:  So I guess they figure there'll be no shoe bombers under 12.



STEVE:  Well, the bad news is I think today, as we're recording this, people are probably already in line, so they may not be hearing this announcement.



LEO:  Oh, they put - the way I found out, they put big signs up at the airport.



STEVE:  Oh, good, good.



LEO:  Yeah, yeah.  So but you still have to do all the other stuff.  In fact, those security lines have gotten crazier and crazier and crazier.  I got - usually I get scanned.  SFO uses millimeter wave scanning, which is not an X-ray and supposedly not dangerous.  But I got a backscatter scan in Vegas, the last time I left Vegas.



STEVE:  Actually I got a backside scan.



LEO:  I don't want to know.



STEVE:  I'm not kidding.  I guess - it was one of the trips I had taken recently.  And I thought I did everything right.  I raised my arms above my head and stood there.  And then the person said, "Do you have something lumpy in your right back pocket?"  And I had some, just some bills folded in half.  And it was sensitive enough that I took my wallet out of my left back pocket where I normally keep it, but I didn't realize that just folded paper would upset it.  Then I had to go through the whole pat-down routine because now suddenly that sets off their alarms, and they're like, okay, well.  So I guess that was a backside scan that I had.



LEO:  That happened to me, and I turned out - I think it was just my shirt was bunched up when it was tucked in.  I had nothing in my pockets.  I didn't have a belt on.  It was all fabric.  And they still said, we've got to scan this back here.  And I think it was just probably my shirt was bunched up.  I mean, this is ridiculous.



STEVE:  Well, and Leo, I don't want to get off the track, but I haven't ever said this before except to friends of mine.  All of these problems that we had were from foreign flights coming into the country.  The fluid mixing thing was - I think that was - was that out of London that was coming into the U.S.? 



LEO:  Yeah, I think it was.



STEVE:  And the shoe bomber, the underwear bomber, all these variations of bombers, they were not when people were flying from Orange County, California, 500 miles north to Northern California.  I mean, think about it.



LEO:  It's security theater.  I mean, that's what Bruce Schneier calls it.  He is, of course, a great security expert.  And he is very vocal on what we could do to have effective security as opposed to what we are doing, which is essentially theater.



STEVE:  Oh, and look at the cost to us, to us citizens.  Anyway.  So last Wednesday you were showing off your Fire, your new Kindle Fire, and I was drooling over it and telling you that mine were waiting for me.  I was so excited about it, back when it was introduced, that I bought two of them under the theory that if one is good, two would be better.  They've both been returned to Amazon.



LEO:  Yeah.  What happened?



STEVE:  Well, in fact I tweeted.  I said a couple days after that I saw a Kindle Fire teardown where its cost was estimated, and it was estimated at cost, that the $199 Kindle costs Amazon $201.70.  And so I tweeted that.  I said the Kindle Fire teardown shows it costs $201.70 to make.  Of course that doesn't factor in the cost of return shipping.



LEO:  Oh, interesting.  You had to pay for return shipping?



STEVE:  Oh, no, no.  They did.  But I'm saying that that was also their cost, which wasn't factored into the Kindle...



LEO:  Right.  They lost more money on you than anybody else.



STEVE:  Well, I mean, and in fairness - okay.  So I plugged it in, charged it up overnight, and went to Starbucks bright and early on Thursday, the next morning, to have a nice sit-down with it.  And I started not being that impressed with it.  The power button sticks out, so it will turn itself on or off if you rest it on its lower edge, which is why many people have power buttons that slide, because that's not something - that's not as natural an action.  But and many of the Kindles, the early Kindles slid.  The newer Kindles at least don't stick out, except the Touch's sticks out; whereas the regular, what they call the Kindle now, just the Kindle Kindle, its button does not stick out.  But then little things.



LEO:  It's a little easy to hit that button, I agree with you, though.  I think that that's not a good place for it.



STEVE:  Yeah.  And unfortunately that's maybe the only thing which doesn't fall into the category of they can fix it, because the beauty of any of these...



LEO:  It's all software.



STEVE:  Yes.  Any of these state-of-the-art devices is that it is software.  And so everything I'm going to complain about, I understand can, hopefully will, get fixed.  But, for example, the bright - and these are, as I was playing with it, I was thinking, Steve Jobs would have never shipped this.  And so, like, it wouldn't have gotten past him.  For example, the lower 25 percent of the brightness control is defective.



LEO:  Is black.



STEVE:  It does nothing.



LEO:  Does nothing.



STEVE:  The lower 25 percent, you slide it back and forth, it has no effect whatsoever.  It just bottoms out.  And so they need to rescale that.



LEO:  But that's, as you say, easily fixed with a firmware upgrade, yeah.



STEVE:  Easily fixed.  Also on the title page of a book that I was experimenting with, as I dragged it back and forth with my screen, I was able to get it to leave debris behind.  So it wasn't properly refreshing the screen as I moved it.  And it was jerky and not very smooth.



LEO:  I think you got a - more bad ones.  I think that's another bad - I haven't seen any of the graphics issues that you just described.  And while the screen is not quite as fluid as an iPad, admittedly, I haven't - it's pretty fluid.  I haven't seen any issues with it at all.



STEVE:  Well, I wanted...



LEO:  I think a lot of people are having trouble.



STEVE:  I wanted - oh, they are.  I wanted to see whether the cover flow was better in landscape orientation than it was in portrait because it is unusable in portrait.  It is just - it's awful.  Now...



LEO:  Oh, you know what, Steve, you have a bad machine.  No, I'm not kidding.  I wish I had mine here that I could show you.  The cover flow works fine in portrait, in landscape.



STEVE:  I've had other people complain.  I've seen other people complain about the cover flow.  It just, the way it works - now, maybe it's that I have 247 things in the archive.



LEO:  Well, that could be it.



STEVE:  Except that ought to make it just deeper.  But, I mean, it doesn't - it's difficult for me to, like, bring something to front.  It was snapping off to the left prematurely.  And again, fixable by software.  Font selection...



LEO:  I think fixable by getting one that works.  I think you've got - I'm not kidding.  Let me - here.  I have one here.  Let me - I have to set up the screen so you can see it.  Let me just see if I'm getting the same effect on this Fire.  Because it's completely smooth on both portrait and landscape mode.  Let me pull up a shot of it.  I don't have an over-the-shoulder shot.  I wasn't planning this.  Here, all right.  Here is - this is not my Kindle Fire.  This is Liz's.  I mean, it's a little slow updating the image the first time through, but that's completely fluid to me.  Are you seeing it?



STEVE:  I actually can't.  My video from you froze quite some time ago.



LEO:  Oh.  These things do happen.  So, I mean, I feel like that they may have a lot of hardware defects, and that you may have a bad graphics card in there.  Interesting, yeah.



STEVE:  Well, I think it's design.  I think it's a very bad UI.  I was unimpressed with its navigation, which seems inconsistent and often unclear.



LEO:  Really.



STEVE:  Like how to move around.  I mean, I'm asking a lot from it.  I will say, yes, it's $200, and that's an amazing price for a tablet that has this much potential.  But at this point I'm very unimpressed.  It needs major revision.  For some reason it's already at Rev. 6 when it comes.  And it may be that both of mine - because both went back.  Both of them hung completely.  And I did order instantly, so maybe they were literally the first ones off the assembly line.



LEO:  That's what I think.  I think there are probably several sources for these.  And I'm wondering if some of the sources are just not making good ones.



STEVE:  Yeah, well, as I mentioned to you before we began recording, when I Googled "Kindle Fire frozen," I immediately found other people having the problem, and I made three postings in an online Amazon-based thread that drew attention.  I tweeted about the problems.  And I just considered it, unfortunately, a very bad launch failure.  But I did hear that you and Paul talked about it that same day, on Thursday, and really liked the Kindle Fire.



LEO:  Well, what's interesting to me is I'm hearing very different experiences from people.  To me, I mean, I was just showing the page turn and the cover flow, and it's snappy.  There's a little tiny bit of hesitation, tiny.  I mean, you'd have to be a little picky in the page turn.  Certainly nothing like the actual physical hesitation in a page turn or like a Kindle.  I think for 200 bucks this is, well, I think for any price this is an amazing product.  It's certainly the best Android tablet I've ever used.  I agree there are some flaws.  I think the on/off switch is a little easy to hit, although I don't hold it that way, so I never hit it.  I really like it.



STEVE:  So you would call it "the best Android tablet to date."



LEO:  Oh, easily.  But that doesn't say much because most of them are pretty horrible.  I mean, that's really literally not saying a whole lot.  But I just feel like...



STEVE:  I think I'll probably wait three or four months for them to settle down, for whatever problems they're having with production to, I mean, I wouldn't want to get one and then have them improve the hardware design.  And they do tend to do that.



LEO:  I'm wondering, I'm thinking that there's a variety of hardware out there, or manufacturing problems with some of them.  And might have something to do with that.  I mean, I found this to be - and Kevin Rose was on TWiT saying the same thing, "This thing is horrible, I can't...."  And people like Paul are saying things like, well, compared with the iPad, of course it's not as good, but for the price it is very good.  But I actually, even, I mean, at 200 bucks I think it's amazing.  And I've been recommending it to people.  So I just have a very - I have a very different experience.



STEVE:  Well, I would not recommend it as a book reader.



LEO:  Well, I like the eInk.  And I do say that.  I mean, I do point out that, if you're reading in daylight, or you want really crisp text, then this is probably not a good choice.  There is also an issue with this, it signs you into your Amazon account.  So I had a caller on the radio show, said "I want to get a tablet for my girls."  And while I would recommend this for kids because the price is right, and I don't think they'll have the same issues that we have, their problem is you can't lock down the purchases.  So you're giving a kid basically a device to buy anything they want at any time.  And I don't know if that's such a good idea.



STEVE:  Yeah, you're giving them your credit card with no controls over it.



LEO:  Right, right.



STEVE:  Yeah.  Also the Touch I have a problem with, which is that - and again, fixable by software.  But first of all, I'm not a big fan, I think, of touching the screen in order to change pages.  I really like having a physical button.  And my favorite Kindle of all time actually turns out to be the DX.  I've been reading, I mean, a lot recently because I'm just so in love with these Honor Harrington books.  And I've come back to the DX, just because of its large screen, which is so comfortable for me.  And in fact I have two of them.  I'm probably going to bring one up to Northern California and see if my mom wants to upgrade hers from the one that I got her a couple years ago, which was probably the Kindle 3, to the DX, just because she's in her 80s, and...



LEO:  It's big, yeah.



STEVE:  ...I think she would probably appreciate the larger screen.



LEO:  My wife has inherited the $70 or the $80 Kindle, the basic Kindle because I've got the Fire, and she loves it.  I think the Kindle is a very accessible product.



STEVE:  Yeah, now, my problem with that one is I think it's almost too small.  My favorite practical Kindle, I recognize the DX is not for everyone because it's $379, and that's really pricey.  But my favorite one is what they now call the Kindle Keyboard, which is what they used to call the Kindle 3, because it's got that paddle at the bottom to hold onto.  For me it's just easier.  I like having switches on both sides, which of course the $80 Kindle also does.  But it's almost - there's almost nowhere to hold that little Kindle, the newest one, because it's just like they've removed the margins, and there's no more keyboard at the bottom.  And so it's sort of a little difficult to, like, get a grip on it.  But again, it is super small, and they really have improved the page turn, too.  They no longer do the big whole screen inversion paint.  They only do that every six page turns.  So five out of the six page turns just change the text.  And it's very pleasant.



LEO:  Oh, I didn't notice that.  I didn't notice that.



STEVE:  I first saw that on the earlier Kindles in the Table of Contents.  I noted - or maybe it was in magazine reading.  It was something - or news, news subscriptions.  There were several places where they weren't doing the whole big black inversion.  And I thought, wait, a minute, how are they getting away with that here?  And what they've done is they've extended, well, they've extended it so that it - I think what happens is there's, over time, there's some buildup, sort of like some drift.  And so they said, okay, well, we'll let you do sort of the easy-on-the-eye page turn five times.  But when you do it a sixth time, we're going to sort of like, like the Etch-A-Sketch, erase the whole screen and then redraw it in order to clean up anything that might accumulate.



LEO:  Now, I'm curious.  I just got, to compete with the Kindle Fire, I just got the Barnes & Noble Nook tablet.  I thought, if I'm going to review the Fire, I should review the Nook.  And some of the things that you'll like immediately, first of all, it feels thinner and lighter.  It's got beveled edges instead of square edges.  It's got an on-off switch here, where you're less likely to hit it.  It actually reminded me a lot of the Kindle Fire, with one kind of small exception.  It's a little faster, and I think that's because it has more RAM.  It has the same processor, but it has more RAM in it.



STEVE:  Yeah, I think the Fire has 8GB of RAM?



LEO:  No, RAM is 512 on the Fire.  RAM.



STEVE:  Oh, 512.  That's right.



LEO:  Yeah.  And this is a gigabyte of RAM.



STEVE:  Okay. 



LEO:  Yeah.  But it's very similar in a lot of ways.  It's funny, and I'm not sure why this is, its refresh rate is not the nominal 60Hz that most screens are.  You notice we didn't get any - you can't see it, but we didn't get any flicker on the Kindle Fire.  We're getting, on all our cameras, we get a lot of flicker on the tablets.  So they've got an odd refresh rate going on here.  I'm not sure why.  But I do think it's a very similar product, maybe a little faster.  So if you could live with the fact that it's not Amazon...



STEVE:  And the price?



LEO:  50 bucks more.  Which is not, in my opinion, a good idea because people are going to pick the bigger brand for 50 bucks less.  I don't think very many people say, oh, it's got double the RAM.  I don't think that comes up at all.  Anyway, enough about eBook readers.



STEVE:  Okay.



LEO:  I think you still got a hardware malfunction in yours.  Your new one.



STEVE:  I don't think so.  I think I'm just picky.



LEO:  Okay.  When you come up here next time we'll have a head-to-head faceoff.



STEVE:  Well, I'll have my own.  I mean, I will, I ought to have one.  I have multiples of all the other ones.



LEO:  Might as well; right?



STEVE:  Ultimately I think I should have one.  I would like to have an Android tablet.  I don't have an Android tablet yet, so...



LEO:  It's, in my opinion, the best Android tablet.  It's limited in some ways.  It's not updatable.  Amazon has to update it.  And you don't have access to the full marketplace.  You have to get stuff from the Amazon store.  But it's still an Android tablet.



STEVE:  Yeah.  And again, I'm also in a position, as are you, of being able to buy individual devices for individual purposes.  So I have a DX because I like reading on that large eInk screen.  And I have the smallest Kindle because it's nice to have one that goes in my pocket.  And I've got my iPad for everything else.  But if someone had to just choose one device, and budgetary concerns were forefront, then I think this does it all for 200 bucks.  You get a tablet half the price of the iPad or less than that, and also a useful reader.



So some tweets.  David Wright, who tweeted - he said he's an Englishman in Germany.  He sent a mention to @SGgrc:  "SpinRite saves the day again.  2004 laptop back up and running again, ready for another couple years of faithful service."  And David Ward, tweeting as @DaveQB11 from Sydney, Australia, said @SGgrc:  "Left Firefox 4 open overnight at work.  And today we have it consuming 4.6GB of memory."  4.6GB.  So, David, you get the record.  He says, "Only about 85 tabs." 



LEO:  Well, look on the bright side.  At least it's a 64-bit app.



STEVE:  Exactly.  I will mention something that I caught it doing, and that is, I watched it as I was in Task Manager.  I had Task Manager open, watching the memory just, like, kicking up over time in Firefox, just going, like, every time Task Manager would refresh, like very few seconds, it would be larger.  So Firefox was just growing continuously.  And I thought, you know, I wonder.  And I closed an open PDF, and it stopped.



LEO:  Adobe!  Blame Adobe.  Oh, that's interesting.



STEVE:  Yeah.  So, and I wouldn't be at all surprised if among those 85 open tabs that Dave Ward had, some of them were PDFs that were being viewed.  Often the case for me.  So that may be part of the problem.  And then Simon Zerafa, who is a frequent Twitter and contributor, he send a fun quote that I liked, attributed to Samuel T. Redwine, Jr.  The quote was:  "Software and cathedrals are much the same - first we build them, then we pray."  So...



LEO:  Love it.  So true.



STEVE:  And also a new URL for Chrome.  Eric Vollbrecht in Minnesota, he said:  "@SGgrc Memory stats for all running browsers go to Chrome."  So you open Chrome.  And it's funny because when he said all running browsers, I didn't realize he was serious, but he was.  So Chrome://memory-redirect/.  You put that URL into Chrome.  And the page is titled "About Memory:  Measuring memory usage in a multi-process browser."  And what surprised me, because I didn't read his tweet closely enough, was it showed not only a breakdown of all the processes that Chrome had spawned, but also Firefox.  And then I thought, wait, wait about IE?  So I fired off a copy of IE and refreshed the page, and sure enough, IE was there, too.  So I don't know quite why they're doing that, but it's sort of interesting to see how it all breaks down.



LEO:  That's so you can make the comparison.



STEVE:  I guess that's the case.  Although it actually wasn't very flattering in Chrome's case.  But I have many more tabs open in Firefox than I do in Chrome because I'm still predominantly over in Firefox.



LEO:  It does say there's a bug that they seriously over-count their own memory usage.  I love Google.  Again, engineers, they're going to tell the truth.  I'm going to launch Firefox, and I'm going to launch Safari, and I'm going to see what happens.  How interesting, that they would build that into Chrome.



STEVE:  And I also had a tweet from @blindbites, who said also, he said, regarding SpinRite, he said, "Thanks for SpinRite.  Saved my PC once again.  No exciting story.  PC wouldn't boot, and lockup during system recovery.  Ran SR, one hour, all okay."  And I didn't realize until just now, but the story that I had, a little bit longer, to share with our listeners about SpinRite, was from David Ward in Sydney, New South Wales.



So it's probably the same David Ward who tweeted about Firefox and all of his tabs because he said:  "Hi, Steve.  I've been hearing the testimonials and mentions of SpinRite for a few years now on Security Now!.  I thought it sounded nice for those without any options, but I can do a bit of data recovery if I need it.  Plus I have backups of all important data.  So it's not a problem for me.  Plus I thought, how can a reformat/re-zero not solve any problem anyway?



"Well, I recently had a disk in our MythTV media machine that started acting up.  It was a disk in the recording pool of drives, so some of our recordings" - he said, i.e., girlfriends - "were on it.  Mounting the disk separately was showing it was empty.  Not the end of the world.  Well, maybe for me, but not for anyone else.



"So I did a manufacturer's check on the drive, and it came up fine.  I did some other little things, and the disk continued to check out fine.  Still no data upon mounting it.  Skeptical, I talked a friend out of loaning me his copy of SpinRite, with the promise to him and myself that, if it did anything, I would buy it.  But I was also pretty sure it probably wouldn't.



"Running at Level 4, I saw it seemingly stuck at 41 percent on a spare test Pentium 4.  So I changed out the motherboard/CPU, et cetera" - wow, okay - "and resumed from there."  I'm not sure why that was necessary, but anyway.  He says: "A day later, we're done, and we have all our data accessible.  So there, Steve.  Have my $89.  I just purchased it.  Well worth it."



LEO:  Yabba-dabba-do.



STEVE:  "Well worth it for SpinRite and all the other information you provide me on the podcast.  Keep up the great work.



LEO:  That's a neat story.  And we would tell people, if you use SpinRite, and you see it pause at a point, that's the problem sector.  And it's reading and reading and reading, and it won't give up until it gets that data off of there.  That's all that was going on.



STEVE:  Sometimes it can take a while, but it will ultimately move forward and probably have done that drive a world of good, in this case.



LEO:  A world of good.  All right, Steve.  I've got some questions here.  Are you ready?  You feel good?  You ready to go?



STEVE:  Ah, yes.



LEO:  I've got all these browsers open.  Let me close a few so I can see the questions.  Terri Bell starts us off with a reason why HTML5 is not a Flash killer.  We were talking about the fact that Adobe is abandoning Flash on the mobile platform and going to support HTML5.  Flash applications are compiled, and compilation produces binaries that take effort to reverse engineer.  A Flash application may also be obfuscated to afford "protection" against Flash decompilers.  In contrast, the source code for HTML5 applications is there for anyone to grab.  It can then be modified and similar competing applications or services set up with a fraction of the original development cost.  Although obfuscation and moving application logic to server side will help HTML5 developers protect their work, some developers will not see that protection as adequate and choose Flash instead.  Thus HTML5 will replace Flash in many instances, but not all.



STEVE:  Well, so what do you think?  I was trying to think, okay, what's that valuable that people are coding in Flash?  And I guess games is - you wouldn't want Flash games to be reverse engineered...



LEO:  He has a point.  I'm sure that there will be - there are ways to obfuscate JavaScript, but they're pretty easily cracked.  I wouldn't be surprised if there were ways to p-code it or byte-code it so that it isn't legible.  That's an interesting question.



STEVE:  Well, actually, Flash is compiled into a p-code.  The actual runtime is an interpreter that interprets Flash p-code.



LEO:  No, I understand, yeah.  But that's what I'm saying, is that JavaScript would need something similar to make it - I don't know.  I just think Flash is dead, no matter how you feel about it, or how proprietary you'd like to make your code, if no mobile device supports it.  They are going to continue, they're going to make one more version for Android that'll be the final version.  But say two years from now, you're losing out on the mobile market, which will be, by then, the No. 1 way to surf.  Are you going to use Flash?  I don't know.  I mean, you might use it, I guess, if you're Yahoo! Games.



STEVE:  Yeah, I don't think anybody today even, given the anti-Flash position that Apple's mobile products have, if they didn't have to, would use Flash.  I think you'd just say okay, HTML5 and JavaScript.  We can do what we need to that way.  So.



LEO:  In the chatroom, Web755 is pointing out there is a Flash decompiler.



STEVE:  Actually I've used some.  When I was putting videos on my site, I wanted to understand, I guess I wanted to tweak something that was - it was free, but it wasn't available in source form.  And so I used a decompiler in order to get it back so that I could tweak it and then recompile it.  And that approach worked just fine.



LEO:  So maybe it isn't so secure.



STEVE:  Yeah, it's not.



LEO:  It's not any different than obfuscated JavaScript.



STEVE:  Well, yeah.  And remember we have our standard - our standard refrain is, if it's going to run on a user platform, then you cannot protect it.



LEO:  Right, because it has to be decompiled by the platform.



STEVE:  Yes.  And so there's lots of clever people with lots of time on their hands, apparently, who say, oh, let's write a decompiler.  That'll be fun.  It's a senior project for computer science.



LEO:  Rosen Penev in California has our next question:  Steve, I've been a listener since the Bitcoin episode, and your Password Haystacks page is fascinating.  Your explanation of it was awesome.  But a question recently popped up.  You mentioned how the bad guys try to use dictionary attacks and then progressively trying out more sophisticated patterns like numbers and symbol combinations.  My question is, how likely is it for a bad guy to use a different alphabet to try to crack a password?  My guess is highly unlikely since most people don't use alphabets other than the Latin alphabet.  But I'd appreciate it if you could comment on this since this could potentially mean that you can have passwords that are short and secure - I guess by using Cyrillic or something.  Great podcast, as always.



STEVE:  Well, so, okay.  The problem is one of compatibility.  We run across it with sites that won't allow special characters, for example, even sort of a little bit off the map, but not even very far off the map characters, or even Unicode in some cases.  What you'd really like is a site that will take whatever it is you give it and hash it and store the hash.  In which case it's only incumbent upon you to be able to recreate the same thing again.  Now, even that can be a problem because not all keyboards are equally capable.  It's possible, for example, with a traditional PC keyboard to hold down the Alt key and enter the decimal code into the number pad and have that work.  The problem would be, what if you wanted to log in on your iPad to the same site?  You wouldn't be able to recreate that same process.



So unfortunately we're reduced at this point to a world of least common denominators in order to get cross-site and cross-application and cross-platform compatibility.  So while it's tempting to imagine putting some funky characters in from some different language, you need to make sure that you're able to do that wherever you want to be, and of course that the site honors them correctly.  For example, if I did that, say that I used a "c" with an umlaut over it or something, or maybe an "o," you'd want to make sure that just typing in a regular "o" didn't also log you in, in which case you wouldn't have achieved anything.  It would be reducing the strength of your password without your knowing it.  So, yes, the idea is absolutely a good one, that is, of using strange characters and different alphabets.  The problem is one of getting sufficient compatibility, which I think would probably be a showstopper.



LEO:  Patrick Moran, London, Jolly Olde England, writes about an article about triple-DES.  He says:  Is nothing safe anymore?  3DES, the triple use of the Data Encryption Standard - because DES was cracked, so you do it three times, now it's safe?  No, it's been cracked, according to Electronics Weekly.  Patrick Moran, a very happy SpinRite owner.  I take it you probably looked at this article.



STEVE:  I looked at the article.  There was a reason I chose it, because it had the best analogy I've ever heard of a side channel attack.  And I didn't want to forget to mention it to our listeners because it was just so great.  A little background:  DES was the Data Encryption Standard - thus the acronym DES - which if memory serves was a 56-bit key.  And that's not enough bits anymore.  And DES itself had some structural problems.  So what was recommended was to do it three times.  And that might sound like, well, how can you take something that's not secure and just do it more and you get security?  But that's exactly what our block ciphers do.  Remember that AES runs multiple iterations - they call them "rounds," multiple rounds - using different pieces of key material.  No one round is at all secure.  And in fact reduced round versions of AES have been cracked because you rely on the successive rounds in order to get the strength.  And when you get enough of them, you just can't penetrate it.



So, similarly, taking a block cipher like DES and doing it three times - not using the same key three times but essentially three different keys.  So you take 56-bit key times three would be your new key length.  And then you use a different 56 bits out of that key for each of the three times.  And you end up with something which is still very quick because DES had the benefit of being a pretty quick block cipher, yet you get really strong security.  Oh, and in this case it's being used in some electronics-based cards in Europe.  And it was one of these cards which was cracked using a side channel attack.  And we talked about that recently.  In fact, they noted that power consumption being used by the card when it was in use leaked enough information for them to obtain the key.



LEO:  Wow.



STEVE:  So, and we've talked about how - yes, isn't that cool? - that just, if you're sharp enough, and of course we're talking about sharp people, just noting variations in the amount of power the card is consuming while it's processing the crypto, if you understand the way the algorithm interacts with its power consumption, that can be enough in order to give it away.



So here's the analogy.  Just such a perfect analogy of a side channel attack on old-school protection.  And that is a safecracker listening to the tumblers drop.  Because when you think about it, I mean, in the same way - and we've talked about this before, Leo -  the hokey way that long combinations are broken in movies, where they stick this cracking device up against something, and all the digits begin spinning, and one by one they lock in, that's exactly the way a safe is cracked because you are - I don't know if anyone is too familiar with the insides of these things.  But you have essentially a stack of disks which are notched, and the goal is to line up all of the notches, and then the disks also interact with each other, pushing each other.  And so it takes - and that's where you get this turn it right five times to sort of get all the disks lined up, and then continue to this number.  Then go back to that number, the other direction to this number, back to that number and so forth.



Well, each of those processes leaves a successive disk lined up correctly until, when they're all lined up, you're able to have the bit essentially fall into all of the lined-up disks.  Well, safecrackers learned that, if you stuck a stethoscope on the safe or something else, you could audibly hear that pre-alignment of the disks before they all got aligned, and crack the safe.  And so that's a perfect example.  The designers of the safe never wanted you to get any information at all as you were turning the knob back and forth.  And so it is the case that by using this audible side channel attack on a safe, or at least really old-school safes, that safecrackers could detect when the last disk was aligned, and then the second to the last, and the third to the last, and the fourth to the last and so forth, until they got the safe open.  So they were able to, just like in the movies, get individual digits at a time, the equivalent of that, one at a time using sound as the side channel attack on the mechanism, which I just thought was a cool analogy.



LEO:  Question 4 from Joe Campana in Ontario, California.  He grumbles [grumbling] about Adobe Flash updates:  Steve, I don't know about you, but in talking with my non-techie friends, I found they're very frustrated, as I am, when updating Adobe's Flash Player.  Primarily, is there any logical reason why we are faced with their user agreement every time we update this?  Adobe can't actually be changing the terms for every update, can they?  I got into a white heat yesterday when faced with this again, for the hundredth time.  It seems to me there could be an agreement that would be affirmed when it's installed initially and could be reaffirmed occasionally.  Maybe we can make this annual.  More importantly, when faced with the Update Flash window, a majority of my friends just click Cancel and move on, not knowing that an update is a good thing in terms of safety.



I believe that if there's any software that should update quietly, in the background, this is it.  Of course there should also be the ability to roll back to an earlier version should an update break something.  But for the general public, I overwhelmingly suggest that Adobe consider this approach.  Sadly, Adobe seems to be following in Microsoft's footsteps in that they don't seem to use the software they're writing.  Have they ever tried to walk their mother through an update over the phone?  Thanks for everything you do.  Signed, Joe in Ontario.



STEVE:  So that caught my eye.  This was the question that I mentioned I was going to get to relative to our listeners, who I'm sure are updating Flash, probably in something of a sweat or a panic when they realize that Adobe has just fixed 12 things which are all being actively exploited to install Duqu or the malware du jour on their system.  But the idea and, well, the idea that Joe mentioned, that he believes he's got friends who are not doing so just because they're annoyed that they're having to do it all the time...



LEO:  Or they don't get the message.  They may say, oh, it's working fine for me.  I don't have any bugs.  I don't need to update.



STEVE:  Right.  It's not about Flash not working.



LEO:  Right.  It works fine for me.  Why do I - I'm not going to update it.



STEVE:  And at the same time there are all these anecdotal reports of everyone apparently on the planet getting infested with malware all the time.  Well, this may very well be one of the ways it's happening.  So I just sort of wanted to take a moment, for the holidays, to remind our users to make sure that their less security-savvy friends, everyone they know who isn't listening to this podcast, does take software updating seriously and follows through when Flash is saying it needs to be updated.  Don't read the license agreement.  No one does.



LEO:  Just say okay.



STEVE:  Just say okay.  Yes.  I would not be upset by the license agreement.  No one in the history of man has ever read that once.  Not even the first time.



LEO:  I think we should make a new geek thing.  When you go home for the holidays, you fix everybody's, you update everybody's systems.  You lock it down.  In fact, I'm going to do this.  I'm going to go to Thanksgiving tomorrow at my dad's.  I'll probably go over to his system, make sure he's updated recently, that all the software is up to date.  This would be a good thing.  Geeks Home for the Holidays.  We'll have to come up with a catchy phrase for this.



STEVE:  And in fact it may not even be required that our listeners remember to do so because probably the moment they walk in the door, their aunt or their uncle or mom or dad is like, oh, John, printing stopped.



LEO:  It's not working, Stevie.



STEVE:  Exactly.



LEO:  Well, it's true.  Every time I go back East to visit Mom, we set aside at least a day for - she does it, for tech support.  It's like, okay, remember, one day we're going to get everything working that's stopped working over the last year.  Geeks Home for the Holidays.  We need an acronym.



STEVE:  That's spring cleaning.  Winter cleaning.



LEO:  Geek Update for the Holidays.  Something.  We'll come up with something.  Question 5 comes to us from Philip Smith in Lafayette, California, just around the corner apiece.  He says he's not happy with iOS security:  It's not as safe as you imply, the approval process that's part of the app publishing requirement.  I know you understand that, but I think it's time to remind our community, just because it's a closed system does not imply innate security.  He refers us to a post about this on ThreatPost.com.  Love the show.  Cheers, Phil.  Let's pull up that post here.  But I think that I've said this many times, that there is the presumption, well, Apple's checking every app on the App Store, so they must all be safe.  And of course there's no way you can know with 100 percent certainty, you're not even getting the source, that this app is doing everything you think it's doing.



STEVE:  Well, and it's more than that, Leo.  And this is why I wanted to entertain this question from Philip.  It is impossible.  And I don't mean in the sense of Apple couldn't be doing a better job, I mean in the sense of we want an impossible thing.  We want our computers to do what we mean, not what we say.  It is absolutely the case.



Look at, for example, the clipboard.  The clipboard is a massively convenient feature because it was originally maybe designed within an application, you would mark a clause or a paragraph, for example, and then cut or copy it, and then put your cursor somewhere else in the same app, and then paste it.  So it made it very convenient to move things around within an app.  But then it was realized, wait a minute, let's make that a global resource, that is, the clipboard, so that we can do inter-app cut, copy, and paste.  Whoa, and that's really handy.  I mean, who isn't copying URLs out of one place and dropping it somewhere else, putting it in notes, putting it in a browser and so forth.  And now that we've got super-complex passwords, we're likely using the clipboard in the same way.



The problem is that it's a global resource, and malware has access to the clipboard just as our apps do.  So there's a perfect example of something which is a feature which, because it's a global feature of the system, it becomes useful, that is, it's much more useful to us if we can use it for inter-app movement of data.  But if we leave sensitive data on the clipboard, and this happens all the time, and it has been widely exploited by malware, then the malware is able to access the clipboard and get whatever we may have happened to leave there.  Now, whose fault is that? 



LEO:  It's the clipboard's fault.  Clippie.  Clippie, protect me.



STEVE:  I knew Clippie was going to come into this.  So it is, I mean, that's just - I'm sure there are plenty of other examples.  But that's a clean one of where something that is a feature that we all want and use and would be very annoyed if we didn't have, has the potential for abuse.  Not because there's anything wrong with it, but because it's a feature that can be misused.  Now, if we look at iOS, here's a system which is highly locked down.  And, for example, there is deliberately less inter-app flow.



LEO:  They do a lot of sandboxing.



STEVE:  There's a lot of sandboxing.  And people chafe at the sandboxing, that it's not easy to move something from one place to another.  But that's also protecting us in the same way that not having a global clipboard protects you, and here's the danger of having a global clipboard we were just talking about.  So, I mean, I don't know that I've ever implied that Apple's iOS security is ultimate protection.  I certainly know that it's not.  And in fact I think we have a question a little bit later about how Charlie Miller got himself recently blacklisted for a year because he was wanting to show Apple that they had a problem that they weren't acknowledging.  But I guess my point is that we want power at no cost.  And unfortunately, even if everything is working right, I think power comes at a price.  And iOS being more of a consumer platform, you're getting functionality and you're getting more security than if you had more flexibility.  But, yeah, I don't think Apple can do a perfect job.  It's impossible for them to know what every app is going to do all the way down.  We talked about the sandboxing and how useful it is for you to declare to Apple the things you want your app to do, and we'll be talking about that a little bit shortly.



LEO:  I look forward to talking about Charlie Miller because I think that this is a ridiculous response to a security researcher coming up with a flaw.



STEVE:  Oh, it is a totally wrong response.



LEO:  Yeah.  It's, oh, we don't like it.  Well, we'll talk about it in a second.  But first Jason Pritchard in Las Vegas because he's wanting to know about monitoring the Internet.  He says:  Steve and Leo, you've talked in the past about organizations like AV companies, research facilities and such, monitoring Internet traffic seemingly for statistical analysis, maybe to see how a virus moves.  Knowing the routers send packets to the specified destination, and switches only send packets to the port containing the device to which the packet is addressed - that's the difference, I guess, between routers and switches - how would one monitor anything except the traffic destined for the monitoring device?  I know that some broadcast traffic would be detected, but even that should be limited to the network segment in which the device resides.  How do research organizations gather information about network traffic?  Are they doing it from an Internet backbone?  If so, why would the owners of those connections let anyone near them?  Thanks for all the great information throughout the years.  Jason Pritchard.



STEVE:  I thought that was a great question.  And we've never, in all of our years together, addressed it directly.  Okay.  So there's two ways.  First of all, an organization like Symantec is massive.  I mean, they're doing - they've got their security research guys.  But there's all this other stuff they're doing, and operations, and payables, and receivables, and email, and everybody's on the 'Net, and they're surfing and Googling and browsing.  So a large organization only has to monitor itself in order to have a huge beautiful cross-section of spam coming in, and threatening email [indiscernible] and what people are - where people are going and what's happening on the Internet.  So just an organization looking - the security side of an organization looking at its own, considering its own navel, if you will, pondering its own navel, gives it enough.  I mean, a huge cross-section of information.



Then the other thing that these organizations do - and it's actually something that I have done in the past.  I don't monitor it all the time.  But, for example, I myself have a block of 64 IP addresses that are completely unused, unallocated.  They exist out there in the 4 billion IPv4 space, yet they have never been associated with anything.  And that's just a big honeypot.  There is traffic on those 64 IPs for no good reason whatsoever.  It's not bound for me.  It's not bound for anybody.



LEO:  Oh, that's interesting.



STEVE:  It's just stuff out there.  It's weird how much traffic there is on this space that never belonged to anybody.  It's just things out there.  It's like Code Red and Nimda still existing in a closet somewhere out there.  Every so often a Code Red or a Nimda packet comes in.



LEO:  Hello.  Are you there?  May I infect you, please?



STEVE:  That's just what it sounds like, Leo.



LEO:  I'm lonely.  Haven't been able to infect a PC in years.  Still hoping.  Are you running Windows ME?  Are you?



STEVE:  And of course it has been said, and it is still true, that if you put an unpatched Windows machine on a raw Internet connection, it won't be long until it is found.



LEO:  Now, I wonder if that's apocryphal these days.  I mean, I wonder if that's still the case?  We should try it.



STEVE:  It's still the case.



LEO:  Is it?



STEVE:  It really is, yeah.



LEO:  Wow.  And that's those worms that self-propagate, and they're just endemic on the Internet.  They're like herpes.  They just float around.



STEVE:  Never get rid of it.



LEO:  Never get rid of it.  Terry Zinger in Dover, Ohio writes:  I'm unsure whether you can help.  Here goes.  I recently noticed in my Norton AV 11.x for the Mac some interesting entries:  ARP Cache Poisoning - incoming.  It listed a MAC address I didn't recognize.  Further investigation indicated the MAC address was for my smartphone.  I have some tech background with the U.S. Navy, 30 years; another 20 years in tech with the educators.  I retired as the Tech Director for a small school district in Ohio.  I'd never heard of ARP poisoning until Norton started to report it.



Question:  Can we stop this attack?  After lengthy research - my phone's attacking me!  After lengthy research I did the following:  changed the wireless router at home to reflect the latest security.  I realize this is probably closing the barn door after the cows are halfway to Japan.  But can I change the MAC address on the phone, then block the old MAC address?  Is there a clean solution?  I assume this attack did not necessarily take place here at home.  I use wireless access on the phone whenever possible to help save battery.  I hope you can find a little time to help an old veteran and well-used techie.  Thanks, Terry A. Zinger.  Hmm.



STEVE:  Okay.  So...



LEO:  We've talked about ARP poisoning, I know,  many times.



STEVE:  We have.  And my best guess is this is a false positive, which is very possible for the following reason.  First of all, a little quick review over on ARP is it's the protocol which is - that is, ARP formatted protocol packets on Ethernet.  It's the protocol which is used to bind an Ethernet MAC address, which is the way the packets actually are addressed on the physical Ethernet wire or Ethernet air, to an IP address, which is an entirely unrelated addressing scheme, the way packets are addressed out on the Internet, because the Ethernet and the Internet are completely separate things.



So, for example, Internet IP addresses, as we know, are 32 bits; whereas Ethernet addresses are 48 bits, 24 being the vendor ID and 24 being a unique number within that vendor ID.  So there needs to be some way to give an endpoint on the Ethernet that always will have a unique, globally unique MAC address to give it an IP address.  And ARP is the way that's done.  You can have static IP assignments where the device knows its IP.  And so when somebody else on the Internet - I'm sorry, on the Ethernet, I mean the local Ethernet, says, "Hey, who has this IP address?" the device that does will say, "I do."  And it responds with its MAC address so that the requester is able to then send IP-oriented traffic to the proper hardware.  So that's the IP-to-MAC mapping.



However, most people do not use static IP addressing.  They use dynamic IP addressing, using the protocol we've also talked about, DHCP, Dynamic Host Configuration Protocol.  In that case, a device which is being asked to connect to the network, like your smartphone would when you bring it into the house - and as Terry said, he tends to use his WiFi wherever possible.  So he's got it set up so that his smartphone will get on his local network.  With DHCP you are asking the DHCP server, which is almost always someone's router, which also has a DHCP server function built in, it is saying, "Hi there.  I'm being asked to use DHCP.  I need an IP address."  And so the DHCP server looks at its table of available IPs and assigns one which is currently available.  And technically they have a lease time, that is, the lease expires, and then it needs to be refreshed.



So now we have the case of Norton AV 11.x running on the Mac.  It apparently has a feature where it's going to warn users of ARP cache poisoning.  To do that, it would have to be monitoring all the traffic on the network all the time, and essentially see and monitor, build its own table of IP-to-MAC address associations or mappings.  And what probably happened, what almost certainly happened, is for some reason that table got out of sync.  And it's not hard to imagine that it might have.  Maybe the machine was turned off and then back on.  Or it was briefly unplugged when some ARP traffic changed the network's awareness of these mappings, but this one Mac machine didn't see that.  Anything could happen that could cause this to be desynchronized because there is no good way, there's no perfect way to prevent that desynchronization.  Essentially, this is not a feature I am a big fan of, for exactly this reason.  You don't want to upset people with false positives of something like this when it's so possible that they would occur.



So one way or another, the Mac ARP table, the Norton AV's ARP table, was no longer synchronized with the DHCP table that is residing in the router.  So the smartphone walked in the front door in somebody's pocket, asked for an IP address, and the DHCP server gave it one, which Norton AV had as allocated to somebody else.  And that is exactly what ARP poisoning would look like, was if there was a conflict between known and agreed-upon IP addresses and MAC addresses.  But with DHCP, you're giving out new IPs all the time.  So in a statically assigned environment, where everything has a fixed IP, you wouldn't ever expect there to be a false positive.



But when IPs are floating around, especially with a smartphone coming and going, something else might have received an IP.  Maybe the smartphone came back in and tried to use the IP because its lease had not expired, tried to reuse the IP that something else had been given in the meantime.  I mean, there's all kinds of scenarios where you could see a collision that would generate a false positive.  And I'll bet that's what's happened.  So Terry, take a big deep breath and relax a lot.  I mean, sure, ARP poisoning does exist.  Maybe your phone got some malware installed.  But given the way the world is, I'd bet that wasn't the case.



LEO:  I want a new bumper sticker:  ARP Happens.



STEVE:  It does.



LEO:  Yes, it does.  Keegan Ead in Tempe, Arizona is a bit confused about Apple's OS sandboxing.  I hope his mouth is not as open as yours was.  Should not it be the operating system's responsibility to protect itself from viruses or malware?  This sort of behavior seems to be what Apple is suggesting is appropriate, that the average user should not need to acquire third-party security packages to keep their computers at baseline.  I think we're all in agreement on that.  So why are the developers involved at all?  Thanks, Steve.  You put on a great show.  I am not security or IT, but you manage to keep the program easily accessible for anyone.  Thanks again.  Keegan Ead.



STEVE:  So I thought maybe I should simplify this whole thing for anyone else who is a little confused by this because it is, in detail level, it is/can be confusing.  But it's simple.  Operating systems are responsible for protecting themselves and applications.  Yet we've just been talking...



LEO:  They just don't do a very good job.



STEVE:  Well, exactly as I was saying in the example of the clipboard, the clipboard represents not a defect, but a feature, which can be abused.  So a perfect example would be if the application did not need the clipboard.  If it didn't use the clipboard ever, then it could enhance the security for everyone by declaring that right off the bat.  When it starts up, it says "I do not use the clipboard."  Then the OS could remove clipboard access rights from that process.  And the beauty would be, then, that if that process ever did misbehave, if it got infected, or it was acting wrongly and tried to use the clipboard or any other feature similar which it had previously declared it had no use for, the operating system would block it, and that's a good thing.



So it makes absolute sense for - I love what Apple's doing, that they have this notion, the notion of entitlements.  So the idea would be that clipboard access would be an entitlement defined by Microsoft.  The programmer could say, I either need it, I need that entitlement, or I don't.  In which case the program would not be entitled to access the clipboard.  And if all programs that didn't use things they didn't need declared themselves to be nonusers, security would be a lot better.  So I think it's a great thing.



LEO:  Bruce Harrison, Auckland, New Zealand, wonders whether Skype breaks TCP/IP:  Steve and Leo, whilst - I love it, "whilst."  Whilst listening to your description of TCP/IP and how it works, I couldn't help but wonder how Skype and other streaming - I'm not talking like a Kiwi, unfortunately - and other streaming technologies work.  Does TCP/IP meticulously ensure that packets are resent and assembled into order whilst Skype disdainfully discards them?  This person is a wordsmith.  Deeply appreciate your weekly efforts.  Bruce.



STEVE:  Well, not only is he a wordsmith, he's very smart.



LEO:  Really.



STEVE:  Because this is a great question.  It's something that we've sort of talked about tangentially, but not, again, never addressed directly.  And that is, we've looked now at some detail in three separate podcasts, building upon the prior ones about How the Internet Works, we've looked at TCP.  And we recognize that it sequentially numbers its bytes, it buffers them as they're being sent, as packets of bytes are being sent on behalf of the applications, until acknowledgment is received from the other end that everything that it has sent has been received, in which case it's free to let go of them.  But if packets are lost along the way, acknowledgments aren't received, it will retransmit lost packets.  It does all this work for us in order to give us a so-called perfect, a reliable as opposed to a not reliable connection.



But Skype is just wanting to send audio.  And what happens with packets being dropped or reordered or anything?  What does Skype do?  Well, the beauty of Skype is it doesn't use TCP because that would be a big problem, exactly as Bruce has surmised.  Skype uses UDP.  You and I, Leo, are talking over UDP protocol rather than TCP for exactly this reason.  Skype excels at forgiving us, forgiving the Internet for dropping packets.  Yet it doesn't worry about a packet dropped a minute ago.  We've already moved past that.  It sort of fills in, literally, truly fills in the audio as best it can, interpolating the audio of missed packets.  So Skype keeps them small so that packets don't carry too much audio because it recognizes they may get lost.  But, if so, it doesn't care.  So Skype and all other streaming services like this, real-time streaming services, do not use TCP because they don't want TCP in the way, mucking things up, which is what it would do if it stalled the connection and waited for, like, lost packets to get resent before it could move forward again.  Instead, UDP being a non-connection-oriented, non-reliable protocol, they just go off, and if they get there, good.  And if not, oh, well, that moment passed, and we pretty much understand what we're saying to each other anyway.



LEO:  I think that's why UDP was created; right?  I mean, that's basically the purpose of UDP.



STEVE:  I think it probably predated any sort of real-time streaming.  These geniuses who put this all together just sort of said, well, we probably need one of these, and we need one of those.  And they were right.



LEO:  Sometimes you don't care.  Sometimes you don't want to error correct because that'll just slow you down.



STEVE:  Like with DNS, for example, which runs on top of UDP, and you're responsible, I mean, the beauty is there's all that overhead of, like, SYN, SYN/ACK, ACK and all that, all that overhead associated with creating reliability in a packet-based network.  Sometimes your request is so short:  What is the IP for GRC.com?  That can go in a tiny packet.  And the answer is even smaller.  Actually it's not because it contains the answer, and DNS contains the query as part of it, so it gets a little bit bigger.  But the point is there you don't want to bother with all that overhead and handshaking and byte-numbering and everything.  You just want to say "Tell me this real quick," and DNS says "Here you go."  And so these geniuses realized sometimes we don't need reliability.  If we don't get the answer, we'll ask again.  But most of the time we will, and we don't want - so we don't want all that overhead for something that just doesn't need it.



LEO:  It does have a checksum or something, so you know the packet's correct.  I mean, it's not that there's no error checking.  It's just that there's no resending.



STEVE:  Correct.



LEO:  Bruce Harrison - oh, that was Bruce.  Sorry, Bruce.  Now it's Robert Hickman's turn.  He is not our last question, but he's our last real question because right after him we're going to set up for next week.  Robert in Bristol, U.K., voices his concerns about single sign-on, or OneID solutions:  From the sound of it, OneID is going to be yet another closed-down, proprietary, siloed system.  And if that's the case, I'm not touching it.  Like the Internet as a whole, any kind of widespread authentication system must be open and not tied to any single provider to be trustworthy.  We do have a single sign-on system; right?  We have OpenID.



STEVE:  Well, and he's talking about OneID.com...



LEO:  Which we talked about last week.



STEVE:  ...which we talked about last week that came out of the privacy conference.  And I have to say, much as I hope something succeeds, I kind of have the same feeling.  I mean, I like the concept of it.  But I like, maybe, I hope, fingers crossed, what we're about to talk about next week even more.  Which leads us into Tom Jones.



LEO:  Yay.  By the way, Web7064 in our chatroom says he could tell us a UDP joke, but we might not get it.



STEVE:  Yes.



LEO:  And if you get that, then you got it.  Tom Jones in Europe points us to a more promising alternative to OneID.com.  Well, thank you, Tom.  And it will be, as you say, next week's in-depth show topic:  Steve, please take a look at Mozilla's initiative BrowserID.org that is, in my humble opinion, a much superior concept to OneID.com, at least in the following five ways:  It's not centralized, a requirement for wide success on the web.  It doesn't depend at all on Mozilla or any single vendor.  Privacy:  Vendor is not informed of visits to third parties.  It's not vaporware because you can actually use it right now.  And it's free forever.  Bonus interest points for Security Now!:  It basically uses crypto to solve a hard problem in a demonstrably clever way.  He passes along a link to WebFWD.org.  There's a 12-minute video there.  Or go to Identity.Mozilla.com to learn more about it.  Tom from Europe.  Steve has created a short Bit.ly link to the video which is bit.ly/b-id.



STEVE:  Short for BrowserID.  If any of our listeners are curious, this is a cool little MP4 video file, 12 minutes long, that sort of - it's a little slide show, gives people sort of a simple, rough overview.  It does not in any way preempt the podcast that we'll do next week's in-depth look at how this works.  It does a great job, though, of selling its benefits.  And this has been on my radar for some time.  I've been intending to get to it.  We're going to get to it next week.  We'll all have digested our Thanksgiving dinners, those of us who celebrate Thanksgiving, and be ready to tackle some nice technology.



I'm excited about this for all the reasons that Tom mentions.  And I have to agree with him, too, that any solution to this problem that attempts to be proprietary, to be owned by one organization, as any of these things do, suffers from exactly that.  I think that that's a liability for something that sort of really does need to be open.  And the Mozilla guys have really done a nice job.  So next week we're going to do a propellerhead episode, looking in detail at a very cool, I mean really cool, completely out of your hair sort of solution for this.  I can't wait to talk about it.



LEO:  Good.  That sounds exciting.  So we'll do this next week.  We do it every week.  Usually we do it, as we did this week, at 11:00 a.m. Pacific on Wednesdays, that's 2:00 p.m. Eastern time, 1900 UTC at TWiT.tv.  So watch live, if you can.  If you're at work you can tell the boss this is research.  But you can always listen or watch after the fact.  We make audio and video available on our site, TWiT.tv.  Steve does a little extra thing.  He makes a 16Kb version available at GRC.com.  That's for the bandwidth impaired.  He also has full transcripts, which are nice.  Again, as we mentioned earlier, because of Thanksgiving, Elaine's going to get a day to eat turkey, so we'll probably get the transcript up on Friday, I guess, Steve; right?  Or Saturday.



STEVE:  Yeah.



LEO:  But you'll find that at GRC.com, along with all the other great stuff Steve does, including his bread and butter, SpinRite, the world's best, finest, must-have, hard drive maintenance and recovery utility.  GRC, Gibson Research Corporation, dotcom.  You can also follow Steve on the Twitter.  He doesn't follow you.  He won't.  He's following zero people.



STEVE:  Yeah.



LEO:  He doesn't want to hear from you.  No, you can, actually, if you ask Steve on Twitter, he sees his "@" replies.  So it's @SGgrc.



STEVE:  So you "mention" me, as it's called, and I see them.  And I would again encourage people to check my Twitter feed, even if you are not following me or not a Twitter user - you can just go to Twitter.com/SGgrc - because during the week I do tweet useful and interesting things often.  And so you can sort of stay current that way, as well.



LEO:  That's a good thing to do.  I like that.



STEVE:  And let's remind everybody about the - put their thinking caps on about snippets and segments from past Security Now! podcasts that they think would bear repeating for whatever reason.



LEO:  Yes, yes.  TWiT.tv/bestof to contribute those because we want to do a "best of" so that Steve and I do not have to work the week after Christmas.  We want to take one week off a year.  That's it.  Just one.  That's all we ask.  Hey, Steve, thank you so much.  Great job, as always.  I look forward to next week.  I'll see you right here on Security Now!.

	

Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#329

DATE:		December 1, 2011

TITLE:		BrowserID

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-329.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with the week's news, Steve and Leo examine the operation of Mozilla's solution to the need for secure, reliable and easy-to-use establishment of online Internet identity known as:  BrowserID.  They also compare it with all of the other existing technologies and solutions we've discussed before.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 329, recorded November 30th, 2011:  BrowserID.



It's time for Security Now!, the show that protects you online, your online privacy, your security, and of course talks a little bit about science fiction and eReaders on the side.  That's because of this guy here, this guy, Mr. Steve Gibson, the host of the hour.



STEVE GIBSON:  Speaking of which, I did hear an interesting suggestion.  Actually someone tweeted that maybe an interesting idea for our special holiday show would be just to do a whole episode on science fiction.



LEO:  I like it.



STEVE:  Yeah, I mean, sort of go back over the recommendations, remind everybody of the stuff that we've found, and talk about the authors and just do a sci-fi show.



LEO:  That's a great idea.  We'd have to do a special recording time.  We could figure that out.



STEVE:  Yeah, you and I would just find some time, and I'd lay out - do my regular production and plan it out and figure out what we would talk about.



LEO:  Okay.  Let's coordinate.  I don't know if they've already started the "best of" yet.  But if they haven't, then I think that's a great idea.



STEVE:  So we have a fallback in case there isn't enough "best of" ideas.



LEO:  Right.



STEVE:  And I think this show's a little tough to do that with.



LEO:  Yeah, I agree with you.



STEVE:  So I was thinking, maybe just something that our listeners would find - and there seems to be a strong interest in sci-fi among our listeners.  So anyway, we'll see what people think about that.



LEO:  And it's not like you'll lose anything.  It would have been a dead spot anyway for the holiday, so no big deal.



STEVE:  Yeah, precisely.



LEO:  Today we talk about...



STEVE:  Mozilla's attempt to solve the Internet identity crisis.  As we know, identity is the big need we have.  We talk about passwords and logins and LastPass and YubiKeys and VeriSign and tokens and footballs and, I mean, this is just an ongoing issue.  And Mozilla has weighed in.  There is a technology for secure verification of an individual's email address.  And what I like about what they're calling "BrowserID" is that it is able to use, in a secure fashion, email addresses that people have.  So today we're going to catch up, as always at the top of the show, with what news has transpired in the last week, and then plow into how email addresses can be used rather than other things, but then also compare this with everything else we've looked at to sort of put it in context.  And I like it because it's very simple to use, and they've managed to make it secure.  So that's our topic for this week.  I think it's going to be good and interesting.  And, who knows?  It might succeed.



LEO:  [Laughing] I like your vote of confidence.  "It might even work."  Well, we're going to try it because they've created a demo site.  I'll be the guinea pig, and we'll give it a try.  I think we established - we started the process ahead of time, cooking show style, and we'll see if it all works by...



STEVE:  Right.  When the eggs are scrambled...



LEO:  We'll see how it tastes.  Steve, let us get to work, you and me.



STEVE:  So I just thought I would follow up on the wacky Illinois water pump SCADA failure issue.  Remember that one of the things I talked about, I sort of - we finished debunking it, well, we started and finished debunking it last week.  I had not mentioned it for a couple weeks because it just seemed a little sketchy to me.  But one of  the things that lent it some credibility seemed to be very definite teasers, like the fact that there was a Russian IP address that had been caught in some of the logs, which everyone jumped on and said, oh, it's been - this was hacked from Russia.  Well, it turns out that a legitimate contractor working for the water utility district was traveling in Russia.



LEO:  Oh, please.



STEVE:  And had legitimate access to the network.  And that's where the Russian IP came from.



LEO:  <Sigh>  That's really kind of annoying.



STEVE:  So we'll just - we'll be a little calmer next time and wait for the facts...



LEO:  Well, it's not us.



STEVE:  No, but the industry has learned a lesson because the industry just jumped all over this.



LEO:  Well, who was the guy?  Where did this original report come from?  Because that's who...



STEVE:  It came from a blogger who had some contact with the water district.  But then also one of the administrators said, either on radio or television the day after, that there was - that this had happened, that it looked to them like there had been a penetration, and that the failure of this water pump was a consequence of the fact that the SCADA system was under control of some remote entity that's hostile.



LEO:  So annoying.



STEVE:  So it's like, okay.



LEO:  So annoying.  Well, there you go.



STEVE:  Now, I didn't remember whether I had said before that Windows 8 Windows Update was going to acquire some welcome features.  Because one of the annoying things about Windows, and I hear people talking about this all the time, is they'll wake up their machine in the morning and see that it has rebooted itself, which is sometimes annoying.  So what Microsoft is going to explicitly do, starting with Windows 8, and apparently not change this behavior in prior versions - and I don't know why they wouldn't, but maybe when they release 8 they will back port this to earlier versions, although that's not what I understand.



But Windows 8, they will deliberately consolidate any changes that will require a reboot and consolidate those so that a single restart will be required, and not multiples.  And they will in any event provide a, depending upon the user's configuration - because this is sometimes a system by system determinant, whether or not a given machine needs to be restarted.  So Windows will determine that and then give the user a three-day warning prior to a restart event.  So they can say, okay, just - I've saved all of my data.  Go ahead and do it now.  In any event, there'll be - it'll be much less inconvenient than having Windows just decide at 3:00 a.m. that it's going to restart.



LEO:  It doesn't warn you?  I always thought it kind of let you know, at least.  It doesn't even do that?



STEVE:  No.  Typically people just realize, like, their system looks strange, and they go, wait a minute.



LEO:  Something happened.



STEVE:  What's happened?  It's like, oh, my god, it restarted.  So, yeah.



LEO:  I was in the middle of a very important project the other day, and Windows - it didn't reboot.  But it, like, took me out of the - I was playing a videogame, okay? 



STEVE:  Okay.



LEO:  I was killing trolls.



STEVE:  Leo, it was important for you.



LEO:  It was.



STEVE:  Yes.



LEO:  I'm in the middle of killing trolls, and all of a sudden, whishhht.  And then Windows says, hey, we've got to - you want to update now?  It's like, no.



STEVE:  Yeah.  Yeah, I always...



LEO:  That's really not good behavior, I don't think.



STEVE:  It's annoying when you're telling it, just hold off a minute, let me finish what I'm doing because I've got all this stuff going on, and I don't want to do it right now.  And then it keeps popping up and saying, hey, don't forget, it's time.  And you're just, yeah, yeah, I know.



LEO:  I understand the need to get people to update.  I do understand that.  But, you know, come on.



STEVE:  Yeah.  So Bruce Schneier, our great friend and cryptographer...



LEO:  Love him.



STEVE:  ...in his recent blog quoted a Juniper Networks blog that had a couple interesting stats that I wanted to share.  And the title of Bruce's blog entry was "Android Malware.  The Android platform is where the malware action is."  And so the Juniper Networks blog poses the question, or asks itself rhetorically, what happens when anyone can develop and publish an application to the Android market?  The answer is a 472 percent increase in Android malware samples since July of this year.



LEO:  Now, does that mean 472 malware applications on the market?



STEVE:  Yes.



LEO:  Wow.



STEVE:  They said, "These days it seems all you need is a developer account that is relatively easy to anonymize, pay $25, and you can post your applications....  In addition to an increase in the volume, the attackers continue to become more sophisticated in the malware they write.  For instance, in the early spring, we began seeing Android malware that was capable of leveraging one of several platform vulnerabilities that allowed malware to gain root access on the device, in the background, and then install additional packages to the device to extend the functionality of the malware.  Today, just about every piece of malware that is released contains this capability, simply because the vulnerabilities remain prevalent in nearly 90 percent of Android devices being carried around...."



So that's, yes, that's what the hackers are having fun doing.  They're saying, hey, let's, I mean, they're curious and interested in wanting to develop for the latest things.  And Android is interesting and fun, and they've got Android phones, or tablets, or whatever device.  So that's what they're doing, is it's got sort of where it's caught their attention.



LEO:  Now, we shouldn't, I mean, there's underneath that statement, I just want to be clear, there's the implication that somehow, because the Apple Store is more regulated, it's less vulnerable.



STEVE:  It is.



LEO:  And, well, yeah, except that...



STEVE:  Not perfect, but...



LEO:  Far from perfect.  Far from perfect.  And I'll give you two examples.  Charlie what's-his-name.



STEVE:  Miller.



LEO:  Miller.  Posted, wrote example code and posted it, and Apple approved it.  And then their response to that was to kick Charlie Miller out of the developers program.



STEVE:  Yes.  Unfortunately, they reacted in a way that I think was inappropriate.  He was a security researcher.  He notified them months in advance that he had found something that they should fix.  And...



LEO:  And I'll give you another example.  Yesterday Apple approved a program that explicitly said it was designed to do tethering of the iPhone around the carrier's objection.  Apple approved it.  Then when people started writing articles, even though it said "Tether," it was the name of the program, by the way, Apple approved it, and then pulled it after a number of articles were written about it.  So I really don't - I think that's very clear evidence, two pieces, and I'm sure there's more, that Apple is not paying the kind of attention to the stuff that it's approving that you would expect.



STEVE:  Yeah, I don't think that they...



LEO:  They can't.



STEVE:  I don't think that they can, yeah.



LEO:  They can't.  There's too much.  So I don't think there's 246 pieces of malware in the Apple Store, but I don't think there's no malware.  I don't think that that  means there's no malware.  I think the good news on both Android and iPhone, the thing that I would say is important is, A, they all have kill switches.  So when malware is found it can be deleted immediately from your phone.  They can reach into your phone and take it.  And the second thing is I think that they are taking a little care in designing these mobile platforms with sandboxing and so forth, Apple perhaps more so than Android.  But I think that that is going to make these less attractive in the long run because it's just not as easy.



STEVE:  Yes, and I think we're in the early days.  And as this quote indicated, they are taking advantages of known problems which still exist.  So it's the typical malware-antimalware, cat-and-mouse game, where these platforms need to be updated in order to close some of these holes.  The takeaway is very similar, though, to the takeaway with today's drive-by phishing and email and link-clicking.  We tell people, do not click on links, no matter how tasty-looking they are, in unsolicited email that you receive.  That's the way most systems, most desktop systems are getting infected.  And so I would say, fun as it is to run every application which presents itself as "run me, run me" on your Android phone, you just don't want to do that.  I would say be careful.



LEO:  Well, that's for sure true.  And...



STEVE:  Be careful about what you run and what you...



LEO:  There's even a greater risk on Android because they have a checkbox in the preferences that says, "Is it okay to install apps from third-party, not just the marketplace?"  And while they do warn you, and when you check it, it says, "Now, you understand this is risky," most people do turn it on because there's a lot of great stuff you can get at third-party sources.  You'd have to jailbreak an iPhone to do that. 



STEVE:  Yeah.  So again, the takeaway is, I mean, sure, if you've got a platform that is your toy, and you don't have information there, you're not using it for anything serious, you want to just mess with it, then fine.  Load everything you want to.  But if you're a serious user, you've got contacts and address books and you do go to sensitive sites, you use this as your multipurpose platform, then today's equivalent risk to clicking on links in unsolicited email over in, not only Android, but also the iOS platform, is apps.  Those are the things you need to be careful about.  And so don't just go running around being promiscuous and loading everything you can get your hands on because it is a magnet for malicious activity.  And so that's really the takeaway that I wanted to offer.  And that is what Bruce was - that's the point that Bruce was making.



LEO:  Right.  It's not, by the way, 472 apps, I misspoke, it was a 472 percent increase.



STEVE:  Correct.



LEO:  Which is a weird number.  I'd like to know what the number of apps is.  Because if it's four apps, that means there's 17.  If there's one app, it means there's five.  I mean, what is that number?



STEVE:  That's a very good point, yes.  Although...



LEO:  I hate it when they do that.  And, you know, it's always malware companies that do that because they want to scare the hell out of you.  I don't know if Juniper Networks sells any malware, but - they do, okay.  So consider the source.



STEVE:  Yeah, yeah.  Which doesn't mean it's wrong.  And the takeaway is...



LEO:  No.  But that's interesting to give a percentage, not a number.  Right?



STEVE:  Okay.



LEO:  I think.  It's very interesting.  I'd like to know the number.



STEVE:  Okay.  Everybody, just be careful with the apps you load.



LEO:  Yes.  No, no, the message is absolutely valid.  I just don't want people to get terrified because there's a 472 percent increase.



STEVE:  So Brian Krebs, our illustrious security blogger, has noted in a recent blog that I thought was interesting - I wanted to remind people about Java because he noted that a new exploit that takes advantage of a recently patched, critical security flaw in Java is making the rounds in the criminal underground.  Which is what Brian really does, he does a great job of keeping an eye on what's going on among all of the exploit forums on the 'Net.  And he says this exploit which appears to work against all but the latest versions of Java is being folded into automated attack tools.  And that's what I find really significant.  He said the exploit attacks a vulnerability that exists in Oracle Java, the JDK and the Runtime 7 and 6 Update 27 and earlier.  So it's only the latest one, Update 29, and Java 7, which is still not quite released yet, Update 1, that are secure.



So I'll remind our listeners, you can just go to Java.com, and that's the site where this can be found, just Java.com.  And there's a link that is "Do I have Java?" which I like because it's not going to install the latest version if you don't have it.  It checks to see whether you have it, and then you can check to see whether you've got the latest version.  So what's happening is this critical security flaw, by having it moving into the automated attack tools, it then gets just incorporated sort of automatically into all of these things that the bad guys are using for getting into our machines.  And that's where we begin to see the prevalence of its usage increase.  So just further reason to make sure, if you've got Java installed on your machine, that it is Update 29 or - that is, Java 6 Update 29 or Java 7 Update 1.



And that reminded me that we hadn't talked about Firesheep for a while.  And so I thought, because that was the classic, super simple, you don't need to know anything about computers in order to acquire access through impersonation, for example, in an open WiFi environment, anybody's online sessions that are not being secured by SSL connections.  So I just jumped over, and we are now at 1,980,000 downloads of Firesheep.  So it was a little over a year ago that we talked about Firesheep.  It was released on October 24th of 2010.  So here we are toward the end of November, about a month and a year later, and it's almost at 2 million downloads.  So, and remember, that's the thing, you just download it, and you go to an open WiFi, it runs for - it is an add-on to Firefox.  And as you sit there in an open WiFi environment...



LEO:  It's an amazing thing, yeah.



STEVE:  ...you start seeing people's faces popping in over on the left-hand bar.



LEO:  I had it on my laptop for a long time.  I finally took it off because I was just embarrassed that it was even running.  I was afraid I'd get caught, to be honest.



STEVE:  Yeah, well, I mean, and it's freaky.  You just open it, and then it's like, oh, yeah, there's that guy sitting over there.



LEO:  It's just creepy, yeah.



STEVE:  Oh, and then - and there she is.  And they're doing things with Yahoo!, like there's a lot of uses of Yahoo!, and a lot of Facebook, also.  And...



LEO:  Although I bet you that's better now that they're using HTTPS.



STEVE:  Yes, yes.  And that's the key, is as these services have been moving to persistent HTTPS, largely inspired by now the year-old Firesheep, this is no longer as effective as it once was.  But...



LEO:  That would go in a "best of" except that it was a year ago.  And you were so happy about Firesheep.



STEVE:  I was giddy.



LEO:  You were giddy.  And I was going, Steve?  Really?  Giddy?  It sounds like a hacker tool.  And you were absolutely right because you said, well, this is going to force the issue of HTTPS everywhere.  And I think that you were absolutely right.  And now Facebook does it, Twitter does it, Google does it.  I think that's exactly - that was the impact.



STEVE:  Brian also - Brian Krebs - also blogged something that I thought was very interesting.  And I think he coined the term "malvertising."



LEO:  [Laughing] He's the only one to take credit for it, anyway.



STEVE:  He detected attempted malvertising on his own site.



LEO:  Wow.



STEVE:  He was in an exclusive underground hacker forum, where he found some discussion among these hackers about buying ads on his site which were going to be deliberately infected with malware.  And so he blogged, he said, "Members of an exclusive underground hacker forum recently sought to plant malware on KrebsOnSecurity.com..."



LEO:  Guess they didn't know Brian was a member of the exclusive hacker forum.



STEVE:  Exactly, "...by paying to run tainted advertisements through the site's advertising network, which was Federated Media.  The attack was unsuccessful, thanks to a variety of safeguards, but it highlights the challenges that many organizations face in combating the growing scourge of 'malvertising.'"  So now we have malvertising.



LEO:  [Laughing] It's interesting, though.  It is an issue.  And in fact we've see it before.  It happened on MySpace all the time because people don't vet the advertising.  They have automated systems that allow you to buy that advertising.



STEVE:  Yup.  It's just, I mean, it is scary.  It's a way that bad guys could say we want to target a specific site that has access to the kinds of viewers that they want.



I also wanted to bring to our listeners' attention that Yubico is having a holiday discount.  Normally the YubiKeys are $25 each.  For the holidays, I think through the end of the year, they have a 10-pack for $99.



LEO:  Ten for - wow.  That's a good deal.



STEVE:  Yes.  So you get five white YubiKeys and five black YubiKeys, 10 for $99.  I tweeted this, and I had some responses from people saying, hey, thanks.  They're going to give them as Christmas presents since that brings the price down to $10 for a YubiKey.  So you can give secure authentication for Christmas.



And there was a story about HP printers which I had on my list of things to get to, but I got so sucked into figuring out exactly how BrowserID was working that I didn't have a chance to go back and nail the story down.  And maybe you heard about it, Leo.  Somehow there's an Internet vulnerability on HP firmware which allows bad guys to change the firmware and shut down your printer over the Internet.  So anyway...



LEO:  Good lord.



STEVE:  I will track it down.  Tom and I - Tom probably covered it on his daily news because I got a...



LEO:  On TNT every weekend.



STEVE:  There was a lot of coverage on TNT.  But anyway, I will, between now and next week, make time to follow up and figure out what that's all about.  So everybody can stop sending me notes in Twitter because I've been getting a lot of notices about it.  So I do, I wanted to let everyone know I know about it.  I just haven't had a chance to nail it down.



Also, everyone knows from our talking about ultracapacitors that I'm interested in capacitors and transportation.  So there was an interesting blurb about Mazda putting large capacitors in their next-year model cars, their 2012 cars.  And they use the term "double layer capacitor" without ever explaining what it is.  But it's clearly a very large capacitor.  And so what they've done is clever.  When the driver takes their foot off the accelerator, an alternator is engaged as part of the braking system to charge a large capacitor.



Now, an alternator will generate a varying voltage, so it could be much greater than the car's normal 12v DC operating voltage, which is just fine because you'd like to charge the capacitor to as high a voltage as possible.  And then what's clever about this is it doesn't attempt to use the energy in the capacitor for automotive, that is, for motive force.  That is, it doesn't turn the alternator into a motor and, like, dump the capacitor back into the drive train.  So it's not trying to capture the momentum and then reinject it.  Instead, it simply uses the charge in the capacitor for the car's electrical system, which I thought was kind of clever because you...



LEO:  Oh, instead of the car battery.



STEVE:  Well, exactly.  So it, well, actually the battery is there to, like, start the car.  But normally it's the car's normal alternator is used to power all of the stuff going on in the car - the entertainment system, the multiple computers that we have, and anything else.  Well, it turns out that that provides - all of the electrical demands on a contemporary car are enough that it substantially affects the car's gas mileage.



LEO:  Oh, yeah.  Absolutely, yeah.



STEVE:  And we know, for example, that, like, when you turn on the air compressor - now, that's both the compressor, but also the mechanical drag that the compressor has on the car.  But the alternator itself, that normally runs the car's systems, is lowering the mileage.  So Mazda has found that, if they use an alternator for braking and capture that energy in the capacitor, and then they use a DC-to-DC step-down converter to, like, step down whatever, essentially a voltage regulator, but an efficient one, to bleed that capacitor that stored the momentum during braking, to bleed that as 12v DC into the car's electrical system.  That lightens the load on the alternator, which would otherwise be doing that, and substantially improves gas mileage.  So, very cool.



LEO:  Oh, cool.  So it's not a hybrid.  It's not an electric car.  But by being more efficient in terms of its electrical system, you're more efficient with fuel.



STEVE:  Yeah.  I mean, one of the things that you cringe about is we all have disc brakes on our car.



LEO:  Right, and that's wasted energy, yeah.



STEVE:  Absolutely.  They're heating up.  They're smoking.  They're just big clamps that just clamp down on this spinning disc and dissipate your energy in heat.  And so it's like, wait a minute, that's really dumb because we burned all this gas, or maybe electricity, getting ourselves going.  Then we throw it away in our disc brakes.  So instead, let's electronically brake the car and capture that energy.  Well, sometimes they capture it and then try to use it for automotive force.  Here they're just using it for electricity, which ends up - and again, the reason that's neat is that all of these conversions are lossy.  So it's a lossy process in the alternator to convert the mechanical momentum into electricity.  It's lossy again to convert the electricity back into mechanical momentum in a motor to reaccelerate the car.  So by saying, wait a minute, we're not going to accept that second phase of loss, we're going to use the electricity for electricity because we need that in the car, too, and that'll improve our mileage.  I thought that just very clever.



LEO:  You know, it's an interesting issue on electric cars is that modern gas engines generate so much heat that you can heat the car easily.  You've got plenty of spare heat.  But an electric engine they actually have to drain the batteries to heat the car.  So these newer electric cars, they have to do all sorts of interesting things to get them heated without depleting the battery.



STEVE:  Ah, and heating is a very energy-consuming process.



LEO:  Exactly.  So most of them have got, for instance, seat heaters, which is a much more efficient way to heat you up.



STEVE:  Okay, I'm not - I'm going to skip all the jokes...



LEO:  You've got a warm bottom, exactly.  But you know what, it's not so bad.  I like it.



STEVE:  So we have enjoyed over the last, it's been a while, tracking those intrepid little rovers around Mars, Spirit and Opportunity.  We talked about it many times because those little suckers, a storm would come along and coat their little solar cells with dust, and then they'd stop for a while.  But then the dust would get blown off, and they'd wake up, and everyone at JPL would pop some more champagne corks, and those little suckers just kept on going, roaming all over the place.  So I wanted to note that the mega-rover was launched on Saturday by an unmanned Atlas V rocket, and it's now making an 8.5-month, 354 - wait, 354 miles?  That can't be right.



LEO:  Thousand, maybe?  354,000 miles?  354 million miles?  Maybe million miles.



STEVE:  354 times 10 to the question mark.



LEO:  Yes.



STEVE:  But it's making a long trip to Mars.  So it will be...



LEO:  So definitely more than 340,000.  Must be 354 million.



STEVE:  Got to be million.



LEO:  Yeah, because it's - yeah.  That's right.



STEVE:  Yeah, it's Mars.  It's out there.



LEO:  It's a long way, yeah.



STEVE:  So, and it's on its way.  And so 8.5 months from now I'm sure this podcast will note its arrival.  Now, remember that the way the two cute little rovers, Spirit and Opportunity, landed was that they inflated a bunch of balloons, and they were sort of in the middle of this big balloon thing that they just dropped on, I mean, there were some parachutes that brought it down close.  Then basically it just sort of dropped it on Mars, and it bounced around and rolled for a while, and then the balloons deflated in a very clever system, which then got this whole balloon thing out of the way.



Well, this sucker, okay, this is - this weighs a ton, this new mega-rover.  It's called the "MSL," the Mars Science Laboratory.  And its name, in the same spirit of having Spirit and Opportunity, this one is called  "Curiosity."  So this is the Curiosity rover.  It's a $2.5 billion mission.  It weighs a ton.  It's the size of a car.  It is nuclear powered.  It contains 10.6 pounds of radioactive plutonium for power.



LEO:  That's a lot.



STEVE:  Yeah.  So it's 10 feet long by 9 feet wide, although it's also, I mean, like, if you measured it, it's got that sort of articulated design where it's got wheels out at the end of little arms.  It has a 10-foot arm with a jackhammer on the end, a 10-foot mast sticking straight up that has HD and laser cameras, and they said it's only supposed to, like, wander off around 10 miles or so.  But they're dropping it using a new technology which everyone's holding their breath about.  You can't drop this thing that weighs a ton using balloons.  So they have a new approach for getting it down on Mars that involves some sort of a hooking system.  I haven't - I didn't ever see any videos about it.  We'll be talking about that 8.5 months from now.



So with any luck, it will be successful.  Many missions to Mars fail.  The JPL guys regard Mars as sort of the Bermuda Triangle of projects.  In fact, I think Russia just screwed up and got - oh, it was in Earth orbit.  They were trying to get to Mars, and whatever it is they were doing wouldn't leave Earth orbit.  So it's like, whoops.  Mars claimed another victim sort of indirectly.  So I think that'll be fun, to keep an eye on Curiosity as it lands on the Red Planet.



LEO:  It's going to be kind of neat.  It looks like a flying saucer, by the way.  Have you seen it?



STEVE:  Oh, no kidding.



LEO:  Well, it's a ball.  But it's, yeah, it definitely, if I - or ball-ish.  If I were - this is kind of a UFO-looking device.  I'm just looking at some video of it.



STEVE:  Well, if there are any Martians that are...



LEO:  The Martians are going to say, "What the hell?"



STEVE:  They're going to go, "Wait a minute, that's a flying saucer.  You're right."



LEO:  It's true, there are other people out there.



STEVE:  Exactly.  It's coming in the wrong direction, though, because those flying saucers were supposed to be from Mars, not going to Mars.



LEO:  It is the strangest design for landing that I've ever seen.  It's very intriguing.  This is cool.



STEVE:  Yeah.  Well, 8.5 months we will be tracking Curiosity.



LEO:  I just love the ingenuity that's involved in all of this.



STEVE:  Oh, gosh, yes.



LEO:  Yeah.  So basically there's three parts to it.  There's the flying saucer part.  Then there will be a craft that will eject from the flying saucer.  And then it will drop the rover via wires as it reenters.  It's very interesting.  Then it flies off.



STEVE:  So maybe - because I heard something about hooks.  So maybe it's a skyhook technology.



LEO:  It's like a skyhook, exactly.



STEVE:  So it's staying up in orbit and then lowering this thing down.



LEO:  Well, it comes in.  It does make an entry and has retrofire to keep it from crash landing.  But once it gets close enough to the surface it drops the rover down via wires and then flies off.  It's very interesting.  So I guess they did - the last time, remember, they tried the bouncing ball.  Remember they had it...



STEVE:  That was how Spirit and Opportunity landed.



LEO:  Yeah, boing, boing, boing.  This is something completely different.  I just love the ingenuity.  I think it's fascinating.



STEVE:  Well, speaking of ingenuity, I got a nice note from Samuel Gordon-Stewart.  He said, "Steve and staff:  SpinRite just saved me."  Now, this is an interesting one.  I don't know if I've talked about this, certainly not for a long time.  He says, "I have an old DOS application which for years I've been running off my hard drive.  I only need to use it occasionally.  And when I went to use it today, I discovered that I'd accidentally deleted it, probably in my recent cleanout of files I supposedly didn't need.  Clearly I did.  So I whipped out the floppy disk which has the application and related files on it.  I went to copy it to the hard drive and nearly had a heart attack when it would no longer copy.  Windows couldn't read the main executable.  I took this as an opportunity to do something I've been meaning to do for a while.  I bought SpinRite."



LEO:  Yay.



STEVE:  "I let it loose on the floppy disk.  It went a few minutes working, then dropped into DynaStat in various places.  When I got back into Windows, I was able to copy the disk to the hard drive.  I don't think it's possible to get a replacement copy for this DOS application that I'm using these days, so the $89 I spent on SpinRite bought me enough time to get the files one last time off the diskette, and saved me an awful lot of trouble.  Thanks, Steve.  SpinRite is fantastic.  Regards, Samuel Gordon-Stewart in Canberra."



LEO:  Yay.  Yay.



STEVE:  So anyway, I want to remind people - not that many people use floppies any longer, I realize that.  But it does a great job of recovering contents of diskettes, which are often, after a long time, no longer readable.



LEO:  Stale.  I never thought of it for that.



STEVE:  Yeah.



LEO:  Intriguing.  All right.  BrowserID.  I'm ready for some free beer, Steve.



STEVE:  So, now, that sounds like a little bit of a non sequitur...



LEO:  He'll explain.  He'll explain.



STEVE:  ...to those who weren't listening before we began recording.  We have a couple things, some fun takeaways for our listeners, some places to go, some things to do.  We've talked about identity and authentication often on this podcast because, as everyone knows, I think it's, like, THE big problem we need to solve:  How do the services that we want to use on the Internet know that we are who we say we are?  We talked about VeriSign, the PayPal football, of course YubiKey I just talked about again, a one-time password system.  I've spent a lot of time developing my own Perfect Paper Passwords, and of course now the Off The Grid paper-based crypto system.  We've talked about OpenID and OpenAuth.  LastPass, of course, is still the system that I'm using largely.



Well, there's another entry into the game that's only a few months old and was recently launched by the Mozilla folks, the people of course who famously brought us the Firefox browser and some email clients and so forth.  And this is called - they call it BrowserID.  The thing that I like about this is that it is 100 percent open source.  It's open everything, nonproprietary.  It is cross-browser.  It is incredibly easy, not only for the user to use, but for a website to decide they want to support, that is, in order - if they wish to allow users to authenticate to them, to log in with a verifiable identity.



They could create their own - create an account with us, what's your username, what's your email address.  We'll send you email.  Click on the link to confirm your email.  What's your password?  And that's what all websites traditionally have been doing.  We end up, of course, with this problem that we're having to create identities, often with an email address, often with a password, individually for all these websites.  How much nicer would it be if there was some central means for doing this?



So we're beginning to see this.  I'm happy, for example - although I'm unhappy, as we've talked about often, with PayPal, I'm happy every time I go somewhere and I see PayPal as an option in order to purchase something because it's like, oh, yay, I don't have to give this site that I may not trust my purchasing information.  They'll use PayPal as my purchasing provider.  So that's a benefit for me.



Similarly, we're now seeing sites that are saying you can log in using your Facebook identity, log in using Google or using Twitter or Facebook.  Well, now, in that instance, they're using OpenID or OpenAuth in order to use the fact that some other service knows who you are.  And we have talked about that extensively.  We've covered those technologies before.



So what the Mozilla guys decided was, okay, let's see what's the simplest thing we can use?  And they thought about it and decided, well, that's our email address.  The email address is something all of us have at least one of, many cases multiple of.  And in fact, it is the thing that we are constantly proving we have control of because that's the way we do password recovery.  If you lose your password, then email me a link that I can use in order to recover it.  The point is, control of our email address is already the lowest common denominator.  That's what everything else falls back to if all else fails, if we forget our credentials, if we don't remember what our username was or our password.  It's like, okay, well, send it to my email account.  And it's because I uniquely have control of that, that's like the, well, I already said it, the lowest common denominator.



So the Mozilla guys said, okay, let's stop there.  Let's not go any further.  Let's use that which we already have as the means for identifying users.  So, Leo, before we began recording, I asked you to go to a demo site which these guys have set up, sort of tongue-in-cheek, but it's a nice example of how this works.  And it is MyFavoriteBeer.org.  So I would encourage our listeners to do this, too, anyone who's interested about this.  I played the game.  I did this.  And I have to say I was surprised, when I understood what was going on behind the scenes, which I will be describing in a minute, but how transparent this was, how easy this was to do.



So go to MyFavoriteBeer.org, and it's a site, sort of like a sample site, like any site could be, that has decided to support the Mozilla BrowserID system.  And when you bring up MyFavoriteBeer.org, up in the upper right is just a little icon that says "Sign in."  If you do that, you're presented with a dialogue asking for an email address which you want to use as your identity.  Part of the system is that you can use as many email addresses as you have chosen to set up, one or multiple.  If the browser knows that you have authenticated more than one email address, then it'll give you a list of them, and you can decide which identity, that is, email identity, you choose to use, that is, you choose to present as your login for that site.



So what happens with MyFavoriteBeer.org is, if you haven't yet created a BrowserID identity, and you typically wouldn't have by then, you would give it an email address that you control and submit that.  It would explain that it is going to send that address a link which you need to click in order to prove your ownership of that email account.  So that's the typical email account authentication loop that we're all familiar with doing whenever we're needing to prove we own, we have ownership of this email address.



So then you check your email client.  It will have emailed you a link, which you click, and that confirms your ownership.  And of course the link's got some crypto gobbledy-gook in it, just a big UUID-style token which is used one time because only you, who controls that email address, would be able to know what that token is and then click on the link in order to authenticate.



So the act of doing that works with JavaScript that's running in your browser and with asymmetric keys.  The browser generates a public and private key, given the fact that it has gotten verification that you own this email address.  And using HTML5 local private storage, it's able to maintain that.  Essentially your browser then stores this private key and the email address that has been associated.  There are a number of ways that the public key can be stored.  For example, there is BrowserID.org is a facility that will maintain, on behalf of users, their email address and public keys that allow other sites to query them for the public key.



So the browser maintains a set of email addresses and the private key.  And the browser creates this asymmetric key pair which is then authenticated through this email loop in order to create certificates, which it keeps.  Then, if you want to log into a website that supports BrowserID, the website will just show you a little login and typically say you could use BrowserID in order to log into me, much like this MyFavoriteBeer.org site does.  And you're simply presented with, when you click the login, a list of any email addresses which your browser has had confirmed for it, and you log in.  It's that simple.  So you are spared from the per site login problems.  You have authenticated that you control the email address.



Now, the website that you're logging into can essentially make a query to the site that contains the public key that matches in order to verify your certificate.  So there is a trusted third party which can - and there can be as many of them as you like.  You can choose who you want to use to store your credentials.  You could store them yourself.  And in fact it is possible for email systems themselves to support this BrowserID protocol.  That is, as part of this trusted email technology, there is a facility where you would not need a third party at all, that is, the actual email service can provide this certificate signing and storage and verify email ownership to third parties.



So essentially that's the way the system works is, I mean, it's almost spooky how simple this is, yet the Mozilla guys have come up with a simple way of binding an email address to a private key which the browser holds.  And then any website that you want to authenticate to is able to receive that certificate, essentially, from your browser, which asserts that you are who you are, that is, that you have proven your ownership of this email identity.  It then queries the trusted third party that you have associated with that to get your public key, which it uses to verify the signature, and that's all there is to it.  So it ends up being very easy to use.



So let's stand back a bit and look at this compared to the other guys, that is, the other technologies that we've talked about.  We've talked about VeriSign, which is a proprietary system where they do have both software and hardware tokens.  The software tokens, for example, running in a smartphone are no charge to the user.  The hardware tokens, like the football or the credit card are not free, so you have to buy them once.  But then using them is no charge to the user, although it is very expensive to actually use the system.  That is, anyone who supports the VeriSign authentication is paying a substantial cost per authentication.  So that's VeriSign's proprietary model for making money on their VIP, their VeriSign Identity Provider technology.



YubiKey, of course, is a favorite of ours.  There you purchase the one-time password hardware, which is the little USB key token.  You buy that once, and you own it, and they provide free authentication forever.  So you get multifactor authentication.  You get zero per use cost.  Anyone who wants to support it is able to accept a YubiKey login and then use the YubiKey server infrastructure in order to provide the multifactor authentication on the fly.  It is supported by other authenticators.  For example, LastPass is able to use the YubiKey.  And didn't I remember that Gmail started using it?  Google now...



LEO:  They have a second-factor authentication.



STEVE:  Oh, no, wait, they have their own.



LEO:  They have their own.  They have that Authenticator, the Google Authenticator.



STEVE:  Right, right.  So they have their own.



LEO:  Which actually, I mean, as much as I love the YubiKey, the idea of having it in my cell phone is so much easier.



STEVE:  Yes.  Yes.  And then there's OpenID and OpenAuth, which is gaining traction pretty rapidly.



LEO:  Good, because it's a good system.



STEVE:  It really is a good system.  Version 2 of OpenID is secure.  It solved a problem that v1 had.  And we're seeing more and more people saying, oh, you can, if you want to, log in using your Facebook identity or using your Twitter identity or using your Google identity.  So those services - Twitter, Facebook, Google, and many others - are identity providers that allow you to, essentially, your browser bounces, behind the scenes, bounces an authentication off of them.  And if you're logged in with them currently, it's transparent.  You may need to log in on the fly.  If you're not already logged in with them, then they'll confirm your authentication with them and then provide that back to the site that you're wanting to log in on.  So that's got broad and growing support.



There's a little privacy concern inasmuch as that, like, they know, "they" serving as your authentication provider, know the sites that you're visiting because you are bouncing - that site is making a query of them, and then they're providing the authentication information back.  So there is a little bit of that, although in the BrowserID model that I mentioned, by default there is that also.  That is, the site that you're logging into with BrowserID is pinging your trusted third party in order to get your public key for verification.



It is possible to avoid that, and that is to have - and the way that's done is that you can have your browser contain that authentication with, for example, a time limit where you can say this is good for a week of no additional authentication use.  It then has that signed with a time limit.  And so the public key of the authenticator is used to verify the signature, rather than the individual's public key.  So then you're not - the site you're logging into isn't querying for your credentials, they're just querying for the authenticator's signature, very much the way our public key system works now, where you're just getting the private key of the certificate authority and verifying that it signed the identity certificate.



And so of course in addition we have LastPass.  So LastPass is cross-browser.  It gives us cloud synching, so our instances of LastPass running on all of our various devices uses the 'Net and the cloud for keeping all of itself synched.  The advantage it has, of course, is that it requires no support at all from websites.  That is, everything is centralized in the browser.  We're able to use different complex usernames and passwords for every site.  It's kept cryptographically stored in the browser with no per site support required.  So in that sense it's universal today.  I lost my train of thought.



LEO:  But I'm just glad that it's not Mozilla.org only.  I do wish, I mean, how does it integrate with OpenID?  Is it a completely separate system?  Because, I mean, that's what bugs me.  We have an open standard, if everybody would just get behind it.  Is this better in some way?



STEVE:  Yeah.  So I think what's going to happen is that we will end up with a smorgasbord of solutions for a while.



LEO:  Yeah.  That's no good.



STEVE:  Well, the Mozilla guys are going to end up tossing their hat in the ring, too.  They will be building it into Firefox.  And there is a video that we really should take a look at.  I don't think it makes sense because we have largely an audio listenership here...



LEO:  I could just show it in the background.



STEVE:  It's on YouTube.  And if you search YouTube for "BrowserID," it's a beautiful example of this system working.  And it makes a compelling case for once this is integrated into our browser, because after all the browser is the client that we're using as our interface to all these services.  For example, they will be, Mozilla will be building this into the so-called "the chrome," that is, all of the user interface of the browser.  The user's identity as their email address will show to the left of the URL, sort of in front of the URL...



LEO:  If you're using a supporting browser.



STEVE:  If you're, well, yeah.  Well, in Firefox it'll be  built in.  Now, again, this is all open source.  Any browsers who wanted to could support it.  You don't need - it runs, it's able to run just using JavaScript.  So, for example, right now it runs on Safari and Chrome and IE and Firefox everywhere.  That is, the existing BrowserID does.  But it can be integrated more deeply into the browser to give you a more seamless experience.  And you can, if you want to, you can establish your credentials once with your browser; and then, as you go to other sites that want you to log in which support BrowserID, it could be made transparent.



So, and again, you need to fit this with the use case.  For example, I'm the only one using my machine.  I'm the only one using my various laptops.  So, and I have those secured.  So once I'm using them, I'm happy with my identity being authenticated painlessly.  There are other people who do want, like, to use their YubiKey every single time they log in, or they want to reauthenticate to LastPass in order to allow LastPass to securely log them into other sites.  So I believe, based on what I've seen, this has a good chance of gaining some traction.  But as you said, Leo, there's already some alternatives.



LEO:  Yeah.  We support a number of choices.  And unfortunately, the marketplace is supporting Facebook Connect, which is the least good choice here.  But every website in the world now, including ours, I hate to say it, because of user demand, will allow you to authenticate with Facebook Connect.



STEVE:  Yeah.  So probably it would be better if more options were made available.  And maybe that's what'll happen.  For example, if BrowserID being pushed by Mozilla is picked up, I don't know if it would be competing with what Google is doing.  It would be great if, for example, if Chrome were to build this in, too.  I have sort of seen some Google and Mozilla - the sense that they're working together, which is a nice thing to see.  So...



LEO:  I just think OpenID is there.  It's open.  We support it.  Maybe not a whole lot of sites support it, but we support it.  And I just - I think that's the one that we should choose.



STEVE:  Well, okay.  What you need, though, in order to use OpenID, is you need to be known to some other service.



LEO:  Oh, that's a - yeah.  That's a good point.  And so this doesn't need that.



STEVE:  No.  This doesn't.



LEO:  See, that is a good point.  You store the authentication credentials on your own system.



STEVE:  Correct.



LEO:  Yeah.  That is a good point.  That's the one - you have to use an OpenID provider.  I mean, I use my own website because I have a website.  But if you don't have your own website, you have to use an OpenID provider.



STEVE:  Right.



LEO:  That is a disadvantage.  You're right.



STEVE:  So it'll be interesting to see what this does.  I wanted to mention it because it's got the Mozilla guys behind it.  Firefox is pushing it.  What I could see, again, is that sophisticated users end up with a hybrid.  That is, maybe if people are using Firefox or even Chrome, because it is compatible, Firefox is going to be very friendly with BrowserID.  And it's so simple to set this up.  You verify that you control this email address, and basically you're done.  Then, if sites begin supporting browser ID, that will then start to pull it.  And I wouldn't have a problem at all if it ended up winning in the long term, that is, if Facebook Connect was sort of an interim solution, but something that just sort of was even easier to use, and secure, and more private because, as you may have heard, Leo, Facebook is now getting a lot of privacy auditing scrutiny over concerns that they're not doing as good a job as they should with the privacy of their users.  The advantage they have, of course, is such a massive user base.



LEO:  Well, yeah.  And regardless of how you feel about whether Facebook protects us or not, no private company - Microsoft, Facebook, or Google - should manage this.  It's got to be an open and nonproprietary solution.



STEVE:  Agnostic and nonproprietary, exactly.



LEO:  So, I mean, at least Mozilla's an open source foundation and all of that stuff.  They're not a not-for-profit.  I mean, they're highly profitable.  But I trust them a lot more than I trust Facebook.  Maybe there's a way for OpenID to work with BrowserID, and then that would be a good standard I would support.  I guess, I mean, I support this.  This is good.  You're right.  We need - at least we need a number of choices until one determines - becomes the standard.



STEVE:  Right.  And that's what I think will happen.  I think we'll, I mean, Firefox has - I mean, even though a lot of us have moved to Chrome, Firefox is still my primary browser.  It's got a strong following.  If sites begin to support BrowserID, I mean, it is so easy to use and just so  transparent, while being secure, that that could give it some traction.  I mean, we're still at the early days here.  Anyway, I wanted to put it on the map of our listeners.  I have no doubt we'll be talking about it in the future.  Maybe it'll just end up being something that dies and never goes any further.  But the Mozilla guys are excited about it.  I like the fact that it is very straightforward.  It uses simple, well understood crypto.  It's open and standards-based and gives us, when it's in place, it gives us a very simple-to-use solution.  And it's trivial to have it in place.



LEO:  Right.  I like that.  I like that.  The problem is I don't use Mozilla.  Is there a Chrome plug-in I can use?



STEVE:  You don't even need to.  You just did it, Leo.



LEO:  I did do it.  I have it.  I'm done.



STEVE:  Yeah.  Now, if you were log out of MyFavoriteBeer.org and then log back in, I mean, then go back to MyFavoriteBeer.org, you can log in using BrowserID.



LEO:  I am on Chrome.  You're right.  It says, "Sign in using Leoville.com."  I sign in, and now I'm here.



STEVE:  That's all there is to it.



LEO:  And it even got my picture.  I don't know where it got that.



STEVE:  You did a full secure cryptographic login.  I mean, it is shockingly nice.  And I would love our listeners to put "BrowserID" into YouTube and look at the demo.  The demo from these guys makes it - it gives you a good sense, better than I can in an audio podcast, just for how seamless and transparent this ends up being.  I mean, what you did, Leo, is all there is to it.  And that's now persistent and sticky, and you can log out and log back in just that easily.



LEO:  Good.



STEVE:  It really does work.



LEO:  You, as always, turn us on to the most interesting, and not merely interesting, but important stuff.  And I thank you for doing that, Steve.



STEVE:  Well, we'll see what happens with this.  Again, we're in the Wild West.  Lots of competing authentication approaches.  We're covering them and keeping our listeners current with them.  And we'll track them as they evolve.



LEO:  This has been going on for so long, I mean, I go back to Microsoft doing this with their Passport single sign-on.



STEVE:  Right.  [Buzzer sound]



LEO:  I still, well, you know what's funny, when I log onto Live.com, that's what I use.  It's the same address and password I've had for how many - I shouldn't say that.  I should probably change the password now.  But, I mean, I've been using that for all this time.  And for a while it was useful because Microsoft owned Expedia, so I used that.  Now they've got - they've weaned me off of it.  They won't accept it anymore.  And so more and more that's what's going to happen with anybody who has these old systems.  Single sign-on is an issue, and I think we need it, and we need a secure system.  And I think this, you know, this is a contender.  I'll give you that.



STEVE:  Yeah.  I mean, what I like - we have LastPass now because it requires no support from the service that you're logging onto.  It puts it all over on the browser side.  But over time I think what we're going to see is we're going to see - and this is what the stats have shown.  For example, blogging, like sites that require you to log in in order to post a comment, if they give you the option of logging in using your Facebook Connect or using other accounts, I wouldn't be at all surprised if they add BrowserID to that because it is also simple for them to add this to their own site.



I mean, the Mozilla guys have done a fabulous job, both on the user experience side and on the so-called "relying party side," on the side of the relying party that wants to rely on the authentication.  They've made it incredibly easy to add this.  So what has been seen is that, when you make it easy to log into these, like, throwaway logins, not having to create an account, you just, oh, login using Facebook, more people post.  More people get involved.  And so it behooves sites to make it easy to log in without having to create accounts for that site.  And so that's one of the ways that these alternative single sign-on systems will gain traction. 



LEO:  Yeah, yeah.  I'm with you.  Steve does this show, we do this show every Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern time, 1900 UTC, at TWiT.tv.  I won't be here next week.  Tom Merritt will be filling in as a...



STEVE:  We'll do a...



LEO:  Yeah, we'll...



STEVE:  I was going to say, we'll do a Q&A with Tom next week.



LEO:  Yeah.  Sarah and I will be in Paris for TWiT in Paris for LeWeb.  That's going to be a lot of fun.



STEVE:  TWiT in Paris.



LEO:  TWiT in Paris.  Tom and Iyaz and others will hold down the fort for us while we're gone.  And we will be broadcasting, I should mention, 6:00 a.m. to 10:00 a.m. Pacific time, something like that, maybe 5:00 a.m.  And then we'll rebroadcast those.  We'll package them up and put them out as specials.  But there are so many big names who are going to be at this event:  Phil Libin from Evernote, Kevin Rose will be there, Dave Morin of Path, there's so many interesting people.  We're going to interview them all, and you'll get a chance to see them.  So there's a chance - it's funny.  We're going to Paris to meet the biggest names in U.S. entrepreneurship.  You'll get to see those interviews on TWiT next week.



Let's see.  What else should I tell you?  Oh, I've conferred with Eileen.  She likes the idea of a sci-fi special.



STEVE:  Yay.



LEO:  It's going to be a scheduling issue because then I come back from Paris, and then I leave on the 20th for Christmas vacation.  So we'll figure this out.  I won't be here on the 21st for our show, either.  Tom will be doing that, as well.



STEVE:  Okay.



LEO:  But Tom would be good for a sci-fi special because you know he does Sword and Laser.  He does a sci-fi podcast.  So he's an expert on all this stuff.  But if we can work it out, I want to be here.  If we can, we'll do it with you and me.  Otherwise it'll be you and Tom.



STEVE:  Yeah.  And you and I have such a history of discussing all of the things that we've found, and you know Hamilton so well and so forth.



LEO:  Right.  We'll figure it out.  Tom might bring something to the table, though.  He's always good for this stuff.  What else can I tell you?  GRC.com's the place to go to find Steve's software, SpinRite, the world's best hard drive recovery and maintenance utility.  You've got to have SpinRite.  But you should also check out all his free stuff there.  Somebody was asking how it goes with - which project was it?  Was it - Off The Grid, I think it was.  That's done; right?



STEVE:  Yeah.  In fact, I finished the final printing page yesterday, and I removed the "This page is under construction" or whatever it was that I had said up at the top.  That's gone now.  The Off The Grid printing is absolutely finalized.  I need to get - it's still not linked into the main menu, so you have to go to GRC.com/offthegrid in order to find it.  You can't get there through the menu because I want to - I need to now just finish up the rest of the web pages, all the documentation.  But it's completely wrapped up, so I'm really pleased with that.



LEO:  Yay.



STEVE:  Yay.



LEO:  Yay.  When you go there, you'll also find a feedback form so that you can ask questions for next week's episode,  GRC.com/feedback; 16Kb versions of the show for the audio bandwidth-impaired; full transcriptions, too, that's even more compact if you just want to read the transcription.  Steve makes both of those available.  We've got audio and video available at TWiT.tv.  Thank you, Steve.  Great show.  Really interesting stuff, I thought.



STEVE:  Yeah.  This is important.  Someday we'll look back on this and think, wow, that's the way they used to do things?  That's so strange.



LEO:  [Geezer voice] In those days - you know, now I just put my nose against the screen, and it knows it's me.  Okay, thanks, Tom.



STEVE:  Thanks, Leo.



LEO:  Tom.  Thanks, Steve.  Tom will be here next week.  And have a great week.  And we'll see you next time on Security Now!.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#330

DATE:		December 8, 2011

TITLE:		Listener Feedback #132

SPEAKERS:	Steve Gibson & Tom Merritt

SOURCE FILE:	http://media.GRC.com/sn/SN-330.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Tom discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



TOM MERRITT:  This is Security Now! with Steve Gibson, Episode 330, recorded December 7th, 2011:  Your questions, Steve's answers, #132.



It's time for Security Now!, the show you need to watch if you want to stay safe on the Internet because of this man, the guy from GRC.com, SpinRite, ShieldsUP, all kinds of good stuff, Mr. Steve Gibson, with us today as usual.  But I'm with you today as not usual.  Leo Laporte's out in France.  Pleasure to be with you again on Security Now!, Steve.



STEVE GIBSON:  Likewise, Tom.  We always have a good time, and you've got the whole beat down for the podcast, so - and somehow it always seems you land on the even episodes, which are Q&A episodes.



TOM:  I love the Q&A episodes.



STEVE:  I mean, you've done non-Q&A, I think, once or twice.  But generally it happens that you're on the Q&A, so...



TOM:  Yeah, I lucked out.  I got to be on one of the How the Internet Works episodes, which was fantastic.  That was a great tutorial series.  And I like the Q&A episodes, too, because they're little samples of lots of different stuff.



STEVE:  It's funny because I'm - I guess I'm really more conscious of the continuity that we have from one episode to the next.  And, like, for example, there's some things here that I'm aware that I would like Leo to know.



TOM:  Oh, yeah.



STEVE:  Because it'd be nice to have that for the future.  And it's like, well, okay, Tom's going to know this, but Leo's not going to know this.  So our listeners all know it.  But it helps when the person I'm working with also knows it.  And I'm thinking, oh, shoot.  Well, Leo's going to miss this.  But I'll sort of try to remember that he doesn't know that, or he'll say something.



TOM:  Or he could watch the show.



STEVE:  If he's listening, yeah.  He's not, though.



TOM:  He might be listening right now, going "I'm hearing you, Steve.  I'm getting it all."



STEVE:  I don't think so.  He's in France.  He's not listening to the Security Now! podcast.



TOM:  Probably not.  He's probably asleep.  But he can listen to it later on the podcast.  Let's get into the news, Steve.  You always seem to start with a zero-day something.  We have a zero-day flaw in Adobe Reader this week.



STEVE:  Adobe gives us so much to work with.



TOM:  Yeah, they do, don't they.



STEVE:  Yeah, my goodness.  So the big news is that Adobe alerted the security followers, the security industry, to their detection of a zero-day, a new zero-day flaw in Adobe's Reader and Acrobat products.  So what they're seeing is they're seeing this, because it's zero-day, meaning the first time they learned about it was someone reported that this was actually being exploited.  So there are flaws in, not only the current version, which is 10.1.1, and all earlier.  So these are being used in targeted attacks where email is being sent containing a PDF which is deliberately malformed in order to take advantage of a weakness in the security in the handling of some aspect of PDF documents.



Now, what's significant is that the new v10 of Reader and Acrobat has the so-called "Protected Mode," or in Acrobat I think it's called "Protected View."  And in this case those new protected modes have mitigated the problem.  The problem exists in these versions, but it can't get out.  It cannot do the damage that it can in the pre-v10 releases.  So...



TOM:  So you still want to update v10 to get rid of this.



STEVE:  Well, actually Adobe's not even going to make it available.



TOM:  No, they're not.  Okay.  Well, then they're not.



STEVE:  Yeah.  They're that confident that this does - that their containment technology does keep it corralled.  No, that was the perfect question to ask.  So what Adobe's going to do is, they will be updating to fix this problem in the v10 line, but they're not going to do it in an emergency fashion.  It'll be their regular quarterly update schedule.



TOM:  Gotcha.



STEVE:  Which, for a change, they're going to stick with.  They haven't been ever sticking with it until now.  But in this case, this exploit, which is not to say that all exploits, but this one does get contained by their containment technology that they introduced in v10.  What they are going to do, though, is an emergency release, which they have committed to have available for all v9 and prior versions of Reader and Acrobat, no later than the week of December 12th.  So, what, we're in the week of December 5th.  So that is to say, so no longer than next week, the week following this podcast, there will be an emergency release from Adobe.  They have promised to fix this problem because it's a bad one for people who did not move up to 10.x of Reader and Acrobat.



TOM:  It's another good example of why you should maintain updates and always use the latest version.



STEVE:  Yeah.  And there are, largely in corporate settings, there's more inertia because they're feeling like, well, we already know what v9 does, and it's working.  And there's my - I'm famous for my reticence to move to the latest and greatest because oftentimes you just end up with some different shaped arrows in your back.  I'm still using XP.  And I look over here, and I see that we have 852 days left of support for Windows XP.  So I'm not in a big hurry.



Although I have seen some things in the news that talked about - oh, in fact it was a little blurb that didn't quite make my notes for this week because it wasn't anything spectacular, but it mentions that - and I was wondering what the source of this was.  It's probably Windows, I mean Microsoft, because there was some mention that, had RSA been using Windows 7 rather than Windows XP, the security inherent in Windows 7 would have prevented the exploitation of the flaw, which is what compromised the RSA SecurID keys which we covered extensively some time ago.  So it's like, okay, well, that's good for them.



But we do know that Windows XP is still the majority platform on the Internet.  That is, Microsoft is not, in general, succeeding in getting people to move off of XP because there are old stick-in-the-muds like me for whom XP is still doing everything I need.  And it's nice to let a few service packs get out there on a new OS before you jump to it.  Which was the case with Windows 7.  There were new security problems with Windows 7 which have now been resolved.



TOM:  But suffice to say, when there's an update for security, make sure you implement.



STEVE:  Yes, yes, yes.



TOM:  That's what I was trying to get at.



STEVE:  Yes.  And, yeah, absolutely.  And I don't - for our listeners, typical end users, or maybe people in corporations who can work to drag their companies forward, certainly being up at Adobe Reader 10, I mean, it's free.  Why wouldn't you be using 10 versus 9?



TOM:  Yes, unless you're using Foxit or something.



STEVE:  And don't have the problem at all.



TOM:  Yeah, exactly.  All right.  Let's move on to the OpenDNS "DNSCrypt" beta for Mac users.  I thought this was really interesting.  It's a documented DNS encryption scheme.  What's this about?



STEVE:  Well, so this is only for OpenDNS users.



TOM:  So you have to be using the OpenDNS service to serve your domain names?



STEVE:  Yes.  So what they've done is, this is not an Internet standard.  This is not DNSSEC.  And DNSSEC, which is still not widely available, we've covered it in detail in previous podcasts.  It provides spoofing detection and authentication, essentially secure signing of DNS records, which allow somebody who makes a DNS query - now again, this is DNSSEC.  This is not what I'm talking about with OpenDNS and DNSCrypt.  I wanted to draw the distinction, though.



TOM:  Yeah, we just want to understand what DNSSEC is so we could tell the difference; right?



STEVE:  Right.  And so it provides a means of signing DNS records so that the recipient of a DNS query can absolutely, with cryptographic security, verify that the record they received is the record that was signed by the record's owner, the authoritative owner and distributor of that DNS record.



TOM:  And not being served by Immigration & Customs Enforcement, say.



STEVE:  Precisely.  Not altered in any fashion.  So what the OpenDNS company has done is - and this is just sort of random.  I mean, I'm not sure why they did it.  Certainly they're looking for ways of inducing more people to use their service.  And so here's a new feature.  The way to think of this is...



TOM:  I think that we don't - and we should point out, we don't have DNSSEC rolled out yet.  Right?



STEVE:  Right.  And it's, I mean, the root servers were only just recently signed.  So those records are signed.  But in general, the availability of DNSSEC is virtually nonexistent.  It's like IPv6.



TOM:  So maybe this is a Band-Aid to get us by until DNSSEC is fully rolled out?  I don't know.



STEVE:  No.  This is...



TOM:  Too farfetched?



STEVE:  The way to - yeah.  The way to think of this is a feature that one DNS provider, OpenDNS, has now in beta only for Mac users.  So if you're a Mac user, and you are using OpenDNS, or you like - or you're a Mac user, and you like the idea enough that this would move you to OpenDNS, then you've done what they really want, which is moved to OpenDNS.  So what this is, is this is point-to-point encryption of DNS records between a Mac running the OpenDNS DNS client, meaning you have to run something special on your Mac side in order to make this point-to-point encrypted connection to the OpenDNS servers.



TOM:  So this isn't going to work on a router.



STEVE:  Well, correct.  It will go...



TOM:  You have to run it on the actual machine.



STEVE:  Yes.  So the idea is, normally your Mac would - and that's a very good point.  You could not have your router configured to use OpenDNS and then have your Mac receive - have your router do the queries on behalf of the network.  Now, most routers are not generating DNS queries themselves.  They're merely offering the DNS IPs to the machines on the network, and then those machines make the queries.  So that would still work.  So the idea would be, if you've got a Mac, and you're running this OpenDNS beta for Mac users only, then a low-weight, that is, a relatively inexpensive-to-establish encrypted query is made to OpenDNS, and then an encrypted reply is received.



So what does this do?  This, more than anything, this gives you privacy, which is something that even DNSSEC won't do.  DNSSEC gives us verifiability and authentication, but specifically not privacy.  DNSSEC does not encrypt.  Even when it's eventually deployed, it's not encrypted.  So this does give you point-to-point privacy.  This means that in an open WiFi environment, like in a Starbucks, where you don't have any encryption key on your wireless, anybody sniffing your connections will be able to see all of your DNS queries.  They'll see what sites you're looking up by your query and the IPs of those sites coming back to you.



TOM:  They just can't interfere in that case, right, and perform a man-in-the-middle attack because it's a signed domain name.



STEVE:  That's one of the things...



TOM:  Probably.



STEVE:  ...this is supposed to prevent.  And actually I have a question about whether it does, that it prevents man in the middle, because I don't see how it can.  I haven't looked at it in depth because it's in beta at the moment.  And, for example, you have to reenable this every time you boot your Mac.  They don't even have it set up so that it remembers to stay on.



TOM:  Oh, well, that's annoying.



STEVE:  That's one of the things in their FAQ.  They said, quote:  "If you have...."  Oh.  They said the beta must be reenabled after every reboot.  So anyway, so I wanted to let people know this is there.  It's pre-release.  I wanted to make sure people knew that they had to turn it on again every time they use it, that is, every time they boot their Mac.  But for people who are interested in privacy for DNS, this is available.  So it's like, okay.  It is what it is, an interesting service that OpenDNS offers.  I guess if you're a Mac user, you're already using OpenDNS, you might give this a try and see what you think.



TOM:  Do you have any idea why it's only for Mac?  It seems like an odd way to go.



STEVE:  Yeah.  Maybe they're Mac people, and they just haven't gotten around to doing it for Windows.  It might be that the Mac platform, being a little more easy to maneuver - for example, getting this into Windows might be more difficult.  I just don't know.



TOM:  So let's move on to the new Zeus banking trojan, which has got a nice little one-two punch, apparently.  This is not your father's trojan.



STEVE:  Well, Zeus has been a problem for quite a while.  It's become the premier ACH banking trojan, meaning that people download it into their machines by mistake.  It lives in their system, watches them doing banking transactions, and then hijacks their banking credentials.  So that's actually the way this thing runs.



What the FBI has reported they are now seeing is that the latest variants of the Zeus trojan will perform a fraudulent transfer in order to obtain moneys from one or more individuals, and then - so that's the "one" part of the one-two punch.  The second part is they will then launch a distributed denial of service attack on the banking website in order to pull the site down.  The reason they do that is that this gives them a larger window of opportunity in order to get the funds moved to somewhere where they cannot be reversed.



So the way this normally fails, that is, the bad guy's ability to transfer money completely out of a mode where it cannot be reversed, is that the end user may notice something going on.  I mean, they're in the process of doing their banking with the website.  So if the trojan gets the credentials and moves the money away, if the user, in doing their banking, checks their balances and says, wait a minute, it looks like I don't have as much money in my account as I thought, well, it's just because it just at that moment was transferred away.  So they then contact the bank and complain that there seems to be something wrong.  The bank pursues this and sees that there was a fraudulent transfer and reverses the funds immediately.



Well, so what now we're seeing is that immediately after the fraudulent transfer is made, a denial of service attack is launched on the bank to prevent the valid users from being able to get to the website to see that their money is no longer there.  So it steals their money and then crashes the site so that they can't tell that their money has been stolen.



TOM:  Now, you could theoretically still call in, phone banking, and check your balance.  But I guess the idea is people don't do that as often as they might check online.  And that delay is all the bad guys need?



STEVE:  Well, yes.  But also it's one thing for the site to affirmatively tell you that you have a zero balance, and it's another thing for you just not to be able to get to the site.  Because, I mean, the Internet's still a little flaky enough that if someone tries to use the website, and it doesn't respond, they think, oh, well, I'll come back later and try it again.



TOM:  They're not usually going to pick up the phone and say, oh, something's wrong, I'd better call in and check my balance.  They're just going to assume that their Internet connection is down.



STEVE:  Exactly.  Like there's something wrong with the banking website, and they'll check it again later.  Now, okay.  The other thing I've picked up on in doing a little bit more background on this was an interesting new trick that the bad guys are using because they have the problem of transferring the money somewhere, and then what do they do with it?  How do they get it out of reach of the banking system so that it can't be grabbed back?



One of the tricks now that's being used is that the bad guys will contact high-end luxury jewelry stores and commit to purchase precious stones or, for example, luxury watches that are very expensive.  And they will say - they'll arrange the purchase, and they'll say, okay, we're going to wire the money to you, and then we'll have one of our people come and pick up the merchandise.  And so the jewelry stores says, yeah, that's fine.  As long as you've wired the funds, that works.  They will then transfer the money from one or more individuals who have been infected with the Zeus trojan into a composite account, and then from there to the jewelry store.



They will then verify with the jewelry store that the funds are available.  And then one of their so-called "mules" will come in and pick up the physical merchandise which has now been paid for from this composite money transfer, wiring the funds into the bank, that then - everything's been paid for.  This guy then comes in, the so-called mule, and absconds with the merchandise.  Then, when the law enforcement gets involved, they realize what's gone on and will reverse the transaction, but the jewelry store has already allowed the goods to leave its control.



TOM:  So that DDoS is there to give them time to get to the jewelry store and make off with the jewels.



STEVE:  Exactly.



TOM:  Wow.  This is like a 1950s heist film.



STEVE:  It's just amazing.  And this is what's actually going on now every day.



TOM:  Yeah.  I expect to see, like, Frank Sinatra or George Clooney in the movie version of the Zeus trojan.



STEVE:  Right.



TOM:  Somebody should option that.



STEVE:  So there's been, as you - I'm sure you've been covering this in TNT.  There's been lots of discussion about this Carrier IQ.



TOM:  Oh, yeah.  I've been looking forward to getting your perspective on this because we have been covering this quite a bit.  For anybody who doesn't know, Carrier IQ, a program that a researcher discovered was existing on the phones - sometimes it's an app, sometimes built into the operating system.  And on this particular researcher's HTC phone, this guy named Eckhart, he found that it was - it seemed to be monitoring your keystrokes, the contents of text messages.  Turns out that it's probably not as nefarious as it looked at first.  Rebecca Bace was hired by Carrier IQ to look at it independently.  She said it's not doing any keystroke monitoring.  Dan Rosenberg independently looked at it, and he's had a good report about what it does and what it doesn't do.  So what do we need to worry about here, Steve?



STEVE:  Well, so - okay.  This reminded me, the whole episode reminded me of exactly what originally happened with the first discovery of spyware.  And Leo likes to remind people that I'm the person who coined the term "spyware."



TOM:  Catchy, by the way.  Good job on that.



STEVE:  [Laughing] I remember it was something that I learned about had been installed in my machine without my knowledge or permission.  And this is, I mean, this is, like, old school.  This is a long time ago.  I learned about it because I was beta testing ZoneAlarm, which at the time was the very - it was the only personal firewall that did outbound monitoring.



TOM:  I used ZoneAlarm for years.  It was a great firewall.  And free.



STEVE:  Yup.  And it was, like, two days after installing it, I got a popup saying that - and the details of the - wait a minute.  Aureate, it said Aureate, A-u-r-e-a-t-e, was the software that had been installed in my machine.  Well, this was not malware, technically.  This was so-called "advertising" software which had been brought in by WinZip or Zip for Windows or one of - it was one of the Zip utilities.  And I had installed that.  This thing had been installed without my knowledge or permission.  And it was then monitoring what I did and sending this information back.  And the ZoneAlarm firewall caught it doing that.



So immediately, it's like, wait a minute.  What do I have - what is this?  And this, again, this was a very, very early piece of software.  So I made this news public, and it brought a firestorm of reaction down on this Aureate company and on the people who were carrying this into people's machines.  Well, so this is very similar to the same thing that has happened because the question is, is it the handset maker's fault for this being there?  Is it the carrier's fault, like T-Mobile or AT&T?  Well, and even Apple has this installed on their iOS devices.



TOM:  Well, there's reference to it in iOS 5, and they say they're going to get rid of it.  They don't use it anymore, and they're just going to get rid of all trace soon.



STEVE:  Right.  In an update to iOS it'll be completely removed.  So executives at Carrier IQ have said that their monitoring software gathers information about web usage, as well as when, where, and to what numbers calls are made and text messages are sent, but not the content of text messages.  I did see something that indicated they are capturing URLs that smartphone web surfers are surfing to.  So that's some concern.  But they're also saying that, you know, they care about text messages only inasmuch as did the message go through?  Did the message not go through?  If not, then what cell tower is the user using, that sort of lower level, service level stuff.  So multiple class action lawsuits have been filed against Carrier IQ, just as multiple lawsuits were filed against this Aureate company.  People mostly are upset with - they're concerned that they feel no one told them this was going on.



TOM:  Right.  It was...



STEVE:  It's been installed behind their back, without their knowledge and permission.  And suddenly it's like, wait a minute, I'm being spied on by my phone.



TOM:  And Carrier IQ and the carriers themselves are caught with their pants down here because they've been doing this for decades without anybody knowing or caring.  And I tried to explain this on TNT yesterday.  You think about your old handsets from the '90s; right?  They were doing all of this stuff.  They were logging all of this information because the handsets were sort of considered part of the network.  They weren't yours.  They were a piece of equipment you used to access the network.  All this information, even URLs, but things like when a text message is sent, what cell tower, all of that stuff is stuff that has to be part of the network.  The carrier has to know it to complete your calls.  They know all the phone numbers you dial, too, but they have to.  And so what Carrier IQ was doing is collating all of that information and providing some diagnostic tools.  And so back then, with features phones being the only phones, nobody thought twice about it.



But now, smartphones are ours.  They do a lot more.  We entrust a lot more information to a smartphone - banking information, passwords, private messages that we didn't really rely on phones for in the past.  But this software is still there in the background, and it's still doing what it was always doing is trying to collate diagnostic information.  And it sounds, from what I've read, that it's not doing really, really nefarious stuff like keylogging.  But it is passing along a lot of information about a device that is very personal now without your knowledge.  And I think that's really the big thing is that they don't make it clear what it is that it's running, and they don't give you a chance to opt out or opt in, either one.



STEVE:  Right.  It's funny because what you just said reminds me of the model and the example that I've often used with personal computers.  It used to be the case that people would say, oh, I don't worry about my PC security because I don't do anything important on my PC.  I just use it for surfing the web and doing email, but that's all.  And my response had always been, well, today that may be true.  But the world is going to be pushing you towards more use, more comprehensive use of that same device.



And what will happen is that your bank will start encouraging you to do your banking online.  And so there'll be some creepage of your use in a direction where security really does matter.  And if you never bothered to give your machine a good password, then you slowly start using it for more critical things, then you're beginning to increase your exposure over time.  And so it's really necessary, if you say deliberately, "I don't care about the security of this device," to be sure that you never do anything with it where you do care about the security, even in that instance.



TOM:  Yeah.  I think that Carrier IQ probably isn't the bad guy here.  I think they're just behind the times.  They did a really bad move by trying to use a cease-and-desist copyright infringement notice...



STEVE:  Oh, yes.



TOM:  ...to shut down Eckhart when he first put out his response.  They've since scrambled to try to do the right thing, but it's too late now.  But the issue really revolves on should they change with the times and should they make it clear.  Sprint actually has, in their terms of service, that they can collect this kind of information.  They just don't disclose how they're going to collect it, that it's being collected all the time.  It's not satisfactory to me that it's disclosed as well as it should be.



So I think Carrier IQ is really trying to figure out how to do the right thing at this point.  But they're going to have to change the way their software works.  To satisfy me, they're going to have to say, look, this is going to be removable.  We're going to have to alert people that we're collecting this information up top, and what information we're collecting, and give you a chance to opt in and say, yeah, I would like the network to work better, and I would like to contribute to that.  As long as I know that the contents of my text messages, the contents of my emails are not being collected by somebody, I personally am okay with them collecting all the information they already know because they have to know it to make the network work, and using that to do better diagnostics.



STEVE:  Well, what I think will happen is that all smartphone users will get an education about what their carriers are collecting.  I think that that's been part of the problem.  As you say, this has been going on in one form or another forever.  And as our platforms evolved, they were able to enhance and increase the sophistication of software running out at that endpoint.



And so certainly everyone would agree that the contents of our email and the contents of our text messages should not be spied on or spy-able by some random third party.  As you pointed out, Tom, this stuff all goes through the carrier.  I mean, the carrier knows about the content of our text messages because text messages are not encrypted, and they're a service of the underlying platform.  So it was this idea that some third party that we weren't aware of was involved.



And so I think that over time it will just become understood that there may be some subcontracting going on that the carriers use for collecting this data; that it comes with the territory; and it's about cell towers and service-level things, not content-level things; and that people - it'll just be - we still may not read the fine print.  But there'll be, as a result of all this kerfuffle, sort of like, oh, yeah, I heard about them, and it ended up not being a big deal.  And that's just what happens with smartphones.



TOM:  But let me be clear.  I want the ability to turn this thing off at a moment's notice if I decide, you know what, Carrier IQ, I heard that they're starting to collect some things that I don't like.  I want to have control over it as the user.  I want to be able to opt out of it.  And right now the only way to opt out of it is to install a new ROM on your phone, and that's not acceptable.



STEVE:  Yeah.  I don't think opting out will be available.  I think your carrier will say, if you want service from AT&T, this is part of the service.  I mean, it's built into the phone.  It's what they require in order to offer their service.  I doubt that turning it off will be an option.



TOM:  Well, you may be right about that.  They can't - in some cases they do it as an app instead of built into the operating system.  So they have the capability of doing it.  Whether they will or not, that's a whole different question.



STEVE:  Right.



TOM:  Let's move on to we've got some miscellanea.  Jakob Nielsen has weighed in on the Kindle Fire and other seven-inch tablets.  What does the master of web usability have to say?



STEVE:  Yeah, well, first of all, for people who don't know his name or who recognize his name, and you obviously do, Tom, this guy, J-a-k-o-b N-i-e-l-s-e-n, has long - he's written, like, some of the classic texts on website usability and accessibility.  He's regarded as a major UI guru.  I, in my Twitter stream recently, @SGgrc, I tweeted the link to a very nice review that he did, sort of a usability study, only a small number of people, but he felt like he got some very good results from it.  So you can just go Twitter.com/SGgrc, and you can easily find the shortened link to his review where I refer to this.



And I just wanted to share with our users the upshot of him looking at this was to conclude that seven-inch tablets were too small for convenient use of non-mobile websites.  So websites that have been designed for mobile screen sizes were fine.  But just wandering around the web in general, a seven-inch screen was unusable for non-mobile websites; whereas the iPad or a larger screen, a 10.something-inch screen, was large enough for non-mobile websites.  So I just sort of thought that was an interesting conclusion for them to come from, that I wanted to share.



TOM:  Yeah, the Kindle Fire, I found, is really good for reading books.  I feel like it's light, you know, it's lighter than an iPad.  But it's got a nice resolution, and it's kind of paperback size.  But I have not found it to be great for anything else.  Not for me yet.  And maybe - I haven't been on a plane with it yet.  So we'll see if I like it for video.  I have a feeling I want that bigger screen.  I want that 10-inch screen when I'm watching video.



STEVE:  Yeah.



TOM:  Also on your Twitter stream - people should follow @SGgrc - a great review of current eInk readers.



STEVE:  Yeah.  There was a very nice review from the guy who developed Instapaper.  So he's well known and been around for a while.  What I liked was that he took multiple brands of eInk readers and really did a very nice side-to-side comparison.  So anybody who's been wondering among the various eInk readers, that is to say, the reflective display, not the LCD tablets...



TOM:  Right, we're not talking about the Fire or the NOOK Color or any of those here.



STEVE:  Precisely.  Those readers that are eInk and monochrome, he looked across them all.  And I'll just give you his - his result was that he liked, of all of them, the smaller Amazon Kindle the best.  That is what is now just being called the Kindle.  Not the Touch, and not the so-called Kindle Keyboard, but just the little Kindle.



TOM:  The one that's $79 if you buy the ad-subsidized one.  It's super cheap.



STEVE:  Precisely.  And my feeling is that it's actually a little small.  It's sort of tough to hold it because there's no, like, paddle area at the bottom, which I enjoy on my Kindle 3, or the so-called Kindle Keyboard.  I sort of like that better.  I mean, it's nice because you can really put it in your pocket and carry it around, so it is small.  I almost think they undershot on the size end.



And speaking of Twitter followers, yesterday I crossed the 25,000 followers mark.



TOM:  Congratulations.  That's fantastic.



STEVE:  So for all of the podcast listeners who are following me on Twitter, I wanted to just send a thank you.  I tweeted a thank you this morning, telling everyone that I will continue posting important and useful tidbits whenever I'm able to.



TOM:  Well, here, yeah, we've got two examples here:  the Jakob Nielsen stuff, the reviews on eInk readers that you could have found out there.  See, I follow.  I'm one of the 25,000, Steve.  I follow.  It's great stuff in that feed.



STEVE:  Well, and I did have a nice note from a Paul Smith, who - actually, this is a different kind of testimonial than I normally post.  He said, "SpinRite Saves Movie Night."  And he's in Ipswich in the U.K.  And he said, "Hi, Steve and the support team.  Sunday night is movie night for us.  However, the disk drive in our NAS, our network attached storage box, started going AWOL.  So I took it out and connected it to a PC and ran my copy of SpinRite - first use since I ordered and purchased it back in 2010.  Anyway, at about 16 percent I got a divide overflow error and a red screen.



"This being Sunday, I thought that was it.  But no, an email to GRC Support was returned in minutes, and changing a setting in the BIOS as recommended by Greg completely cured the problem.  Within the hour, SpinRite had completed its magic, and movie night was back on.  Of course, the drive then worked perfectly.  Thanks, Steve, for the great software.  And you can pass my thanks to Greg McIntyre from your support team.  And also thanks for the Security Now! show."  So I just wanted to let people know that they're getting something for their money when they purchase our software.  We really are here, maybe not 24/7, but at least 7.



TOM:  Yeah, yeah.  Well, you saved movie night.  That's important.  That's the kind of stuff people feel much better about, when it's sort of like, gosh, this is something I was really looking forward to, something I really enjoy.  I didn't think I was going to get a response.  Good customer service, that's just as important as the good product.



STEVE:  Exactly.  That is what you're buying.



TOM:  All right.  We've got a dozen questions today for Listener Feedback #132.  You ready to dive in, Steve?



STEVE:  You betcha.



TOM:  Let's go with #1 from @Jason_JW in Nacogdoches, Texas.  Used to have a union organizer friend of mine lived in Nacogdoches.  He says:  Steve, any recommendations for PC performance diagnostic software?  My boss complains the PC I recently built is slowly down.  Thanks.



STEVE:  Okay.  So this was something that was tweeted, interestingly enough.  I wanted to mention that I do kind of keep an eye on my Twitter stream.  So if someone wants to mention @SGgrc, I will normally see that.  I get a lot of great tips from our listeners, and so that's really a great source of information which I very much appreciate.



So I thought about Jason's question, saying that a recently built machine was slowing down.  And he was asking me, like as you read, recommendations for PC performance diagnostic software.  And I thought, okay.  I'm aware of a number of different things that have been around.  For example, there was something I ran maybe six months ago that did an audit of my machine's startup, so that I was able to see what was going on as the system was starting.  But I sort of pushed myself back a little bit.  And I said, you know, one thing that almost anything you install does is make a mention of itself right in the control panel under Add/Remove Programs.



And so what I normally do when I first encounter a system which is running sluggishly, is rather than installing any other kind of third-party stuff, I just jump over to the Control Panel and look at Add/Remove Programs.  And it's very revealing to see how much crap, frankly, a machine can acquire, in someone else's hands, in a couple of months.  There are some people who just seem unable to resist installing things.  And very often these are things that are installed once.



So many programs now that you install want some time from your system when they're starting up.  They want to run in the background.  They want to run a chunk of themselves in the background.  I'll see that, like, for example, things I rarely use, like for example Microsoft Office Suite, will have a quick startup thing that it's running whenever it starts up.  And it's like, okay, do I really need all of that?  So I would recommend, before you do anything else, just go to the Control Panel, look at Add/Remove Programs, and scroll through, maybe sit down with the person whose machine this is and say, okay, when was the last time you used that?  Do you really need that?  And what about that one?  Very often these are things they installed once and then forgot about, haven't even used since.  And just getting rid of all that junk can really make a difference.  So I think that's what I would recommend is just use - just go through and look at, sort of challenge them for the things that are installed, do they really need those things.



TOM:  Yeah.  I think I can add a little bit to that, which is you don't really need software to do diagnostics so much as a good checklist of inspections.  And that's what you're talking about.  And look at MSConfig, too, see what's starting up because that can slow stuff down.  And I just reinstalled WinDirStat recently, for the first time in a long time, which goes through and shows you graphically what's taking up space on your hard drive, which is another good way to find out - because when you see that list, they show you the size of the program.  But seeing that graphic layout, it really says, oh, wow, I've got a lot of stuff in that directory.  Maybe if I just clean that out and then do a defrag, that helps.  Good stuff.



Question #2 comes from CyberAdminDude in Montreal.  He wants to know how to stress the importance of security to "n00bs."  He says:  I am a catchall server/programmer guy for a small company that runs a website.  I was wondering what the easiest way to stress the importance of good practices to people less in the know is.  When I talk about them, I get blank stares or NyQuil-like reactions to my rants.  The person who is my commander isn't really tech savvy, either, but knows the buzzwords, LOL.  So I don't have the influence/power to make changes myself.  We have passwords like "apples" for our phpadmin page and FTP passwords like "Workus3r."  Is there a website with a collection of testimonials or horror stories I can send to my coworkers to help them understand the threats?



STEVE:  So, okay.  I like this question because it's one that I see a lot in various forms.  We have our listeners, who understand what's going on with security, understand that the fundamental importance, that is, that security plays in today's world.  And so many people are frustrated with people who just don't give it a thought.  And they say, exactly as CyberAdminDude does, how do I get this across?  How do I explain that this is really important?



And the best advice that I have for people is try to connect the notion of cybersecurity to aspects of security that people do understand, and that's real-world security, physical security.  Would you deliberately leave your front door unlocked?  Would you deliberately walk away from your car with the windows rolled down while there's stuff in your car that would be valuable to somebody else, that might be available for stealing?  I think that the problem that people have with cybersecurity, not understanding what's really going on, is that it's too virtual.  They just don't think of it in the same way they think of physical security.  We've talked about how no security is perfect.  Yes, locking your front door doesn't prevent people from breaking your windows.  But locking your front door is better than not locking your front door.  And closing your windows is better than leaving them wide open.



So I've sort of thought about this a lot, and I think that the best advice is to try to relate this to security that people do understand.  And everybody understands physical security, real-world security, security that you grow up gradually acquiring an awareness and an appreciation and an understanding of the importance of, over time.  And try to explain that the same issues in the real world do affect the virtual world.  And so it's important to take these precautions.  Just leaving your windows down doesn't mean someone's going to steal from you, it just means they can much more easily.  Similarly, using a password like "apples" doesn't mean somebody is going to crack into your phpadmin pages, but it means they can much more easily.  It's exactly analogous.



TOM:  In fact, if you want to look for horror stories, I would say just look at the news.  Pretty much every week you'll find two or three.  And I would suggest using those in conjunction with what Steve's saying, which is like, would you leave your windows open?  And if someone did break in and steal your car because you left your windows open, how would you feel?  Do you want to be that guy who left the password as "apples," and then a hacker breaks in and it makes national news, like this water pump that allegedly got hacked?  Do you want to be that guy?  Try to relate that sort of like you will be, and what's your defense going to be?  Oh, I tried to secure anything?  No.



STEVE:  Right.



TOM:  All right, Question #3.  John Palmer in Washington, D.C. has a question about Carrier IQ.  A lot of people have a lot of questions about Carrier IQ.  On December 1st he tweeted Carrier IQ...



STEVE:  No, wait, on December 1st "I" tweeted.



TOM:  Oh.  He says:  Steve, on December 1st you tweeted "Carrier IQ not a rootkit.  It's commonly installed carrier feedback firmware for monitoring handsets.  Comes with the territory."  But, he says, it clearly is a rootkit, isn't it?  So is it a rootkit or it's not a rootkit?  Why isn't it a rootkit?



STEVE:  Well, okay.  So it was interesting how much controversy this stirred up because I was seeing people using the term "rootkit."  Actually, people were sending me in my Twitter feed all of this commentary about Carrier IQ being a rootkit.  And so I tweeted, "It's not a rootkit."  And that generated still more controversy.  So I thought I would just take this moment to say to our listeners, to remind people, a rootkit is not software that you don't like.  I mean, okay, a rootkit is software that you don't like, but it's not defined as software that you don't like.  A rootkit is something that a malicious third party installs in your machine through a vulnerability, and it's not something that your OS vendor approves of, not something that you approve of.  It was maliciously installed.



So we now understand that, even though people may not like the idea that there is this monitoring technology which was offered by a third party, it's not a rootkit because it was there when you got the phone.  I mean, it is - somewhere in the license agreement it says it's going to be there.  And it may have been hidden from you deliberately.  In some cases that's so that it's not mixed in with the applications that you see and you're able to run and install and remove and stop running and so forth.  But it's also - it's part of the firmware.  So I just wanted to draw that distinction.  Rootkit, again, rootkit isn't defined as stuff you wish wasn't there.  Rootkit is malware which was installed and hides itself.  So, yes, Carrier IQ is preinstalled and hiding itself, but that's not a rootkit.



TOM:  And does a rootkit have to have some sort of kernel association?



STEVE:  It generally does, although that's normally, I mean, "root" means, in UNIX parlance, god-level rights, full rights to the system.  And it hides itself by using kernel hooks in order to prevent itself from being found.  So this is just sort of - the Carrier IQ isn't a rootkit in that sense.  I mean, it is down in the OS, in the kernel, monitoring what we're doing, but with full knowledge of the provider of the handset.  And that's the difference.



TOM:  Sony rootkit was not - Microsoft was not aware that the Sony rootkit was inhabiting Windows.



STEVE:  Right.



TOM:  Web791 puts it well.  He says this is more like a root canal, just something painful that you don't want there.



STEVE:  [Laughing] That's pretty good.  I like that.



TOM:  But the dentist knows that he's doing it to you.  All right, let's...



STEVE:  Well, and you're also paying him for it.



TOM:  Yeah, true.  You're paying the carrier for your phone, too.



STEVE:  Right.



TOM:  Let's get to Question #4.  Aaron in Bend, Oregon is not alone.  He's baffled by bandwidth.  So many people are.  He says:  Hi, Steve.  I'm confused by bandwidth.  Everywhere you look, the only measure you find is Mb/s.  Is it really that simple?  Does that mean that my office of 30 people with a 1.5 Mbps connection is truly the same as my home DSL connection of 1.5 Mbps?  Shouldn't there also be a capacity measurement?  I'd like to think that the office connection is like a multilane freeway with a speed limit of 65, and my home is like a rural two-lane road with a speed limit of 65.  Both have the same speed, but different capacities.  Could you clarify?



STEVE:  Well, it's an interesting analogy which is a little bit confused.  But we'll have some fun here with some visuals.  We recently on the podcast talked about the way bandwidth is throttled, that is, I think it was a Q&A maybe either two weeks or four weeks ago.  Somebody said, how is it that bandwidth is differing for different users, if all the packets on the Internet are moving between routers at the same speed?  Which is the case.  The routers out on the main Internet backbone are treating everybody the same.  It is the so-called "last mile," which is the term used for the ISP to you connection, where the ISP is hooked into the main backbone of the Internet, pulling, able to transact traffic with all of the other major providers on the Internet.  But then your ISP is sort of your portal, your connection out onto that super high-capacity highway.  So what your ISP does is limit sort of the average speed that you're able to move traffic to and from the Internet.



Now, the reason that this wide-lane, multilane freeway analogy, where all the cars are moving at 65 miles an hour, versus a rural two-lane road with the same speed limit, the reason that's sort of confusing is that the way to think of bandwidth would be in cars per second, for example.  So if all the cars are moving at 65 miles an hour, but you've only got one lane in each direction on a rural road, then that's going to limit the number of cars per second that are able to travel.  But if you had a multilane freeway, where each lane was moving at 65 miles an hour, because now you've got parallel lanes, the number of cars per second is much higher on a freeway, which actually is why freeways work.



TOM:  So in other words, the miles per hour in this analogy is equivalent to the speed of light.



STEVE:  Yes.



TOM:  Because all your bits are moving at the - well, and maybe not on copper.  But essentially the bits are moving the same speed all the time.



STEVE:  Right.  Right.  And so we have the notion of packet rate, where an ISP limits you to a certain packet rate, that is, the number of packets per second you're able to move.  The packets themselves may move very quickly.  In fact, the actual packet, the actual rate at which the bits move would be the same for a low-bandwidth cable modem user and a high-bandwidth cable modem user.  It's just that the high-bandwidth cable modem user gets more packets per second, where the actual packet rate is the same.



And now, finally, stepping back and looking exactly at what Aaron was talking about with his office connection at 1.5Mb and his home connection, what really happens is, if you were to monitor a single user's 1.5Mb connection, it would be very burst-y.  That is, he clicks a link, and that sends the link off.  And then the page comes back.  And then he sits there and looks at the page, scrolls a bit, clicks a link.  Again, that happens.  So he may have a 1.5Mb connection, but he's not using it, that is, his utilization of it, because he's just one person, is probably relatively low.  But if you put his 30-person office behind that same 1Mb connection, you're going to see it is saturated by those 30 people.



So now you've got 30 people, all clicking links and probably waiting a little bit longer, that is, their traffic is, like, lined up one behind each other, really packing that 1.5Mb connection much more densely than Aaron sitting by himself at home.  So even though both situations, a 30-person office and one-person home, may have a 1.5Mb connection - and this is what he talked about when he's talking about capacity.  It's actually the utilization level of that link at that speed is probably much higher when you've got 30 people all fighting each other for access to the Internet over that same relatively low-bandwidth channel, compared to 30 people.  Essentially, if they were all trying to use it all the time, they would be 1.5Mb divided by 30 would be their shared level of access.



The good news is it can function pretty well because most users who are not just downloading monster files, but interactive users, are inherently burst-y in their access.  They click a link, get a page, look at it, click a link, get a page, look at it.  And that's the kind of access that 30 people could share just by sort of interleaving their access.



TOM:  Well, and this is why bandwidth caps are not bandwidth caps.  They're data usage caps.



STEVE:  Right.



TOM:  And there's been some good studies recently that show that they don't do anything to alleviate congestion.  And it fits right into your analogy.  A high data usage person, someone that's going to run up against that 250GB cap from Comcast, for instance, is just someone who drives a long way on the road.  He spends a lot of miles on the road; right?



STEVE:  Right.



TOM:  But he doesn't contribute in any relevant way to the congestion.  The congestion happens when you have a lot of cars trying to use that highway, and you reach the capacity.  And I've got the names here:  Herman Wagter and Benoit Felton talked an unnamed DSL company into allowing them to look at their customer data in five-minute increments, and it bore this out.  The so-called "bandwidth hogs" who use a lot of data did not contribute in any relevant way to the actual congestion that the DSL provider was experiencing.  And it's because of that burst-y way that things happen that you're talking about.  It's just it's numbers.  It's sheer numbers of people who use the service.



STEVE:  Yeah, it would be like, using your analogy, it would be like if a huge number of people wanted to only drive one exit on the freeway.  Well, they still would have a problem, even if they're only going one exit.  It's not how far they go, it's how many of them are trying to go per unit of time.



TOM:  On that same stretch of road, exactly.  All right.  Question #5 from Kevin Odell in Levittown, Pennsylvania, wants to know how he can test router guest network security.  First he wants to thank you for Security Now!.  He really looks forward to every week and has never missed an episode.  He says:  How can you test guest networking is properly segmenting the networks?  I know you mentioned the Airport Extreme does it properly.  I recently purchased a D-Link DIR-655 router and have had a lot of problems using AirPlay between my iPhone and my Apple TV 2.  Recently a friend was at my house and said, "Cool, I can see your Apple TV."  I knew immediately there was something wrong with the router since he was on the guest network, and the Apple TV should not be visible.  I did a firmware upgrade, and still the same thing.  I turned off the guest networking, and AirPlay works perfectly.  I went through three levels of tech support, and they finally passed it on to the engineers at D-Link, and they still can't explain it.  I just wanted to make your listeners aware, don't trust guest networking unless you know for a fact that it's working properly.



STEVE:  So that's a great piece of wisdom.  One of the things that I hear frequently as the person who offers ShieldsUP, which has been used for untold number of years by people to check their security, what I'm hearing all the time is they'll believe they're secure, that they'll believe their ports are closed or that they know the way their system is configured, they'll check it with ShieldsUP, and ShieldsUP will find a port which is open that they were unaware of.  And so it's really the case that testing is the only way to know for sure what's going on.



Now, I did a little bit of research on D-Link in particular, since that's what Kevin was referring to.  And there is a setting on the guest network configuration, which you have to explicitly disable, which allows routing between the guest network and the main home network.  So you absolutely want to make sure that's turned off.  If not, then the router will allow traffic to cross between guest and main network.  And even so, you want to test.  The way to test is as simple as just trying to ping the router.  I mean, I'm sorry, try to ping the machine on either side that are in these networks which are supposed to be isolated.



Take a look at the IP, for example, that a machine has been assigned over on your home network.  And then, from a machine on the guest network, just use the ping command.  Open up a command window and type p-i-n-g, space, and the IP address of the other machine.  See whether you get a response.  You hope not to, if that machine is not accessible, and you want your networks to be isolated.  And I would just say, if you're using a guest network, regardless of what router you have, look carefully at those settings and make sure that the router has been instructed to isolate those networks.  Because it makes sense that there would be the option because in some cases you might want your guest, for example, to have access to your Apple TV device.  In other cases, you definitely don't.



TOM:  Yup.  Question #6, Luis in Spain has an interesting observation about packet TTLs, that's Time To Live.  He says:  Hello, Steve.  About the TTL or hop count, I want just to inform that, when a packet goes through a MPLS VPN for a customer, the provider doesn't touch the TTL.  So a lot of times there is not a TTL change.  Most packets have more hops than we can see on the traceroute.  Just to inform you of that.  Kind regards, Luis.



STEVE:  I loved that.  It's something that we had never talked about before in our - you were talking about the How the Internet Works series.



TOM:  Yeah, yeah, love that series.



STEVE:  And one of the things we covered carefully was this notion of the TTL, the so-called Time To Live, which as Luis mentioned has been renamed "hop count" in the IPv6 spec.  They wanted to make it clear that it wasn't a time measured in seconds or any temporal sense.  It was actually decremented per router hop, and so simply called "hop count."



But the point he makes, and it's a really good one, is when you are in a virtual private network tunnel, then your traffic, as it moves from router to router, the external tunnel packets will have their TTLs decremented.  But the packets moving through the tunnel don't see router hops at all.  So there will be no TTL decrementation for tunneled packets, that is, packets that are being carried by the VPN tunnel, which is something I had never mentioned before.  And I thought that was a neat observation.  So if you were, for example, to do a traceroute from a point to another point, not through a VPN, you would see every hop count shown by traceroute that the packets made.



By comparison, if you did the same traceroute, but some portion of the transit was carried by VPN, then you would see none of the TTL decrementation or the IPs of the routers which a traceroute would normally show you, thus tracing your route, until your packet emerged from the other end of the tunnel, then made any additional hops it needed to, to get to its destination.  So you are in fact blinded by the tunnel.  They don't get seen.  I thought that was just a very cool observation.



TOM:  Yes.  That means it's working, is what that means.



STEVE:  Yes, exactly.



TOM:  Christopher S. Bates in Central Valley, California asks about special characters in passwords.  He says:  I've been catching up on your podcasts here in the last few weeks and remember you mentioning a problem with some sites disallowing special characters in usernames and passwords.  That's one of my bugaboos, too.  I completely agree with you that this is horrible practice.  I have noticed, though, and tried to get changed, that my bank follows this practice for logging into their customer web portal.  I have reported this as being an issue many times to their online suggestion box/email system, but it has never been corrected.



I understand that this is probably something that I shouldn't worry about, considering they do enforce other security measures.  But it is something I feel should be enforced on all sites and systems, especially those dealing with financial institutions.  Do you have any thoughts on this situation, or any suggestions on how I may get them to change their policy?



STEVE:  And you want to keep reading.



TOM:  Well, okay.  I wasn't sure if we were - he says:  I left this in case you don't want to read it over the air.  I'm talking about Chase banking.  I just wanted to make it clear to you this is a large institution, not a small credit union.



STEVE:  Yup.  I thought we ought to put Chase's feet to the fire.



TOM:  All right, Chase, you've heard it here.



STEVE:  Yeah.  Okay.  So we've talked about this before.  And since we last did, I verified some of the rumors I had heard.  The reason this seems to afflict banks, annoyingly, is that the way the web evolved was that, unfortunately, web-based front ends were put in front of existing old-school mainframe banking back ends.



TOM:  Aha.



STEVE:  And so, I mean, it is slipshod, and it is sloppy, and there's no excuse for it.  But there is an explanation for it.  So I don't mean to be excusing this behavior at all, merely understanding and explaining it.  And so it is because once upon a time the login technology for mainframes wasn't very secure, and it only allowed alphanumeric passwords.  And so what happened was that exactly that technology was just sort of pushed out onto the Internet so that users are logging in, in the same way over the Internet that they once logged in directly at a mainframe terminal.



Now, there's nothing that would have prevented a much more sophisticated and secure front end to provide essentially separate web accounts which would then have an identity to the mainframe, so that users could log in with all kinds of extra security, multifactor authentication technology that the back end didn't ever need or think to support.  And then, if all that succeeded, that would then log them in using old-school and private alpha-only login, so that they had to authenticate with a much more secure front end.



That's not what happened.  And that's why we keep seeing banking institutions having among the worst web-facing login security of any.  It's because of the legacy of mainframe login that just got surfaced out onto the web page.  So the bad news is I don't think, no matter how many times Christopher and any of our other listeners complain, we're going to see any change.  It will end up being a legislative requirement imposed by law.  At some point they will say minimum password length and large character set must be supported, and they must be case sensitive, and so forth.  It will be that kind of legislation which finally enforces banking institutions to say, well, we're going to have to spend some more money.  They just don't want to spend the money.



TOM:  Yeah, they don't want...



STEVE:  Anyone could do it.  But we've got to make them do it.



TOM:  They don't want to spend the money rewriting all that stuff.  My credit union may not have a fancy iPhone app, but they allow non-alphanumeric characters in my password.  So that's why I like a credit union.



STEVE:  Yeah.  And he says Chase banking doesn't.  But a credit union, some small credit union often does.



TOM:  Because they don't have that legacy.  That's the reason.  Question #8, a listener requesting anonymity, or however you pronounce that, shares the "inconvenient truth" about Apple's app vetting.  Here we go.  He says:  Every so often I hear you talking about how the apps in the Apple App Store are somehow more secure because they've been vetted by Apple.  On first glance, this appears to be true.  Apple does some vetting for each app.  However, the truth is a little different.  It's trivial to get undesirable code past the vetters.



As an active iOS app developer, I thought I'd share some insider information:  For example, in my apps I allow four weeks to pass from the time of submission before doing anything that might be regarded as nefarious.  I even check the date at time.nist.gov to be sure I'm picking up the real date.  I host a website with a simple text file on it. This contains instructions for the app, allowing me adjust the app's activity.  In my case, I use this to turn user logging off once I have enough data, but it doesn't take a genius to work out how this could be used to activate a malicious payload.



In my case I use this data to improve the apps and see which features are being used.  I've got six apps in the App Store, every one of which sends data back to me behind Apple's back, without Apple or my apps' users knowing a thing about it.  It's trivial to do, and there's almost zero chance of being caught.  Great show, been a listener since the start. 



STEVE:  So there's a perfect example of what we've talked about often, which is there is no way for Apple to know exactly what an app is doing.  I mean, they'd have to have the source code, and then have to go through and inspect the source code in detail to see what's going on.  So this anonymous listener, who is a developer, obviously came up with a slick way around it.  He has his apps look for the date and change their behavior after a certain date.  So it gets past Apple, who checks the app to see what it's doing at time of submission; and then simply, since the app knows it's going to have network connectivity, every so often it checks the date.  And if it's been long enough, it suddenly awakens an aspect of the app that was lying dormant before.  And in this case the app pings this guy's website to obtain updated instructions about how it should behave, whether or not it should still log and where it should send the logs and so forth.



So, I mean, I wanted to share this because this is actually happening.  And it's very clear there's just no way to prevent this kind of behavior.  And as he says, his use is not malicious, but it's certainly the case that it could be.  And so the point that I made last week with Leo, when we were talking about what's more secure, Apple or...



TOM:  Android. 



STEVE:  ...Android, exactly, is none of the above.  Maybe Apple is putting a little more oversight on - we made the point that Android developers pay $25, and it's easy to be anonymous, and then they were able to dump apps day and night into the Android store.  Leo countered with the fact that, yeah, sure, but those apps can also be removed retroactively.  So both Apple and, for example, Google in the case of Android Marketplace, have the ability of pulling things that are later found to be a problem.



And my point is, install as few things as possible.  Or look carefully at the reputation of the companies whose apps you're installing.  Now, this guy, who's a multi-iOS app developer, he's doing something that Apple doesn't officially approve of because he feels Apple's policies don't give him the flexibility he needs to deliver the best app to the users.  I wouldn't disagree with that.  And there is no way, I mean, this is a perfect example of there is no way for Apple to guarantee the performance of their apps, no matter what they do.  So any malware could do this.  And it's not like we're letting any secrets out of the bag.  I mean, this is clearly obvious to any developer who wants their app to work, who wants this kind of flexibility and freedom.  There isn't any way to prevent it.



TOM:  Any computer that has network access is going to be able to do this.  That's just the way they work.



STEVE:  Yes.  And these mobile devices are now where the bad guys are having their fun and having their jollies.



TOM:  Chad in Omaha, Nebraska shares an unintended consequence of VPN.  He says:  Dear Steve, I wanted to share with you and fellow Security Now! listeners an issue I have come across.  I recently placed an order through Roku.  I ordered at my local open WiFi cafe while my connection was protected by VPN.  But Roku cancelled my order and refunded the money.  When I called to ask why, they explained that because the IP address of the computer I ordered from did not match the area of my credit card billing address, they flagged the order as fraud. 



I explained at great length that the order was legitimate and that I was willing to reorder from my home computer so they could see that the billing ZIP code matched my home IP address location.  But after a week of relentless calls, Roku still refuses to let me place my order again.  Perhaps my situation could be a eye-opener to another Security Now! listener.  Love listening to all the TWiT shows.  However, without a doubt, Security Now! is top of my list.  Thank you, Chad.



STEVE:  I thought that was really interesting.  First of all, I am heartened from a fraud prevention standpoint to see that we're beginning to match up IP addresses with physical addresses.  I mean, there's always been sort of an IP location technology, never worked very well.  But over time, especially with things like Google roaming around, pulling the locations and mapping the locations of all of these WiFi nodes, we're beginning to get much more IP location granularity.  And of course smartphones with GPS that also have IPs, that's helping to create a map of where, physically where, given IPs are located.  And so the idea that that's now being used as fraud prevention I think is very nice because it means that people in Russia are going to have a much greater difficulty using credit cards from Omaha, Nebraska.



But there is an unintended consequence that a VPN provides.  Because if you use a VPN, and this is related to that tracerouting example from a couple questions ago, your physical IP will not be where you're located.  It will be where you're terminated.  It'll be the other end of your VPN tunnel.  And if you were using some third-party service like HotSpotVPN, for example, you're going to be connected somewhere probably remote from where you are, some distance away.  And so if anyone tries to geolocate your IP address, they're going to see the other end of the VPN, not you.  So on one hand I say, hey, Chad, nice going that you were in an open WiFi environment, smart about using a VPN to protect yourself.  But, whoops, there was a side effect of that, which is you came out on the Internet with an IP of your VPN provider, not located near where you went into the VPN tunnel.  It's a very cool problem.



TOM:  Yeah.  And hopefully companies like Roku will get to understand that, hey, if I call you and say, look, it's really me, there is a way to verify that over the phone and take the order.  Come on.  Don't just blacklist the guy from ever buying stuff.



STEVE:  It really does seem like they got a little carried away with this.



TOM:  Yeah.  Marcin Ceglarek in Gdynia, Poland - and I'm sure I've mispronounced your name, so I apologize - has a question about lithium ion battery management.  He says:  For some time I've been a happy smartphone user, and your advice about battery management has been really helpful.  I feel much more confident about proper battery management now.  Previously, I was discharging the battery all the way down, and then charging it to full again to avoid the memory effect from NiCad batteries, which I now know lithium ion batteries don't have and, in fact, is BAD for lithium ion.



But there is one more issue:  Is it safe to leave the phone plugged in overnight?  From experience, I know it will get fully charged in about three hours.  Since I'm plugging it in around 8:00 p.m., it is fully charged by the time I go to sleep.  But if I then unplug it, overnight it loses about 5 to 10 percent of its battery life, so in the morning I only have about 90 percent remaining.  On the other hand, if I leave it plugged in all night, I have full 100 percent in the morning.  What's the best approach?



STEVE:  Okay.  So assuming that the phone or laptop is properly managing its lithium ion batteries - and we have to make that assumption.  I mean, if you've got an older device which is causing batteries to catch fire, or doesn't have - I mean, as some have...



TOM:  Yeah, yeah.



STEVE:  ...or isn't properly managing batteries, then we're turning you into the battery manager.  And that's just a bad idea.  What lithium ion, the way lithium ion batteries behave is different from the way NiCads behave.  The way NiCad batteries are charged is a NiCad battery voltage will increase to whatever level it's going to and then begin to decrease.  And so in fact there were, like, rapid NiCad chargers that the RC modelers used for a long time which could recharge a NiCad incredibly fast by watching for that dip, watching for the point where the voltage began to drop.  And the second it was detected to be dropping, the NiCad battery charger would stop and say your battery is now fully charged.



Lithium ion doesn't work that way.  Lithium ion has to be stopped charging per cell, that is, every individual cell in a series connected chain - remember that "battery" itself, the word means a multiple.  You have a battery of guns.  That's a bunch of guns.  Or a battery of cells is what we refer to as a battery.  So that's a set of cells, individual cells connected in series.  Each cell has to be monitored separately, which is why, if you look at the connectors on our laptop batteries, you'll see sort of like a comb of connections.  And when you put your battery in your laptop, that comb is mating to a comb on the underside of the laptop, and those individual connections give your laptop's battery management access to, that is, visibility into each connection between the cells in that battery module which you plugged in.  Lithium ion has to be charged to a cutoff voltage and then stopped.



So what is happening in Marcin's case, he's asking, if it takes three hours to charge, do I need to unplug it at the end of that time, in which case it will then switch to battery operation and discharge 10 percent by morning, or can I leave it plugged in?  The answer is we have to assume the battery management technology is going to do its job.  That is, it's going to work correctly.  It's the battery manager; you're not.  So leave it plugged in.  What'll happen is it will charge the battery, the individual cells in the battery, to their cutoff voltages and then stop at the proper point.  And then those three hours or eight hours, rather, while he's sleeping, it will be running off of the AC, not off the battery.  So it will charge it and then not drain it.  It'll be running off AC so that in the morning he disconnects it, and it's fully charged because the battery was charged but has then been floating overnight, not been discharged by not being plugged into the wall overnight.



And so that's the right strategy.  Trust the management technology.  If the device is within the last five years, everyone has figured out how to do this right, and they are doing it right.  So leaving them plugged in over the long term is fine, as long as you're going to be using it.  And remember, do not discharge lithium ion any further than you need to.  Try to plug it in as much as possible.



TOM:  Yeah, that's what I do.  I plug it in all the time.  Eric Duckman in the chatroom pointed out you can turn it off.  If you're not worried about taking calls overnight, while you're sleeping, that's the safest way is just don't have it on at all.  And then it's not draining anything.  But if it's not charged all the way, you probably want to plug it in so it charges up overnight.  In which case you're fine.



We actually answered Brendan's question earlier on in the show.  He wanted to know if you recommend the keyboardless Kindle or the Generation 3 keyboard version.  Sounds like you like the keyboardless one.



STEVE:  Yes.  The reason I put the question here, though, was that he was saying I want to buy one and don't know what to get.  My feeling is it is impossible to recommend.  It'd be like someone saying what's the best movie?  Well...



TOM:  "Casablanca."



STEVE:  What do you like?



TOM:  Yeah, yeah, exactly.



STEVE:  It is too personal.  I have all of the Kindles.  I've shown them to various friends.  Everyone likes a different one.  Some people love the idea of touching the screen to change the page, even though the reviewers think it sort of sucks to do that.  And other people want a physical button.  They just like the idea of resting their hand on the button.  I feel like, hey, I mean, since I've got them all, if I'm going to go down and walk on the beach, I'll put one in my pocket, I want it to be the small one.  But if I want to, like, sit at Starbucks, I want something that's easier to hold, so I like having more margin at the bottom.



My point is, I really think they're all good.  And so the one you choose is personal choice.  It's what, you know, how sensitive are you to price because the smallest one is the cheapest one.  If you get the ad-supported, it's only $79.  The larger, older ones are more expensive.  Maybe you care about touch, or maybe you don't.  If you're going to be typing things in a lot, then having either the physical keyboard or the touch keyboard would make sense over having no keyboard and having to use the up-down left-right arrows to navigate around.



So at this point I think they're all good, and it's just a question of who are you?  How sensitive are you to price?  How sensitive are you to size?  How sensitive are you to ease of handling?  Do you want to have a physical button?  I like physical buttons.  Other people think it's cool to be able to touch the screen.



TOM:  There you go.  And that's good advice for helping figure out which one is right, once you've figured out who you are.  But we can't figure out who you are.



STEVE:  Right.  And there are now, I think, Kindle is carried by Staples, is it?  Or Best Buy?



TOM:  I know Target had Kindles.



STEVE:  Wait, no, I'm sure it's Best Buy because...



TOM:  Best Buy has it, too.  You're right.



STEVE:  Yes.  Kindle Fires were being purchased at Best Buy.  So really, I would say the good news now, even things that used to be, like Amazon, web only, are now in physical retail.  I would say go to the store.  Go to Best Buy.  Hold them.  Feel them.  And that's the way to make your decision.  Try not to do it online, if you don't have to.



TOM:  Yeah.  John Morton in New York City has our last question here.  Actually it's a tip for Mac battery management.  He says:  I've been listening to you and Leo since day one of Security Now!, Steve.  I had a quick recommendation for you regarding battery life since you've mentioned it several times in the past few episodes. 

 

It's a Mac program - sorry, Windows users - called Watts from BinaryTricks.com.  The program basically keeps track of your battery usage and prompts you through various stages of cycling your battery when the conditions it's watching for have occurred.  It will replace your battery indicator in the top menu bar with a much more robust dropdown menu that reports the condition of your battery and other bits of info. 



The feature that might interest you the most is on its "Notifications" screen.  There are two very handy options under the "Long Term Storage" heading.  The first is "Notify me when reaching 50% of battery charge" and the second is "Shut down MacBook when reaching 50% of charge." I know of no other way of getting your MacBook shut down at its optimal level of battery usage.  I hope you find this little program useful.  I have.  And thanks for all the education you've given me since Episode 1.



STEVE:  So I took a look at it, and it looks very nice.  It is not free.  It's free, full function, for 30 days.  And then the developer and author wants $6.95.



TOM:  That's not terribly expensive.  Is it in the Mac App Store?  Or you just have to go get it yourself from them?



STEVE:  I don't know whether it is or not.  I went to BinaryTricks.com, and this is the program that the developer is selling.  And I looked at it.  It looks very nice.  And for someone who's, like, more interested in active participation with the status of his battery, it looks like it really does provide lots of information.  It'll tell you the last time you recalibrated your battery and give you a popup when it's time to do a full-depth discharge and recharge in order to recalibrate it.  As you read and he mentions, it'll help you store your battery, if you're not going to be using your battery and your MacBook for a long time.  It's best to store lithium ions half charged rather than fully charged.  It's best to use them in a full charge and recharge as quickly as possible.  But if you're going to, like, stick it on a shelf for a few months, take it down halfway, and then that's better for long-term storage.  So this was - I thought it was a great tip.  And I have downloaded it and am using it on my laptop.



TOM:  You can't get it at the App Store.  I just checked.  Although, remember, you're giving 30 percent of the profits to Apple in that case in exchange for the management of it through the App Store.  So if you want Binary Tricks to get all the money, go to BinaryTricks.com.



STEVE:  Yeah.



TOM:  All right.  That's it.  Thank you, Steve.  This was great.  Always a pleasure to be on Security Now!.  Of course Leo will be back next week.  But don't forget you can find all the goodness that Steve does at GRC.com, things like SpinRite, things like ShieldsUP.  Anything new that you've got going on that you want to mention before we go?



STEVE:  Well, we've got Off The Grid, the Off The Grid paper-based encryption.  The printing page is all finished.  Still not linked to the main menu.  I just have some more work I've got to get done on the other pages, just documentation.  But that's where I'm working now.  So hopefully I will be able to announce that it's available at the main menu.  But you can just go GRC.com/offthegrid.htm, or actually I'll append the "htm" if you don't do it.  So GRC.com/offthegrid, and that'll get you into the Off The Grid pages.  And they're all interlinked from there.



TOM:  I love that project.  That's such a great project.  Check it out:  GRC.com/offthegrid.  That's it for Security Now!.  We'll see you next time.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#331

DATE:		December 15, 2011

TITLE:		Mega Security News Update

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-331.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  We had so much news this week that it squeezed out our show's planned topic of Google's new SDPY web browser protocol.  So we'll tackle that early next year.  In the meantime, Leo and Steve will discuss the news of this very active week!



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 331, recorded December 14th, 2011:  Mega Security News Update.



It's time for Security Now!, time to cover your security and privacy needs online.  And who better than - what do they call you?  What does Consumer Reports call you?  The master security technician?



STEVE GIBSON:  Apparently "mastermind security expert."



LEO:  A mastermind.



STEVE:  Someone tweeted that.  I knew that we had appeared in Consumer Reports.  This is, by the way, is the Password Haystacks page, which has been just an amazing amount of value for the amount of time I spent.  It demonstrates to me that there's not a linear relationship between how much time I spend on something and what it ends up yielding.



LEO:  No.  Bloggers have known that for years, that you'll do an offhand post that gets millions of hits, and then you'll work days on a post that gets nothing.  And it really is not related to how much work you put into it, but in fact to, I think, and this is a good example, general interest.  And there's a lot of general interest in how to make passwords more secure.  But before we say that, hello, Steve Gibson.



STEVE:  Well, Leo, welcome back from Paris.



LEO:  Thank you.



STEVE:  Tom and I had, well, I wouldn't say we had fun without you, but we survived.



LEO:  No, you can have fun without me.



STEVE:  We survived.  I participated in TWiT on Sunday.  It was...



LEO:  Thank you for doing that.  I really appreciate that.



STEVE:  ...extra fun.  And in fact I have you this week, not next week.  But the cool thing is, for the people who have been excited about our Holiday Sci-Fi Special Edition, we will be live and recording it at our regular time on December 28th.



LEO:  So the 21st I will not be here.



STEVE:  Right.



LEO:  But because it's - I'm going to take some holiday time off next week.



STEVE:  That'll be your holiday time.



LEO:  Yeah.  And then the following week we're going to do a special, which will be a lot of fun, covering...



STEVE:  Science fiction.



LEO:  Science fiction, one of our favorite nonsecurity subjects, frankly.



STEVE:  Yup.  Movies, TV, and books.



LEO:  And so that's the special.  That's a special on a very special Security Now!.



STEVE:  A Holiday Sci-Fi Special Edition.



LEO:  Now, but you were mentioning this Consumer Reports thing.  I have found it, by the way, online.



STEVE:  Yeah.  If you put in, like, "Consumer Reports Password Haystacks," bang, it takes you right there.



LEO:  Yeah.  And they have a picture of you.  Let me see - I've got to show this.



STEVE:  I don't know where they got that.  I know...



LEO:  That is a young Steve Gibson.



STEVE:  Yes.  And those are SGI monitors that were unbelievably advanced at the time.  They were 1600x1200.  And this was a Newsweek photographer who came out.  So I don't know how they found that Newsweek image, or where.  Maybe it's images.google.com?  There's a lot of me there.  But anyway, I was sort of surprised.  It's like, oh, yeah, I remember when that was taken, but I don't know how Consumer Reports got a hold of it.



LEO:  So here are three techniques for creating strong passwords and remembering them:  Use a sentence; use a passphrase; and then yours, growing the haystack.  "Developed by security expert Steve Gibson, president of California-based Gibson Research" - with a link.  With a link?  That's nice.  Thank you, Consumer Reports.  "Growing the haystack takes" - they must listen to this show.  They have quite a good amount of detail in here.



STEVE:  Yeah, it's a great report.  Now, somebody tweeted that somewhere the word "mastermind" was used, so I did a quick Ctrl-F for "find" and put in "master," and it's not on that page.  So maybe it's in the print edition, which he said was January 12th was the date in my Twitter stream.  So anyway, that's what sort of brought this...



LEO:  Yeah, there may be print edition later on.  But that's great.



STEVE:  Yeah.



LEO:  It's nice that you're getting recognized.  In fact, that's the - boy, you've gotten recognized for that more than anything you've done in the last 10 years.



STEVE:  I know.  It's, I mean, been amazing.



LEO:  Yeah.  Well, well done, Steve Gibson.  Well done, my friend.  Moving on.



STEVE:  Yes.



LEO:  Actually, before we move on, this is - let's describe this show because it's a little bit of a change here.



STEVE:  Just what I was about to say.



LEO:  Oh, good.



STEVE:  Is that my plan had been, for those listeners who actually do follow along, this was going to be the week when I would talk about Google's proposed new protocol to replace HTTP called SPDY, short for "speedy," and clearly they were trying to keep with the four-character HTTP feeling with SPDY.  The problem is that - oh, and we talked about initiating TCP connections a couple weeks ago to get ready for this discussion because it's necessary to talk about the overhead associated with new TCP connections, where we talked about the way TCP figures out, from a packet-based approach, how much data it can send.  So we talked about throttling, then, in anticipation of this.



The problem is, we also need to talk about HTTP, and there was just too much news this week.  There is so much stuff for us to talk about, just pure security news, that we're going to, as we have a couple times, only a few times in the last seven-and-a-half years have we reverted to your original concept for this podcast, which was just some news.



LEO:  Mega security updates.



STEVE:  Yeah.  We've got updates and news and miscellanea and a great podcast of stuff, but we're not going to be able to get to the SPDY conversation which I had planned.  That gets bumped into the second podcast...



LEO:  Next year.



STEVE:  ...of 2012.



LEO:  Yeah, because we've got questions next week.  We've got sci-fi the week after.  Then questions again.



STEVE:  Exactly.



LEO:  Yeah, well, you're a busy fellow.



STEVE:  So that's our plan.  Tons of stuff to talk about.  Carrier IQ will not leave the news, and so you and I are going to enjoy, I'm sure, talking about that.



LEO:  Good.



STEVE:  Lots of update stuff and other stuff.  So we've just got what I'm calling the Mega Security News Update podcast, 331, today.



LEO:  All right.  Mega security updates.  We had the Microsoft update, didn't we?



STEVE:  Yeah.  And a gala event it is.  We're a day after the second Tuesday of December.  And we do seem to be maintaining this interesting sort of seesaw pattern of not much one month, a lot the following month, not much, and back and forth and back and forth and so forth.  This is one of the big months.  They're patching at least 19 different security vulnerabilities in Windows and other Microsoft products, that is, Office and Publisher are also represented.  Three of these are critical.



And the good news is we finally got the long-awaited fix for that TrueType font rendering problem.  I had been recommending that, because this didn't seem to have many side effects - I did get a couple reports of, I think, some PDF problems.  But I was saying use that Microsoft quick fix button because this was being actively exploited by the Duqu trojan, taking advantage of a glitch in, unfortunately, in the kernel, giving malware access to whatever they wanted in the kernel because Microsoft had moved the graphics engine, GDI, into the kernel once upon a time for the sake of performance.  And of course that was a huge mistake from a security standpoint.  But that's the way things go.



So they fixed that, as well as another critical flaw in ActiveX handling and in Media Player.  So three critical things are fixed.  And then the rest, some 16 other vulnerabilities in Office and Publisher, just sort of generic, less critical, but important to do anyway.  So that's our monthly Microsoft news.



I had a bit of a strange event with Java.  Brian Krebs, who is of course keeping an eye on bad guys a lot, and I refer to him a couple times...



LEO:  I hope he's doing well.  You know he was the security guy at the Washington Post, and they - I guess they canned him.  They stopped doing the column.  And he's been doing his own On Security blog, and it's great.  And I just hope - Brian, I hope you're doing well.



STEVE:  Yep.  He tweets, and I do keep an eye on his Twitter feed because I get news there.  And he does - he takes the time to really plow into topics.  He seems to enjoy stalking the bad guys, stalking the stalkers, and, like, has, apparently from what he reports, he has personas that he has created out in that really dark underworld hacker community and is able to see what they're talking about.  So his insights are unique in the industry and, yeah, makes him very valuable.



He referred to a new Java update, saying that it was Update #30.  And we'd just finished talking about 29 and that it was important to do that because what 30 was ostensibly fixing was something that was being actively exploited in one of the more popular exploit kits called Blackhole.  And of course, as soon as a vulnerability goes into an exploit kit, it's quickly rolled out, out into the real world, because kiddies who are not able to develop these things themselves use these exploit kits, much as it sounds like.  They sort of wrap their own payload and use the exploits that are bundled into this kit in order to get them installed in machines.  So this is unfortunately a predictable but dangerous consequence.



So I did what I had said to our listeners when we were talking about #29.  I went to Java.com, clicked on "Do I have Java installed," although I already knew that I did because there are some things that I use Java for.  I mentioned GRC has a big number calculator now off of our Miscellaneous menu that I use for doing crypto calculations because it'll handle ridiculously large numbers of digits and so forth.



But when I went there, it said, oh, yes, you've got the latest, #29.  And I thought, okay.  Well, Brian is really always on the ball here.  And he did say go to the Control Panel applet.  And there is, on a Windows system, if you've got Java installed, in the Windows Control Panel there'll be a little Java thing.  So I went there, fired that up, and it seemed to be happy.  But then I manually told it go look, and it said, oh, we've got #30 for you.  So...



LEO:  That's weird.



STEVE:  ...maybe they - yeah.  Maybe they just haven't gotten around to notifying their website.  I hope they do that because people who are, I mean, their automatic update system isn't functioning automatically at this point, and this is an important thing.  So if anyone's got Java - and again, I will remind everyone, don't get it if you don't have it because, I mean, if you don't know you need it, it is an actively exploited opportunity.  If you have NoScript involved, you're probably safe because NoScript will block that unless you give sites permission.  So if you're just bouncing around the Internet cavalierly, NoScript is your friend, or NotScripts over on the Google Chrome side.  But you do have to go get this on purpose, at least at the time of this podcast recording.  Hopefully, maybe somebody from Oracle is listening to this, and they'll go, whoops, we forgot to increment our count from 29 to 30.



LEO:  Sometimes with, well, you know this, with updates they don't roll them out universally all at once because they don't want to kill the servers or whatever.



STEVE:  It was my thinking, too, yes.  So we're expecting out-of-cycle patches next week.  We're still waiting for Adobe to catch up with Reader and Acrobat.  I think it was the version 9s, as we talked about this, I think, two weeks ago, probably you and me, Leo, because there was a zero-day flaw that was discovered in the PDF rendering that Reader and Acrobat both do which is being actively exploited.



The sandbox in the v10 technology does contain this.  That is, it prevents it from being effective.  The flaw is there, but it can't get out of the sandbox.  Consequently, Adobe is not rushing to get that fixed.  They are rushing to get the pre-sandbox versions of Reader and Acrobat updated, which they have promised, like I think I remember the 16th, which I think is, like, toward the end of next week?  Or, no, no, that would be the week of the 16th.  Wait a minute, no, maybe I'm thinking of 18th.  In any event, it's on its way soon, but it hasn't happened yet.  However, two new zero-day vulnerabilities have just been revealed in Adobe's Flash Player.



LEO:  Prompting the query in our chatroom:  Which is worse, Java or Flash?



STEVE:  Yeah, take your pick.



LEO:  Yeah, no kidding.



STEVE:  So a Russian firm that does vulnerability research and sells their protection to customers is taking the position of, we're not telling Adobe because they don't pay us.  So...



LEO:  Oh.  Oh, that sucks.



STEVE:  Well, you know, but they're selling their proprietary information to their customers.  And it would make it less valuable if they provided it to Adobe because then Adobe would fix it, and then they wouldn't be offering exclusive protection to their customers.  So it's a little, I agree, it's a little strange.  But that's what they're doing.



They bypass both of these new, undisclosed, but proven and demonstrated in a video that they have, zero-day vulnerabilities; bypass both of Windows' anti-exploit features that we've talked about:  DEP, which is the Data Execution Prevention, where regions of memory are marked as nonexecutable, like for example the stack, which normally only contains data, you don't typically execute the stack, and so that prevents stack overflow exploits, but not in this case; and ASLR, which is the Address Space Layout Randomization, which takes sort of the inherent modular nature of today's operating systems where different pieces are contained in separate modules, and Address Space Layout  Randomization scrambles them all up so that different instances of the operating system are not always in predictable places.  And that prevents the bad guys from being able to jump to known code and get their work done by sort of repurposing code in the operating system.  If you don't know where it is, you can't jump to it reliably.  But these vulnerabilities bypass all of that and work anyway.  Oh, and they both escape from IE's sandbox.  So the sandbox...



LEO:  Whoa.  Gee.



STEVE:  Yeah.  So the sandboxing in IE is also ineffective.



LEO:  Amazing.



STEVE:  Now, at the moment, this is Windows only.  But they have promised soon to have a Mac OS X version.



LEO:  Good.  Because we want parity.



STEVE:  Because, exactly.



LEO:  It's only fair.



STEVE:  Oh, goodness.  So nobody knows what these are.  The problem is that, as we know, you can often reverse-engineer patches in order to figure out what it was that was patched.  And so the expectation is that the malware guys are going to jump on this and are probably in the 

process of doing so.  But there's nothing we can do about it.  I mean, we users can only not use Flash in order to avoid the problem.  So again, you want to be extra careful today about where you go and what links, especially what links you click in email, because anything that can invoke Flash which is malicious, if bad guys have figured out what these problems are that only this one company is selling their customers the fixes for, then that's a vector of exploitation.  So Adobe has got lots of...



LEO:  You got 'splaining to do.



STEVE:  Oh, yes, exactly.  They're in the dog house.  Now, speaking of dog house, we have Carrier IQ once again in the news.  And I was the first...



LEO:  Really, I thought we were done with this.



STEVE:  I had hoped we were done with it.



LEO:  I thought while I was in Paris it would be all over.



STEVE:  Yes.  But what happened was the FOIA, the Freedom of Information Act, was...



LEO:  Oh, I saw this.  This was interesting, yeah.



STEVE:  Yes.  A request was provided to the FBI under the Freedom of Information Act last week, asking about the FBI's own use of Carrier IQ's technology.  Now, it would have been nice if they'd said, "We don't use it."  Instead, they said, "We're not saying."



LEO:  Because...



STEVE:  Yes, they...



LEO:  ...it would reveal information about ongoing investigations.



STEVE:  Yes.  And in one place I saw the phrase "ongoing investigations."  Elsewhere I saw them saying - officially they said that the release of such documents, quote, "could reasonably be expected to interfere with law enforcement proceedings."



LEO:  Not good.



STEVE:  No.  Now, okay.  There are a couple possibilities.  I don't want to - first of all, we'll be talking about this for the next few minutes, so there's a lot of interesting information here.  There has been, as a consequence of the brouhaha over this, Al Franken, a Minnesota congressman - or senator.



LEO:  Senator.



STEVE:  Senator Al Franken has launched a congressional inquiry into what's going on with this whole Carrier IQ business.



LEO:  What's the deal?



STEVE:  So, yes.  So there's a chance...



LEO:  It's probably because Al Franken used to be on "Saturday Night Live," every time you say "Al Franken wants to know," I just get this comedic sense to it.  But of course he's a senator.  This is very serious.



STEVE:  And he's ended up really impressing people.



LEO:  He has.  He's been very good on privacy issues.



STEVE:  Yup.  He's been our friend.  So there is a chance that the FBI's response does not involve their use themselves of Carrier IQ, but rather that they're involved in the congressional inquiry, that is, Congress has said to the FBI, please look into this.  So I don't want to, like, send off any wolf-crying false alarms here.  This might just be that they're the agency that Congress is using, as they would, to inquire into what's going on with Carrier IQ.  So this FOIA request is being denied on the basis that it's the inquiry that they can't talk about rather than their own, you know, they've been rubbing their hands together, having fun with Carrier IQ behind the scenes without us knowing about it.



LEO:  "Did you see that text she sent?  Heh heh heh."  Yeah.



STEVE:  Yeah.  So, also, Carrier IQ is stating that, while they collect the data, they do not own the data.



LEO:  Oh.  Who owns it?



STEVE:  It is provided to the carriers, so any requests would need to be made to the carriers, not to them.  And they do, however, maintain servers on behalf of the carriers.  But contractually they're contracted to be the data collector, but they are not the data's owner.



LEO:  They're just following orders.



STEVE:  Yeah, exactly.  Now, here's the problem.  Provisions of the U.S. Patriot Act would prevent Carrier IQ's disclosure and would indemnify them, Carrier IQ, against nondisclosure.  So they could - this is also what they would be saying, and protected by the Patriot Act, if they were a source of data and been told you can't say anything about it.



LEO:  So the scenario is, if I read between the lines - and we've always thought maybe the NSA was using Echelon.  That was the name used for this presumed technology.  The British intelligence admitted it, MI5 admitted that they use Echelon to scan electronic transmissions for keywords like "bomb" and so forth.  But there's...



STEVE:  I wish you hadn't just said that, Leo.



LEO:  There's a gaping hole because, if I say "bomb" in a podcast or on my text messaging, they can't find that.



STEVE:  Now Elaine is going to transcribe it, and it's going to be on my website.



LEO:  Hard to believe we can't...



STEVE:  And before you know it, it'll be what happened to Gibson?



LEO:  Yeah, yeah, yeah.  By the way, they don't have to invoke the Patriot Act.  One of the features of the Patriot Act is you don't talk about the Patriot Act.  You don't have to ever...



STEVE:  No, exactly.  And that's my point, is that they could deny that they have anything going on.



LEO:  They're indemnified, is the point.  They can't be sued.



STEVE:  Exactly.



LEO:  Yeah.  They can't be sued.



STEVE:  Okay.  Now, on the 12th, which was two days ago, as part of Carrier IQ's response to all this, they produced a 19-page document.  I tweeted the URL of that earlier today.  So anybody who is interested can, if you're not following me, that's fine.  Oh, and by the way, I don't know if you know, but I crossed a milestone, 25,000 followers.



LEO:  That's great, Steve.



STEVE:  Tom and I talked about that, I think, last week.  So, yeah.



LEO:  Yeah.  And you don't have to follow Steve to see what he says.  You can just go to Twitter.com/SGgrc.



STEVE:  Exactly.



LEO:  And you see all his tweets.



STEVE:  Exactly.



LEO:  But follow him, and that way you'll get him in the Twitter stream.



STEVE:  Well, unless you're not - unless you're Jerry Pournelle, and you just...



LEO:  You don't care.



STEVE:  You're not going to be a Twitter tweeting person.



LEO:  Does he not - does he still - 'cause I maybe he'd change his tune on that.



STEVE:  I don't know what happened.  I do think I remember that he was going to give it a try.



LEO:  Yeah.  He's pretty "with it."



STEVE:  So their 19-page document is interesting.  So some things that I discovered by reading it, as I have, is that they - whereas their first reaction to Trevor Eckhart's discovery, and he was the person who we talked about who showed the phones capturing keystrokes and logging - it was an HTC Android device - was logging all of this scary stuff.  Their first reaction, of course, was to issue him a cease-and-desist order, threatening legal action.



LEO:  Kind of a mistake.



STEVE:  Now they're thanking him.



LEO:  Yeah.



STEVE:  In the PDF.  Thank you so much for discovering debugging code that was left in by mistake.



LEO:  Oh.  Oh, it's debugging code.



STEVE:  Yeah.  We never - we meant to turn that switch off.



LEO:  Oh.



STEVE:  And we fell asleep at the switch.



LEO:  Sure.



STEVE:  So, I believe it, though.



LEO:  It's the kind of thing you would log in a debugging situation.



STEVE:  Yes.  And Trevor wasn't able to show that it was ever being sent.  It's disturbing that a plaintext log file in an Android device is capturing all that.  You really don't want all of that being captured in a plaintext log file sitting there in your phone.



LEO:  We spend so much effort using LastPass to encrypt our passwords and stuff, and it would just save me so much trouble to know there's, well, there's a plaintext file with all my passwords right there.  I could just open that up, and I'd see everything.



STEVE:  Yeah.  Now, okay.  You could also take the - you could argue that, remember, that, well, the ISP gets it all anyway.  That is...



LEO:  But do they in SSL?  No, they don't with SSL.



STEVE:  Yeah, see, you're following me exactly, Leo.  That's exactly where I was going with this was that, yes, SMS messages and unencrypted, well, and URLs that are for pages we're pulling, they would be able to see those things.  But exactly as you say, anytime you're tunneling, they can't see into your tunnel.  So they, then, are only carrying opaque traffic.  So if you use a VPN, or if you're inside of an SSL encryption, poking around doing things, that's opaque to them unless they're grabbing things before it gets encrypted.  And that is what being on the device uniquely allows them to do.



Okay.  But what they're explaining in this 19-page document with lots of screenshots and, I mean, it's nicely written - I wish it didn't start out, I wish the title of the document was not "PR.20111212."



LEO:  [Laughing] Spin.doc.



STEVE:  [Laughing] Exactly.



LEO:  Wow.



STEVE:  I know.  So it's like, okay, do you have to call it public relations?  Could we not - how about TechDetails.doc.



LEO:  Excuses.doc.



STEVE:  Oh, goodness.  Anyway, so this thing, what we now know from reading this is that there's three different ways that this stuff, this Carrier IQ thing, can be put on your phone.  It can be sort of stuck on before you get it.  It can be added by the user and therefore removable after you get it.  Or it can be, quote/unquote, "embedded," which gives it much greater reach.  That is, if it's sort of stuck on - they had a term for it I don't remember now.



But it's like the first way they talk about it being added is sort of casually added by the phone's provider, but not deeply embedded.  And, if so, it doesn't have access to much.  Like it can't - it only has access to what a typical application would have, and you don't get things like RF signal strength and tower location and those sorts of things that you get if you're in the embedded mode.  So looking at the embedded mode, it's got access to all the information that the carrier, the service provider, would like to have.



So the way this thing works is it's driven by profiles.  Profiles determine - and it's like a config file, essentially - what data is collected, how often it's collected, how long it is saved, and how often it is uploaded to the carrier.  The typical use of this, okay, and this is what they're now, in their PR document, they're acknowledging, 200K of data per day per device.



LEO:  Whoa.



STEVE:  So, yeah.  So old school people say, 200K?  Well, I mean, we've seen what I can do in 200K.  But still, that's a lot of data.  So typically, every 24 hours, during a time when the device is not in use, the Carrier IQ-accrued data is dumped up to their servers and/or directly to the service provider.  Profiles are also downloadable on the fly.  So the nature of the data which they're collecting can be changed.  Now, this document makes it very clear that never, ever, ever have SMS messages been collected.  And that was one of the things that concerned people.  On the other hand, SMS messages always go through the carrier.



LEO:  The carrier's always been able to see those.



STEVE:  Yes.



LEO:  And I know for a fact that you can subpoena those.  So any text message that's sent in the clear is stored by the carrier and can be retrieved by the carrier upon request.



STEVE:  Right, so...



LEO:  We've known that.



STEVE:  So what they acknowledge they are collecting are all the phone numbers dialed, the URLs visited, and detailed location and time.  So if the FBI hasn't already discovered this honeypot of information, they certainly know about it now.



LEO:  Well, but again, all of that information would be also available to the carrier.  Maybe not URL.  Well, yeah, URLs, too, because they're the ISP as well as the carrier.  So they've got text messages.  They've got phone numbers.  You see the phone numbers on your bill.



STEVE:  Well, what we have - what wasn't clear to me, what isn't clear to me is what sort of granularity of location data the carrier is storing.  And it's now clear that the Carrier IQ app is providing extremely granular, or can provide extremely granular information.  So a scenario, just to walk us through - we don't know this is being done.  But using the Patriot Act, the FBI could compel Carrier IQ to download an enhanced spying and tracking profile to any phones of individuals whom they wish more information on.  And the Patriot Act allows Carrier IQ to do that, the FBI to essentially crank up the resolution of tracking to maximum, which gives them extremely granular location and positioning and activity information on individuals which may well be in excess of what the carrier would normally aggregate.



Carrier IQ makes the point defensively in this document of saying, we don't want SMS messages.  We don't want - there is so much data coming and going through these phones that our job has been to condense the information, to distill it to only what the carriers are asking us to capture for them.  And I believe that.  I mean, if I were an engineer, if someone said, "This is how we want the system to work," the first thing you want to do is minimize the bandwidth that you're consuming and storing on these devices.  So to me that makes sense.  But it also really does - it really is the case that this technology allows our devices to be tracked.  But your point, also, Leo, is carriers certainly have that capability themselves.



LEO:  Sure.  Sure.



STEVE:  They know which cell towers you're at relative to where you are.  And your phone also, if it's got WiFi, and it's logging itself into hotspots whose locations have been logged with the whole - all of the several different hotspot tracking services that we know exist, then that's there, too.



So anyway, we understand more about what this is.  I do believe that Trevor stumbled on debugging code.  I mean, it makes sense that that's the case.  Carrier IQ has formally stated that that's the case, and it makes sense.  So they are a technology which we are now aware is in our phones.  They give a couple examples of how, for example, a carrier would use this technology.  If you call them, you call your provider, AT&T for example, and say, hey, why is my battery draining in three hours now, it never used to do that...



LEO:  Let us check our logs.



STEVE:  Yeah.  No, truly.  They're able to say, on such and such a date, you installed ABCXYZ app, and it's responsible for what your battery is doing.  The technology now allows them to do that.  Or they're able to say, oh, yeah.  If you say, hey, why am I always dropping calls between Exit 34 and 35 on the 97, and they'll say, oh, yeah, we are aware of that.  There's an outage area there, low service availability.  We're in the process of building some more towers, so make sure you don't hit one when you're driving on the freeway.  So...



LEO:  They say that, really?



STEVE:  So anyway, that's what's going on.  They have, they really do have a technology in there.  I'm convinced primarily it's there to help them with tech support.  And as you said, Leo, correctly, they don't need this in order to provide location tracking and where was So-and-so at such-and-such a time.



LEO:  In fact, that's a fairly controversial issue because law enforcement currently doesn't need a search warrant to ask for that information.  They can do something called a "pen register."  And in fact apparently all the carriers have portals for law enforcement where they pay a couple of dollars, and they could find out where anyone was at any given time.



STEVE:  Wow.



LEO:  Because that's really what you're carrying around, by the way, is a GPS device that's always broadcasting back to the carrier where you are.



STEVE:  It's tracking.  If it's on, it's tracking.



LEO:  You ever watch "The Bourne Identity"?  What's the first thing Jason Bourne does when the scared woman gets in the car with him, and she's running away from the bad guys?  He takes her phone and throws it out the window.



STEVE:  Throws it out the window.



LEO:  Well, guess why?  Okay.  Sorry.



STEVE:  Yeah.  I want to mention, because we'll come back to the topic of the DMCA a little bit later, but had the DMCA - had this involved crypto, then what Trevor was doing would have been criminal.  And...



LEO:  Oh, not protected as - isn't it protected as research, though?  Like Ed Felten and people like that, aren't they protected?  In fact, wasn't that his response?



STEVE:  I thought that, as I understand it, the DMCA criminalizes research.



LEO:  Oh.



STEVE:  That was the problem, is that it's preventing researchers from talking about the crypto of commercial products because they have to breach the DMCA in order to do the research.  Which is really distressing.  I mean, that's my big problem with the DMCA is it doesn't allow security researchers to plow into stuff.



LEO:  Oh, that's not good.



STEVE:  Without becoming criminals.  So, and I would argue that all of this, what's come to light with Carrier IQ, is really good.  I want Al Franken to ask, to get somebody to look into this to verify and to shine a bright light on this because this really should not have been kept as quiet as it was.  Even if they're not doing anything wrong, even if in the fine print it says this is what we're going to be doing, people still don't know about it.  And we need to know about it.  Benign as it is, it would just be nice to know this is what's going on.



LEO:  I always feel that what protects us is that the massive amounts of data that these kinds of things would collect, the 200K about each and every one of us each and every day, renders it pretty much useless for kind of casual spying.



STEVE:  Although - yes.  Although what I hear people say sort of in general, when they're not worried about security, is, well, no one cares about me.



LEO:  Right.



STEVE:  It's like, okay, well, today.



LEO:  And we do know the technologies, computer technologies allow people to go through, sift through that kind of data, looking for patterns and...



STEVE:  Determine who they should care about.



LEO:  Right.  So this is - it's interesting because there is a tradition in our legal system that law enforcement is not allowed to go on what they call "fishing expeditions," that they have to be investigating a specific crime, and they can't just look at your stuff to see if you're doing something wrong.  That's not allowed.  And that's exactly how this kind of data could be used.  And of course I can understand law enforcement saying, "But it would be so useful if we could just get a database of everything everybody does online and sift it for bad behavior.  Think how useful that would be."  But that's not allowed.  That is specifically prohibited by our Constitution, thank goodness.  All right.



STEVE:  Well...



LEO:  Well, there you have it.



STEVE:  You want to go to a site called YouHaveDownloaded.com.



LEO:  [Laughing] You know, actually I do want to do this because I want to see if anybody in my office is using BitTorrent.



STEVE:  YouHaveDownloaded.com is a new service which anyone can go to.  And it looks at your connection IP and cross-references a database it is continually building of all the IPs they're aware of which have been used for downloading torrented files and what files have been downloaded.  Apparently people who are active torrent users go to YouHaveDownloaded.com and see a listing of their entire library.



LEO:  Amazing.  No one here is downloading anything from BitTorrent.  Thank goodness.



STEVE:  That's good news, yes.



LEO:  But you know who has?  Sony.  Busted.



STEVE:  Yup.  Now, one thing I noted is that they're not establishing an SSL connection.  They support SSL for their domain, and you can go to https://youhavedownloaded.com.  The reason that's significant, for example, is that I had to do that with ShieldsUP! in order to more reliably get the user's IP because anybody, for example, with a Cox Cable modem, if they use a non-SSL connection, the IP is Cox's IP, not theirs.



LEO:  Ah.



STEVE:  Because you go through Cox's caching proxy on the way out to the Internet for - which does a number of things that helps users because it's caching, so you get answers back quicker from Cox than you would out from the Internet, and it also reduces the bandwidth that Cox needs to pull from the Internet.  But it means that you don't have the right IP.  Now, it is possible to disambiguate that somewhat because proxies are supposed to add a header saying that they are forwarding this request for a different IP.  So maybe these guys have done that, and I would hope so.  Otherwise it could be the case that you'd be getting false positives and seeing other people's torrents being attributed to you, which would not be good.



LEO:  Well, they do say this site is just for show, that it's a demonstration and shouldn't be used as for incriminating evidence.



STEVE:  And they're opening - well, and I think it's a little bit of a wakeup call, also.  They said...



LEO:  Yeah, well, every - the truth is, though, and I've said this for years, and nobody ever pays attention, but BitTorrent has never been designed to be private.  When you're exchanging files with people, I can see your IP.  I can see who's seeding by IP address.  It's always been that way.



STEVE:  Yup.  So they said, "This means that you are using...."  Oh, so when I went there, they said, "We have no records on you."  And they said, "This means you are using a private torrent tracker or, of course, you may not be a torrent user at all," as happens in my case.  I'm just not a torrent guy.  And they said, "It happens.  Please entertain yourself.  Feel free to see what other people have downloaded.  The search box is on the top.  If you have any friends who use torrents, use it to scare them off.  We also have a widget that you can install in your website, blog, or Facebook page.  Or you can just send them a link to this site.  They will see a table similar to what you see below.  The only difference - they will see their downloads."



So anyway, I tweeted this earlier, and a lot of people responded that, whew, I'm clear.  Also some said, hey, but IPs are dynamic.  And it's like, well, yes, they are.  But they don't change all the time.



LEO:  Well, and this site says we record timestamps.  So we know exactly which IP was using it when.



STEVE:  Exactly.  And so, if they were - if they had to comply to a subpoena turning over their records, then that could be cross-referenced with ISPs that do maintain a log of who has which IP when.  And, for example, Sue, my office manager/bookkeeper, is using a cable modem with a router, which means that her IP, her public IP is relatively static.  I know when she changes it because she needs me to update that information because we use her IP as one of a multilayer security measure for her access to some content on our servers.  So I know when I change it.  And I don't change it more than once every couple years.  That's how sticky these things are, unless you're deliberately disconnecting from your cable modem or your DSL for a long time.  If you stay off of it for a long time, then there's a chance somebody else will get that IP allocated to them, and you'll get a different one when you reconnect.  And in fact that's what happens.  Like if they shut themselves down when they're going on vacation, when Sue and her family comes back, their IP will have changed when they turn things back on again.  But in the normal case, it's not changing.  Those DHCP leases are being renewed, and you deliberately get the same IP you had last time.  So they're more static than most people think.



LEO:  So, now, somebody in the chatroom's saying, oh, this is a joke.  The site's a joke.  It's not - is it a joke?  No.



STEVE:  No.



LEO:  It's real.  There's limits to what you could do with this.  And the reason they created this is to point out that, unless you're doing something to protect yourself, you are publicly sharing these files.



STEVE:  Correct.  And I know for a fact that there are people who are public torrent users that this site knows about.  So it's certainly not a joke.



LEO:  Yeah, I mean, they say at the bottom don't take it seriously.  That doesn't mean it's a joke.  It's a...



STEVE:  I think what they're trying to say is, it is not the case that, if we don't have you, nobody does.



LEO:  Right.



STEVE:  Because they're tracking a bunch of trackers, but they're not trying to be the MPAA or the RIAA.  And so no one should believe that, if this site does not - if you are a torrent user, and you have downloaded things in the past, yet you come off clean here, that doesn't mean there aren't records of prior activity somewhere.



LEO:  Right.  It's a joke only in the sense that they're not going to do anything with it.  But I think this is actually a good public service.



STEVE:  That's exactly how I feel.  It's a wakeup call.  It's useful.



LEO:  I mean, I've known this.  But maybe not everybody does.



STEVE:  Exactly.  Speaking of public services, Facebook has added themselves to the elite list of companies who pay security researchers to find bugs.  And in fact Brian Krebs's posting calls it "Bugs Money."  But get this.  The way Facebook is paying is unique.  When a researcher, the first time a white hat researcher finds a bug, they send them a Visa debit card.  Cool-looking card.  It's custom-made for Facebook.  And on this Visa debit card it says "White Hat," in large print, "Bug Bounty Program."  So you receive money on this Visa debit card.  And if you find more bugs with Facebook, they simply transfer more money onto your card.  And they have a page that I hadn't known about before, but Brian linked to it.  It's Facebook.com/whitehat.  And that is a listing of all the names of researchers who have identified problems in the past with Facebook.



So anyway, I salute Facebook for doing this.  This is a good thing.  I'm glad that they are, I mean, this makes sense.  It makes sense to incentivize developers, security researchers, to find problems because we know how difficult it is to have none.  And certainly Facebook has had its share of lumps in the past.



Also in the news this week, Microsoft has put into beta the offline version of Windows Defender, available for download both in 32- and 64-bit versions.  I would imagine you could Google it.  I just tweeted the news.  So anybody who wants to find it can.  Just as you said, Leo, look at Twitter.com/SGgrc and pick up the link to it.  This is installable on CD, DVD, or USB.  And the advantage is this is probably THE way to deal with rootkit-style problems, that is, especially boot sector rootkits which are compromising Windows before it boots up.



So by using a preboot CD, which now Microsoft is providing, it's possible to boot the CD or the USB rather than the OS, never letting that boot sector, the OS boot sector execute and allow a rootkit then to start subverting the OS before any of the OS-based antimalware technology has a chance to come online.  So of course it's free, and you can choose a 32- or a 64-bit version, depending upon what OS you're running.  And so that would - wait, wait.  OS or chipset?



LEO:  OS.  Almost certainly.  Yeah, it says 32- or 64-bit version of Windows.



STEVE:  Yeah, but why?



LEO:  Oh, that's true with all software.  Often.



STEVE:  No, but remember - I know.  But this is booting on the chip, not the operating system.



LEO:  Oh.  Oh.  Well, perhaps the installer, then.  I don't think they - they care about the installer.



STEVE:  Ah, I'll bet that's exactly right, Leo.  Yup, I'll bet you're right.



LEO:  Yup.  Although why not just do it all at 32-bit, I don't know.



STEVE:  It would be agnostic to which version of Windows you run.



LEO:  Right.



STEVE:  So, SANS Institute newsletter contained a little blurb that I had not seen anywhere else, but I was glad for it.  And this is the news that Lamar Smith, who's a Texas U.S. Representative, has introduced some changes to the oh-so-controversial Stop Online Piracy Act, SOPA, which attempt in this case to temper the proposed legislation's reach, which could only be good.  SANS wrote that, "Originally, SOPA allowed rights holders to have payment processors cease doing business with suspect websites without a judge's approval."  Now, that was very worrisome, meaning that...



LEO:  Yeah.  No due process is that that means.  That's terrible.



STEVE:  Precisely.  And it cuts off your revenue flow.  So it's like, okay, payment processors are just going to stop accepting credit processing from your site.  It's like, oh, crap.  Now, however, before a site could be taken down, the rights holders must obtain an order from a judge that will - okay, "now" meaning pursuant to this revised legislation, if it happened - the rights holders must obtain an order from a judge - wait, no no no, I'm sorry.  I got this wrong.  So the original legislation was proposing that, with no judge's involvement, an alleged aggrieved...



LEO:  It was the Chanel - was it the Chanel handbag story?



STEVE:  Yeah, that somebody who believed their rights were being violated could have payment processors cease doing business.



LEO:  Oh, okay.



STEVE:  And it says, "Now, before a site could be taken down, the rights holders must obtain an order from a judge to get payment processors to sever business dealings with a suspect site," which is the way it ought to be.



LEO:  Of course, yes.



STEVE:  Now, what I don't understand is it says, "The legislation will not apply to sites that end with .com, .net, and .org.



LEO:  Oh, you mean the Internet.  Oh, no, it doesn't apply to that.



STEVE:  Yeah.  It says, "Only foreign websites will be subject to SOPA's provisions."  So that also sounds good.  If I read this correctly, the other change is that .com, .net, and .org are being excluded from SOPA.



LEO:  I don't think that, well, those are the changes.



[Talking simultaneously]



LEO:  Oh, you know why?  I get it.  They're going after these pirate sites, is what they're trying to do, .cn or...



STEVE:  Yes.



LEO:  ...you know, those French, and not the...



STEVE:  Careful there, Leo.  You spent the last couple weeks over there.



LEO:  I just might point out that, Pirate Bay?  Dot org.



STEVE:  Uh, yeah, good point.



LEO:  I mean, anybody can be a .org, .com; right?



STEVE:  Yeah.



LEO:  There's no, like, well, you have to be - you have to license it.  No, anybody - so this is stupid.  If that's really what they want to do, that's good.  That's completely...



STEVE:  To defang SOPA.



LEO:  Defangs it, yeah.



STEVE:  Yeah.



[Talking simultaneously]



LEO:  They're showing, again, their complete ignorance of everything that we hold sacred.



STEVE:  Yeah.  It says, "Remaining untouched are provisions that allow the DOJ [the U.S. Department of Justice] to demand that Internet service providers block customers from visiting these sites."



LEO:  Oh, that's so the - so the ICE takedowns; right?



STEVE:  Right.  "The bill no longer requires ISPs to alter DNS, but they may still choose to do so to comply with blocking orders."



LEO:  Look, the whole thing is just a bad idea.  Just...



STEVE:  I really would say the whole thing seems, now, it's gotten byzantine.



LEO:  Yeah.



STEVE:  It's so bizarrely complex.



LEO:  Dumb.



STEVE:  Okay.  Now, news on my front.  I have switched, as I said I was going to at the end of the year, from VeriSign to DigiCert.



LEO:  Good man.  I guess.



STEVE:  I had my GRC - I had three certificates.  I had GRC.com, www.grc.com, and www.grctech.com.  I use that in order to deliberately create a third-party for my third-party cooking - cooking - cookie system.



LEO:  Well, you have to cook cookies.  They're raw.  That's not good for you.



STEVE:  That's that third-party cooking you've got to watch out for.  So I could not be happier.  It was a perfect, painless switch.  And I'm super pleased with DigiCert.  Also, I have what I always wanted, Leo:  not just a change, but I am now EV.  I have GRC is...



LEO:  Oh, good.



STEVE:  Is Extended Validation.



LEO:  Oh, excellent.



STEVE:  And what is very cool is that I got the EV cert for just the root domain, GRC.com, and "www" was included.  So whereas VeriSign/Symantec - actually it is now Symantec, but they're still using the VeriSign - I think they're still using the VeriSign domain.  Whereas they would have charged me $1500 for each, I paid something like $500 for both.  And I still have two more slots available, meaning that if I wanted mail.grc.com or two other somethings.grc.com, I can myself, just using the web panel, because GRC.com has been verified, I have up to three different subdomains, one of which is www, but I've got two others that I can allocate anytime I want to.



And they allow this to be installed on multiple servers, which, for example, VeriSign doesn't.  And I can even use different private and public keys.  So I could have a different server generate a CSR, a Certificate Signing Request.  I submit that through a web form.  And with zero delay, because this is being issued to the same domain, which has already been verified, they will issue me new certs for another server with separate keys.



LEO:  That's great.



STEVE:  So not having to reuse the same keys, which of course is a security concern if you spread your keys around too much, here they're - and you can do it as much as you want to.  Anyway, I am completely bullish.  But...



LEO:  But...



STEVE:  Something bad happened.



LEO:  Oh, dear.



STEVE:  We installed the certs, I installed the certs, on Friday.  And we took a hit in revenue.  We had the - SpinRite sales collapsed.



LEO:  Oh, dear.



STEVE:  With the lowest revenue ever, we've ever had, on Sunday.



LEO:  What the hay?



STEVE:  Well, and so I was checking the server, and nobody was buying SpinRite.  All of a sudden.



LEO:  Uh-oh.



STEVE:  And but we weren't rejecting sales, there just weren't any.  And then I had a thought.  What if a high percentage of the people who buy SpinRite listen to this podcast?



LEO:  Yes?  Yes.



STEVE:  And they've installed Certificate Patrol in Firefox, as I have encouraged everyone to do.  The scariest warning that Certificate Patrol can give you is that the vendor of your certificate has changed.  That is, the apparent vendor has changed.  Because that would be, I mean, that is the hack.  If somebody was performing a man-in-the-middle attack or got your certificate fraudulently issued by some other Certificate Authority, then, I mean, this thing comes up with flashing neon lights and colored red.  And I thought, oh, my goodness.



LEO:  You scared everybody off.



STEVE:  I scared everybody off with a valid change.



LEO:  Oh, boy.



STEVE:  And so finally, by, like, the end of, maybe it was Monday, I thought, you know, maybe that's what's happened.  So I put, on the page where people go to buy SpinRite, a special new banner which celebrates our increased security.  It's got the DigiCert EV seal up there, which you can only display, because it comes from them, if it's all true.  And I explained, hey, we've got even more security than ever.  And, oh, by the way, if you're getting any kind of scary notification...



LEO:  That's good.



STEVE:  ...that's because we really did - yeah, that's good.  That's a good thing because we really did go, we left VeriSign behind us - and happily so - and I couldn't be more happy with DigiCert.  So please forgive us for scaring you.  But then something else happened a couple hours ago, Leo.  Dr. Mom sent me email.



LEO:  Uh-oh.



STEVE:  And we know her.  She's - you're referring to her all the time.  She's an active participant with many of your podcasts.  She said - this is her email I'm reading -  "Thought you could use a good laugh."  Well, I'm not laughing.  Anyway, she said, "The, ahem, 'IT' department of our esteemed institution" - who I'm not naming - "has officially declared the GRC website 'Restricted under Internet Usage Policy because of potential security risks or inappropriate content.'"  She said, "Probably they don't want us to figure out how lame their password policy is, nor that if you use ShieldsUP! on the system all the ports are wide open and exposed.  Just thought you'd like to know that your website is now classed with .xxx and other sketchy places on the Internet. LOL."



LEO:  That's frustrating.



STEVE:  Well, what I'm thinking, Leo, is that we may have upset some carrier, like who knows, some provider of border equipment that Dr. Mom's organization may be using.  And I don't mean to mention Astaro.  I don't mean Astaro.  But that kind of...



LEO:  No, but, yeah, or a MAPS or ORBS site, those kinds of thing, yeah.



STEVE:  Something may have - something somewhere may have noticed that our SSL certificate provider changed, and we're now subject to a false positive security alert, which Dr. Mom's organization subscribes to, or her networking equipment or IT department subscribes to, which is causing them to blacklist us.  And that may be what's happened, is unfortunately the point, the lesson here is that, because, I mean, how much time have we been talking about or how much time have we spent talking about all the things that can go wrong with the whole PKI (Public Key Infrastructure) and SSL and Certificate Authorities and breaches and all of this.  So maybe what's happened is there are now organizations which are assuming that anytime any company changes its SSL provider, warning flags go up.  And of course I'm unhappy because we know this is a false positive.  We're more secure than we were before, and I could not be more happy that I made the change.



But I'll bet you - anyway, I wrote back to Dr. Mom, under her real name, and said, uh, whoops.  Maybe - I'm hoping that she will pursue this with her quote/unquote "IT department" and find out what it is, where this came from, because that would allow me to pursue it and figure out if somebody is giving us a false positive.



So anyway, really interesting.  I don't want in any way to put anybody off of switching to DigiCert.  Believe me, I'm not going back because I'm already here, and I'm really glad I'm here.  I have control like I've never had before.  I'm saving a ton of money.  I've got EV certs, and I'm not paying $3,000 a year for them, I'm paying $200 and something because they're including other subdomains which are really important to me.  I want to be able to have people use SSL, both for GRC.com and www.grc.com.  Why should I pay double for that?



LEO:  Yes.  Right on.



STEVE:  So this is just very cool.  And so I do recommend that for you, also.  Oh, and Leo, I have to say also, I've just made a note here, the dumbest marketing promotion I've ever seen.  Well, okay, "ever" is a long time.  Symantec is now offering free 30-day trial SSL certificates.



LEO:  [Laughing]



STEVE:  It's like, what?  What?



LEO:  Hey, hackers.  Get your free certificate here.



STEVE:  How does that make any sense at all?  I mean, first of all, no one who understands what they're doing is going to think that a free trial certificate makes any sense.  What, you're saving a month?  Is that the idea?



LEO:  Yeah.  Every month you can get a new one.



STEVE:  Oh, I'm sure they won't let that happen.  And so, first of all, no one is more expensive than VeriSign.  And only people who use VeriSign are going to be big guys.  I mean, I've been there until now.  I'm just not willing to pay that money for the benefit of extended validation.  I want extended validation, but not at VeriSign's prices.  So, but IBM and, I mean, I don't know who uses VeriSign.  But someone certainly does.



LEO:  People like IBM.  That makes sense, yeah.



STEVE:  Yeah, because Symantec bought them, so they must have a good certificate-issuing revenue flow, and Symantec probably paid a hefty price for it.  But the notion that I'm going to be swayed to spend money I don't have to because I can get a free 30-day trial, I mean, it's a pain in the butt to go through getting a certificate.



LEO:  It is pretty funny.



STEVE:  You've got to convince your server to give you a certificate signing request.  You go through all of this, people standing by the phones when they call you to make sure that you're there, and email loops and everything, and they check your whois and your Dun & Bradstreet and, I mean, it's a - you've got - it takes something to do this.  And so it's like, whoa, yeah, gee.  I mean, clearly you're not going to abandon it after 30 days, so maybe they think they're going to hook you this way.  But anybody who used VeriSign would shop around a little bit.  And, wow, I don't know.  That just - I can't imagine anybody's going to take them up on that.  Except maybe to get 30 days free.



LEO:  Yeah.  Well, maybe you do that before - you know you're going to sign up for a year.  What is the minimum normal term?  A year?



STEVE:  Three years you can get for non-EV, and that's the maximum.  So normally I'm jumping through these hoops only once every three years.  Or two years is the maximum for extended validation certificates, just because they want to tighten that up.



LEO:  And you probably can't get less than a year.



STEVE:  No.  I don't, I mean, you could stop...



LEO:  Unless you get this special offer.



STEVE:  Yeah.



LEO:  I mean, for - well, maybe - somebody said it's a Christmas holiday shop, and they only need a month.



STEVE:  Okay.  There's a company called StartSSL.com or StartCom.



LEO:  Yeah, yeah, I know them.



STEVE:  They give you a free certificate for a year.



LEO:  Right, right.



STEVE:  So it's like, if that's what you want, just go there.  And they're recognized by all their...



LEO:  They won't do EV, though.



STEVE:  Not for free, but very inexpensively.  They do offer EV.  And they are a - they're in all the browsers.  So they're also widely recognized.  So it's like, well, that's...



LEO:  Why did you not go to them instead of DigiCert?



STEVE:  Well, because that seemed a little low end, a little low...



LEO:  You can afford...



STEVE:  I don't know...



LEO:  You can afford a hundred bucks.  How much is it?  How much is it?



STEVE:  It is like that.  It's not expensive for StartCom.  I think it's maybe 150 or something.



LEO:  That's good.



STEVE:  It wasn't much.  So, yeah.



LEO:  So everybody should have SSL.



STEVE:  Eh, well, maybe someday.  Anyway, DigiCert is my company.  I'm happy.  It'll be nice if we can solve the mystery.  Maybe Dr. Mom will get back to me and say, okay, here's the story.  Here's why GRC got blacklisted.  Because something happened.  We're not recovered yet.  So somehow there was a side effect.  And it wasn't that I went to DigiCert.  I really want to make sure people don't get the wrong impression.  It's that I changed.  And change should not be a bad thing when it's an improvement.  And this was definitely an improvement.  So we'll see. 



Okay.  OAuth.  I got email from someone who asked me if OAuth had a bug because he - let me think what this was.  He went to a site where he wanted to authenticate himself with Twitter.  And this was a bad site that he went to, and his profile changed, and they began sending out tweets on their behalf.



LEO:  So he got hacked.



STEVE:  And he said, so - well, no.  He actually didn't.  And he said, doesn't this mean that Open Authentication is broken or buggy or something?  And I said, no, it means that Twitter gave the requester rights to change your profile, believe it or not.  Which boggles my mind.



LEO:  Well, here's how I would guess the scenario went.  He thought it was OAuth.  It looked like OAuth.  It may be they made a page that looked, because with OAuth you're go back to Twitter, that looked just like Twitter.  But instead it was a fake site that wasn't Twitter, and he gave them his credentials, thinking he was logging into Twitter.  So there is a - there's a potential hole in OAuth.



So I go to a site, right, and it's pretending to be OAuth.  Well, how does OAuth work?  When you go to the site, it says, okay, we're going to log - you've got to go to Twitter to log in, and they'll send us a token back.  So what if I'm a bad guy?  I'll say the same thing.  I'm going to send you to Twitter now so we can OAuth you.  But instead of actually sending you to Twitter, I send you to Hacker.



STEVE:  Twitter.ru.



LEO:  Yeah.  And I make a page, looks just like a Twitter OAuth login, and you give it your login and your password.  You say okay, and it pretends it's sending a token back to the hacker.  But meanwhile they've got your credentials.  There was no OAuth transaction.  I suspect that's what happened.



STEVE:  You exactly laid out a beautiful hack for OAuth, which reminds our listeners that, when you're doing this, you absolutely need to make sure that you are where you think you are.



LEO:  It's not always easy because sometimes this happens on mobile platforms, right, on your phones.  And you may not - the address bar a lot of times on phone browsers, because of limited screen real estate, is not visible.



STEVE:  Oh, in fact, I find myself doing that with Safari.  I was somewhere I wanted - just the other day I wanted to make sure that I was - because I was at Starbucks, and I wanted to make sure that what I was doing was in an SSL tunnel.  And it was - I had to, like, look all over the place.  And finally I found a little padlock on the tab.  And it's like, oh, there it is, okay.



LEO:  People are fairly easy to fool.



STEVE:  Except that...



LEO:  Not our listeners, but...



STEVE:  Except that this was not the scenario...



LEO:  Oh.



STEVE:  ...that actually occurred.  But I'm glad you went through that because you're absolutely right to remind our listeners this is a problem.  I was logging into bitly the other day, and I had not been for a long time.  Was that it?  Oh, no.  I created a new - I know what it was.  I created a new Twitter account that I am going to get around to telling everyone about.  It's called SGreads, is a new stream for me.



LEO:  Ooh, I like this.  Is this Twitter.com/SGreads?



STEVE:  Yes.



LEO:  I love that.



STEVE:  And because for some time I've been running across things in the morning, during my morning time at Starbucks.  I end up finding good stuff sometimes, and just on whatever topic it happens to be.  And I thought, you know, I ought to create a stream of those.  So people don't have to get them if they don't want them.  But if they're interested in reading things that I think that sort of generic people would be interested in, there's a way to get that.  So...



LEO:  And that is - by the way, you're getting very close to being a blogger.  Because that's really what a blog originally was.  Om Malik, who's gone back to doing that, every weekend he does a "Here's what Om is reading" blog post.  And that's exactly kind of what the original idea was for blogging.  So, Steve, you're reinventing the Internet step by step.



STEVE:  Well, so what happened was, I went to bitly, and I wanted to tell it about this new account.



LEO:  So it can keep the stats, of course, yeah.



STEVE:  Yes.  So that I could use link shortening for, like, long URLs with this SGreads account.  And so it needed me to authenticate that I owned that account with Twitter.



LEO:  Right.



STEVE:  So bitly used OAuth and took me to Twitter.



LEO:  Okay.



STEVE:  Here are the rights that bitly was given:  Read tweets from my timeline.  Okay, everybody can do that.  See who I follow, and follow new people.  So...



LEO:  Ooh, I don't like that.  But I know why they did that.



STEVE:  I don't like it either, and you can tell me why in a minute.



LEO:  Okay.



STEVE:  Update my profile.



LEO:  Not good.



STEVE:  And post tweets.  Well, they only need to post tweets.  As far as I can tell, the only thing bitly needs to do is post tweets.  Now, it says bitly will not be able to access my direct messages or see my Twitter password.  Well, that's the whole reason we're doing this.



LEO:  So the reason I think it was allowing you - you were giving permission to follow is this happens all the time on a site.  It says, as part of this, and would you like to follow bitly?  And you say yes.  And then they can do that one thing.  But they...



STEVE:  Ah.



LEO:  I think that's not - for that one purpose, to do that is not okay.



STEVE:  And update my profile.



LEO:  That one I don't get at all.



STEVE:  I don't want - yeah, I don't want bitly changing my profile.



LEO:  I can't think of any reason why they would want to.



STEVE:  So here's the problem we have.  Okay, now, these are rights that bitly asked Twitter to grant.  And what would be nice, and frankly I'm ashamed I don't know the OAuth protocol off the top of my head to know whether it's possible for Twitter to downgrade the rights it returns.  I don't remember now the way the protocol works.  But it would be nice if Twitter said, well, it would be nice if bitly only asked for what it really needs.  And I think it's asking for more than it needs through OAuth.  Clearly this is what happened to the other guy, assuming that he didn't fall for the first hack that you outlined, Leo.  What happened to that guy was the same thing here.  That site asked for everything.  Twitter said, "We're going to give him everything, okay?"  And he said yeah, okay.



LEO:  This is a problem.  It's a problem on Android, too.  It's kind of permissions fatigue because all of these places, when you - Android does this, too.  It gives you a long list - this is why I like Apple's approach, the intense - the way Apple's going to do this.  But that gives you a long list of things that the app wants permission to do.  And nobody reads that.  They go yeah, yeah, yeah, yeah, yeah.



STEVE:  Although, right, the Apple guys are going to go through and audit those rights and say, wait a minute, why do you need clipboard access?  You're not doing anything with a clipboard.



LEO:  Yeah, yeah.



STEVE:  Yup.  So...



LEO:  I think that's Apple's approach and is the sensible approach.  But not everybody can do that.



STEVE:  Yeah.  So what I would say to people is when - and here's the problem is, as a user, I have no control.  OAuth, I mean, sorry, bitly is saying it wants these things.  Twitter, when I go, when I bounce over to Twitter's site to give permission, they're being enumerated, but I have no way to say, uh, no on this and no on that and no on that, at least in this particular Twitter case.  And again, I don't know whether the protocol allows it or not.  So I can either say yes or no.  Either I have no access that way, or I do.  I mean, and bitly isn't allowing me to authenticate otherwise.  So I don't know.  We need more granularity of control, at least in this particular authentication loop.



Finally I just - we're nearing the end here and approaching an hour and a half of podcast.  So I was right that we would not have time to get to any other content.  I got a kick out of the fact that RIM has updated their PlayBook to thwart the jailbreaking that...



LEO:  No.



STEVE:  ...Dingleberry was doing.



LEO:  Dingleberry?



STEVE:  Dingleberry for the BlackBerry, yeah.  But Dingleberry for the PlayBook, it was exploiting a flaw to allow jailbreaking, giving users root access and allowing them, among other things, access to the Android Market.



LEO:  So, come on.  Nobody's buying that piece of crap anyway.  Might as well let them hack it.



STEVE:  So RIM...



LEO:  You'll sell more, RIM.



STEVE:  That's really true.  RIM updates the PlayBook to close the flaw and prevent Dingleberry's access.



LEO:  E. Karchinski [ph] in our chatroom says, that one guy who bought a PlayBook can't jailbreak it now?  Come on.



STEVE:  Within hours, Dingleberry...



LEO:  Yeah.  They cracked the crack.



STEVE:  ...updated themselves, simply using a different flaw, and they're back to it again.



LEO:  I'm sure there's no lack.  Dingleberry.



STEVE:  So, nope.  I just wanted - I am approaching another milestone that I saw the other day and made a note.  We're approaching 90 million uses of ShieldsUP!.



LEO:  Wow.



STEVE:  When I looked this morning, I think it was, we were at 89,961,921.  So...



LEO:  That's not sales, that's people.  So you somehow record....



STEVE:  Oh, I wish that were sales.  No.  No, that's not...



LEO:  You'd be a billionaire.



STEVE:  I don't have 90 million.



LEO:  But you record somehow - come on, Steve.  You record when people use SpinRite?



STEVE:  You know me better than that.  No.  I have an MRU list, that is Most Recently Used list, of one - it's 1K long.  So it's actually 4K bytes.  1K, the most recently 1,000 IPs that ShieldsUP! has...



LEO:  Oh, ShieldsUP!.  Not SpinRite, ShieldsUP!.



STEVE:  ...not SpinRite, has acquired.



LEO:  Got it.



STEVE:  And so while people bounce around GRC, I'm not double counting them.  They have to go away long enough to be flushed out of that MRU list.  And then when they come back, typically a day or two later, or a month or two later, whatever, I count them again.  So that's a very good count.  That's 90 million people, essentially, have used ShieldsUP!.



LEO:  Nice.



STEVE:  We'll have a party when get to a hundred million.  But at this point we're 90 percent of the way there.



I already mentioned SGreads, which is my new Twitter feed.  Anybody who thinks they might be interested, the first posting there is an interesting article from a day or two ago I really thought was thought-provoking, titled "How Doctors Die."



LEO:  Ooh.



STEVE:  And it said that doctors don't die the way the rest of us do because they know better than to keep themselves alive past the point that it makes any sense.  So...



LEO:  Oh, that's interesting.  So a lot of suicides.



STEVE:  No, no, no.  Well...



LEO:  I'm sorry.  I shouldn't - that's a bad assumption.  I'm so sorry.



STEVE:  Not a lot of suicide.  But, for example...



LEO:  They just say, "I'm done."  No.



STEVE:  It would be, yes, we could...



LEO:  We could prolong this, but let's not.



STEVE:  We could prolong this for another week by putting horrible things into your body.  The example that was drawn was actually one of issuing CPR and breaking all your ribs when you're elderly because apparently CPR performed correctly does break your ribs.



LEO:  Breaks your ribs.  But it keeps you alive.  No, I have that "Do Not Resuscitate" thing on me.  Jennifer and I have a deal.  We're going to put a pillow on each other's faces when it comes to...



STEVE:  Actually, Leo, I have to say it's the first thing, it's the first reason I ever considered getting a tattoo.



LEO:  Oh.  Good idea.  Just write on your forehead, "Do Not Resuscitate."



STEVE:  Well, I wasn't going to go for my forehead.



LEO:  Well, what?  Your butt?  I mean, where do they - it's got to be somewhere they're going to look.



STEVE:  Maybe on my chest.



LEO:  Right there.  Do not - oh, yeah, right where they would - yeah.



STEVE:  It turns out it would be either "DNR" you would tattoo, or apparently a lot of doctors actually wear bracelets that say "No Code."  And "No Code" is what the...



LEO:  Like Code Blue, Code Red...



STEVE:  Exactly.  Which is to say, if I'm dead, leave me there, rather than bring me back.  So...



LEO:  But is that legally binding, if you just put - by the way, Dr. Mom says - and again, Dr. Mom, who is apparently now the most cited person ever in the history of TWiT, says, because she's a physician, says put it in your armpit.  She doesn't explain.



STEVE:  Okay.  I guess you've got to stay shaven, then, too, in order to...



LEO:  But here's the - or your inner - but here's the question.  Does that have the force of legality?  I mean, is it a DNR?  I mean...



STEVE:  Good question.



LEO:  Aren't they going to ask your next of kin?



STEVE:  Don't know.



LEO:  I might do that.  I think that's good.  "No Extreme Measures" or "No Code."  It's not that - not "Do Not Resuscitate."  Look, if I passed out on the sidewalk, it's okay to give the kiss of life, especially if you're a beautiful young woman.  But...



STEVE:  And what's a few broken ribs between friends?



LEO:  Right.  But no extreme measures.



STEVE:  Yeah.



LEO:  Yeah.



STEVE:  Anyway, it's an interesting article.



LEO:  I like that.



STEVE:  I commend our listeners to it, if they're interested.  And when I find things from time to time - and again, it won't be a high volume feed.  None of mine are.  But SGreads is where I will put them.  And I wanted to mention that iBook recently got updated to v1.5 with two very welcome improvements.



LEO:  Yes?



STEVE:  You get to it with the Font button on the UI.  One is full screen, that removes that ridiculous book-binding border.



LEO:  Oh, thank god.



STEVE:  I know.  It's like, okay, a little too cutesy by half, Apple, thank you anyway.  And also there's a nighttime mode that inverts the screen so it's very gentle white text on a black background and is much easier on your eyes if you're reading in a low-light situation.  It's not nearly as glary.  And in fact, back when I was reading on my Palm Pilot, I used the invert-the-screen feature of an old reader back in the day and really enjoyed reading that way.



And I thought I would close with a nice mention of SpinRite, which we haven't sold any of recently.



LEO:  What?



STEVE:  No, because we seem to be scaring...



LEO:  Oh, yeah, that's right, you had a slow weekend, that's right.  No yabba-dabba-dos because of the SSL.



STEVE:  Yeah, Fred Flintstone is lonely.  But someone whose initials are P.P.S. said, "I've been a SpinRite customer since v5.  I've been using it occasionally but have had no real problems with my hard drives.  I was glad to have the product, but until last night I couldn't actually say it worked, as I had not encountered any drive problems."  Well, of course that's one of the benefits of using it occasionally is it'll prevent you from having drive problems, which is absolutely true.  He said, "I have recommended the product to others based on my satisfaction with your freeware tools, assuming that your commercial product was good, too.  That has now changed."



LEO:  What?  



STEVE:  "For the past week or" - no, no, meaning that, well, here it goes.



LEO:  Okay, yeah.



STEVE:  "For the past week or two, I've been noticing that when starting Windows it would almost boot up, but would not display the list of users to select.  Sometimes I would see the users, but would be unable to mouse over to them to enter the password.  It got to the point that I would sometimes have to boot three or four times to get a good boot.  I was thinking a Windows reinstall was going to be required.  Knowing how long that would take just to do the install, let alone to reinstall my favorite applications, I thought I'd run SpinRite, just in case the problem was not corrupted files, but rather an inability to read the data.  I ran SpinRite on my boot and C: partitions overnight.  Since then I have had no further reboot issues at all.  I can now recommend the program to others with the full knowledge that it really does work, and it saved me many hours of tedious Windows install blues.  Good job.  P.P.S."



LEO:  I take it that that drive did not have "DNR" written on it.  Can that - is that going to - could that ever - no, that wouldn't happen.



STEVE:  No.



LEO:  Do not resuscitate this drive.  No extreme measures.  SpinRite is Code Blue for hard drives.



STEVE:  Exactly.  Anybody who's inclined to purchase it, don't be put off by the fact that you may get a warning from Certificate Patrol.



LEO:  That's a good thing.



STEVE:  In this case, we have more security than we ever have before.



LEO:  Spin.pdf.  So I've been busy during this show, and I hope you don't mind, every once in a while I do some things.  And we got our stack of Christmas cards, and we're sending them out, and I've been signing them as we've been talking.



STEVE:  Ah.



LEO:  Paying attention.  It's like knitting.



STEVE:  Nope, I appreciate that, Leo.



LEO:  Yeah.  You'll get one.  But I just thought it'd be kind of fun because this is this year's Christmas card, "Happy Holidays from the TWiT Brick House."  And inside we have all the people who are on the front.  There's 19 people on the front.  And I just thought, and I asked Frederica, and she had last year's, and we went from, let's see, that's one, two, three, four, five, six, seven, eight, nine, 10, 11, 12, 13.  So we added six people, almost a 50 percent growth this year.  Which is all right because we had a 40 percent growth in revenue.  So that kind of is - kind of works out.  And most of these people are still here.  I think.  Becky, Becky's moved.  It's kind of, you know, she's emeritus.  But she'll be back.  Anyway, I think that was kind of fun, to see this is in front of the old cottage, that's last year's card.  And this year's card is in the new brick house studios.



STEVE:  Very nice.



LEO:  Yes, they're festive.  Well, you'll get one of those.



STEVE:  Cool.



LEO:  So, Steve, next week Tom Merritt'll be back because I'll be on vacation.  Then I'm coming back for a very special Security Now! on the 27th.  It will come in your Christmas package, your downloads:  Steve's Sci-fi Episode, where we don't talk security, we just talk reading.



STEVE:  Unless something really horrible happens.



LEO:  You know it will.



STEVE:  Yeah.  So, I mean, maybe we'll do security.  But the show's intent, our content, this is the Special Holiday Science Fiction Episode.



LEO:  You know what I should get, I should get a short, very, very short sci-fi story we could read out loud or something.  That'd be kind of fun.  'Twas the night before Alpha Centauri.



STEVE:  Actually, Leo, we're going to have so much to talk about.



LEO:  Oh, okay.



STEVE:  We're going to have so much to talk about...



LEO:  Good.



STEVE:  ...I don't think we're going to need any more, so...



LEO:  And I did suggest - somebody's saying in the chatroom you should get Tom on for that.  Replicant says you should get Tom on the thing.  Of course, Tom and Veronica Belmont do a sci-fi podcast called Sword and Laser.



STEVE:  Well, see, but, okay.  If it's hard sci-fi, I'm all for it.  But not any...



LEO:  No, they do fantasy.  Yeah, they do unicorns.



STEVE:  Yeah, see, that's not science fiction.  I don't know why people put those together.  But unicorns have no place.



LEO:  I'm kind of with you on that.  No fantasy for me.



STEVE:  I want phasers.  I want teleportation.  I want light speed.  I want warp cores.  I want...



LEO:  Flying cars.



STEVE:  Yeah, you betcha.



LEO:  Steve Gibson is at GRC.com, the Gibson Research Corporation.  GRC.com is where you'll find SpinRite, the world's best hard drive maintenance and recovery utility, and all his other freebies, too.  And there are a ton of them.  And Steve, our chatroom, our intrepid chatroom has done a little research.  And there at GRC.com is the picture that Consumer Reports got from GRC.com/stevegibson.htm.  It's your own...



STEVE:  Oh, on my own page.



LEO:  It's your own picture.



STEVE:  Yeah, and I've got to update that, I guess, yeah.



LEO:  Associated Press Photo by Krista Niles, April 12th, 2002.



STEVE:  Yup.



LEO:  A little less gray.



STEVE:  Oh, a lot less gray.  And more hair.  Or less hair, also.



LEO:  "My Little Corner of the Web" is the name of that.



STEVE:  Ah.  Well, good researchers.



LEO:  You cannot put one past our chatroom.  I can tell you that right now.



STEVE:  Nope.



LEO:  Have a great...



STEVE:  We're done.



LEO:  ...holiday.  I'll see you on December 27th.  We're done.  Thank you, Steven.



STEVE:  Oh, that's right, I'm not going to see you next week.  So in two weeks you'll be back for the sci-fi show.



LEO:  Yes.  Merry Christmas.



STEVE:  Perfect.  Thanks, my friend.



LEO:  Thanks, Steve.  We'll see you next time on Security Now!.



STEVE:  Bye.



LEO:  Bye.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#332

DATE:		December 22, 2011

TITLE:		Listener Feedback #133

SPEAKERS:	Steve Gibson & Tom Merritt

SOURCE FILE:	http://media.GRC.com/sn/SN-332.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Tom discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



TOM MERRITT:  This is Security Now! with Steve Gibson, Episode 332, recorded December 21st, 2011:  Your questions, Steve's answers, #133.



It's time for Security Now!, the show that keeps you safe and secure on the Internet.  Well, at least tries to.  As safe and secure as you could be.  And of course the star of the show, Mr. Steve Gibson is here, the man who makes ShieldsUP!, SpinRite, and so many other great things come to life.  I'm Tom Merritt, filling in for Leo Laporte, who is on holiday break.  But he'll be back next week.  Welcome, Steve.  How's it going, man?



STEVE GIBSON:  Hey, Tom.  Great to be with you again.  You seem to be doing the Q&As with me.  Every other week you're jumping in to...



TOM:  Yeah, it has worked out that way.  I'm the December Q&A guy.  I'm looking forward to that.  I like the Q&As.  You get a lot of samples of lots of different stuff.  It's really fun.  Let's start off with our Adobe Watch.  What's the latest?



STEVE:  Well, this week, unlike last week, I don't know if you were aware, but so much happened week before last that last week's podcast had so much security news that we didn't even try to get any of, like, our regular, like, tutorial or explanatory or whatever topical content in.  This week we don't have that much.  So we've got a nice Q&A, but fortunately not that much happened.



Adobe Watch has us keeping our eye on the two zero-day Flash vulnerabilities which surfaced last week.  They were discovered by a Russian security firm who has demonstrated them, is selling fixes for them to their own customers, but is not disclosing to Adobe what they have found, saying that, well, Adobe's not paying us, so we're not telling them.  So...



TOM:  Now, this is the opposite of what we usually run into, which is a researcher letting everyone in the world know to help make it safe.  They're saying, you know what, we're not telling a soul.



STEVE:  Well, and they're - exactly.  So their game here is that they're saying, hey, our clients pay us to protect them, and we're protecting them against something that we know about, and we can demo it, but we're not going to tell Adobe.  So the concern is that the bad guys will be able to reverse-engineer the protection, figure out what's wrong, and exploit it.  And Adobe, who hasn't been informed, won't be able to do anything about it.  So we're sort of in a holding pattern here.  We know that these are in Flash.  We know that you can invoke Flash visiting a website or opening a PDF for some bizarre reason.  Flash is supported by PDF because those are Adobe formats.  And so we're just - there's been no news on that horizon.  So we're kind of keeping an eye on that.



The good news is that, in response to an emergency problem in the versions 9 and 10 of Adobe Reader and Acrobat, as we have been expecting, Adobe did update v9 of Reader and Acrobat to fix the problems which had been, again, another zero-day problem which they learned about a few weeks ago.  It is contained by their sandbox, which was put into place with v10.  So even though v10 of Reader and Acrobat also has this problem - I think they're at 10.1.1 at the moment - they're not going to update that in a big hurry because this exploit can't get out of their sandbox.  So this has been an example of the sandboxing technology doing a good thing.  We wish that it didn't have the vulnerability in the first place, but at least as far as they know it can't get loose from that.



I got a kick out of the SANS Institute, SANS Security Institute.  One of their editors, Tom Liston, who is a senior security consultant and malware analyst for InGuardians, he's a handler for SANS Institute's Internet  Storm Center, and also the co-author of the book "Counter Hack Reloaded."  He said, of all this, he said about the Reader and Acrobat problem, he says, "Isn't it about time that we drove a stake through the heart of PDF and started over?  This time, let's not include stupid cruft like JavaScript, Flash and Universal 3D in a 'DOCUMENT' format."



TOM:  Oh, hear, hear.



STEVE:  Yeah, I mean, it's just crazy to have, I mean, so many problems have been a consequence of the PDF document format supporting executable content, which is of course Flash, which is interpreted and has had a history of problems, and JavaScript, which has all kinds of exploits being made possible.



TOM:  Now, do we need to start over?  Or can we just take that stuff out?  I mean, because I know some of the alternate readers are more secure because they just ignore that aspect of PDF.



STEVE:  Yeah.  And, I mean, he's sort of tongue-in-cheek.  He knows we're not going to scrap PDF.  I mean, PDF is the standard interchange format now for page format of documents.  It's not going anywhere.  But you're absolutely right.  One of the things that we have often promoted on this podcast is people going in and disabling things like JavaScript and Flash support in Acrobat and Reader.  There's just no reason to have it.  The problem is it's all on by default.  What would be really nice is if it was off by default, and then in those rare instances where a document actually needs JavaScript or Flash - and I'm sure there are some vertical corporate applications where there's, like, within a narrow range, it makes sense to have this.



But most of us are just looking at static pages.  And yet we've got the vulnerability of an interpreter, a PDF document interpreter that will do vastly more than we want.  And anyone who's been listening to this podcast for more than a couple years already gets it, that even if you think those extra features are secure, you're more secure to turn them off.  It's just the target surface, you want to minimize the size of the target service.  So having fewer things on always makes you more secure.



TOM:  If it's not there, it can't be hacked.



STEVE:  Yeah.



TOM:  That's why I used to unplug the phone line from my computer when I wasn't - when I didn't need it, obviously.  It's like, well, nobody's going to get into it if it's off and it's unplugged from the Internet.



STEVE:  I remember when Microsoft was bragging about the security level of NT.  They were - I don't think - I think it was maybe called "S3" or "C3," I think it was C3 was a government spec for security.  And they were saying that their new Windows NT - this is when, of course, it was new - new Windows NT 3.1 operating system was C3 secure.  The problem was that one of the requirements of C3 security is that it's sitting in a room all by itself with nothing connected to it.  So it never was actually C3, not unless, I mean, not if you had it networked and connected to the Internet, god help you, and so forth.  So it's like, I don't think that quite qualifies.



TOM:  And I'll be honest, I haven't had Acrobat Reader on a computer in years.  I just keep it off.  There's plenty of other ways to read PDFs, one of them being Chrome.  We got a security update for Chrome to talk about.  Of course it does it quietly.



STEVE:  Well, yes.  Somewhere along the way, Chrome did update itself once again.  Google paid out $6,000 total for the respective discoverers of the various flaws which this latest update fixed.  And what dovetails nicely on that is that Microsoft has seen the light and announced that they, too, starting next year, starting in 2012, will be adding automatic background updating to Internet Explorer.  They've been actually waging a campaign that we've talked about a couple times on the podcast to try to get people to stop using IE6.  And there is some strong corporate support still, I mean, insecure as IE6 is, because Microsoft began to break compatibility as they went to IE7, and there are - I remember that we've had listeners telling us that they would like to leave IE6, but they've got huge applications that were written specifically to IE6 features which are not portable to later versions of IE, which is, oh, goodness.



I mean, so I guess if you just used IE, if you locked it down and used it only for those things, the problem is IE doesn't like to coexist with other versions of IE, so you're almost forced to use a third-party, which is actually a good thing, a more secure third-party browser for your Internet stuff, and then just use IE as an application platform where you have no choice.  Microsoft has said that they will be, by default, because, I mean, their goal is to corral everyone and bring them current as they move forward to their later versions of IE.  So it will be an opt-out automatic update, meaning there will be a means for turning that off for users who specifically don't want it, and if you had ever said "no thanks" to updates in the past, then this thing won't sneak up on you.  It'll stay disabled.



TOM:  Yeah.  If you have automatic updates off now, you won't be forced into this.  But if you have automatic updates on now, this is going to be part of them.  Is that right?



STEVE:  Well, if you didn't decline in the past an offered update to IE, then it will now just not even - it won't be in your face.  It won't ask you.  It'll be like Chrome is with Google, where it'll just be keeping itself current in a much less obvious fashion.  Because, you know, I mean, we all know that browsers are the application platforms of tomorrow.  We're seeing everything going cloud and distributed.  We like the idea of seamless access to cloud-based applications on various devices.  So Microsoft's working towards that same model.  They said, and I don't quite get what their rollout schedule is, it won't hit us in the U.S. immediately.  They said they're going to roll it out in Australia and Brazil first at the beginning of 2012, I guess to sort of see how it goes and sort of beta test it in those two lucky...



TOM:  Yeah, it's an interesting pick, Australia and Brazil, two opposite sides of the globe, southern hemisphere.



STEVE:  And maybe they're doing an alphabetical - maybe alphabetical order by country name.



TOM:  Yeah, maybe it is.



STEVE:  Starting with A and B.



TOM:  Where's Austria, then?



STEVE:  Yeah, well, yeah, true.  Maybe that's next.



TOM:  You know what's interesting about this, I remember when they tried to make updating to the next version of the browser automatic several years ago, and there was a huge outcry because we were not accustomed to being pushed.  And Microsoft forcing you, like don't you dare force me into upgrading.  And there were all the people, like you say, who use IE6 because it only works with their custom applications, and IE7 wouldn't work that way.  It was this huge outcry.



But now, years later, we've gotten used to Chrome.  We've got now Firefox is moving towards the same thing.  And we'll talk about that in a second.  But we're all so accustomed to it that it's being welcomed more, especially because they're doing it in a way that allows you to turn it off, if you want to.



STEVE:  And if we go even further back in our Wayback time machine, remember that when Microsoft first introduced the whole concept for Windows of automatic updating, people freaked out.



TOM:  Oh, yeah, definitely, uh-huh.



STEVE:  I mean, suddenly we liked the idea of having control.  We just received service packs from time to time to fix a lot of things.  And Microsoft began saying, oh, no, instead of coming to us, we're going to come to you.  And, oh, all of the old-school gurus just had fits about that.



TOM:  Well, so many of those updates had broken things in the past that I think we were all burned.  And I'll be honest, still to this day on my Windows machines I let it notify me, and then I say, okay, I'm ready.  You can update.



STEVE:  Yes.  Well, and there is nothing more annoying than waking up a machine and having everything you were doing gone, and then discovering that it updated and rebooted because the update needed a reboot.  



TOM:  "Windows Updates have been applied."



STEVE:  Yeah.  Microsoft has said that they are going to provide three days' notice of intent to reboot your machine to give you time to save things and shut things down gracefully.  So, yes, thanks so much.  And...



TOM:  Also if you're on - I was going to mention, if you're on XP, you'll only get moved up to Internet Explorer 8, not Internet Explorer 9, I believe.



STEVE:  Correct.



TOM:  Because 9 doesn't work on XP.



STEVE:  Correct.  And you mentioned, and you're right, that Mozilla - now, okay.  Mozilla has said they're going to do it, too.  Now, here's what gets me.  Someone, I saw somebody tweet something, asking me, "Steve, what do you think about Firefox v9?"  And it's like, oh, is that where we are?  Okay, good luck with that.  I'm still at 3.  And I just did receive a notice that I have a new version of 3.6.x is available.  But I see now in this announcement of Mozilla's intent, they're planning to add automatic updates, background updates to Firefox v12 on April 24th of 2012.



Which says that this other thing that's been annoying people is that Firefox has gone from really slow, painfully slow updates, which frankly people were liking a lot, that they weren't - it wasn't this crazy update festival all the time.  So suddenly now we're - it's like I'm already hearing about 9.  8 just happened.  Somewhere between now and April 24th they're going to have to do a 10 and 11 and then a 12.  So, okay.



TOM:  Yeah.  I think what they did is they just changed the numbers.  Instead of .0 or .1, they just said, well, we're just going to call the next one 5 and then 6 and then 7.



STEVE:  We're going to move the decimal point three places to the right and call them major versions.  It's like, eh, well...



TOM:  And Firefox right now does a sort of an automatic update, but you have to restart the browser.  And I guess what's going to happen April 24th, if I read this right, it'll work like Chrome, where you just never really know that it's being updated.



STEVE:  Yeah.  Which would be nice.  And it will require some plumbing underneath, behind the scenes, in order to make that work correctly.  So, yeah.



TOM:  All right.  We've been talking about this a lot on Tech News Today, the Stop Online Piracy Act, HR 3261.  Of course the latest is that they haven't passed it out of committee, thank goodness.



STEVE:  Right, right.  Again, I got a kick out of one of the editors of the SANS Institute newsletter, in this case William Hugh Murray.  He's an executive consultant and trainer in Information Assurance and associate professor at the Naval Postgraduate School.  And about this he said, "On December 15, the managers of the bill published amendments intended to respond to the criticism" which the bill immediately received from the industry.  He said, "The amendments said, in effect, that the remainder of the bill should not be interpreted as written English..."



TOM:  What?



STEVE:  "...that it was not intended to do what it does."  He said, "Drafting legislation is difficult, even when one's intentions are honest.  When it is drafted by an interested party, bent on disclaiming its interest, it becomes nigh impossible."



TOM:  And there was a great section in one of these amendments, and I think it's the amendment he's referring to, where it said, "Nothing in this bill should be interpreted to break the way the domain name system works; and, if so, then it should be ignored."  I looked at that and said, great, the entire bill can be ignored because everything they're recommending breaks the domain name system.



STEVE:  That's exactly right.  This new replacement starts out, the first clause is that nothing here should be interpreted as foreclosing any free speech rights.  And the second part is, exactly as you said, and if this breaks the DNS system, then we didn't mean to do that, so ignore that part.



TOM:  Yeah.



STEVE:  And then they go about explaining how the bill does exactly those two things.  So, crazy.



TOM:  Prior restraint, and breaking DNSSEC.



STEVE:  Exactly.  The problem is, I mean, from my technical standpoint, ignoring the social and constitutional and just sort of the emotional aspect, from a purely technology standpoint, what they're trying to do doesn't work.  And we have example after example of example of the fact that it cannot work.  What they're trying to do is blacklisting.  And we have a long history of failed attempts at blacklisting on the Internet.  Famously, spammers are a persistent problem.



TOM:  Right.  None of us have any spam anymore because everybody's been blacklisted.



STEVE:  Exactly.  Wasn't that a great solution.  You just blacklist those particular pesky spammers, and they can't send you spam anymore.  Well, we know that doesn't work because all they have to do is change their identity and their location, or their apparent identity and apparent location, and, whoa, they're able to send spam again.  The point is that the fundamental architecture of the Internet is to permit publishing by default.  And any person can get, in the case of domain names, any person can get any not previously registered domain name from any registrar, set up a website anywhere in the world, using any ISP that they want.  And, by default, anybody anywhere can access it, if they know its name.



So, I mean, it's very much like sort of the old-school way that firewalls were originally created.  The first firewalls had all their ports open by default.  And then, if there was, like, some service that you were running inside your network that you did not want anyone outside to access, you would block that port.  So the default was open, and then you made exceptions to close ports.  Well, everyone quickly found out that was a bad idea because somebody inside the network would fire up some new service and start offering something, and then people outside were able to access it until they were blocked.  So now we have firewall technology.  I mean, everyone knows you block everything by default, and then you selectively permit those things that you know you need.



TOM:  Don't let Congress hear that, Steve.



STEVE:  Well, and see, that's just it.  It can work in a controlled, constrained environment.  There's no way to do this across the Internet.  There just - there isn't.  And so my concern about this whole SOPA mess, aside from all of the other non-technical aspects, technically you can't blacklist.  We quoted someone a few weeks ago saying that - it was a quote that I really liked - the Internet was designed to route around censorship.  I mean, it is censorship-resistant, I mean, robustly so.  And so the problem would be, if we ask ISPs to block all of these following bad domains, the counterfeiting purse people will simply create some new domains.



TOM:  Yeah.



STEVE:  You know, different names.  And then we'll add those to the blacklist.  And then they'll move again to different domains, and we'll add those.  Before you know it, there'll be this massive list of domain names that needs to be checked.  And most of them won't have anything there anymore, but they'll still be in the list.  I mean, it's just a technical catastrophe.  I mean, essentially, the people that are trying to make this happen, the good news is they don't understand the technology, and that's what has stopped them now because a lot of people who do have said we're moving towards unspoofable DNS with DNS security, DNSSEC.  And this breaks DNS security.  And suddenly all of the Congress people go, whoa, what, what, what?



TOM:  Well, no, Steve, I heard - the head of the MPAA told me, told everyone that those fears are overblown.  And obviously the head of the MPAA knows more about DNSSEC than the dozen or so Internet engineers who work on it every day who signed a letter saying the opposite.



STEVE:  Isn't that Christopher Dodd, now, by the way?



TOM:  Yeah, it is Christopher Dodd, correct.



STEVE:  Oh, you know, okay [laughing].



TOM:  I don't - and here's the thing.  I don't want to minimize the challenge that the industry faces in trying to protect their intellectual property.  There is a right to protect copyright.



STEVE:  Yup.



TOM:  However, it's being overblown, A, how much of a danger it is, and how damaging piracy has been to the economics.  And so we have this high-pitched rhetoric where I think the industry is feeling like, okay, we've got this Internet full of hackers, both white hat and black hat.  And all they do is like to come up with ways around everything we try.  We tried to get them with DRM, and we tried to track their IP addresses, and we tried this, and we tried that, and we can't stop them because the Internet's full of people who could figure out how to get around stuff.  So let's just get them off the Internet.



And it turns out, you know what, you can't do that because they are people who like to hack around whatever obstacle you throw in their way.  You have to come up with a more sociological situation, a situation like the music industry has sort of stumbled into where you say, you know what, instead of just trying to slam piracy, let's give people a better option where they're willing to pay money.  And it's certainly hasn't solved everything for the music industry, but people are paying money for digital music, something if you had told the music industry this would happen in 2001, they would have told you you were crazy.



STEVE:  Yeah.  Well, and I keep harkening back to the conniption that the motion picture industry had with the advent of consumer VCRs.  They absolutely tried to prevent the VHS and Betamax from ever happening because they said it would be the end of the movie business.  Well...



TOM:  There's a great "20/20" that's kicking around, I think on YouTube, where I think it's Jack Valenti, maybe, talking in exactly the same terms that they talk today about the VCR and what it would do to the industry if it was allowed to exist.  Didn't happen.



STEVE:  No, no.



TOM:  All right.  Well, we can't move on to a happier - well, I guess it's sort of happy.  Depends on how you look at it.  Carrier IQ is sort of - the story's sort of winding down.  But the carriers are backing away, essentially.



STEVE:  Well, yeah.  We've already covered this through a couple weeks.  I didn't want to spend much time on it except that we had talked, and Wired magazine carried an interesting story that I got a kick out of.  The headline was "Mobile Carriers Claim Consumer Consent to Carrier IQ Spying."  And reading just the first two paragraphs from Wired's article, they said, "According to mobile phone makers and carriers, Americans consented to secretly installed software on 150 million mobile phones that logs what apps they use, what websites they visit and who they communicate with.  Sprint, AT&T, HTC and Samsung told Sen. Al Franken..."



TOM:  My friend.



STEVE:  "...last Thursday that their end-user licensing agreements," the EULAs that we're all so fond of reading, "those pages of fine print you sign when you get a new cell phone authorize them to use Carrier IQ software to monitor app deployment, battery life, phone CPU output and data and cell-site connectivity.  The companies' statements, released by Franken, are a good roadmap to how the companies will fight federal privacy lawsuits already brought by consumers over the secret software."  And this dovetails nicely into, as I was saying to Leo last week, he often reminds people that I'm credited with coining the term "spyware" because I found this Aureate spyware...



TOM:  I remember that.



STEVE:  ...on my machine back in the day.  I mean, this was this advertising spyware.  And their defense was that, in the contracts that they made with the freeware carriers of this spyware, so that you downloaded freeware, installed it, and along with it came this spyware.  And this was - it was a way of advertising enabling freeware in order to kick back a percentage to the freeware makers.  And the model never worked.  The whole thing just collapsed.  But this was installed in tens of millions of people's machines, and they told their freeware authors, do not remove this when the user removes your freeware because other freeware may have since been installed that also so uses it.  And so there'll only be one instance of our spyware, and all the freeware is able to use it.



So there was this amazing hue and cry when it was revealed that there was this spyware technology that had been installed in everyone's machine.  I created a little Opt-Out was the name of my own little remover to take this stuff out of people's machines.  And their defense was that, exactly like this Carrier IQ situation, it's like, whoa, it's in the fine print, literally in the fine print.  And it's like, sorry, that just doesn't keep people from being really upset when they find out that this was the way this software is behaving.



TOM:  Well, and you see the legal arm saying one thing.  And at the same time you see Sprint pulling it off of millions of their mobile phones.  So this is bad news for Carrier IQ.  Which I really, honestly believe was not trying to be up to no good.



STEVE:  No, I...



TOM:  I think they got caught in a sea change of writing software for a platform in the '90s and having it still working on a platform now in 2012 almost.  There's an entirely different set of assumptions about what you're getting into.  When I've got a little flip phone that all it does is make calls and send some text messages, that Carrier IQ diagnostic software is not nearly as burdensome and dangerous as it is on a smartphone, where I've got all my financial information and apps and all my contacts and all of that.



STEVE:  Well, and it has evolved.  I mean, certainly, if it's monitoring app usage, their argument is that some apps drain batteries.  And so they would like to be able to - they're not able, the carrier doesn't know all the things that a user has installed.  Yet the carrier is who gets called and complained to when the battery only lasts two hours.  So, I mean, so defending them, they have a strong case, I think, to make to say, look, we need to be able to know what's running, what percentage of the time it's running, what percentage of the CPU it's using, what percentage of the battery it's draining, and be able to pull that intelligence up on our tech support employee screen when someone calls and says their phone's dying after a couple hours.  So, yeah, I mean, I can see the need for that.



I mean, I don't think there's a - there's not a good solution to this, unfortunately, because users are just going to use their phone, and no one is ever going to read the fine print, and this stuff is just going to be there.  So I think ultimately it has to kind of get out into the world that this is what our smartphones do, and you have a choice of not using the smartphone, or maybe using one that has this stuff removed or disabled, or maybe there will ultimately be some sort of, it's not on by default, but if you have a problem then you contact the carrier.  They say, okay, look.  We're going to turn this on so that we can diagnose the problem.  Call us back tomorrow and we'll see what we learned.



TOM:  Well, you know what...



STEVE:  That might have been a better way to handle it.



TOM:  That's the way Mark the Spot works in iOS now.  AT&T uses Carrier IQ and Mark the Spot on other platforms.  But on iOS it doesn't.  What it does is, it has you download an app that you launch when you have a problem, and then it captures the state.  Now, it's not going to be as comprehensive as Carrier IQ running constantly in the background, but it does give you the control over when it grabs everything.



I think something like that is really all that Carrier IQ needed to do, is give you an alert when you first buy the phone, saying, hey, we want to have the software running, collecting diagnostic information.  Click here to find out all the things that it collects.  Do you want it to run?  If yes, click here; if no, here.  And then, like you say, if you did click no, you could always choose to turn it back on if you're having problems.  Just give me the control over it and let me know what it's doing, and I'm fine with it.



STEVE:  Yup.



TOM:  All right.  A couple of miscellaneous things here.  What's this about "briefly stalled sales"?



STEVE:  Yeah.  I mentioned this to Leo.  I followed through with switching my SSL certificates throughout the entire site from VeriSign over to DigiCert.  And the experience was spectacular.  I am so glad to be with DigiCert now.  I mean, I'm saving money.  I switched up to EV certs, so I have those.  They give me protection of my root domain, GRC.com, in addition to three other subdomains, so like www is just part of the package.  And I'll also be doing media.grc.com for our media server.  And my goal is to move the entire site to SSL always, you know, HTTPS Everywhere mode, which is the direction I'm heading.  But I also wanted to do it with EV certs.



The problem was that something bad happened a day or two after we switched.  And, for example, last Sunday - Sunday.  Yeah, yeah.  Sunday a week ago?  No.  Just, yeah, yeah, Sunday a week ago our sales stalled.  I mean, we hadn't had a lower number of SpinRite sales, like, ever.  And it's like, what the heck?  And so I checked the server.  I was trying to see if there was a problem, if there was, like, some - we weren't processing financial transactions or whatever.



Anyway, what was interesting was that a frequent listener to the podcast who goes by "Dr. Mom" in the chatroom, whose actual first name is Liz, sent me an email saying, hey, guess what, Steve, my organization thinks GRC is evil and has blacklisted you, and we can't get to your site now.  And I was like, oh, my goodness.  Well, turns out that - I asked her to track down what was going on.  They use an automated, software-based technology from a company called Websense.  And Websense briefly, they fixed the problem, or it fixed itself.  I don't know if they've got someone who listens to the podcast and heard me.



But they noticed that the Certificate Authority that signed GRC's certificates changed.  And of course that is the No. 1 thing that you would expect to see happen if there was a man-in-the-middle attack or a DNS spoofing attack or something that would be taking you to a pseudo GRC site and, over a secure connection, would be presenting you with a bogus certificate that would almost by necessity be signed by someone other than the previous certificate signer.  So, unfortunately, it was a brief and short-lived false positive alert because in fact, for all good reasons, we did have the people signing our security certificates change, and I'm really happy that happened.  So anyway, the problem only persisted for a day or two, and everything's back to normal.



TOM:  Thanks to Dr. Mom.



STEVE:  Yeah.



TOM:  By the way, her first name's Lil.  She wanted me to...



STEVE:  Oh, Lil, sorry.



TOM:  ...make sure - Lillian.  Thank you, Lillian.  All right.  I love this last one here because I'm a sucker for a good math joke.  But Steve, why is it that all these programmers I know always confuse Halloween and Christmas?



STEVE:  Well, this is something that always surfaces, every season.  I see these either in the mailbag or now in my Twitter stream.  And several people tweeted this.  I just thought I would share it with all of our listeners because those who enjoy, as you said, math, will get a kick out of it.  And this is one of those things, it's like, okay.  Someone clever thought of this, and it's of course correct.  And the reason those two holidays get confused, apparently, in some programmers' minds is that 25dec, d-e-c, that is to say, decimal, equals 31oct, which is to say, octal.  And sure enough, that's the case.  Two times 10 is 20, plus five gives us 25 in decimal, and three times 8 plus one gives us 25 in octal.  So, sure enough.



TOM:  Somebody working in octal one day just had that brainstorm and said, wait a minute, Halloween is Christmas.  Everything's crazy.



STEVE:  Well, and I had - I got a nice note from a Richard Shepherd dated the 17th of this month.  And the subject was "YAST," Y-A-S-T, Yet Another SpinRite Testimonial.  It's a little quickie.  He said - but this is something I don't think we've ever talked about before.  He said, "I remotely connected to a client's domain today to take control of a PC there and burn our site-licensed ISO of SpinRite at the client's office that is 72 miles away from me.  I walked the client through rebooting to the SpinRite CD and starting SpinRite at Level 2.  And, well, this email exchange is all you need to know.  I get all the credit for your great work."  And then actually he says, "I hope your EV Cert/SpinRite sales issue has been resolved."  And indeed, as we know, it has.  And then he signed it, "Big Fan, Rick Shepherd."  So, Rick, thanks very much for sharing your SpinRite success with me.



TOM:  Shall we get into some questions, Mr. Gibson?



STEVE:  Absolutely.



TOM:  This is Listener Feedback #133.  We'll start off with Bruno Miranda in Portugal, who solved the mystery of his router's login failure.  He says:  Hello, Steve and Tom.  Wow.  I actually got in an email.  I have just won one of those battles against those little things that we wouldn't normally suspect of, and almost out of despair call it broken logic.  Suddenly one day I discovered that I couldn't log into my router, a cheap but interesting Vodafone Sharing Dock.  It wasn't recognizing my password.  I was surfing the web, everything else was okay, but I just couldn't log into the router.  I rebooted, restarted, reset, powered the router off and back on again, cursed at it, yelled at it, all to no avail.  Had I been hacked and my router stolen from me?  I even upgraded, then downgraded the firmware.  Still nothing.  After a full factory reset, it wasn't even accepting its default password.  Then I tried my tablet, and it was working fine.  But the laptop wasn't.  And I knew the password.  I knew that I knew the password.  Was the router broken?



So I took a last deep breath, multi-booted my Linux machine into Windows, and it was working.  It wasn't the laptop's hardware.  I returned to Linux Mint, installed another web browser, and it was working!  Only two chances left:  Broken router or something in Firefox.  I went around Firefox's configurations, and yes, I had changed something some time ago:  I had activated the Do Not Track (DNT) header.  After unchecking the box, I typed in my password, and Shazaam.  That was it.  Of course there's no need for or worry about my own router tracking me.  This seems to be one of those little broken compatibilities that test our nerves.  I wanted to share my interesting adventures with your listeners.  Thank you so much for the great show and all the energy both of you put into it!  Security Now! is listened to on this side of the Atlantic.



STEVE:  Now, that's really odd, and I did want...



TOM:  What is it doing that?



STEVE:  Yeah.  The only thing that the Do Not Track header does is add a "DNT: 1" for Do Not Track.  Basically it's just making - your browser adds that one line to what's called the "query headers," the list of things that are being sent out when your browser is asking for a page.  And normally, essentially, the router looks like a web server, so your browser is querying the web server in your router for a page.  And it's just - it's bizarre to me that the addition of a header, which it almost certainly wouldn't know about, would cause a login failure.  I mean, the only behavior of turning Firefox's Do Not Track header on should be to add that to the query.  It shouldn't prevent, for example, cookies.



Now, the only thing I could think is that there's some interaction or maybe something else in his browser was seeing the Do Not Track header and was, for example, doing something with cookies because I could imagine that, if you were blocking cookies, that could cause a login problem.  But I just can't see that the Do Not Track header by itself could.  But I thought I would share this just in case anybody else had a router that was acting in the same way.  Turning on Do Not Track is something that we would be promoting for people.  So if it's causing a side effect in some bizarre cases, that's certainly worth knowing.



TOM:  Rckgift in the chatroom speculates maybe the router was using that code for something, and the router had been created before Do Not Track was implemented?



STEVE:  It's the only thing I can imagine.  But except that, well, or maybe a bug in the router's web server.  Essentially, the router wouldn't be able to induce your browser to generate a DNT header.  And if it's named - if it was naming a cookie DNT, then the header would actually be cookie:dnt=, so that would be semantically parsed differently than dnt: and then a one or...



TOM:  You know, chetpot has an interesting speculation.  What if the admin CGI script is being taken from an array, and the added header changes the array stack?



STEVE:  Again, it would be, I mean, again, that's another possibility.



TOM:  Intriguing, yeah.



STEVE:  But requiring that a browser have exactly a certain set of headers, that's a problem, too.  In fact, one of the ways that browsers can be identified is the sequence of the headers that they generate because different families of browsers emit their query headers in a different order.  And so I remember at one point, I think it was when I was working on the browser identification for the CSS script-free menuing system on GRC, I was looking at how can I determine which browser is which?  And without scripting, you can't really take advantage of header sequence.  But I do remember noting that one of the things that some servers were doing is looking at the sequence of headers as a means of disambiguating browser families.  So, you know, again, that's hard to see that would be the cause.  But still, something certainly kind of freaky.



TOM:  Yeah.  All right, Question #2 from Notre Poubelle in Vancouver, Canada, asking about an iOS battery management app.  He says:  I've seen an app called "Battery Boost Magic" in the iOS App Store.  Could an application actually help battery life?  Wouldn't this be managed by the OS?  I can see how an application that uses heavy resources could kill battery life, but to improve it?  I've seen lots of reviews on the web, and they're generally extremely positive, but I can't see how this thing would work.  Assuming it does work, is there any possible negative long-term effects to using something like this?



STEVE:  So I took a look at what the app was because I completely agreed with his assumptions about what limitations an app running in iOS would have.  And looking carefully at what their claims were, I'd have to come to the conclusion that their claims were a little overblown.  They were hyping what this thing was able to do more than their technology would warrant.  What it appears that it does have to offer, which iOS doesn't, is very sensitive measuring of the amount of current that is being drawn, or the high-resolution look at the current charge state of the phone.  And so over time, by looking at that, the app would be able to see the rate at which the phone was draining because the features which seemed strongest that this thing was offering was a projection of how much time you had left on the battery when you were doing different things.



So this app was running, is passively looking at the rate at which the battery is discharging based on a much higher resolution readout of the amount of charge in the battery, and then it's able to do probably a straight-line prediction of when the battery will hit zero, essentially, and tell you, oh, you've got seven hours using this app and two hours using this app and so forth.  So it does look to me like it's stretching what it's able to do.  Essentially, it's a sophisticated battery meter and really doesn't look like it's anything more than that.  And they've been clever with what they're doing with it.  But they are sort of overselling it.



TOM:  Battery meter/placebo effect is what it sounds like to me.  All right.  Ranget in Syria wonders about remote attacks on home computers:  I like your podcast a lot, and I'm a weekly listener for almost a year.  Damn, I wish I knew of your podcast earlier.  Anyway, thanks for the amazing podcast.  As for my question, let's say a hacker got a hold of your IP address, and your home network is behind a hardware firewall, a router.  What can he do in order to hack the network?  Are we safe behind our routers?  Or are hackers able to gain access remotely to our network by probing the firewall with some of their gadgets?  And what can we do in order to protect against such attacks?  So, yeah, how do we harden our own firewalls?



STEVE:  Yeah.  When I encountered this, I thought, well, this is sort of a basic question, but basic is also good because some things have been changing in our computers in the last few years that are worth noting.  The other day I was setting up a new machine and was curious what exceptions had been made through the Windows - I was setting up a Windows machine and was curious what exceptions had been made through the Windows firewall.  And I was disturbed to see how many different apps and services had registered themselves to receive incoming traffic through the firewall.  Meaning they were opening ports through the software firewall in Windows to make themselves available for incoming traffic.



Now, that's different than opening ports out in the hardware firewall, the router, as he mentions.  Except that Universal Plug and Play, UPnP, explicitly allows this.  That is, it is designed, the reason it was created was that consumers were installing routers for their security and for the features that they afforded.  But that was blocking software features from being able to receive incoming traffic.



So Universal Plug and Play was created as a means to allow machines inside the network to talk to the router, which would be advertising its UPnP services and selectively open ports through the router, essentially violating its security.  Leo and I have often, through the years, suggested to people that, if you do not need, you don't know you need Universal Plug and Play, then you really want to disable that in the router.  A place, for example, where you do need it is by default Xbox wants to open a bunch of ports.



Now, what you can do is disable Universal Plug and Play and then manually open those ports yourself so that you retain control over what your router's doing and have those ports sent only to the X-box.  If you have Universal Plug and Play enabled, any machine in your network can open ports through your router.  And when I look at the number of openings in the typical Windows firewall now, it's a lot less secure than we wish it was.



TOM:  All right.  On to Question #4.  Jamie Hunt in Darby, England, wonders whether Steve is an open source publisher without knowing it.  He says:  Hey, Steve.  I might be missing something here, and I'd love to know it if I am; but aren't all of your tools, which you write in assembly language, inherently open source, since they can be relatively easily disassembled? 



Take, for example, your DNS Benchmarking tool:  If I download a copy of this, I can open this with my favorite disassembler (PE Explorer), and within seconds I am looking at all of your source code just as you wrote it!  If you wrote these tools in C++, then I wouldn't have your C++ source code, I would have the compiled assembly language produced from the source code so they remain relatively closed source.  But since your tools are written in assembly language, the code is the same; right?  I have a feeling that I am missing something, but I can't see where.



STEVE:  Well, it's funny because there's been - I sort of smiled and chuckled when I saw this because a topic that comes up every so often in GRC's newsgroups is people saying, hey, why don't you release the source of these freeware that you create because, after all, it's free.



TOM:  It's free, right, yeah.



STEVE:  So why not let us see your mojo and magic and how you're doing this?



TOM:  Make a speech and beer.



STEVE:  [Laughing] Exactly.  And then, if I don't respond immediately to that posting, if I don't get around to it, somebody will weigh in and say, well, you know, Steve writes everything in assembly language, so just disassemble the executable if you want the source code.  Now, the fact is, if anyone has seen my source code, they'll know, and sometimes I'll settle the argument by posting a screenshot from my editor showing what mind looks like because mine is heavily indented, heavily commented, beautiful variable names that are long and descriptive, I mean, it almost reads like English.



I also use all of the Microsoft MASM conditional flow tools - if, then, else, while, do.  All of those map down into single instructions.  So I'm really writing, I'm writing assembly language, but it's really pretty and much easier to read than the stuff you often see posted on, like, random hacker sites, where it's just a string of opcodes running down the left-hand margin of the page.  That is what you get if you disassemble my code, is a string of opcodes running down the left-hand margin of the page.  And you don't get nice variable names which are multiword and descriptive when I create them.  All you get is an address of something.  And of course you get no comments.  Those are all stripped out as part of the assembly process, as well.



So there's a big difference between what I produce and what you get if you disassemble the post-assembly code.  But to answer the question which actually Jamie didn't ask, but I'll answer because it's the one that is posed so often in the newsgroups, the reason I don't offer my source is it would make it extremely easy for someone to clone my apps and then post them on the Internet and have them masquerading as mine.  And it's not that I would mind if they identically cloned them because, you know, that's the same as just rehosting my EXEs.  But they could also make them evil.  They could have the DNS Benchmark doing something behind your back that you don't know.  It would look like a really tasty tool, even if they didn't say it was from me.  If it was a really nice benchmarking tool, lots of people would want to use it.  But if they made it also evil at the same time, then they would be suckering people into using something that they didn't know was being bad for them.



And of course there's lots of other things that do that already.  I just don't want to contribute to it.  And I don't see any benefit to me in releasing it as open source.  I like the fact that my stuff is sort of uniquely small and special.  And you come to GRC.com if you want to get it.



TOM:  It's open ugly source, is what you're saying.



STEVE:  [Laughing]



TOM:  All right.  Question #5, Sami Lehtinen - and I apologize if I'm mispronouncing your name - from Helsinki, Finland makes a GREAT observation about dangerously leaky "hardware" firewalls.  He says:  I wanted to warn people about potential problems with regular home routers such as the more expensive and fancy firewall routers that are very configurable.  That configurability can backfire nastily.  This kind of plays into what we were talking about earlier.



STEVE:  Yes. 



TOM:  While the router is booting - it's quite a long process - parts of the system start with default configuration, like the switch portion.  This causes all LAN, WAN and DMZ ports to be completely bridged for about one minute.  After that, normal NAT/SPI, DHCP, et cetera, function returns. 

 

As far as I can tell, that's a very serious security issue. 60 seconds is more than enough for automated attacks to get through, even if somebody would claim it's just a short moment.  And this is not just one case. I have noticed similar functionality in other products like this earlier from the same manufacturer.  I assume the basic system  they're using is flawed.  It shouldn't start networking before everything else is ready. 

 

It's very easy to notice this functionality when configuring the firewall because, if you run ipconfig/renew after reboot, it's trivial to get a public IP from the ISP's DHCP pool and use the Internet for about one minute.  After that one minute the network stops working until you again renew the lease, and then you'll get the IP address from the local LAN DHCP pool, as expected.



STEVE:  Well, this is a fantastic observation, and I'm not at all surprised this is going on.  But it's something that had never occurred to me before.  Many of the fancier, higher end routers are based on Linux, and they've got a fundamental networking architecture which is supported at the low-level OS level.  But then they layer on many more features which run as independent processes and, for example, hook into the network in order to add filtering and NAT routing functionality and so forth.  But without those things running, that is, before they hook into the network layer, you have a generic bridging router with none of the security features enabled.



So this is a very real problem.  What, I mean, the takeaway from this actually is to - what I would do is, and I'm probably going to do it from now on, I don't reboot my router very often, but I would disconnect my LAN side connection for a couple minutes until the router comes up and it settles down, and then bring my local network up inside.  What he was saying, just to clarify, and this is one way to test this, he was saying that shortly after rebooting the router, if he then - he was using the Windows command, "ipconfig /renew," which tells Windows to go send out a query for its auto configuration, the DHCP, Dynamic Host Configuration Protocol, send out a query to get an IP.



What he discovered was that, if you do this shortly after the router comes up, you are actually connected directly out to the public Internet.  And traffic is flowing both ways.  You have a simple, non-NATed bridge to your network.  So you send out a DHCP query, it goes to your ISP, not to your router.  Which means you will get back a public routable IP, the one that would normally be acquired by your own router.  You would obtain that.  And your system would be on the Internet during that time.  Eventually, the router's own DHCP server comes up, and its interception technology, NAT and so forth, comes up, the stateful packet inspection and all that.  Then you get normal routing functions.



But what he observed, and this doesn't surprise me, but it's certainly something to be aware of, is that with a router which is actually probably Linux-based OS, it's going to take a while to get itself going.  We know that these are not fast processors.  They're little, cheesy, I mean, they're slow, barely enough to handle the normal traffic that you have through the router, and they're cutting costs every way they can.



So minimizing the complexity and the speed of the processors is one of the things that they do.  So what that means is that it's fine once it gets going, but it really takes it a while to come up and get going.  And during that time, you could actually have zero protection.  I think that's really interesting.



TOM:  So you could also just keep all your computers unconnected to the router during setup.  But it seems simpler to just pull that connection to the Internet out because then you can make sure that your computers are getting assigned and everything.



STEVE:  Well, yes.  The problem with that - I mean, yes.  That's the - you have one connection to pull if you pull the WAN side.  The problem then is that your router won't have been able to obtain, when it booted, a public IP.  And so you'd have to give it a kick or wait for it to go ask again or do something.  What I was wondering was whether you could run ShieldsUP! during that time.  But the problem is you would, if you got a public IP - you have to have an IP in order to run ShieldsUP!.  If you get a public IP anyway, then you know you've got a problem.  So, I mean, you know that you've got no protection from the Internet during that window.



Now, this makes me glad that all of our personal computers now have their own software firewalls, also, because that's going to give you some protection.  But, boy, this does say that you don't want to absolutely depend upon the software firewall in your machine.  I'm sorry.  You don't want to depend upon the hardware firewall offered by the router because it's transient.  It's not present for a while when you're restarting your router.  So what's safest, although it's not just a single plug, if you've got a router that also is a switch, you'd have to, like, pull all of the connections from it while it comes back up, wait for it to settle down, and then plug things back in again.  But, wow, that's really a great observation.



TOM:  Yeah.  Question #6 from David in Chicago.  He needs to know how to disable Windows Safe Boot mode.  And he's got a funny reason why.  He says:  My kid gets around the Windows parenting filter that I put in place by booting into safe mode.  Do you know a way to disable that?  This goes to what we were talking about earlier.  Whenever you make a blacklist, people find a way around it.  Is there a way to turn off safe mode, though?



STEVE:  Wasn't that - first of all, I got a big kick out of the question.  And it's probably, behind the scenes at his kid's school, they're all talking to each other, and they have figured out this is the way you get around what Mom and Dad have done to the computer is you boot into Windows Safe Mode.  So I poked around to see whether there was a way around it.  Some crazy guy is suggesting that you can hex edit the ntldr.sys file, which is...



TOM:  Wow.  That's hardcore.



STEVE:  ...a core component of Windows.  Do not do that.  You really don't - it's version dependent, and it's search for a certain pattern, and it's like, oh, goodness.  I mean, now all these components are signed.  That would break the signature for the signed driver files, so you don't want to do that.  I did find somebody who is selling something.  If you Google, just the phrase with no spaces, "nosafemode," you Google that, the first hit that Google brings up is a page ending in that dot html.  And that appears to be a respectable piece of software which you could install which will, specifically for this purpose, disable Windows safe boot mode.  It is available, I think it was a 30-day trial.  So you could try it, see if it does what you want, and then buy it if it works.



So I did find that.  But I just got a kick out of the question and wanted to share it with our listeners and offer that little, although I can't vouch for the app at all because I have not tried it, it looks like it's reputable and would do the trick.



TOM:  Now, a bunch of people in the chatroom are suggesting putting a password on the BIOS.  That way he can't reboot without knowing the BIOS password.



STEVE:  That's good.  So he would have to have his parent then enter that and then supervise the escorting into Windows normally.  That may not work with the way his family is structured, you know, Junior coming home in the afternoons and wanting to use the computer before Mom and Dad are home and so forth.



TOM:  Depends, that's true.



STEVE:  Very clever.



TOM:  Kid's going to get a boot disk of some sort anyway.  It's going to be an arms race.  That's what I think.  Jim Hyslop in Toronto remembers that Lucille Ball explained bandwidth.  He says:  I have an analogy to share and a question to ask:  Listening to the most recent Q&A, it occurred to me that a better analogy for bandwidth is a conveyor belt.  You put your packets on the conveyor belt, and they get whisked off to their destination.  The conveyor belt moves at a constant speed, so the limitation is not how fast the data moves, but rather how much data you can put on the conveyor belt at any given moment.  If you have a lot of people trying to put data on the conveyor belt at the same time, some of it has to wait until there is room.  The classic "I Love Lucy" chocolate factory sketch is a perfect illustration of, not only bandwidth, but also how routers can drop packets when they get too busy..." because she drops the chocolate all over the floor.



Secondly, I want to cover an extension of one listener's question about how to get people to understand security.  Your virtual-to-physical security analogy is great, but I sometimes run into people whose attitude is "Why would anybody want to break into MY computer/website/whatever?" Do you have any suggestions on what to say to those people?



STEVE:  Okay.  So first of all, I assume that our listenership has seen that episode.  I mean, it is one of the classic...



TOM:  Go seek it out, if you haven't.  You can find it online, actually.  "I Love Lucy" is pretty easy to find legally online.



STEVE:  Yes.  It is a spectacular piece of comedy.  And but  mostly, his analogy is great.  I love the analogy of a conveyor belt because we all like to have visual aids.  And for our listeners who are trying to explain stuff to other people, this is perfect because the idea being that packets are like blocks, essentially, and this conveyor belt is moving along, this imaginary conveyor belt, at a certain rate.



And so the idea is that that is the shared broadband that all of the subscribers on a leg of the ISP's network share.  And so the idea being that you're given a percentage of the conveyor belt's capacity, and you put packets on, along with everybody else putting their packets on.  Some people get a bigger percentage; some people get a lesser percentage.  But the actual rate at which the individual packet moves is shared by all users and the same.  What differs is how often you're able to put your packet onto the conveyor belt, sharing the space with everybody else.  So I love the analogy a lot.



TOM:  Now, if I have this right, is the speed of light the conveyor belt speed?



STEVE:  Actually, no, because that would be the case if we were actually - if we weren't modulating.  We're actually...



TOM:  Okay, yeah, that makes sense.



STEVE:  We're modulating the data onto a carrier.  And so it's substantially slower than that.  The carrier speed is the speed of light, but the data carried by the carrier being modulated is a lot slower.



TOM:  All right.  Let's...



STEVE:  Anyway, great analogy.  And Part 2 was...



TOM:  Oh, right, right, the virtual-to-physical security.  Why would anyone want to hack into MY website, Steve?



STEVE:  Yes.  And that is a great question.  And it is the defense that people who want to be lazy about their own security use, is nobody cares about me.  The question is, I would - I think, again, trying to relate this to people who are resistant, ask them if they think viruses care who they are.  Viruses don't.  Viruses are agnostic to who you are.  They just want to infect everybody they can.  Email spam carrying infected links don't care who you are.  These bad guys want to get their malware into everybody's machine.  They don't care who you are.  They would like to set up a bot trojan in your machine and use it to attack others.  They would like to install Zeus into your machine, Zeus being the very successful, distressingly successful banking trojan, in which case they don't care who you are as long as you've got money in your bank account, which they would be happy to help you drain.



So you get Zeus installed in your machine, you're anonymous to them.  But this thing watches you log into your Bank of America website, present you with a fake page showing the balance you expect, while behind the scenes it sends your money off to Russia.  So absolutely, just in the same way that viruses don't care, none of this stuff cares who you are.  It's just happy to have your money.



TOM:  Yeah.  The answer, the short answer is the reason they care about whatever it is you've got is because you have processing power and a connection to the Internet.  And they could use that to take all kinds of stuff from you and other people, essentially without your knowledge.



STEVE:  And you may have a bank account.  And they'd be happy to help you empty that.



TOM:  Question #8 from Mark Wonsil in Royal Oak, Michigan points us to a very cool animated CAPTCHA.  He says:  I hadn't seen this before, but maybe you had, an animated CAPTCHA.  I wonder if this defeats some of the image recognition software like Google Goggles - for now.  And there's an example at MPESupportGroup.com.  So essentially it's a normal-looking CAPTCHA, but it ripples.  It's like an animated GIF.



STEVE:  It's very clever.  And I wanted to share this with our listeners.  We've talked about CAPTCHAs at length.  So it's the contact form, as you said, Tom, MPESupportGroup.com/contact-us.html.  And I commend it to our listeners to take a look at it.  Essentially, it uses the fact that our brain is able to integrate an image over time, so that, if we watch this thing rippling, we can read it.  But it's because we're seeing it stretched out over time.  There's a numeral - actually, I guess it's going to be different for everybody, so the one that I saw will not be what everybody sees, obviously.  But in the one I saw there was a numeric digit on the end that happened to be a digit "5."  And it was actually sort of sliding under a fold in this ripple-y fabric sort of animation, so that you could see that it was a five.



But the point is that it would take some extreme intelligence on the part of software, first of all, to realize this is a multi-image, probably a GIF, an animated GIF image, and then to look at every separate frame.  No single frame contains the CAPTCHA.  It's only over time that your brain reassembles this into what this waving flag, sort of a printed waving flag is.  Anyway, that's very clever, and something I had never seen before that I wanted to share with our listeners.  So thank you, Mark, for pointing it out to us.



TOM:  Yeah.  And Burke, are you able to get my screen, or - oh, never mind.  It doesn't look - I didn't have a number in mine, Steve.



STEVE:  Okay.



TOM:  It was just "RWWU."  But you could never have captured any single frame and seen all of the letters.  That's...



STEVE:  Exactly.



TOM:  It's that rippling, that folding that you're talking about.  So a machine is not going to ever see all of it unless it was smart enough to be able to integrate the way our minds do.  But that's a much taller order.



STEVE:  Yeah, and it's not just like sort of revealing something static over time.



TOM:  Right.



STEVE:  Because that would be easy to sort of programmatically fix.  These things are sliding under ripples and under folds.  And I think it's very clever.  I don't know where it came from.  But I'm sure looking at the page source you could probably figure out where they were getting their CAPTCHA technology because to me this looks like it would slow things down, probably for quite a while.



TOM:  All right.  Just three more, no, my math's wrong, four more.  Question #9 from Rob in Las Cruces, wondering about SpinRite and hard drive cloning:  I manage a help desk where we see our share of failed hard drives.  Most data is backed up, so I'm not usually too concerned with bringing a dead hard drive back to life.  But the other day a user came to us because her laptop would no longer boot.  We didn't have a spare laptop drive on hand, so I had my tech run SpinRite so that, hopefully, she could keep working until we could get another drive and re-stage her laptop.  SpinRite worked like a charm, and she was able to work the rest of the day without a problem.  SpinRite, as it always does, came through in a pinch. 

 

But I have a question:  We received a replacement drive and took out her bad drive, which SpinRite had been keeping alive, and reinstalled her operating system, programs, et cetera.  But would it be okay to use a program like Clonezilla to clone the dying hard drive?  That would save time, and the end user would still have their customizations that take the user so much time to reset.  Would this work, or do we run the risk of copying errors into the cloned image? 



STEVE:  Interesting question.  And I get people from time to time asking questions that are sort of SpinRite-related, and I say I sort of don't want to, like, turn this whole thing into a big commercial for SpinRite.  Certainly our listeners are well aware of SpinRite.  But I've seen questions like this before.  We got a burst of SpinRite sales back when Microsoft was offering the converter from the FAT16 to the FAT32 file system.  I don't even remember what that thing was called now.  But it was when they were moving people to Win98, I think, from Win95.  And drives were getting bigger, so they needed to expand the file system size.



But people were wanting to convert, in place, their file system from 16 to 32 bits.  And the point was that any single error anywhere on the drive failed that process.  And so what people realized was running SpinRite first would fix the FAT16 file system, and then the converter, which would previously have failed, was then able to succeed.  Well, the same is true with drive cloning because typically the cloning software, I mean, it's not SpinRite.  It's just doing a simple sector copy from one drive to another.  Anything that causes it to glitch will cause it to fail.



So one of the reasons people today still purchase SpinRite is they're trying to back up a drive that won't back up because the image software will say there's an error on your drive.  SpinRite will fix that, and then you're able to perform your copy.  So the answer to Rob is, yes, running something like SpinRite, well, or SpinRite - actually there is nothing else like SpinRite, so running SpinRite first to fix the drive's errors will then allow a drive cloning or copying system which was previously failing to succeed.



TOM:  All right.  Good to know.  Steve Fintel in Houston, Texas wonders about an HTML5 security analysis.  He says:  

Hi Steve.  I've been an avid listener of Security Now! since Episode 1, and followed your Tech Talk column before that.  I recently attended a security conference where one of the speakers talked about methods to attack HTML5.  Many of the conference attendees started getting upset at the obvious step backwards HTML5 represented from a security perspective.  I would love to hear you dedicate a Security Now! episode to this topic.  We don't have time for a whole episode right now, but what do you think?



STEVE:  Well, we don't.  But we certainly will be talking about it, at least in piecemeal.  It would be hard to do an episode, like, preemptively because what I can tell you is we're going to have problems.  We've already had problems with HTML5.  For example, there's something in HTML5 called Offline Web Applications, which is an explicit caching technology that allows sites to cache their web pages statically in your machine.  The problem with that, which has already been exploitedm is that if you briefly go to an insecure location, like Starbucks's Open WiFi, and get some malicious JavaScript in your machine, whereas it would only have been able to live in a transient form on the web pages previously, by leveraging this explicit application caching, there is already malicious JavaScript which is able to set up shop in your computer, thanks to HTML5.



TOM:  Well, you're essentially installing a program now when you do that.



STEVE:  Exactly.



TOM:  And so you're open to all the same risks.



STEVE:  Exactly.  So there's an instance where it's a feature of HTML5 being repurposed.  And I know that we're going to see, as we always do, clever hackers come up with ways of abusing things which are extensions of our browsers' capability a la HTML5, creating problems that we didn't have before.



The second class of problems will be your classic coding errors, and they already exist.  For example, HTML5 brings a much-advanced rendering to us.  There's a canvas metaphor into which you're able to draw with vectors or pixels in order to perform sort of on-the-fly local graphics rendering, which we have never had before.  Now we have it, and there's mistakes in the code.  So there have already been exploits, for example, taking advantage of buffer overflow mistakes in the screen canvas rendering technology in some browsers in order to run code that was - run code rather than graphics in your browser.  So generically I can say HTML5 is going to keep our podcast busy.



TOM:  Yeah.  And it's not accepted yet.  And that's a good thing because it gives us a chance to look at this kind of stuff, and you still have a chance to address it.



STEVE:  Yeah.  I would say that browsers are rapidly moving towards it.  But we're not rapidly using it.  It'll have a slow uptake because of course websites can't use it robustly until all the browsers support it uniformly.  And we're still - the browsers are rapidly moving in that direction.  And there are some cool things.  I mean, there are also some disturbing things, like there is persistent data storage which is explicitly available in HTML5, or a la HTML5, that we've never had before.  It's like mega cookies.  It's another place for identification stuff to be stored in your browser, so we're going to have to have some control over that.



TOM:  Yeah.  With great progress comes great responsibility, I guess.



STEVE:  Yes.



TOM:  Question #11, Craig in Tyler, Texas wonders about lithium-ion battery inconsistencies:  I don't want to beat a dead-horse topic, but something's been bugging me about the recommendations for lithium-ion battery management.  Everything you've said on Security Now! about the topic makes perfect sense, and it even helps to explain why my laptop occasionally seems to be charging my battery even though I never use it with A/C power.



My confusion, however, comes from my cell phone.  I have a Samsung Continuum which was made within the last year or so, and the manual for the phone quite specifically mentions unplugging the charger when the battery reaches 100 percent.  The phone itself even beeps and pops up a message saying "Battery fully charged.  Unplug charger."  If all that you have taught us about lithium-ion battery management is correct, then why do some manufacturers still lead us, the consumers, to believe that these batteries can be overcharged or that we should be draining them all the time? 



STEVE:  It's a great question.  And I loved it because it highlights a distinction that I have made before, but I clearly need to make more clear.  And that is, there is an absolute separation or difference between the chemistry and the technology of lithium-ion battery function and the management of that chemistry.  And I'm aware of it, and I'm careful when I'm talking on the podcast to make sure I use the right words.  But it would be very easy for someone who didn't recognize the importance of the distinction to miss it.



And so the idea, for example, is that we've talked about lithium-ion batteries not being trickle-charged.  That is, some battery technologies like, famously, good old lead acid batteries, you're able to trickle-charge.  You're able to, after they come up to a full charge, you drop the current to them and just feed it in at a very slow trickle, which has the effect of keeping lead acid, old, like, car batteries, full topped off.  That kills lithium-ion batteries.  They do not - the chemistry, the actual electrochemistry does not behave well if it's trickle-charged.  You will damage it.



So the proper way to charge a lithium-ion battery is to charge it to a terminal voltage and then stop all charging.  Now, there's no reason that Samsung hasn't done that except that they chose not to.  Their manual says unplug it when it's fully charged.  The phone says, "Unplug me, unplug me."  Now, here's Apple and all other laptop makers, they don't have any problem with stopping charging when their battery's full.  I don't know why Samsung has a problem.  But they've chosen to.  So it's not that their lithium-ion batteries are different from anybody else's.  It's that, for whatever reason, they've chosen to manage the same electrochemistry differently than others.  Maybe there's some advantage to them doing this that isn't apparent.  I can't really see what it would be.  But they've sort of - they've transferred some of the responsibility of proper battery management from their own hardware and firmware over to their users.



TOM:  Well, they read all these great stories about crowd sourcing, Steve.  And they said, well, we'll just crowd source battery management.  The problem is they don't have a crowd.  There's only one person using the phone. 



STEVE:  Yeah.  So anyway, so the distinction is, I've tried to be careful about assigning the responsibility in the proper place.  But I would say that, Craig, the upshot of this is absolutely definitely do what the manual tells you.  But the management aspects are different from the electrochemical aspects, which are pretty much absolute.



TOM:  Now, is that why sometimes my computer will say "You're fully charged, we're not charging your battery," but it'll still say 98 percent?  Because it's just saying, look, we're not going to keep charging this thing, it's dangerous.



STEVE:  Yeah, actually, and there is a good reason, a rationale for that.  The term "battery," like, a battery of cannons in old Civil War era is a bunch of cannons.  A battery is a bunch of cells.  And the cells are series-connected, and it is crucial that you never overcharge a cell in the line of batteries.  So what happens is, if the cell's charge is desynchronized, that is, if some cells have a few millivolts lower charge than others, as the battery as a whole is being charged up, the second that any one of the cells in the series-connected pack reaches its maximum charge, all the charging has to stop.



And so that's the reason that sometimes so-called conditioning can be useful, where you deliberately discharge the battery pack all the way down to zero, and then recharge it.  Because what that does is it allows those cells with a greater charge to discharge and sort of re-zero themselves.  And then, when you charge it back up, they all come up at the same time.  It can also be the case that the cells were not well matched by the factory, and that you're always going to have some that are a little bit weaker.  And so through charging and discharging, charging and discharging, they will tend to sort of lag behind the pack, so to speak.  And exactly as you say, it's fully charged, but that only gives you something less than 100 percent of full charge.  It's because of inter-cell variations.



TOM:  All right, let's finish up with Question 12 from Paul Brogger in Tenino, Washington, bringing news of the resurrected HP-15C.  He says:  Have you heard that HP has released the HP-15C in a limited edition model?  The original batch sold out instantly.  It's out of stock right now, but more to come.



STEVE:  I tweeted this, and I wanted to thank Paul for bringing it to my attention.  I've often talked about those.  They're a family of calculators which are 30 years old, I think.  Well, maybe not 30, maybe 20.  But long since discontinued, except for the 12C.  For some reason the financial version has stayed in continuous availability over time.  But my favorite one was the 11C, which was iterated to the 15C.  It's a landscape-orientation calculator rather than sort of the more traditional portrait orientation.  I just love my 11C.  And, I mean, it's sitting right next to me.  I've got various of them in various places in the house so that I always have one near me, depending upon where I'm working.



And so I tweeted the news and wanted to let our listeners know, for anyone who's interested, if you just put in "HP 15C" into Google, you can find HP's website.  It's $99 for this limited-edition HP-15C.  It is, in my opinion, the best calculator ever made.  It is just, I mean, and it's RPN, and RPN only.  So you've got to be a Reverse Polish Notation person.  But I'm dyed-in-the-wool that way.  Ever since I was in high school, I spent the $400 that I saved up from a summer job to buy myself the HP-41 was the very first scientific calculator that Hewlett-Packard produced.  So, love those machines.



TOM:  I'm still partial to the TI-35. 



STEVE:  Yup, another classic.



TOM:  Not as programmable.  Actually not programmable.  Had a memory, though.  All right.  That's the end of our questions, Steve.  Thanks so much.



STEVE:  My pleasure, Tom.  And next week, as our listeners know, we will - I'll have Leo back, and we're going to do a special science fiction episode for the holidays.  We may cover a little bit of security news, if anything fantastic happens.  But mostly we're going to talk about sci-fi:  movies, TV, and books.



TOM:  I can't wait.  You know I do a sci-fi podcast with Veronica Belmont.  So I'm definitely tuning in for this.  I can't wait to hear what you guys talk about.  I always get good recommendations from you when you talk about sci-fi and stuff.



STEVE:  Cool.  Thanks, Tom.



TOM:  All right, that's it.  Don't forget, Steve Gibson, you can find his work at GRC.com.  All kinds of good stuff there, like SpinRite, like ShieldsUP!, like Haystacks.  Look that up, you're going to love it.  Appreciate you watching Security Now!.  Leo will be back next week, like Steve said.  I'll see you later.



STEVE:  Thanks, Tom.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#333

DATE:		December 29, 2011

TITLE:		Holiday Science Fiction Special Edition

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-333.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 





DESCRIPTION:  After catching up with just a bit of year-end security news, for their special holiday episode, Steve and Leo review their favorite Science Fiction books and movies, pulling the commentary they have previously scattered throughout many years into a single reference.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 333, recorded December 28th, 2011:  Our Science Fiction Special.



It's time for Security Now!, our special holiday edition.  Joining me now from GRC.com, Steve Gibson, the man behind - the myth, the legend, the man behind Security Now!, our security guru, our privacy expert, the author of SpinRite, the world's finest hard drive and maintenance utility.  Happy Holidays, Steve.  Did you have a good Christmas?



STEVE GIBSON:  I did.  It was nice.  We're having a real cold spell in Southern California, and it was even colder in Northern California.  I was up there for the weekend.  And of course I like to start my days at Starbucks.  And on Christmas morning, they opened at 6:00 a.m.  So I left the house around 5:40 and hoofed it over to Starbucks, dragging my little airport wheelie behind me.



LEO:  It's a Starbucks Christmas.



STEVE:  And I was passing cars that were completely, like, they looked like they were in the snow, it was so cold.  It was below freezing.



LEO:  Wow.



STEVE:  And one of the gals, I got there a little early, and she was also - she was hoping that she was going to be able to get her Starbucks and get back home before her kids woke up.  They were ages three and five.  And I said, oh, good luck with that.  They probably never went to sleep.



LEO:  Oh, yeah.  The worst thing with little kids on Christmas.  And of course now I have teenagers.  So we had to - we were all in Massachusetts, visiting Abby.  And we were all staying in the same hotel.  Abby came across the street to join us in the hotel.  And I think it was 11:30, maybe noon.  Finally Jennifer and I said, you know, this is it.  We're going to miss lunch.  So it really shifts at some point.



STEVE:  Yes, it does.



LEO:  Oh, dear.  Well, anyway, Happy Holidays.  So you didn't come up here to visit Mom at any point, or...



STEVE:  Oh, yeah, I did, for Saturday and Sunday...



LEO:  Oh, good.  Oh, good.



STEVE:  ...just for the - I come up on the morning of Eve and leave on the late afternoon of Christmas Day.



LEO:  That's sweet.  Yeah, we've been having some pretty nice weather up here.  I don't know what it was like on Christmas Day.  But we've had beautiful weather the last couple of days.  So maybe it'll warm up in the Southland.



STEVE:  Last year I gave Mom her first Kindle, which was the current model at the time.  This year, because I had been reading so much, I sort of gravitated toward my DX.  And so I...



LEO:  Oh, really.  The big one.  The giant screen.



STEVE:  Exactly.  And I just like, I mean, I'm not holding it up in the air.  It is heavier.  But it's - I just like the reflective screen more than reading on anything else.  So I thought, you know, I'll bet Mom would like this, too.  So I tracked down one.  I really like the white color, which they discontinued in favor of the graphite, which is a very dark graphite.  I think they do it so that the not-quite-white eInk background looks a little bit whiter by comparison if you [indiscernible]...



LEO:  Oh, there you go.



STEVE:  ...in a white frame.



LEO:  Clever.



STEVE:  But I found somebody on eBay whose dad had purchased a DX just before the first iPad came out, and he put it on the shelf and never used it, so it was in mint condition.  So I was able to get a white one for Mom and verify that it was - anyway, so she's just - she's in love with it.  I've heard from her a couple times.



LEO:  She likes the DX.  She likes the bigger form factor.



STEVE:  Yeah, you know, at 84...



LEO:  It's easier to read.



STEVE:  ...the macular degeneration begins to kind of be a problem.  And, I mean, it is, it's easier to read.  When I saw the font size that she had chosen for her smaller screen Kindle, I thought, oh, this was a good idea because now you can actually get three sentences on the page.  So, yeah, just fine.



LEO:  Yeah, my mom just had cataract surgery in one eye, and she loves the Kindle for the same reason, big print.  She said, "I can read again," which is really wonderful because she's a voracious reader.  And Jennifer, who I gave the little Kindle, the new little $79 Kindle to...



STEVE:  Oh, which I really like, too.



LEO:  Love it, love it.



STEVE:  So small and lightweight.



LEO:  She's following in the family footsteps.  She left it on the plane.  So, but here, good news, it's $79.  So I guess...



STEVE:  It's readily replaceable.  But we had a really funny cabin attendant, I don't remember whether it was coming up or going - it was flying up - who talked about how every single flight somebody will leave their electronic gadget, whether it's an iPad, a Kindle, a BlackBerry, a BlueBerry, I mean, he went on to - he went through this great little pitch that I'm sure is repetitious for him.  But he said, "However, if you want to recover those, there's a website you can go to."



LEO:  What?



STEVE:  And then, pause, and he says, "It's www.ebay.com."



LEO:  Ah, the truth comes out.



STEVE:  To get your lost devices back.  So...



LEO:  Yeah, that doesn't - yeah.  Alas.  Well, it's all right.  You know, it's kind of a holiday tradition.  And you're right, at 80 bucks it's a good thing.  So tell us what we're going to do this episode.  Because we should explain for those of you watching after the fact, the recorded version, that we're doing this on the 28th, well, it says here on the screen, 28th of December.  Most of the TWiT shows are in best-of mode.  So we reserve this week, and we've done this for a few years, and it's really fun, for making best-of cut-downs of the whole year for each episode, the TWiT Best Of episode is Sunday, that kind of thing.  And it's a lot of fun because we let you go to TWiT.tv/bestof and suggest that.  That's up all year round.  If you see something you really want to preserve for next year at any point, just go there, TWiT.tv/bestof, and give us the information.  In any event, so we've collated those for most of the shows.  However, you and I talked last - or a couple of weeks ago.  By the way, thanks to, was it Tom or Iyaz who did the show last week?



STEVE:  It was Tom who covered it.



LEO:  Tom Merritt.  Thank you, Tom.



STEVE:  He's been doing our Q&As lately.



LEO:  He's great.



STEVE:  We noticed that the every-other-week of Tom was synchronized with the every-other-week of Security Now!'s Q&A.



LEO:  It's perfect.



STEVE:  So, yeah.



LEO:  So we thought this week, because there really - it's hard to do a best of on a show like yours where it's either great in-depth discussions of how the Internet works or something, you can't take five seconds of that.  Or it's news.  So we figured, let's make a special episode.  And Steve's idea was great.



STEVE:  And of course last, yeah, last year we famously repeated the Portable Dog Killer episode that was everyone's arguably favorite podcast, even though it wasn't about security news.  But I actually did get some feedback from people saying, oh, you broke your record of never having missed a single episode, blah, blah, blah.  It's like, well, okay, yeah.



LEO:  You can try to be perfect, or you can do a good job.



STEVE:  And somebody - I would love to give credit to whomever it was, but now I've forgotten.  But the recommendation or the idea was surfaced to do a sci-fi show.  And I thought, wow, that's a great idea because there's been so much good feedback about the book recommendations that you and I have talked about over the years.  And people have said, where's that written down?  Where is that all in one place?  And so, okay, nowhere.  So I thought, hey, let's do that.  Let's do an episode.  We'll do a little bit of security news because there is - there's one important thing I need our listeners to turn off in their routers which has just come up.



LEO:  Oh, okay.



STEVE:  A new problem with the most secure technology we have, our WPA technology, involving the WiFi Protected Setup, which is an ease-of-use feature that virtually all routers now have?  It's all enabled by default, and it turns out it can be cracked.



LEO:  Geez Louise.



STEVE:  So that, we've got to talk about that briefly.  But mostly we're going to go through all of the books that I have talked about in the past and just sort of put them in context, compare them to each other, what I liked about them, sort of pull all this together in one place for our Holiday Sci-Fi Special Edition.



LEO:  I love that idea.  I love that idea.  So we will get to sci-fi, holiday sci-fi in just a bit.  And a bit of tech news, or security news, because security news never sleeps.



STEVE:  Nope.



LEO:  Because the bad guys never sleep.  But before we do any of that, the chatroom has spotted something.  And I think they've - as usual, the chatroom is brilliant.  You are wearing a Minecraft shirt.



STEVE:  I am.



LEO:  Okay.  Don't tell me Steve Gibson, the king of assembly language programming, is playing Minecraft?



STEVE:  No, I don't even know what it is.  It's sort of - it's kind of a cool, sort of Escher-like...



LEO:  It's great.



STEVE:  Yeah, impossible Mbius strip thing.  So I thought, oh, I like that.  I'll - I was over on, I think it was ThinkGeek.  And I thought, oh, I'll take one of those.



LEO:  Well, the story is it's diamond blocks in a game called Minecraft, which is a really popular game right now, written in your favorite language, Java.  But the advantage of that is it's portable.  It's on every platform.  And it's really interesting, comes out of Sweden, and it was just this guy who wrote this really fairly simple program.



STEVE:  How weird.  I figured it was like old school, back in...



LEO:  It looks old school.  It does.



STEVE:  Yeah.



LEO:  Yeah, because it's 8-bit.  But it's not.  In fact, it's probably the hottest - it's one of the hottest, if not the hottest, games out there right now, believe it or not.



STEVE:  No kidding.



LEO:  Yeah.  And it's kind of - I have it probably here, I could show you.  But it's kind of a strange game.  You go around, it looks like a first-person shooter, but instead of a hand with a gun, you see a block, which is your hand, and you go around beating on the landscape to collect natural resources.  There are a few enemies, but it's not really about fighting enemies.  It's about collecting natural resources and building things.  And so the natural resource that's on your T-shirt is diamond bricks, which I gather - I'm not a Minecraft player, but I've played it, but I'm not a player - is apparently very scarce and valuable.  So that's the T-shirt.



STEVE:  Cool.



LEO:  Isn't that funny?



STEVE:  Thank you for letting me know what I'm wearing.



LEO:  Did your mother buy that for you?  All right.  So let us get - you said there's some router news.  I'm actually very curious about this.  What's going on?



STEVE:  Yeah.  Okay.  First of all, I did want to mention that Firefox released their v9 of - or Mozilla released v9 of Firefox.  And there was a glitch in the 9.00 release.  So the next day, after they saw that it was crashing some people's computers, they quickly updated it to 9.0.1.  And you probably saw the news.  I wanted to remind our listeners and you that Microsoft has announced they will be adding automatic update, that is, background updating, to IE starting next year.  So everybody's getting on the bandwagon.  Mozilla will be doing it in April with v12, for some reason, of Firefox.  But 9 is out.  They're claiming 36 percent faster JavaScript execution for v9 as opposed to 8, which has been out for - a week ago.  And they fixed a bunch of security issues and also released the similar v9 of their Thunderbird app for email and news.  So I just wanted to make sure that our listeners knew that 9 had happened and got a quick fix.



LEO:  Although Mozilla is taking great pains at this point to say, don't worry, just like Chrome, don't think about version numbers.



STEVE:  Right.



LEO:  It's just automatic.



STEVE:  We'll take care of all that for you, yes.  And there was some interesting SOPA news, since you and I have been following this, as have, boy, the entire industry has just gone bonkers over this.  So the good news is there's been so much fur flying that there's just no way this is going to happen.  GoDaddy, that was a very visible supporter for who knows why, it must have been that the people behind SOPA went around and tried to find supporters, they lost upwards of 70,000 domains exited GoDaddy in an active protest of GoDaddy's support of SOPA.  So GoDaddy quickly backpedaled and said, oh, it's not really what we meant, and we're now...



LEO:  And that's B.S., B.S.



STEVE:  I know, I know.



LEO:  Because if you look at SOPA, GoDaddy actually has an exemption.  They helped write that law.  There is an exemption written into the law that says "unless you're a GoDaddy domain."  It's unbelievable.  It's unbelievable.  Fortunately, we moved our stuff off GoDaddy long ago.



STEVE:  Yes.  And you remember that I got a short-lived domain, I think I got a wildcard domain when I thought that my DNS spoofability test would benefit or needed for some reason - oh, no, maybe it was my version.  I think it was my - I was developing a sitewide, application-wide versioning system, and I was going to use DNS to do version testing because it was a simple thing, an app could send a query.  And so I wanted different domain names or, like, subdomains.  So I used a wildcard DNS certificate that I got from GoDaddy.  Or, no, no, I'm sorry, not a certificate, just a domain.  And what really annoyed me was that they tried to auto-update or auto-renew that domain after I had deliberately informed them I did not want to be updated.  They tried to charge my credit card.  And the good news was I had used a PayPal one-time-use credit card, so they failed at that attempt.  But the fact that they tried to do this behind my back, without my permission, I thought, oh, I'm glad I'm not with them.  So you also left them.



LEO:  Yeah, although one of the problems people have been having is that they're kind of sticky.  They have this timeout, which they've changed since people complained about it a couple of days ago.  And I got stuck kind of in the GoDaddy web with a few domains.  Which are still over there, and I'm trying to get them out of there.  But we - our advertiser is Hover.com, and we've been telling people for a long time to move over to Hover.com.



STEVE:  Yeah, cool.



LEO:  I don't - I may have misstated exactly GoDaddy's presence in the SOPA bill.  It may be other - see, I believe they get - the closed domains get redirected to a GoDaddy domain which says "Closed."



STEVE:  Hmm.



LEO:  But I have to check.  I don't want to slander them.  I'd have to check and make sure that they - they say that they took their name off the list.  However, their CEO, Warren Adelman, said "Fighting online piracy is of the utmost importance.  That's why we've been working to craft revisions to this legislation.  But we can do better."



STEVE:  And I did, you're right, I did hear that they were a large participant in the creation of the legislation.



LEO:  I think they get some benefit from it.  In any event, I've told people to get off GoDaddy.  There's, as you point out, there's many other reasons.  It's not the best domain registrar in the world.



STEVE:  Yeah, yeah.



LEO:  And Wikipedia and many others are moving off of it, so that's good.



STEVE:  Stanford Law Review did a very nice piece called "Don't Break the Internet," an anti-SOPA and PROTECT IP, the PIPA legislation, which is the Senate's version.  I just tweeted the URL at my SGgrc Twitter feed.  So I really commend our listeners to check it out.  You can get a PDF version from that page.  Just the first paragraph of that reads, "Two bills...."  And so this is the Stanford Law Review's official position on these two, on SOPA and PIPA, said:



"Two bills now pending in Congress  the PROTECT IP Act of 2011 (Protect IP) in the Senate and the Stop Online Piracy Act (SOPA) in the House  represent the latest legislative attempts to address a serious global problem:  large-scale online copyright and trademark infringement.  Although the bills differ in certain respects, they share an underlying approach and an enforcement philosophy that pose grave constitutional problems and that could have potentially disastrous consequences for the stability and security of the Internet's addressing system, for the principle of interconnectivity that has helped drive the Internet's extraordinary growth, and for free expression."



Anyway, it's a - the whole thing is really great.  And so I would recommend, if our listeners are interested, I don't have - the URL is long.  But if you just go to Twitter.com/SGgrc, it's right there in my feed because I wanted all of my Twitter followers to be able to check it out.  It's just a great read, and I really recommend it.



LEO:  Yeah, yeah.  It's been my position all along that what's really happening is a kind of a bigger story, which is that the Internet and computing in general poses such a threat to the current business models for content companies - current is the important point - that they would like to just kind of disable or break the Internet, break computing with, as they've tried to do, with DRM and so forth to protect their current business models.  And the future really isn't in those business models anyway.  So it's almost like old farts like me saying to the new generation, hey, you know, until we retire, would you mind doing things the old-fashioned way?



STEVE:  Well, and Leo, with Tom last week I made the point that essentially this is a blacklisting attempt.  And we already know that blacklisting doesn't work.  If it did, we wouldn't have any spam because we would have blacklisted those 12 bad guys...



LEO:  Right, exactly.



STEVE:  ...and that would have been the end of it.



LEO:  Good, that's a brilliant point.  If this is such a good idea, why doesn't it work with spam?



STEVE:  Yeah.



LEO:  And we know how horrible MAPS and ORBS, all the injustices done by these black hole services that do exactly that and don't work.  And that's also been my position is you can't stop piracy.  Pirates are very nimble.  They move around.  So copy protection and things like SOPA only hamper legitimate honest people.  The pirates are not disadvantaged in the least.



STEVE:  And if we were requiring ISPs to be intercepting attempts to access these blacklisted DNS names...



LEO:  Oh, imagine.



STEVE:  There would be a massive growing list.  The bad guys would jump over to new names.



LEO:  Right, right.



STEVE:  They would get added.  They would jump.  They would get added.  They would jump.  I mean, it's just - it doesn't work.  It can't work.



LEO:  We know this.  We know it now.  My domain was blacklisted by MAPS or ORBS, one of those, for a while.  And it meant a lot of people whose - it's funny because so few ISPs now use these black hole spam fighting techniques that it only affected a few.  But I got emails from people saying "I don't see your email anymore."  And it's because their ISPs did it.  And of course the ISPs back down very quickly because it often ends up doing things like blocking Gmail, which is kind of a big thing to block.  That's the problem with domain-level blocking.



STEVE:  I got a nice mention in Twitter from a Chris Carter whose handle is @parking_god.  I guess he's good at parking.



LEO:  Must be good at it.



STEVE:  And he said the exact quote is, "The 'Net interprets censorship as damage and routes around it."



LEO:  Right.  Exactly



STEVE:  And that was John Gilmore who came up with that great phrase, "The 'Net interprets censorship as damage and routes around it."



LEO:  That's the man who founded Sun and was one of the brilliant original cypherpunks and just a brilliant guy.



STEVE:  And he is an EFF co-founder, too.



LEO:  Co-founder of EFF, yeah.



STEVE:  Yeah.



LEO:  And he's right.  Anyway, we know.  It's just the members of Congress who need a little education.



STEVE:  Well, and, boy, I think they certainly...



LEO:  There may be learning, yeah.



STEVE:  They certainly realize that something happened, and it wasn't good, so...



LEO:  Whoops.



STEVE:  Yeah.  Okay.  So here's our big security news for the week I need everyone to pay attention to.  There was a feature that was added to WPA, WiFi Protected Access, which is our state-of-the-art, very good technology for encrypting wireless links.  This thing is part of what's called the WiFi Simple Configuration, or WSC, Specification.  And this part of it is called WiFi Protected Setup.  All major vendors - Cisco/Linksys, Netgear, D-Link, Belkin, Buffalo, ZyXEL, Technicolor, they all have WPS, this WiFi Protected Setup, certified devices.  And on those devices this is enabled by default.  And this may be something that some of our listeners have encountered because it's based on an 8-bit PIN.  So the idea is you and your device negotiate using this 8-bit PIN.



Now, I am going to cover this in detail in two weeks because this is big news.  We need to understand what the problem is and how it works.  But the short version is, even though this is an 8-bit PIN, the way the protocol functions tells somebody who is guessing whether or not - you're not even going to believe this, Leo.  I know you're sitting on your ball, so I don't have to worry about you...



LEO:  You can't fall over.



STEVE:  You're not going to fall off your chair.



LEO:  It might explode, though, with indignation.  What, what?



STEVE:  This protocol tells an attacker whether or not the first four digits of the 8-bit PIN are correct, separately from the rest.



LEO:  So that makes it really a 4-bit PIN.



STEVE:  Well, what it means is that you can guess the first four...



LEO:  And they'll correct you.



STEVE:  ...separately from the entire eight.



LEO:  And then they'll - and you keep doing it until they say yes, so that's...



STEVE:  Got the first, yes.



LEO:  Yeah, got the first four.



STEVE:  Then, once you get the first four, it turns out that the last digit of the eight is a checksum.



LEO:  Oh, no.



STEVE:  So that's easy.



LEO:  You have the last digit.



STEVE:  So then you just need the middle three.  And so it turns out that within a couple hours it is possible, on a router who's got - a router that has this...



LEO:  WPS.



STEVE:  ...WiFi Protected Setup, WPS, enabled, it's possible to negotiate the 8-bit PIN, or the 8-digit PIN, and get into the router.  So this is a - there's a security paper being presented.  I've got the whole technical readout on it that is a lot more detailed.  I want to do it detailed in two weeks.  But the short-term immediate takeaway is simply disable WiFi Protected Setup on your router.  It's almost certain that listeners to this podcast are using strong passphrases with their WiFi because we know that the way WPA could be compromised is by guessing a short or simple-to-guess passphrase.  I would expect none of our listeners are doing that.  But if they still have WiFi Protected Setup enabled, which it is by default on all routers, then this creates a backdoor independent of them having this enabled.  So...



LEO:  If you've turned off WAN administration, the ability to log into the router from outside the router...



STEVE:  That does not protect you from this.



LEO:  It does not.  Okay.



STEVE:  It's a separate vector.  You want to turn off WiFi Protected Setup, which is on by default in your router.  We're going to come back to this in two weeks, but I didn't want to wait, obviously, because what's happened is the security researcher who found it documents it carefully.  He is not providing code, but he demonstrates it and has metrics for how few hours it takes him to crack different routers.  Some routers do have a lockout where, after a number of mistakes, they won't accept any more.  But those lockouts self-expire, so all that does is slow someone down further.



Anyway, we're going to go over this in detail.  It will be the topic in two weeks.  But in the meantime I wanted our listeners to just log into your router, and you want to turn off WiFi Protected Setup.  Which, again, I'm almost sure no one who listens to this podcast would be using it anyway because they would know, their gut instincts would say, wait a minute, an 8-bit PIN doesn't seem like it's secure enough.  And it's not.  Turns out it's much less secure than we thought.



LEO:  This is the time of year when people go visit family and friends.  And probably most of them have already done so or are there now.  And probably Grandma and Grandpa have - use WPS because it's convenient.  It's a new feature, you push a button, you're secure.  If you used it to configure everything, can you then turn it off and remain safe?  Or do you need to reconfigure?



STEVE:  I don't know that.  I'm going to have to take a look at it and understand it...



LEO:  For next week.



STEVE:  ...much more.  Yeah, I just encountered this, and I wanted to give everyone a heads-up.



LEO:  So if you are visiting Grandma and Grandpa this week, turn it off.



STEVE:  Yeah.  Do them a favor.



LEO:  Yeah.



STEVE:  Increase their security while you're there.



LEO:  Yeah.



STEVE:  Now, for your benefit mostly, Leo, because you missed this last week, I wanted to aim you - take a look at this very cool new concept in CAPTCHAs, which we've talked about and which are very important because you're wanting to basically prove that you're not a bot.  And so the one place I know this is located, and I haven't looked at their source code to figure out where they got it, but it's mpesupportgroup.com, and it's their contact form is protected by an animated CAPTCHA.  And what's so cool and clever about it, and Tom and I discussed this last week, was that no single frame contains the image.  But it's our mind, our brain, that is able to integrate across the animation...



LEO:  So clever.



STEVE:  ...that makes it very easy to read.  I mean, much more - some of these CAPTCHAs, I just say, I don't know what that is.  I mean, I'm definitely not a bot, and I can't type that in correctly.



LEO:  Yeah, no, but this is easy.



STEVE:  Yeah.  Isn't that neat.



LEO:  But we've, of course, pointed out that CAPTCHAs really are kind of dumb because what they - it doesn't matter how hard it is for a computer to read because what the bad guys do is they set up porn sites with the same CAPTCHAs.



STEVE:  Yup.  And they have other people solving them for you.



LEO:  And they have humans solving it at the rate of thousands of CAPTCHAs a second.  And that's all they need to do.



STEVE:  Yeah.



LEO:  So I don't care how good you make that.  If the human can't read it, then it's safe.  But then it's no good.  So there you go.



STEVE:  Yup.  And I got a nice piece of listener feedback about my switch to DigiCert.  You'll also remember that two weeks ago, Leo, there was a bit of a mystery because something seemed to have gone wrong with our SSL after I switched to DigiCert.  And Lil, a.k.a. Dr. Mom, said that her organization had blacklisted GRC.  It turns out they were using the Websense provider and that Websense provides this kind of security where, because my SSL certificate was signed by someone else, that spooked them into flagging GRC as a possible security risk.  Which in fact it wasn't, more so than ever, because I had switched to EV Certs.  Well, the good news is that passed.  Everything's okay again.



But I did get a nice note from a Corbett Bush, who's a network engineer, who just said, "Steve, I just got finished listening to you talk to Leo about your experience with DigiCert.  Well, our SSL certs were due to expire and I knew that I was not going back to Network Solutions.  Last time, it took me weeks to get our wildcard cert from them converted so I could put it onto our two firewalls.  Network Solutions, who we got them from" - that is his SSL certs - "refused to talk to me.  So, when you mentioned DigiCert several months back, I looked into them.  Well, it only took me a few hours to get the new wildcard cert from them and apply it to seven web servers and three firewalls. Thank you for recommending them.  They are great!"  So there's some additional positive experience feedback I just wanted to share to cement it.  I don't intend to become a DigiCert fanboy.  But, boy, I'm really, really pleased with the move I made.



LEO:  Well done, as always, Steve.



STEVE:  And speaking of fanboy, there is a place I am a fanboy.  And that's when it comes to SpinRite.  I got a...



LEO:  It's your own product.  You get to be a fanboy.



STEVE:  In mid-December, December 15th, I got a note from a Bob McKinstry, who sent by way of our sales email contact, he said, "Another SpinRite Testimonial."  He said, "Hey, Steve.  I am a listener of Security Now! since year one, and a SpinRite owner.  A few days ago one of the residents in our training program asked how he could get help with his Dell laptop, as our IT department doesn't support machines they don't own.  The story is classic.  After a power outage, his laptop would not boot into Windows, and it would only blue screen, reboot, and rinse and repeat.  Without hesitation, I told him about SpinRite.  I lent him my trusty SpinRite CD, telling him he would need to purchase SpinRite if it did fix his machine."  Which is only fair, and that's okay.



So he says, "I told him he had to be patient and let the program do its work.  He fired up SpinRite and went to bed.  When he woke up in the morning, he was good to go, just like that.  SpinRite is a great product.  Another drive saved.  Another happy customer.  Thanks for all you do with GRC, and thanks for all the great podcasts that you've done with Leo and the TWiT network.  Bob McKinstry, St. Louis, Missouri."  So thanks very much, Bob.



LEO:  Another happy customer.  Thank you, Bob.  Now, let me just briefly mention Netflix, and then we're going to get a little fun, a little different kind of a show.  We're going to talk a little bit about sci-fi, which I think is great.  Steve has been a sci-fi fan since he was yea high.



STEVE:  Yup.



LEO:  And as have I.  And but this is not my show, so we're going to hear Steve's recommendations.  I've got pen and paper ready.  You should get pen and paper ready because I suspect there's going to be books that we want to listen to or read.  Some people like to actually still read.



STEVE:  [Laughing] We old farts.



LEO:  Yeah.  You know, it's funny, I was having dinner with a bunch of Abby's classmates, and so they're all, you know, 19, 20.  And I was shocked.  They said how much they liked paper books, hardcovers.  One of them is a true geek, a gamer, I mean, really a hardcore computer user.  And he said, no, no, no, I really like having physical books.  Not even Kindle.  Physical books.



STEVE:  And you know, Leo, one thing occurred to me is you can keep reading them during takeoff and landing.



LEO:  Yeah.  There's another story there.  Our friend Nick Bilton, who writes for The New York Times, has been doing some research.  He took a Kindle to a lab where they test electronic emissions.  And they tested the Kindle, and I can't remember the number, but it was .0002 volts, something, you know, 2 microvolts of emissions.  Which is so low.



STEVE:  Yeah.



LEO:  It's lower, I mean, it's basically zip.  And which we know because the Kindle doesn't even, except when you're turning pages, it isn't really doing anything.



STEVE:  Correct.



LEO:  But even turning pages, .000002 volts.  So, and then the response of somebody, I don't know, the FAA was, well, yeah, but if you have a hundred of them - at which point Bill Ruck, who's an old friend of mine and a former radio chief engineer and RF expert, Nick called on him, and Ruck pointed out, as you know, and everybody who has any electronics background knows, that it's not a multiplier.  A hundred Kindles isn't a hundred times 2 microvolts.



STEVE:  It would not be a coherent signal all summing together.



LEO:  And in fact - and of course remember, American Airlines now allows iPads in the cockpit for pilots.  And so they're saying, well, yeah, but they only have two.  What if everybody in the cabin had one?  No.  It doesn't work that way.  So Nick is fighting a ridiculously hopeless quixotic battle.



STEVE:  Oh, but good.  I'm glad somebody is.



LEO:  Yeah.



STEVE:  I'm all for him.  Go Nick. 



LEO:  But, you know, it's not going to happen because...



STEVE:  Well, because they don't have to say yes.



LEO:  Don't have to.  They just say, no, we're the FAA.  Don't ask us.  We just tell you.  Anyway...



STEVE:  But I'd like to find out what emissions a pacemaker puts out.  That'd be good.



LEO:  Well, that's the problem.  And actually Nick in his article says electric shavers are legal.  And they put out a huge amount of interference.  As anybody who's ever stood by a radio shaving knows.



STEVE:  Right.  Yeah, you can't hear the radio.



LEO:  [Mimicking electric razor]  So, what?  So I can shave during takeoff, but I can't read my Kindle.  Please.  There's no point.  Every time we talk about this I get email, as you will, I'm sure, from pilots saying, well, they [indiscernible].  Well, uh, we're, uh, not, uh....  So what - you know, you're the pilot.  You get to say.  You can marry people in the plane, as well.  Whatever, you're the boss.  I don't want the plane to go down because somebody's reading a Kindle.  I understand that.  But at the same time it seems highly unlikely.  And now it's time to go sci-fi with Steve Gibson.



STEVE:  Okay.  So I wanted to mention just a couple movies that I have referred to in the past.  Probably, I mean, there have been so many good sci-fi movies.  But in terms of classics, I think one of my absolute all-time favorites is a movie called "This Island Earth."



LEO:  Oh, I haven't seen it.



STEVE:  Oh, Leo, you have - I'm sure you've seen it.  Yes.



LEO:  I've seen it.  I just don't remember it.



STEVE:  Yeah.  What I love about it, and I referred to it once when we were talking about the Ultracap mega capacitor technology, because the beginning of the movie there's sort of an IQ test for an engineer who figures prominently in the film.  Oh, wait a minute, I'm confusing...



LEO:  It's 1954.



STEVE:  There's "This Island Earth" and...



LEO:  It says, "When an alien in distress recruits American scientists Ruth and Cal to help him with an intergalactic battle against the evil Zagons, the earthlings find themselves falling in love."



STEVE:  Yup, that's the one.



LEO:  "And trapped in outer space."



STEVE:  And that's where the interocitor comes in because he orders a replacement capacitor of some, like, many farads.



LEO:  I think I have seen this.



STEVE:  And it comes, and it's this little tiny bead.  And they're, like, well...



LEO:  It's a supercapacitor.



STEVE:  ...this can't possibly be a multi-farad, 10,000v capacitor.  So his assistant says, "I tested one, and it is."  And so Cal Meacham, who is this scientist, says, "No, no, no."  So he sticks it on his meter and runs the voltage up, and sure enough, it gets kind of red hot.  But it is doing what it's supposed to before it blows out.  So he then - there's, like, this catalog for interocitor parts.  And he says, "What's an interocitor?"  And so they say, "Well, it doesn't say, but here's how you build one."  So he says, "Okay, order all the parts, I'm going to build one."  And so he puts this thing together, and that puts him in touch with the aliens.  Anyway, "This Island Earth" is just a great movie.  If it doesn't ring any bell, then by all means.  And I'm trying to think of the other one.



LEO:  By the way, I've got to point this out.  Mystery Science Theater 3000, 2000, you know them; right?  MST3K?



STEVE:  Oh, it would have been a goldmine.



LEO:  They have done it.  They did it as a feature film.  It's their only feature film.  So you can probably get it on YouTube or Netflix.  There is a clip on YouTube which somebody has just sent me, called "Unpacking the interocitor."  So if you're an MST3K fan, and who isn't, you can watch Joel and company dissect the interocitor.  What fun.



STEVE:  Okay.  The other must-see is "Forbidden Planet."  This is the one where...



LEO:  Oh, classic, Robby the Robot.



STEVE:  Robby the Robot and the Krell and Morbius.  And the good news is the word is James Cameron is going to remake it.



LEO:  Oh, now, see, that would be awesome.  In 3D, probably, right, yeah.



STEVE:  Oh, Leo.  Oh.  Or 4 or 5.  I don't care how many D.



LEO:  5D.



STEVE:  Oh, my goodness.  That - anyway, if our listeners, again, if somehow they missed "This Island Earth" or they missed "Forbidden Planet" - in fact, "Forbidden Planet" just had its 50th anniversary, like, a couple years ago, because I purchased the 50th anniversary special tin box with a Robby the Robot in it and other stuff.  Anyway,  that's probably my No. 1 favorite sci-fi movie of all time.



LEO:  It is on YouTube.  So I'm guessing it's probably - "This Island Earth" is.  It's probably public domain, and that's I'm sure why Mystery Science Theater 3000 could do it.  So you don't even have to get this on Netflix, but you can if you want the highest quality.  But you could watch it on vintage video on Meveo [ph].



STEVE:  Then of course we have "The Day the World..."  Or is it, wait, "The Day the World Stood Still"?



LEO:  Earth.  Classic.



STEVE:  "The Day the Earth...."  I wrote "world," but I know it's "Earth," yes.  The original one...



LEO:  "Klaatu Barada Nikto."  That's right, they did remake that one.  I never saw the remake.  I didn't want to.



STEVE:  Yeah, I did, and it wasn't - I'll see anything if it's got sci-fi, like in it.  It's like, okay, I've got to see that.  So, but, again, yeah, "The Day the Earth Stood Still," another just fantastic piece of work, which I've seen, well, I've seen them all, all of these things multiple times because it's not just about how it comes out at the end, it's the just great filmmaking.



LEO:  Well...



STEVE:  And for what it's worth, Kurt Russell's version of "The Thing" was another just fantastic piece of science fiction, so...



LEO:  This is one - when you get to movies, this is when our chatroom goes crazy and has many, many suggestions, as do I.  I can think of a lot of great science fiction movies.  That's the kind of - you've got to include "The Matrix," maybe one of the best of all time.



STEVE:  Oh, again, yes.



LEO:  "Blade Runner."  "2001."



STEVE:  "Space Odyssey," right.



LEO:  I mean, there are some classic, classic movies.  And I guess we'd have to put...



STEVE:  And "Pi" is another great, sort of a wacky movie, but also very good.



LEO:  "Pi" is good, yeah, I like - that's more recent.  And people are going to yell at us.  You can't leave out "Star Wars."



STEVE:  Yeah, I know.



LEO:  Or "Star Trek."  I personally would leave "Star Wars" out.  You know, I was in the theater yesterday, and they're going to re-release Episode 1 in 3D?  And just the thought of Jar Jar Binks in 3D is just, I'm sorry, it's terrifying.  I can't handle it.



STEVE:  Yeah, yeah.  Okay.  So for the sake of people who have not been reading sci-fi as long as I have, I mean, I know that we have a great younger listenership.  Arguably one of the past masters of science fiction, the name will probably be - will be well-known to everyone, Isaac Asimov.  Isaac is credited with, and did, invent the so-called "Three Laws of Robotics."  The first law is, "A robot may not injure a human being or, through inaction, allow a human being to come to harm."  The second law is, "A robot must obey the orders given to it by human beings except where such orders would conflict with the First Law."  And the third law of robotics is, "A robot must protect its own existence as long as such protection does not conflict with the first or second laws."



So he carefully thought out, if you imagine a future where you actually have powerful machines which could hurt people, how would you integrate those into society?  What, like, fundamental, like, hard-wiring would you put in their brains, in their positronic brains, which is what Asimov had, that made them safe?  And so these three laws is what he came up with.  Well, there's a series of novels which are just fantastic.  They're called - they're Isaac Asimov's robot novels.  They're mysteries, so that they're not just sci-fi.  I mean, they are science fiction, but they are really - they're literature.  They're really well-written mystery novels featuring a human detective, Elijah Baley, and his robot sidekick whose name is R. Daneel Olivaw.  So the four books are, the first one is "The Caves of Steel," then "The Naked Sun," "The Robots of Dawn," and "Robots and Empire."



LEO:  Now, I think when you say "the robotic rules," people think "I Robot," which was a short story.



STEVE:  Yes, yeah.



LEO:  Was that the first?  Was that the first mention of the laws?  I think it might have been.



STEVE:  In fact, there's "I Robot," and then I think that was packaged in a book of short stories...



LEO:  Right, right.



STEVE:  ...that were lots of different things.  And I think you're right.  I think that the rules appeared in one of those stories.



LEO:  And then he explored, for I think maybe another 20 years, I don't know how long it took him to write these four robot books, but he explored the implications of all of that.



STEVE:  Yeah, in fact, that's - one of my very favorite mechanisms for science fiction is where what happens is not just arbitrary, but where some set of clear limitations are imposed, and then the story is written against those.  And so exactly as you said, Leo, these three rules are used intrinsically in the fiction which Asimov created.  And because he was a great writer and also a scientist, and produced just some really compelling books, they're science fiction in their settings and in what they do and how they do it, but just I can't recommend them highly enough.  So...



LEO:  And we should mention there are other Isaac Asimov books that anybody who wants to be well-versed in science fiction has to read all of them.  But the Foundation Trilogy is brilliant.  What would you recommend?  I'm going to ask you this each time, by the way, so prepare yourself.  Let's assume nobody's read any of these.  Like my kids.  You know, it's funny, I gave my son two books for Christmas, saying these are the must - these are, in my opinion, the two must-read science fiction books to get you started.  One was Heinlein's, I want to - it's not "The Moon Is Harsh Mistress," the other one.  And anyway...



STEVE:  "A Stranger in a Strange Land."



LEO:  "Stranger in a Strange Land."  And, now, and I wanted to get him into modern sci-fi, so I gave him William Gibson's "Neuromancer."  And I thought those two will get you started.  But, now, if you were like my son, now, my son's - what would be the first Asimov book you'd read?  "Childhood's End"?



STEVE:  Boy.  Uh, boy.  That's tough.



LEO:  That is tough.



STEVE:  I mean, "The Caves of Steel"...



LEO:  Oh, that's Arthur C. Clarke.  I wouldn't say that.  "Caves of Steel," yeah.



STEVE:  "The Caves of Steel" is so good.  And for me, I mean, and we know that, I mean, we're going to see a bias in the next half-hour as I go through this because I like investing in something and then having that investment pay off.



LEO:  We know that about you.  You're an in-depth kind of guy.  Deep, not shallow.



STEVE:  And so, much as I invested in learning JavaScript this year, and look what happened.  We got all kinds of cool JavaScript things.  We got...



LEO:  And we should also mention that you are a hard sci-fi lover.  I think we should probably say that right upfront, that...



STEVE:  Very good point.



LEO:  You don't like fantasy, swords.  You don't like...



STEVE:  I don't know why unicorns are in the same aisle.



LEO:  So this, everything you're going to get here today, and I'm with you, by the way, is hard sci-fi.  And by that we mean real science, lots of it.



STEVE:  Yes. 



LEO:  It could be made-up science, like that supercapacitor, although it turns out that maybe that's not so made-up nowadays.



STEVE:  Not so much, yeah.



LEO:  But, and I think that there's a reason why hard-science sci-fi is important.  I think almost every scientist I've ever talked to, and I ask them this frequently, says that they were influenced in the kinds of research they did by sci-fi, particularly by hard sci-fi.  And so in a way it's inventing the future.



STEVE:  Well, and we've seen how often we - scientists, I mean, science fiction authors are predicting where we're headed.



LEO:  Right.  It'd be my position they're not predicting, they're leading.



STEVE:  Yeah.



LEO:  That the scientists of tomorrow are reading sci-fi today and getting inspired to build - the one exception is flying cars.  Everything else they're trying to build.  And maybe, who knows, maybe they're trying to build flying cars, too.



STEVE:  Yeah.  And Leo, you know, given the trouble we have with malware and viruses and things, I'm no longer a big fan of flying cars.



LEO:  No, I'm with - yeah, maybe that's why.



STEVE:  I just think it would be a flying disaster.



LEO:  Flying disaster.  Anyway, I didn't mean - sorry for the digression.  But I did want to qualify what you're going to hear today.



STEVE:  No.  And I think, for you and me, discussing this is a lot of the value that we have for our listeners.  So by all means.  One of my other favorite older school books, though not as old as Asimov, and we've talked about this before, is Larry Niven's book titled "Protector."



LEO:  Yeah.  That's a wonderful book.



STEVE:  Oh, gosh.  And one of the things I also like about these books, and Asimov's robot novels have it, and "Protector" does, and so does one that Niven co-wrote with Jerry Pournelle, which is "The Mote in God's Eye," another great one, is I love it when I'm surprised.  I love it when the author - and sure, this is contrived.  But that's their right.  And as the reader, I'm looking for something fun and that I didn't expect, instead of just sort of documentary.  I don't want that.  I mean, that's okay, but I'd rather have, like, something that I didn't expect.



And "Protector" is one of the best examples of that, where you're going along, and the story is interesting.  You're engrossed and engaged.  But you didn't expect what's coming.  And, bang, it hits you.  And suddenly everything changes.  I mean, it fits together.  But it's like you're turned upside down in what you were - in the model that you were building in your mind when some additional facts come together.  And it's a great story.  Not super long.  So it won't tie you up forever.  But I really do recommend it.  If you haven't read Larry Niven's "Protector," it's really good, and I've read it a couple times



LEO:  Another footnote.  First of all, don't worry about spoilers because Steve is not going to give you spoilers.  I can guarantee you.



STEVE:  I never do, yup.



LEO:  He's really good about that.  So people in the chatroom saying, "Oh, I'm covering my ears."  Don't worry, he won't.



STEVE:  Nope, unh-unh.



LEO:  But I will say this about "Protector," which I love, and I love Larry Niven.  It is old sci-fi.  And sometimes when you read older sci-fi, it feels a little dated.  "Protector" and all of Heinlein's books, for instance, Heinlein's books are really sexist.  "Protector," it just feels like it was written in the '50s.  And so it's important to read these books, I think.  But don't be put off by the - remember that it was written 30 or 40 years ago.  So I think "Protector" is one of the best books.  But I also think you must read "Ringworld."



STEVE:  Yeah, good point.  "Ringworld" is classic, classic sci-fi.



LEO:  And "Ringworld" is an example of what you were talking about, which is start with a premise.  I think all the best sci-fi does this.  Then explore, then expand based on the premise.  And "Ringworld" is a perfect example of that.  What if aliens built a Ringworld?  And I'll leave it at that.  What would happen?  And then I think what happens with Larry and other great authors is they just go.  They say, that's the starting line.  Go.



STEVE:  Yup.  Yup.



LEO:  So I would throw in "Ringworld" as another great recommendation.



STEVE:  And also "The Mote in God's Eye" is another - it's a collaboration of Larry Niven and Jerry Pournelle, Jerry whom you've had on...



LEO:  Also feels dated, by the way.  So just remember that when you read these.  Remember, you're reading the classics.



STEVE:  Yup.  And speaking of classics, there is a series that I really liked also when I was - I almost ought to re-read one to see how I feel about it now.  But they are the Berserker novels by Fred Saberhagen.  They're novels and short stories.  Okay.  The one thing that I think of that's more contemporary was one of the original Star Trek episodes, the Kirk and Spock and McCoy Star Trek, the first iteration of Star Trek.  It was an episode that was titled "The Doomsday Machine."



LEO:  Oh, yeah, yeah, yeah, yeah.



STEVE:  And it was this long cone-shaped thing that was going around killing stuff.  And it was a berserker.  Anyway, the point is that the mythology behind these berserkers is that no one really knows where they came from.  It's posited that ancient alien races built them to automate their war against each other, and that presumably the alien, the biological aliens got wiped out; but the machines, being machines, and also being sentient to different degrees and able to repair themselves, they kept on.  So, and the bad news is, maybe their programming got altered by a cosmic ray that zapped and flipped a bit or something.  Who knows?  But what we have in these novels are very competent killing machines.



And what I remember of them - and, I mean, I loved them a lot - was, again, really well-written, really clever, really interesting stories set in this future where biological life, us, we humans, are out in space and encountering these machines that for no reason whatsoever want to kill us because that's the way they're programmed.  And some of them are old and decrepit.  Some of them are new.  I mean, they're just - there's a huge spectrum of treatments of just from this basic kernel of a concept, a machine designed to kill biological life.  All these amazing stories come from it.  So again, if it's something that you've missed...



LEO:  Peter F. Hamilton used that premise for "Pandora's Star"; right?  In a way?



STEVE:  Actually, yeah, a different one.  There it was that not all life has to be like ours.



LEO:  Right, right.



STEVE:  That it would be possible - he gave us a compelling back story for how mechanical life could actually evolve.



LEO:  And have no regard for biological life.



STEVE:  Absolutely just that's in the way, yeah, those stinky biological life forms.  Yeah.



LEO:  Anyway, but - so I haven't, it's funny, I have not read these Fred Saberhagen novels.



STEVE:  Oh, Leo.  I don't, I mean, they're old.  I don't know if they would have been Audible-ized.



LEO:  They are.  I'm looking at them.  They're all on Audible.



STEVE:  Oooh.



LEO:  By the way, I'm showing - another footnote for those watching on video.  I will from time to time show the titles that Steve's mentioning on Audible.com.  So far, all of them.  Except for, unaccountably, the fourth robot novel.  They've only done three of the four.  And I think that that's probably because they're doing - we should mention Audible, long-time sponsor of this show and all of the TWiT network, has a science fiction branch called Frontiers, where they're re-recording, or recording for the first time in many cases, the audio books of the classics.  So my suspicion is, because they would have, you know, nobody - when these came out, I mean, nobody, I don't know who it was, Tor, whoever published the Berserkers in the first place, thought that anyone would want audio versions.  So they didn't have the money, and they didn't do it.



So Audible, because they are sci-fi fans, and I know this for a fact, when I first started with Audible in 2000, there were very few sci-fi novels because nobody recorded these.  They built nine studios in their Newark offices, and they've been recording like madmen ever since.  And now there are thousands of titles, including all of these Berserkers, on audio, modern recordings of them.  Which I think is fantastic.



STEVE:  Well, I mean, there are so many books which I can assert are really good.  So, I mean...



LEO:  I know.



STEVE:  ...our listeners have their homework cut out for them.



LEO:  The other thing I would say before you go on is that - and thanks to Strength [ph] in the chatroom for pointing this out.  Of course most of these are also available on Kindle.  And if you're an Amazon Prime member, they've made many of the classic sci-fis available for free to Prime members.  So if you go to Kindle eBooks and Science Fiction, there's 21,000+ results there.  But many of them are free to Prime members.  So if you've been thinking, oh, you know, I don't know if I want to spend millions of dollars on all of these things that Steve is recommending, lots of them are available for Kindle for free, which is really...



STEVE:  So I can, without reservation, I can say try one of the Berserker novels, the Fred Saberhagen, and see if they hook you because, oh, I mean, I still have mental imagery from some.  And it's been - it's been 30 or 40 years since I - I don't know.



LEO:  Oh, I should try these.



STEVE:  Maybe not 40.



LEO:  I'm willing to try these.  And they - "Berserkers:  The Beginning" is available both on Audible and in paperback on Amazon.  It is not on the Kindle.  Which is so...



STEVE:  I'm not surprised.  I mean, do you have a date?



LEO:  It says 1998, but that's not right.



STEVE:  No, no, no, no, no.



LEO:  No, no, no.  That's when this paperback was published.  I don't know what the original date is.  I'm sure the chatroom will provide this momentarily for me.  I think it's odd that there's no Kindle version of that.



STEVE:  There is a whole Wikipedia page on the Berserker novels.



LEO:  Well, good.  I haven't read any of these.  I'm adding them to my list.



STEVE:  They really are, they're just - it's just, again, people will know what I mean more maybe when they encounter it.  But it's - they're just such clever stories around the concept.  And there's something, you know what I mean, that's - I guess it's one of the hooks that Peter Hamilton used with "Pandora's Star" because these are machines that have no remorse, no conscience, no - don't care about us at all.



LEO:  And why should they?  I mean, we assume that aliens would be like us.  But no, of course not. They don't have to be.



STEVE:  Yeah.  So they're as alien as you could want anything to be.  And so it just - it creates an emotional power that there's this machine that just doesn't want to leave you alone.  It's pissed off that you exist.  So, like, huh, hey.



LEO:  Yeah, and actually in the Hamilton it's not even pissed off.  It's just, you know, it doesn't have even any...



STEVE:  Nope, no conscience.



LEO:  No feeling.



STEVE:  No ethics, no morality.  It's just...



LEO:  We want that.  We're going to take it.  Sorry.  Bye.  Not even sorry.  See ya.  1963.  Let's see.  The first Berserker was written in '65, I think.



STEVE:  Wow, okay.  So...



LEO:  So that's how old those are, yeah.



STEVE:  I was 10 years old.



LEO:  But he continued to write them for 20 years or more.



STEVE:  They're so good, Leo.  They're so good.  So again, I wanted to go back in time a little bit to help our listeners flesh out some of this background, some of the classic stuff, which is just spectacular.



LEO:  Okay.  Before you move on from classics, though, can I throw in a couple?



STEVE:  Please.



LEO:  I mentioned Heinlein already.  You've got to read Heinlein.  "Stranger in a Strange Land" is considered by many the greatest sci-fi of all time.  I think it's dated now, but I think you've got to read it.  We didn't mention Philip K. Dick.  I don't know how you feel about him.



STEVE:  Well, I think Philip K. Dick is a spectacular author.  And he did many short stories which have been turned into movies.  I mean, that's the...



LEO:  Right.  We don't really have to tell people, yeah, we don't have to tell people about him anymore because he's being discovered by Hollywood.



STEVE:  Right.  You know, the movie "Screamers" was also based on a Philip K. Dick short story.



LEO:  Oh, so many.  "Minority Report," I mean, I can go on and on and on.  "Blade Runner" is based on, was it "Do Androids Dream of Electric Sheep?"



STEVE:  Sheep, yup.



LEO:  That's a must read.  This just in from JammerB, who is apparently also a sci-fi-crazed fellow, as we all are, he mentions "The Three Stigmata of Palmer Eldritch."  That's a short story.  Most of Dick's stuff is short stories.  There's one he wrote, and I can't remember the name of it, where advertising is everywhere.  "Eldritch" is a novel?  Okay.  That's a classic.  And "The Man in the High Castle"?  Which is maybe not your cup of tea, Steve, because it's a revisionist history novel.  He was - Philip K. Dick was a big idea guy.



STEVE:  Right.



LEO:  That's why movies love him.  And again, not hard sci-fi, so maybe doesn't belong on your list.  But I agree with JammerB.  We've got to include "Dune."



STEVE:  Oh, yeah.



LEO:  But that's not hard sci-fi by any means.  That's a fantasy novel.  So we'll leave that out.



STEVE:  Yeah.  But, you know...



LEO:  But good.



STEVE:  Good sci-fi, yeah.



LEO:  Okay.  Just wanted another footnote, sorry.  And I'm sure we're leaving stuff out, so.



STEVE:  Okay.  So a huge author that we've talked about often, huge in many senses, not physically large, but the novels that he produces, Peter F. Hamilton.



LEO:  Love him.  He's a modern guy.  I think he's one of the giants of modern sci-fi, hard sci-fi.



STEVE:  I think so.  And, boy, he started in the mid-'90s with a psychic detective who was named Greg Mandel.  And the books are, or were, out of print.  I remember hearing someone say that they were coming back.  In fact, I remember hearing myself say it because I ran across it being said or being written somewhere.  But he's got "Mindstar Rising," "A Quantum Murder," and "The Nano Flower," which is - that was my introduction to Peter Hamilton back then, back in the mid-'90s when this was beginning to happen, that is, when he was beginning to happen.  Then, of course, he did the Night's Dawn Trilogy, which people went nuts over.  It's huge epic space opera, 1.2 million words in the books.  They are huge, three huge hardbacks, or they're broken down into six large paperbacks.  It lost me a little bit, Leo, because it slipped away from hard sci-fi.  I mean, when you've got dead people coming back, it's like, uh, okay...



LEO:  Yeah, I agree.  Al Capone killed that novel for me.



STEVE:  Yeah, exactly.  Yeah, he spent a little too much time on that stuff.  And it's like, okay.  I loved the sci-fi portions of it.  And there are some great characters in there.  But it was like, eh, okay, it's nothing I would read again.



LEO:  I agree.  And very long.  He likes to write.



STEVE:  Oh, yes.



LEO:  Which is why we recommend "Fallen Dragon" as the starting point.



STEVE:  I was just going to say that, exactly that.  If someone wants a beautiful introduction to Peter Hamilton, I've read "Fallen Dragon" I think three times now.  Just, again, I'm that way.  Even though I know what the story is, if a writer really does a beautiful job of painting imagery for me, it's like, oh, I'm ready to read that again.  So, I mean, for the experience.  So "Fallen Dragon," absolutely.  And then "Pandora's Star," which is the first of two.  And the sequel, the finishing of that story that we mentioned of a mechanistic thing which creates itself on a planet and then hampers us, is "Judas Unchained."  So "Pandora's Star" and "Judas Unchained."



LEO:  Both Steve and I had the great misfortune of reading "Pandora's Star" before Hamilton had finished "Judas Unchained."



STEVE:  I knew you were going to say that, Leo.



LEO:  And we were left hanging.



STEVE:  It's like, aagh.



LEO:  No.  It is...



STEVE:  What happened?



LEO:  So, yeah, read "Fallen Dragon."  If you like that, then "Pandora's Star."  And then leave - I think you could actually ignore "The Dreaming Void" entirely.



STEVE:  The whole Void Trilogy?



LEO:  Yeah.  I don't think it's bad.  I think he's a brilliant - unlike many of these guys, he's actually, I think, a very accomplished writer in the craft of fiction.



STEVE:  Yes.



LEO:  Sci-fi does not always, is not always well written in that sense.  Characters are sometimes - Heinlein's a good example.  Characters are paper thin.  But you read him for the ideas, for the inspiration, for the excitement, for the plot.  Hamilton you can read for the characters, for the descriptions.  It's beautiful stuff.



STEVE:  Oh, and "Pandora's Star" is, well, "Pandora's Star" and "Judas Unchained," they create what is known as "The Commonwealth," where this is the far future, where you've got regeneration, people's consciousness living on for hundreds and in fact thousands of years, fantastic characterizations that he does.  But again, long.  And although I really thought "Pandora's Star" was really very good.



LEO:  Well worth it, yeah.  I'd just say stick with those two.  I mean, that's three books.  It's going to keep you going for a while.



STEVE:  Oh, goodness, yes.  Because he does a - he doesn't write anything short.



LEO:  Right.  Well, "Fallen Dragon" is one - and by the way, unfortunately, not on Audible.  Which I'm sure they're going to record it because they have all of the Void Trilogy and "Pandora's Star" and "Judas Unchained."



STEVE:  Yeah, they're probably just working to...



LEO:  Getting there.



STEVE:  ...catch up.



LEO:  Working up to it.



STEVE:  So another very different author, but one of my favorites, who I have mentioned many times, is Michael McCollum.  He is actually a rocket scientist.  He designed a pump that's on the International Space Station.  He replaced some of the problems at Chernobyl.  And he's an aerospace engineer.  Despite that fact, he's also a great storyteller.  And he has a website, scifi-az.com.  And I know from our correspondence, because in fact I edited the last of his Gibraltar Series books because I'm a very slow and careful and methodical reader.



And what I was doing was, as I was reading previous books of his in e-format, I would just mark up - I think it's when I was using, I was reading on the Palm Pilot, of all things, or one of the Palm - the T3, I think it was.  It was very easy to just make a highlight and save it into a file.  So I would send him my file of little typos that I would find.  And so he finally said, okay, I give up, I'm going to let you read these...



LEO:  Edit these.



STEVE:  Yeah, edit these.  So, okay.  So he's got a couple multibook series which are also at the top of my list.  I would not call them literature in the sense that Hamilton almost qualifies as a literary creator.  But, oh, my goodness, they are fun.  It's absolute hard sci-fi, tons of new ideas.  And so there's something called the Antares Series, which are three books:  "Antares Dawn," "Antares Passage," and "Antares Victory."  And from his own site I just snipped this so I could share, to give you a sense for the introduction.  He says - and this is, again, not a spoiler.  This is his little brief sort of intro to the book.



He said, "When the supergiant star Antares exploded in the year 2512, the human colony on Alta found their pathway to the stars gone, isolating them from the rest of human space for more than a century.  Then one day a powerful warship materialized in the system without warning.  Alarmed by the sudden appearance of such a behemoth, the commanders of the Altan Space Navy dispatched one of their most powerful ships to investigate.  What the ASNS Discovery finds when they finally catch the intruder is a battered hulk manned by a dead crew.  That is disturbing news for the Altans, for the dead battleship was so powerful that it could easily have defeated the entire Altan Navy.  If it could find Alta, then so could whoever it was that beat it.  Something would have to be done."



So what Michael creates here is an interstellar travel technology that is based on gravity wells created by stars.  So when this Antares star exploded, the mapping that they had done or the throughways through hyperspace that were all about gravity wells of stars, the loss of this star scrambled all of their mapping, and they were stranded.  And something else happened at some point that recreated some throughways.  And anyway, it's just, again, it is really good storytelling.  And a little bit of romance.  He always throws some in, which is kind of fun, on the human interest side.  But just lots of great story in there.



And so there's that trilogy, the "Antares Dawn," "Antares Passage," and "Antares Victory," I recommend without question.  And I've also mentioned and recommended because it was happening with us during this podcast, the Gibraltar Series that Michael created, "Gibraltar Earth," "Gibraltar Sun," and "Gibraltar Stars."  There he posits a really interesting situation where, by mistake, we discover that we're not alone.  At the point where the books begin, we're beginning to colonize.  Our radio bubble is expanding at lightspeed, which of course is the term for the electromagnetic energy that the earth has been producing ever since "I Love Lucy" was being beamed out on television and so forth.  So that's expanding.  We suddenly discover that, by some coincidence, we have not come to the attention of an incredibly powerful but also incredibly xenophobic race, which wouldn't be happy at all to know that we're here in its backyard.  And so this isn't a concept I had seen before.  And what Michael does with it is just fabulous.



So again, that's the Gibraltar Series.  And then he has a number of standalone novels:  "The Sails of Tau Ceti," a book called "Life Probe," and "Procyon's Promise."  So anyway, I've never read anything he's done that has disappointed me.  Also they're available in every conceivable eBook format.  He is selling them on Amazon, so you can get them for the Kindle.  He is selling them on his own website.  And they are not copy-protected, which, I mean, here's someone who more than anyone I can suggest is owed the money that you would pay for his books.  But it's nice to know that you can buy them once, get them in every format, stick them somewhere safe on a thumb drive, and they are future proof because these, if you're a person like me who likes to re-read things, I just can't - I can't recommend them enough.  It's, again, great sci-fi.



LEO:  Highly agree.



STEVE:  Now, the Lost Fleet Series by Jack Campbell.  I've mentioned these because I read them during the podcast's life.  And they are also really good.  And I know from the feedback I've received from our listeners who have followed the recommendations, they've loved them.  They're another really interesting concept.  Here, in the future, humanity has been sort of split into two halves that are at war.  And by a fluke, the life pod - and this is not giving anything away.  You get this in the first few pages of the first book.  The life pod containing an old warrior is found.



And this Captain John Geary is resuscitated, near death but brought back to life.  And it turns out that, by a fluke, he ends up in, well, he's the most senior officer they have because he received his commission hundreds of years before, and they go by the date of commission.  So he uses that in order to get command at a time that's necessary.  What's wonderful about these, and people with a really good memory will remember this because I've mentioned this before, is we're dealing with huge fleet engagements where he's configuring the physical layout of fleets which are meeting each other in space battles.  All of these writers are careful to impose very clearly explained limits on their technology.  So, for example, Michael McCollum is faithful to speed of light problems and comes up with drive technology which coherently fits the story really well.



Jack Campbell does the same thing.  I remember, as I was reading these, really getting an appreciation for how daunting it is to operate in planetary-size space if you don't have just faster-than-light technology at your fingers.  But you've got to spend all this time accelerating your ships and then turning them around and decelerating them.  But anyway, he's got a series called the Lost Fleet Series:  Dauntless, Fearless, Courageous, Valiant, Relentless, and Victorious, which are just - they're really nice reads.  Not super long, but really great.  And he's started now another series of two.  "Dreadnaught" follows on from that, and then "Invincible" is another one which will be coming later this year.  So those two will be following the original Lost Fleet Series.  And they're just spectacular.



So the last author that I've mentioned before, I'm a little hesitant because the fifth book is not finished.  The author is Graham Sharp Paul, who creates a character named Michael Helfort.  And the series is Helfort's War.  We are introduced to Michael as he's graduating from the equivalent of Star Fleet, from whatever Star Academy this is.  And I assumed that the series was finished, but it's not.  I thought that Book 4 was the end, but we only got sort of half of Book 4, and I'm still waiting for 5.  So it might be something that you'll want to wait for until you hear from me that we're finished.  But I really did enjoy the books.  They were also really good.



And I will finish with where I currently am.  I've mentioned these a couple times.  I'm now in Book 10 of the Honor Harrington Series by David Weber.  He has something collectively known as the "Honorverse," which is his very large science fiction future humanity, which is really good.  However, I have to say that they're maybe a little too political.  I like politics.  And even someone who likes politics is thinking, okay, come on, let's get on with this.  We're spending a little too much time here.  I want a little more space battle and action.



The beginning of them, up through Book 7, I thought was really good.  I mean, and I remember telling people, I mean, I was choked up reading these books in several places.  They're just very powerful, and I'm a sucker for duty and honor and sort of the whole military ethics stuff, which these are steeped in.  But in going for 12 books, which is what the whole series encompasses, we end up - he broadens them out, creating a world that is very complex.  And in order to keep everything knit together, he gets into a lot of detail.  And my sense is they're accurate inasmuch as, yes, all of the things he's talking about had to happen and have to happen.  But, oh, it's just - it's a little - by Book 10, it's like, okay, it's seeming a little long.



So it is not the case that anything is unfinished, whereas some of the these you really - for example, the Lost Fleet Series, you need to get through the end of the sixth book in order to get the end of it.  With the Honor Harrington Series, you would be fine if you went for half of them and just said, okay, I've had enough.  I mean, and I'm really glad I'm reading them.  But they fall a little bit short of my enthusiastic recommendation without any equivocation at all because it is dragging a little bit at this point, by Book No. 10.  But for everything else, wow.  I just - I recommend everything wholeheartedly.



LEO:  All right.  The chatroom's loving this.  One of the reasons I know this is a great subject is because it stimulates conversation.  Everybody has their favorite; right?  And so people are throwing in their favorites.  I'm going to throw in a couple.



STEVE:  Good.



LEO:  First of all, one that I've not read, but JammerB has been saying, if Steve likes big, which we know Steve does, he says, you've got to read - and I think one of the reasons you haven't is because it's not available electronically - the Tad Williams Otherland Series.  And I haven't read these either, but I see them in the bookstore all the time.  If you browse sci-fi, you can't miss them because they occupy so much shelf space.  But he says they're great.  But not Kindle and not Audible.  So that for me is a disadvantage.



STEVE:  So it's called "Otherland."



LEO:  "Otherland" by Tad Williams.  He says it's a big series.  And he takes off on the Metaverse concept.  And if we're going to say "Metaverse," I've mentioned already William Gibson's "Neuromancer."  You've got to mention Neal Stephenson and "Snow Crash."



STEVE:  Yeah.



LEO:  One of the great - Neal has a problem with finishing books.  So sometimes - and this is not unusual in all kinds of authorship.  But the big books, sometimes they trail off at the end, and Neal's notorious for that.  "Snow Crash," a good example.  But the first chapter of "Snow Crash," if you read nothing else, if you haven't read the first - go to the bookstore, just pick it up and read the first chapter and put it back.  You've got to read that.  Especially if you're - you've just got to read it.  And you probably will continue.



STEVE:  If you're able to put it back, then it's just as well.



LEO:  Exactly.  Then it's not good.



STEVE:  But you probably won't be able to.



LEO:  When we were talking classics, I briefly accidentally mentioned "Childhood's End" by Arthur C. Clarke.  But you've got to read Arthur C. Clarke.  "Childhood's End" is in a category of sci fiction that I love, which is not - it's hard science, twist ending.  And I love the big twists.  And as long as we're mentioning big twists, "Childhood's End" is one.  I don't think it spoils it to say that there's a surprise.



STEVE:  No.



LEO:  The other is Orson Scott Card's "Ender's Game."



STEVE:  Oh, "Ender's Game," yup.



LEO:  Wonderful book.  There's a whole series of mixed value.  But you've got to read "Ender's Game."



STEVE:  Yeah.  And there, again, that's one where it's just a great concept.  It's, I mean, you just need to be exposed to the whole "Ender's Game" concept.  Really interesting.



LEO:  Now, we conditioned this at the beginning saying it's hard science.  So of course you didn't mention two that the chatroom loves.  Douglas Adams' "Hitchhiker's Guide to the Galaxy" Series.



STEVE:  Oh, I'm glad you mentioned it.  You're right.  But, oh, my god...



LEO:  It's not sci-fi.



STEVE:  ...it's the funniest stuff...

 

LEO:  It's funny.



STEVE:  ...I have ever read in my life.  I mean...



LEO:  So a separate category.



STEVE:  ...cleverly, cleverly funny, yes.



LEO:  And that actually started, not as a novel, but as a radio show.  He wrote the radio show, then novelized it.  And if you're interested in funny sci-fi/fantasy, Terry Pratchett's Discworld Series is very, very funny and very, very good.  And then I'm going to throw in - and we've been talking about - and of course what's nice about sci-fi is there are a lot of new guys and gals writing sci-fi and taking it in very exciting and interesting directions.  Steve has mentioned a few.  I like one, and I don't know if you've ever - this is real hard science.  Stephen Baxter?  Have you ever read any of his stuff?



STEVE:  Oh, yeah, yeah, yeah, of course.  All of his Time Series and...



LEO:  Time Series, yeah.  And I liked "Evolution," which isn't really sci-fi, but it's a fascinating book in which he begins at the beginning of life and continues through the end of the galaxy.  In one novel.



STEVE:  Whoa.



LEO:  There's not much plot.  But it's an exercise, I think, in brilliance.



STEVE:  Wow.



LEO:  Yeah.  It's called "Evolution."  And we've left out many.



STEVE:  There's a book called - oh, I know, I mean, there's a book called "Eon."  I think "Eon" was written by Greg Bear, if I remember.



LEO:  "Eon" is wonderful.  In fact, I've been - it's funny that you should say that because I love Greg Bear's stuff.



STEVE:  Yes.



LEO:  And I was going to mention him.  Some of his stuff is not hard sci.  Some of it is.  I think he's one of the best current practitioners.  I love his stuff.



STEVE:  Also I skipped Gregory Benford, who is a renowned physicist and astrophysicist.  I did read during the last couple years the Galactic Center Saga, which is another organic vs. machine story.  Really good novels, amazing characterization.  I mean, I still have - I have the characters he created in my head.  I mean, they just - they stay with you.  "In the Ocean of Night," "Across the Sea of Suns," "The Great Sky River," "Tides of Light," "Furious Gulf," and "Sailing Bright Eternity" is his Galactic Center Saga, which takes us also from Earth to the center of the galaxy, which is what made me think of it when you were talking about the entire life of the galaxy.



LEO:  And talking about scientists who write great sci-fi, and we've mentioned this before, I know you like his stuff, David Brin and the Uplift Series.  Amazing.  So what's great - what's great news is, if you're interested in sci-fi, there's a huge selection.  You've got to read the classics, which we've mentioned.  And then you'll find that there are modern practitioners who are taking it to the next level in many ways.  And of course you've got to read William Gibson, and "Neuromancer" especially.  Which when I - "Neuromancer" for me was like "Matrix."  When I saw the "Matrix" movie, I went out of there thinking my world has changed.  And when I read "Neuromancer" I felt the same thing.  Just really, really brilliant stuff.  So, wow.  We've given people probably 80 years' worth of reading between the two of us.



STEVE:  Yeah.



LEO:  Lots of fun.



STEVE:  Good stuff.  Good stuff.



LEO:  I'm so glad we did this.  Yes, Audible does have all of Orson Scott Card's stuff, including "Ender's Game."  "Ender's Game" you'll like.  "Ender's Game" is what turned my son on to sci-fi because it's about a kid.



STEVE:  Yup, exactly.



LEO:  And a kid who, I think it's safe to say, saves the universe.  So is that a spoiler?  Maybe I've done that.  I shouldn't say that.  But it's fascinating.  And that turned Henry on.  And then he went on to read, and this is sci-fi, as well, in a modern fashion, Daniel Suarez's books, "Daemon" and "FreedomTM," both of which you loved, I know, and are brilliant.



STEVE:  Yup.



LEO:  So, wow.



STEVE:  There it is.



LEO:  We have to stop.



STEVE:  Big reading list.



LEO:  Really, really great stuff.  Steve, this year and every year, I just - one of the things I'm so grateful for is the chance to do this show with you.  Your friendship, too, which has always been just cherished by me.  I want to thank you for a great year of great shows.  And all I can say is we all look forward to Security Now! in 2012.



STEVE:  Well, and we already have a backlog of topics.  We've got...



LEO:  You thought when we started this show six years ago, oh, we'll never be able to go for more than a year.  We'll run out of material.  Nunh-unh.  Nunh-unh.



STEVE:  Yup.  No.  No.  And it's funny, too, because I ran across somewhere, maybe it's on the page, but we had this concept of a quick 20-minute synopsis of what happened during the week.  And I don't - I know the early podcasts were very short compared to the, eh, we normally run about 90 to 100 minutes or so, and with never a stop.  So, yes, I think there's no end in sight, as they say.



LEO:  No.  And we plan - we won't make the show longer, I don't think.



STEVE:  No, because we'd just exhaust ourselves.



LEO:  But thank you for all the hard work you put into this show.



STEVE:  Always a pleasure.  And it's great working with you, Leo.  I really enjoy it and look forward to many more years.



LEO:  Do go back to our back log, our back catalog of 333 episodes now, all on Steve's site in 16Kb versions.  He's also made transcriptions available, which is fantastic.  So if you listen to this, "Oh, I missed, oh, I missed," in a couple of days Elaine will have transcribed it, and you'll be able to go and search through all of them and cut and paste the stuff you want.  That's all at his website, GRC.com, where he also publishes SpinRite, the world's finest hard drive maintenance and recovery utility, and lots of free stuff, tons of free stuff, including the legendary ShieldsUP! to test your router.  And now you've got one more test to throw in there.  Turn off WPS.



STEVE:  Yes.



LEO:  You also can find video versions, as well as audio versions, on our site, TWiT.tv, going back 333 episodes.  Thank you, Steve.



STEVE:  And we'll remind people that next week is a Q&A episode, so GRC.com/feedback.  Send me anything you want to.  We'd love your name and where you're located so we can let people know who's listening and where they are.  And we will entertain questions.  And then in two weeks we're going to plow into how it is that a fault was found in a protocol that all of our routers, our wireless routers, probably have enabled by default, which allows a bad guy to get in in only a couple hours.



LEO:  Wow.



STEVE:  Not good.



LEO:  Wow.  Steve Gibson, GRC.com.  Have a great New Year's Eve and New Year's Day.  And we will see you next Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern, on TWiT.tv.



STEVE:  Yay.  Thanks, Leo.



Copyright (c) 2011 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.


GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#334

DATE:		January 5, 2012

TITLE:		Listener Feedback #134

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-334.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 334, recorded January 4th, 2012:  Your questions, Steve's answers, #134.



It's time for Security Now!, the show that covers your security and privacy online.  And Steve Gibson is here.  He is the man, the host, the legend, the guy who does this show every week with lots of great security news and information, explanations.  He's a teacher, and he's a mentor, and he's a good old guy, which - one of my great friends.



STEVE GIBSON:  Older and wiser, I hope.



LEO:  Yes, let's hope.



STEVE:  First episode of 2012 for you and me.



LEO:  Happy New Year.



STEVE:  Yeah, likewise, Leo.



LEO:  We had a fun time last week.  I have to say I'm glad we didn't do a rerun because we talked about sci-fi.  That was so fun.



STEVE:  Well, it's something that's near and dear to both of our hearts, and it turns out it was a huge hit.  I got a ton of feedback from our listeners who went to GRC.com/feedback to tell me what they were thinking.  And also stuff in my Twitter stream, I mean, people just really, really liked it.  In fact, I had one, I saw one note where the guy said, okay, my three favorite episodes of all time were Portable Dog Killer, the Vitamin D, and the Sci-Fi Special.  And it's like, okay, wait a minute.



LEO:  Not security.



STEVE:  None of those are about security.



LEO:  I'm not into security, man.  I don't dig security.  I don't want to do security.



STEVE:  I think they just like hearing you and me ramble on about random things that...



LEO:  You know, that's really what this network was originally is just a bunch of gas bags, talking about stuff.  And we really probably should just stick with that format instead of trying to do content.  Although we've got a lot of content.  We've got a Q&A today.  In fact, I bet you some of those questions have to do with last week's episode.



STEVE:  I avoided that because I figured, I mean, I had to literally step around all of the feedback about sci-fi because I thought, well, okay, we did that, but let's not - actually there were a lot of interesting comments.



There's a really interesting industry-wide problem that forced Microsoft to issue a very rare out-of-cycle patch, which they did, we'll talk about.



LEO:  That's huge.



STEVE:  And some little bit of legal news.  But, yeah, we have a - I did 12 Q&A questions that I found because a couple of them are just going to be quick comments and so forth.  So, yeah, I think everyone's going to be happy with another podcast.



LEO:  You know we only have really one commercial.  So why don't we launch right into it.  But before we do, just a program note.  Next week is the Consumer Electronics Show, and as usual we're going there with our bags in hand.



STEVE:  Your batteries charged.



LEO:  Batteries charged, yeah.  I just got a ginormous battery for my phone.  By the way, it comes with, as most batteries do, instructions for conditioning - it's a lithium-ion battery - completely in opposition to everything you have recently told us.  It said "Do not plug in your cell phone right away.  Use it normally till the battery is completely discharged.  Once discharged, then plug it into a wall charger, not a USB or a car charger.  We want high-voltage, and then we want to charge it all the way.  But don't do too much to drain the battery quickly.  You want it to drain" - this is nuts - "for the first few times at a slow, even rate.  Drain the battery fully again before plugging the phone in.  Do not," it says, "do not fall into temptation to plug the cell phone in..."



STEVE:  Wait, wait, wait.  Is this because of a - is this a larger capacity battery?



LEO:  It is.  It's about three times normal.



STEVE:  The reason they're telling you to do that is that it's necessary for you to train the phone...



LEO:  Ah.  It's not about the battery.



STEVE:  It's that you have to train the phone that, against its expectations, this battery is going to last much longer than it expects.  And so...



LEO:  I don't think that's what this is about, but I think you're right.  That's probably a good idea.



STEVE:  No, no.



LEO:  But they're saying things like "conditioned cell phone batteries are meant to be able to catch a few minutes of charge as needed, but it is the first few days that are vital to good conditioning."  Which we know is not true; right?  On lithium-ion.



STEVE:  Yeah, that's not true.  Although it would be the case that your phone's battery...



LEO:  The phone'll be confused, you're right.



STEVE:  Your battery meter wouldn't be expecting to have a battery lasting so much longer.



LEO:  Right.  That makes sense.



STEVE:  So you'd want to show it a few times, by going to the extremes, how long this particular battery lasts.  And the phone's going to be going, whoa, okay.  Because otherwise it would be showing you a very pessimistic-looking percentage meter, and you'd be saying, wait a minute, I got an extended capacity battery, and this thing's running at zero.



LEO:  Good point.



STEVE:  Even though it wasn't even there yet.



LEO:  That's, you know, I doubt that's what they're thinking.  But I think that that's a good reason to do it.  But just to recap what you said some time ago, a few episodes ago, there's no - lithium-ion batteries, the best thing to do is just keep them charged as much as possible all the time; right?



STEVE:  Yes.  Now, the universal agreement is that, unlike prior technologies, prior chemistries, both nickel-cadmium and then nickel-metal hydride, which was actually the same fundamental electrochemistry, those had a memory effect.  So if you only discharged them a little bit and recharged them often, they would forget that there was, like, a lot more room down below the point that you were normally starting the recharge.  So the logic there was run them all the way down to the ground before you recharge them.  And if you can't, then you could reset their memory by deliberately doing some deep cycles.



Lithium-ion, completely different story.  It has no memory.  And it actually is better for the chemistry not to be running it all the way down.  So there the logic is charge often.  And if you are in a situation where, for example, you have access to a plug, and you've got your adapter, always use the adapter when you can.  And actually, one of the questions in today's Q&A explains a mystery that we encountered a few weeks ago.  And I don't remember which episode you were on and which episode Tom was on with me.  But it was someone's cell phone instructions said, once it's charged, unplug it from the wall.



LEO:  All of them say that.



STEVE:  Which - okay.



LEO:  And Nokia started it.  And the reason is those little chargers draw power even when they're not doing anything.



STEVE:  That is exactly right.



LEO:  So it's a green thing.



STEVE:  Exactly right.  I was assuming that it's like, well, okay, the phone ought to be taking responsibility for battery management.  And in fact the manufacturer is trying to take responsibility for those..



LEO:  For the charger.



STEVE:  I like calling them "wall warts."



LEO:  Wall warts, yeah.  But we all leave our wall warts - c'mon, who's going to plug in and unplug all their wall warts all the time?



STEVE:  And it is annoying to feel how warm they are, which of course is the giveaway that this thing is expending electricity.



LEO:  Make better wall warts.



STEVE:  And they could, Leo.  They could easily have smart wall warts that shut down when - after they've done their charging cycle.



LEO:  It just baffles me.  And this is a company that makes these batteries.  And they just - it says "Continue to drain your cell phone battery completely before plugging it in at every available opportunity.  Regardless of the age or conditioning of your cell phone battery, it will always last longer over time when discharged fully before charging it again."  Now, of course, there's circuitry to keep it from discharging fully.  But it's wrong.



STEVE:  And you know, Leo, this, to me, this sounds like language that has not changed since they were...



LEO:  Right.  It's NiCad.



STEVE:  Exactly.  So they've just - they've never updated.  It's probably an Asian manufacturer.



LEO:  It is, of course, yeah.



STEVE:  That paid for a good English translation.



LEO:  Oh, that's what it is.  This is like Colonial British.  You know, when you're using nickel-cadmium batteries, 'tis always better to discharge fully.  That's probably what it is.



STEVE:  Yeah.  And they...



LEO:  They just didn't want to buy another translation.



STEVE:  Yeah.  The electrochemistry completely changed out from under them, and they never updated their manual.



LEO:  That is so funny.  Well, I'm just glad I listen to Security Now! so I didn't have to do that.



STEVE:  Yeah.



LEO:  But I think you are right.  I think it's probably a good idea to let the cell phone know.  I wonder how smart Android software is about all that, whether it needs to - whether it'll figure that out, or how long it'll take to figure it out and all that.



STEVE:  It really, see, and this is it, it really can't...



LEO:  It doesn't know.



STEVE:  ...because lithium-ion cells hold their voltage with a very slow drop until very near the end, when it suddenly drops off.  So the reason our laptops sometimes do put us through a calibration cycle is they need to see where the end of the battery's life is in order to reset this timer.  So they actually go on time more than on voltage because voltage isn't a reliable source of feedback for them about the current state of the battery's charge.  And that means that you really would have to teach your phone that, against all logic, this battery is lasting three times longer than, like, the normal battery. 



LEO:  That's very interesting.  Well, I'm going to do that.  I'm going to let it die a couple of times and see what happens.



STEVE:  Cool.



LEO:  So let us, well, you know what, let's do - oh, I know what I was saying.  I was going to talk about CES.  I got completely distracted.  One of the reasons I got this big battery is so I can use this thing all day at CES.  Most cell phones, I plug them in all the time, but CES is kind of an unusual situation where you're on your feet 12, 14, 16 hours a day, and you want these phones to last.  A number of manufacturers have given me external batteries, backpacks with built-in batteries.  They know.  This is a universal problem.



So we're going to move Security Now! next week because we'll be on the show floor.  Little difficult for us to do this kind of show there.  So Monday, 9:00 a.m. Pacific, 12 noon Eastern, this coming Monday, January 9th, that's the next Security Now!.  I'll remind you at the end of the show.  And we'll do a show then.  And then do watch, though, all week long for the latest from the Consumer Electronics Show.  It's going to be a lot of fun, I think a lot of interesting things, yeah.



STEVE:  Yeah, cool.



LEO:  All right.  Let's get to our security news, Mr. G.



STEVE:  Okay, now, this is really interesting.  Back in 2003, some researchers raised everyone's awareness of some fundamental problems with hashing algorithms which were being used in all of the server-side tools.  And by "all," I mean just across the board, in Oracle's Java and Glassfish, Microsoft's ASP.NET system, Python, Ruby, PHP both versions 4 and 5, Apache's Tomcat and Geronimo, Jetty, Plone, CRuby, JRuby, Rubinius, and even more recently the v8 JavaScript engine.



What happens is, when users are submitting data from their web browsers to a web server, and we've talked about this in all kinds of different contexts, a so-called "post query" is made to the server.  And the body of the query contains all the arguments that you're sending.  So when we're filling out a form during purchasing, on a web forum where we've got multiple fields, any time we're sending data up to the server, we're using almost always a post-style query containing data.



Well, what the servers do is they hash the various elements of the request as a means of storing it in a data structure that then allow these server-side scripting languages, thus Python, Ruby, PHP, Java, ASP.NET and so forth, they create this data structure which those scripting languages then query in order to obtain the arguments that the user has submitted.  Well, back in '03, so, what...



LEO:  Eight years, nine years, yeah.



STEVE:  Yeah, like eight or nine years ago, plenty of time ago, researchers pointed out the fact that it would be possible to create, to deliberately create hash collisions which would overtax servers.  Now, the reason this happens is, if you - we have to explain a little bit about how these hashes are used.  The idea is you sort of use the hash, the result of the hash, like an index into a data structure where you store stuff.  So, for example, say that the user submits some data and individual pieces are hashed down to a 32-bit token.  We're not talking like crypto hashes, which are 128 bits or 160 bits or 256.  We're just sort of wanting to distribute the incoming data evenly in a bunch of separate little buckets.  So we might turn the input data in individual pieces into sort of a quick and easy, like a 16- or a 32-bit hash.  So that's then used sort of as the index to store this piece of data, the idea being that all the data that you hash is going to sort of have different 32-bit values, and so it's stored under different 32-bit tokens.



Well, these researchers in '03 said, okay, but if they weren't stored in different 32-bit tokens, if they were all stored in the same one, like by somebody maliciously designing the data so that it would hash to the same value, and since these are not cryptographic-strength hashes, they're just sort of little quickie hashes meant to distribute the data evenly, that means that it's possible to pretty easily design them so that they don't, that is, design the input data so that it isn't distributed evenly, you can force all of the input to hash to the same 32-bit value.



Well, it turns out that our servers can't handle that at all.  I mean, the idea is that this approach for average typical data is very quick and does a very good job.  But the worst case is very bad.  It collapses.  So what happened was that several months before reminding everyone of this in the 28th Chaos Communication Congress, which occurred recently, I think it was, like, last Wednesday or the Wednesday before in Berlin, security researchers who decided they wanted to demonstrate this, they notified a couple months before all of the various makers of the server-side technologies that I talked about, I mean, like all of them that were vulnerable, Microsoft included, and all the other guys.  And they said, hey, we want to let you know, this has been known about for eight or nine years.  You really need to fix it because we're going to...



LEO:  That's a long time.



STEVE:  Yes.  We're going to show people how bad this is.  Okay.  So how bad is this?  They demonstrated that a single person with just using 70 to 100 kbits of connection bandwidth, which we know is like nothing, could completely saturate a server using an Intel i7 core processor.



LEO:  A single machine.



STEVE:  A single machine could be brought down, essentially creating a denial of service attack on a website with 70 to 100 kbits of queries.  And what they showed was that hours of CPU time can be consumed making a single HTTP post request.  So they, in one of the papers which they demonstrate, they show that, if a single attacker had a gig connection, that gigabyte connection, okay, or if an attacker had 10 100MB connections, like from a small bot fleet, or a hundred 10MB connections, which is easy to get, that could fully saturate 10,000 i7 core servers.



I mean, a huge commercial website can be taken down with relatively low bandwidth usage by essentially perpetrating a CPU resource consumption attack by generating these requests to the server which deliberately cause hash collisions.  The idea is that these hash collisions prevent the data from being scattered out over space, essentially, where the data can be accepted quickly, and force all the data to be stored in the same place, which is like a worse-case scenario over at the server end for it accepting the data.



So Microsoft a couple weeks ago issued an out-of-cycle patch, and everybody else has in the meantime fixed it.  So the problem is, now that this is known, the reason Microsoft was of course motivated to fix this, is it's trivial to do this.  It's no effort at all.  And the industry could easily see that bad guys would just have fun doing this.  I mean...



LEO:  But just so people understand, this isn't a threat to your system being compromised or anything like that.  It just means that bad guys can do DDoS attacks, attacks on websites easier, with less hardware.



STEVE:  Well, actually it's with almost no bandwidth.



LEO:  Very easy.  A gigabit.  A gigabit's not "no" bandwidth.  That's a lot of bandwidth.



STEVE:  No, no, no.  No.  But a smaller server, I mean a state-of-the-art i7 core server, can be DDoSed, actually just DoSed, you don't need distributed, just DoSed, with between 70 and 100K.



LEO:  Oh, I get it.



STEVE:  Yeah.



LEO:  So if you had - I see.  Wow.



STEVE:  Yeah.  So, I mean, so the idea would be you'd need much more to bring down a 10,000-server farm, but even that can be brought down.  But a single server, you can take it down with 70K of data, tying up its processor for hours, making a single query.  So this is - we've talked about how the generic concept of a denial of service is that regular users cannot access the resources of a web server for some reason.  Well, there are many different reasons.  One was like making lots of connections that you don't ever complete.  And so you exhaust the server's ability to accept valid connections by tying it up, waiting for bogus connections to actually be made.  So that was a TCP connection resource denial of service where you just - you used up the server's ability to accept connections by sort of hanging connections that weren't actually made.



A different approach is just flooding it.  A bandwidth denial of service is where you just pound the actual connection to the server.  The server's sitting around with nothing to do because you've, like, brought the routers down.  The routers can't handle all the traffic trying to get to the server.  So valid users are unable to get there.  So that's typically a distributed denial of service attack.  The outcome is the same:  valid users can't get there.



So what we have now, this thing is a new type of denial of service where, by cleverly designing the queries that are made to the server, we are overloading the computational ability.  And so we have a low-bandwidth, just a trickle of queries can take a server off the 'Net because the way it's accepting the data will collapse if the data is designed just right.  And it turns out it's no rocket science to do this.



Now, all you need to do, the reason hackers can do this, is all of these different systems that I've talked about - Java, ASP.NET, Python, Ruby, PHP, Tomcat and so forth - they use a very simple and well-known hash.  There's only a few of them that most people use.  It turns out it was Dan Bernstein's hash, variations of a hash that Dan Bernstein came up with to be very efficient in computation time so that it wouldn't take much time to do this.  But that's what's been exploited.



So Perl is one of the systems that took this seriously in '03.  They're not among the list of vulnerables, they haven't been, because all they had to do was just you randomize the hash when you boot Perl up, and so each instance of Perl running all over the Internet has a slightly different hash, so there's no way for the bad guys to predesign data that will cause a deliberate collision of the output of the hash.  That's all it took.  But nobody else bothered until these guys said, okay, it's been eight or nine years, let's make everybody bother because, without fixing this, all of the servers out there were vulnerable until just recently.



So this was a good thing.  And that's why Microsoft, if our listeners noted, issued an out-of-cycle patch.  They fixed three other things in ASP.NET, as well.  One actually was a critical security vulnerability that they fixed along the way.  But what really motivated them to do it was that they realized any IIS server could be taken down just by making some tricky queries.  Really, really interesting, yeah.



LEO:  Wow, very interesting. 



STEVE:  Now, this one is obscure, but I know that the VLC video player, which is one I often use, the VideoLAN player, is extremely popular.  So I wanted to make note that a vulnerability has been found.



LEO:  Oh, yeah, because we all use that.  We recommend it heavily, yeah.



STEVE:  Yes.  A vulnerability was found in an obscure file format.  It's actually the TiVo file parser has a vulnerability such that, if you were to open a .ty file, that's the file format that TiVos use, the TY file demultiplexer plug-in, which is libty_plugin.*, there's a known vulnerability in that that allows a remote code execution.  So what would happen is somebody would send you email that contained a small file, a .ty file embedded, saying click here if you want to see a funny movie or something.  Or you'd go to a website that would, in one way or the other, induce your system to play that.  So you'd have to have VLC installed.  Versions 0.9.0 through 1.1.12 are vulnerable.  So only the latest 1.1.13 fixes this problem.



So I just wanted to give everybody a heads-up.  I, in looking at the VLC site, it didn't look to me like this 1.1.13 was available yet.  So what you can do, and in fact I don't know how many people are watching their TiVo files in the raw like this using VideoLAN, but you can simply delete the libty_plugin.* files from your VideoLAN plug-ins directory, and then you're safe, too.  So if you're not using these .ty files, I would just say get rid of the libty_plugin files.



LEO:  And what do you use them for again?  What is the...



STEVE:  Actually it's only for playing TiVo files.



LEO:  Oh, okay.  Delete it.



STEVE:  Of course everybody - yeah, exactly, delete it.  Everybody gets it as part of the package, so that if you happen to run across a TiVo file - and the problem is it will try.  If someone sends you email with a .ty file in it, and you're a VLC user, they could take over your computer remotely.  So I just thought that was worth telling our listeners about.



LEO:  Yeah, [indiscernible], we all use it.



STEVE:  Yeah.  I do.  I've got it on all my machines.  It's a great player.



So in privacy news, the Ninth U.S. Circuit Court of Appeals has upheld the constitutionality of 2008's FISA, the Foreign Intelligence Surveillance Act, which had come under fire.  What happened was, and we've talked about this in the past when this was just new and happening, there were 33 different lawsuits which users of telecommunications companies, including for example AT&T, Sprint Nextel, Verizon, BellSouth and so forth, when it became known that the NSA was asking those companies to surveil U.S. citizens, a bunch of lawsuits were filed against those telecommunications providers, saying we're not happy that you're surveilling us, so we don't think that's right.  And what just happened, after many years, is that it percolated up through the legal system.  A lower court said yes, in fact, this is constitutional, so these 33 suits should be dropped.  And so that decision was appealed to the Ninth U.S. Circuit Court, that ended up upholding that lower court ruling. 



So the EFF, our friends at the Electronic Frontier Foundation, and the ACLU, the American Civil Liberties Union, are both unhappy that the lower court ruling was upheld.  A judge, Judge Margaret McKeown, who was on the Circuit Court of Appeals, said that "Electronic intelligence gathering depends in great part on cooperation from private companies ... and that if litigation were allowed to proceed against persons allegedly assisting in such activities, the private sector might be unwilling to cooperate with lawful government requests in the future."  So I would say she was right about that.



LEO:  We kind of were hoping that would be the case.



STEVE:  Exactly.  So unfortunately, it looks like the FISA has been ruled constitutional, and so those suits dropped.



LEO:  And President Obama signed into law the National Defense Act just this past week which allows them to hold without...



STEVE:  Detain...



LEO:  ...indefinitely without warrant.  It actually overturns habeas corpus.  But I guess that's not in the Constitution.



STEVE:  Yeah.



LEO:  It's a little scary.  We live in a - we're starting to live in a police state.  I hate to say it.



STEVE:  So over the week between Christmas and New Year's, records were broken, Leo.



LEO:  Yes?



STEVE:  Not old-fashioned vinyl records.



LEO:  No, but it's about time.



STEVE:  Maybe those.  20 million Apple...



LEO:  I saw that.



STEVE:  ...or Android phones were activated.  And here's the big number that caught my attention:  1.2 billion apps were downloaded.



LEO:  In one week.



STEVE:  One week.



LEO:  It's the first billion-app week.  But if you think - that makes sense because all those 20 million people have new phones, and they need to put apps on them.



STEVE:  Yeah, they've got to fill them up.



LEO:  They've got to load the apps on.



STEVE:  Against all of my advice.  And it's like, yeah.  So how many apps would that be per phone?



LEO:  I don't even want to do the math.  It's a lot.



STEVE:  Yeah, about a thousand.



LEO:  I would say that most people who have smartphones have fewer than a hundred apps.  We did a survey once.  People like me have more than a hundred apps.  But a hundred seems to be a cutoff point for, like, super geeks.  Most people have.  In fact, I look at most people, and they have a half dozen or a dozen apps.  They don't...



STEVE:  Well, yeah, and thank goodness for folders, at least under iOS, because, wow, I mean, otherwise you're just, like, scrolling forever.  It's like, where is that thing?



LEO:  Yeah, they really needed that on iOS, for sure.



STEVE:  That's a good thing.



LEO:  Yes.



STEVE:  And so also I ran across this very funny little note when I was going through the mailbag today for today's Q&A.  And I got a kick out of it because it reminded me of something I was sure I'd seen once before, where RPN, that is to say Reverse Polish Notation, was regarded as "Yoda Speak."



LEO:  It is.  That's how Yoda speaks, in RPN.



STEVE:  Exactly.  And I loved - I saw, "Impossible to see, the future is."  Anyway...



LEO:  The verb is at the end.



STEVE:  Exactly.  Noel in Melbourne, Australia, he wrote - and I paraphrased a little bit because his note was longer and rambling.  He said, "I was so stoked to learn from you of HP's revival of their venerable HP-15C calculator," which I notified people of, and again, I don't remember if that was with you or with Tom, Leo.  But...



LEO:  No, it was with Tom.  I didn't know that.  That's fantastic.



STEVE:  It really is.  That is a - I still have a bunch of 11Cs.  Now I have a couple 15Cs that are brand new as a consequence of learning of this.  Anyway, continuing, Noel said, "Calculators should be landscape, not portrait.  And of course RPN.  But my wife is not a fan and won't touch my HP calculator at all.  She calls my HP RPN calculators 'Yoda,' saying '6 enter 9, multiply you will.'"



LEO:  Well, you know, that's a good way to learn RPN because then it can all make sense.  It's Yoda speak.



STEVE:  That's right.  "6 enter 9, multiply you will." 



LEO:  Give it the operands, then the operator.



STEVE:  "And she wants to know, what's wrong with '6 times 9 equals' that we learned in school?"



LEO:  We could go on and on with what's wrong with that.



STEVE:  And it's funny because I put "RPN" and "Yoda" into Google, and sure enough.  I knew I'd seen the notion of RPN as Yoda somewhere before, and I got a bunch of hits on that.



LEO:  So funny.



STEVE:  Anyway, but thank you, Noel for reminding me.  I got a kick out of that.  And speaking of getting a kick out of things, I got a nice note, actually today or, no, Tuesday the 3rd, yesterday, from a David Goldenberg, who said, "Hi, Steve and friends."  He said, "I've been a happy owner of SpinRite for a few years now, and it's my secret weapon in the technology trenches.  I'm the family tech guy.  I help out at my kids' school and have my own part-time business fixing PCs, training, and networking.  SpinRite is always within reach and never lets me down.  Last week" - oh, you'll like this, Leo, I forgot.  He also signed off with his call letters.



He said, "Last week I had been preparing a laptop for a presentation for my ARES amateur radio group.  I volunteered to get a new program, NBEMS, which is the Narrow Band Emergency Messaging Software, running that sends text messages and email-type communications over the radio.  After several days I had everything working great and spent hours getting screenshots for the PowerPoint I was to prepare.  One morning I went to start up the laptop.  As I was getting together with another ham to go over what I had and to get his machine working, I started up my laptop and got the dreaded BSOD" - of course the Blue Screen of Death - "and an unmountable boot volume error.  I did not break a sweat or even worry as I knew from experience that SpinRite would save the day.  And needless to say, two hours later, the drive was scanned, several sectors were repaired, and the laptop booted, and everything I needed was ready to go.  You're great, and so is SpinRite.  Thanks.  David Goldenberg, KJ6MCQ."



LEO:  KJ6MCQ, nice call sign.



STEVE:  Yeah.



LEO:  Not W6TWT, but nice call sign.



STEVE:  Not quite, yeah.



LEO:  Hey, we're going to take a break.  We have questions for you from your devoted listeners who of course, as always, come up with lots of stuff, comments, a dozen questions coming in a moment.  Are you ready, Steve?  I've got questions.



STEVE:  You betcha.



LEO:  Lots of them, starting with Dean Severson in Clearwater, Minnesota.  He's wondering if there's a quick read about SOPA for non-techies.  We've talked a lot about the Stop Online Piracy Act.  He says:  SOPA, MPAA, RIAA.  As a geek around the Christmas table, I get the same questions as other geeks.  Lots of the answers, which should be straightforward tech answers, really revolve around the battle with lobbyists.  I tried explaining all this SOPA stuff to my friends and family.  I get lots of blank stares:  "What is he ranting about this time?"  Is there a quick-read link you could send us to help the layperson understand what we're getting at when we try to explain these totally inexplicable issues?  Thanks.  Listener since Episode 1.



STEVE:  Yeah.  In general, I don't know of anything.  But for SOPA there is a bunch of good stuff at the EFF, not surprisingly.  They're on top of these sorts of censorship and privacy concerns and so forth.  And when I saw Dean's question, I just went www.eff.org, and their search system allows you, over on the left-hand side, to specify categories.  And so I just chose the blog that they have and searched for the acronym "SOPA" within their blog.  And it immediately found some very nice and written - I guess I wouldn't say to Dean that this is maybe for his family and friends, but it's definitely for him - that would give him a sort of a nice-looking sense for a way to describe these issues.  So certainly the EFF is where I would go for things like SOPA that are lobby-based and privacy and...



LEO:  Oh, yeah, they're the greatest.



STEVE:  ...and censorship concerns.



LEO:  There is a website dedicated specifically to SOPA and PIPA, the two bills that are in front of Congress right now.  It's AmericanCensorship.org, and they do have an infographic on this site that's very easy to understand, and videos you can embed, that you can show people or send people.  There's a really simple video that you can email or download.  There's a very nice infographic that talks about the number of people who participated in American Censorship Day.  6,000 people signed up.  A million emails to Congress.  You know, we kind of won that battle.  I think a lot of the people who supported SOPA, including GoDaddy and others, realized this was something that the Internet did not want.  But the battle is far from over.  They will be back again and again and again...



STEVE:  I did also...



LEO:  ...to try to break the Internet because the Internet fundamentally, to the Motion Picture Association and the recording industry, is a threat.  They see the Internet and computers as piracy tools, not as anything else.  And in order to preserve their business model, they want to literally break the Internet because they see it as dangerous.  And we don't want them to break the Internet.  We want them to change their business model to suit modern times.  We can't go back to the 1950s, sorry.



STEVE:  Somewhere, just this morning, I forgot to follow up on it, because I was curious, but I saw a blurb that said that Hollywood itself is now putting together or has put together a petition or some effort of some sort to tell the MPAA to lay off.



LEO:  Right.  Well, yeah.



STEVE:  So even Hollywood...



LEO:  None of this is monolithic.  I mean, there are lots of young people in the record industry, in the movie industry, in the television industry who understand that, you know - it's not really them.  It's the people who have the existing business model that don't want to change it that are doing this.  And unfortunately the members of Congress don't understand technology, and so they don't know what's being asked of them and what the cost of it would be, et cetera, et cetera.  Fortunately, I think that we kind of did scare them a little bit about this, and they're starting to think a little bit.



STEVE:  Yeah.



LEO:  But we've got to keep on.  We can't - the problem is that these guys will not give up until they win or they're defeated entirely.  And I don't know how we defeat them entirely.  We have the best Congress money can buy.



STEVE:  Well, and unfortunately when Chris Dodd went over there, I'm thinking, oh, no, because he's well connected and of course going to be a big lobbyist.



LEO:  Yeah.  Watch the video at AmericanCensorship.org.  It's a very good place to learn about this.



STEVE:  Cool.



LEO:  And share with your friends.  Question #2.  I'm glad you brought that up, though, because it's not over.  It's far from it.  We've got a long way to go.  Mark Cykowski suggests that you stand on your head.



STEVE:  What?



LEO:  What?  Well, you wrote that.  Steve, long-time listener to your Security Now! podcast.  A few weeks ago you mentioned you returned your Kindle Fires in part because the on/off button got in the way, and you'd accidentally turn it off while holding it.  It's right at the bottom there.  And if you hold it - I don't hold it that way.  I hold it on the edges.  But it's true, it's too easy to switch.  I agree.  I was having the same difficulties until I found a solution.  I just turn the Kindle around.  Because the Kindle rotates, and the on/off button then is at the top.  No, I didn't think of that.  No more accidentally turning the screen off.



The only problem I've seen is that the opening screen and the shutdown screen messages are upside down.  But I could live with that.  I'm not having any of the problems you mentioned.  And you may want to take another look at the Kindle Fire.  I don't know if that's a solution.  Thanks to you and Leo for all the great podcasts.  Sincerely, Mark.  I think that's prob- that's the "You're holding it wrong" answer; right?



STEVE:  Well, okay.  So a couple things.  Yes, of course he's right.  You can...



LEO:  You can do that.



STEVE:  The Kindle screen rotates easily.  It also occurred to me since then that, if you had any sort of a case around it, and I would imagine everyone who gets a Kindle, I mean, it's fragile.  In the same way that you're going to put some sort of a bumper case on your smartphone, I would imagine you would do that with a Kindle.  And unless they exacerbate the problem by putting a big rubber bump there to sort of, like, make pushing the button easy, that might end up recessing the button so that, if they just had like a hole through the case, then you'd be pushing in in order to get to it.  So that could solve the problem.  I did want to mention, though, that I did get another Kindle.



LEO:  Oh.  Another Fire, or another regular Kindle?



STEVE:  No, a Kindle Fire.  I got a Fire because I thought, well, first of all, it's so inexpensive, it's hard not to have one; and that I ought to have it in order to play with it and get to know it and see what I think.  And now my complaint is that the aspect ratio is wrong for reading.



LEO:  Oh, that's interesting.



STEVE:  It's right for widescreen movies, which is the reason it is widescreen.  But I just don't like reading in a long column or in a really wide screen with very few lines.  So it's like, eh, I just - I don't - I think they - I'm not a fan of the Fire.  But I do have one.



LEO:  I just bought another of the $79 Kindles.  To me, these are the - this is the Kindle.  And I got a case with a light in it.  And it's not for me, it's for my wife because she lost it on the airplane, following in my footsteps.



STEVE:  Ah.



LEO:  And so, but at 79 bucks, that's not nearly as painful as it used to be.



STEVE:  Yes.  And that's just - that's a cute little one.  Now...



LEO:  I think it's the perfect Kindle.



STEVE:  I stick it in my pocket when I'm going to go somewhere where I don't want to be lugging something around.  And what's really neat, too, is - you probably noticed this, Leo.  On the back are two little silver contacts, which is the way the illuminated case gets powered by the Kindle.  So at least the case that I've seen doesn't use its own battery.  It borrows the Kindle's battery, which is very elegant because that means you only have one thing to charge, also.



LEO:  Absolutely.  Okay, let's - I've lost my browser.  There it is.  Joshua Gardner in San Antonio, Texas, says Firefox's memory usage has been fixed in version 9.01:  A quick note, I switched to Chrome for a bit because I could not handle Firefox's memory management leakage, which we've talked about several times before on the show  He says:  2.8GB of RAM usage with 30 tabs open.  My poor laptop only has 4GB of RAM, so Firefox would constantly cause the hard drive to be running because it would have to swap things back and forth.  However, I couldn't handle not having tree-style tabs, which you've recommended, the side tabs.  So I returned to Firefox - because it's an extension for Firefox.



Over the last week I've had Firefox open probably 10 days it's been open with 30 tabs open all this time.  And my current RAM usage is 200MB in the most recent version, 9.01.  If you have a spare machine sitting around, you might want to run the current version with a few tabs open for a night or two, see if you get better results.  I know you aren't a latest version kind of guy.  Neither am I, in some cases.  But in this case I think the benefit is there.



Speaking of which, what is with this new trend to get rid of the menu bar in software?  That File, Edit, View, Tools, et cetera?  I first saw it in MS Office.  Yeah, they're using that ribbon thing now.  That's their thing.  And I'm seeing it in browsers.  Now, yeah, they were talking about putting ribbons on Firefox.  I don't - did they?  And now a few other utilities I've seen have been updating in this direction.  For the record, I don't like it. Thanks for the show and all you do.  Josh in San  Antonio, Texas.



STEVE:  Okay.  So a couple things to note here.  First of all, the phrase "My poor laptop only has 4GB of RAM."  Okay, what is wrong with that picture?  4GB.



LEO:  I know, it's a ton.



STEVE:  Oh, Leo.



LEO:  Should be enough to last forever.



STEVE:  I mean, mine do, too, Josh.  I'm not poking fun at you.  I'm just saying our world has exploded.  It's just, I mean, 4 billion.  Billion.  4 billion bytes of RAM.  Oh, my goodness, it's wrong.  It's very wrong.  So I also wanted to note, he mentioned v9.01 and wanted to make sure people knew that 9 was quickly replaced after its first day on the planet.  But I noted something else just today.  And that is, Mozilla is having problems - speaking of not having enough RAM - Mozilla is having problems because they are no longer able to build Firefox.



LEO:  What?



STEVE:  They are having to back out of features because it will no longer build.  They ran across a problem building in Windows, and so they added the /3gb switch, which reduces the - it used to be that Windows...



LEO:  You're saying the memory footprint is so huge in Firefox that there's not enough memory on modern machines to compile it.



STEVE:  They can't compile it.  Correct.



LEO:  Well, I think they need to rewrite the thing, if that's - that's ridiculous.  I can't even imagine.



STEVE:  I know.



LEO:  If you can compile Windows, why can't you compile Firefox?



STEVE:  Okay.  So back when Microsoft was architecting Windows - and remember that Bill Gates famously said that they had 10 times more memory than the Apple II.



LEO:  Right.



STEVE:  The Apple II could go to 64K, and so they were going to go to 640K.  Well, then they realized, okay, that's not such a good idea.  We need more than that.  So they went to a 32-bit platform.  So they said, okay, 32 bits, come on, that's 4 billion bytes.  We're never going to need anything close to that.  So they arbitrarily divided the memory in half because why not?  Neither half would ever get near full.  So 2GB for the OS, 2GB for the applications.  All the applications.  Because, again, applications, how big could they be?



So at some point Mozilla hit their head on the 2GB size.  And so they added what's called the /3gb switch, which is something you can add to the boot.ini file in Windows that moves that 2GB fence that divides the OS and the applications from the 2GB point up to 3GB.  So the OS is squeezed down to 1, and that gives applications 3GB of space.  Well, that's been hit now, too.  So I was reading some of the developer blog comments in the forum apologizing for a couple people who were not on the email routing list because their code had been removed, and they weren't notified, because Firefox can no longer be compiled.



LEO:  Wow.



STEVE:  So, yes, Leo, it is a...



LEO:  That's stunning.



STEVE:  It is just a travesty.  It's just, like, okay, guys, come on.  This is just getting too big.  And as you said, it needs to be started over.  What they're going to end up having to do, apparently, and this is a big problem for them, they're going to have to switch to 64-bit OS builds to build the 32-bit version.  And that's going to be, I mean, they're just - it's going to take them a while to do.  But it just means we're talking about bloat with no end.



So, Josh, thank you for telling me that 9 seems to have solved this problem.  I'm still happily on 3.6 right now.  And at the rate those guys are going with Firefox, I mean, we do know that they're projected to have 12 ready at the end of April.  Maybe this is going to throw a little kink in their calendar, since they can't compile it any longer.  Ugh.



LEO:  There's got to be more to this story.  I - that's bizarre.  Question #4, Jerry wonders what Steve uses and recommends, a hard drive that spins or a solid-state drive:  After experiencing a hard drive failure many years ago I purchased SpinRite, now use it on a regular basis.  I've never experienced a hard drive failure since.  Here's my problem.  I'm going to be purchasing a new computer, and I am torn on whether to get an SSD or an HDD.  I want an SSD because of fast boot, fast startup of applications, silent operation, and SSDs generate less heat than HDDs.  The two weaknesses of SSDs that give me major pause are no SpinRite support, and various issues concerning the successful implementation of full-disk encryption.  I'd add a third, which is price, of course, price per capacity.  So, Steve, what kind of disk are you purchasing for your new computers nowadays, and what are your comments, insights, recommendations on this dilemma I'm facing?  Thanks.



STEVE:  I see a lot of questions like this in the mailbag which I sort of skip over just because I feel like, well, okay, this isn't the hard drive show.  But I thought, okay.  This is one that hits home.



LEO:  So let's answer this once, and then you can refer to it forever and ever.



STEVE:  Yeah.  I don't have any spinning media in any laptops.



LEO:  Really?



STEVE:  Yeah.  And I've got a bunch of laptops.  My feeling is that's a place, just due to the delicacy of those 2.5-inch small laptop-style drives, that really scares me.  So, that is, in terms of it's just - it's easy for the laptop to get bounced by mistake.  You turn it off and shut it down.  I mean, knowing what's going on in there, that this amazingly delicate little and ridiculously dense data stored on these little spinning platters, the heads are still flying, I, like, have to sort of sit there and wait until I'm sure that it's all stopped spinning and the heads have landed.  And even then, you really do need to be careful with laptops.  All of the experiences that the original hard drive iPod users had of their iPods dying is similar to what happens with laptops.  And with laptops being so popular, it's just a problem.



So I do have large spinning hard drives in most of my big machines.  But one of the first things I do is to take out the hard drive and exchange it with a solid-state drive for my laptops.  I like my little Mac Air because it's just 64GB of solid state, and it just - it feels right to me that this thing I don't have to worry about.  And the iPad is the same, for the same reason, that it's just - it's solid-state storage.  It is just - that's not going to go wrong.  But you're right, Leo, price is a concern.



And of course, for me, wear is a concern over on the SSD side.  We've talked about how SSDs, the current technology does get fatigued when you write to it because essentially you're squirting electrons through an insulator to strand them out on a little piece of conductive island.  And that electron tunneling, squirting the electrons through, essentially you're breaking down an insulator, forcing it to allow a charge to pass through.  Well, that fatigues it.  It actually does wear it a little bit.



So I'm in the process of building up a new server for GRC.  It'll end up becoming GRC.com and www.grc.com and all that.  It'll be GRC's new main server.  And I've decided it's going to be SSD.  But I did a couple things.  I got highly over-provisioned SSDs.  They have 28 percent over-provisioning so that the SSD has that much spare space which is available to be swapped in as it detects problems evolving.  And it's in a RAID 6.  So not only am I using the best, highest quality - and these are all - these are not MLC, by the way.  These are all SLC.  That's the other thing I do.  And it is really expensive to go SLC.



But single-level storage is much more reliable than multi-level storage.  Much more expensive because you're only able to store one bit in each cell rather than two or three or in some cases four bits.  So it means that the technology is less dense, thus the SSD is much more expensive.  But the reason is it's faster and it's more reliable.  And so in addition to that, I'm not only using SSDs that are over-provisioned, but RAID 6, which means that essentially I have a four-drive RAID 6 array.  So any two drives could fail, and the entire system still runs.



LEO:  How much does that whole setup cost?  You're talking five grand, easy.



STEVE:  That's about right, yeah.  But I won't have to worry about it.



LEO:  Ever.



STEVE:  So - ever, yeah.



LEO:  Well, and I'll back you.  I don't go that crazy.  I'll back you, but I don't buy a computer now, even this big iMac, this 27-inch iMac right here that I use, it has a 256GB solid-state drive and a spinning drive for data.  So it boots and runs apps off the solid-state drive.  All my laptops now have solid-state drives.  I don't do full-disk encryption.  And I think that that's a good reason maybe to be suspect of those SSDs because as far as I know, I mean, we had Allyn Malventano - I asked Allyn, and he gave me a way to do it.  But really it's not something you might want to do on an SSD, I guess, I gather.



STEVE:  Typically, laptops do support drive passwords.



LEO:  Right, that's sufficient.



STEVE:  And all the SSDs support - yes.  A drive password, I mean, most of the SSDs now will incorporate their own encryption.  And so if you give the drive a password, then it's encrypting itself on the fly.  So that's going to do the job.



LEO:  That's sufficient.  All right, good.



STEVE:  So, yeah, yeah.  So...



LEO:  Again, no, I love it.  The speed difference is huge.  It's well worth the price.



STEVE:  It is.  Now, of course the problem is no one is going to afford a terabyte SSD.



LEO:  No.  Well, that's why I compromised.  Now, they do make hybrid drives which Allyn, again, Allyn Malventano from PC Perspective is the SSD king, and I defer to him in every respect.  He says those hybrid drives don't - they're kind of a mix - don't do as well.  But I did the same thing, in effect, by having an SSD boot drive and a data drive, a terabyte data drive.  Now I've got the best of both worlds.



STEVE:  Yes.  And I hope you're swapping over on the hard drive, not on the SSD.



LEO:  Yes.



STEVE:  Because that's what you want to do, too.



LEO:  Right, right.   Let's see.  By the way, there's an interesting, according to aos101 in our chatroom, there's a Slashdot discussion about the fact that Firefox won't compile on a 32-bit linker anymore.  So actually apparently it happened last year with 2GB.  So they added a 3GB switch to the Windows build servers.  And apparently it's not going to - it's good.  If you want to read more about it, the developer section of Slashdot has a very complete discussion.



STEVE:  Incredible.



LEO:  Yeah, it's really interesting.  Really interesting.  All right.  Moving along to our next - now, every time I do that, I lose the question.  Here we go.  Jared.  Is this the guy who wants me to talk in Australian?  Western Australia?  He wonders about...



STEVE:  No, he's Australian, but no.  I think we have...



LEO:  He doesn't want me to.



STEVE:  Believe me, we don't have an Australian who wants you to use your Australian accent.



LEO:  Oh, oh, good.  All right, that makes sense.  It's not an Australian.  All right, I get it now.  Jared in Western Australia wonders about web browser referrer headers:  Regarding the referrer header for a browser - by the way, he misspells "referrer," spelling it correctly with two - with three R's.  It's so funny that it's misspelled in the...



STEVE:  In the spec.



LEO:  ...in the spec.  So as a result, all the libraries, everything have to use two R's, R-E-F-E-R-E-R, three R's, actually it's four R's.  They don't double - they don't have a double R.  Anyway, regarding the referrer header for a browser, Safari in this example, why are the headers grouped as they are?  For example, some websites can work just fine on the iPad 2 with its larger screen area, 1024x768, same as many laptops.  Gmail works great with full-blown navigation.  But instead the website says, oh, you're on an iPad, I'm going to take you to the mobile domain.  Based on this, it appears the referrer header is grouped so that iPhone, iPad, Mozilla are all grouped as one.



My thinking is, since iPhone/iPad are on the same line - see, he's misunderstood this completely - from the website's perspective, it's still a mobile browser, regardless as to whether it's capable of displaying a full-blown page or not, thereby eliminating user experience.  While it's true some websites do give you a link to navigate to their full website, others don't.  Is this a limitation of the referrer header somewhere in the chain?  I don't mind the m. sites on an iPhone, as it is mobile suited, but an iPad?  Is there any resolution, apart from using a desktop browser or hoping the web developer has linked you to their full-blown version?



STEVE:  So as you spotted, Leo, Jared's a little confused.  It's not the referrer header, it's the user agent header.  The user agent header has been around since the beginning.  And we've discussed it in the past because it can also be a little bit of a privacy concern.  Add-on things that you incorporate in your browser, like accessory packages or libraries that the browser has, can all tack their own version numbers onto the user agent so that every query your browser makes announces that this is the user agent that is sort of the client, the browser client, that is making the query.  The logic, the concept was in the beginning that, if some user agents, for example, well, like really old ones would have been text only.  They didn't handle graphics.



LEO:  Links.



STEVE:  So, exactly, links.  So the server could see what was making the query and then serve different content depending upon the requirements.  It used to be that the user agent would also contain and state the resolution of the user's screen.  Presumably, similarly, the server could then return content suited for the resolution.



Now, the reason Jared's question caught my eye is that I, too, and maybe you, too, Leo, have been annoyed when, for example, using an iPad, I'm given a much feature-stripped website which just doesn't do the same thing.  And in fact, I have two different tokens registered for PayPal.  I've got my original football, and I also have on my - I've got the VeriSign VIP on my BlackBerry, so that I'm able to use either.  Well, what that means is that, when I'm using PayPal, and I log in, and they want my one-time password, they take me to a dropdown box where I choose which one.  The problem is, the mobile version of PayPal doesn't offer that.  So I'm unable to pay with my iPad because PayPal sees that I'm using an iPad, gives me their mobile version that doesn't offer me the option of specifying which one of the tokens I want to use.  So it's like, argh, you know.



LEO:  But that's not - it has nothing to do with how the browser's identifying itself.  The browser's identifying itself.  It's the website that's deciding what to do with the identification.  So go to the - complain to the website, not to, I mean, it has nothing to do with the browser's agent string.  The browser should always say what it is.



STEVE:  Oh, I completely agree.  It's just it's an annoyance that the...



LEO:  It's totally annoying, but that's the website's fault.



STEVE:  Correct.



LEO:  It's stupid.



STEVE:  Although there have been instances where, I mean, there are add-ons, for example, that allow you, not for iOS...



LEO:  You can change the user agent, yeah.



STEVE:  Exactly.  And in doing that you masquerade what you're using, and you could tell the website, no, I'm not a mobile platform.



LEO:  Right.  Yeah.  But that's - it seems like not a good solution, really.  The website, you just send a note to the guy who did the mobile website.  And I hope we don't do that.  I'm pretty - I think I'm pretty careful when we do our websites to treat the iPad as a desktop browser.  But  maybe not.



STEVE:  And that would be the right thing, yeah.



LEO:  Yeah.  Because, I mean, it really is.  It really is.



STEVE:  Yeah, it is.



LEO:  Yeah.  If you go to Leoville.com on an iPhone, you get this - I have a very nice mobile template.  And the way it works, it's a WordPress site, the way WordPress works is it looks at the user agent, says oh, you're on an iPhone, good, I'm going to give you this nice mobile site.  And I'm pretty sure, I'll have to check it on my iPad, but I'm pretty sure it does not do that on the iPad.  It's smart enough to say, oh, no no no, you can see the whole thing.



STEVE:  Yeah.



LEO:  Chris Wronski in Illinois asks us about alternative PDF readers:  In Episode 332 you talked about alternative readers for PDF documents.  I wonder if you and Leo would share your favorite choices?  You first, Steve.



STEVE:  Well, now, I have to defer to you, Leo, because I purchased years ago a bunch of copies of, I'm not proud to say it, but Adobe's Acrobat, the full Acrobat system, the whole document preparation system and all that, which I've been moving forward and upgrading over time.  So it incorporates along with it a plug-in for reading.  And so I've got literally Acrobat Reader as opposed to just the regular PDF reader.  So I haven't had to go looking for other stuff.  So unfortunately I'm not a good resource for this.  But I know that you are.



LEO:  Oh, well, in some ways I'm not because on Macs of course you've got built-in software.



STEVE:  Built-in.



LEO:  And there are third-party programs, like one of our sponsors, Smile Software, makes PDF Pen that lets you make them editable, fill out forms and stuff like that.  So I have a series of tools that I use on the Mac, and I don't need anything from Adobe.  And I'm very careful not to download anything from Adobe on the Mac.  On the Windows side I use Foxit, which I like a lot.  They make a distiller as well as reader.  There's a free reader, but I pay for Foxit Phantom, which is the full thing.  A lot of people like Cute PDF.



STEVE:  Yes.



LEO:  Which is another really good one.  There's one, I think it's free, called Nitro, that a lot of - so readers should be free.  A viewer should be free because it's not creating PDFs.  So Foxit Reader is free.  Actually Chrome will read a PDF.



STEVE:  Oh, I knew they were going to.  Has that been now...



LEO:  Yeah, I believe so, yeah.



STEVE:  Okay.



LEO:  So if you're using Chrome, you don't need anything.  Let me see if there's any open source - I'm just going to look here and see if there's any open source for Windows.    Because that would be nice.  I bet there are.  I bet there are.  But I would say Foxit is my favorite.  And I pay for the full Foxit because I think it's good.  Although, ironically, they had similar security issues to Adobe's, which they fixed.  But nobody's immune.  No software is perfect; right?



STEVE:  Yup.



LEO:  PDF, somebody - Dark in the chatroom is asking, is it an open format?  I don't think it's an open format.  But I think it's specified.



STEVE:  I think they did put - it's in the public domain.



LEO:  It is, okay.



STEVE:  But I think it probably carries Adobe's copyright.



LEO:  Something like - yeah, so it's a mix.



STEVE:  Yeah, yes.



LEO:  If you don't mind using proprietary software, I like Foxit a lot.  FoxitSoftware.com, and it's free.  So I think that's a good choice.  And they don't have - I'm pretty sure they don't have the switch that we hate so much that allows it to execute JavaScript and other programs within the browser.  Or within the reader.  Pretty sure that's missing.



Peter in Sydney, Australia solves the "unplug your phone once charged" mystery.  Oh, we were talking about this.



STEVE:  And this actually is the one I was referring to, so we really have covered it.  But we can just read it real quick.



LEO:  Yeah.  He says Nokia started this, and I think other phone companies now do it.  I know my Samsung does it.  The iPhone does not.  Once it's charged, it says, in fact maybe all Android phones now do this, it says "It's charged.  Unplug your charger."  And he points out chargers consume power even if they're not plugged to a phone.  And so that's why they're saying that.  It's to save power.  I don't - it's not much.  But cumulatively, millions of wall warts all over the country, all over the world, that can add up.



STEVE:  And you know there are different technologies for chargers.  The old-school black blob actually had a transformer in it, and you could put your hand on it...



LEO:  It's hot.



STEVE:  ...and it's warm, yeah.  I think that Apple's is a much newer technology switching charger.  And so it may very well be that it is not drawing quiescent power when the device is not actually using it.



LEO:  Switching, though, is much more expensive to implement.  And that's, of course - figures Apple would do that.



STEVE:  And it makes them so tiny and cute and white and everything, yeah.



LEO:  And white.  All switching power supplies are white.  Tom Burns in Chicago comments about Password Haystacks and Password Honeypots.  He says, "If Leo is reading this on the air, I request his Australian accent as my favorite."



[Australian accent] Hey, Steve.  Perhaps this is a bit obvious, but I thought it was worth mentioning.  I'm not going to read the whole thing that way.  We would lose our entire audience.  First, no matter how long your password is, if it's the same across sites, then it's susceptible to password honeypots, sites that would capture your username and password either intentionally or through being compromised, and attempt to reuse the password and ID elsewhere.



So let's say you sign up for Twaller.com thinking it's Twitter or something, and you give it a login, a password, unique, but except that you use this same password everywhere.  Then they would know and try your password elsewhere.  Second, and perhaps this is a bit farfetched for the moment, any site that can capture your password and initiate a robo-login attempt with the same credentials across all of the common banking sites can be trained to look for low-entropy passwords and flag the padding for human investigation.  Oh, that's interesting.  If your technique of password padding became commonplace, this would be the next logical place for hackers to go.  I don't think so because there's so much low-hanging fruit, they're not going to do any extra work.



STEVE:  Exactly.



LEO:  Your listeners may want to either not use padding for less than completely trusted sites or have different types of padding for different types of sites.  Tom Burns in Chicago.



STEVE:  So this notion of a password honeypot was interesting because I took it to mean something, a variation on things we've seen before.  Remember once upon a time there were sites that offered you to sign up for contests.  And, for example, we know...



LEO:  Punch the Monkey and all that stuff, yeah.



STEVE:  And they would, yes, and they wanted your email address.  And, I mean, you ended up getting spam as a consequence of that.  So they were harvesting email addresses and telling you that, oh, sign up for this, and then we're entering you in a drawing, and there's a chance, I mean, we're talking old school.  This was a long time ago.  But a lot of people were doing that.



And so you could certainly imagine a site which wants you to create accounts, asks you to create an account where you identify yourself with your email address and a password.  They're not saying use the same - they're not explicitly saying use the same password you use everywhere.  But they're assuming that people are going to, if they're not very security conscious.  And then they go and try to log on with the same credentials in lots of other common websites.  And if someone is using the same email address and password, that's going to succeed.



So it certainly is possible for a malicious password honeypot site to be created.  And I wanted to take this opportunity, one of the reasons I saw this question, is just to remind people that I've, with things like Password Haystacks and the one-time passwords and Off The Grid and all these things that I've done, those have been sort of research and experimental things.  I'm using LastPass.  I'm completely happy with LastPass. 



LEO:  Yes.  And you're generating a fresh password each time.



STEVE:  Oh, absolutely.  I've got something, I mean, I'm now dependent upon LastPass.  Every so often I'll get worried about the fact that I don't know what any of my passwords are anymore.



LEO:  Right.  Me, too.



STEVE:  So I'll make a backup copy of the LastPass Vault offline so that I have it all.  And sometimes something, if I don't have it, it's like, oh, shoot.  And I'll have to go manually open up my LastPass Vault.



LEO:  Right, turn on LastPass, yeah.



STEVE:  Yeah, exactly.  I mean, but the good news is it saves us from these kinds of vulnerabilities.



LEO:  Right.



STEVE:  So just wanted to make sure that people know that I'm still LastPass.



LEO:  Yeah.  And then I also use - the key is don't use the same password all the time.  And I use a variety of ways to generate passwords for sites.  Let's leave it at that.



STEVE:  Yeah.



LEO:  Steve in Piscataway, New Jersey suggests that the "Router Reboot" problem is not so bad:  Regarding the router rebooting which allows direct PC connection to the 

Internet - I mustn't have been here when you discussed this.



STEVE:  Right.



LEO:  Isn't it true that a PC that has already booted has a locally assigned IP address (e.g., 192.x.x.x)?  If so, doesn't that mean that it is not routable from the Internet?  Therefore there's no exposure, unless the PC happens to be rebooting at the same time the router is in "switch mode"?  You're going to have to 'splain to me.



STEVE:  Yeah, it's interesting, Leo, it was something that came up, I think when you were in Paris.



LEO:  Yeah, must have been.



STEVE:  And that is, it was revealed that some of the fancier routers that are doing a lot of things are, as we know, typically a Linux OS; but that the other layers of technology, like the NAT and the stateful packet inspection firewall and so forth, are additional services that do not start up immediately.  And we heard it has been verified that some of these routers are simple bridges between the Internet and your internal network until they get fully booted, which means your home network is exposed to the Internet with no protection while the router is rebooting.  Isn't that interesting?



LEO:  Hmm.  So...



STEVE:  And it is the case.



LEO:  It is the case.  Hmm.



STEVE:  Yes.  So what Steve has said is, like, wait a minute, the machines on your home network would be private IPs, 192.168.what.what.  So even if the router was rebooting, your machines would still have a private IP so they wouldn't be able to get on the Internet.  What we realized a couple weeks ago was that, if your PC was asking for DHCP renewal, if you were renewing your DHCP lease, while the router was rebooting, you would actually - it would pass right through the router, and you would get a DHCP IP from your ISP, that is, a public IP rather than a private IP, because your router is just bridging the Internet traffic through.



So Steve's right that your machines on the private LAN would have private IPs.  But the important thing is that their stack, their TCP/IP stack, would still be exposed directly.  So it's not that they wouldn't be able to get on the Internet, which they wouldn't because they'd have a private IP, 192.168.whatever, but that incoming traffic would be passing directly through the router and hitting their machine.  So the good news is, and we did talk about this at the time, most PCs have software firewalls now that are running, that are protecting them themselves.  But on the other hand, we are depending upon our routers often for security.  And so it is the case that the router is not providing us that unsolicited incoming packet dropping and security during this interval, until it finishes booting.  So I would contend there is still some window of vulnerability which is just to sort of keep aware of.  Yeah, interesting.



LEO:  Anthony in Oregon wonders what to do when updates fail:  Hi, Steve.  I'm sure you know some of Microsoft's updates fail, for instance the latest one, KB2618444, the cumulative security update for IE 9.  Even the support forum hasn't been much help.  I do not use IE, but I want to keep it up to date, of course.  Will my system not having this update adversely affect my security, even though I don't use Internet Explorer at all?  And, if so, how can the updates that fail even after multiple tries be downloaded?  I don't remember this subject specifically coming up on the Security Now! podcast.  No, but it comes up all the time on The Tech Guy.  If you think it's relevant, maybe you could address it briefly.  I've been listening to Security Now! for years and enjoy it very 

much.  Keep up the good work.



STEVE:  And Leo, I don't know if you've got any magic solution.



LEO:  Oh, I do, yeah.  Comes up a lot.



STEVE:  Yeah.  What do you tell people?



LEO:  Well, there's two things.  I'll answer both questions.  First of all, updates, think about it, if you're doing an update in place of an operating system, it's like changing the table cloth by whipping it out and putting a new one in there.  It's not always going to work.  In fact, it's amazing it works as well as it does.



STEVE:  That was going to be my first comment, was I'm not surprised when it fails, I'm surprised when it doesn't.



LEO:  I mean, really, you're modifying a system, you're building a plane while it's in flight.  You're changing the engine, so - to add yet another metaphor.  So when they fail, what happens often is - and this is actually the more serious issue.  If an update has failed, it will not then go on to do other updates, and you will not be able to add future updates until that one update gets done.  It's blocking.



So Microsoft has a very long tech note - I'll see if I can find it again, we put it in our show notes all the time at The Tech Guy show - explaining the 38 different things you can try if you've got a failed update, including clearing the registry.  Mostly it's clearing a registry setting, undoing it and so forth.  Now, if you have an update that you really want, you don't have to use automatic update, in-place update.  You can change Windows Update.  If you go into Windows Update and go into the settings on the left there, you can do a - because think about this.  Administrators at a business with hundreds of PCs, they don't want to go to each PC one by one and do an auto update.  They download the file once and then apply it over the network, or they go from machine to machine.



So Windows Update does allow you, you can actually go to the updates and download individual update files all by themselves.  This is what I do, for instance, for system packs because they're so big.  I just want to put the 700MB download on a USB key and then update all my various systems, yeah.



STEVE:  And carry it around, yup.



LEO:  So you can go into the settings of - I don't remember the step-by-step, but it should be pretty apparent.  Go into the settings and go to, I think it's called the "Catalog" of updates, and go to individual updates and get them.  If it's stalled, though, I'll tell you before this show's over - we've got a couple more questions.  I'll let you answer those, and I will find the knowledge base article.  You can also Google - go to Microsoft.  Don't even Google it.  Microsoft has a great site, support.microsoft.com, where you can search for "failed update," and you'll find all the articles in there and all the different things you can do.  But the problem is it's not just one thing.  There's a variety of different solutions, depending on how it got stuck.  And it happens all the time.



STEVE:  I know.  I've got several machines which I've - like older machines that have just stopped being able to be updated because something, a screw loose, occurred.  And it just, like, says, okay, updates have failed.  And it's like, okay, you know.  And I've rebooted.  And sometimes if they come up - if Microsoft comes up with a service pack, that'll sort of flush everything and make it current again, and it'll kind of come back to life.  And I've sort of screwed around, rebooted a few times, and it's sort of, like, oh, look, it's fixed itself.  But it's, I mean, it is black magic.



LEO:  Yeah.  They'll get stuck.  Here's an article updated on Halloween 2011, appropriately, Rev. 7.0 of this article.  It's at the support.microsoft.com site, Article No. 906602:  "How to Troubleshoot Common Windows Update, Microsoft Update, and Windows Server Update Services Installation Issues."  And it's really kind of a meta article that will link to a lot of other articles that will help you a little bit.  And there's, as you can see, there's, well, let's see, I can't even count the number of related articles, various error codes and so forth.  So there you go.



STEVE:  Yup.



LEO:  Windows Update stalled, Windows Update failed, Windows Update blocked, all of that stuff.  There's a lot of different ways to do it.  Most of the time you just edit the registry to say, hey, start over.



STEVE:  Or there is the reformat command.



LEO:  Well, it's funny because somebody in our chatroom said, "I had this happen to me, and Microsoft sent me a Windows 7 DVD and said, 'Just reinstall.'"  It's a good solution.



"Gord" corrects Episode #332 about the HP calculator.  He said:  You said, "Ever since I was in high school, I 

spent the $400 I saved up from a summer job to buy myself the HP-41, which was the very first scientific calculator HP produced.  So I have long loved those machines."  He says:  Steve, actually it was HP-35 was the first scientific calculator.  He knows, because he still has it on his desk along with his Pickett metal slide rule.  Yeah.  The original HP-35s were distinguished as they did not indicate the 35 on the front label.  It was only after the introduction of the 45 did they have to put "35" on the old ones.  I also have a 15c I still use on a daily basis.  He must be an engineer.  Regards - or he's a nuclear scientist.  So it's the 35.  35 is the legendary HP calculator.



STEVE:  Yep, and that was what I purchased.



LEO:  Of course it was, yeah.



STEVE:  In the magazines they had - it was so revolutionary that they had a actual size photo of the front of it.  And of course, being the hypernerd that I was, I cut it out, mounted it on cardboard, and had it in my pocket.  Oh, goodness, I was insufferable.  And I remember practicing RPN on this piece of cardboard while I was saving up my money...



LEO:  Waiting.  Aren't you sweet.



STEVE:  ...from my summer job.



LEO:  That is the sweetest story I ever heard in my life.  He made a cardboard replica so he could practice.  What are you, four?  That's very cute.  That's very cute.  I had - but you must have had slide rules, too, those Pickett slide rules?  Remember those?



STEVE:  Yeah.



LEO:  Picketts were the aluminum; right?



STEVE:  Bamboo, baby.



LEO:  Bamboo is the way I went.  I'd go bamboo.  But I had the - I had a couple.  Picketts were cheaper.



STEVE:  Yep.  The bamboo was self-lubricating.  And of course, and it wouldn't expand and contract with temperature.



LEO:  As the aluminum does, of course, yeah.



STEVE:  Exactly.



LEO:  And the aluminum you had to use a pencil graphite to lubricate those.  You know, my father-in-law, Jennifer's dad was a science teacher in high school.  And he has - remember in high school they had the giant slide rules so  they could teach you how to use a slide rule?



STEVE:  The demonstration slide rule, yup, with big eye-hooks so that it would hang above the blackboard.



LEO:  She has one.  I'm dying to get it.  I would love to put it right here, hanging up right there.  Wouldn't that be great?



STEVE:  Or maybe just kind of lean it against the wall, sort of like skis.



LEO:  Yeah, because they're, like, four or five feet.  They're big.



STEVE:  Yeah, yeah.



LEO:  Really want one of those.



STEVE:  That's neat.  So, yes, it was an HP-35.  I still have it in its original box and packaging.  It's in my memorabilia box somewhere.  And it used an LED display, the old seven-segment display.  And, yup.  And, oh, and I did get confused because the 41, it was a - I also had an HP-41.  That was the LCD calculator that had four little module slots on the back.  And you could plug in, there was like a...



LEO:  Oh, fancy.



STEVE:  ...barcode scanner and a printer and other things.  And the batteries lasted way longer on that.  I think that one used "N" cells, as I recall.  And that was a beautiful calculator, too.  Yeah, I've always been an HP calculator person.  And at this point I'm not changing.  TI will never get me.  I'm an RPN...



LEO:  TI was the cheap guy.  But RPN, for people who say, no, that's confusing, it just makes sense.  You put the operands first, and then you put the operator.  That just makes sense.  And it's much easier to program, if you think about it.  It's stack-based; right?  You push the operand, if you're doing one plus one, you push one.  Then you push another one.



STEVE:  Enter it.



LEO:  Enter it.  And then it's just a stack.  And then you put the operation, the plus, and it consumes the top two things on the stack to make the result, which it pushes on the stack.  It's really - that's why they did RPN, because these were very primitive devices, and they couldn't make the programming too complicated.  And that's how they did it.



STEVE:  Yeah, it's just - I just - it's perfect.



LEO:  Yeah.  Tom Walker, Littleton, Colorado has the Bonus Question of the Week:  Thanks for the great show and thorough prep work you put into it.  Yes, Steve does work so hard, probably harder than any of our other hosts.  You really put hours, I don't know how many hours every week into making this show happen.  I thank you from the bottom of my heart.  He says:  I'm curious.  We get this question every darn show.



STEVE:  I know.



LEO:  We need an FAQ.  What are the three boxes of flashing lights over your left shoulder?



STEVE:  I figured once a year, for people who are watching the video...



LEO:  Once a year.



STEVE:  I guess you must see it in the IRC chatroom.



LEO:  The chatroom, every single show.  In fact, I think there's probably an FAQ somewhere, like in the wiki or something, because they put a link in.  They say, yes, here it is, here's the answer.



STEVE:  So, Tom, those are reproductions of the classic original Digital Equipment Corporation (DEC) PDP-8 mini computer, which I built a few years ago from a kit which was made available.  And I participated in the creation of the kit, and actually a number of our listeners purchased them and built them also.  So I have them running because that's pretty much all they're good for is flashing...



LEO:  Is blinking lights.



STEVE:  Is blinking the lights.



LEO:  Very fancy blinking lights.



STEVE:  But I grew up watching "Voyage to the Bottom of the Sea" with the Seaview and the computer and "Time Tunnel" and "Lost in Space."



LEO:  Yes, me, too.



STEVE:  And you've got to have banks of blinking lights.  That's just part of the thing you need.  So I figured, in my own little way, I have some blinking lights going on.



LEO:  Aren't you cute.



STEVE:  And every so often I look at them, and they warm my heart a little bit.  It's like, aw, remember them.



LEO:  And you have a whole page dedicated to these on your website, by the way.



STEVE:  I've got a whole subsite with the code that I wrote and the creation of those and demo videos that show how they work and what they do.  So, yeah.



LEO:  GRC.com.  There's a menu item that says "PDP-8."  Check it out.



STEVE:  Yup.



LEO:  And that concludes our Q&A for this week, Q&A #134.  We'll do another one in two weeks, and you can always go to GRC and ask a question.  People will say, well, Steve never answers my question.  How many questions a week do you get?  I mean...



STEVE:  It's okay.  Actually - I guess I deleted the file.  I'm actually processing the history of submissions to Security Now! because I had - the testimonials that I had posted for SpinRite, I hadn't updated them since '06.



LEO:  Wow.



STEVE:  And so people were thinking, wait a minute, nobody has given a testimonial since 2006?  What's going on?  So I thought, okay, I've got to fix that.  We have had 47,000 questions submitted, or submissions.  Of those, 6,700-some, I don't remember the exact numbers, but 6,700 mentioned, have the four-letter word "spin" in them.  So, and of course many of them are not testimonials.  Some are just people saying, by the way, I got a copy of SpinRite, just blah blah blah.



But so anyway, yes, the fact is, every time I check the mailbag - and I get the mail every two weeks.  I pull it from the server for the purpose of preparing the Q&A.  And as you say, Leo, I do spend hours.  But I just can't read the 300 submissions that I get.  So I read enough to get 10 to 12 good ones like we just had.  And then it's like, okay.  And if I had more time, I would.  But I've just got to get other stuff done.  You can see I didn't even shave today because the Iowa Caucus was yesterday, and I kept...



LEO:  Were you up all night watching the votes?



STEVE:  Waiting to see what...



LEO:  It was close.



STEVE:  Oh, goodness.



LEO:  Right now, I'm just looking, right now it's...



STEVE:  Eight, eight.



LEO:  No.



STEVE:  It was a difference of eight.



LEO:  It's down to one.



STEVE:  No.



LEO:  I'm looking right now.  Maybe, wait a minute, maybe was that a - no, no, yeah, it's down to one.  It's as close to a tie as you can get.



STEVE:  That's incredible.



LEO:  But it's just a caucus.  I don't know...



STEVE:  But it's just fun to watch.



LEO:  Yeah.  It's a straw poll.  It's not in any way anything binding.  But it is fascinating that it was that close.  Especially since Romney spent a lot of money there, and I think Rick Santorum spent, like, nothing.



STEVE:  Yeah.  But he spent a lot of time.  Rick went all over.



LEO:  He went to every county in the state of Iowa.  Google may say eight, but I'm looking at - it does say, CNN - see, I don't know if we're looking at - CNN might be going, you know what, they're going back through their coverage, that's what it is.  So it was one, and now it's eight.



STEVE:  Oh, okay.



LEO:  I don't know.  Amazing.  What's the difference?  What's the statistical difference?



STEVE:  Out of, what was it, it was 30 - it was a little high.  They both got more, Santorum and Romney both got a little more than 30 each.



LEO:  Yeah.  So that's - and that's just the two of them.



STEVE:  Yes.



LEO:  Wow.  You'd need more than a slide rule to - a slide rule would not give you enough precision to calculate that.



STEVE:  So if anybody's interested, the next Republican debate is this coming Saturday, and then the one afterwards is the following Sunday on NBC's "Meet the Press" on Sunday morning.  But ABC is doing a Republican debate next Saturday.  And we're doing our next podcast next Monday.  So...



LEO:  Do that in Reverse Polish Notation.



STEVE:  Exactly.  So that one's going to be on WPS, the WiFi Protected Security problem



LEO:  Oh, good.  Oh, good.



STEVE:  Which caused us last week to immediately advise everyone to disable it if they can.  We're going to go in detail and in depth into how it works and how it's broken.  So that's our topic for next week's Security Now!.  But we are recording, as you reminded me, Leo, and we'll remind our live listeners, at 9:00 a.m....



LEO:  A.M. Pacific.



STEVE:  Monday, Pacific time.



LEO:  Yeah.  That's noon Eastern, and it's 20, no, I'm sorry,  nine plus eight is 1700 UTC, if you want to watch live.  But, you know, you don't have to watch live because we make audio and video versions available for download after the fact.  Steve's got 16Kb versions, if you want the tiniest thing.  Well, no, there's something even tinier.  He also has text transcriptions.



STEVE:  I do.



LEO:  So that's the smallest version, if you want to just read Security Now!.  We have the audio and video on our site, TWiT.tv.  But if you go to GRC, do check out SpinRite, the world's best hard drive maintenance and recovery utility, and all the free stuff Steve gives you, including the information about Password Haystacks, ShieldsUP!, and on and on and on.  Steve, thank you so much.



STEVE:  A great pleasure always.



LEO:  Next week, WPS.



STEVE:  And thank you for moving the podcast forward before you take off to CES, the Consumer Electronics Show, where you guys will be broadcasting all next week for - live, I guess, right?



LEO:  Yeah, tons, all day and then part of the evening, too.



STEVE:  Cool.



LEO:  Thanks, Steve.  We'll see you next time on Security Now!.



STEVE:  Thanks, Leo.



Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#335

DATE:		January 10, 2012

TITLE:		WiFi Protected (In)Security

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-335.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  After catching up with only a small bit of the week's security news, Steve and Leo discuss the recent revelation of a fundamental security flaw in the functioning of the WiFi WPA standard.  WiFi Access Points, following the certification-mandated default configuration, allow an attacker to obtain network access within just a few hours.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 335, recorded January 9, 2012:  WiFi Protected (In)Security.



It's time for Security Now!, the show that protects you online, your privacy, your security, and also teaches, I think, a lot about how things work.  And that's because this guy, Steve Gibson, is a great explainer.  He's the Great Explainer, the Explainer in Chief, from GRC.com.  Hi, Steve.   



STEVE GIBSON:  I like "Explainer in Chief."



LEO:  I know.  I'm going to call you that.



STEVE:  That's better than "the man, the myth, and the legend."



LEO:  I'm going to say it that way from now on.  I've got a new title for you.  Steve and I are up early - it's 9:00 a.m. roughly, Pacific time - because I'm headed off to CES this week.  So just a word of warning.  For those of you listening to the recording, you may have noticed you got it early.  And we recorded this on Monday, so anything that happened on Tuesday and Wednesday, which would normally be in the show, will not, and we'll just cover it next week.



STEVE:  Such as the second Tuesday of the month.



LEO:  Which is tomorrow.



STEVE:  Patch Tuesday, the first patch round of 2012, is tomorrow.  And we don't have full details from Microsoft about what they're doing.  As they do, they preannounced sort of the number and the criticality of the patches.  So that we know about, and we'll talk about that briefly.  But we don't know in super detail what it exactly is that they've done.  So, yes, as you say, we'll deal with that retrospectively next week, since this is coming out, we're doing this on Monday before Patch Tuesday for a change.



LEO:  All in good time, as the Wicked Witch of the West...



STEVE:  So, yes, as Explainer in Chief today I'm going to have some fun.  We're going to, as we promised last week, plow into the details of a new and very worrisome revelation which it turns out has been suspected and even exploited for a long time before it came to light, as it recently did.  And that is the fact that it's possible, using the simple security setup protocol which any Wi-Fi Alliance, WiFi certified device must support, it's possible typically in only a few hours to hack into the security of a WiFi access point and obtain the credentials, get on the network, and do all the bad things.



LEO:  You'd have to be sitting on the curb, though; yes?



STEVE:  Yeah.  You would need to be within range.  And in fact it turns out you need to have a pretty strong connection.  There's a lot of associating and disassociating, a lot of failed attempts.  And so what the people experimenting with this are finding is that they have to have a pretty strong signal from the access point.  But if you - in a typical apartment these days you look at all the networks which are "within range," and more and more of them are now of course saying that they are secured.  The problem is, not only does this technology have to exist, but in order to be certified - get this, Leo - it must be enabled by default.



LEO:  What?  Certified by what?  By whom?



STEVE:  By the Wi-Fi Alliance.  In order to be able to have on your access point that you are WiFi certified, to be able to use...



LEO:  Not WPS certified.  WiFi certified.



STEVE:  Yes.  To have WiFi certification you have to support this easy setup protocol, which we now know is vulnerable, and it has to be enabled by default.



LEO:  Now, their hearts were in the right place because the whole idea of this is, oh, my god, nobody knows how to set up WiFi securely.  If we put a button on the access point that you press that sets it up automatically for you, everybody's going to be more secure.  So, I mean, they weren't - this was - the intention was good.



STEVE:  Well, actually I have the 154-page specification in front of me.



LEO:  Oh, boy.  Oh, boy.



STEVE:  I spent the weekend reading it.



LEO:  Oh, man.



STEVE:  And I understand how this happened.  That is, I understand the nature and reason for the mistake that they made and the way this slipped by.



LEO:  Aha, okay.



STEVE:  Which we're going to get to in the podcast.



LEO:  So it is one of those things like WEP where the best intentions went awry.



STEVE:  Yeah.  Yeah.



LEO:  All right.  Well, we don't have any commercials today.  So you might as well just launch right into it.



STEVE:  Okay.  So I briefly mentioned that we have a Patch Tuesday coming up relative to this week's recording.  It's tomorrow, on Tuesday.  And there are seven security bulletins which address eight vulnerabilities in Windows and some dev tools.  So it's a relatively small one.  One of those is critical.  We don't yet know from Microsoft whether they've addressed the SSL/TLS vulnerability.  They were going to do it last month but pulled it at the last minute because of some compatibility problems that they discovered.  So maybe they'll do that, and maybe not.  But we'll tell everybody next week what it was that they got.  But do be aware that our systems are going to be saying, oh, there's new patches available, and probably a good thing to do.



There wasn't much other security news.  I did get a kick out of a Forbes article that talked about Apple having a patent on - get this, Leo - a password recovery charger.



LEO:  Charger?



STEVE:  Like, charger.



LEO:  Like that, like, plug-in thing?



STEVE:  Yeah.  The idea is - and Apple patented this.



LEO:  Now, we should say they patent things all the time.  Doesn't mean they're going to make them.



STEVE:  Yes, they do.  We may see it or not.  The idea being that somebody who is out and about with their laptop, who forgets their laptop's password, can come home, plug their laptop into their charger, and their charger will enable password recovery.  So the idea would be that something about the charger is able to authenticate itself.  For example, maybe the charger would have a serial number, and all of those are unique, and so your password is saved in the laptop encrypted under the charger's identity.  So only when your charger is remated with that laptop do you have the ability - so basically the charger would be another factor of authentication.



LEO:  Oh, that's not a bad idea.



STEVE:  It would be - we've talked about multifactor authentication.  And so this patent that has been seen would allow a specific charger to be another factor in multifactor authentication for the sake of allowing lost password recovery.



LEO:  Of course, everybody leaves their chargers in hotel rooms, and I can just see the problems this is going to cause, but...



STEVE:  Exactly.  So it's like...



LEO:  ...it's an interesting idea.



STEVE:  ...someone had an idea.  Someone said, oh, patent that.



LEO:  Yeah.  And that's what happens.  They've got a whole building full of people to do that.



STEVE:  Yeah, got to keep those patent attorneys busy.



LEO:  Yeah, exactly.



STEVE:  Now, I didn't want to go into much detail on this mass SQL injection attack which is underway.  But it's now up to about 200,000 URLs have suffered yet another SQL injection.  And we've talked about this ad nauseam in podcasts past, so we won't go into it in any more detail.  But the problem being, of course, that many websites are driven by an SQL database backend, and their scripting technology pulls pages, dynamically assembles pages and so forth.



For example, many online forums have a database containing all the forum postings, all of the chained comments and everything that displays these pages.  And the problem is that the act of displaying the page interprets valid SQL queries which are sent to the database and return page content.  And unless the designers of the websites are very careful, the content being returned is interpreted also.  And that allows bad guys to do what's called "injection," that is, basically, the bad guys figure out the names of your tables, the column names, the record names and so forth, and they're able to post to a forum their own SQL commands to display their own content, which the website owners don't want and, for example, spread infections or redirect people to foreign websites, basically get up to all kinds of high jinks that way.



So this is a - it's a convenience in the design of many websites which has been widely adopted, and the bad guys keep finding new ways around the filters which these technologies try to put up.  Essentially, the whole idea is prone to security problems.  So as we know, the best security is that where you only allow things to happen that you intend, rather than needing to block the things that you don't intend.  And unfortunately, the architecture of this SQL-derived backend requires that, by default, everything is allowed, and the misbehavior is blocked.  Which always means there's an opportunity for new ways for the bad guys to find ways around the blockage.  So that's what we're seeing again.  So there's another wave of this going on.



I had a note to myself from last week.  I mentioned that - we were talking about hard drives versus SSDs.  Remember, one of our Q&A questions was, Steve, what do you use, hard drive versus SSDs.  And I mentioned that I only use SSDs on laptops because they're prone to being bounced mechanically, and even that I'm setting up a new server at GRC that'll be SSD-based.  And of course the problem with SSDs that makes me nervous is that we know that they get fatigued with writing.  That is, the act of writing to them fatigues them.  And I made a comment that it's because we're essentially deliberately breaking down the insulation on a little floating island on which we have stored an electric charge.



And so that little - the island is insulated from everything else.  And the nature of MOS - Metal Oxide Semiconductor - technology is such that we can electrically sense the charge on it.  So in order to set that to a one or a zero, we use a high voltage which is generated inside of these little flash chips in order to overcome the insulation resistance and pull electrons off or put electrons onto this little floating island.  Thus, after that's been done enough, we begin to weaken that insulation layer, and that's the way flash memory dies over time.  Consequently, flash memory has, in the same way that hard drives have spare sectors which are being swapped in as defective ones are swapped out over time, flash memory has the same sort of architecture.



The point was that there are two other alternative, nonvolatile, solid-state, high-speed technologies on the horizon, and it's not one of those, oh, yeah, by 2050 we ought to have that.  I mean, HP has patented something that's called a "memristor," which sort of sounds like "resistor," but this is a resistor which changes its resistance as a function of its history.  And they're talking about having production levels of memory, like, next year.  So, and this doesn't have the problems that NAND Flash memory does that I was just talking about.



LEO:  You know what cracks me up is for years we said, oh hard - I remember saying this in 2000, maybe even earlier - hard drives would be dead by the year 2010.  Everybody will have holographic storage or some other form of random access storage.  It took us a long time.  So when you say it'll be here this year, it's like, well, yeah, but we've been waiting 10 years for something like this.



STEVE:  Right.  And there's another technology called phase-change memory that - I had a link to it, and I tried to find it again, and I couldn't find it again.  But so my point was that these are - I'm surprised when I see the sober-sounding, not only is this working in the lab, but we're in preproduction, and we should have it soon.  Which is not to say, as you commented, Leo, that hard drives are going to disappear because certainly the developers of these new advanced memories are going to want to get a premium for them.  And just in the same way that flash is still far more expensive than a hard drive, I mean, my god, you don't want to have a terabyte of flash memory; whereas a terabyte hard drive is 70 bucks now.



LEO:  Well, and of course the other thing that I think nobody counted on - I'd be curious what you thought in 1995 or 1999 - but is how much density, how much data density that hard drive manufacturers were able to jam on those disks.  I mean...



STEVE:  Yes.



LEO:  ...they really over-achieved.



STEVE:  It's been amazing.  And Leo, it's also the way the cost has come down.  I mean, we were hearing about vertical recording technology for a long time.  And it's like, instead of recording horizontally, where you lay the magnetic field down flat on the disk, they were saying, yeah, we're going to - instead of having horizontal magnetic domains, we're going to stand them up on end.  It's like, what?  What?  And it did, it took a decade from the time they had that, IBM had that happening in the lab, until you could go over to Fry's and buy one.  But it's here now.  And that's the way the density has gone up as high as it has.  But not only that, but the cost has come down just amazingly.



I looked at the underside of a drive that I have had around, but purchased in the last few months, and even the PC board on the bottom of it, it used to be that they were, like, they took the whole bottom surface of the drive, and maybe was a couple layers.  Now it's like a postage stamp, just big enough to mount the connectors for the drive.  Everything has gotten so integrated that it's like, there's not even any parts left anymore.  Just incredible.



So, okay, so that's all I wanted to talk about.  I did want to remind our listeners that SpinRite is the reason I'm able to do the podcast, frankly.  I had a nice note from two guys, Carl and Joe, in Melbourne, Australia, who sent me email saying "You Saved an Artist's Life."  And then he said "/SpinRite Success."  He said:  "Hi, Steve.  I'm an avid listener of Security Now!.  So when my younger brother Joe called saying that his hard drive, as he put it, had carked it, I knew exactly where to send him.  He graduated last year and has been really motivated to get stuck into his artwork."  They talk a little funny in Melbourne, I guess.



LEO:  Yes, they do.  Yes, they do.



STEVE:  "...to get stuck into his artwork to kick off his career."  No offense, Carl.  Anyway, he said, "His dead drive had potentially lost him years of work in progress which would be his ticket to getting his career underway.  But now all that was threatened.  He purchased, downloaded, and ran SpinRite, but he had trouble getting it to his computer, which wouldn't boot from a USB and didn't have a floppy drive.  And the computer he downloaded it to also didn't have a CD burner.  So he borrowed a USB from a friend, copied SpinRite to it, took it to his friend's place to burn a boot CD.  I actually wasn't surprised when he told me it worked.  He's now backing up all his precious artwork to DVD" - ah, he learned a lesson - "and getting on with his new career.  Thank you for saving an artist's life work.  Thank you for all your work on this wonderful product and for actually promoting it on your podcast.  Cheers, Carl and Joe."



LEO:  Yay.  Yay.



STEVE:  So thank you, guys.



LEO:  A nice story.



STEVE:  Okay.  So here's the deal with what's going on.  A couple weeks ago a security researcher by the name of Stefan Viehbock released what he thought was his discovery of a new way to brute-force an aspect of all of our WiFi networks that had not been done before.  Well, it turns out it had been done before.  It had been done for, like, more than a year, but never publicized, by a company called Tactical Network Solutions.  Now, this is one of the nice things about security researchers who discover things and go public with them, is we always wonder, well, does the NSA know about that?  Have they been doing this all along and only now, now they're, like, going, darn it, now we're not going to be able to do that anymore because everybody else knows about it.



Well, this is an instance like that.  This Tactical Network Solutions company - it's TacNetSol.com - they admitted when Stefan went public that they had very mature attack code that they'd been "using," whatever that means, for quite a while.  And so they were able to almost instantly put their code up on Google, where it is sitting, their tool they call "Reaver."  They're apparently fans of the "Firefly" series.



LEO:  Yeah, those were kind of the zombies of "Firefly."



STEVE:  Exactly.  They'd sort of - they were out on the fringe of human space and had sort of reverted to animalistic sort of tendencies.  There were, like, legends of them, about the things that Reavers did to you if you got caught by them, and none of those were good.



LEO:  No, no.



STEVE:  So you didn't want to let the Reavers get you.  And along that vein, not surprisingly, there was already another tool called "Walsh."  Walsh was the wise-cracking pilot of Serenity, which was the name of the "Firefly" spaceship.  Walsh is a scanner.  So as we would have predicted, first there's the attack tool, and now there is a vulnerability scanner which you can use to scan all the access points within range to see if they have this WPS enabled.



Okay.  So I'm sure we'll be talking about this to some degree over the next few months of the podcast because this is a, well, I guess we would call this, Leo, a target-rich environment that has been revealed.  The idea is that all access points and WiFi devices in general want to have themselves certified by the Wi-Fi Alliance.  The Wi-Fi Alliance is the standards body which was created to unify the WiFi market.  Now, that's all good because we don't want interoperability problems.  And these protocols are incredibly complex.  So if there wasn't a single weighty body that everyone had to check in with and had to, like, verify their own drivers against, their own access points against, we'd have a problem like we used to have in the old days where it's like, well, this device works with this one, but it won't interoperate with this brand because they didn't quite implement the protocols the same.  We've had those nightmares in the past.



And so I'm very glad that this Wi-Fi Alliance exists as a single point of reference that tests devices to certify them.  And only if these devices pass interoperability tests do the manufacturers get to use the copyrighted and trademarked logo that says this is WiFi Certified.  One of the things that the Wi-Fi Alliance wanted was ease of use.  And in their spec for the operation of their WiFi devices they have in Section 1.7, "User Experience" - I'm going to be quoting from the spec here because it's worth understanding the mindset that they had.  They said, "The most important characteristic of any initial setup solution is the user experience."  Okay, now, listeners of the podcast might feel that security would be an important characteristic of any initial setup solution.



LEO:  Yeah.



STEVE:  But not so much here.  User experience is the most important characteristic.



LEO:  The experience of security, not the actual actuality.



STEVE:  We'd like to give you the feeling, oh, look...



LEO:  It feels secure.



STEVE:  I just press a button.  And somehow this has all been done for me.  So they said, "This section introduces two scenarios to illustrate the WiFi Simple Configuration" - that's WSC - "user experience."  Now, this is the good experience, not that where you're getting hacked because of the WiFi Simple Configuration, we should explain.



LEO:  Yeah, oh, yeah.



STEVE:  This is the happy side.  So they said, "Sections 5, 6, 10, and 11 contain a more detailed specification of these and other scenarios."  So here we have the first, they call - the so-called "in-band setup."  "Setup steps:  One, user turns on the access point."



LEO:  Okay.



STEVE:  Okay, that's easy.



LEO:  Seems sensible.



STEVE:  "Two, software on the cell phone automatically detects the access point and asks the user if he wants to configure the access point.  Three, the phone prompts the user for the access point's PIN, found on a label attached to the device.  The user keys in the PIN, accepts the default settings and clicks okay a few times, and receives confirmation that the access point has been successfully configured on their device.



"Now, the user brings home a wireless printer and turns it on.  The phone detects the new wireless device and prompts the user to add it to the network.  The user reads the printer's PIN number from its display and enters it into the cell phone.  Both the cell phone and printer provide visual confirmation when the printer joins the network."  So this is the spec giving everyone this warm, fuzzy feeling about how easy this can be to operate.



And here we have a second example.  "Context 2:  The user has a portable game console that he wants to connect to the existing wireless LAN for online gaming.  This user prioritizes convenience over security."  I'm reading this from the spec.  "So he decides to use the pushbutton configuration method for setting up the portable game console.  Setup steps:  One, user presses the PBC button on the game console.  User presses the PBC button on the access point.  The game console and access point display the progress of the PBC method on their respective user interfaces.  Upon completion of the protocol, both indicate connection success."



So these are the scenarios which have been designed into the standard.  So the standard, and that is to say, in order to get this WiFi compliance logo that everybody wants - in fact, arguably, at least on the protocol level, needs - this WSC, WiFi Simple Configuration, must be part of the device.  So access points must have it; all contemporary access points do have it.  And that was renamed WPS, WiFi Protected Setup.  So you may see WSC, WiFi Simple Configuration, or WiFi Protected Setup.  They're sort of synonymous, essentially.  So, and there's a - at the WiFi Org, which is the central repository for all this, are a bunch of specs and papers and so forth.



Now, there are four different modes for configuring this WiFi Protected Setup.  We just heard in this example about buttons being available.  And some late-model routers will have a "press this button."  Sometimes it's on the back panel.  Sometimes it's on the front.  But that's a button which sort of tells the router to look for a device within its range that has also had its button pressed.



Now, this could be a virtual button.  For example, Windows 7 supports this protocol so that, if you press the button on the router and then you go to configure your wireless networking under Windows 7, it will see that the router is broadcasting its support of WiFi Protected Setup.  And so there is, in Windows 7, there'll be the standard "fill in your password," or it'll say, "Or just press the button, and we'll do this all for you."



So the specification indicates that the way this works is that the user presses the button on each end of the link that's going to be configured, and both ends from the time the button is pressed enable a pairing, essentially, for two minutes, which is - so there's 120 seconds they refer to as the "walk time," presumably for you to walk from one device to the other if they're not sitting at the same desk, or if they're not temporarily near each other.



So you'd press - you have a system upstairs, for example.  It's all set up and established, wired in with its keyboard and display and everything, but your access point is downstairs.  So you could start the process at either end, actually, start by pressing - on the UI screen under Windows 7, you click on "Yes, I want the simple setup."  Then you have two minutes to go downstairs, press the essentially autoconfig, or one-button setup, whatever it's called on your particular access point.  And as long as you do it within that time, your computer upstairs is still enabled for this, and the devices will pair, essentially, and you're connected with relatively good security.



Now, they recognize that there's a security concern here because a bad guy could enable pairing at the same time.  And this is all sort of like "headless," is the term they use a lot.  There's nothing that says on the access point, "This is the device I just paired with."  It just sort of all...



LEO:  That's kind of the problem, huh.



STEVE:  Yeah.  So the way that's supposed to be handled is like - and again, a lot of security focus was given to this.  One of the things that's sort of sad and funny about our whole situation we find ourselves in here is that there is, like, major crypto happening.  I mean, we've got private keys and public keys and Diffie-Hellman key exchanges and secure hashing algorithms, I mean, this thing is just dripping in 128-bit crypto flying through the air.  Yet they missed something, as we'll discuss in a second.  So it's like, here this little processor in the access point is limping along, barely keeping up, trying to do the crypto which this specification requires.  Yet despite the fact that this thing is just dripping in state-of-the-art crypto, the protocol that uses the crypto has a little mistake in it that we'll get to in a second.



LEO:  Just a little bug.



STEVE:  Just a little problem.



LEO:  Just a little problem.



STEVE:  So the way they handle this problem of somebody else waiting for you to click your access configuration button, whatever it's called on your particular access point, is there's supposed to be a light there.  And if the access point or the computer, because both are supposed to do this, see more than one other pairing opportunity, they go into a lockdown, like flashing alert mode, and just say, no no no, we're not going to do any pairing...



LEO:  [Alarm sounds]



STEVE:  Exactly, because there's more than one opportunity.  So it's like, okay, I mean, listeners of this podcast probably don't get a real comfortable feeling from this.  And here's the problem.  How many times - we're at podcast 335 now.  How many times have we seen situations where "simple" is the enemy of "secure"?



LEO:  Yes.



STEVE:  I mean, yes, we would like to have a simple password, wouldn't we, that we could easily remember.  We'd like to be able to use it on every website because then we wouldn't have to remember separate ones, blah blah blah blah blah.  I mean, over and over and over, this whole - we could rename the podcast "Simple Is Never Secure."  So here again they're trying to come up with a way to prevent people from having to enter a long passphrase.  We know it has to be long because the one known vulnerability in WPA and WPA2, the state-of-the-art WiFi technology, is an offline attack that, if encrypted data is captured over the air, it's possible for a bad guy to take that, knowing the SSID of the WiFi network, and that's broadcast, so any bad guy knows where that is, that's the name of the network that you see when all of the available networks are listed, those are the SSIDs of those devices.



So you know that, and you know the protocol.  You can perform an offline attack where you use as much processing power as possible to guess what the passwords are until you decrypt the data that you captured over the air.  Then you go back to the network knowing what the password is.  So thus we really need long, complex passwords on our WPA WiFi access points and networks.  And that we all understand now.  So the problem is, it's uncomfortable or awkward, I mean, look at the scenarios we just went through about using WPS and how simple it is.  Oh, look, I brought a printer home...



LEO:  Just push a button.



STEVE:  Plugged it in; and, oh, it's magically on my network.  Uh-huh, right.  So the push-the-button approach is one.  But they're not happy with that, and it's not exactly clear why, except that they wanted another alternative.  So they said in the specification:  "The WiFi Simple Configuration in-band registration protocol is designed to provide strong protection against passive eavesdropping attacks and also to detect and to protect the system from an attempt to perform an active brute-force attack."  Under device password they said, "All devices...."  Okay, so here it is.  This is the specification.



"All devices supporting WiFi Simple Configuration" - and remember, WiFi Simple Configuration is required for Wi-Fi Alliance Certification.  So, "All devices supporting WiFi Simple Configuration must provide at least one numeric device password PIN for initial setup that is unique and randomly generated per device.  Although it is possible and permitted for two devices to have the same device password" - that is, the same PIN - "a group of devices should not intentionally be assigned the same device password.  And the device password MUST" - all caps - "not be based on other characteristics of the device such as MAC address or serial number."



Okay.  So what they're saying is that, since the PIN is going to be short for convenience - and again, this is why convenience is important.  They're so worried about that that they don't even think users can type in eight digits without making a mistake.  So the PIN, the eight-digit version of this spec has the last digit being a check digit so that, if the user makes a mistake entering eight digits, it doesn't even try to use the protocol to authenticate.  Instead, the device you've entered those into is able to perform a checksum locally and go, oh, that can't be right, you must have made a mistake.  So it's like, okay.  So we have seen in the past situations where password-like things, for example, used a piece of the MAC address.  I know that we've talked about this in the past.



LEO:  Yes.



STEVE:  It's been done.  And it's like, oh, how dumb is that because...



LEO:  That's public.



STEVE:  ...the MAC address is in the air, exactly.  So you just take a chunk of that and use that as the PIN.  So they're being careful to say this PIN must completely be disassociated.  But because it's so short, they know that they may - Linksys may, at some point in its history, reuse a PIN because they kind of ran out of them.  So it's like, okay, fine, it doesn't have to be unique.  But the idea is it's supposed to be unguessable and not tied to anything that is available on the device or in the air.  So then they go on.



"Headless devices:  Headless devices (those without a display) are required by WiFi Simple Configuration to include an eight-digit device password called a PIN.  A PIN on a headless device is typically printed on a sticker or otherwise physically inscribed on the device.  The PIN value of a headless device must also be configured into the device itself.  This would typically be done during the manufacturing process.  PIN-based device passwords are the basic security level for WiFi Simple Configuration.  Since one of the digits in the eight-digit PIN is used as a checksum, the PIN contains approximately 23 bits of entropy.



This in itself is not the biggest limitation, however.  The biggest limitation is that this PIN may be a fixed value when it is on a label.  Because a fixed PIN value is very likely to be reused, it is susceptible to active attack.  The protocol permits the user to override the default device password with a new value, which can help security-conscious users reduce this vulnerability."



Now, I read that to mean that that eight-digit PIN can be reprogrammed through the user interface.  That isn't a requirement, but apparently it's an optional capability, probably not supported by most devices because that's going to create a tech support problem if the printed PIN on the outside no longer matches the reconfigured PIN on the inside.  But that doesn't help us from a security standpoint anyway, as we'll see.



They say, "Probably the most significant class of headless devices in a WAN," that is, a wireless local area network, is the access point itself.  If possible, an access point should generate and display a fresh PIN for establishing external registrars each time the registration protocol is run in the access point setup mode.  So what they're saying is, it would be nice if the access point had a display which could randomly generate a new PIN.  The problem is, that's expensive.  That would be a little LCD that would have to be on the access point.  And while, yes, it would give us more security, it would cost more.  And these things don't cost anything.  We've talked about how incredibly inexpensive they are.  So access points typically don't use that option.  They use the printed-on-a-label static PIN, and that's all there is to it.



They said, "However, if a static PIN is used, the access point must track multiple failed attempts" - now, here, this is important - "must track multiple failed attempts to authenticate an external registrar and then enter a lockdown state.  This state is signaled by setting the attribute access point locked to 'True.'  After three failed PIN authentication attempts within 60 seconds, an access point must stay in the lockdown state for 60 seconds."



So they are saying that they recognize there's a brute-force attack problem with this whole technology.  And so if three failures occur within a window of 60 seconds, the access point takes itself offline, essentially, for this kind of configuration for another minute and then reenables itself.  Because, again, someone could type in the wrong thing three times, and we don't want to, like, lock them out forever.  We're just going to make them wait a minute and then reenable ourselves.



Well, it turns out that, well-meaning as this was, many devices don't do this.  But as we're going to see, even a device that follows this specification, due to a mistake that was made in the protocol of this negotiation, it still takes on the order of maybe a day.  Many people, however, who are experimenting with this, are able to get onto WPA protected access points that have this enabled.  And as I think I said before the show, Leo, I don't think I've said it yet in this recording, that enabling this is part of the specification.  That is, this must be enabled, everything I've just read must be enabled by default in order for the device to be certified.  They allow it to be disabled.  But by default, to get certification, they're so concerned about ease of use that all of this has to be on by default in order to make it easy to use.



So they acknowledge that three failed attempts within 60 seconds will cause the access point to lock itself for a minute.  Then it will unlock and allow people to continue.  So here's part of where the problem comes in.  Under "Devices With Displays" it says, "If an enrollee advertises support for the display configuration method, it is required to generate a fresh four- or eight-digit PIN each time it runs the registration protocol and show this PIN on a display."



And going on, it says, "This has two significant advantages.  First, because the password is single-use, it is not susceptible to the brute-force attack described above."  That is, if the PIN is printed on a label, obviously it's not changeable dynamically.  So they require it to be eight digits in order for it to be long enough for brute-force attacks they assume to be impossible.  And in fact, arguably, I did the math, I think it takes on average one point something, I think 1.1 years - oh, yeah, there it is.  Oh, no.  If all of this were done right, it would take a maximum of 6.338 years to try all seven-digit PINs, remember, because the eighth one you don't have to worry about.  That's a checksum, which we can always provide correctly.



So it would take, given this - if you tried it three times in a row quickly and failed, then the access point would lock you out for a minute.  So if we just, quick back-of-the-envelope calculation, that gives us three attempts essentially per minute.  And if you - seven characters is 10 million possibilities, and we do the math, that comes out to 6.338 years for all, or an average of half that, as we know, if we're just guessing at random, there's a 50 percent chance that we're going to get it within half that time.  So an average of 3.169 years to brute force.  So they were thinking correctly.



What they're also saying, though, is that a device that has a display, for example, maybe your printer is a more expensive device, and it's got an LCD display for all the other configuration and your paper out and so forth.  So there they could afford to use a dynamic PIN.  When you use a dynamic PIN, you only need to have four digits per this specification because it's going to be different every time, so you're not going to have the problem of it being static.  And if three guesses fail, then you restart the entire process with another four-digit PIN.  So you can't brute-force the same four-digit PIN over and over and over.



So they say, under "Guidelines and Requirements for PIN Values:  The PIN requirements for the two main classes of devices are, A, headless devices, devices without a display, must use an eight-digit PIN, a PIN printed on a label attached to the device.  The last digit of this eight-digit PIN is used as the checksum of the first seven digits."  And then it says, "Section 7.4.1 specifies how the checksum is generated.  Or, B, devices that use a display to show the PIN and can generate a new PIN must use either a four-digit or eight-digit PIN.  The last digit of an eight-digit PIN is used as the checksum of the first seven digits as above," same section, blah blah blah.  "A four-digit PIN does not include a checksum digit."



Okay.  So we have a number of different ways which, under this WiFi Protected Security easy-to-use configuration, we're able to set ourselves up.  We can press buttons at each end.  Or the access point has an eight-digit PIN printed on it.  Or if it's, for example, a device that's more expensive, that already has an LCD display, it can generate a dynamic PIN which only needs to be four digits.  Unfortunately, it is as a consequence of the protocol's ability to work with a four-digit PIN that this whole house of cards tumbles.  That's what happened.  It's that this four-digit option allowed them to have a protocol which is not secure.



Now, looking at the protocol, it's a - we've talked about the way security protocols work in the past.  The best example is SSL, where the client sends its initial packet containing all the protocols it knows about.  Then the server selects from among those, hopefully the most secure of those available that it also knows about.  Thereby the two ends are able to arrive at the most secure protocol that they both support, and then they go from there.  So these protocols are like a back-and-forth negotiation between two endpoints that arrive at a result.



In this case, the protocol was very nicely designed.  What I'm guessing, and it would be necessary to go back in time and read through endless committee meeting minutes, but it feels to me like this whole system originally used a four-digit PIN.  That is, four digits was what they thought was going to be enough.  And they would have told everybody you have to have an LCD because four digits isn't strong enough to prevent brute forcing.  So four digits is what you're going to need.  And then some guy raised their hand and said, "Uh, we don't want to have to have an LCD."



LEO:  Yeah, this adds a lot of expense.



STEVE:  Yes.  It's going to make these things too expensive.  So we need to have a fixed PIN.  And so then someone said, oh, hmm.  And what happened was the protocol had already been designed around a four-digit PIN.  And so at a later committee meeting it's like, wait a minute, this is a problem.  Four digits, if we don't have an LCD, four digits isn't really enough for security for a static PIN.  So we want to make it an option that you only use four digits if it's going to be a dynamic PIN, and double the length to eight digits if it's going to be static.  So what they did was they extended the existing protocol.  The protocol that was there had this handshaking go on.



And at one point, after a few negotiations of this is my version, here's a random number, here's my public key, the other side says here's my random number, and they throw in 128-bit random numbers from each end in order to prevent a replay attack, that is, to prevent someone who's eavesdropping from being able to reuse the same packets in order to reauthenticate.  So each end always generates a new random - we know it's probably pseudorandom - 128-bit value which they provide to each other.  And then their negotiation is based upon the combined 256 bits which will - it's never ever likely to appear again.  That prevents a bad guy from just sending, sort of reinjecting the same packets that were used last time again in a so-called replay attack.



So each end sends these packets back and forth to negotiate.  And at some point, and here's the brain-dead part, at no point is the eight digits sent.  Instead, the end that is proving that it knows the PIN sends four digits.



LEO:  Oh.



STEVE:  Then the other side says, yeah, you got those first four right.



LEO:  Oh.



STEVE:  And then - and then...



LEO:  Okay.



STEVE:  ...[indiscernible] thanks.



LEO:  Okay.



STEVE:  And then that guy sends the second four.  And then the other end, who is authenticating, says, yeah, you got those right.



LEO:  So there's a significant difference in the difficulty of solving an eight-digit PIN versus solving two four-digit PINs.



STEVE:  Well, this is how it's broken, is that, yes, because what I believe is the original protocol was a four-digit protocol, they didn't revise it so that the eight-digit PIN was sent instead of the four-digit PIN.  Instead, they said, oh, well, we want to allow four or eight.  So if it's four, we'll only send four and then get confirmation.  If it's eight, we'll send the first four, get confirmation, send the second four, get confirmation.  Somehow they just, I mean, the phrase of course is "brain fart," where they just, like, didn't occur to them that the endpoint would confirm the first four separately from the whole eight.  That's all this whole thing boils down to.  So that means the attacker is able to - only needs to guess the first four.



And so, okay.  So what that does is it's, obviously, how many combinations are there of four digits?  Well, there's 10,000.  And we know they're going to guess right in probably half, so that's 5,000 guesses.  And if you do the math, it turns out that it doesn't take long to guess a four-digit - we know it doesn't take long to guess a four-digit number.  You never need to guess the - it's not ever really eight, as we know, it's only really seven because the eighth one is a given based on all the checksum of the prior seven.



So you first guess - the way this happens is, as soon as that first exchange of four digits fails, the bad guy knows they didn't get the first four.  So the brute-forcer can independently guess the first four.  Once they succeed, they then continue to use those first four and guess the next three to get the total of seven in order to make up the eight-digit PIN.  So all that would have had to happen would have been that the authenticating side held its denial, that is, didn't fail the first four, but flagged that, well, that was not right, but I'm not telling him that right now, so that the side trying to authenticate wouldn't get information that the first four were wrong separately until all eight had been given.  Then the authenticating side could say, uh, that's not right.



But instead, apparently, every router on the planet fails when given the first four.  So the good news is, all we have to do, all the manufacturers have to do is fix their negotiation not to fail the first four, no matter what they are, if it's an eight-digit PIN that is being expected.  Do not fail the first four.



LEO:  Don't give the hacker a checkpoint, says Stillatwork.



STEVE:  Yes, exactly.



LEO:  Like a game.  You know you got that far.  You're safe.  Now keep going.



STEVE:  Yup.  Wait until he's given all of them and then fail.  So that simple change fixes this problem.  Now, the bad news is routers or access points are all over the map.  First of all, and I should have said this earlier in case anyone only listened to the beginning part of the podcast, but everybody listen now.  None of Cisco's Netlink or Cisco's own access points can have this disabled, Leo.  It's in the user interface.



LEO:  So you could turn it off, but it doesn't disable it.



STEVE:  You can turn it off, but it does nothing.  So...



LEO:  [Laughing] That's another thing they could fix, of course.



STEVE:  That would be good, yes.  I imagine we'll see that fixed.



LEO:  So you're saying in the configuration on the web, I can go there and check the box that says "Disable WPS," but it doesn't.



STEVE:  Correct.



LEO:  Why?



STEVE:  There is - I tweeted a bunch of links for all of our listeners.  So because they're long, we can put them in the show notes for this podcast at your domain, Leo...



LEO:  Yes, we'll do that [indiscernible], yeah.



STEVE:  But also Twitter.com/SGgrc will - you will find a tweet of mine with three shortened links in a single posting.  There is a spreadsheet which is being maintained on Google showing the results of all the tests that users are doing on their own routers, that it is growing rapidly.  It turns out that even Stefan's original disclosure showed all kinds of strange behavior.  For example, the D-Link routers, and in this case his was a DIR-655, which apparently is one of the more popular ones, it doesn't lock down.  That is, it just - they just didn't implement the lockdown.  So there is none of that "wait a minute if you guess wrong."  You can guess as fast as you can.



LEO:  Oh, that's bad.



STEVE:  It's really bad.  There's also a brand called TP-Link, TP-Link routers.



LEO:  I don't think I'd buy a toilet paper router.  That doesn't seem like a good idea on the face of it, yeah.



STEVE:  Yeah.  Could we come up with a different name.



LEO:  Mm, TP, uh-huh.



STEVE:  And it also lacks lockdown.  Now, Linksys, the WRT-320 has some strange behavior.  He notes that somewhere between two and 150 failed authentication attempts, this particular router just died.  And it never came back.



LEO:  It killed it.



STEVE:  It just - it killed it.  It did a DoS on the router.  So you can just shut down the network, take the router offline...



LEO:  That's almost even worse.



STEVE:  I know.  It's unbelievable.  So, okay.  So the good news is the DDWRT alternative firmware does not support WPS at all.



LEO:  I'm told Tomato doesn't either, which is another alternative fail approach.



STEVE:  True, the Tomato router also does not.



LEO:  I love both of those.  In fact, if you've got a router that you can flash with those, it's a good idea to do that anyway.



STEVE:  Yes.  And so you can...



LEO:  But not all routers are compatible.  That's the only problem.



STEVE:  Correct.  So you want to verify that.  So everybody but Linksys can and absolutely should disable this WPS configuration immediately.  You probably did this last week when we first notified everyone of the vulnerability.  So that needs to be done.  But anyone with a Linksys and Cisco router, at the moment there's nothing you can do, unfortunately; except, if it's reflashable with one of these alternative firmwares, either DDWRT or Tomato, then you can do that.  I have to imagine that Cisco is scurrying to fix this problem.  I mean, it's...



LEO:  Cisco owns Linksys, so really they're the same thing.



STEVE:  Correct.  Right, right.  So right now every Linksys router that users have tried is vulnerable, can be cracked, and cannot have its WPS functionality disabled, amazingly enough.  And that's where we stand with this, Leo.



LEO:  Wow, wow.  Really.



STEVE:  It's a - yeah.



LEO:  A comedy of errors, really.



STEVE:  Yeah.  And it's just - it's crazy that, I mean, the only reason I can excuse or explain this weird four-digit shortcut is that the protocol was extended.  Rather than, I mean, it's not like they're trying to economize on bits or something.  I mean, they've got 128-bit pseudorandom numbers flying back and forth, and public and private keys and all that.  I don't know why they didn't change the definition of the packet.  It's the M4 packet.  M1 is the enroller sending its public key and the pseudorandom number.  M2 is the other side coming back.  M3 is providing some other information, configuration and so forth.  And M4 is the packet that first contains these four digits.



Why they didn't change the definition so that that packet could be either carrying four digits or eight, I don't know.  But that's not the way they did it.  They simply added an additional two packets or two exchanges to allow the first four digits and then the second four digits.



Now, the good news is, again, I want to make sure, if any router manufacturers or firmware coders listen to this, all you have to do is not fail that first four-digit mismatch.  Set a flag, respond as if the bad guy got it right even when it's wrong, and wait till you get the next four digits, then fail the whole transaction.  That jumps us back up to three-point-something years, on average, for a brute-force attack to happen.  And I don't know if you could - you want to make sure that your lockdown works, by the way.  D-Link doesn't lock down.  TP, the toilet paper link people, don't lock down.  Linksys, as we know, just does a DoS.  It just dies in some cases.



LEO:  Lockdown is how many times you can try before it stops or slows you down.



STEVE:  But then again, remember, it comes back online after 60 seconds.  So it would be nice, gee, maybe give them five times to fail, but then stay off for, like, five minutes or something.  That would really slow the process down for brute-forcing.



LEO:  The thing people are wondering in the chatroom, does my router do it?  If your router doesn't have a WPS button, it doesn't do it.  Right?



STEVE:  No, no, no.  No, it does not have to have a button.  The button is optional.  The only way to know - and, see, that's a very good point.  And one of the reasons I'm sure we're going to be following this in the future is already there are several attack tools.



LEO:  Like Reaver, yeah.



STEVE:  As I mentioned, there's a vulnerability scanner.  There's Reaver.  There's WPS Crack.  There's what's-his-name from Serenity...



LEO:  The Fire - what?



STEVE:  The pilot from Serenity.  I knew it a second ago, and I'm just blanking because I'm all...



LEO:  The actor's name?  There's something named after him?  Oh, Wash.



STEVE:  Wash.  Walsh.  Walsh.  So Walsh is the - is it Wash or Walsh?



LEO:  It's Wash.



STEVE:  Okay.



LEO:  His name is Wash.  I don't know what Walsh is.  Walsh might be the tool.  I don't know.



STEVE:  Maybe there's typos at different ends.  But anyway, so there is a scanner.  I'm sure what we will shortly see, I mean, the hackers are going to have so much fun with this.  There will be something for the Mac and something for Windows.



LEO:  Right, because it sounds like it's easy to write, to be honest.



STEVE:  It's easy to write.  We already have - these tools are open source.  They're on Google Code.  I'm sure people are going to do some easy, like, am I vulnerable, I mean, I would be doing it if I didn't know that everybody else was going to be doing it, too, and if I didn't figure that this is going to be fixed in the short-term and not be a problem before long.  So it doesn't make sense for me to go off on a tangent right now when I've got so many other things I need to do.  But the only way to know, unfortunately - oh, there is one way.  And that is, you can see whether your computer will autoconfig.  That is, if you've got Windows 7, and I'm sure the Mac must support this...



LEO:  Or your phone.



STEVE:  Or your, well, if you've got an Android phone, we know that yours does, Leo.



LEO:  Yeah, mine does that.  It's built into this Sprint Epic Touch 4G.



STEVE:  And that is the way people have been easily testing to see if they're vulnerable is to...



LEO:  So even if you don't have a button, if you can autoconfig on the other end, then obviously it's working.



STEVE:  Yeah.  And what I - the good news is, me being the Luddite that I am, all my routers are old.  So none of mine have...



LEO:  Yeah, this is a new security feature.



STEVE:  Exactly.  So I looked on my Netgear router, and there is no sign of a PIN.  But that would be your first clue is to..



LEO:  A sticker.



STEVE:  Exactly.  There would be a sticker on the back, probably along with its serial number and its version number and its MAC address and those things that are per router.  And it would say "WPS PIN," and then it would be eight characters.  So if you find a sticker anywhere on your router, that will tell you that it does support WPS.  And then what you want to do, assuming that it's not a Linksys or a Cisco, is you want to log into it through the LAN side web administration and just turn off, disable WPS.  Then, having done that, you want to try to use WPS, use the simple configuration that's available in your operating system to see if it will pair with the router, asking you for the router's eight-digit PIN, in which case you would know if it worked that it was still vulnerable because, unfortunately, WPS is vulnerable in all instances.  Or, if it did not work, you would confirm that you had succeeded in disabling it.  So, wow.



LEO:  And there is this WPS spreadsheet on Google Docs.  Steve's got a link in his Twitter feed to it.  So you can check here.  Apple routers are not vulnerable.



STEVE:  Yay.



LEO:  Yeah.



STEVE:  Wait.  Not vulnerable.  What does that mean?



LEO:  Well, they don't support WPS.



STEVE:  Oh, no kidding.  Yay.



LEO:  As far as I know.  They've never implemented that on an Apple router.



STEVE:  Okay.  Oh, in that case the Mac probably does not allow for simple configuration, either.



LEO:  That's right, exactly, yeah.



STEVE:  So you have to be Windows 7.  I don't think that Vista did.  I think it got added in Windows 7, although I'm not sure of that.  And what I'm hoping is that quickly, like the next week or the week after, I'll be able to start pointing people to tools.  And so by the - slow down, Steve.  Take a deep breath.  If anyone encounters WPS-related tools, please, if you're a Twitter user, send me an @SGgrc mention.  I'll be keeping an eye on my feed so that I can aggregate that information and share it back out with our listeners.  And I'll probably tweet it, also, to everyone so that, as tools for checking vulnerability are created or finding access points that are vulnerable, we'll let people know.



LEO:  And I'll just run through, according to this spreadsheet, the list of routers that definitely are vulnerable.



STEVE:  Good.



LEO:  The Alice/Hansanet, ASUS, Belkin, Cisco, D-Link, Huawei, Linksys, Netgear, T-Online, Thomson, and TP-Link - routers by those manufacturers, at least some are vulnerable.  So you should pay attention and act appropriately.



STEVE:  And so what it really means, clearly, is that a neighbor who was wanting to play could set things up.  Also in the tweet is a link to Lifehacker.  Lifehacker has gone to the trouble of creating an easy-to-use, step-by-step.



LEO:  To do it.  Not to fix it, to do it.



STEVE:  To do it, yes.  You download a - right now the tool runs only on Linux.  But you can download a Linux DVD that already, the latest version of this Linux DVD already has Reaver that has been added to it.  And so you're able just to boot your machine from this Linux DVD and start hacking, if you've got a compatible WiFi adapter.  Most apparently are compatible and will do this.  So...



LEO:  Crazy.  Crazy.



STEVE:  Right now it's a little on the tech-y side.  We know how these things are going to go.  There will be a Mac tool.  There will be a Windows tool.  There will be plenty of hacker tools and testing tools and so forth before long because this is, I mean, the problem is, most users, obviously, in the world are not listening to this podcast.



LEO:  Right.



STEVE:  Everybody, you know, how long did it take us to get people to put, like, good passwords on WPA or even to turn on security in their routers?  I remember that when I used to look at the list of routers that were available, none of them were secured.  Now they've all got padlocks on them.  But the problem is they've all probably got WPS enabled also.  Which means that right now they're all vulnerable.  And this is just going to be too tasty an opportunity for hackers to play with.  So unfortunately what this means is that this is enabled by default in order to get certified.  So all routers have it enabled by default, even those that can have it manually turned off.  Which means today they're all on, unless they've been turned off in the last week or two.  Yeah, it's not good.



LEO:  Now, again, just to reiterate, the bad guy has to be sitting on your curb, close to your WiFi access spot.  It's not a remote hack.  But it means...



STEVE:  Like a neighbor.



LEO:  But it means you're - that's, I think, that's why it's kind of a shame that Lifehacker published this article.  It's not that this information's not out there.  But it means that any idiot like your neighbor can use this technique to get access to your...



STEVE:  Oh, Leo, it's going to be worse in a week.  I mean, they did it because why not?  I mean, there will be single push-button, get on someone's network tools here in a couple weeks.  This is just too tasty.



LEO:  It's too easy, yeah.  Well, that's good for people who miss the good old days of Linksys as your Internet Service Provider.  Those days are here again.



STEVE:  Yeah.  So I imagine what we'll see is, we will see every router manufacturer updating their firmware, probably to implement the simple fix that I propose, which is do not fail the first four-digit exchange.



LEO:  Seems like that would be an easy thing to fix.



STEVE:  Yes.  It's a trivial improvement to the protocol.  The protocol stays the same.  Nothing has to change.  Just don't fail the first four-digit guess.  Wait until all eight digits have been provided, then fail it.  And maybe increase the lockout time since we know this is a problem now.  If that gets fixed, then we're in much better shape than we are now.



LEO:  Steve, as always, a pleasure.  You fill us in on all this important stuff; teach us, too, which is great.  Next week a Q&A episode.  You can go to Steve's website, GRC.com/feedback, to feed him a question for next week.  We'll do 10 or so Q&As with Steve's answers.  You can also go there to find the transcripts for this show.  Steve makes those available, as well as 16Kb versions of the audio, at GRC.com.  And of course SpinRite's there, the world's best hard drive maintenance and recovery utility.  Lots of other good, free tools, as well.  GRC.com.  Follow Steve on Twitter.  In fact, this is a good time to do that, if you haven't already, because he's got links to all the background stuff there on his Twitter feed:  @SGgrc.  @SGgrc.



STEVE:  And I will ask, again, anybody who's out there who is a Twitter user who runs across something I haven't seen or talked about, by all means, shoot me either in GRC.com/feedback, put something in the subject line about WPS so that I'm sure to see it, or mention SGgrc in your own Twitter posting so that I'll encounter it and see it.  And I'm sure for the next few weeks we're going to be tracking this story because this is a biggie.



LEO:  Let's see.  What else?  Oh, apparently, well, wonder if there is WPS support on AirPort networks because I see "How to connect a wireless-capable printer to your AirPort network."  First the printer must be configured to join the network.  Add the printer.  If your printer - sounds like you - well, it's not clear.  They don't, in this spreadsheet, mention any Apple products.  So I don't know if this is WPS or not.  But you know what, it would behoove everyone to check.



STEVE:  Yeah.



LEO:  SGgrc on Twitter, GRC.com on the web.  We'll be back next week at our usual time, that's Wednesday, 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1800 or 1900, I guess, UTC on TWiT.tv.  You can watch live, but we make audio and video available always after the fact at TWiT.tv.  In fact, best thing to do so you don't miss an episode is subscribe in your favorite podcatcher, whether that's iTunes; the Zune Marketplace; I use Downcast on iOS, that's a great little podcast catcher; Listen on Android.  There are lots of ways to do it.  But do subscribe.  That way you get every episode, and you can collect them.



88 - what am I saying?  I'm going to give you the phone number for the radio show for some reason.  I don't think I need to do that.  I need to merely say thank you, Steve.  TWiG is coming up next.  I'm a little - I'm not used to being up this early.  You know what threw me?  You know what threw me?  I just - I'm never here at this hour.  "The Price Is Right" is on TV, and Drew Carey seems to have lost a hundred pounds.  That's what threw me.  I'm looking at that going, what the hell happened there?



STEVE:  Well, good for him.



LEO:  Good for him.  Thanks, Steve.  And we will see you next week on Security Now!.



STEVE:  Thanks, Leo.



LEO:  I looked over, just went, whoa.



Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/

	

SERIES:		Security Now!

EPISODE:	#336

DATE:		January 19, 2012

TITLE:		Listener Feedback #135

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-336.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 336, recorded January 18th, 2012:  Your questions, Steve's answers, #135.



It's time for Security Now!, the show that protects you and your privacy online with this guy right here.  What did we come up with, the security general?  The security...



STEVE GIBSON:  No, it was good, too.  I forgot what it was.



LEO:  It was good.  Dang.  Instead of "The man, the myth the legend"?



STEVE:  Yeah.  Definitely we want something better than that.  We had - I'm sure that someone in the chatroom will...



LEO:  We had a name for Steve.  We had a name.  Anyway, Steve Gibson is explainer-in-chief.  That's what we had, explainer-in-chief.



STEVE:  Ah, I like it.



LEO:  Steve Gibson is here from GRC.com.  By the way, stop banging your video player or your TV.  I know people at home are going, wait a minute, something's wrong, the color isn't - maybe I can get the - no, we're in black-and-white today because this show is being recorded on January 18th, which is a day marked across the Internet by protests against the intellectual property bills, SOPA and PIPA, in the U.S. Congress, House and Senate respectively.  Many sites have gone dark including Wikipedia, Reddit, and others.  We decided not to go dark, just dark gray, in order to remind people to call their member of Congress, to let their member of Congress know they don't want them to support SOPA and PIPA, and to let people around the world, because we have a vast global audience, know they are not immune.  Many countries are being lobbied by the World Intellectual Property Organization, which is essentially a front for American content creation companies like the MPAA and the RIAA, to pass laws that they have in some countries, like France and Spain.  So you are not immune, either.



It may not be called SOPA, it may not be called PIPA, it certainly won't be called SOPA and PIPA in the U.S. next time around.  But these companies will not stop until they break the Internet to protect their business models.  It won't work.  It doesn't work.  And it's something we have to defend against because, as you, anybody who watches this show knows, the Internet is the last best hope for mankind, and we want to protect it.  So that's why we're in black-and-white, just so you know.  It is not the fault of your TV or your video player.



STEVE:  We have not degraded the audio quality, however.



LEO:  Yeah.  And those of you listening in audio, we've always been in black-and-white, or whatever color your imagination comes up with.  What's the topic du jour, Steve?



STEVE:  We're in Q&A mode today.  So this is Episode 336 of Security Now!, with our 135th Q&A.



LEO:  Wow.



STEVE:  We've got our regular round of updates and news.  And, as expected, the WPS, the WiFi Protected Security issue, is alive and well, so we've got a bunch of news about that.  And in fact we're going to next week have a really fun propeller-head episode about the protocol because, first, let's see, I think the first instance was an engineer at Nokia explained sort of cryptically, he sent me a tweet saying that it would not work what I had suggested last week, to have the access point not deny that the first half of the eight-bit or eight-digit PIN was wrong.  And I thought, oh, okay.



Then Stefan Viehbock, who wrote the disclosure, and I had some discussion on Twitter.  And then Dan Kaminsky got involved, and Dan and I moved it off to email to confab about this.  And that all caused me to take a much closer look at the protocol.  And now I get all the subtle details, and they are really interesting because what the Wi-Fi Alliance tried to implement is something called "zero-knowledge proof," where both sides prove that they have knowledge of something without giving away what it is, because this isn't a one-way authentication, where it's only the user who wants to prove to the access point they know the access point's PIN.  It's a mutual authentication because you also want to prevent a rogue access point from impersonating the one that you're trying to connect to.  So you need to prove that you know the PIN to the access point; while, simultaneously, it proves it knows its own PIN, which a rogue access point wouldn't.



Anyway, it's really interesting, and there's some new crypto primitives involved that we haven't talked about before.  So next week we're going to explain zero-knowledge proofs and mutual simultaneous authentication and why it still doesn't work.



LEO:  I love that.



STEVE:  Yeah.



LEO:  Some computer science coming at you.



STEVE:  Good crypto science.



LEO:  Yeah, I like it.  Well, before we get to the questions, I presume there is security news to talk about.  So let's get to it.  This second Tuesday we - we did the show last week Monday.



STEVE:  Right.



LEO:  So we missed the second Tuesday.



STEVE:  And we didn't know in detail what Microsoft was going to do.  They did release, as expected, a handful, small handful of fixes.  One of the things that they did fix we were hoping for, which was the problem with BEAST, which we talked about extensively.  You'll remember that there were some researchers out on a beach somewhere who came up with a way of breaking the block encryption aspects of SSL.  We did a whole podcast on BEAST, which is the acronym for Browser Exploit Against SSL/TLS.  I don't know how these guys get these great acronyms, but that's just - that's a great acronym.  Anyway, that has been fixed in Windows as of last Tuesday.



The other significant update, because Adobe also had theirs last Tuesday and fixed problems that we had been hoping they were going to fix in Reader and Acrobat and Flash, but Oracle released their big quarterly update just yesterday, so on January 17th, which fixed 78 problems in MySQL, which of course is the big SQL database product.  One of them was very important because it could be - it was a vulnerability which could be exploited remotely without login credentials.



So they didn't talk about this before, but now that they have it fixed on their page that enumerates the things that they're claiming are fixed, they're now really pushing people to make sure that whatever products they're using which have MySQL as part of their backend database, that they go through whatever procedure on a product-by-product basis as necessary to update themselves to the latest and greatest as of yesterday.  So I wanted to pass that on to our listeners, that there is some important things that were released.  And as often is the case, it could be that bad guys, knowing that there is now a no-login, remotely exploitable vulnerability which has been fixed, they'll plow in, figure out what that is, and then go after people who haven't fixed it.  So anytime you've got MySQL exposed to the Internet, there's cause for concern.  So you want to make sure that you're up to date with this patch.



In news, there's been some talk, and we've been talking about it recently, of so-called "slow motion denial of service attacks" against servers.  I've recently talked about the idea of stalling TCP connections.  We were talking about how TCP throttles itself with the notion of advertising a window of buffer space, meaning that, for example, when the client is acknowledging the receipt of data, one of the fields in the acknowledgment shows the server how much receive buffer it has.  So that allows the server to send data in advance of its acknowledgment.  And that's a beautiful way of having TCP deal with the delays which are inherent in any packet-oriented free autonomous routing system like the Internet uses.



So this is part of the super cleverness of our Internet protocols that makes the whole notion of a routed packet network work.  Unfortunately, there are always ways to exploit these things.  And one of the things you can do is you can advertise that you, for whatever reasons of your own, have no buffer space available.  And what that does is that shuts down the server's ability to send data to you, causing it to send acknowledgments every so often, a so-called "window probe," to continually ask you for new acknowledgements of that probe, hopefully telling it that you've freed up some buffer space.



So the point is that what hackers are now intrigued by is not the big flooding attacks, which is what they've been doing, but various types of slow-motion attacks.  And so both researchers and hackers are now experimenting with giving servers, web servers on the Internet, publicly available servers, new kinds of grief by either slowly dribbling to the server their request, or forcing the server to slowly dribble out its reply.  And so I'm just sort of seeing in the news sort of a continual flow of new attacks.  And this is problematic because there are existing now lots of tools for responding to flooding attacks, where there are upstream gateways that attempt to verify that incoming connection requests, for example, are valid or not.



The problem with these new attacks is all of the requests are valid, they're just very slow.  And so what servers normally do is receive a request and respond to it, and they're done.  They close the connection.  These hold the connections open and overwhelm the server's connection resources, rather than the bandwidth resources.  They use, in fact, almost no bandwidth.  What they use is many, many, many more simultaneous connections to the servers, and that's a new aspect that right now there aren't any good defenses for.  So what'll happen is, of course, the people who provide border security and abuse prevention defenses will have to come up with a new paradigm for looking at, for example, how many connections are open, and whether the connections are actually doing a reasonable amount of work, and terminate connections which are in this slow-motion attack mode.  So anyway, just it's one more thing that the bad guys have come up with to wreak havoc on the 'Net.



LEO:  I like "slow motion attack mode."



STEVE:  Yeah.



LEO:  That sounds like a new move in a fighting game.  Mortal Kombat, slow-motion attack mode.



STEVE:  And I did - just a little blip on my radar was a note that we talked sometime ago, you'll remember, Leo, that the Air Force base in Nevada from which our drones are being remotely piloted was infected because it was running Windows.  And so many people responded by saying, wait a minute, our drone systems are being driven by Windows?  Because everyone is always sending me pictures of ATM machines with a...



LEO:  Crashed, blue screens of death, yeah.



STEVE:  Blue screens of death, or a little dialogue saying you must update your security patches, click here to proceed.  And meanwhile the whole ATM is nonfunctional because the system is waiting for someone to click a button, using a mouse that doesn't exist and so forth.  Anyway, the point is that it sort of made the low-level security news that that Air Force base had moved away from Windows.  They were switching to Linux.  So, yay.



LEO:  Yay.  Although, I mean, Linux is more secure.  It's better.  It's more mission stable.  I wonder if it's, I mean, aren't there still viruses and attacks on - of course there are.



STEVE:  But I guess the way to say it would be there are still vulnerabilities.  However, they're just not the big vulnerabilities being developed for Windows, which is still the majority platform and still everyone's big target.



We had a big breach that happened just recently.  The online website Zappos was hit by a major database breach.  They sent out email to 24 million customers, telling them that they had expired their passwords and giving them instructions for how to go about re-authenticating themselves and using a new password.  So their names, their email addresses, their password hashes, and in some cases the last four digits of their credit card numbers were lost, essentially, in this big database breach.  They did not lose the critical credit card purchasing records with the full credit card numbers.  So that wasn't lost.  But still, the login information was.



So as soon as Zappos realized this is what happened, they shut that down, they expired everyone's existing passwords, and began sending out email to a massive customer base, all 24 million customers, explaining that they would have to change their passwords.  So by every measure, I thought they responded well.  They sent out a letter to their employees to explain what had happened.  They attached to that letter the letter that was being sent out by email to all the customers so that everyone would be up to speed.  They did suspend their telephone system because they were concerned that it would be completely submerged under people choosing to phone rather than use the online resources.  So anyway, that's in our breach news.



LEO:  Poor Zappos.  I think they handled it well, though, didn't they.



STEVE:  Oh, I think they really did.  It's like you never want this to happen.  It's never going to be good.  But you want to be responsible.  And...



LEO:  They separated the credit card numbers out.  I presume they were using salt because it sounded like people were not getting stuff in the clear; right?  And they said something that was really good, which is, if you use the same password on other sites, change that, too.



STEVE:  Yes.



LEO:  That was smart.



STEVE:  Yes.  And so they were storing hashes, and it was hashes that escaped, not the passwords themselves.



LEO:  Much better.



STEVE:  So, yeah.  They did, I think, they responded as well as they could have.



LEO:  Right.



STEVE:  There is now, we talked last week about Reaver, which was the open source tool whose source code had been posted on Google Code, produced by Tactical Network Solutions.  There is now Reaver Pro, as we would have expected.  And as I predicted, we're beginning to see the release of additional tools.  SourceSec Security Research released WPScan and WPSpy tools which are Python scripts.  And those actually existed some time ago.  They're not Reaver, but they are scanning tools.  They presented these at ChicagoCon, and they said:  "WPScan actively sends 802.11" - that's WiFi's IEEE code - "802.11 probe requests to access points that advertise WPS support.  It then parses out the WPS Information Element in the resulting probe response and displays the results.  This is a very useful fingerprinting tool since nearly all new routers have WPS enabled by default, and most vendors will actually put the exact make, model, and version of the router in the probe response."



So this WPScan has been known for some time and has been actively used as a means of identifying make, model, and version number of router, which of course is very useful for hackers who want to then begin to break into routers using any vendor-specific, firmware version-specific vulnerabilities that may exist.  And then the second tool, WPSpy, they say "is a tool to simply monitor and report changes in the WPS status of and access point.  This is particularly useful if you are running some of our described attacks that leverage WPS to gain access to the WLAN."  So again, I think over the next few months we will be covering and reporting on ongoing WPS things.



And also, of course, there was feedback, as I requested, from the Twitterverse.  Anthony Downs in Rockville, Maryland, he sent me a note saying that the Actiontec MI424WR, which is Verizon FiOS's router, claims the WPS functionality will not be enabled with a future firmware release.  So Verizon FIOS is going to respond by just disabling it by default, which really does sound like the right thing to do.  It means that it's not as convenient and easy for users.  But as we will see next week when we go into this protocol, it really does look like there is no safe way to do this.



Someone tweeted with the Twitter handle of Ludden.  He said, "@SGgrc, I have a new AT&T U-verse modem/router which has WPS disabled by default."  So that's good to know, any AT&T U-verse users, since this all has of course caused a great upheaval of concern over WPS.  And in fact, not surprisingly, some of the Q&A questions we'll be talking about in detail are asking about some workarounds and things that people are asking whether they would work or not. 



Philip Hofstetter tweeted from Zurich, Switzerland, said to me that Apple routers do support WPS.  You may remember that...



LEO:  Oh, yeah, I was curious, yeah.



STEVE:  Yeah, we left that as an open question.  And in fact one of our Q&A postings is from somebody who has done a lot of tech support on the Apple side and has some exact specifications of...



LEO:  That's weird because I - maybe I - or I guess I have an old AirPort Extreme.  But I've never seen the PIN code on that, so I don't know...



STEVE:  I think it's generated dynamically.



LEO:  Ah.



STEVE:  He goes on to say, "They do support WPS, but only while their config tool is open, and you select a special menu entry."  And then he says it shows a random PIN.



LEO:  So that's effective in protecting against this attack.



STEVE:  Yes.  I does look like it is.  I have not confirmed that WPS is not still broadcasting something.  But as you say, Leo, they did not print a PIN on the outside, so there isn't a static PIN.  So that's certainly good news.



And then, finally, Ben Naidus tweeted.  He said, "Netgear is protected from PIN attack by going into lockout for 'predetermined amount of time.'"  And then he cites the  Google chart, and he says, "Note:  Netgear recommends putting a checkmark on 'Disable Router's PIN.'"  So that's good news.



LEO:  That's good.



STEVE:  And then I did get something, it's interesting, it's weird that I ran across this in my mailbag today when I was running through everything for the Q&A because a listener, Sasha in Croatia, said, "Greetings.  I am super new to your show.  Not new to your page, having used your ShieldsUP! service way, way, way back when you first made it.  Loved your sci-fi podcast show."  He said, "I started listening/watching actually your and Leo's show a few months ago and love it.  It will take me forever to go through them all.  My rant is about your SpinRite page.  I hear all the cool stories and testimonials and want to use it so bad.  But I can't get what it does, exactly."



LEO:  I want to use it, but what does it do?



STEVE:  He says, "Is it a disk backup tool?  Can it be used for that?  Is it a disk fix tool?  Disk format tool?  Disk defragmenting tool?  What exactly does it do?"



LEO:  I'm glad somebody asked that.  That's good.



STEVE:  He says, "I have a complaint about your demo videos where you assume we all know it and simply talk about how good it is instead of actually showing one example, even, of what it can."  He says, "So if you can talk more about this, possibly a few minutes on the show, I know people will think it is made up to increase your exposure time.  But don't just assume all," he says, "we're all listening to Security Now! forever."  I guess he means we've all been listening to it forever.  "Thanks for this, and thanks for everything.  You and Leo are awesome.  Love you guys.  Sasha."



So, okay.  Just a minute to answer Sasha's question, what this does, what SpinRite does.  Recently I've been seeing the term "bit rot," and I'm not sure why bit rot has been in the news recently.  But there is a problem that hard drive data does degrade over time.  We know there's things called so-called "grown defects," that is, defects growing over time.  And try as they have, and they've done an amazing job, manufacturers are unable to produce absolutely perfect media.  And that's become a bigger problem as we've been storing greater densities on these magnetic platters because what it's done is by making the bits smaller, it's effectively made any defects bigger.



So in order to deal with the fact that media is not perfect, and it has never been, even back when we were only storing 10MB on disks, all of us who are old school, Leo, you'll certainly remember when there were little charts printed on the outside of the disk drives showing the location of defects that had been found at the factory.



LEO:  Right, right.



STEVE:  And what people who were formatting these drives were supposed to do was manually enter the list of defects into the low-level formatter, which would then mark those sectors as bad.  Well, it quickly became clear that OEMs were not taking the time to do this.  They were just pumping these systems out, and they weren't manually entering into a low-level formatter what the defects were.



So one of SpinRite's first uses 20 years ago was people would run it on brand new drives, and it would find defects, often in sectors they were using, which was a concern.  So SpinRite would relocate the data to non-defective sectors, mark those sectors bad, and then keep them from being used.  So SpinRite was doing the work that should have been done by the OEMs but wasn't being done by the OEMs.



So, over time, drives evolved.  Drives began handling their own defective sectors, meaning that even though there were still defects, they would manage them themselves.  So then SpinRite's job changed.  Then, by running SpinRite on these drives, it would show the drive that there was a problem that the drive wasn't aware of because the drive isn't omniscient.  It only knows there's a problem if it tries to read the data and has a problem reading it.



So the way that works is that there's error correction technology which is able to correct runs of bad bits up to a certain length.  That is, you might have, like, you can sort of think of it as a pimple on the surface, but the data only intersects sort of an edge of the pimple.  So a few bits cannot be stored accurately there because there's just a problem in the media.  So the drive incorporates technology, it actually stores extra data at the end of the sector which very cleverly allows it to correct any small problem which it may have encountered in reading the sector.



Now, what could happen over time is, just because of the head flying over the surface, there is some interaction.  There's an air bearing.  There is a little bit of mechanical flexing of the surface of the disk.  And that can interact with this pimple to make it bigger over time.  So while, for example, maybe only four bits had a problem originally, that grew, the defect grew to five or six or seven as this problem on the surface grew over time.  So what happens is, again, the drive doesn't know there are these growing problems until it reads the sector.



So one of the things that SpinRite does today, when I talk about it being of preventive maintenance value, is it simply goes out and reads the entire drive.  It also writes it, flipping all the bits upside down, and then reads that, and then flips them back and reads it again.  What that does is it sort of exercises the surface, and it allows the drive itself to realize, whoa, we have been able to correct a certain spot that was only four bits long in a problem, but now it's eight.  And say that a drive's maximum ability to correct is 12 bits.  Well, at some point, at some threshold, four it might have been comfortable with.  It got up to eight, and then it says, oh, this is getting worrisomely close to our maximum ability of, for example, 12 bits to correct.



So right now, before it gets any worse, we're going to relocate this sector.  It didn't bother when it was just four bits of problem.  It bothers when it's eight.  So it relocates the sector itself and puts a new good sector in, in place.  So that's one of the reasons that people say, I've been running SpinRite for years, and I've never had a problem, but it doesn't seem to be doing anything.  Well, it's actually doing something.  The problem is that it's part of the hidden management and maintenance, surface maintenance that all drives do today.



So there's really nothing I can show.  I can show and do show on the SMART page that sectors are being relocated and that errors are being corrected.  That SMART analysis page sometimes scares people because it shows, wait a minute, this thing says we're correcting so many errors per megabyte.  And it's like, yes, that's the reality of today's drives is they're correcting errors all the time because we've made the bits so small, in order to make the density so high, that no surfaces are error free.  They've got errors all over them, but we're just - we're taking them in stride.



So one of the things that SpinRite does from a preventive maintenance standpoint is work with a drive to show it it's got problems and induce it to relocate sectors to safety before those problems get too big.  But we also hear testimonials all the time of people saying, I was getting blue screens.  I could no longer boot.  I could no longer run a certain application until I ran SpinRite.  So the other thing SpinRite is able to do, essentially, is beg.  It just begs for the data.  Because we would like to believe that drives are digital, that they're just ones and zeroes, and that's what's being stored.  But the fact is, down at the sizes we're dealing with, it's all become analog.  And so we're not just storing digital data anymore.  We're not really storing digital data.  We're storing analog data which we reinterpret as digital data.



And so SpinRite has a whole vocabulary of things it's able to do to get a drive to read a sector it will not read, one last time.  We just beg.  We go out a different distance and come in at a different velocity from both directions, hoping that the head will happen to be in a slightly different position, where just one last time, instead of it being 13 bits that are uncorrectable, it'll be 12.  SpinRite has this thing called DynaStat, which is a dynamic statistics system, where it's actually able to reassemble what must be in the missing area in order for that sector to be corrected.  It's able to essentially interpolate the missing data and reverse-engineer what was originally there, even though the drive won't read it.  So there's all kinds of things that SpinRite can do, if we wait too long to use it.  And of course everyone waits too long.  Most people aren't buying it for preventive maintenance because it's not cheap.  It's $89.  But you own it for life.



I've been keeping it alive for the last two decades, so you can imagine you'll end up being able to amortize that purchase out over time.  And there will be a SpinRite 6.1 soon to deal with the evolution which has occurred since I finished SpinRite 6.0.  And that'll be free for everyone to update.  So that's what it does.  It really can recover data which the drive tells you it cannot read.  SpinRite says, just give it to us one last time.  When it does, then the drive says, oh, my god, I'm so happy I was able to read that one last time.



LEO:  Thank you.



STEVE:  It relocates that data to safety and puts a new sector back with the recovered data, and then your computer boots again.  Or your applications run.  Or you can access your database.  Or whatever.  It's better if you run SpinRite over it every few months, or often enough, no one really knows what that is, but every few months is probably often enough to show it there are problems evolving before they get to the point that you're holding your breath and crossing your fingers that SpinRite will bring your data back, which more often than not it seems able to.  So that's the whole story.



LEO:  There's the SpinRite story.  Somebody said this is the nice thing about SpinRite.  It eliminates all marketing jargon and says here's what I do.  That's what's great about Steve.



STEVE:  Yeah, it just works.



LEO:  Yeah.  All right, Steve Gibson.  Are you ready?



STEVE:  Yeah.  But let's talk about DNSSEC first.



LEO:  Oh, yeah, would you?  Because I think that this is germane to what's going on today, the SOPA protests.  These bills, SOPA in the House and IP Protect Act, or PIPA, Protect IP Act, in the Senate, and other bills like it around the world, one of the features of them is that they modify DNS.  They allow the government to say "Take this website off DNS," the presumption being these are pirate sites, and we're going to take them down.



STEVE:  Well, essentially, what they're trying to do is to legislate spoofing of DNS.  They're wanting ISPs to redirect people to a different website than their actual target.  And how many times in this podcast have we talked about the security problems associated with spoofing DNS?  That's a big problem.  And what DNSSEC, that is to say, DNS Security, does is it signs DNS records so that spoofing can be prevented.  So it adds a layer, I mean a valuable layer, of true security.



LEO:  But Steve, if we can't spoof websites, those pirates will win.



STEVE:  Yeah.  Exactly.  So essentially what happened was, in response to this call for breaking DNS by legislatively requiring that DNS be spoofed, the real engineer techies of the Internet said, wait a minute, we've been working now for quite a while to prevent exactly what you're suggesting you're going to require by law, and it breaks the Internet security.  And it absolutely does.  It would mean that DNSSEC, that is, valid records signed would not be spoofable, so users would have, at some point in the future, when DNSSEC is fully deployed, will in the same way, I mean, exactly the same way that SSL gives us an authentic connection - remember, it provides not only security, that is to say privacy because it's encrypting our connection, it's also authenticating the other end.



We know that when you connect to GRC.com over SSL, you know that you're at GRC and that nothing has gotten in the way to spoof your connection because I have a certificate that DigiCert has signed, and you believe DigiCert because your browser has their Certificate Authority certificate there to verify their signature.  So that authentication is every bit as important as the encryption.  Well, we've moving towards an authenticatable DNS, which we do not have today.  We don't have it.  We're assuming that these DNS records which propagate from the root servers and their original origin servers at whichever layer in the network they are, we're assuming that they're correct.  But there's no encryption.  They're UDP packets that could be intercepted and changed.  And all there is in there is an IP.  But the records themselves have no protection.  I mean, they have a checksum, but you could just rebalance the checksum if you change the contents of the records.



LEO:  Yeah, we know how that works.



STEVE:  Yeah, the entire DNS system is in the clear right now with no protection.  So what we're moving towards is providing for the first time the ability to cryptographically sign and verify that the DNS record that arrives at our computer is the one that the owning DNS server sent, and that the technology will absolutely prevent that from being tampered with.  Yet what this legislation would do would be to break what we're heading towards and just arbitrarily say, oh, you asked for this URL.  We're going to give you a different IP to redirect you to a page that says we're sorry, service has been suspended because that site is believed to be a pirate site.  And that breaks DNS.



LEO:  Well, there you have it, if you needed another reason to not like this.  Actually it segues right into our first question of the day from Robert Van Etta in the United Kingdom:  I just wanted to point out how seemingly small changes by commercial organizations have broken the Internet in the past.  Remember this?  We talked about it.  In 2003 VeriSign introduced something they called "Site Finder."  Instead of simply returning a host-not-found type response, VeriSign used wildcards on the .com and .net TLDs to direct users to their own servers.  So if you entered, mistyped something, it would go back to a VeriSign server, and they of course would give you an ad, in effect.  They'd give you search results and an ad.



STEVE:  Yeah, they were trying to monetize your mistakes.



LEO:  Right.  Needless to say, this broke several services that relied on receiving proper DNS responses, like 404s or 503s.  And just like the response to SOPA, there was significant public outcry, and in fact VeriSign backed down.  So they keep trying to do this kind of crap, for whatever reason.



Moving on, Robert Callahan, Prescott, Arizona, with a WPS question:  My router has two modes for WPS, the PIN mode and the Push Button mode.  The Push Button mode has a two-minute window before it shuts down.  Is this second mode secure?



STEVE:  Okay.  It's way more secure.



LEO:  Oh.  I was going to say no.



STEVE:  Well, it's way more secure because it only - it is a different four-digit PIN every time.  And I guess he didn't say that.  He says a Push Button with a two-minute window before it shuts down.  The Push Button mode is a four-digit PIN which is different every time it's used, and it only lasts for two minutes.  So that mode is more secure.  But as we know, the standard eight-digit PIN mode is not secure.  Both in the mailbag that I encountered and also some of our topnotch cryptographic security guys who hang out over in the GRC newsgroup, they did some math.  And it was interesting to see what happens just with anything that's four digits.



Four digits, as we know, gives you from 0000 to 9999.  So that's 10,000 possibilities.  Well, so a single guess, a single random guess has a one in 10,000 chance of succeeding.  It is surprising how quickly the probability of guessing once right goes up as you get more guesses.  Which is to say that, even in the eight-digit case, where you're trying to guess the first four digits and not guessing correctly, it's surprising, if you're able to guess at even a rate of a couple a minute, how quickly the chances of one right guess are.  The takeaway from this is four digits is just not enough.  One in 10,000 is not enough if someone is going to be allowed to guess for any length of time.



LEO:  And as you say, this is not hypothetical.



STEVE:  Right.



LEO:  The tools are out there.



STEVE:  Right.  And they're coming.



LEO:  And how fast does Reaver work?  Half an hour?



STEVE:  Like two to 10 hours.  So not super fast, but two hours is - it's a matter of whether it gets lucky or not.  And a little bit a function of how quickly the access point...



LEO:  It responds back.



STEVE:  Yes, how quickly it recovers from a mistake.



LEO:  That's why a timeout is a good thing.  It slows it way down.



STEVE:  Right, right.



LEO:  But your neighbor has all the time in the world to crack into you.



STEVE:  That's, see, it's the static threats that are the problem.  And targeted threats.  People may believe, I mean, you could have a high-value WiFi access point that is protected with a user key from hell like I have on mine.  I can't enter it into any of my phones because I can't possibly type it.  Actually that's changed after the Password Haystack revelation.  But still, the point is you could never brute-force that.  Yet you could have WPS enabled, and probably do, and somebody who had a reason to get into your network, parked out in front of your business, for example, they've got two to 10 hours, especially on the weekend or at night.



LEO:  So we may have covered this, but Brian in Saskatoon, Saskatchewan fills in the details of the WPS implementation on AirPort devices from Apple:  I was enjoying the podcast on WPS, found the information very helpful, a bit scary.  I admit I have always disliked the option of using WPS.  I even tell our customers at our store to avoid using it, opting instead to promote a correctly secured network, even if that means going over to the house and setting it up for them.  Your closing thoughts were on Apple AirPort and the question we had in our mind of whether it supports WPS.  It does, and has since WPS first came out.  Its implementation is a bit different, though, as the base station requires that you tell it to accept a new connection from the AirPort utility in Windows or on a Mac and not with just a button press.



So if your neighbor's trying to break into your AirPort, he's got to wait until you say to the AirPort, okay, let's  do this thing.  Which, if you've already set it up, you probably never will do.  So here's how you do it.  You go into the AirPort Utility.  You pick the base station you'd like to have your device join.  Then from the base station menu you pick "Add Wireless Clients."



Your next choice is to connect by PIN or First Attempt.  If you choose a PIN, you enter the PIN of a device connecting, as the Apple base station does not have a printed PIN.  When you choose First Attempt, you are then given a screen that shows you the description and MAC address of the device that's trying to connect, which means you can reject the connection if the bad guy was nearby just waiting for you to turn it on.



Lastly, for both options you can add a restriction of limiting the access to a 24-hour time limit.  So this is actually kind of handy if a neighbor comes over, a friend comes over, wants to get on.  You could set it up very quickly.  But you can have it automatically turn off in 24 hours.  I prefer this idea as, no matter how much someone was to knock on the door of the network, only I can say "come in."  Thanks for the great podcast.  Brian.  That does seem like a better way of implementing it.



STEVE:  Apple just did it right.  They really did.  I mean, the other aspect of this that people have commented on is that, if someone came over, and you wanted to let them get on your network that time, and you had a static PIN on your router, well, they know...



LEO:  Forever.



STEVE:  ...your eight-digit PIN now, exactly, forever.  So they could get on even if you didn't want them to get on at some point in the future.



LEO:  In fact, that's what I do with my relatives when they come over.  I give them the WPA key.  And in fact, when you come to our Brick House and you want to join our WiFi network - we have a guest network - we give you the WPA key.  So unless we change that on a regular basis, you have now access forever.



STEVE:  Right.



LEO:  Opher Banarie, who is a regular correspondent to The Daily Giz Wiz, he's from Burbank, helps us to recall when lights once flashed:  Steve, I've enjoyed Security Now! since No. 1.  Hope you and Leo go on for another 20 to 30 years.  That's about it [imitating geezer].  You mentioned the flashing lights on the panels behind you.  That reminded me of a planned corporate video about our data center.  Since I was the sysadmin, HR, who wanted the video to show new employees, sent me the script for review and comments.  So here are some excerpts from the script.



Okay.  So Script Item 1:  Zoom in on flashing lights.  Our system has one flashing light.  It tells the operator the system crashed.  We hope never to see it flashing.  Script  Command 2:  Show spinning tape reels.  Our tape drive is behind opaque doors, so no reels are visible.  Request 3:  Show rapid motion of disk drive heads.



STEVE:  Oh, that's exciting.



LEO:  Our disk drives are sealed and no motion can be detected.  Show tracking high-speed printer.  Our high-speed laser printer doesn't have a print head.  You could show the paper coming out, but it looks just like a photocopier.  Here's my favorite:  Show punch card in action.  We haven't had a card punch for at least 20 years.  Maybe 30, in fact.  Needless to say, the video was never produced.  Oh, how computers have changed.  Opher Banarie, Burbank, California, happy SpinRite owner.  So those blinking lights behind Steve go back to the punch, almost to the punch card era.



STEVE:  Yeah, and today they're in black-and-white, even.  



LEO:  Yeah, they look like they belong there.



STEVE:  I got a kick out of his post and this script that HR said they wanted for their video because it reminded me, computers used to be physical.



LEO:  Right.



STEVE:  They took a lot of space.  You were in their presence; and, like, stuff was happening.  I mean, all of the classic sci-fi movies with the reels and spinning back and forth and banks of lights...



LEO:  That's where all these shots came from, by the way, the sci-fi.  That's where every one of them...



STEVE:  Yeah.



LEO:  Including the hard drive heads.



STEVE:  And I love that he says, "Show the high-speed  printer running."  He says, well, it just kind of looks like a photocopier.  And it's true.  And I guess I feel a little bit the way people probably who are car enthusiasts used to feel because it's been taken away from us.  Now it's just all in a black box.



LEO:  Solid state.



STEVE:  And algorithms are really interesting.  We're going to be discussing a really interesting set of algorithms next week.  I'm actually working on a really interesting algorithm myself at the moment that I'll probably talk about in the future, an interesting challenge of finding the longest repeating strings in a large corpus, which I'm using to eliminate duplicates from the SpinRite testimonials database.



LEO:  Ah, clever.



STEVE:  Yeah, it's because I don't want to have any duplicates.  And the way to do it is to find strings that are long and repeated within a large text, which turns out to be very difficult.  But it's just changed.  Now we just don't have - you're not in the physical presence of a computer.  It's like, eh, yeah, here's my phone.  It's my iPad.  It's my whatever. 



LEO:  Such a good point.  It really has.  It really has.  And there are computers embedded everywhere that you don't even see.



STEVE:  Right.



LEO:  The physical nature of it.  Those lights are PDP-8 lights on the front panel of Steve's PDP-8, which we've described before.  Question 5, Paul Brown in Ham, Richmond.  He actually sent this via Twitter, so it's nice and short.  His Twitter handle is @brownmeister.  In Security Now! you mentioned you have a four-disk RAID 6.  Wouldn't it be better to use RAID 1/0 as it's three times faster at writes?  Why do you use RAID 6, Steve?



STEVE:  Many people picked up on that, so I just wanted to comment.  And others said, well, use RAID 10.  RAID 10, as the digits look, is actually a combination of one and zero.  Those, zero and one are the lowest level of RAID architecture.  Zero is just striping, where you span two drives.  And one is mirroring, where you record the same thing on two drives.  So RAID 10, which is what a number of people suggested, and probably what Paul actually meant, is both.  You're spanning drives for size and then mirroring that span onto another pair for redundancy.  So you end up with twice the amount of storage of a size of a single drive.



What RAID 6 does is, given any number of drives, rather than you having a single parity drive, which is what RAID 5 gives you, you have two parity drives, which is RAID 6.  And so what this means in practice is that any two drives could fail - or actually, more properly stated, the same spot on any two drives could be unreadable, and you still recover the data despite that.  So the benefit of that, for example, over RAID 10 is that, if a particular two spots died on either of two drives, you're in trouble.  So RAID 6 gives you the same amount of storage, that is, you end up - in my case, with a four-disk RAID 6, I end up 

with twice the storage of a single drive, but double redundancy, not just redundancy where any spot can be read, can be figured out from the remaining drives, but any two of the same area anywhere in all the drives could die, and I'd still get it.



So it's just more redundancy.  There's a little more overhead, and people have commented that computing the parity takes time.  I'm using a very fast physical hardware RAID controller, and it's got a big buffer that I'm using with battery backup, and it's a write-back cache, so I only have to write to the physical media.  If the data in the cache is about to be overwritten, then it writes that back to the drive.  So data which is changing often stays in the cache and never even gets written to the drive.  So it's very fast because it's got a big cache, megabytes, I think it's maybe 8 or 16MB of cache.  It's lots of cache, maybe even more, I've forgotten now.  And so I don't see much write time.  But a web server is doing much more reading than writing.  And in fact my whole website lives in RAM because, remember...



LEO:  Wow.



STEVE:  Yeah, it does.  The actual - I looked the other day, after you and I talked about it, Leo.  I have less than 10GB for the entire partition.  I mean, the partition itself is 10GB.  I'm using four for the data storage of the server, including the web server and the entire site.  So that's how lean GRC is.  GRC ends up loading up into RAM, and then it's just being served out of the cache during the day.



LEO:  You don't have a lot of pictures on GRC.



STEVE:  Don't have a lot, no.  And actually the media is on a separate - is on a sort of partition.  And that's, for example, all of the 16Kb versions of the podcast are all on - are not in that same partition.  So anyway, RAID 6 is just, for someone who really never ever ever wants to think about their system.  I did an actual reboot of the server a week and a half ago because there was something funky going on with our eCommerce, and I wanted to make sure that it was them and not us.  I hadn't rebooted for years.  That thing is so stable I never reboot it.  And I looked at the up time, and it's like, oh, okay, well, it'd probably be good to do it just to dust it off a little bit.  So, yeah, very stable.



LEO:  Reboot once in a while, once every decade.  Not a bad idea to reboot.  Isaac Hanna, he's also on Twitter, @isaacrhanna in Melbourne, Australia, tweeted:  Any chance you could offer more info on the problem with full-disk encryption and SSDs?  This is actually a great question that you and I emailed about some months ago because somebody asked about it.  And we ended up getting Allyn Malventano on the line.  It's very interesting.  And also the issue of deleting stuff on SSDs.  TrueCrypt points out that any device that implements wear leveling, which an SSD does, is vulnerable to attack.  You could see that on the TrueCrypt site.  So can we do full-disk encryption on SSDs?



STEVE:  Oh, absolutely.  And there's no reason not to.  The concern is, and this is what the TrueCrypt site mentions, is that if you add full-disk encryption after you have already recorded sensitive data, you cannot absolutely know that the sensitive data wasn't spared out due to wear leveling and not overwritten.  So it's very much like the sector sparing I talked about a minute ago with SpinRite, where SpinRite sees a sector having problems, it'll take it out of use and swap in a different one.  Well, that out-of-use sector is still physically there.  The good news is it's probably hard to read, so that would slow the bad guys down, or the NSA, or the CIA or whatever IA.



So the problem is worse with SSDs because there they may be deliberately remapping on the fly, not just bad areas, but wear leveling deliberately tries not to write to the same spot over and over and over.  So TrueCrypt will read a chunk of plain text which is not encrypted, run its encryption algorithm, and write it back to what is logically the place it just got it from.  But wear leveling may intercept that so that it's written to physically a different location.  So what you encrypted will be read back encrypted, except that it didn't overwrite the plain text of it.



So the lesson is, if you're really concerned about the safety of SSD-based TrueCrypt-style full-drive encryption, install TrueCrypt before first use.  That is to say, as long as you have put TrueCrypt on a blank drive, then dump all your valuables on, you're fine.  But adding it when you've already got sensitive data on the SSD, that's where the concern is.



LEO:  How interesting.



STEVE:  You cannot know, wear leveling prevents you from knowing that you actually overwrote the sensitive data with its encrypted version.



LEO:  So you really can't put TrueCrypt on a drive you've been using.



STEVE:  You really can't, not and have absolute knowledge that all of the sensitive data has been overwritten with encrypted data.



LEO:  Isn't that interesting, huh.



STEVE:  Yeah.



LEO:  Question 7 from Joseph in Los Angeles wonders about WPS and MAC address filtering:  I've finished listening to the WPS podcast.  As usual, great job of exercising my brain while I exercise my butt at the gym.  Of course my Linksys router has the WPS button and no way to disable it.  But since I trust no one, I have configured the router to allow only whitelisted WiFi MAC addresses to access the router because I was concerned that WPA would be one day hacked.  It's amazing this stuff persists.



Do you think that whitelisting MAC addresses is enough to make my WiFi router WPS hack-proof until the firmware is updated?  I'd also be very curious whether the WPS spec automatically whitelists MAC addresses for convenience, as well.  Thanks again, Joseph.



STEVE:  So the WPS spec does not address MAC addresses at all.  And unfortunately, MAC address whitelisting is not safe, ever safe, actually...



LEO:  Never did anything.



STEVE:  No.



LEO:  It just annoys people.



STEVE:  Well, the only thing it was useful for is if you wanted to prevent mistaken use of your access point.



LEO:  Or casual snoops, people who didn't have any skills.



STEVE:  And for whatever reason you did not want to use encryption.  So if you wanted to have a non-encrypted access point, but didn't want someone using your access point by mistake, then MAC address filtering would prevent the access point from using the traffic.  It doesn't prevent bad guys because the MAC addresses are in the air.  They are never encrypted.  Even if you've got encryption on your network, the MAC address, it's the way the packets get from point A to point B because we're talking about wireless Ethernet.



And so MAC addresses are Ethernet addressing.  They cannot be encrypted.  They have to be - essentially they're the outer envelope.  They're the addressing of the packet.  The packet's contents, the envelope's contents, can be encrypted.  The outside can't.  Which means that a determined hacker could simply watch your wireless network traffic, see the MAC addresses which are being accepted by your access point, and then clone the MAC address for their own use; and it, too, would be accepted by your access point.



LEO:  It's just amazing how this MAC address filtering will not die.  There's still a guy in the chatroom says, well, it's a useful tool.  It's not.  It's not.  It doesn't do anything.  Not a useful tool.  The only, yeah, it's useful in this weird situation Steve mentioned where, if you don't want somebody accidentally to use your unencrypted WiFi, I guess it might slow them down.



STEVE:  The only thing I can think it's really useful for.



LEO:  It's not useful, in other words.  And it's such a pain because you have to register MAC addresses and...



STEVE:  Oh, yes.  And there are a bunch of hex characters, which is not easy to type.  And you've got to figure out what MAC address is and, as you said, Leo, manually enter it, or grab it from the table and then allow it to continue being used.  Yeah, it's just a mess.



LEO:  So I'll say it again.  Because you said it, but I'm going to say it again because this doesn't sink in.  Doesn't do nothin'.  The MAC address is floating through the air all the time unencrypted, no matter what, easy to capture, easy to spoof.  You can do it yourself in your own router.  You'll have a setting that says, "What MAC address would you like to be using today?"



Steven McDonald in Scotland comments on today's JavaScript blocking value:  Don't know if you know, but Wikipedia shut its doors a short time ago to protest the USA SOPA.  Of course.  We are, as well.  Well, we're not shut, we're just black-and-white.  You go to any article, and you're redirected to a dark page.  That is, of course, unless you're a Security Now! listener, and you've disabled JavaScript.  I'm browsing Wikipedia right now.  Page only redirects if you have JavaScript enabled.  Well, I guess if you're smart enough to be running NoScript, you probably don't need to be informed about the bad idea that is SOPA and PIPA.



STEVE:  Precisely.  Precisely.  So if you've got scripting disabled, you're probably already clued in to the fundamental problems that this day is dedicated to educating people about.



LEO:  If you do have JavaScript turned on, that's what you'll see:  "Imagine a world without free knowledge.  For over a decade we have spent millions of hours building the largest encyclopedia in human history.  Right now the U.S. Congress is considering legislation that could fatally damage the free and open Internet.  For 24 hours, to raise awareness, we're blacking out Wikipedia."  Then they ask you to enter your zip code, and it will look up your Congresscritter and give you a phone number.



Best thing to do, call that number and say, hey, don't pass, don't vote for SOPA or PIPA or anything like it.  I've got my eyes on you.  If you pass it, you've lost my vote.  And members of Congress, of the House anyway, are all up for reelection this year, and a third of the Senate's up for reelection.  So that should actually have - be polite.  Be nice.  Just say, I want you to know I will not vote for anyone who doesn't protect the free and open Internet.  Simple.  I like this.  So it doesn't work with JavaScript off.  But that's probably their intent; right?



STEVE:  I would think so because you see it briefly, then the black page comes up.  And they could certainly have done it differently.  So to me it does seem like sort of a soft shutdown.  They could have just done - just redirected anything to a page, and you would have never been able to go any further.  And I'm thankful.  I used it already this morning.



LEO:  You know, it really is dramatic.  I think of all the sites that could go dark, that is the most dramatically effective because we do, we use it.  And by the way, I hope people donated when they were asking for money.  It's not too late.  You can always donate.  I donate every year a considerable amount of money to Wikipedia because it is the single most useful thing on the Internet.  If you had to pick one thing.  Just fantastic.  By the way, NoScript also works to remove the black-and-white and make this show in color.  Just in case you want to try that.



Andrew Mason in Adelaide, Australia was slightly disappointed in you, Steve.



STEVE:  Oh.



LEO:  Steve, a few episodes ago someone asked a question about your assembly code being open source, and I was slightly disappointed in your response as it failed to mention open source isn't really about the visibility of the source code.  You know, that's actually a good point.  I mean, it's part of it, but it's not the only part of it.  It's about the license.  Just because I can read your source code doesn't mean I'm allowed to do anything with it.  Open source licenses list a set of rights that go along - and responsibilities that go along with that source code.  Thanks for a great show.  Andrew.  Good point, Andrew.



STEVE:  So, yes, and that's why he made it here into the Q&A because I wanted to let people know that I'd forgotten to mention that.  And he's absolutely right.  I have deliberately open-licensed a bunch of stuff.  The Perfect Paper Passwords technology, the algorithms and all that's open.  The Ultra-High Entropy Random Number Generator that I developed for the Off The Grid system, all the JavaScript is there and explicitly open.  And the Off The Grid system itself, the architecture, the technology, all of that is open.  So when it makes sense for me to give stuff away, I'm more than happy to do that.



Most of my things it just sort of doesn't make sense.  And there is a security side.  I mean, I didn't open source, for example, the DNS benchmarking tool because it would make it really easy for bad guys to create evil versions of it that look just like mine and that could fool users into using it.  So although it's weak protection, it just makes more sense to keep those things which are utilities, which are used on the surface, just as they are.  I'm not an open source publisher, but I'm certainly an open concept publisher.



LEO:  And conversely, everything I wrote when I was writing software 20 years ago I gave away the source code to, but there weren't open source licenses at the time.  So this was 1986, I think.  So I just public-domained it, which isn't the same at all.  But I did give away source code.  So that's not technically really open source.  You want to use GPL or the Apache License or there are lots of open source licenses.  And that...



STEVE:  Right, or Creative Commons.



LEO:  Creative Commons is a kind of open source license.  Yeah, that's a very - everything we do is Creative Commons.



STEVE:  Right.



LEO:  So, for instance, if you decided to take these shows and hand color them and re-release them, you could do that.  In fact, I hope somebody does.  We're black-and-white to protest SOPA, obviously.



STEVE:  Be kind.  If you hand color them, be kind.



LEO:  Make me bright red.  Just look at the bug in the lower right-hand corner, and you'll see a website you can go to to find out more, AmericanCensorship.org.  Question 10, Mark White in London wonders, seriously, whether governments can break our crypto.  This has always been the question.  What can those three-letter agencies get up to?



Steve, I recently had a discussion with a friend of mine regarding security and crypto services that are available.  My assertion was that by using something like TrueCrypt with a 256-bit AES encryption to encrypt a hard drive or to create an encrypted container with a sufficiently long passphrase, using a combination of upper and lowercase letters, digits, punctuation, it would be impossible for anyone to open via brute force.  Furthermore, the open nature of TrueCrypt and the AES encryption cipher ensures that there are no backdoors for anyone to surreptitiously get access.



My friend takes the view that governments simply would not have allowed TrueCrypt or other software to exist without ensuring that there's a way to break the cipher and access the encrypted data.  His reasoning comes from his own military experience whereby he had firsthand experience with some very advanced technologies.  While he wouldn't tell me what those technologies were, he did think that government departments like the NSA in the U.S., MI6 in the U.K., will easily be able to access encrypted data, as the alternative would represent too much of a security risk.



We came up with the following thought experiment:  The NSA has a securely encrypted hard drive with a Priority 1 order to get access to the data it contains as a matter of worldwide security.  Assuming there's no access to anyone who might have the encryption key, is there any way for the NSA to access the data?  After listening to several years of Security Now! I simply do not think this is possible.  Am I being too trusting of the software?  Or is it a safe bet that governments around the world could break into our encrypted files?



I look forward to hearing your thoughts on this.  Thank you for all your hard work on Security Now!, for a great tool in SpinRite, and all the great free services at GRC.com.  Keep up the great work.  Mark in London.  There's only one error in his thought experiment.  He says that, if he uses a sufficiently secure password, it would be impossible for anyone to open it via brute force.



STEVE:  Good point.



LEO:  And that is not what encryption says.



STEVE:  True.  And so "impossible" is wrong.  But the idea would be it would take an unfeasibly long time is the way to correct that one mistake.  But there's something else.  And so this is a great question.  We have seen on this podcast that tools like 256-bit AES are almost certainly absolutely secure.  That is, we know how they work.  Everyone's been pounding on it.  We understand, I mean, it's a simple bit scrambling that you do enough.  We've seen reduced-round versions of it where we can sort of - we get a sense for how quickly it gets soft as we do fewer rounds, which tells us how much extra strength we have with the number of rounds we are doing.



So, I mean, it's just like that's just so clear.  It seems absolutely verifiably secure.  But the way it's used may not be.  And that's the key lesson.  As we will see next week, there is a problem that we know about with WPS.  There's nothing wrong with the underlying crypto, with the hashes, with the secure key exchange mechanisms.  It was the protocol which they built on top of those absolutely bulletproof crypto technologies, it clearly had a problem.  And the implementation.  We saw that routers are not going - they're not going dark, either at all or often for a long enough period to practically prevent brute-forcing.  So there was an implementation error at one level.  There was also apparently a protocol error that we'll be looking at next week, or protocol issues.



So in the case of TrueCrypt, just the fact that it is open and has been seen and looked at by a lot of people, even that doesn't mean a mistake hasn't been made.  BEAST, that we talked about earlier, is another example.  There is something that was a block encryption protocol in SSL where, if you could finesse some of the way it worked, you could leverage a weakness in the protocol.  So again, nothing wrong with the underlying crypto.  But you have to be so, so careful with the way you use it.



And the TrueCrypt guys I'm sure have been.  And we know that law enforcement is being frustrated constantly now by TrueCrypt-encrypted drives.  Certainly there is nothing out in common knowledge that allows someone to get into TrueCrypt.  If there were, it would be fixed immediately.  So could the NSA know something about TrueCrypt we don't?  Could, I mean, anything's possible.  But it's not the crypto that's being broken.  So Mark's original question, wondering seriously whether government can break our crypto, I would have to say no.  They're not happy.  He says, "My friend takes the view that governments would have simply not allowed software such as TrueCrypt to exist."  They don't have any control over that.  They're not happy about that, either.  The MPAA doesn't have any control over digital content once it gets out of their vault.



LEO:  They're trying.  Chris Dodd's right now on CNN.  Of course, remember, CNN is owned by Time Warner.  You ever hear of Warner Bros.?  And they're naturally giving the MPAA lots of time to explain why the SOPA bills protect jobs in Hollywood, which is unmitigated garbage.  Just sad to see that.  And I'll be curious to see if they have anybody on to rebut him.  So I'm going to give you some conspiracy theories.  You ready?



STEVE:  Okay, yup.



LEO:  You can shoot them down if you choose.  First of all, it is why I always say use open source crypto.  I don't like closed source crypto because you can't tell if the government has put a backdoor in it.  We're presuming TrueCrypt, because it's completely open source, you can compile from source, you know what you've got, we're presuming that smart people are looking at that.  I'm not smart enough to know, but smart people are looking at it for backdoors.  So let's presume that that's effective.  That's not the conspiracy theory.



Here's a couple, though.  One, all of this is based on number theory, the simple theory that it is much more difficult to factor a large prime number than it is to create.  Right?



STEVE:  Well, public key technology is.  But TrueCrypt does not use public key technology.



LEO:  Oh, that's right.  All right.  But let's, well, we'll use public key as an example.  It is possible that some mathematical genius has, in secret, figured out a way to factor large primes.



STEVE:  Yes.  You're right.  We know that, if that breakthrough occurs, the world ends.



LEO:  And maybe he works for the CIA, and they're keeping it secret.  That's conspiracy theory No. 1.  Conspiracy theory No. 2 is that there are such fast machines at the NSA - and this, I think, is a given, that they are building the fastest machines money, unlimited federal funds can buy.



STEVE:  It's the only thing they can do.



LEO:  And that maybe they have machines that are so fast that this "unfeasible to crack" has been downgraded to "difficult to crack."



STEVE:  Yeah, they may have quantum computers...



LEO:  We don't know.



STEVE:  ...that are running that just sort of you hand the problem to it, and the quantum computer says, is that all you've got?  Come on.  And then hands you back the answer.



LEO:  Right.  So those are the conspiracy theories.  But barring those, I think we can feel fairly secure that - and by the way, they would have to devote significant resources.  So unless you are in fact planning to blow up the world, you're probably okay.  No one to rebut Chris Dodd on CNN.  What a surprise.  Time Warner owns CNN.  They make movies.  What a surprise.



You will see much more about SOPA, PIPA, and the attempt to break the Internet that is currently being proposed in the U.S. and around the world.  That's very important.  We are going to have more coverage to come on TWiG, on TNT, and Triangulation will be entirely devoted to that.  Trevor Timm from the EFF is going to join us in a little bit, Mark Frauenfelder and Rob Beschizza from Boing Boing.  Wikipedia is dark.  Reddit is dark.  Tumblr is dark.  And we are black-and-white so that we can continue to give you information, but remind you that we are not safe.



And you should visit AmericanCensorship.org; and, most importantly, today would be a very good day to call your elected officials, whether you're in the U.S. or outside the U.S., and tell them we will tolerate no attempt to break the Internet to protect these old business models.  The Internet is making jobs, not costing jobs, in Hollywood and everywhere else.



STEVE:  Well, and jobs, too, I'm tired of hearing everyone talk about, oh, the job-killing bill and the job-killing this and the job - because we have high unemployment right now, "jobs" is the buzzword for everything.  And it's getting overused.



LEO:  Well, you want more jobs for filmmakers, actors, and writers?  The Internet.  Excuse me.  Hello.  If SOPA passes, there's no TWiT, that's 20 jobs down the tube, including me.  And you.



John J. Jobst in Columbia, Illinois comments on the WPS flaw and possible workarounds:  Steve, thanks for a highly informative podcast on the latest cyber threat.  There are a number of threads on the - I bet there are - on the Cisco/Linksys community support forums talking about the WPS flaw, and naturally no official word from Cisco.  Oh, my.



STEVE:  Huh.



LEO:  Most of the advice falls into two camps:  Don't worry - what are you going to say?  Don't panic.  Your chances of someone wanting to hack your router are extremely slim.  Or switch to an open source solution like Tomato or DD-WRT, neither of which support WPS.  One interesting workaround mentions, if you use WPA-2 Enterprise, which we tell everybody to use, you're safe.  But good luck to the typical home network owner setting up a RADIUS server.  I've been an enterprise network administrator for years, and I'm sure I could easily implement any of these solutions.  But since there are only three houses near enough to me to be barely in range of my Wi-Fi router, I'm going to be just doing nothing.  I will look at my logs periodically to see if there are any stray clients.  If I find one, I'll mention the FBI and federal anti-hacking statutes to my neighbor, which should be enough to make it stop.



STEVE:  Oh, by the way.



LEO:  Even if I were in an apartment complex with lots of Wi-Fi-enabled neighbors, I wonder how big the threat really is.  Are there any statistics out there to say how often the WPS flaw is being exploited?  Good question.  P.S.:  My wife is usually in the room or in the car when I listen to Security Now!.  Oh, I'm so sorry.  Last week she asked me if I have "that Spin thing," and if I could fix her computer.  I told her, hey, I bought SpinRite a long time ago, and it fixed your unbootable computer about three years ago.  Unfortunately, her current problem is a defective wireless keyboard.  SpinRite I don't think works on that.  Keep up the good work!



STEVE:  No.  Can't do anything about the keyboard.  And yes, I liked this.  I wanted to put it in just to sort of tell people - I think our listeners probably have a good sense.  Or if you have something which at the moment is Linux-only, and it takes two to 10 hours in order to get onto someone's network...



LEO:  You're not a high-priority target.



STEVE:  I wouldn't worry about it that much.  The big problem is that it's in all routers made in the last few years.  And it's enabled by default.  And it's not going to go away.  Routers, I have an interesting thought, Leo, that router firmware is not self-upgradeable the way virtually all of our other mainstream computer devices are now.  Windows, and as we know Google Chrome, it updates itself constantly.  Our phones, our pads, our tablets, I mean, everything, we're now in this sort of autonomous update mode.  Conspicuously, routers don't.



So it's not possible for Netgear just to push out, or for all Netgear routers to be, like, checking in to see if there's any new firmware for them.  And we're probably to the point where, as this demonstrates, it would sure be nice if it would be possible for our router manufacturers to essentially push out a fix by making something available, and have their routers checking in to see if there's an update, and make it trivial for users to do that.  But routers are typically - they run without a UI most of the time.  So it's not clear how that would work.  But it would sure be nice.  The problem is we're stuck with an industry full of established routers that have this vulnerability.  And it's just not going to go away anytime soon.



LEO:  Is he right when he says WPA2 Enterprise is not liable?  Or vulnerable?



STEVE:  Good question.  Whether...



LEO:  I guess if you used a RADIUS server to do it, you'd probably be all right.



STEVE:  Yeah, you're probably up at a different level where you don't have the...



LEO:  You just don't have WPS.  That's the...



STEVE:  Right.



LEO:  If you're doing that, no WPS with RADIUS.



STEVE:  Yeah.



LEO:  Yeah, I mean, I think that's really important because we often, I think, imply that this is a huge security issue.  You were on the radio show both Saturday and Sunday to warn people about this.  And it may become a bigger and bigger security issue as tools come out.



STEVE:  Well, there's no doubt we're going to get tools.  This is not going away.



LEO:  Right.  Our final question.  Dan in the USofA wonders about audio-to-text conversion:  I love your site.  I listen often.  I was just wondering, how do you create the text transcript of the audio-based show?  Steve offers a text file with each and every show at his site, GRC.com.  He says:  Do you use a free or commercial product to automatically type out a text form of your podcast?  Or does someone hand-type it in?  Thanks.



STEVE:  And her name is Elaine.



LEO:  Yes.  She is not a robot.



STEVE:  No, she's not.



LEO:  She's human.



STEVE:  Yup.  She's very human.  She's very good.  I stumbled on her.  I Googled something like "audio transcription" or something, and On-Site Media is her company, and it came up.  And there may have been some others, but she had a little form you could fill in to, like, request a quote.  And I thought, well, okay.  And so I did, and I sort of liked that she was technically savvy enough to have a site like that.  And, boy, what a win.  I've recommended her when people asked for transcripts.  She's not inexpensive.  Apparently there are send your audio off to China or India or something places.  But you get what you pay for.  And I really care about quality.  Elaine is actively using Wikipedia and Google and the 'Net as she's transcribing the podcast, tracking down the spelling and the location of things and making sure that she's got it exactly right.  So, I mean, these are perfect transcriptions.  So I just wanted to give her a little shout-out to let our listeners know that there is a terrific service that, if you've got an audio that you need transcribed, there's just none better.



LEO:  Well, and that's one of the reasons I really appreciate you, Steve, because you make a lot of extra effort on this show.  Not only do you put a lot of work into prepping it, but you make 16Kb versions available, on your own time, on your website.  You also make those transcriptions available.  You pay Elaine, so we really are very grateful.  I know you consider this a significant public service, and you really put your money where your mouth is.  So thank you, Steve.  I do appreciate that.



You can find those 16Kb versions and transcriptions at GRC.com.  That's a good place to ask questions, too.  There's a feedback form.  That's the way to do it.  Don't email Steve.  Go to GRC.com/feedback and leave the question there.  He can't guarantee a personal response, but the questions that get asked the most, by the most people, are often answered in these Q&A episodes which we do every other show.  Next week we will talk more about - what is it?



STEVE:  WPS Protocol.



LEO:  Yeah, okay.



STEVE:  It's the way - the idea is how do you - they're called zero-knowledge proofs.  And if Wikipedia weren't dark right now you could go find out what that is.  Very interesting problem in computer science where you want to prove to somebody that you know something without revealing anything about what it is.  So you give away no knowledge, yet you prove you know it.



LEO:  I know nothing.



STEVE:  Yeah.  But you will in a week, Leo.



LEO:  I can't wait.  GRC.com, the place to go for SpinRite, as well, world's best hard drive maintenance and recovery utility.  There.  That's it.  That's all you need to know.  World's best hard drive maintenance and recovery utility.  Steve, thank you for letting us do this show in black-and-white this week in order to, again, underscore the risks posed to a free and open Internet by legislation, not just in the U.S., but all over the world, designed to protect content creators against piracy.  It would not do that.  In fact, pirates are never thwarted by these kinds of efforts.  But it would break the Internet.



STEVE:  Right.  And that's the other thing we forgot to mention, Leo.  It wouldn't work anyway.  We talked about blacklisting.  This is blacklisting.  If blacklisting worked, there would be no spam because we would have blacklisted the spammers, and that would have been the end of it.



LEO:  Yeah.  So there.



STEVE:  So, I mean, it doesn't even work.



LEO:  Look how spam-free we all are now, thanks to the blacklists.



STEVE:  Exactly.



LEO:  And everybody knows, I hope you know, we've talked about it enough, that blacklists inevitably punish legitimate sites like mine.  And so it would in fact, without slowing down piracy in any way, it would break the Internet.  It would inevitably bring down sites like Tumblr, Reddit, and Wikipedia, innocent sites.  It's just a bad idea all around.  They'll come back.  They're not done.  They'll rewrite, rename.  But the motion picture industry, the recording industry will not stop until they get a law like this.  We have to say, this and no more.  No further.



STEVE:  And what they will probably do - this will be incremental.  We're going to lose this battle a little bit at a time.  They bit off more than they should have this time.  And I'm sure they got a big lesson on this.  So instead it'll come back, and it'll just chew around the edges.  And then they'll chew a little bit more, and they'll chew a little bit more.  They'll wait a few years, and they'll chew a little bit more.  I mean, there is this pressure, unfortunately.



LEO:  Oh, yeah.  Alas.  Thank you, Steve.



STEVE:  My pleasure, Leo.  Thanks so much.  Talk to you next week.



LEO:  We'll be back in color, full living color next week on Security Now!.

 

Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/

	

SERIES:		Security Now!

EPISODE:	#337

DATE:		January 26, 2012

TITLE:		WPS:  A Troubled Protocol

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-337.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  This week, after catching up on an interesting week of Security and Privacy news and legislation, Steve and Leo examine the troubled Wi-Fi Protected Security (WPS) protocol in detail to understand its exact operation, and to examine a series of limitations that cannot be resolved.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 337, recorded January 25, 2012 - WPS:  A Troubled Protocol.



It's time for Security Now!, the show that covers protecting you online.  Here he is, ladies and gentlemen, our Explainer-in-Chief, the man in charge of Security Now!, the man who explains how this stuff works and what to do to keep yourself safe, Mr. Steven Gibson.



STEVE GIBSON:  Hey, Leo.  Great to be with you again, as always.



LEO:  He's the guy in charge at GRC.com, that's the Gibson Research Corporation, creator of SpinRite.  It's kind of nice because you have one thing that you do for a living, which is the software.



STEVE:  Yup, pays the bills.



LEO:  Pays the bills.  And that gives you enough free time to not only do this show, which is a lot of work, but to program and work and study.  And so you've kind of got a good life, if what you want to do is kind of be in touch with what's going on in technology.



STEVE:  Yeah, putter around and work with technology and come up with new stuff from time to time.



LEO:  He's a putterer.



STEVE:  I'm a putterer.  I putter.



LEO:  Putter.  I putter.  So today what are we puttering around with?



STEVE:  Okay.  As I promised last week, when I learned from a number of experts in the industry that my off-the-cuff idea for solving the WPS problem couldn't work...



LEO:  Oh, no.



STEVE:  ...I thought, okay, why not?  So that required me to dig in and really understand exactly how this WPS protocol works.  The good news is, it is not tricky.  I mean, this is going to be a propeller-head episode.  This is one where we're going to need our listeners to focus and concentrate a little bit.  But the takeaway will be some cool new understanding that we've never had before of crypto, on at least this podcast, and a really good understanding of what the problems are with WPS.  And the bad news is that there is no good solution.  They've made some compromises in the implementation of this.  Apple got it right because Apple's approach uses a one-time eight-digit PIN, whereas the rest of the industry has it printed on a label.  That's the big mistake that they made.



And so this episode we're going to, first of all, as always, catch up on some interesting security news.  Lots of interesting legislation has gone down in the last week, and we'll bring ourselves current with that stuff.  But then I want to explain exactly how the protocol works and introduce a couple new ideas.  I talked about it briefly last week, the notion of how it's possible to prove you know something without telling what it is.  Which is a really interesting problem.  You want to be able to prove your knowledge, but not divulge...



LEO:  Not give it away, yeah.



STEVE:  ...what that is, yes.  And it turns out it's not hard, using the bag of tricks we already have with crypto stuff.



LEO:  This would be such a fun assignment for a student, a smart high school student or a college comp sci student.  How do you do this?  Well, I'll tell you what...



STEVE:  Everyone's going to know about an hour from now.



LEO:  Do a thought experiment right now.  Think about it.  And in a little while Steve will give you - I love that.  It's like cover the page, kids, and think about it.



STEVE:  Or hit pause.



LEO:  Hit pause and think about it.  And then Steve will explain a clever way to do this.



STEVE:  Really, really clever.



LEO:  I like it.  And it actually will help if you think about it before you hear Steve's solution, so you understand what the issues involved are.



STEVE:  Oh, yeah.  Independently inventing things is the best way...



LEO:  I agree.



STEVE:  ...to figure out how things work.  There's something...



LEO:  Or at least trying.  Even if you can't do it, banging your head against it gives you some idea of the parameters involved, of the challenge involved and so forth.



STEVE:  But if you don't feel like that, just stay put.



LEO:  That's how I do this show.  Passive osmosis absorption.  Hey, we're going to take a break.  We've got some security news, too, and we'll talk about all of that in a bit.  All right.  Let's get the security news, and then we can talk about WPS, Steve.



STEVE:  Yeah.  Many, many people tweeted me various instances of this troubling judgment that came down from a judge in Peyton, Colorado, who ruled that Fifth Amendment U.S. Constitution protection does not apply to encrypted laptop passwords.  Now, of course the Fifth Amendment, famously, is the amendment that allows an individual to not incriminate themselves.  So they're saying that the Fifth Amendment doesn't apply in the instance of forcing someone to give up their password, even though doing so would be self-incriminating.



This Judge Robert Blackburn wrote, he said, "I find and conclude that the Fifth Amendment is not implicated by requiring production of the unencrypted contents of the Toshiba Satellite M305 laptop computer."  He also said that the All Writs Act, which dates back to 1789 and has been used to require telephone companies to aid in surveillance, could also be invoked in forcing decryption of hard drives.  And in doing this he sided with the U.S. Department of Justice, which argued that Americans' Fifth Amendment right to remain silent doesn't apply to their encryption passphrases.



LEO:  Oh, I saw this.  This is really horrible.



STEVE:  Yes.  Federal prosecutors, who did not immediately respond to requests for comment, did post a brief, and they said, "Public interests will be harmed absent requiring defendants to make available unencrypted contents in circumstances like these."



LEO:  You know, public interest is harmed by not being able to execute anybody you want whenever you want.  That's demonstrably true.  But that's why we have a Constitution.



STEVE:  And interestingly, Leo, this has been a case that's been flopping around for years.



LEO:  Well, and other courts have ruled other ways; right?



STEVE:  Yes.  And we talked about this particular case.  This was a woman who is accused of mortgage fraud and, they believe, has a bunch of incriminating records on her laptop.  In this case she's not using TrueCrypt, she's using Symantec's PGP encryption, which is the same thing, a really strong whole-drive encryption.  And she hasn't said she even remembers the passphrase, so she hasn't said that.  But her attorney, who actually has done some work in the past for Phil Zimmermann...



LEO:  Right, PGP's creator.



STEVE:  And so he's up to speed on this stuff.



LEO:  She got the right guy.



STEVE:  Yes, exactly.  So the DoJ says, "Failing to compel Ms. Fricosu amounts to a concession to her and potential criminals" - and here we go again, of course, we're marching out child pornography - "(be it in child exploitation, national security, terrorism, financial crimes or drug trafficking cases) that encrypting all inculpatory digital evidence will serve to defeat the efforts of law enforcement officers to obtain such evidence through judicially authorized search warrants, and thus make their prosecution impossible."  So basically that's a long-winded way of saying we don't like encryption.



LEO:  Yeah, because we can't prosecute bad guys.  And you're right, they always bring up child pornography, or they always talk about what this woman's alleged crime was.  And that's not germane.



STEVE:  Right.  Now, this is just some random judge.  He was, doesn't really matter, he was a Bush appointee, so he's been around for a while.  This is not the Supreme Court.  The Supreme Court has not confronted this topic, but a bunch of lower courts have.  Now, the way the law works - I was married to an attorney for a while so I got to see this in action - is that the way attorneys work is they normally form a theory of a case through analogy.  So they'll try to say, well, this is analogous to some other situation which has the outcome that that they want, and try to say these are the same things in different clothes.  So prosecutors tend to view the PGP passphrases as akin to someone possessing a key to a safe.



LEO:  In a locker, yeah, or a safe, okay.



STEVE:  Right, filled with incriminating documents.  That person can, in general, be compelled to hand over the key.



LEO:  Interesting.



STEVE:  So there is existing case law where, if someone had a key to something, then they could be forced to give it over.  But...



LEO:  And so this all comes down to the Fifth Amendment and the right not to incriminate yourself.  And so you're saying in the case of a physical safe, the courts have not deemed that protected by the Fifth Amendment.



STEVE:  Protected, yes.  And other examples include the U.S. Supreme Court saying that defendants can be forced to provide fingerprints, blood samples, or voice recordings.



LEO:  Potentially incriminating.



STEVE:  Yeah, and arguably skating on this Fifth Amendment incrimination issue.  Now, on the other side, civil libertarians cite other Supreme Court cases that conclude that Americans cannot be forced to give "compelled testimonial communications" and extending the legal shield of the Fifth Amendment to encryption passphrases.  Courts already have ruled that such protection extends to the contents of a defendant's mind, so goes the argument.



LEO:  Wow.



STEVE:  So why shouldn't a passphrase similarly be shielded, as well?  So the idea is, if it's a physical key, that seems to cut on the other side of this issue, and you could be forced to hand that over.  But the argument is, if it's something you know, then the Fifth Amendment and the Supreme Court has said you cannot be compelled, you cannot have compelled testimony of the value of that passphrase.  So anyway, this is...



LEO:  And this is why people become lawyers, because it's fascinating.



STEVE:  Yeah, yeah.  I mean, it truly is.  And what's interesting is these things are not black and white.  I mean, there is - the law operates in a big gray zone.  And after you've had enough exposure to it, you develop an appreciation for the fact that there are hard problems that don't have an easy and obvious solution.



LEO:  It's a living document.  I know people want to be constructionist about the Constitution, but I don't think the founders considered encryption.



STEVE:  Right.  No.  And in fact, that's one of our problems, of course, is that our beloved Constitution is creaky compared to the challenges that it's being given these days.  But there was another thing that we talked about some years ago on the podcast, about the issue of warrantless GPS tracking.  And the U.S. Supreme Court has just ruled that GPS tracking of a vehicle requires a warrant.



LEO:  That we were happy about.  That was - we talked about this case; right?



STEVE:  Not you and I, but maybe on...



LEO:  Oh, another show.



STEVE:  ...one of the other podcasts, yeah.  There's a guy, Antoine Jones.  The U.S. Department of Justice had argued that Jones had "no reasonable expectation of privacy."  So that was their phraseology for their ability to put a tracking device on his car.  He had no reasonable expectation of privacy.  But in a unanimous decision - which says, whoa, okay, everybody, when does that happen - in a unanimous decision the U.S. Supreme Court said that U.S. law enforcement agents need to obtain court-approved warrants before tracking suspects using GPS devices.



The decision rejects arguments from the U.S. Department of Justice that a four-week-long warrantless GPS tracking of a suspect's vehicle was within the law.  The decision upholds a U.S. Court of Appeals decision that overturned the conviction of this Antoine Jones.  Justice Scalia wrote, "We hold that the government's installation of a GPS device on a target's vehicle, and its use of that device to monitor the vehicle's movements, constitutes a 'search.'"



LEO:  As I remember - now, maybe it was on This Week in Law.  I can't remember where we had this discussion.  But as I remember, the question was - because the car was, I think, in his garage.  And the question was whether they had the right - there's no question they can go into his...



STEVE:  To sneak in?



LEO:  To sneak in.  And whether his car, whether they had the right to access his vehicle.



STEVE:  Yeah, I think this is broader.  Scalia is saying that the use of a device to monitor the vehicle's movements...



LEO:  Of any kind.



STEVE:  ...is a search.  So it falls under the warrant requirement for searches.



LEO:  Very interesting.



STEVE:  Which is really good news, yeah.



LEO:  And it seems like it's completely the opposite of this other ruling, this PGP ruling.



STEVE:  I know.



LEO:  The problem is that the language - I was just looking at the Fifth Amendment of the Constitution.  And the language isn't - it's antiquated.  And so it's going to take interpretation.



STEVE:  Interpretation, yes.



LEO:  Let me see if I can find this here.



STEVE:  Yeah, it's like what did the framers intend, and...



LEO:  It says - the essential clause is "No person shall be compelled in any criminal case to be a witness against himself."



STEVE:  Yes.



LEO:  That's it.  And so you could interpret that, well, you can't be forced to testify against yourself, and that's of course how it's been interpreted.



STEVE:  Right, taking the Fifth.



LEO:  Taking the Fifth.  But is giving somebody a password testifying against yourself?  I'm not sure that's the case.  Certainly, I think it is more analogous, and I hate to say it, to taking a fingerprint or a DNA sample.



STEVE:  Well, and ultimately, remember that contempt of court is the charge.  That is, this individual, if compelled to divulge the password, I mean, the fact is we now have the technology that makes it utterly unbreakable.  So that's not even a question.  So this individual has complete control over whether the contents of the laptop will be released and made available or not.  So she's able to say, "I choose no."



LEO:  Right.



STEVE:  And then the court holds her in contempt and does whatever they're going to do with her that way.



LEO:  They can keep her in jail indefinitely.  That's the thing.



STEVE:  Yeah, well, that's really a...



LEO:  And then of course that's why, and we've talked about this before, TrueCrypt has this plausible deniability feature.



STEVE:  Right, where you're able to take slack space and set up another, sort of another containment that no force on earth can prove is data.  The way TrueCrypt works, it randomizes it and just looks like noise.  So you're able to say, here's my password, look, there's nothing bad here.  And then there is, however, like a trapdoor, there's a backdoor, there's another whole drive which is there.  Now, the problem is everybody knows about that.  It's not like it's a secret, so...



LEO:  Right.  And there would be other ways for law enforce- you know, I once asked the Secret Service about this.  We talked to the Secret Service, Patrick Norton and I flew out and spent some time with them.  And they said the truth is these cases don't come up much.  This was, by the way, 10 years ago.  These cases don't come up much because most of the time criminals just give us the password.  It's not - in most cases you get a confession of some kind.  People tell you.



STEVE:  Yes.  And in researching this, there was another case where this was the same issue, and the individual gave the password, the drive was decrypted, and it provided evidence that led to his being found guilty, and he was incarcerated.  So as you said...



LEO:  Most of the time people just confess.



STEVE:  Right.  And from my standpoint as a technologist, I won't take an ethical or moral position.  I'll just say this is math, this is capability, this is technology.  How it's used is not the technology's fault.  It's the fault of the people.  So encrypting stuff is something that there are lots of valid uses for.  I want to be able to have my little 32GB thumb drive on my keychain and have it immune from poking by the valet or the car service station because we know that that's been a problem in the past.  So that's an entirely valid reason for me having really strong encryption and having access to it.  And unfortunately criminals are going to be able to shield themselves using the same technology.  But it's not the technology's fault.



LEO:  Right.  Any more than it's the phone's fault that people can use the telephone to...



STEVE:  To upset somebody.



LEO:  ...to upset somebody.  That's technology.  It's neutral.



STEVE:  Right.  So DNS poisoning, it turns out, we haven't talked about for many years, since Dan Kaminsky warned the world that DNS servers were more vulnerable than we thought.  But it apparently bit CBS.  The hacker group Anonymous is claiming credit for changing the main DNS for CBS.com.



LEO:  Wow.



STEVE:  It was 92.122.127.27, and it got changed.  It was completely repointed to 198.99.118.36 and .37.  And it only lasted 20 minutes because, again, this is not something hard to fix.  The problem, of course, is that if the changed entries had a long caching time, then anybody who retrieved that DNS record during that 20-minute window would have caused that CBS - the bad record to get cached for the duration of, I mean, which could be days or weeks.  And so what happened was the site went completely black.  It went completely dark for people who, when they went to CBS.com, required querying the DNS system in order to get the IP.  That is, if they had gone through an ISP, and the ISP's entry for CBS.com had expired, then the ISP would go and fetch it from the second-level servers and then cache it.  So it's a problem.  And we don't know any more details.  CBS is not saying anything except that, well, it only lasted 20 minutes.  They're trying to minimize it.  The problems actually had to be longer lived than that.  But DNS poisoning still is happening.  Not often, but it's still a problem.



LEO:  It's really intriguing, yeah.



STEVE:  Yeah, it is.  Well, and it completely took the site.  It aimed everybody who wanted to go to CBS and all of its subdomains, I mean, everything got pointed.  There wasn't even anything really there.  There was a blank page with one file.  So whoever did this wasn't getting much benefit from it.  So it was probably not planned.  They probably saw a tiny window of opportunity to perform some sort of an attack and slipped in and did it, but really weren't set up to present people with some - the danger, of course, is not to take them to a blank page, but to a fake CBS page with, like, all kinds of fake news and things.



LEO:  Right, or a page with a login for your Google account or something.



STEVE:  Ah.  Yup, exactly.



LEO:  And that 20 minutes would be enough to capture quite a few.



STEVE:  Oh, goodness, yes.  Well, and again, as I said, if the caching record said this entry is valid for a week, then it wouldn't get flushed.  They'd still be serving the bad IP until it finally did expire, which is why DNS takes a while, why DNS changes take a while to propagate across the Internet because the power of DNS is that it is caching.  However, it's worth noting that this could not happen with DNSSEC.  So this kind of spoof, there's no way that you could get a record that was fraudulent once DNSSEC is signing records.  And so this is a variant, of course, on what SOPA and PIPA were trying to do to us in that legislation, where sites would get redirected.  We talk about that a little bit here in a second, so we'll be coming back to that.



I did want to mention the DreamHost, a very big hosting provider that's been around forever, they're based here in Southern California, they detected some sort of unauthorized activity on one of their databases is the only thing they said.  But as a consequence of that they did the right thing.  They shut down access.  They obsoleted everyone's FTP and shell passwords as a precautionary measure and then sent out notices to all DreamHost customers that were affected, saying we're really sorry for the inconvenience.  Something is going on that looks suspicious, so we're going to be better safe than not, and you're going to have to come in and update your passwords.  So I was pleased to see them handling that nicely.



LEO:  Yeah, that's neat, yeah.



STEVE:  Now, many people, and I'm sure you heard about this, noted that Megaupload got taken down.



LEO:  Yes.  Oh, yeah.



STEVE:  Yeah.  And it's interesting because the first thing I saw about it was someone I thought made a very good point, which is, well, that happened without SOPA and PIPA.  So the system works now, if we just use the laws we have rather than advancing laws that are somewhat questionable.



LEO:  Oh, but it's so hard.  You have to go through due process.  You have to enlist the support of other law enforcement agencies all over the world.  It'd just be so much easier just to flip a switch, Steve.



STEVE:  Yeah, wouldn't that be.  Just push a button.



LEO:  Yeah.  Why make it so hard?



STEVE:  Yup.  The SANS Institute, in reporting this, said that U.S. federal law enforcement agents have shuttered the Megaupload.com website, seized 18 domains connected to the site, and indicted seven executives and two companies.  The company is based in Hong Kong, which means, even in Hong Kong, probably nearby the Post Office...



LEO:  Yeah, I was just going to say...



STEVE:  It's possible to extend our reach and make that happen.  The executives face a number of charges, including criminal copyright infringement and conspiracy to commit money laundering.  The government says that Megaupload allowed users to access movies before they were released in theaters, as well as music, television shows, eBooks, and software, most in violation of copyright law.



LEO:  Oh, where can I get that?  That sounds great.



STEVE:  Yeah, I like that pre-release part.  Megaupload has reportedly earned more than $175 million U.S.



LEO:  See, that's the issue is did they know and did they intentionally profit from this.



STEVE:  Yeah.  The FBI...



LEO:  And looking, I mean, I don't want to prosecute these guys before they get their day in court.  But if you kind of look at all the evidence, they picked one that was a - this is a good prosecution in the sense that they have a case, I think.



STEVE:  Yes.  SANS goes on saying the FBI also seized company assets.  While some have used the closure of Megaupload to point to the need for stronger antipiracy laws like SOPA and PIPA, others have pointed out that, if the U.S. government can shut down such a large operation, perhaps such laws are not necessary, as they already have the power they need.



LEO:  Were their servers in Hong Kong?  Were they offshore?  Because that was - the contention of SOPA is, yeah, oh, no, no problem, we can handle U.S. piracy sites.  But what about offsite, offshore Internet?



STEVE:  Oh, yeah.  They had to reach outside of the U.S. jurisdiction.



LEO:  Yeah, they went to New Zealand to get these guys.



STEVE:  Yup.  And in fact one of the guys legally changed his name to something...



LEO:  Yeah, Kim Dotcom.  His real name is Kim Schmitz, I think.  Yeah.  Look, I'm not going to go through all the reasons why they seem like they might be guilty.  And you can also - there's all sorts of conspiracy theories.  This company had also announced a new music label based on their upload service that was about to launch.  So apparently their servers were in the U.S.  They were in Virginia.  So that's why this worked, and that's the whole contention of PIPA and SOPA, is yeah, well, if you're in Virginia, we've got you.  But if you're outside, if your servers are in Hong Kong, then we've got a problem.  Or let's say they're in China, where we...



STEVE:  Because it's so much more difficult.



LEO:  There's no copyright law in China at all.  So that's the whole idea.  And so the idea of SOPA and PIPA was to...



STEVE:  Is there no copyright law in China?



LEO:  It's not enforced.  You can go - it's so weird.  I mean, I don't know.  There may not be.  I don't know if it's on the books, so who knows what the law is.  You can go, in Beijing, quite openly into a department store, go down to the basement, and every movie ever made is available on DVD, high-quality copies.  I mean, it's...



STEVE:  For a dollar.



LEO:  For a dollar.  So it's wide open there.  I can presume that, if these guys had been running their servers out of China, that we wouldn't have gotten much cooperation from China.  So that's the point is what - and of course that's why it's a broken system, because it doesn't take the servers down, it just kind of disconnects them from U.S. users by modifying DNS and search.  And that's the problem.



STEVE:  Right, right.  Now, what was interesting, too, was a U.K.-based technology news site, V3.co.uk, reported that, quoting from them, "Panic is spreading among filesharing websites with a U.S. user base."



LEO:  Oh, yeah.  A lot of them went offline or changed their policies.



STEVE:  Yes.  They said "...FileSonic, FileServe, and Uploaded.to all restricting their services following the shutdown of Megaupload last week.  "'All sharing functionality on FileSonic is now disabled,' says a message on the FileSonic homepage.  'Our service can only be used to upload and retrieve files that you have uploaded personally.'  Uploaded.to and FileServe carry no messages on their home pages, but FileServe is said to be taking similar action to FileSonic, while Uploaded.to reportedly suspended service to U.S. customers."  So that's really interesting, too.  They looked at what happened and said, oh, wow, we'd better clean up our act because we don't want to have ourselves rounded up and carted off.



LEO:  Right.



STEVE:  Now, the EFF has a nice little piece that I wanted to share with our listeners.  It's pretty short.  It's the EFF's, of course, our Electronic Freedom Foundation.



LEO:  Frontier Foundation.  Electronic Frontier...



STEVE:  Yeah, I knew that wasn't right, Frontier, Electronic Frontier Foundation.  They said, "Post-SOPA and PIPA, What's Next?  No Legislation, More Innovation."  They said, "Last week's historic protests made clear just what the tech community and Internet users are capable of accomplishing when they act together - not only have the Protect IP Act (PIPA) and its House counterpart, the Stop Online Piracy Act (SOPA), been tabled for now, but in a welcome change, the public debate has increasingly considered the interests of Internet users and the opinions of those who actually understand how the technology works."  Imagine that, Leo.  "Despite this, we keep hearing people ask: what's next?  And where do we go from here?  Our answer:  We don't need legislation.  And let's keep moving innovation forward.



"The answer to maintaining an open, thriving Internet does not lay in legislation, but rather in fostering innovative (and oftentimes disruptive) business models that allow content creators to get paid and consumers to have easy and efficient access to content.  We've seen time and again that consumers are willing to pay at a price point that makes sense for them - this is Economics 101.  When new business models emerge, artists and fans win.  It's only the traditional distributers and gatekeepers (we're looking at you, MPAA and RIAA) who lose, so it's no wonder that those parties desperately tried to ram through dangerous legislation to stop disruptive new business models, with no regard for the attendant serious potential collateral damage.  Remember, these are the lobbies that have a history of attacking nascent technologies as far back as the player piano.



"A modern day case in point:  last week's public takedown of Megaupload.  We've only heard one side of the story so far, so let's set aside the many outstanding legal questions.  But it's clear that many artists were using the site to connect with their fans."



LEO:  That's right.



STEVE:  "Given the legacy media companies' reluctance to innovate internally, it's especially unfortunate that the dramatic takedown of Megaupload could chill future innovators who would otherwise experiment with new business models.



"To be sure, there are plenty of exciting new content services emerging.  For example, take the Humble Indie Bundle, video game developers who have realized substantial success devising a pay-what-you-want scheme for distributing video games.  Or artists like Jonathan Coulton, who has, with much success, produced and distributed his own music (and who recently provided this pithy advice to creators who reject new business models but complain about piracy:  'Make good stuff, then make it easy for people to buy it.  There's your anti-piracy plan.')."



LEO:  I agree.  I agree.  But, you know me, I'm very anti-SOPA and PIPA.  We went black-and-white last week and everything.  I do have to point out that, if you're a rights holder, you have the right to protect your rights  Whether it's good business is another question.  But it is not - it is completely your right to protect your rights, even though - because the point EFF's making is, well, don't protect your rights, look for a better business model.  But as it stands they have a right to protect themselves.  So it is not completely easy.



And remember, I am on the "kill Hollywood" side.  I mean, that's what we're doing here.  That's what TWiT is all about.  Y Combinator - somebody in the chatroom just passed this along to me - is what they call a start-up school.  It's one of the best known for training entrepreneurs.  They give them seed money.  They teach them how to do a startup.  They just issued a request for submissions for businesses that kill Hollywood.  We want to fund startups that will compete with movies and TV, not to protect the world from more SOPAs, but because SOPA brought it to our attention that Hollywood's dying.  They must be dying if they're resorting to such tactics.  If movies and TV were growing rapidly, their growth would take up all their attention.  So they're saying, let's come up with some business models that speed the process.  I'm all for that.  That's what we're doing here.  That's what this is all about.



STEVE:  Yup.  And it works, Leo.



LEO:  But at the same time I'm not going to gainsay the right of content creators to protect themselves.  They do have that right, and they ought to have that right.  Let's just not let - let's not have the pendulum swing so far in the direction that it takes away the rights of the rest of us to have a free and open Internet and a right to compete.



STEVE:  And we're back to gray area, unfortunately.  I mean, many problems do not have good solutions.



LEO:  I agree.



STEVE:  And so it is necessary to strike some compromise, to say - well, I mean, I think we're there.  It's interesting that valid use of Megaupload has unfortunately been damaged by the wholesale takedown of the entire site.  It does sound like this was a little blunt, and...



LEO:  There are a lot of people who have legitimate files on Megaupload, business files and more, who are out of luck.  That stuff's gone.  So that's a very good point.  We've got to find a way that is not all one-sided.



STEVE:  And we will.  I mean...



LEO:  I think we are.



STEVE:  This is all new.



LEO:  Exactly.  And anytime you have a disruption like this, you're going to have unhappiness and trouble.  Look at the Industrial Revolution.  If you were a weaver in 16th, 17-century Britain, bad times ahead.



STEVE:  Yeah, sorry about that.



LEO:  Sorry.  What can I do?



STEVE:  So I don't have a testimonial to share because I wanted to tell our listeners that I saw a clear effect on SpinRite sales from what I did last week.



LEO:  Oh, really.



STEVE:  Remember that last week, when I was going through the mailbag for our Q&A, I ran across a neat letter from a relatively new listener who said, you know, Steve, love the podcast, you and Leo are great, et cetera, et cetera.  And "I listen to the SpinRite testimonials, but I can't figure out what it does.  And I went over to your website..."



LEO:  He apparently was not alone.



STEVE:  "...and I watched the video" - exactly, that's my point.  He said, "I watched the video, and it's very entertaining, but I still don't really know what it does."  So I launched into a sort of extemporaneous "Here's how SpinRite works."  And that's now on the record in Episode 336.  So just in case anybody who feels similarly, who doesn't really have an appreciation for the nature of the way defects can grow on a disk, how sectors can go bad that were once good, how and why preventative maintenance actually works, and how it's possible to recover data from a sector that is unreadable, I explained all that last week.  So I just wanted to give another pointer back to last week, Episode 336's explanation of what SpinRite does.  And I'm going to come up with some way of sticking that up on the website statically.



LEO:  Yeah, you could just extract it, yeah.



STEVE:  Yeah, because it's just...



LEO:  One way to do it, just as a thought, we put this on YouTube, youtube.com/twit.  And there is a way to do a YouTube URL that jumps to a particular time marker.



STEVE:  Ah, yes, an offset.



LEO:  Yeah.  So you could use the YouTube embed code.  I know you don't like Flash.  Actually there's HTML YouTube, as well.  So you go to look at that.



STEVE:  Yeah, YouTube no longer needs Flash.



LEO:  That's right.  And so you could have a link.  I don't know, though, if the non-Flash version will jump.  Anyway, it's worth investigating that you could just - this is what we're going to do on the Tech Guy site.  The new Tech Guy site will have - because every show of the radio show is a question-and-answer, question-and-answer.  So we'll just have it jump right to that question, and you'll be able to watch the question and the answer.



STEVE:  Oh, very cool.



LEO:  Yeah, I'm excited about it.  Anyway, thank you for that explanation.  So now we all know the magic that is SpinRite.



STEVE:  Well, and it had an effect.  It was very clear that this guy wasn't alone in thinking, okay, what does it do?  And so I'm really glad he asked the question.  I'm glad I responded.  I'm glad I saw it.  And so thank you, everybody, for supporting me by buying SpinRite.  I really appreciate it.



LEO:  Yes, thank you, yeah.



STEVE:  So WPS, WiFi Protected Security.  We've been talking about it for several weeks.  It's not going to go away, unfortunately.  We know that we have an industry full of WiFi routers that can be configured not only using a secure passphrase, using WPA and WPA2 with a really long, unguessable passphrase.  But in an attempt to make it easier for people to pair a device with a WiFi access point, whether a router or a standalone gateway or whatever, the Wi-Fi Alliance decided that they wanted to come up with something a little more like Bluetooth.  We've talked about Bluetooth pairing in the past where you just sort of tell each end that you want to pair, and then they find each other.



Well, the problem is that routers are incredibly inexpensive.  No manufacturer wants to spend any money they don't have to.  I mean, even some of them that have a button, that's considered an expense because you take the cost of the button, even though it's mere pennies, and you need to multiply it by markup and stocking and shipping and all that, and it adds up.  So they typically don't have displays.  They have a PIN printed on the outside, an eight-digit PIN.



Now, as we know, it came to light a few weeks ago at a security conference, some very smart person realized that there was, for some reason, four digits were being verified at a time, and that there aren't many combination of four digits, 0000 through 9999.  So that's - that sounded a little bit like Herman Cain's tax plan.  But...



LEO:  [Laughing].



STEVE:  999.  So that's 10,000 poss...



LEO:  That's going to be a trivia question.  I don't think that's going to be widely known in a few months, but that's a good one.  I like it.  Look it up, kids.



STEVE:  So what was discovered was that this eight-digit PIN was being sent half at a time.  And so the result was a massive drop in effective security, from an eight-digit PIN - and, arguably, even that's not very secure.  I mean, none of us would use an eight-character password.  We just wouldn't.  But there's a static eight-character, eight-digit PIN on the router.  So what was discovered was, as a consequence of this protocol which is being used, it's possible to try four digits separately from the entire eight.  So my immediate reaction was, okay, well, why doesn't the access point just fake that, yes, you got the first four, go for the second four.  And instead of denying when the first four were wrong, hold that back until all eight have been guessed, and then the bad guy doesn't know that just the first four digits are incorrect.  It doesn't allow him to tackle, essentially, the eight-digit PIN, two pieces at a time.



Okay.  So in order to understand why this was done, I plowed into the protocol.  And what I learned was interesting, which is the reason we're talking about it, because I think all of our listeners who get a kick out of, as you said, Leo, thought experiments, how would I solve this problem, this is explainable in one of our typical Security Now!, everyone's going to understand this when we're done ways that I think people are going to get a big kick out of.  So first of all, the reason that the protocol was designed as it was, was it requires mutual authentication.  That is to say, if you think about it, it's not just the client that needs to prove that it knows the router's PIN because this is radio, and we don't really know who we're talking to.  It could be someone next door or upstairs or downstairs.  It could be somebody within WiFi range that we're connected to.



So think about it, that if there was a third party, if there was a malicious access point that was trying to get you to connect to it, I mean, it would want to.  It would be able to have all of your unencrypted traffic and get up to all kinds of mischief that way.  So there's a tremendous incentive for an evil access point to pretend to be the access point you want to connect to and you think you're connecting to, instead you're connecting to it.  And because remember that our encrypted traffic is only encrypted in the air, and unless we're also over SSL for endpoint-to-endpoint encryption, from the client out to a remote server, then the access point decrypts it in the clear.  So malicious access points are a problem.



The point is that the malicious access point also does not know the actual target access point's PIN.  So what we want is we want to require the parties at each end of this connection, this sort of nascent, we're in the process of building some trust between Party A and Party B, or the client and the access point, the server, we want both ends to have to prove that they know this PIN.  That way we know that we're connecting to the access point that we intend because it knows the PIN that's printed on its own label.  But a bad guy can't produce the PIN.  So this isn't a unidirectional, client proves it knows the PIN.  This has to be bidirectional.  It has to be mutual authentication.



Now, here's the problem.  Again, it's radio.  So it's in the air.  And we have no security.  There's no starting security.  We have a client that the access point has never encountered before.  They don't know anything about each other.  They don't know make, manufacturer, model number, I mean, they know nothing.  So we don't have something like we have with SSL, where we've got the whole Certificate Authority system where, for example, the access point has a certificate that was issued by VeriSign or DigiCert, and the access point has a known label which, for example, in the case of SSL is a domain name.  And we're connecting to it with that domain name, and we know that nobody else has that domain name, et cetera, et cetera, et cetera.  There's a whole infrastructure in place that we've discussed many times which SSL uses for connecting to remote servers and authenticating.  That is, it's not just security, it's they're proving who they are, thanks to this whole Certificate Authority system.



We don't have that here with a WiFi client and some random access point.  They're starting from ground zero.  And a bad guy by definition can eavesdrop, that is, listen to all of our communications; can inject their own traffic; can modify the traffic in a man-in-the-middle sort of way; can intercept, delete, or drop any traffic.  We have to be secure against all of that.  Which is a really interesting problem.  If you think about, like, there's three people here, three actors.  There's two who are trying to develop a trusted connection, and a third that we're trying to exclude from that, yet we've given it full attack power.  It can do anything it wants to to our communications.



So this is a cool problem.  So the question is, how does each end of the good guy connection prove that it knows this one PIN?  And we'll just assume it's an eight-digit PIN, an eight-digit PIN for the moment.  We'll talk about why it's necessary to chop it in half in a second.  But how do they prove they know it without disclosing it to somebody who's listening, who can see every single packet that goes back and forth between these endpoints?



Well, the way this is done is very clever.  It uses a technology, a crypto technique that we understand, we've talked about many, many times:  a hash.  Just a hash.  We know that a hash function is a so-called one-way function.  You hash something of any size, and it produces a fixed-size signature, essentially, that has a relationship to what you gave it, so that any time you put the same thing in, you get the same thing out.  Yet the cryptographic definition is that you cannot go backwards.



And in fact this hashing process is a lossy function, meaning you could pour the whole dictionary into it, and you'd get the same-size token.  Obviously, the whole dictionary's information content cannot be represented by a little small little thing.  It doesn't have enough bits to represent all the information in the dictionary.  So it's a lossy, an information lossy function.  But the point is, every time you were to feed the same dictionary into the same hash, you'd get the same token.  And if you change one character anywhere in that dictionary, you get a radically different result.  And the whole point of this is, it is not feasible, computationally feasible, even with all the computers we have now, to predict or predetermine what that output will be for a given input.  So it's a one-way function.  It's very cool.



Okay.  So how do we use that?  This is just so neat.  The client takes the PIN that it knows, and it adds a random blob.  Now, in cryptography we call that a "nonce," as in it's only going to be used once.  So it takes 128-bit random or pseudorandom thing, and it appends it to the PIN and hashes that.  So it hashes the PIN plus this nonce.  Now, we know what that nonce is called.  It's called "salt."  It's called "salting the hash."  It's a way of essentially creating hash functions which cannot be mapped out in advance.  Like if it was just the PIN by itself, with the hash, then it would be possible for someone to precompute all the outputs for all the possible PINs.  There aren't that many PINs, after all, it's only eight digits.  So that would not be hard to do.  And that way a bad guy could see, when the output of the hash was sent over through the air, they could say, oh, look that up in our table, and they'd instantly know what the eight-character PIN was and then themselves be able to authenticate to this router and get on the individual's network and so forth.  But appending this 128-bit randomness blows that completely.



So we have this 128-bit randomness plus the PIN, which is hashed.  And the client sends that over to the access point.  So it's just this blob of debris, essentially.  And notice that it tells the attacker, or anyone listening, nothing.  All they get is noise.  128 bits, or actually I should say whatever the hash size is.  This protocol uses SHA-256, but it only uses 128 bits of the 256-bit output.  So it is 128 bits.  So this hash can go through the air; and, because it's a one-way function, nothing can be determined about what went into the hash.  So the access point has that.



Okay, the next step is the access point does the same thing.  It invents, it comes up with its own nonce, its own 128-bit random blob, concatenates that to the PIN, hashes it, and sends it to the client.  So now each end is holding the result of the other end's hash of the PIN that they both, maybe they both share, and random things they just invented.  So now what happens is the client sends its nonce, the random number it made up, to the access point.  And the access point does the same thing, sends its nonce to the client.  And if you think about what's in the air, what went by in the air was a hash of the PIN and randomness that tells an attacker nothing.  And then in the air, through the air, is that random thing that was concatenated to the PIN.  And that's also just randomness.



So what this allows is, without ever exposing the PIN, now what happens is the access point is in receipt of the hash and the client's nonce.  So it can concatenate the PIN, which they have in common, presumably that they share, to the client's randomness, hash that, and it should get the same hash value that the client first sent.  Which is to say, if those match, if the access point hashes the same data that the client did, it'll get the same result.  That's what hashes do.  And the only way it's going to get the same result is if the PIN was the same, both that the client hashed and that the access point hashed, and vice versa.  The client, I mean the access point, has sent its hash and, secondly, its random number over to the client.  And the client is able to hash those and verify that the result of that, it's basically doing the same thing that the access point did, and the access point sent the result to the client.  Only if those matched, the only way those can match, is if the access point knew and had the same PIN as the client.



So it's cool and very elegant.  It's this interlock, the sending of the hash to each side is called a "commitment," that is, each end makes this commitment of data, taking the PIN and this random value, and sends it to the other.  Then each end sends the random value, which allows each end to recreate the hash and verify that it matches what they expect.  Only if the PINs are the same will that work.  So it's very cool.



So here's the problem.  The people who developed this wanted to have a short PIN.  And somebody listening will see the hash go across, and they will see the output from the hash go across, and then the next phase is the random number that is being - the salt, essentially, for the hash goes across.  An attacker can now perform an offline attack.  That is, they know what the hashing function is because that's part of the spec.  So eight digits is just not enough protection.  Eight digits is 10^8, obviously, is 100 million combinations.  Well, that's 2^26.575.  It's the equivalent of 26 bits.  We know 26 bits is just not enough strength.



So what any eavesdropper could do is simply listen to this dialogue, capture the information in the air, and then take it home, crank it through a forward process, meaning that they know what the random number was that's added to the PIN, so they go PIN, 000, add the random thing to it, hash it, see if it matches the hash that was first sent.  If not, 0001.  Add the random hash, see if it matches.  Then 0002, 0003, and so on.  Fact is, this is just not secure.



Now, the protocol was cut in half, as we talked about it, in order to attempt to provide some protection against an active attacker.  You'll notice that, if we were talking to a bad guy, instead of a bad guy listening - we just described the problem of a bad guy listening.  But if we were actually talking to a bad guy, we have sent the bad guy our hash.  The bad guy sent us, we assume, his hash of the PIN that he's pretending to know, but we don't know if it's valid or not.  Then we send our random nonce.  Well, now the attacker, again, has everything they need to brute force this protocol.  The attacker can't actually follow through with a fourth phase and give us its nonce because it doesn't have the PIN.  But because it captured those two pieces of information, the hash result and the nonce from the client, it can now brute force.



So this troubled the designers, and they said, okay, how can we strengthen this?  Unfortunately, the way they did it was let's not give them everything at once.  Let's make the - see, the problem is, with just those first two messages from the client, all the information has gone over that is needed to brute force this eight-digit PIN.  So instead they chopped it in half.  They said we're going to hash only the first four digits and send that over, and make the other side verify that first half before we ever put the second half on the line.  So, frankly, it's weak.  There is fundamentally - I'm sure you could demonstrate this mathematically.  There is no way to do what the Wi-Fi Alliance wants to do and have it be secure.



LEO:  Wow.



STEVE:  They chopped this up into two - yeah, I know.  They chopped it up into two halves so that the other guy would have to show the first half of the PIN, prove that it also knew those four digits, before the client would give the second half, which would then provide enough information for brute forcing.  The problem is, as we've just seen, if the access point is evil, and it's unable to provide the information, then the protocol shuts down.



Well, I mean, that's good, but it turns out that you're only having to guess four digits for that first phase.  So now we're down to 2^13.  That is, half of that 2^26, 2^13 bits.  So it's easy to do some math and say, if I have a one in 10,000 chance of guessing, and I'm able to guess once every two minutes, for example, which is like what these access points do, is they go dark.  You get three guesses, then it's dark for some number of minutes, then it lights up again.  So you look at how often you're able to make a guess.  And it turns out that even in the worst case, in a number of hours or maybe a day, you're able to get the first four.  And then you simply do the second four.



The problem is the PIN is static.  When I was researching this, I went back and looked at the original source documents, the papers that were written by the security researchers who went into great detail and depth on this whole concept of simple pairing, the idea of two entities that want to build trust.  And every single instance of this discussion, this academic discussion with crypto, specifically says the PIN can only be used once.  And think about it.  If...



LEO:  See, if they just did that, if they'd adhered to the standard, we'd be all right.



STEVE:  Well, no, see, that's just it.  The academics, the cryptographers know you can only use the PIN once.  The Wi-Fi Alliance said, well, that would be too expensive.



LEO:  Oh.  Because we couldn't print it on the side of the router.



STEVE:  Yes.  They said we want to print it, and so it's going to be a static PIN.  And so they made a compromise...



LEO:  That's too bad.



STEVE:  ...which is really a problem.  So standing back from this now, I mean, I know I just dipped everybody's head in some serious protocol.  But the takeaway from this is that anybody who ever listens to WPS pairing can take it home, can take the traffic home and crack it offline.  They do not need...



LEO:  Well, that's important, too.



STEVE:  Yes.  They do not - it doesn't matter if you shut down WPS, when you make a mistake, for a week.  If a successful pairing is observed, that's the problem.



LEO:  Oh, wow.  That's a bigger hole than I knew.  I mean, that is a - yeah.



STEVE:  Yes.  As I said, there was some new information in this podcast, Leo.



LEO:  That's not good.



STEVE:  No.  If a successful pairing is observed, then just the way I explained it, even with chopping it in fourths, or into four pieces, in half so that each side gives half at a time, all the information is there that allows a bad guy to take what they observed in the air, go home, and do a forward brute force attack on the hash.  And they only have to do this eight digits, and they can come back in a short time with a WPS pairing that will succeed the first time.  So blocking this, if it fails on the first four digits, isn't secure.



The takeaway from this is WPS can never be secure because they did not use a dynamic PIN.  Apple does.  Apple, the way you use simple pairing with an AirPort is you turn on their AirPort agent.  It generates a PIN, which you then authenticate using.  And it's thank you very much, you're now paired.  Works beautifully.  That's not a problem because an attacker will never be able to attack with the same PIN.  If they captured that traffic, well, they'll know what the PIN was that time, but they won't be able - next time they try to pair, the AirPort will come up with a different PIN, and they're in the weeds again because these nonces, these random tokens, guarantee that every one of these transactions is completely unique, using different data.



But the really troublesome takeaway is a passive eavesdropper, whoever sees a successful WPS pairing, can take that traffic home, brute force it, come back, and pair the first time.  No shutout will be effective.  So everybody within distance of this podcast needs to sooner or later arrange to shut down WPS.  It was a bad idea because they took a shortcut.  All the academicians know you have to use a dynamic PIN.  They said, well, these access points aren't going to have displays.  You can't bring up, well, actually you could bring up a web...



LEO:  Well, that's what Apple does.  See, that's what's interesting.  So Apple uses its client software.  There is no display on a router from Apple.



STEVE:  Right, right.



LEO:  But there's a conversation that goes on.



STEVE:  Right, right.  Over the LAN side; right?  Over the wired LAN.



LEO:  Or wireless LAN, but you still are setting - I can't remember how it works.



STEVE:  A PIN which is changing every time, yes.



LEO:  It's a new PIN every time.  It's a one-time use.  



STEVE:  Yup.  And that is robust.  I mean, it'd be nice if it were longer.  But it's like, okay, fine, the chances are one in a hundred million of guessing it, if it changes every time.  And they stay one in a hundred million because it's going to be different.  So you can't run through 00000000 all the way to 99999999.  It's going to be changing all the time.  So we have a troubled protocol with Wireless Protected Security.  And the only thing people can do is turn it off.



LEO:  And if you have a Linksys, you can't turn it off.



STEVE:  Currently it's going to - I have not looked recently and updated where vendors are.  Vendors tend to move rather slowly.  They're scurrying around.  I contacted the PR firm two weeks ago, when we first talked about this, for the Wi-Fi Alliance and was given a statement that sounded like it came from a PR firm, that basically said nothing.  There was no technological component at all.  And it's like, okay, well, that didn't tell me anything.  But it did say there are three things that we have identified, and we are in communication with all Wi-Fi Alliance partners and working with them towards a solution for this.  And it's like, okay.  Good luck with that.  I mean, certainly Linksys needs to be able to disable this.  Netgear we know you can disable it.  Everybody needs to disable it.  Just this was a bad idea.  And at least our listeners know.



LEO:  Similar to WEP.  Although easier to crack.



STEVE:  Well, and, I mean, the developers knew this.  This is not a surprise.  There are charts showing that 2^-13.36 or something, which is the number of guesses, the probability of guessing a four-digit PIN, they understood that there was a brute forcing - there was a guessing problem or there was an offline brute force attack, which is why you can't use the same PIN.  But if it's printed on the back of the router, you're stuck using the same PIN.  That's the router's PIN.  In fact, someone tweeted me that somewhere in Europe there was an ISP that was widely deployed, hundreds of thousands of routers.  Everyone had the same PIN.  They didn't even change them.  It's like, oh, god.



LEO:  Oh, come on.



STEVE:  I mean, that's a disaster.



LEO:  You don't need...



STEVE:  Now you've got all of the routers with the same PIN...



LEO:  You don't need...



STEVE:  So a bad guy can pair the first try.



LEO:  Eh, no big deal.



STEVE:  Although I think maybe it was disabled by default.  I think WPS was disabled in that case, so it was the same PIN, but it was not on.  And of course the majority of WPS is enabled because the Wi-Fi Alliance says, oh, we want it to be easy.  Ugh.  Wow.



LEO:  Wow is right.  Steve Gibson, always an eye-opener.  This one's a really bad one.  And as you said on the radio show, and thank you for being on last weekend, if you have a Linksys, all you can do is keep checking to see if there's a firmware update.  And for the rest of us, just turn off WPS.  If you can is the point.  Now, Linksys will make you think you can because there's a checkbox.



STEVE:  Which it ignores.



LEO:  But it ignores it.



STEVE:  And the other thing that would be nice would be if it were possible for the user to change the PIN.  That's the other problem, is if you ever give the PIN to a friend who comes over, then they have access to your router as long as WPS is enabled.  So, I mean, it's going to cause a lot of problems and confusion because the PIN written on the back of the router would no longer be the PIN that the router honors...



LEO:  That's a good point.



STEVE:  ...if you're able to go in and change it.



LEO:  They may never fix this.



STEVE:  But you really should, yeah.  Just disabling it is the best thing.  Ugh.  What a disaster.



LEO:  Or put DD-WRT on if you have a router that supports it, or Tomato.



STEVE:  Yes, or Tomato.  Yup.



LEO:  It's better anyway, frankly.



STEVE:  Yup.



LEO:  Steve is at GRC.com, that's his website, the Gibson Research Corporation.  That's where you'll find SpinRite, the world's finest hard drive and maintenance utility.  You'll also find all his freebies.  You'll also find the feedback form because next week we're going to do Q&A, if something...



STEVE:  An hour early, by the way, for you live listeners.



LEO:  Oh, 10:00 a.m. Pacific, 1:00 p.m. Eastern at TWiT.tv because of Live With Kelly.



STEVE:  Yup, you're going to go back East...



LEO:  I'm flying to New York right after the show.



STEVE:  ...to be a star.



LEO:  Well, whatever.



STEVE:  So, yes, GRC.com/feedback.  Fill up my mailbag with thoughts and questions, and we'll do them next week.



LEO:  Excellent.  Excellent.  Steve, by the way, if you're there, Steve always makes 16Kb audio versions available for the people who are really bandwidth constrained, maybe on a smartphone or something.  And he also has transcripts, which is really the ultimate in squeezed-down size, all at GRC.com.  At TWiT.tv we have the video.  We have audio and video.  And so either way.  And of course you can watch live, next week a little early, 10:00 a.m. Pacific time.  Thanks, Steve.



STEVE:  Thanks, Leo.



LEO:  See you next time on Security Now!.



Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/

	

SERIES:		Security Now!

EPISODE:	#338

DATE:		February 2, 2012

TITLE:		Listener Feedback #136

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-338.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 338, recorded February 1st, 2012:  Your questions, Steve's answers, #136.



It's time for Security Now!.  Are you ready, ladies and gentlemen, to protect yourself and your loved ones online?  Well, here he is, the man who can do it all, our Explainer in Chief, Mr. Steven T. Gibson.  I know.  Do you have a middle initial?  I don't even know if you do, Steve.



STEVE GIBSON:  M.



LEO:  M. "T," I was thinking Tiberius, like James T. Kirk.



STEVE:  Oh, like that, of course.  Yeah, in fact, just last night I watched the very first Blu-ray cuts of the Next Generation series.  They're going to be rereleasing the Next Generation with completely remastered, not just up-converting, but they're rematting, at high resolution, all of the special effects.



LEO:  That's what they did with the first series.



STEVE:  And, oh, and the star field looks fantastic, and the ship flying around.  Anyway, so they sent out a teaser Blu-ray that has three episodes.  And so one of them, actually "The Inner Light" is the one I watched, which is one of my favorite episodes of all time that Jean-Luc did.  And so it was fun to see it last night.



LEO:  I think, I hope it's not heresy to say, but that might be my favorite of all the series, with Jean-Luc Picard.



STEVE:  Oh, absolutely.  He was the best captain we had.  I mean, he wasn't going around bedding all the green aliens, but still. 



LEO:  Yeah, I mean, look, you can't - Kirk was...



STEVE:  Kirk was Kirk.



LEO:  And Spock.  But Data and Geordi and Picard and No. 1, these guys were great.  They were really...



STEVE:  I think the original series that Roddenberry was directly involved in had some classic, really good concepts.



LEO:  Right.



STEVE:  But the writing and the execution...



LEO:  It was a little broad.



STEVE:  ...of the Next Generation, I think was just, oh.



LEO:  But that was the time.  It was also of an era, and that was the time.  I mean, it was the...



STEVE:  Yeah, and Leo, you know what's sad is we have nothing like that on the air now.  There's nothing.  For a while we had "Firefly."



LEO:  I have to say, "Firefly" to me was even better.  I know that's heresy.



STEVE:  Oh, it was great.  It was great.  But like this, just, like, here we are, with all this technology...



LEO:  "Dr. Who?"  "Dr. Who?"



STEVE:  Yeah, I never - is that even on still?



LEO:  Oh, yeah.



STEVE:  Oh, okay.



LEO:  It never will die.  I'm not a "Dr. Who" guy either.



STEVE:  No, it just never got me.



LEO:  I don't know.  You know me.  I've said this before.  Science fiction to me is best when read, or listened to on Audible, because your mind...



STEVE:  [Indiscernible].



LEO:  Yeah.  And you cannot, I mean, look at "Dune."  "Dune" is a great example.  Impossible to make a movie out of "Dune."  And yet, when you read it, it comes to life.  I don't think you need a movie.  Just my thoughts.  I don't know how we got on this.  Ladies and gentlemen, ladies and gentlemen, we are not here to talk sci-fi.  If you like sci-fi, tune in to our holiday episode a couple of weeks back.  But no, this is a question-and-answer episode, #136.



STEVE:  It is.



LEO:  Yes.



STEVE:  We have a little bit of news for the week, not a ton.  So...



LEO:  The weak and the weary, yes.



STEVE:  And, oh, but before we start, I have a correction to make to last week's "WPS: The Troubled Protocol" episode.  I wanted to put it right at the top of the show.  And I was mindful of Albert Einstein's famous quote, one that I really like.  He said, "Everything should be made as simple as possible, but no simpler."



LEO:  It's kind of his corollary to Occam's Razor.



STEVE:  Yes.  And I did oversimplify something.  And the reason that was a problem was it changed it in being oversimplified.  When I was explaining the protocol and the way the PIN and the nonce are hashed and then sent to the other side and then later the nonce is sent, which allows the other side to verify that the sender had the PIN, it was absolutely crucial that I leave out a whole bunch of things which are also being sent because they're not extraneous, but they would have - there's no way I could have done it without chalkboard and diagrams.



LEO:  I always used to - when I did The Screen Savers, I always used to have a chalkboard for you.  Remember we used to do that?



STEVE:  Oh, yeah.



LEO:  We've got to figure out a way.  The folks at SMART Board approached me at CES and said, "If you ever want to use a SMART Board...."  Now, that might be a good solution because I think that that would be something you could draw on, and then we could get a digital version of it that we could put on the screen or something.



STEVE:  But we're still largely an audio podcast.



LEO:  Yeah, you're right.



STEVE:  I mean, I know really huge...



LEO:  No, no, you're right.



STEVE:  I mean, in terms of people commuting and driving and flying and all that.



LEO:  Yup.  No, you're right. Can't abandon them.  Can't abandon them.  So you've got to do what you can with words alone.



STEVE:  Anyway, what I forgot, well, I didn't forget it, I mean, I had to strip it out in order to keep this thing manageable, was the very first thing the endpoints do is negotiate a private key.  They use a Diffie-Hellman key agreement protocol, which you and I have talked about and described in the past, which is not an authenticating protocol because that's then what they proceed to do with the PIN.  But it is a privacy enforcing protocol which prevents a passive eavesdropper from being able to obtain the information that I said last week was possible with passive eavesdropping.



So it is still the case that WPS is not secure against an active attack, that is, a man in the middle who's involved.  And even the Diffie-Hellman key agreement won't protect against an active attack.  But it absolutely will encrypt the dialogue so that somebody just capturing the packet traffic is unable to, as I said last week, get the data, take it home, and crack the PIN offline.  That can't happen because the dialogue is protected by this initial establishment of a secret key which doesn't authenticate, but it does give them privacy.  So I wanted to correct that right off the bat.  I made it too simple.



LEO:  Well, all right.  Not an error, exactly, but an oversimplification, I get it, yeah.  Let's see, here.  I've got the questions.  I've got one commercial.  Why don't you launch into the news, and then before we do the questions we'll get the commercial.



STEVE:  Yeah, we'll do that.  So, okay.  So I just did want to kind of keep an eye on Chrome.  It's continuing to quietly creep forward.  Google recently fixed four vulnerabilities in Chrome and acknowledged to have fixed an additional one several weeks ago.  So the current stable version of Chrome is now v16.  And that's at 16.0.912.77.  And of course by the time you hear this, that may have changed again.  But that's the nature of the way Chrome is updating themselves.  And they're leading the industry in this sort of just automatically keeping it current approach, which as we know, other browser vendors are beginning to look at, thinking, you know, that seems like a good idea.  So I think we're going to see other people following that before long.



But I wanted to ask you, Leo, something that I saw that one of SANS's editors said.  John Pescatore is vice president at Gartner, Inc.  And of course we know them.  They've been a market research firm for years.  He's worked in computer and network security since '78.  And in this most recent SANS newsletter, he said, "The changes in Google's privacy policy are making it questionable whether I want to continue using the Google search engine and the Chrome browser.  At some point, the only way to stop the continual ramping up of access to personal data is to vote by your choice of product."  And I thought, whoa, okay.



LEO:  I'd love to know which product he's going to use because I'll move there, too.  But if he's talking about Bing, I think you have exactly a similar situation.



STEVE:  Yeah.  Well, and you really - Google has become one-stop shopping for so many things.  I mean, we use it for Docs.  I use it for search.



LEO:  I think there's been a lot of hysteria over this.  And I don't see what Google did as changing the data they collect at all.



STEVE:  Okay.



LEO:  Or changing their privacy controls.  I think what they - their privacy controls are superior to anybody's, with the dashboard.  You should take a look at the dashboard.  Then they're the only company I know of that fully exposes what information they collect about you.  So Google.com/dashboard, you can see it all.  And what they've done is two things.  First of all, they've announced that they will now collate data from all their tools - YouTube, Picasa, search, et cetera - into a single database.  That was - if they weren't already doing it, it was for technical reasons alone.  Remember, many of these, Picasa and YouTube as examples, were acquisitions.  But of course the point of the acquisition - look, Google's not giving you free video and free photo editing...



STEVE:  Free everything.



LEO:  Free everything.  They are monetizing you with advertising.  That's the trade.  If you think Facebook's not doing that, you're not paying attention.  So that's the trade.  I think they're very clear about what they're collecting, so that is not changed.  And they have, for the first time - and this is the other change, so there are two changes.  One, they've unified all the data.  They've also, as part of that, unified their privacy policy.  They have, I think, a very clear, plain English privacy policy.  What I would suggest is people read that privacy policy.  If you don't like it, there are ways to use Google and opt out.  You can log out of a Google account.  You remember that most of what they collect comes from the fact that you're using your Google account across all those services.  You can delete the Google cookie.  And, if you're using Safari or Firefox, you could do anonymous browsing.  And you correct me if I'm wrong, but I believe that that prevents the saving of a cookie across sessions and of any personal information across sessions.



STEVE:  Right, and it will not allow them then to aggregate information about your past history.



LEO:  They have no way of doing it because they can't identify you.  Now, if they were nefarious, they could, as we know, it's possible to create supercookies that are not deletable and are not trackable and so forth.



STEVE:  And other kinds of fingerprints.



LEO:  Yeah, they could fingerprint you.  And to some degree it's a question of do I trust what Google says they're collecting or not?  If you do, and you read the privacy policy, and you're comfortable with it, as I am, to me it's exactly what I expected Google to be doing with my information, which is selling it in aggregate to advertisers...



STEVE:  Anonymously.



LEO:  Anonymously - then I'm fine.  And then you're fine.  If you don't, you have a number of choices, including leaving Google.  But I would challenge you in two ways.  One is where do you go...



STEVE:  To replace the functionality.



LEO:  Right.  I mean, there are engines, search engines that claim to anonymize you.  But they're basically using Google in the same way you would if you were doing private browsing.  So I think that's the same.  And then there are other search engines, but I don't know really what those search engines' policies are.  And finally I would say, and I'd love to hear your opinion on this, it seems to me that we already have somebody who knows far more about what we do online, who collects it, we know they do, and who offers it to the government without notice, and that's our Internet service provider.



STEVE:  Right.



LEO:  And they don't have a privacy policy.



STEVE:  We have no kind of controls over that.



LEO:  We don't know what they collect.  So I would submit that the best attitude towards this is to assume that what you do on the Internet is done in public, just as what you do in a mall is done in public, or on the street is done in public, and treat it that way.  And that will - no matter what's happening, because you don't know what your ISP is doing - that will kind of protect you.  That's just my thought.  And I've been thinking a lot about it, as you might guess.  And I don't want to be apologist for Google.  But I think they did the right thing, which is be very clear about what they're doing.  That's all we ask.  Then you can make the choice.



STEVE:  Yup.  And I guess, by aggregating everything from across their application spectrum, then there's more sort of implicit inter-application knowledge of who we are as we move among their applications so that that's a little more pervasive.  But it's all within the Google umbrella.



LEO:  Well, remember what Facebook's trying to do.  I was talking to my son.  He's so smart, 17 years old.  And he knows that what Facebook's trying to do is replace the Internet.  So he said, oh, yeah, I don't use email anymore.  I use Facebook messaging.  I don't use instant messaging.  And I said, well, you know, they're trying to keep you in Facebook.  He says, oh, yeah, I can see that they want to replace everything I do online with Facebook.  And it's only a matter - Facebook has its own currency, you know.  So it's only a matter of time before they do shopping.  That currency could well end up being a global currency that has more value than a dollar.



STEVE:  Have you seen the projected IPO valuation?



LEO:  Right.



STEVE:  Something like $89 billion out of the gate?



LEO:  And we know perfectly well the reason they're valued that high is because they're doing what Google's doing and then some.  And what they really want to do is be the entire Internet.  So, okay, I agree, if you don't like it, don't use Google, don't use Facebook.  Maybe don't go online because your Internet service provider, god only knows what they're doing.  That's the price we pay to go online; right?  I mean, am I wrong?



STEVE:  No, I think that's - you got it exactly right.



LEO:  You're in public.  So if you don't want it, don't use your credit card, either, by the way.  You might want to move to Montana, dig a hole in the ground, and get some supplies.



STEVE:  Not easy to be off the grid.



LEO:  It is impossible.



STEVE:  Yeah.



LEO:  And I think Google does a good job of giving you the choice.  When people say "No opt-out," well, of course there's an opt-out.  There are several stages of opting out of Google.



STEVE:  It's called wander away.



LEO:  You could stop using it.  You could log out.  I think logging out is a very direct way to opt out.  Don't log into your Google account.  And if you're really worried, use private browsing.  But again, you don't know - I presume not, but you never know - whether they're using some other form of fingerprinting.



STEVE:  Well, I mean, we have to assume that they're really going to play straight after all the trouble they got into just by over-collecting data from their WiFi roaming.



LEO:  They're under intense scrutiny in the U.S. and in Europe, intense.  And this is where I always look, but what's the business model?  How do they make money?  They don't need to use anything more than what they're doing.  They have great information.  They're telling us, look, we have all these great signals about you.  We'd like to use them to make money, okay?  And you don't have to say okay.  But if you do, they have plenty - most people will say okay.



And I think there's really - the harm is de minimis.  So what that Google knows what I search for and then serves me an ad based on it, or what email's going on and serves me an ad.  Hotmail does that.  Everybody does that.  That's how you monetize on the Internet.  We've gotten a little spoiled.  We expect the Internet to be, you know, everything's free and cool.  We have to do advertisements here.  Everything has to be paid for somehow.  I don't collect information about our users.  We have information in our database about your IP address, but we don't use that or quantify that.



But what we do do, actually our advertising agency Podtrac does, is we look at what nations people come from, how much time they spend online, what services they use to download, and then we have a survey which we ask, every year, we ask our audience completely voluntarily to fill out.  And they do, very kindly, give us a lot of information about themselves, which is valuable in selling.  I think that's the way to do it.  But as long as they're upfront, I think that that's all we can ask.  They're being, I think, very transparent.



STEVE:  I'm glad I asked.



LEO:  Yes.  I'm sorry you asked.  Go ahead.



STEVE:  No, I am because - no, no, I mean...



LEO:  That's my attitude on this thing.



STEVE:  Several times I had seen this notice of 60 different services being amalgamated under a single privacy agreement, and I thought, oh, I want to see what Leo thinks about that.  So...



LEO:  I changed - I'll give you a good example.  I changed my Facebook status to "single" yesterday and immediately got ads for over-50 singles, lots of them.  Lots of them.  Dating services for old men.  And do you think Facebook - now, do you think Facebook knows anything about Leo Laporte?  They don't.  But their advertising stuff is set up to look.  And the minute you change - just try it.  Change your relationship status, see how it changes your advertising.  I changed it back, but I just was curious.  And, boy, if I were looking for women over 50, I'm set, buddy.  I'm sorry, go ahead.



STEVE:  Okay.  On that note, my best title for this next little bit of news is "Duh."  This comes to me thanks to a tweeter, Andrew Burns, who tweets as @ErebusBat.  From Birmingham, Alabama comes a story:  "Personal 401k retirement plan information [from a company called] Regions Financial Corp. current and former employees was lost in November" - now, get this - "when a flash drive with the data came up missing after being mailed by outside auditor Ernst & Young in the same envelope as the decryption key."



They said, "'At this time, we have no indication that any fraud has occurred due to the situation,' Regions said in a letter explaining the data loss to [its] employees.  Birmingham-based Regions informed employees of the missing data in a letter dated January 23" - so just last week - "which the company shared after inquiries by The Birmingham News," who is reporting this story.



"The company also shared a copy of a letter sent to its employees by auditor Ernst & Young, which mailed the package with information about the 401k retirement plan participants to another of its offices with the [encrypted] flash drive and the decryption [key] together.  When the package arrived, the flash drive was gone, but the page with the decryption key was still there, the companies said in their letters.



"'Ernst & Young takes the security and privacy of personal information very seriously, as does Regions, and we deeply regret that this incident occurred,' reads the letter from the auditor to the Regions employees.  'Ernst & Young is taking steps to prevent this issue from reoccurring, including providing additional training to the Ernst & Young team that works with Regions regarding the proper handling of confidential information.'"



So the lesson here is, I mean, the good news is they encrypted the information, put it on a flash drive.  The bad news is that they sent the decryption key for the flash drive in the same envelope as the flash drive.  So when the drive was lost in the mail, they have no idea what the circumstances of that loss were, how the drive disappeared from the letter, and whether the people who have the flash drive decrypted it with the key that was included with the drive.



LEO:  Just so you know, here's how you unencrypt it.  Wow.



STEVE:  So to anyone who wants to send encrypted information safely through the mail, send the decryption key...



LEO:  Separately.



STEVE:  ...some other way.



LEO:  Even Julius Caesar knew this.



STEVE:  Oh, my goodness.



LEO:  You send the messenger separately from the code.



STEVE:  Yup.  Duh.  And in other news, many people tweeted Symantec's somewhat embarrassing news of the week, which was that they, Symantec, doing their due diligence, was forced to acknowledge, when hackers posted the news of this, that six years ago the source code to many of the Norton utilities, including pcAnywhere, was stolen from Symantec's servers.  So in SANS...



LEO:  Oh, boy.



STEVE:  SANS Institute, reporting this, said, "Symantec now says that source code that was accessed by cyber intruders puts users of the company's pcAnywhere software at increased risk of attacks.  Symantec is urging users for whom the software" - get this - "is not absolutely necessary to disable it until a fix is available."



LEO:  As Web3562 says, pcAnywhere is now pcEverywhere.  Fortunately, it's been obsolete for years.  I don't know...



STEVE:  I was going to say, it's got a bad - it's had security problems in the past.  I mean, and it would always make ne nervous if you had something like pcAnywhere with an open listening port accepting connections from anyone on the Internet that gives you access to your machine.  It's like, just, ooh, talk about goose bumps.



LEO:  That's why we - I hope everybody's using GotoMyPC.



STEVE:  Yeah.



LEO:  Because it uses - whoa, there it goes, it blew up.  Sorry.  I couldn't resist.



STEVE:  Did you just sink?  We need a visual on this, Leo.



LEO:  Boom.



STEVE:  Oh, goodness.  For those listening, Leo, before the podcast began, repressurized the ball...



LEO:  I did.



STEVE:  ...that he sits on and bounces on.



LEO:  I did.  It could explode at any moment.  Okay.  Continuing - I'm sorry.  I'm silly.



STEVE:  Anyway, so SANS continues:  "While the Norton products have been updated and therefore do not put users at risk, pcAnywhere does [put users at risk].  This contradicts earlier statements Symantec had made that its products were not vulnerable due to the theft."



So what happened is, bad guys recently posted that they had reverse-engineered pcAnywhere from the source code which had been stolen six years ago and would now be attacking corporations who were using pcAnywhere.  Symantec has verified that the risk is real.  So if anybody within distance of this podcast is using pcAnywhere, stop it.  Symantec has confirmed that it is not safe.  I don't know whether they will be updating pcAnywhere, or they're just simply going to say we have to formally tell people stop using it.  But at the moment Symantec has affirmed that it is not safe, that in fact there were vulnerabilities that could be discerned from the source code which allow unauthorized authentication and login to pcAnywhere, which is about as bad as it gets.



LEO:  That used to be the king, that program.  Everybody used it.  But I think it's been a while since...



STEVE:  I never used it.  That just could never be safe.  Just too scary.



LEO:  Can't possibly.  Couldn't possibly be safe.



STEVE:  Two little burbs from the Twitterverse.  Dylan S., who tweets as @NastyMan9, mentioned @SGgrc that Reaver 1.4 is out, and they renamed "Walsh" to "Wash."  So that explained that naming disparity that we had a couple weeks ago when you and I were talking about it, Leo, because I was sure that I had seen it as "Walsh," but "Wash" is the name of the pilot of the Serenity starship in "Firefly."  And so thus where "Reaver" came from and also "Wash."  So somebody had a typo or believed it was Walsh, which was originally what it was named, and that's the WPS scanner portion of the Reaver utility.



And then Jason B. had a nice little mention.  He tweets as @AlienCG, and he said, "#SpinRite saved my GF's" - so that's short for girlfriend's - "computer.  Nothing bad found, but once she restarted it, it worked.  I just bought it for that purpose."  So he sent a little note out that he had succeeded.



And since we're doing a Q&A episode this week, I thought I would answer a listener's SpinRite question.  He asks about SpinRite and speech.  He said, "Hi, Steve.  First I wanted to say the podcast is great and has taught me so much.  You do such a good job.  Also I was wondering, because SpinRite doesn't use the operating system of a computer - i.e., Windows, Mac, et cetera - obviously screen-reading technology [for the blind] is not going to work.  I was wondering if there was or could be a way to get SpinRite talking, so people who cannot see the screen can use the program, as well."



LEO:  Hmm, interesting.



STEVE:  "Thanks for an awesome podcast.  I've been very educated from all you've taught.  Thanks.  A. Smith."  And the good news is, lots of people through the years have used SpinRite with screen readers because it is, while it's not a Windows or Mac utility, it is a DOS utility, and it brings a copy of the FreeDOS OS with it, which is MS-DOS compatible.  But it also runs atop any of the DOS-compatible OSes.



So although it's not something we support out of the box, anyone who wants to twiddle a little bit and can, for example, if you install it on a USB, which is bootable, and also because it's USB it's writeable, if you look, then, at the USB drive, you'll see that there's an autoexec.bat file and a config.sys and all the familiar things from DOS world.  And you can certainly add a screen reader to it, and have it install before SpinRite runs, and then get screen-reading stuff to work.  And I know for a fact that many people have successfully used SpinRite, now and in the past, with screen readers.  So it absolutely is compatible with that use.



LEO:  All right, Steve.  Let's see.  I've got a question file right here, ready for you.  Are you ready to answer?



STEVE:  You bet.



LEO:  Let's go to Ottawa for Question #1.  John Lockman shares his experience with Reaver.  Oh, it's going to be one of those Reaver days, I have a feeling, and WPS.



STEVE:  Actually not.  We didn't - we've already had some.



LEO:  Not too much Reaver.



STEVE:  Not too much.



LEO:  I run Linux as my desktop OS, and my wireless card supports packet injection out of the box, so it was little work for me to get Reaver running.  I did a quick scan of the APs around me and decided to fire an attack against a few.  Oh, my goodness.  Now, that doesn't mean he's doing anything bad.  He just wants to see if it works.  I hope.



I didn't want to wait two to ten hours, really, and I had no interest in these access points, but one I tried returned immediately.  Apparently some access points have a hard-coded eight-digit PIN which has been set on purpose.  I think that's not unusual.  This one had a PIN of 12345670.  I'd be shocked if that weren't on purpose.  Reaver got it in a single attempt and spat out the WPA key for it, too.



I wonder if Reaver has been coded to try this and possibly other common keys first.  I really hope other vendors are not going by this practice.  This was a device from a large Internet service provider, Rogers - oh, good old Rogers - so I worry that many other devices may be vulnerable to similar attacks.  Disclaimer:  Of course I own all those access points I may have attempted this on.  So, well, but that was one of the problems with WPS, wasn't it, is most PINs are hard coded.  What's interesting is...



STEVE:  Well, this is another problem, and I haven't mentioned it, but John's point brings it up.  It's something that I have known about.  All of the PINs are generally hard coded.  The problem is that they're static.  Believe it or not, Leo, it is the case, and it has come to light, that many routers all use the same one.



LEO:  Just as they do adminadmin for their password and all of that.



STEVE:  Exactly.  But this you can't change.



LEO:  That's really annoying.



STEVE:  It's, well, there are several manufacturers that have been identified whose wireless access points all use 12345670.



LEO:  Just ridiculous.



STEVE:  That passes the checksum.  Remember that the eighth digit is not actually free to be whatever it wants to be.  It's a checksum.  So that's the reason they didn't do 12345678, because that would not pass the checksum.  But 12345670 does.  So they've used that because, oh, that way they don't have to print custom labels on every router.  But, I mean, what this means is that the thing is enabled and has a default PIN, which is also static.  So anyone...



LEO:  Yeah [laughing].  It's probably printed on the - it's probably painted on the case.  But that saves them money, doesn't it.



STEVE:  It does.



LEO:  Holy-moly.  Anyway, I'm sure that was hard-coded into Reaver, since they knew that a lot of people use that.



STEVE:  Oh, it absolutely is, yes.  There is a bunch of them that it tries.



LEO:  Try that right away, yeah.



STEVE:  Yes.



LEO:  It's easy.  It's free.  Question 2, John J. Jobst, Columbia, Illinois, provides some insight from pilots and flight attendants.  Oh, I love it.  We have, by the way, a ton of pilots who listen.  I read an article that asked questions like "Why can't I use my device during takeoff and landing?" and provided the answers from pilots and flight attendants.  In the case of our devices, they're not really worried about electronic interference at all.  They're worried about all those three-pound missiles flying out of your hand during a rough landing and hitting someone.  Okay.  I'll explain why that's bogus.



They also don't want to be liable for the damages if you simply drop it.  And they want you to pay attention to crew instructions should an emergency arise.  You can't do that if you have music blasting in your ears or if you're desperately trying to save your spreadsheet before the crash.  But rather than explain all this to you they use FUD - fear, uncertainty, and doubt - and say your device can interfere with critical flight systems.



You know, I don't buy it because this all started with electronic devices.  And they don't say "Put your Steven King hardcover novel away."  In fact, this encourages you to hold heavy hardcover books instead of a Kindle.



STEVE:  True.



LEO:  Which would you rather have hitting you?  So I don't buy that.  I think that they've never had this policy before.  They didn't say put your books away.



STEVE:  Well, my gripe is that I have always known it's not about interference.  So what is it about?  I mean, these things do not radiate in any significant way.  And now that they're turning it into a profit center by allowing you to use your WiFi, by having WiFi onboard all the time, it's like now they're admitting that, oh, well, yeah, actually you can use it.  I mean, and WiFi is way emissive.



LEO:  Right.  Bogus.



STEVE:  So what do you think it is?  I don't know.



LEO:  I think it's probably just misguided.



STEVE:  Yeah.  So it's a policy.  It's easy for them to say.  And so it's like, okay, why should we change this?



LEO:  Yeah.  Why take a chance is, I'm sure, their attitude.  And I don't blame them.  We certainly don't want to bring down a plane because I was reading my Kindle.  I wouldn't want to be that guy.  But there's plenty of research that shows that there's no interference, so...



STEVE:  Yeah, all the avionics is so well shielded and so well designed and expensive because of all of the extra care that's been taken to shield all of the cables and everything as they run around the plane.



LEO:  I think it's fine to tell people to turn off their cell phone.  That one I can explain, for several reasons.  First of all, the cell phone does radiate a lot more.  And when you're, as somebody in the chatroom says, at 30,000 feet, it's searching like crazy for a signal.  So I understand that.  And there's nothing more annoying than that jerk, "Hey, I'm on the plane."  Of course they sell their own phone service, so people can still do it, at great expense.  So I understand that, and I hope they continue to force people not to use - in fact, I think they should say turn off your cell phone before you get on the plane.  Just say you may not use it on the plane at any time.



STEVE:  Oh, that'd be nice.



LEO:  I wish they would do that.  But I like to read, and more and more people are going to read on eBook readers.  And that's one where you just say that's - I understand, don't put headphones in.  In fact, in Canada the law is you have to take out your headphones of any kind.  And I think that that's a good law because - during landing and takeoff - because you need to hear instructions, if there's an emergency.  So I don't have a problem with that.  I don't have a problem with laptops because those are really, if they were flying around the cabin, that would be scary.  But what about eBook readers?  I've always thought that's - more and more people, I would say in a year or two everyone will have an eBook reader in their hand.



STEVE:  Yeah.  You probably saw the numbers, about the number of Kindles that Amazon sold over Christmas?  177 percent up from the prior year.



LEO:  Why not?  They're great.  Pat Leonard, Tampa, Florida wonders about LastPass and a fake SSL cert.  Uh-oh.



STEVE:  Yeah.



LEO:  Uh-oh.  Steve and Leo, while I was listening to you record the January 18th, 2012 episode of Security Now!, I was logging into my LastPass account from my school's WiFi.  After I logged in there was an error message saying the security certificate could not be verified by LastPass.  When I inspected the cert - thank you so much for explaining that could be done, how, and what it meant - I saw that the cert was coming from my school.



My question is, is it possible that my school could have decrypted my LastPass password if I disallowed use of the cert?  Does LastPass use a local copy of stored passwords?  Or am I or was I in any danger caused by this?  I love LastPass.  I've been using it since you approved it.  I hate to think that my school or other organizations are snooping out LastPass master passwords by reissuing certs.  Thanks from a listener since Episode 1.  Pat.  What's happening here?



STEVE:  So this is what we've talked about so many times, where there is an SSL gateway at his school which is decrypting encrypted traffic, SSL traffic, in order to provide content filtering so that...



LEO:  Many businesses do this.



STEVE:  Yup.



LEO:  Opera Mini does this, not for content snooping, but for compression.  So does the Kindle Fire browser, the Silk browser.  This is not uncommon.



STEVE:  So the good news is, the reason I chose and got fully behind LastPass - and I should mention, many people tweet and write and ask if I'm still using it.  And the answer is yes.  It is I absolutely depend upon it.  So nothing that has happened since my analysis and evaluation of it has in any way diminished my love for this solution.  And the reason is that it does not depend - or another reason for that is it does not depend upon SSL security for protection.  That is, the user's password is hashed in the browser before being sent to LastPass.



So the danger could be, and I haven't thought this all the way through, but I could see if someone at the school were malicious, then they could impersonate the user, and that could be a problem.  That is, since they're decrypting the connection between the user's browser and LastPass, they would not be able to get the password, but they would get the hash for the password.  And I don't remember whether there's a nonce which is used in the password, and I think there is not.  Meaning that what I remember is that the username and the password go through some hashing, and that those together produce the decryption key for the stored library of data, and then it's hashed again in order to produce the hash for the password.



And the beauty of that is that LastPass, that ends up receiving all of this, never has the ability to decrypt the data.  So what the man in the middle could get would not be the decrypted data, but they could impersonate the user.  And I don't think that lets them decrypt - I don't think what they'd be getting in the wire would ever allow them to decrypt it.  But it would allow them to log on.  So there might be some risk there, but it's not huge.  It's not like all the security of the system collapses in the event of this kind of SSL proxying.



LEO:  But they are seeing your password.  So if I - right?  I mean...



STEVE:  No.



LEO:  They're not - not your LastPass password, but the password and logon to Amazon, for instance, using SSL.  Is it not now going through them?



STEVE:  Oh, other passwords, yes.



LEO:  So they don't get access to LastPass, but they get every password you use during that session.



STEVE:  Correct.  Oh, yes.  So it's absolutely the case that, in that school setting, you are really having to trust the SSL proxy.  What LastPass does is they hash in the browser using JavaScript before it goes over the wire.



LEO:  So it's secure.



STEVE:  And remember that - yes, so it's, like, extra secure.  And remember that we also talked about the idea of, wow, that would be a cool way of avoiding SSL proxying man-in-the-middle problems is if the browser hashed the password rather than just sending it - rather than trusting SSL for its protection because, unfortunately, as we're seeing, SSL is not necessarily safe any longer in these sorts of situations.



LEO:  It's a common practice in businesses, as well.



STEVE:  And increasingly common, probably.



LEO:  Yeah.  But the good news is you can tell because you will get those alerts from a lot of sites saying, hey, this doesn't match.  If you ever get that warning, the certificates don't match - I've gone to www.gmail.com, and the certificate is not matching - investigate.  Look at the certificate and see.  It will tell you.  It'll say, oh, Bank of America.  You go, oh, if you work at Bank of America, oh, they're watching.  But they have the right to do that.  We should point out, every court has said this over and over again.  There is no privacy.  There's privacy - it's ironic.  If you are on the phone, and your boss picks up the line and hears you having a personal conversation, the law says he must hang up.  He cannot eavesdrop.



STEVE:  Yes, yes.



LEO:  If you are using Gmail, he can watch everything you say.  If you're using Instant Messenger, the courts have said again and again, this is not the same.  Just so you know.



Rob Williams, Sugar Hill, Georgia - I just love the name Sugar Hill - had a thought about SOPA:  Steve, I'm a longtime listener and grateful user of SpinRite.  It saved my butt by fixing my wife's PC a couple of times now.  With SOPA in the news and what it proposes to do with DNS, a thought occurred to me.  What would stop a website owner from publishing his site's IP address versus its domain name?  I mean, DNS translates the domain name to an IP address; right?  And that's where the government wants to insert itself; right?  So just link to your IP rather than your domain.  I'm sure I mustn't have a complete understanding here.  I must be wrong; right?  It was just a thought.  I enjoy your work with Leo and recommend the podcast all the time.  Rob Williams.  I'm adding that extra little dramatic "I'm sure I'm wrong here; right?" because of course, if such a hole were to exist, it would completely make SOPA useless, Steve.



STEVE:  Yeah.  Yeah.  So, okay.  So first of all, the good news is I don't think, even with the RIAA and the MPAA and all their lobbying clout and Chris Dodd's sunset provision that prevents him from actively lobbying for two years after he's left Congress, and that'll be expiring soon...



LEO:  I'm not lobbying.  I'm just talking on CNN, that's all.



STEVE:  I'm a consultant.  I'm a historian.



LEO:  I'm a - yeah.



STEVE:  Okay.  I think the notion of the DNS spoofing has been killed forever.



LEO:  I think so.



STEVE:  The DNSSEC argument against spoofing just shoots that one in the head.  There's just no way we're going to get DNS spoofing to happen because it is so important that we have the security that DNSSEC will ultimately be providing us, where we know that our DNS has not been spoofed, that no legislation is going to allow that to be changed.  So I think DNS is safe.  But this is still an interesting question because it brings up some other things.



So, first of all, Rob is right.  For example, GRC, 4.79.142.203, that's GRC.com.  The problem is, even I don't really have that very well memorized.  So it's not at all easy, of course, to memorize IP addresses.  Some DNS servers, like 8.8.8.8, which is Google...



LEO:  That's easy.  That's Google, yeah.  Or 4.4.4.4, which is Verizon...



STEVE:  Exactly.  Those used to be the old Level 3 servers, was 4.4.4.1, 4.4.4.2, 4.4.4. and so on.  So they chose those specifically to make them easy to remember because - in fact, OpenDNS has some simple ones, too.



LEO:  They're not that simple.



STEVE:  They're not as - they're not as simple.



LEO:  I wish they were simpler because I always forget them.



STEVE:  Yeah.  But so it is the fact that the IP address is difficult to memorize, which is the reason we have DNS.  However, it is definitely the case that using the IP address will get you to the site.  And also places like Pirate Bay or Megaupload or so forth, where there would be an incentive for looking up and writing down the IP address, that's where people would tend to do it.  So you could imagine if somebody had some torrent site that they really liked, it would make sense for them to write down the IP address if there was a threat that at some point they might not be able to look it up using DNS.  And you could imagine also that there would be - people would be soon pushing around in the gray zone lists of websites and their IP addresses so that people could use those rather than DNS.



LEO:  Or buying ads in a magazine.  Or, I mean, there's lots of ways to do that.  And I bet you there'd be a pretty brisk market in vanity DNS addresses like 8.8.8.8.



STEVE:  Oh, you mean IP addresses.



LEO:  I mean IP addresses, yeah.



STEVE:  Yes, very good point.  So it is the case that just using an IP address does work.  It's worth mentioning, however, that DNS does other things than just provide a one-to-one mapping.  For example, if you look up the IP address of Google or Microsoft, you don't get one IP.  You typically get five or six.  And if you look it up again, you get a different one, which is to say that every time you look it up, you end up getting a different IP.  What DNS servers do is they can do a round-robin rotation so that, in general, people looking up the IP address will be spread evenly across a set of them.  And that has the advantage also that, if one server has an outage problem, then DNS automatically knows to go to the other, which is why we normally get two IP addresses when we look something up, is we have a primary and a secondary DNS server.



Similarly, sites can have multiple IPs if they want to have, like, their traffic coming through very different routes to get to them on the Internet.  Even though they end up resolving to the same DNS name, they could have very different IPs.  So there's more services being provided by DNS than just mapping to an IP.  But it absolutely is the case, Leo, as you say with your sarcasm, which is quite well justified, that SOPA was just going to be blocking DNS, but it certainly wasn't going to be blocking people from getting to those things.



LEO:  No.  And...



STEVE:  And IPs work.



LEO:  Right.  There's all sorts of ways around it.  It was a bad solution.



STEVE:  Bad idea.



LEO:  Although they're working on other things.  They've got ACTA now.  They'll find a way.  They are not done.  But I think you're right.  I think they're probably done trying to break DNS.



STEVE:  I think it's, well, and I think, it looks to me like one of the pressure points is going to be search engines.



LEO:  Yes.



STEVE:  That so many people get to stuff through search engines, I mean, it is our index to the Internet, that that is going to be what they try to attack, is say search engines should not return results to questionable sites.  It's like, okay, well, good luck with that fight.



LEO:  Heh heh heh heh.  Samuel Lundmark in Sweden wonders about public key strength.  He says:  I have some thoughts about PKI strength.  We both know that the public and private keys are prime numbers which are multiplied, and that the strength of the system derives from the difficulty of then factoring the result back into the two primes that composed it.  And we know that it takes a lot of computing power to create prime numbers in the first place - actually it doesn't, but anyway - which doubtless slows down the process of testing for prime factors.  So why can't someone create a database of all the prime numbers that exist in 1024 bits?  How many would that be?  For example, 1, 3, 5, 7, 11, 13, et cetera.  If someone created a rainbow table of primes, how big would that file be?  How vulnerable is PKI to rainbow tables of prime numbers?  Steve?



STEVE:  Well, it's an interesting idea.  When I was...



LEO:  Such things do exist.  I've seen such things.  Yes?



STEVE:  Well, yes.  And the sense we have, it turns out to be erroneous that there aren't many prime numbers, that is, that they're scarce.  Since the prime is by definition divisible only by one and itself, that is, it has no other factors, that immediately rules out all even numbers, all numbers that are divisible by three, and in fact by all other primes up to itself, of course.  And so that says, well, if you eliminate even numbers, you got rid of half.  If you eliminate every third number, then you've gotten rid of another two thirds, or another one third that you didn't get rid of with the first half.  And of course anything divisible by five, you've gotten rid of that.  Anything divisible by seven and so forth.  So intuitively you think, wow, that must mean that primes are kind of rarefied.



It turns out it's not the case.  I saw this myself when I was developing the code for that ultra-high - for GRC's ultra-high entropy random number generator because the algorithm that I used required something called a "safe prime," which is a special kind of prime.  A safe prime is a prime number which you would define as 2P+1, where "P" is also prime; and the converse of that, where that prime "P" is called a Sophie Germain prime.  And so I needed one which was as big as it could be, that was just less than 2^21 bits.  So I needed something that would fit in a 21-bit value for this ultra-high entropy pseudorandom number generator that I developed, which is the technology that underlies the whole - behind the whole Off The Grid system.



So I wrote my own - I wrote some code to go find that prime.  And it started at one and spit out safe primes.  And I watched it just spit them out, day and night, doot de doot de doot de doot, just kind of marched along.  In fact, I got tired because there were so many of them that, instead of starting at one, I started up near where I wanted to finish.  And I saw firsthand, to my surprise, how many primes there are.  And in fact you can imagine lots of number theory has gone into this.  And you can do some Googling in Wikipedia and see that in fact there's just tons of primes.  And 1024 bits is such a ridiculously large number that, even if the high bit was always on, then you have 1023 bits of combinations.



And it turns out that there is just absolutely no problem just jumping into the middle somewhere and looking for a prime.  Basically what they do is they do prime number tests.  They take a number and say "test this to see whether it's prime," which is the strategy that I was using.  And there's lots of research that's been done.  As you said, Leo, it's not overly compute-intensive to find primes.  But the other side is there are way too many of them to build a rainbow table.  That is, I mean, you can, and you just - you'll never stop.



LEO:  Well, and it wouldn't solve...



STEVE:  You'll never finish that job.



LEO:  It wouldn't really solve the problem, either; would it?  Because don't we - we need two primes.  What we need is two primes multiplied together to give a larger number.  And just because you had a rainbow table of primes doesn't mean it'd be easier to factor that larger number; would it?  The issue is what makes it hard is factoring a very, very large number into two primes, the product of two primes into two primes.  So what you'd need is a rainbow table, not of primes, but a rainbow table of numbers created by two primes multiplied together.  That would be vast.



STEVE:  Well, what you could do, if you had the...



LEO:  The original rainbow table, I guess, you could in fact multiply them all together; right?



STEVE:  Well, and if you had the product of the two primes, then you would take the value from the rainbow table, divide it by that, and see if you get a prime out.



LEO:  Okay.



STEVE:  So that would be the approach you could take.



LEO:  In fact, that's probably the brute force attack.  But that takes a long time.



STEVE:  Exactly.  Exactly.



LEO:  Right, that's the point.



STEVE:  And if there were "not that many primes," then it would work.  But the fact is there are just - there's no limit.  Well, there is a limit, but it's a huge, huge, number.  And, I mean, which is counterintuitive.  You would think that, since the definition is it can't be divisible by all those other numbers down below it, and it's up there so high, it turns out there's just still a gazillion of them up there.



LEO:  Yeah, that's the issue.  There's just so many of them.  Andre Cassiram in Winnipeg, Manitoba, Canada wonders about chkdsk and defrag:  Steve, I just finished listening to 336, a Q&A episode - our previous Q&A episode, as a matter of fact - and a question popped into my head about hard drives.  I've been using computers since MS-DOS, when I developed a habit of performing a disk error scan, a "chkdsk" scan, and defrag at the beginning of every month.  I started doing this to minimize disk errors and reduce the chance of disk failure.  Probably just increased it, but that's all right.



While I've experienced a hard disk failure, they have been few and far between.  I suspect it's because of this habit.  I'd like your opinion on this habit and whether there's any need to continue with my perceived preventative measure.  Also I've heard that solid-state drives do not require defragging.  This may actually harm the drive.  Why is that?  I'd like to close by complimenting you and Leo on your excellent podcast.  Regular user, no computer security credentials, I find your friendly, understandable style a real joy, blah blah blah, keep up the good work, accents, blah blah.  Steve and Leo, thanks for all you do.  I skip through that stuff, all the praise.  I blush.



STEVE:  I sometimes want to cut it out, but I think, well, then I'm not really posting the question, so...



LEO:  Well, yeah.  But it's...



STEVE:  Okay.  Okay.



LEO:  But anyway, that is great.  I've wanted to ask you this for ages.



STEVE:  I would call running a chkdsk and a defrag a "poor man's SpinRite."



LEO:  Yeah.



STEVE:  It actually is useful.  Remember that - and the reason he was put in mind of this is it was two weeks ago that I explained what it was that SpinRite does in answer to one of our listener's questions, who said you keep talking about it, but you never talk about what it actually does.  The value is in making the drive read its own data because that's when it discovers that it's got problems with a sector.  It doesn't know unless it tries to read it that it's got a problem.  And error correction is employed all the time now because the densities are so high, the drives are depending upon it.  It's when the problem gets near the point when it might not be able to correct it if it gets any worse that it then says, ooh, relocates it to a good spot, and marks that sector bad.



So the fact is, if you did a chkdsk, which thrashes around the drive and reads the metadata, the file system data, and a defrag, which has the effect of pretty much moving everything around by visiting everywhere, picking stuff up and moving it, I call that a "poor man's SpinRite" because you are essentially telling your drive to read pretty much all of the disk and write it back down again.



LEO:  You're trying to break it, basically.



STEVE:  Yeah.



LEO:  But doesn't it - now, I'll be honest.  People often talk about defrag, and on modern operating systems defrag doesn't have any real purpose.  And doesn't it thrash the drive?  I mean, aren't you really thrashing the drive in that case?  Defrag is different from chkdsk, or SpinRite, where you read-write, read-write, or maybe don't write, just read read read read read.  Defrag's moving stuff around like crazy.  It's doing a lot of drive access.



STEVE:  Yeah.  I'm not a big fan of defragging any longer, for exactly that reason.



LEO:  You don't need it anymore, yeah.



STEVE:  And to answer Andre's question about why SSDs should not be defragged, and he is correct, remember that SSDs, first of all, being non-physical, there's absolutely no wear-and-tear if files become fragmented.  That is, arguably, if you had a really badly fragmented hard drive, and you were reading those fragmented files, then it is more work for that drive to have its head jumping all over the place, following the path of a single file which has been fragmented, than if it were defragged, and the head was able to just stay in one place and just slowly click along through cylinders as it reads a long file.  So SSDs don't have that problem, being completely solid-state.  They do have the problem that they are fatigued by writing.  So you do not want to defrag, exactly as you said, Leo, an SSD.  Not only is there zero benefit, but it is actually detrimental because they don't like to be written.



LEO:  And they're random access.  So optimization doesn't make any sense.



STEVE:  Correct.



LEO:  It's a meaningless idea.



STEVE:  It is the case, however, that running a SpinRite Level 1 pass over an SSD is good for it.



LEO:  Oh, this is good to know.  This is new information.  Tell us about that.



STEVE:  This is new.  I have never said before.  But in reading Andre's note and thinking about it, I thought, oh.  And thinking about what I said two weeks ago, SSDs also have error correction.  SSDs, as we know, develop problems over time.  And just like with a hard drive, you need to read the data from the SSD in order to show it that it has a problem.  So SpinRite's Level 1 is a read-only scan, and doing that on an SSD makes a lot of sense.  Do a read-only scan of an SSD, it'll show the SSD's controller that it's got a problem reading a sector, and then it'll map that out or rewrite it in order to strengthen that sector, if possible.  So that ends up being a value for SpinRite on solid-state drives.



LEO:  And the reason solid-state drives wear out is writes, not reads; right?  You can read it indefinitely.



STEVE:  Yes.



LEO:  It's just the writes that are a problem.



STEVE:  It's because the technology is a small conductor which carries an electrostatic charge.  So there's, like, electrons stranded out on this little conductive island.  And the technology is able to sense the charge so that you're able to sense the charge without doing any work.  But in order to drain the charge, since this little island, this little floating island of conductive material with electrons, you need to break down the insulative barrier.  And you use high voltage to do that.  There's actually what's called a "charge pump" in SSDs where they actually pump themselves up to a much greater voltage than the five volts they run on, and then they use that voltage to break through and essentially break the resistance of this barrier, break the insulation, and pull the electrons off when they want to set it to zero.  And similarly, they break through it to push electrons on.



What happens is that's the problem, is over time breaking through that insulation fatigues the insulation, and it starts leaking a little bit.  And so the SSD will detect it and go, whoops, we've got a problem.  And that's where it'll take that out of service and map in some spare space.  So it's the writing that does fatigue the actual storage mechanism of the SSD, which is not a problem that hard drives have.



LEO:  Right.  Tom Walker, Littleton, Colorado wants to know about the WPS button:  I listened to the entire show - by the way, Steve, great podcast - listened to the entire show about the WPS PIN vulnerability.  Seems to me this vulnerability would be present only on routers that don't have a button, but still have WPS.  Isn't the purpose of the button to temporarily turn on WPS?  How can a hacker in the apartment next door hack my WPS PIN if he can't press the button to enable the two-minute WPS access?  That's a good point; right?



STEVE:  Wouldn't it be wonderful if that were so.



LEO:  Oh.



STEVE:  I only addressed one aspect of WPS when we've been talking about it, which was the Reaver-oriented, PIN-hacking remote exploit.  There are, in the WPS spec, a number of other ways for WPS to work.  There's actually already a near field technology defined for WPS, where, for example, at some point in the future, when our smart phones have near field technology in them, my new BlackBerry Bold does, and when our access points have near field technology, you'll literally be able to just knock your phone against a spot on the access point and instantly configure its WiFi.  That's in the spec already.



There's also what they call "out of band synchronization," for example, using USB, where you would briefly connect your device through USB, and there's a WPS support for USB protocol to send the information through the USB channel, so it's not going through the air.  That's another means of configuring WPS, already in the spec, just waiting for somebody to use it.  The fourth approach, skipping the WPS approach we now know of, the fixed-PIN approach, the fourth approach is the pushbutton approach.  And that works without a PIN.  So it isn't that it enables the PIN, it is PIN-free, which makes it troubling for a whole 'nother set of reasons.



LEO:  But you're only vulnerable for two minutes.



STEVE:  Yes.  So the idea there is you press the button on the router, and you walk over - remember I did mention it briefly, they call it the "walk time."  You then walk to the device you want to configure, and you press its button, or its equivalent, and both devices then are supposed to see each other and automatically synchronize themselves, automatically pair, but only if neither of them sees anybody else.  And so that's the protection against...



LEO:  Ah, that's clever.



STEVE:  It is clever.  And it, like, still gives me the creeps because it's like, oh, that doesn't seem very safe.  So, yes, just disable WPS if you can.  Oh, and I should mention, Cisco has provided an update to all of their Linksys owners, not firmware, but news of when that will happen.



LEO:  Yeah, yeah.



STEVE:  Some time in March.



LEO:  It's ID 25154 on the Cisco Knowledge Base.  And they say the first firmware will be to disable WPS.  Not to fix it, just to disable it.  And they say there is a workaround.  You can disable WiFi.  So...



STEVE:  Do they really?



LEO:  Yeah.  Workarounds.  It says, "Not all workarounds are available or practical for all customers."



STEVE:  You could also unplug it.  Just pull the plug.



LEO:  Yeah.  It says "Disable wireless radio.  For customers not using the wireless function, disabling the WiFi radio will alleviate exposure."



STEVE:  Well, that's a good point, I guess.



LEO:  Yeah, yeah.  Moving along.



STEVE:  True enough.



LEO:  True enough.



STEVE:  And don't let anybody press the button.  Don't let any strangers come into your house...



LEO:  And press your button.



STEVE:  ...and press the button and then leave.



LEO:  And then walk away.



STEVE:  That'd be bad, too.



LEO:  Thomas Paulson in Nordland, Norway asks:  So, is WPA cracked?  Steve and Leo, longtime listener of Security Now!.  I regard your expertise as my one-stop shop of all things security related.  I'm sure you get a ton of email, if email has weight, about cracking this and that.  I'll try to make this brief, interesting, and to the point.



In online forums I hear a lot of people claim, greatly convinced, that WPA and WPA2 have been cracked and are insecure.  But I haven't had anyone produce any convincing evidence.  I searched the 'Net, couldn't find any reliable resources.  Searched YouTube, found a lot of videos showing how they supposedly cracked WPA by using a few Linux commands, but a video is easily faked.  I remember 170, November 2008, where the TKIP hack was dissected.  Since then I have not heard anything about WPA in fact being cracked.  Did I miss it?  Are people wrong in assuming that WPA/WPA2 is vulnerable/cracked?



I mean, as far as I know, the only way to crack my WPA2 secured WiFi network would be a brute force attack, which would take just about forever given a passphrase of significant size.  I ran mine through your Password Haystacks.  And even in the "Massive Cracking Array Scenario," it would take 1.91 million trillion centuries - I'm sorry, underestimated it.  1.91 million trillion trillion centuries to guess.



If it's broke, I would think the Internet would be swamped with news stories and high-profile security experts such as yourself confirming the fact.  But I don't see that, and I won't believe it till I hear it from you.  Thanks for creating the wonderful show.  If my life were limited to a single podcast, it would be Security Now!.  Best regards Thomas Paulson, Norway.



STEVE:  You know, I saw this, and I wanted to include it because I see the same nonsense.



LEO:  Again and again.



STEVE:  I know, in forums.  And I saw it in the last couple of weeks when I was doing research on the WPS stuff, these anonymous weenies, who I guess impress their family members...



LEO:  I cracked it, heh, heh.



STEVE:  Yeah, with their supposed knowledge.  And they just sit back there and say, oh, WPA's been cracked, hah hah hah.



LEO:  That's what it really is.  It's kind of this know-it-all thing.  Oh, yeah, no, I know that.



STEVE:  Yeah.



LEO:  I read that in an article once.



STEVE:  Well, so Thomas and everybody else, nothing has changed.  WPA and WPA2 have not been cracked.  The only little chink in the armor of WPA was exactly as Thomas remembers, which was that the TKIP, the Temporal Key Integrity Protocol was - it was very cleverly jimmied a little bit by some developers who figured out that they could decrypt very short packets only of the sort that maybe the ARP protocol would use.  Nothing further ever came of it.  You can't do more than that.  You can't decrypt large packets.  There just isn't really any practical way to leverage that.  And WPA2, which uses the Advanced Encryption Standard, the AES, is absolutely, exactly as Thomas says, uncrackable.  The only known exploit is going through the front door with a brute force attack and trying, exhaustively, every possible passphrase on a packet that you captured in the air.  And so it is not the case that WPA and WPA2 have been cracked, despite what you see posted by weenies in forums.



LEO:  So in fact we say, if you want to secure a wireless router, make it as secure as anything wired, use WPA2, right, at AES.



STEVE:  And the only known problem is if you used a really dumb...



LEO:  And a good password.



STEVE:  ...password.



LEO:  Yeah, don't use 1234567 as your password.



STEVE:  Do not.



LEO:  And if you have WPS, turn that off.  Nathan Agius - right?  Because WPA, I mean, WPS will bypass the WPA passwords, no matter...



STEVE:  Right.  What was so clever about WPA was that it still used the RC4 cipher.  And RC4 is itself not insecure.  It was that the WEP implementation of it was so poor that there were all kinds of ways to crack it.  So but the problem was, back then, when we were trying to get away from WEP as fast as possible, there was a lot of old hardware that wasn't strong enough to handle a much more powerful cipher.  So they used this Temporal Key Integrity Protocol, basically came up with a clever way of reusing RC4 and solving the WEP problems, but still giving us really good strength.  So that was a long time ago.  Now, in this day and age, everything supports WPA2.  So as you said, Leo, disable WPA, everything should work just fine.



LEO:  Nathan Agius in Sydney, Australia is looking for an alternative to GoDaddy:  Hi, Steve and Leo.  After recently listening to you and Leo complaining about GoDaddy multiple times and the fact GoDaddy was in support of SOPA, I decided to move away from them.  I signed up with Hover - good, that's one of our sponsors - for some domains, and I want to move my main ones away soon.



The problem is I'm using GoDaddy's hosting on two sites, and I don't feel comfortable with just picking a new hosting company randomly.  Do you have any advice?  My first thought was to go with TWiT sponsor Squarespace, but unfortunately they do not allow server-side code in PHP to be uploaded by me.  Can you suggest - I'm not surprised.  Can you suggest any Linux-based hosting with PHP support?  Thanks for your time and a great show.  P.S.:  For years now I've been swapping the contents of all my drives onto new media and back every six months due to bit rot.  You woke me up to this years ago.  Great advice.  That's an interesting - I never heard of that.  Did you recommend that, swapping it?



STEVE:  No.



LEO:  But it's a good idea.



STEVE:  It is.  I mean, you could also run SpinRite, or you could...



LEO:  Yeah, same idea.



STEVE:  Just do something that reads the drive.  Reading the drive allows it to see it's got problems.



LEO:  Do you have, I mean, you have used power hosting.  You do your own hosting through Level 1; right?  Or something like that.  What do you do?



STEVE:  Yeah, well, I've got my own servers at Level 3.



LEO:  Right, Level 3.  Level 1.  Level 3, yes.



STEVE:  And all of my server-side stuff, of course, is in assembly language.  But I didn't know if you had somebody.  But I would say DreamHost is a really strong hosting provider.  And, I mean, they're a real propeller-head provider.  They do, and I checked, allow you to do your own server-side PHP5 stuff.  And they've got great packages.  They've been around forever.  And they give you a whole bunch of different plans and access to essentially virtual private servers running Linux or other OSes of your choice.  So if nothing else, DreamHost.  But maybe somebody in the chatroom has a recommendation, or I thought maybe you might.  [BlueHost is good.  Elaine]



LEO:  Yeah, I like DreamHost fine.  They did get hacked recently, but...



STEVE:  We talked about it last week.



LEO:  Everybody does.



STEVE:  Yup, exactly.  And they were as responsible about it as they could have been.



LEO:  Right.  I mean, the truth is that's why Squarespace doesn't allow you to upload, side load PHP code.  When we've been hacked - we've been hacked, what, two or three times at TWiT, and it was always PHP code.  That is kind of inherently risky.  You have to know what you're doing if you're writing PHP code and uploading it.



We use a company called SoftLayer for our hosting.  And basically, I mean, we use it as a dedicated server hosting.  So in other words, that server is all ours.  We have six of them.  We have a MySQL server, we have divided up - much like what you would do yourself, Steve, you have your own hardware running in your own area with bandwidth provided by Level 3.  We just - our hardware we don't own.  We lease it from them, and it's in their cages in Dallas and Seattle.  We like the fact that it's multiple locations.  We like the fact that they have gigabit and hundred megabit connections to the outside world, better than we've got.  So, I mean, I don't have - I couldn't afford a gigabit connection here.  We have 150Mb, but I'm not going to use that for servers.



So we just do it at SoftLayer, and they're fairly affordable, and I think they're good.  They, I believe - now, one thing to describe and maybe to help people understand, there's managed and unmanaged hosting.  Ours is unmanaged, which means we have our own sysadmins.  They're responsible for security and maintaining it.  SoftLayer doesn't look over our shoulder.  They basically give you a box with a connection and say, "It's all yours.  Do whatever you want."  For some people, that is not what they need.  They need more handholding.  They might want somebody to manage it at various degrees.  I'm pretty sure you can get managed hosting, as well, from SoftLayer, at a price.  DreamHost is I'm sure managed.  It's rare that you'll find a hosting server that's - unless you have a dedicated host, dedicated server, rather, that will say, hey, do whatever you want, because you're on the same box as a bunch of other people.  So I'm sure DreamHost is managed.  And for most people that's what you want.



STEVE:  Yeah.



LEO:  Peter McDonald in Scotland - and I do, by the way, no hesitation, if you want a good company, I love SoftLayer.  We don't get a deal with them.  We pay full price.  We pay thousands, I think 4 or 5,000 a month in server costs.  But they are great.  They've been very responsive whenever there's a problem, and I've been very happy with SoftLayer.com.



Peter McDonald in Scotland shares his thoughts about self-updating routers:  In Security Now! 336 you said it was a shame that routers don't - or in Scotland they probably call them "rooters" - don't automatically update their firmware.  I work for a major U.K. ISP who supply rebranded Thompson and 2Wire routers to their customers.  Both of these routers do, in fact, automatically update their firmware.  When they're plugged in for the first time, they register with the network on the ISP side.  When a new firmware is released, a batch of routers are upgraded to ensure that, if there is an issue, not all are affected.  Once it's been proven there are no issues, the rest of the routers get updated in large batches.



Granted, these are routers with customized firmware on them, written by the router manufacturer to our, the ISP's, specification.  But there is no reason why they couldn't do the same for public routers.  There are two issues, however.  First, how do you handle a bricked router?  If there are any issues during a firmware upgrade, the router could become unusable.  If the consumer did not know of the upgrade, they may just think it malfunctioning and start rebooting midway through the upgrade.  There's one way you could brick it.  Secondly, some customers - and I think that's probably the best reason, because during a firmware upgrade the router will not be working.  And if you rebooted it then, disaster.



Secondly, some customers really do not like the device updating itself.  What can and does happen a lot is the new firmware will break some functionality that hasn't been fully tested.  This results in dissatisfaction and complaints for the company.  This happened recently at my work, where a firmware upgrade stopped IPSEC VPNs from working.  Ouch.



STEVE:  Well, there is, I think, probably in the future, we're going to see routers, rooters, whatever you want to call them...



LEO:  It's funny because you don't call them "rooters" in Australia because if you did, it would be dirty.



STEVE:  Yeah.



LEO:  But we call them routers in the states, and I know in the U.K. they call them "rooters."  So just so you know.  I think we've covered both pronunciations by saying so.



STEVE:  There is longstanding technology for embedded systems where you have something called a "watchdog."  And the watchdog is a hardware timer which, if the router is working correctly, in one of the router's execution loops every so often it goes and resets this timer, so that the timer is never allowed to expire.  And if the timer ever expires, that tells it that there's a hang somewhere.  And so in embedded systems it'll reboot the device in order to wake it up and pull it out of this hang.



So it's entirely possible to imagine a router which would be even safe, could be made safe against this kind of vulnerability, that is, the problem of, like, being reset in the middle of a firmware update or something, by giving a watchdog timer the ability to reflash the firmware from a master copy in ROM.  So there would always be a good, known, fallback firmware that the router could come back to, if in the process of getting itself updated something happened, or the new firmware was properly flashed, but then ended up having a problem and the user said, whoops, just press a button in order to fix the router.



So you can imagine workarounds.  Maybe it'll never happen.  Routers are so inexpensive, no one wants to add the additional cost.  But we sure are seeing a situation here where it would be nice to have some means of reaching out and updating - god knows how many wireless routers have this WPS vulnerability that's just going to be there forever.



LEO:  Yeah.  Sigh.  Rick Huebner in Melbourne, Florida shares some tips for using TrueCrypt:  Steve, in Security Now! #337 you mentioned the person accused of mortgage fraud and being compelled to provide their password to decrypt their laptop.  I'm an avid user of TrueCrypt, and I have my laptop drives whole-disk encrypted.  For several years now TrueCrypt has offered the option of replacing their boot-time display text with your own text.  This is limited to something like 30 characters, but I found that the best prompt, instead of that glaring TrueCrypt prompt, was to put in something like "Missing ntoskrnl.exe," or just a blank screen.  This gives the impression that the hard drive's dead and tends to provoke a compassionate response instead of an adversarial response to an encrypted drive.  I mean, come on, who sees a safe and doesn't wonder how much cash and drugs are stored in it?  Remember Scarface?  I think this, combined with either encrypted virtual machines or the hidden volume/operating system should provide enough deniability for all but the super spy. 



STEVE:  I really - I like Rick's thought.  And it actually mimics what I have done in the past.  My feeling is you really gain nothing if your boot-up screen says "Nanny nanny nanny, you can't guess my password."



LEO:  Good luck.



STEVE:  It's just going to piss off somebody and induce them to try, or maybe they'll just throw the machine down on the ground because they're upset or something.  I really much more appreciate sort of the Aikido approach of just sort of saying, exactly as he suggests, something to indicate that the system is not functioning, like "Missing ntoskrnl" or "Missing operating system." Just say "Missing operating system."  Lord knows that's the horrible message we see sometimes when we're configuring systems, and the BIOS tries to boot from the wrong drive, or we leave a USB dongle in, and the BIOS tries to boot from that.  And so, I mean, it would stop somebody so that they wouldn't even go any further.



Now, it would not stop the FBI because anyone forensically looking at the boot sector would immediately recognize that this is a TrueCrypt boot sector which has been configured to display this message.  So up at the high level it's not going to stop anybody.  But I do, I really - I loved him saying it provokes a compassionate response, rather than one that's adversarial.  And I say, why not go for that?  Do not taunt somebody who you're trying to keep out of your drive.  That's just never going to have any benefit.



LEO:  Finally, our last question, from Andries Strauss in Centurion, South Africa.  He is wondering about cooling down phone batteries:  Steve, you've shared a lot regarding phone batteries lately, which is always very interesting.  I'd like to know, is it okay to mount my iPhone on the air vent of my car's air conditioner?  The issue is I use my iPhone as a GPS device while driving, and I have it mounted on a suction-cup cradle, leaving it exposed to direct sunlight.  It's also charging while in the car.  After a while the screen goes darker, making it difficult to see the route.  This, I found, was because of the phone heating up.



I then have to remove the phone from the cradle and cool it down by holding it directly in the air flow of the air conditioning, not exactly the safest operation while driving.  The other option is to set the air conditioner to blow air from below the front windshield so more cool air reaches the phone - but not me.  I've seen various types of cradles which will allow you to mount the phone directly on the air vent grill.  Is this a good idea, though, to have the phone permanently, directly in cool air?



STEVE:  It is a fantastic idea.



LEO:  Couldn't hurt.



STEVE:  And, no, actually more than that, Leo.  One thing in all of our discussions that I also have meant to say, but it kept slipping my mind, is temperature.  Lithium-ion batteries hate the heat.  It is absolutely destructive to them, to the degree that mature technology, responsible technology will not have anything to do with a hot lithium-ion battery.  It will absolutely shut down.  It won't charge.  It won't discharge.  It'll just say we're not doing anything until this battery cools off.  It is crucial that lithium-ion batteries not be allowed to get too hot.  And it's something that I had forgotten to mention.



But in terms of our general sort of ongoing series on care and feeding of contemporary lithium-ion battery technology, temperature really matters.  So, for example, do not leave devices sitting on your car dashboard.  Obviously it's not good anyway because bad guys can see them, and that gives them an incentive to break a window and reach in and get it.  But you do not want them to heat up.  It will age the battery very quickly.  So absolutely, keep things out of direct sunlight because that allows them to get very hot, and they don't like it.



LEO:  Yeah, sunlight's bad.  In fact, the iPhone has a warning, which I have seen, that will pop up.  It will actually shut down and say it's overheated and will stop working.



STEVE:  And I've had that with my iPad, as well, yes.



LEO:  Right.  So, yeah, you definitely don't want to overheat that.  And, hey, think about all the computers that for years sat in air-conditioned, sealed chambers.  That's what they want.



STEVE:  Well, yeah.  But even more so, chemistry wants that.  I mean, our batteries are goo-filled.  They've got all this chemistry going on in there.  And it's that chemistry that really is heat-sensitive.



LEO:  Right.  Steve Gibson is not heat sensitive.  But he's liable to strip down if it gets too warm.  He is our...



STEVE:  Hey, I've done this podcast with a fever, Leo.



LEO:  Yes.  You know what?  Let's give you some credit.  Last week Steve was walking wounded, and he did not indicate in any way that he was in pain.  I guess he got some food poisoning or something.



STEVE:  Had a 101-degree fever.  I took my temperature afterwards, and I thought, whoa, well, the podcast must go on.



LEO:  I'm impressed.  In future, please do not do that.  Just tell me.  We'll reschedule.  Anyway, thank you for letting us reschedule.  We did this show a little bit earlier.  Normally we do it Wednesdays at 11:00 a.m. Pacific, 2:00 p.m. Eastern at TWiT.tv.  But you know what?  We make sure that you can get it in any way you want.  You can watch it on Roku.  You can watch it on many devices.  You can download video from iTunes or just from our site, TWiT.tv.  And Steve even offers, I don't know - how many downloads?  Do you have counts of downloads for 16Kb versions?



STEVE:  Oh, yeah.  I haven't looked at them for a long time, but we get thousands of downloads.



LEO:  Thousands, wow.



STEVE:  And I bounce them through Podtrac so that Podtrac can count them, too.



LEO:  Thank you, we count them.  But for those of you who really want a small file, I mean, 16Kb is about as small as you can get and still have audio.  There is a text transcript, as well, which is even smaller.  All of that, the bandwidth-impaired stuff you'll find at GRC.com, Steve's site.  A great place, too, if you want a question on our next Q&A episode, to go:  GRC.com/feedback.  There's lots of free stuff at GRC.com, too, you might want to check out.  But of course let's not forget SpinRite, the world's best hard drive and now solid-state drive maintenance and recovery utility.  Couldn't do any recovery on there, probably, but you could exercise it in a safe way.



STEVE:  Well, I would imagine some future version will be in my...



LEO:  Really?



STEVE:  Oh, yeah.  We're not done.



LEO:  Good on you.  Yeah, because I don't want, I mean, I don't want solid-state to put Steve Gibson out of business.  That would be bad.



STEVE:  Nope.  I don't think that'll happen.



LEO:  All right, Steve.  Well, I'm glad you're feeling better.  Don't eat at that place ever again.



STEVE:  Nope, not going back.



LEO:  Thanks, Steve.  Thanks, everybody.  We'll see you next time on Security Now!.



Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#339

DATE:		February 9, 2012

TITLE:		"ScriptNo" for Chrome

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-339.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  This week, after catching up with a busy and interesting week of security news and events, Steve and Leo take a close look at ScriptNo, a new Chrome extension created by a developer who left Firefox (and NoScript) for Chrome and was pining for NoScript's features.



SHOW TEASE:  It's time for Security Now!.  Steve Gibson's found a plug-in for Chrome that duplicates the functionality of NoScript - which you know he loves - for Firefox.  We'll talk about ScriptNo and a bug in a security camera that makes it possible for anybody to see what you're doing, any time, without a password.  It's coming up next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 339, recorded February 8th, 2012:  ScriptNo for Chrome.



It's time for Security Now!, the show that protects your privacy, security, everything you need to know about keeping it safe online with this fellow here, the Explainer in Chief, Mr. Steven Gibson.



STEVE GIBSON:  My new moniker.



LEO:  Explainer in Chief.



STEVE:  Explainer in Chief.



LEO:  And you told me your middle initial last week, and I forgot it.  J?



STEVE:  That's just as well.  M.



LEO:  Oh.  M.  Steven M.  Doesn't that sound a little bit more - Steven M. Gibson sounds a little more serious.



STEVE:  Back when I was at the AI lab at Stanford - when I was in high school I was working at Stanford's artificial intelligence lab, and you used your initials as part of your logon.



LEO:  SMG.



STEVE:  So my initials were SMG.  And so they called me "Smog."



LEO:  Oh, I love that.



STEVE:  That's wonderful.



LEO:  Smog Gibson is here.



STEVE:  Yeah, I was a coolie, as they termed it.



LEO:  How fun.  That was when they thought artificial intelligence was going to change the world.



STEVE:  Oh, it's going to be easy, yeah.



LEO:  No problem.



STEVE:  We've just got to write some programs, and these things are going to start thinking any moment now.



LEO:  Simple, simple, simple.



STEVE:  Didn't turn out.  I mean, it was we who got the education, not the computers.



LEO:  True.



STEVE:  It was people who thought this was not hard, we learned, whoa, there's more going on here than we thought.  But that's always the case.  I was telling someone just the other day, who had a great idea for an Internet startup and wanted my opinion about it, I told him a little bit about - he's not a Security Now! watcher, so he found me because he's actually the stepson of an ex-girlfriend, who'd graduated and had an idea for an Internet startup.  And I told him a little bit, I sort of paraphrased the Portable Dog Killer episode and what we learned, what I learned from that; and the takeaway message that I shared with our audience was nothing is going to happen if you're just sitting around playing videogames.



It's when you try to do something, even if you think you know how, even if you think, hey, I'm just going to go do this - and this is exactly what happened in the AI world was we all thought we knew how to program a computer to play world-class chess or navigate a little robot cart around the parking lot.  That was my first introduction to the lab was as I was turning up into the driveway, there was a sign, a warning sign that said "Caution:  Robot Vehicle in Use."  And this was in 1972.



LEO:  That's impressive.



STEVE:  I thought I had died and gone to heaven



LEO:  Yeah.



STEVE:  It's like, you're kidding me.  So that was the beginning of several years of a lot of fun.  And...



LEO:  And as you say, learning, because we found out you can't do it, or it's not as easy as you thought it was.



STEVE:  Yeah.  It's like, oh, digitize the video, and then we have a picture, and now let's do some edge enhancement, and then model the area, and have the computer know where we are.  And it's like, oh, boy.  When you start, oh, it's easy to say.  But when you turn it into details, that's when you start thinking, oh, wait a minute, there's something I didn't think of.  Oh, I didn't think of that, and I didn't think of that, and I didn't think of that.  And that just - that goes recursive.



LEO:  You can never think of everything.



STEVE:  Although I did meet with an avid listener to our podcast, actually, a friend of ours.  Maybe you know Evan Katz?  Do you know of Evan?



LEO:  I sure do, yeah.



STEVE:  Anyway, Evan is a neat guy.  And it turns out he follows, among many things, computer-based chess.  And so I got a complete tune-up.  We had lunch for a couple hours a few months ago, actually over the holidays.  Or I guess it was over Thanksgiving.  And he knew all about the state of the art in computer chess, which I hadn't been following for years.  And it was fascinating that...



LEO:  We've come a long way, baby, let me tell you.



STEVE:  Oh, my goodness.  And it's all just in software now.  It's all programmed.  No one's building big rooms full of custom chess-playing hardware.  It's our standard Intel core whatever processors and the algorithms...



LEO:  They're so fast.



STEVE:  Yeah, I mean, and now the humans are out of it.  It's no longer about - it's pitting the software against each other.



LEO:  You can buy a pretty damn good program that's a grandmaster quality program that runs on your PC just fine.



STEVE:  And I don't know how I feel about that, Leo.  I mean...



LEO:  Well, it's brute force, that's the thing.  It's not...



STEVE:  Yeah, exactly.  I grew up playing chess with a grandfather of mine and really enjoyed the game.  And chess, coming back to the game is sort of something I'm thinking of I'll do after I unplug myself...



LEO:  Hey, you and I should play a game.  I didn't know you were a chess man.



STEVE:  Well, but believe me, it's been a long time.



LEO:  Well, it has for me, too.  I was pretty serious in high school.  I played in tournaments.  I played in the U.S. Open the day before my wedding.  I was very serious about this thing.



STEVE:  Yeah, well, it's a fantastic game.



LEO:  It's a wonderful game.  And it did take some of the steam out of it when we found out that a computer could beat us.



STEVE:  Yeah.  And so now I'm kind of thinking, well, I don't have anyone who's in my neighborhood who's fun to play or does play.  But I've got technology coming out my ears.  But how does that feel, to just be, like, playing a game you know you can't win.  And it wouldn't be that so much.  My ego's fine.



LEO:  You can play humans you can't beat either, yeah, yeah.



STEVE:  I don't care if I know I'm going to get beat.  And in fact my grandfather was way better than I was, and I spent the first many years really just having the stuffing beaten out of me.  But then...



LEO:  That's how you learn.



STEVE:  ...the tide began to turn a little bit.  But so the point is, I wouldn't mind losing if I knew that I was losing to another human brain, rather than algorithms that are looking at this thing and going, mate in 26.  It's like, oh, okay, what's the fun there?



LEO:  Well, yeah.  I mean, what we learned, and we didn't know at the time, was that chess turns out to be solvable, a solvable problem, given enough RAM.  It's mostly, I think it's mostly about calculation speed and sufficient RAM to store the positions.  But it's solvable.  Now, interestingly - and by the way, you and I, we're going to start playing chess.  You have a smartphone; right?  We could play chess with friends.  You and I could play head to head over the Internet.  I'll play you a game.  But now, if you're interested, turns out that the most intransigent game is Go, the Japanese game of Go.



STEVE:  Which is so, like, visually simple by comparison.



LEO:  It's all pattern matching.



STEVE:  Those little stones.



LEO:  And it turns out that it's computationally so intensive.  Of course it is also pure calculation, and sufficient brute force will solve it.  But they cannot make a Go machine that even plays nearly as well as moderate level professionals.



STEVE:  In other words, it won't Go.



LEO:  It don't Go.  I think it's fascinating.  It's combinatorially too complex, so they can't...



STEVE:  Wow.



LEO:  It is a great subject.  I gave a lecture on one of the MacMania cruises about chess-playing machines.  It's a fascinating story.



STEVE:  And how in the old days there used to be cheaters.  There were, like, little midgets hiding underneath the table.



LEO:  Yeah, they called it the Mechanical Turk.  And there was a guy in it.  It was a very good player.  He beat some of the crowned heads of Europe.  And they thought it was a robot.



STEVE:  I guess there was enough clockwork obfuscation on the outside that it convinced experts, who stared into it and scratched their heads and thought, no kidding, well, I guess you've just got to get the gears in the right place in order to...



LEO:  It was a good magic trick, and that's all.



STEVE:  Yeah.



LEO:  So today we're going to talk about ScriptNo.



STEVE:  Well, yes.  Our main topic is - I did a deep dive into a browser extension, and our listeners know that I don't do that often.  I did it with LastPass, and the results were stellar, and I'm really glad I did.  That was a great investment of my time and learning.  I did it with NoScript for Firefox because we know how I feel about scripting in browsers.  Well, one of the things that has sort of put me off of Chrome a little bit is that there wasn't anything that gave Chrome users the same kind of control with Chrome.  You can, I believe, I'm sure I knew once that you could turn scripting off completely in Chrome.  But if you do that, then nothing works.  And there was for a while an extension called NotScript, which didn't do anything really.  I mean, it just didn't work very well, had very little functionality.  I think it was something someone did and then just sort of abandoned.



Well, ScriptNo is recently created, is being actively developed by a neat recent college graduate in Toronto who knows us and has followed GRC and my work for years, it turns out.  I didn't learn that until he responded with thanks to a donation that I sent to him to support his work.  And the more I played with it and poked at it, the more I've been impressed and liked it.  So today is for everyone who feels as I have - oh, and in fact, this is why Andrew created it.  He was a Firefox 3 user.  Then he upgraded, as we all did, to Firefox 4 and watched the memory just bleed out of Firefox without end.  And he was also on Opera.



And then he's very pro-Google, in fact, sent out an application for employment to Google that has never been - Google Toronto or Google Canada or something - that they've never responded to.  So if there's anyone within reach of this podcast at Google Canada, there's a very talented-seeming person who would be interested in getting a word back from you.



LEO:  What a good way to get a job.



STEVE:  Yeah.



LEO:  Just write an amazing extension for Chrome.



STEVE:  Well, anyway, I'm going to talk about that.  It's got more features in some useful ways than NoScript.  It tells you more about what's going on, which I know our listeners will like, just by hovering your mouse over things, the kind of information I want to have and the kind of controls that it's nice to have.  So essentially, we've got really good - and it's not just scripting, it's objects.  So it's Java objects, embedded stuff, Flash, images, the whole panoply.  So that's our main topic.  But we've also got some news.  And that might not seem like a lot to talk about, but there's one really intriguing disaster of the week.



LEO:  Our disaster - I'll get an echo effect ready for you.



STEVE:  That would be good.  Oh, goodness.  With a horrible vulnerability in a widely deployed webcam that, without its owners knowing it, is horribly violating the privacy of everyone who has it, without their knowledge.  Because it turns out you don't need to log on.  And there's a search engine that finds them all for you.



LEO:  So let's talk.  What have you got?



STEVE:  Okay.  So we're keeping an eye, a background eye, on the so-called NSTIC.  I've talked about this a few times.  This is the so-called - it's the acronym for the National Strategy for Trusted Identities in Cyberspace, which is the current administration's determination, which is well meaning, to solve the problem somehow of trust in cyberspace, that is, how do we authenticate people?  If we're going to be an Internet-based world, truly, and more business is going to go on the 'Net, and more commerce is going to go on the 'Net, and the world is going to go on the 'Net, we need to come up with a robust authentication system for people.  And this is a topic that we have talked about often.  I'm passionate about it.  It's the reason that Stina and Yubico, with her YubiKey, were so interesting.  And we've talked about the VeriSign football and eInk cards and one-time passwords and all this stuff.



In the physical world we know each other.  We see each other.  We recognize each other.  And we can believe that we're talking to something that we know, a website that we know, or that a website knows it's talking to one of its users.  But as we also know, there's all kinds of ways, I mean, for that to fail.  It's incredibly challenging to do that.  So the NIST is the organizing body behind this, the National Institute of Standards and Technology that's been around forever.  And I'm on the inside of this stuff because I'm interested in what's going to happen and how it's going to go.  And so I received a notification of some progress.  And I thought, oh, well, what?  This could be great.



Well, then I realized just how slowly turning the wheels of the bureaucracy are.  Jeremy Grant is the senior executive advisor of identity management at NIST, so this falls, as you'd expect, under identity management.  There is such a division.  And he said in his note, "I am pleased to announce the publication of a new NIST report entitled 'Recommendations for Establishing an Identity Ecosystem Governance Structure.'"



LEO:  Just the name scares.



STEVE:  Oh, my goodness.  So this is a 51-page PDF with recommendations for how to establish an identity ecosystem governance structure.  So, yeah.  The upshot is we need to keep working on this ourselves, Leo.  This is not going to get solved anytime soon.



LEO:  Well, on the other hand, some centralized system, and the NIST would be the right ones to do it, I think, does seem necessary.



STEVE:  Well, yes.



LEO:  You don't want Google or Microsoft doing this, although they have been trying.



STEVE:  Well, and I don't mind their input.  But agreeing with you that taking this slowly, this is an important thing.  And we know that there are, I mean, this is a hard problem to solve because the tighter you make the authentication of someone's identity, the harder a problem you have with the flipside, which is anonymity and privacy, both of which people have a right to and covet and cherish, as they should.



LEO:  Google went right up against this with their name policy on Google+.  And it bit them in the butt.



STEVE:  Yup.  And look what we just went through with SOPA and PIPA, where legislation just appeared in Congress and asked for votes with nothing like this kind of careful, we're going to take this thing through, we're going to make sure what comes out the other end is useful and not something that just immediately enrages the world the way SOPA and PIPA did.  So I will keep an eye on it, and I will be informing our listeners, as this thing moves forward, where we stand with it.



LEO:  Thank you.



STEVE:  There's some really encouraging news that Brian Krebs reported on his blog.  Since he covered it so thoroughly, I didn't go any further.  And so I'll just quote from what he wrote.  He wrote that "Adobe has released a public beta version of its Flash Player software for Firefox that forces the program to run in a heightened security mode or sandbox..."



LEO:  Yay.



STEVE:  Yay is right - "designed to block attacks that target vulnerabilities in the software."  And Brian goes on to say, "Sandboxing is an established security mechanism that runs the targeted application in a [constrained] confined environment that blocks specific actions by the app, such as installing or deleting files, or modifying system information.  The same technology has been built into the latest versions of Adobe Reader X, and it has been enabled for some time in Google Chrome, which contains its own integrated version of Flash.  But this is the first time sandboxing has been offered in a public version of Flash for Firefox."



And I will note that it has succeeded in Adobe Reader X.  That is, the most recent problems, those exploits which were critical and immediately exploited, Adobe had to scramble around in order to protect the users who had not updated to Reader X or Acrobat.  But they were able to relax over on the Reader X side and only update the problem with their standard quarterly patch cycle because the sandbox that they developed held, and it worked.  So the idea that we're going to get Flash sandboxed for Firefox, as it already is in Chrome, that's just really good news.



So it's in public beta at this point.  And again, we'll keep our eye on it, and I'll certainly let people know.  I imagine what'll happen is it'll simply be, as soon as it comes out of beta, it'll be a version update for Flash, the instance of Flash which is used in Firefox.  And then all Firefox users will just get the benefit from it.  So that's really cool.



LEO:  Yay.



STEVE:  Yay.  We had an interesting breakthrough in storage capacity and speed.  Some of the headlines were a little bit maybe over the top, saying that a new disk storage technology could store 200 gigabits per second.  So...



LEO:  Wait a minute.  200 gigabits per second.



STEVE:  200 gigabits per second.



LEO:  So that's like 20-plus gigabytes a second.  That's crazy.



STEVE:  Yeah.



LEO:  Crazy talk.



STEVE:  That's way fast.



LEO:  Yeah.



STEVE:  Well, so, however, I was curious.  So I drilled down, and I thought our listeners who have an interest in disks and storage technology and so forth, however they have identified it, there's a metal called "gadolinium" whose symbol is Gd.  It's a silvery white "lanthanoid" metal...



LEO:  I think you're making this up now.



STEVE:  ...with an atomic number of 64.  I kid you not, Leo.



LEO:  Gadolinium?



STEVE:  Gadolinium.



LEO:  Gadolinium, all right.



STEVE:  Gadolinium, G-a-d-o-l-i-n-i-u-m.  Gadolinium and iron were combined.  And in yesterday's issue, just published on February 7, yesterday's issue of Nature Communications carried the very technical report titled "Ultrafast heating as a sufficient stimulus for magnetization reversal in a ferrimagnet."  Now, this is an amazing team of scientists in the U.K., Spain, Switzerland, Japan, Ukraine, Russia, and the Netherlands.  Conspicuously missing, unfortunately, is the United States.  So we need to up our science education, I think, in this country.



Anyway, the summary at the top of this article says:  "The question of how, and how fast, magnetization can be reversed is a topic of great practical interest for the manipulation and storage of magnetic information."  In fact, stopping for a second, that's one of the problems with storing data fast on a magnetic surface is it takes time to, under a magnetic influence, to collapse the existing field and reverse that direction of magnetization which is what's necessary for changing what's recorded on the disk.  So there's a clear sort of inertia almost that you have to - the magnetic field is self-reinforcing, and it fights change.



The reason magnetic fields fight change is the reason you can generate electricity with them.  It's that it takes energy to make that change, and you're able to capture that and spit out electricity.  So it's all - and in fact that's what an inductor does.  You have a ferrous rod of some sort, and you wrap wire around it.  And when you run current through it, it builds up a magnetic field, and it resists a change to that flow of current, which is the reason inductors are used in power supplies in order to smooth out the flow of power.  They actually store that energy and resist its change.



So anyway, going on, it says:  "It is generally accepted that magnetization reversal should be driven by a stimulus represented by time-non-invariant vectors such as a magnetic field, spin-polarized electric current, or cross-product of two oscillating electric fields," something of course we all knew.  "However, until now it has been generally assumed that heating alone, not represented as a vector at all, cannot result in a deterministic reversal of magnetization, although it may assist this process.  Here we show numerically and demonstrate experimentally" - they've actually done this in the lab - "a novel mechanism of deterministic magnetization reversal in a ferrimagnet driven by an ultrafast" - and we're talking ultrafast, I'll cover that in a second - "heating of the medium resulting from the absorption of a sub-picosecond laser pulse without the presence of a magnetic field."



Okay.  So turning that a little bit more into English, what these guys have done is they are using an incredibly short pulse of coherent optical radiation from a laser.  The duration is 100 femtoseconds, Leo.  Now...



LEO:  What's a femto?  That's like a billionth?



STEVE:  Okay.  We know that milli is a thousand.  Then we've got micro is a million.  Nano is a billion.  Pico is a trillion.  Femto is next.



LEO:  That's a quadrillion.



STEVE:  So that's one-thousandth - a femto is one thousandth of a pico.  And so this is 100 femtoseconds.  So this is short.  And thus the reason for the somewhat overly dramatic recording speeds because they're saying, well, if you can write a pulse in a femtosecond, then how many of those can you fit on the head of a pin?  Or...



LEO:  Something.



STEVE:  And so forth.  Anyway, one doctor, Dr. Alexey Kimel, from the Institute of Molecules and Materials in Radboud University, was quoted for this, saying, "'For centuries it has been believed that heat can only destroy the magnetic order.  Now we have successfully demonstrated that it can, in fact, be a sufficient stimulus for recording information on a magnetic medium.'  The technique is still a long way from being able to match conventional hard disk drives in terms of cost and ease of manufacturing, due to the use of the laser and specialized materials."  You know, that gadolinium, you've got to come up with a bunch of that.  "But the team is now refining the technique and feels it has scope for full production."



LEO:  So what do we get?



STEVE:  So we get - terabytes are no longer a challenge because we will have femtosomethings.



LEO:  Something or others.  



STEVE:  And these things will suck in data.  So, I mean, you don't even have to bother trying to decide what to record and not.  You just record everything all at once, all the time, and it will never fill up, and you can never do it too fast.



LEO:  Wow.



STEVE:  So basically we're...



LEO:  We're getting there.



STEVE:  ...heading down toward molecular-level recording and playback.



LEO:  Will it look like a solid-state device, kind of, sort of?



STEVE:  Apparently, well, no, it is, I mean...



LEO:  It spins.



STEVE:  Yes.  We see over and over that a disk is an efficient way of presenting repetitive material to a head.  Disks always win out over tapes, for example.  Historically, we keep trying to do tapes, and we always come back to disks.  Remember the eight-tracks that we had in our cars for a while.



LEO:  Yeah, tape is too slow to random access.



STEVE:  Yeah.  And so it would be a disk.  They have to figure out how to read it back out again.  But it can certainly record a phenomenal amount of data.  Basically it hugely increases the storage density on a disk surface and the speed at which it could be laid down.  So that's very cool.



LEO:  Very interesting.  And how far off do you think this is from the...



STEVE:  Oh, well, this is further off than any of these other new solid-state technologies we've been talking about.  And the problem is, of course, cost.  And it's not clear what you need this for.  I mean, it's like, okay.



LEO:  Oh, we'll find something.  Believe me.  That's not going to be the problem.  If you build it, we will use it.



STEVE:  We will fill it.



LEO:  We will fill it.  That's it.  That's the slogan right there.



STEVE:  So I have a one-liner here just to note, for any people who don't know, that the Chrome browser is now available for Ice Cream Sandwich Android.



LEO:  Yeah.  So I've got to find one of them.



STEVE:  Yup.  And is Ice Cream Sandwich just Android v4?



LEO:  Yeah.  So the only phone right now that uses it is the Galaxy Nexus, which I do have, and then - somewhere.  And then some tablets use it.



STEVE:  Do you know whether, is it the Droid 4, I think it is, that Verizon's going to be coming out with?



LEO:  No.  Nothing that is currently announced comes out with Ice Cream Sandwich yet.



STEVE:  No kidding.



LEO:  Except for the Galaxy Nexus, which is a Google phone, so it's got a private place.



STEVE:  Okay.  But will those be...



LEO:  But tablets are coming out with it.



STEVE:  Will they be upgradeable to it?



LEO:  Yes.  Almost anything you buy today will be upgradeable.  Not a lot of what you have from yesterday will be.



STEVE:  Yeah, I don't have anything yesterday, so...



LEO:  Yeah.  But I don't know if that's anything to jump up and down about.  We've been talking about it for a long time.  But it's all WebKit.  So I'm not really sure what the...



STEVE:  Well, what I did read was that, from reviewers who were using it, they were jumping up and down, saying they're not going back to the original browser in Android.



LEO:  Oh, good.  Well, that would be nice, all right.



STEVE:  They said that there was a ton of innovation in this, in the tab handling.  I mean, a lot of it didn't make any sense to me because I don't have existing experience with the current Android browser.  But apparently it's like, why didn't they do this sooner?  And so they've done it now, and that seems like a good thing.  Especially if you'll be able to run ScriptNo on it, which we'll talk about in a second.



In other Chrome and Google news, one of the Google security guys surprised people recently by saying that they're going to remove all SSL revocation checking from Chrome.  Now, I consider that reasonable.  We've talked about, endlessly, SSL certificates and certificate authorities and so forth.  And remember that when we've had these disastrous breaches of certificate authorities that we've covered in the recent past, actually, where a bunch of certs "escaped" or were created without their knowledge, what in fact the browser manufacturers did was build knowledge of the now-revoked certificates into the browser itself.



That's how we found out, actually, what was going on was some sharp-eyed researchers noticed by comparing deltas of source code that, whoa, wait a minute, what are all these certificates that have been added to the browser's own "do not believe these certificates" list?  And in fact, I can't remember now who, because it was Chrome who had this.  Oh, it was Mozilla.  Mozilla got upset because they weren't in the loop and weren't informed of this as quickly as IE and Google were.



But anyway, what we have now is in the certificate which is signed is a URL which goes to a server maintained by the signer of the certificate, which allows a browser to check in real-time to verify that the certificate hasn't been revoked by the authority that signed it.  Remember that certificates have a couple-year, sometimes one, sometimes two, sometimes three, but no longer than three, they have an expiration.  So, I mean, it's an annoyance that certificates expire because it means that those of us who have and maintain certificates are being continually, it feels like, forced to renew our certificates.  One of the nice things about that is that, from the standpoint of the people relying on the validity of those certificates, is that we are forced to renew them, meaning we have to go jump through hoops, reverify our identity, show that we're still around, pass some security checks and so forth, in order to get the certificate renewed.



From the browser's standpoint, if the only mechanism that exists is expiration, then clearly the designers of the system realized there's a time horizon of vulnerability, from the time that a certificate was compromised, if that happened, to the time that that certificate expires.  So the reason we don't want to issue certificates that last a hundred years is then they would never go away.  They would never die.  And if that certificate was ever compromised, then we'd be in trouble.  Essentially what that would mean is that all technology that relied or might be called upon to rely on that certificate would be forced to know it.  That is, it would have to be built into all of our browsers for a hundred years.



So the beauty of the short, multi-year expiration is that, for example, even in the case that I was talking about a second ago, where all those certificates escaped control of the signer of them - that was DigiNotar, you may remember, that whole DigiNotar debacle - they escaped their control, well, all of those certificates, even though they're maliciously created and cannot be trusted, they will absolutely be expiring within a couple years.  So that means that the browsers only need to maintain their internal knowledge never to trust a certificate with this serial number until it otherwise expires.  Because then they wouldn't trust it anyway, and they don't need to keep specific knowledge of that certificate.



So because the designers of this whole system recognized there was still this vulnerability window, they created the notion of a revocation, where the certificate contains a URL pointing back to a server maintained by the signer.  And the browser, if it wants to, in real time, verify the trust, can reach out and query the revocation server to see if this particular certificate that's been signed by that authority and was just received, typically, from a foreign website - that is to say a website somewhere else, not necessarily in a different country - verify that it is not revoked.



Now, there's problems with that.  Several, actually.  One is that this slows down everything.  Any time you use SSL, and the browser's running at maximum security, it's going to, during the initial establishment of a connection, when it receives the SSL certificate from the remote server, before it does anything else, if it's going to honor this level of integrity checking, it must then create a new connection, which also must be unspoofable, so that's got to be SSL, to the URL contained in that certificate, specifically to check and ask if it has been revoked since it was issued and before it has expired.  Well, the problem is revocation servers are not reliable.  They're also not fast.  And if you ever turn your browser into a "check revocation before doing anything else," you will uncheck it before long.



LEO:  Yeah.



STEVE:  Because it's painfully slow.



LEO:  Slow.



STEVE:  And remember that browsers are not doing a single connection to get a page.  They're getting that first page, and that page is littered with other resources that they then have to go and reach out and get.  And if those other resources are not all also SSL, then you get the horrible mixed-content warning, warning you that some of the things your page is trying to get are not secure, even though the page is.  Well, that freaks out users.  And so nobody wants to have their web pages cause that.  Which means all the other connections leaping out of your browser to go get pieces of the page have to also be SSL.  And if they're coming from different servers, all of them have to have their certificates checked for revocation.



And the bigger concern, or an equal concern to performance, is privacy because, now, notice that your system is making a connection to a revocation server, so they know your IP, and they know what certificate you're asking about.  So anyone monitoring those revocation servers knows you by IP, at least, and where you're trying to go.  So that creates privacy concerns.  And it turns out that in the event that a connection is not received from any revocation server, the browsers all fail in the trusting direction.  That is...



LEO:  Well, that's wrong.



STEVE:  Of course it's wrong.  It's ridiculous.  So it doesn't work anyway.



LEO:  Oh, that's the - forget it, then.  Okay, never mind.



STEVE:  They go through all this, and then you still don't get protected because, if they don't answer the phone, it's like, oh, well, it's probably fine.



LEO:  Yeah.  I'm sure it's okay.



STEVE:  Give them their page.



LEO:  Is that just temporary until this is widely adopted?  I mean, is there some reason?



STEVE:  No, Google's taking it out.  No, this has always been there.



LEO:  Oh.  Well, no wonder.



STEVE:  And there is a setting in Firefox, which is off by default, where you can say "do not display pages unless we get affirmative verification of non-revocation."  And it's like, don't turn that on because, I mean, you'll think, what happened?  I mean, it's just - it's ridiculous.  And so the browser, I don't even know what would happen if later on it came back as revoked.  I mean, maybe a new kind of warning comes up.  But we've never seen that before because what happens is, if the browsers are being asked to wait too long, then they just go, oh, well, it's probably fine.  So I salute Google.  I think this is...



LEO:  That must be broken.  It's not - couldn't be anything wrong with the certificate or anything.



STEVE:  Anyway, so what Google said is that they're going to do what they've already done, and they're going to rely on automatic updates.  I mean, that's what Chrome does.  Chrome is already updating itself all the time.  That's the way they handled the DigiNotar problem was they immediately added knowledge of the revoked certificates to the browser, and it just knows not to believe any of those.  And since the certificates die after a couple years, it'll be a constant pruning process.  After the certs die, they can remove them because then the browser won't trust them because the date stamp will say this has been expired.  So I think it's an interesting change.  This is an example of a problem that did not have a good solution.  You need to issue these for a while, and you hope that nothing happens bad in the meantime.



And in fact I had an experience once where, I don't remember now why, but I wanted to reissue a GRC certificate.  This was, like, five or six years ago.  And so VeriSign, who I was using, was happy to let me fix something that was wrong with my cert.  I don't remember now what it was.  And they revoked the one that was only a few days old.  And, ooh, boy, I started getting questions from people saying, hey, why is your certificate revoked?  And it's like, what?  Ooh.  I mean, so somebody was noticing that a certificate was revoked.  And VeriSign had to add it to the certificate revocation list because it was no longer valid, even though it was still me and it was fine, but they had issued a replacement for it for whatever reason.  So it's like, ouch.  There are some consequences to that.  And so I think what Google's doing is a good thing.



A group of industry leaders, including Google, Microsoft, Facebook, LinkedIn, AOL, PayPal, and Yahoo!, among others, have formed an organization and a new spec called DMARC.



LEO:  I like the name.



STEVE:  Good name.  Stands for Domain-based Message Authentication, Reporting, and Conformance.  And the site is DMARC.org.  What this is, is an agreement, finally, about email authentication.  So this is good news.  We've had two standards that we've never covered in the podcast because they've sort of annoyed me, and I've been waiting for something to shake out.  And so it finally has.  And so we'll do a podcast shortly to explain what this is.  We had the SPF, the Sender Policy Framework, and some people sort of went with that.  And then the alternative technology was domain keys, which Google among others famously went with, and that was called DKIM, which stood for DomainKeys Identified Mail.



The idea is, behind both Sender Policy Framework and DKIM, are that it's possible for a generator of email, someone who's going to be doing mailings - and of course all these companies do.  Facebook wants to send email, and LinkedIn and AOL and PayPal and so forth.  And they don't want it to trip over spam filters because one of the consequences of the spam problem we're having to see, and you see this all the time, is people saying, well, we've just sent you email.  If you don't get it, please check your spam folder because we really did send it, and you really do need it.  So it would be nice if there were a way for valid mail to authenticate itself in a way that spammers could not duplicate.



And that's what these technologies provide.  And this DMARC is pulling this together under a single umbrella, essentially.  And DNS, this is another example of a benefit of DNS, why we really need DNS not to be spoofable, is that someone who's sending mail will be able to add some records to DNS such that somebody who is receiving the mail from a given domain can ask the DNS system for the data that's necessary to verify that this mail was actually sent by the person controlling that DNS information.  Since the owner of the domain is hopefully the only one controlling the information that their DNS servers are providing, this provides essentially the necessary crypto information for verifying the sender of email.  So this has been a long time coming.  It's great that it's going to be pulled together under a single umbrella.  And we'll do a podcast before long to explain how it all works, in detail.



LEO:  Good.  And you support SPF.  Somebody's saying that you've had an SPF record on your server for some time.



STEVE:  Yeah, like years, yes.  And it turns out it's very easy to do, not difficult at all.  The domain keys is a cool technology that I want to add.  And I think it makes sense to do all of that.



LEO:  Great.



STEVE:  Okay.  Now.  The webcam nightmare of all time.



LEO:  Quick, give me the search engine.  I want to find it before people realize this is going on.



STEVE:  Okay.  So a random hacker who is pretty good at his craft owned a TRENDnet webcam.  And as are all these things, there's going to be Linux inside somewhere, and that means there's a file system, because this thing's got a little web server in it.  And so it's remotely accessible over the web.  You can log into it with your browser, and it brings up a little configuration page, much like one of our standard Internet routers does.  And you give it a username and password because of course you don't want everyone able to log into your webcam.  And you can put it on the 'Net, or you can map port 80 through in order for you to access this remotely.



And so when you're out traveling around, and you want to check on whatever the camera is aimed at, you browse to your IP address.  And when you attempt to connect, you get challenged by a standard, you must provide a username and password authentication challenge.  And when you provide that, oh, look, there's a window showing you what your webcam is seeing in real time.



So this guy just opens up the file system, and there are tools now for parsing firmware-based file systems, lots of tools actually, that router hackers use in order to do things like create the Tomato firmware and so forth.  They want to pull apart what Cisco has provided, see what's there, understand how it goes together, and then add their own functionality and replace things.  And then you can even rebuild these file systems and then reflash them so that the router doesn't know any different.



So this hacker looks at the file system, sees some of the files, and notices in the root of the file system, or I guess it's under a directory called "anony," short for anonymous, anony.  He sees a CGI script, mjpg.cgi.  And so he, playing with his camera, he just calls it up.  He puts in the URL of his IP, 192.168.1.17 in this case, /anony/mjpg.cgi.  And not surprisingly, lo and behold, he's looking at, in real time, what his webcam is showing him.



So just sort of for grins, he thinks, I mean, it occurs to him, wait a minute.  I just brought this up, and I wasn't challenged for a username.  Because normally when you go to a web server, you put in Google.com/.  What your browser is doing is asking for the root, the root URL, the root path to the server.  So that would be 192.168.1.17.  So if you just put that in, you're prompted for your username and password.  And that's what anyone trying to get to it, either from inside the network or out on the Internet, would have to do.  But when you put in the exact path to this CGI script, it didn't ask him.  Turns out it never asks.  Even if you're on the Internet.  It's no different.  The web server in the camera doesn't know where you're coming from and doesn't care.



So it turns out that the Internet is filled with - the manufacturers said, well, probably not more than 50,000 webcams where if, instead of just going to the IP, you go to the IP/anony/mjpg.cgi, you don't have to authenticate.  And it shows you right then...



LEO:  That's convenient.



STEVE:  Yeah, it's so handy.  It's much easier to just create a shortcut on your browser.  So then our illustrious hacker uses a really clever new search engine that's been around for almost two years.  They're celebrating their two-year anniversary a little prematurely because the domain name was registered 10 days from today, two years ago, February 18th, 2010.  There's a cyberpunk online realtime game called System Shock.



LEO:  Yes.



STEVE:  And System Shock 2.



LEO:  Yeah, good game.



STEVE:  Yes.  The entity, the automated entity in System Shock is known as Shodan.  That's an acronym for Sentient Hyper-Optimized Data Access Network.  There is now a web server, or a website, called ShodanHQ.com.  So Leo, go to www.shodanhq.com.



LEO:  And everybody else don't.  Okay, go ahead.  Because I'm sure...



STEVE:  Oh, they will.



LEO:  Oh, too bad.  We're going to bring it right down, I'm sure.



STEVE:  Okay.  So now, Leo, you should see a little search box.



LEO:  I will as soon as everybody stops going there.



STEVE:  Oh.  You want to put in - just put in something that I...



LEO:  It got real slow, real fast.



STEVE:  Oh.  Sorry about that.  Put in what - I have something in my own web server headers, GRC/IIS.



LEO:  Okay.  Give me a moment, it's still coming up.  You know what, Steve, you're just going to have to describe it because it's not going to come up.



STEVE:  Okay.  You can do it after a while.



LEO:  We broke - and everybody at Shodan is going, what the hell?



STEVE:  Yeah.



LEO:  What's all this traffic?



STEVE:  Okay.  So here's what Shodan is.  Shodan is a hacker's dream come true.



LEO:  Oh, neat.



STEVE:  Yes, it is neat.  This thing is a search engine for all of the connection headers that servers all over the Internet generate.  When you connect to a web server, you get back its "Hi there, this is what I am, this is the type of web server I am, here's what I know."  If it wants you to provide authentication, it'll challenge you and ask you for the so-called "realm" with a WWW-Authenticate header.  When you connect to an email server, it responds with its identity, often its version number and so forth.  Same thing with telnet servers that respond to a connection with a response.  Most servers on the Internet, when you connect to them - because once upon a time you would, like, telnet to something, and so you would just give it the IP.  And as you know, Leo, it would respond with a couple lines of greeting, saying this is where you have connected to, and often the make, model, version of the server software that you're using.



This ShodanHQ.com site has indexed all of that.  As a consequence, it has indexed all of the TRENDnet webcams that are on the Internet.  And if you search for simply "netcam," it is a case-insensitive search.  So you could put in capital "N" Netcam.  There are other netcams that use the basic realm "netcam."  The lowercase netcam are the TRENDnet netcams.  You will then find 2,734 of these in the U.S., 1,309 in Germany, 961 in France, 717 in Hong Kong, 620 in Mexico.  Just shy of 10,000 IP addresses of TRENDnet webcams, any of which you can log onto and see what the webcam is seeing by putting in the IP address/anony/mjpg.cgi.  So this is a...



LEO:  This is so handy.



STEVE:  This is a disaster.  Oh, goodness.  So ShodanHQ is kind of cool.  If you put in GRC/IIS as your search, you'll see six IPs of GRC web servers that I run that respond with that as part of their header.  And you can put in Cisco stuff or random, I mean, Linksys stuff, I mean, anything.  This thing is just - it's really a very cool search engine for anything that responds when you connect.  I think you can only do web unless you subscribe.  But after you get a subscription, then you can do things like telnet searches to search for telnet servers and get up to all kinds of mischief.



So if anybody happens to have a TRENDnet webcam, or you know anybody who does, you want to make sure, well, actually you just - you can't use it.  This is the latest version of firmware, by the way.  The company, TRENDnet, is scampering around, as you may imagine.  The problem is very few people register their TRENDnet webcams.  So they don't have the email addresses of the owners of these, and there's no way to notify them by their IP address, which now the world has since this ShodanHQ.com search system is able to find all of the TRENDnet webcams, since they're just little servers there that say "netcam" in their headers when you attempt to connect to them.  Oh, goodness.



Anyway, so there will be firmware updates.  If you do have TRENDnet webcams, or you know somebody who does, take them off the 'Net right now until you update them and make sure that they've solved this problem.  And, you know, whoops.  Very clever, interesting little hack with some serious privacy consequences.  Anybody who's aiming their camera at something sensitive and hoping or assuming that their authentication is providing them with enough security, it's not the case.  It's not good.  But I do have something that's good.



LEO:  Yes.



STEVE:  I got email on the 5th, which was what, three days ago, from a Craig Thompson, who sent email to my sales email address, and Sue bounced it to me, saying "SpinRite 6 saves client's files."  And he said, " again."  And he said, "While I've been using SpinRite for several versions now" - which means a long time because we know I don't do versions often - "and have managed to recover files from seemingly dead drives in the past.  This weekend's experience was by far the best.  I'm a small, one-man computer business, so quality affordable utilities are a must for me, and SpinRite has paid for itself over and over again.



"A client dropped off an external hard drive that had died.  She was crazed, as she stored, instead of backed up, numerous important files to this drive.  Losing it all would have been devastating.  After trying a number of other quick fixes, none of which worked, including a relatively simple Level 2 SpinRite scan, I finally opted, as a last resort, to run it up to an 18-hour Level 3 scan.  After running all day and night, I reconnected the drive to my system; and, voila, all of the folders and files suddenly reappeared.



"I'm copying off now to return her files to her.  I'm ecstatic that I was able to recover this data for her, and she's ecstatic that she didn't lose everything.  In fact, she didn't lose anything, all due to the continually outstanding utility, SpinRite.  While the cost of this app may seem a little steep, for small-time people like me it's well worth the investment, and my clients couldn't agree more, given the results.  Thanks very much, Steve and everyone else at GRC, for such an outstanding tool.  Very sincerely yours, Craig Thompson."



LEO:  Happy, happy day.



STEVE:  So thank you, Craig, yes.



LEO:  So I don't have an ad, so if you want we can launch right into ScriptNo.



STEVE:  I want to tell everybody about ScriptNo, indeed.  It is as easy to install as any Chrome extension can be.  You just search for ScriptNo.  In fact, if you search Google for ScriptNo, you'll find a couple references to it and can locate it quickly.  Andrew Young is ScriptNo's author, who is a recent honors graduate with a Bachelor of Commerce in Business and Technology Management.  His own site is Andryou, A-N-D-R, instead of E-W he does Y-O-U.  So Andryou.com, which is kind of fun because his last name is Young, and so that's the first four letters of his first name, the first three letters of his last name that make Andryou spelled differently.  So, and that's his Twitter handle, also.



So as I mentioned before, he was originally using Firefox, Opera, and Chrome.  And Firefox 4 drove him nuts, as it drove me nuts, and as many people have reported because of its horrendous memory leaks.  And most recent reports are that, even though they're now on Firefox 27 - I'm kidding, of course.  It's, I think...



LEO:  You know I believed you for a second?



STEVE:  I know.



LEO:  Oh, yeah.  Really.  27, wow, that's...



STEVE:  They're on 10 or something.



LEO:  They'll be at 27 soon, don't worry.



STEVE:  Well, 12 is projected for April, so, yeah.  They still - this really seems to be causing a problem.  And I love Firefox.  I'm still using it as my primary browser.  One of the things that has kept me from moving to Chrome is that I just didn't feel like I had the instrumentation that I liked, that I've gotten used to thanks to NoScript running over on Firefox.  One of the reasons I don't use Chrome more is I sort of only use it when something doesn't seem to be working right with Firefox, or, I don't know, I want more compatibility.  Sometimes I've had problems playing videos in Firefox for whatever reason, and so I'll just jump over to Chrome, and it always works in Chrome.



So I was missing this feeling of knowing what's going on with a web page.  If a web page is having problems, I can click on the little icon on my toolbar under Firefox and see an enumeration of all the other domains which are trying to provide stuff to this page, and kind of look at them and go, eh, I don't think so.  Or say, yeah, okay.  Or trust them briefly, trust them just for now and so forth.  Well, there was something called NotScript which I got excited about some time ago, until I tried it, and I immediately removed it.  It just - it was low function, didn't do what I wanted.  It wasn't a replacement for NoScript.



Well, we have one now called ScriptNo for Chrome.  And it's under continuous development.  I suggested a couple things in my email conversation just yesterday with Andrew, one being that he blocks, by default, he blocks the <NOSCRIPT> tag, which is the text which shows when scripting is disabled.  And it's very handy.  It's one of the ways that websites can say, and I'm sure people who use NoScript over on Firefox have seen this often, which is a little bar will show or something will happen saying this site requires scripting for its full function.



And of course as my own work has moved more toward scripting, like with Off The Grid, which is local JavaScript, and the Password Haystacks page, if you try to bring up the Password Haystacks page with scripting disabled, I give you a nice banner explanation of why just GRC in general doesn't need scripting, but this page specifically is a scripted page because of the features that it offers.  So it's not like I'm just obviously forcing people into using scripting all the time.  I haven't gotten to that level yet.  But certain pages that have a use for scripting need it.



So anyway, the point is that he agreed.  He says, oh, he says, yeah, in the next release I'll turn that off by default.  And that seems like a good thing.  But in general the add-on is enabled by default.  It's set to block unless you permit.  So that's the technology that we learned works with firewalls and works with security is by default you say no, and then you selectively enable.  He's got essentially all the features that you need in a script blocker, meaning that you can do selective blocking and unblocking of specific domains.  You get the enumeration of all the things that the page is trying to do to you.  You can temporarily enable, so that you're not filling up your whitelist with an endless list of junk, like sites you had to enable in order to use it, but you're never going to go back to it, so why keep it around?  So that's one of the things, I mean, I'm always, over on Firefox, I'm using the "temporarily allow scripting" on sites that I know I'm just there for some one-off purpose.  Why add that to my permanent whitelist?  So he has that.



He also does something, for those of us who really care, which Firefox NoScript doesn't, which is in the enumeration of the domains that are involved in the page, the main page you're going to, it'll show you how many things, how many assets of what sort that domain is trying to load.  And if you hover your mouse over the domain name, up pops a tool tip showing you the asset type and the URL, which is lots of nice information.  Again, it helps you to go a little bit further in understanding, well, okay, what is it that this domain is trying to load?  Is it just an image?  Or is it JavaScript?  You can't tell that over on Firefox with NoScript.  With ScriptNo, it's easy to see that.



And he has another very cool thing that I like is he has a reputation button that is also there.  You're able to turn it off if you don't want to run with it on.  He calls it "ratings."  And it takes you over to the social networking Web Of Trust site automatically for the domain that you're asking for a rating on.  So if you see something, and I have, just in the time that I've been using it, something-or-other.fmqodt.com, it's like, well, what the heck is that?  And so you can right then just click on "Rating," and you'll quickly see, and in the case of the thing that I clicked on that was an acronym like that, it came up red screen, and it said "This is a mistrusted site that is not liked by people."  And of course then I clicked on GRC.com because I was curious what it said, and it's like all green and happiness there.  So...



LEO:  Yay.



STEVE:  I'm sure the same thing would happen with TWiT.  So you can then...



LEO:  Well, I don't know about that.  I wouldn't go too crazy.



STEVE:  So you can block scripts, objects, embedded objects, iFrames, frames, applets, audio, video, NoScript tags, and images.  Images are allowed by default, and NoScript tags will soon be allowed by default.  As I said, the rest by default are not allowed for things that are blocked.  But then when you allow them - he also does a nice thing, for example, sites that use lots of subdomains - like Google has, like, subdomain du jour.  It's one of the reasons I was forced over on Firefox to stop using Certificate Patrol was that Google's got different certificates and seems to just generate subdomains on the fly.  So it'll just be randomstuff.google.com.  And Certificate Patrol, it says it had a wildcard system, but I could never get it to work, where it was, like, trust everything that is underneath Google.



Well, ScriptNo does that, so you're able to Allow, which is the option for allow just exactly this domain, or you can say Trust, which says essentially allow everything under the root domain.  So anything.grc.com, not just www, but it would also allow then media.grc.com and other, for example, in the case of GRC, other of my subdomains.  And again, that means you don't have to have individual whitelist listings for every one, and you're not having to constantly be permitting other instances of subdomains.  So that's a very nice feature.



He also automatically pulls, there's an option under Privacy Settings for blocking unwanted content, as he calls it.  And he pulls from a bunch of known ad and malware domains gathered from the MVPS HOSTS; hpHOSTS, which are ad and tracking servers; Pete Lowe's HOSTS Project; MalwareDomainList.com; and the DNS-BH, which is a malware domain block list.  So his utility is also pulling from a bunch of lists of known problems.  And he absolutely keeps those blocks blocked for you.  Also he has an option that I also appreciated - he calls it "Antisocial Mode" - which is disabled by default, but he recommends it, and I like it.  It removes all of those social widgets and buttons, even if the site is whitelisted.  So things like the Facebook Like and the Twitter and the Google+ buttons which are appearing more and more.  I mean, those are just not things that I use, and so you can turn that Antisocial Mode on and be antisocial.  And you won't be seeing all of that stuff.



And of course remember that all the things that are blocked are things that never have to be loaded.  One of the reasons that it's been difficult for add-ons to be created for Chrome is that Google has been only slowly creeping forward the API that allowed more powerful add-ons, or extensions as Google calls them, to be added to the browser.  Part of the sandboxing approach has made it difficult because individual tabs or pages run in their own processes, so you need some sort of cross-process reach that's much more difficult to do with that process per page model than it is in Firefox, where it's just all lumped in a single process from an actual standpoint of getting access to the page contents.  And Google also - the Chrome API still has some things which it doesn't allow.



So an app like ScriptNo and through Andrew's research, he's able to block most things, but there are some things that cannot today be blocked.  So he has to wait until the page comes in and then remove them dynamically from the page.  That's technology over time that's going to evolve.  And in fact he mentioned last night that there are two new APIs which he can't wait to have access to which are currently in beta for Chrome.  And as soon as they stabilize and go mainstream, he'll be able to use those in order to evolve ScriptNo further.



But bottom line is - oh, he also removes web bugs.  That's an option that's enabled by default, and you can turn it off.  And he says he just removes invisible third-party elements, things that are there just for tracking.  And it's interesting because, as I've poked around the 'Net, and this thing has identified web bugs for me, I've hovered my mouse over, and I can see the URL.  It's like, oh, sure enough, look where that's going off to.  Somebody on that page deliberately planted something just for the purpose of tracking me.



Oh, and speaking of which, another option is removing the referrer tail from non-trusted sites.  So if you click on a link that takes you to a site that ScriptNo is not trusting, I think it replaces it with something like "no referrer," so it does put a little tag in just to say I've removed something.  But if it didn't do that, it would be sending that site that you don't trust, as we know, the entire URL appearing up in the browser's title of the page that you're coming from.  So that's a nice little privacy feature.



And of course he also allows you to export all of the settings that you have customized over time and import them so that you're able to move them to a different instance of Chrome running on a different machine, and the same thing with your whitelist and blacklist settings.  So essentially we have now on Chrome a state-of-the-art, very nice-looking, pleasant to use, script controller on a par with what we've had for NoScript.  And I'm really pleased, and I wanted to make sure all of our listeners knew because I know a lot of them are going to enjoy this level of control.



And if you like it, if you get a chance, drop Andrew a couple bucks.  He's got a donation button, a little heart icon on his pages.  And he says, "Support Andrew's Existence and Sustenance."  And in fact that's how we struck up a dialogue was I sent some money to him because I definitely want him to know that this thing matters.  And in fact supporting him would be one way of saying yes, yes, yes, please keep working on this, this is important.  We need this for Chrome.  It really is how I feel.



LEO:  Neat.  I just downloaded and installed it.



STEVE:  Cool.



LEO:  Yeah.



STEVE:  Yeah, it's pretty and nice and works.  And I'm sure it will be getting features.  And he's very responsive to feedback, too.  So if you see things or have ideas for it, let him know.



LEO:  Yeah.  Looks good.  Looks really good, yeah.  Going to be a nice thing to have.



STEVE:  I know you're not a big script blocker.



LEO:  Well, because it just screws everything up.



STEVE:  And I understand that.  But believe me, I know how many people are going to be delighted that we have this capability for when you want it for Chrome.



LEO:  Yeah.  I'm just looking at all my sites.  Of course there's lots of little things on there because we use a lot of JavaScript and things like that, Flash.  Turn it on.  You can trust our sites.



STEVE:  It is neat, this nice little auditing tool, too.



LEO:  It is, it is.



STEVE:  You can really see all the stuff going on.



LEO:  It's great, yeah.  I'm just looking at, like, for instance, I thought Facebook was bad.  Then I went to my site.  And it's quite a long list of things.  APIs, there's Google, there's Facebook, there's Widgets Plus, there's Twitter, there's QuantServe, there's widgets...



STEVE:  It adds up, doesn't it, Leo.



LEO:  Yeah.  Well, these are all the little doohickeys I'm running on the - 15 of them.  Oh, boy.  There were only two on the Facebook site.  Trust, trust, trust.  Now, if I click Trust, it trusts it forever; right?  It's not just for now?



STEVE:  Correct.



LEO:  Yeah.  But if I say Allow, that's just a temporary one.



STEVE:  No, there's a Temp button, if you look down lower.  Allow is just the exact URL, the exact domain that you're at.  For example, live.twit.tv is different than TWiT.tv.  If you do Allow, it only allows that one explicit domain.  So you want to do Trust because you trust everything that is TWiT.tv.



LEO:  Maybe I shouldn't.  Who knows what they've been doing?  Very good stuff.  It's free, but of course support the author.  As always, it's always a good idea.



STEVE:  Yeah, really do.  I sent him a hundred dollars, which sort of knocked him over.



LEO:  Wow, good on you.



STEVE:  But I was able to do that because our listeners have supported me through SpinRite over time.  So I don't expect everyone to do that at all.  I thank everyone for their support of me and SpinRite.  So I'm happy to pass that forward.



LEO:  Pay it on.



STEVE:  Yup.



LEO:  Steve Gibson is at GRC.com.  That's where you'll find SpinRite, the world's best hard drive maintenance and recovery utility, and all his freebies, as well, including Perfect Paper Passwords and all that fun stuff.  He also puts 16Kb versions of the audio up there for people who really don't have much bandwidth, but want to listen.  We have transcripts there, as well.  GRC.com.  Next week we have a Q&A, so go there to ask questions.  Don't email them to Steve.  There's a feedback form.  It's GRC.com.



STEVE:  Much better because then it's fun to know where people are, and email doesn't let us know where you are.  So if you use the feedback form, you can say this is who I am, and where I am, and what accent you would like Leo to use for reading your question.



LEO:  Yes.  We are taking requests.  GRC.com/feedback for that form.  Steve will be back next week with a Q&A.  You can watch us do this live, 11:00 a.m. Pacific time, 2:00 p.m. Eastern time, at TWiT.tv.  It's 1900 UTC.  But if you miss it, we've got audio and video of the show.  Watch it in the format you prefer.  TWiT.tv has them; GRC.com as well.  Thank you, Steve.  We'll see you next week.



STEVE:  Thanks, Leo.



LEO:  On Security Now!.



Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




GIBSON RESEARCH CORPORATION	http://www.GRC.com/



SERIES:		Security Now!

EPISODE:	#340

DATE:		February 16, 2012

TITLE:		Listener Feedback #137

SPEAKERS:	Steve Gibson & Leo Laporte

SOURCE FILE:	http://media.GRC.com/sn/SN-340.mp3

FILE ARCHIVE:	http://www.GRC.com/securitynow.htm 



DESCRIPTION:  Steve and Leo discuss the week's major security events and discuss questions and comments from listeners of previous episodes.  They tie up loose ends, explore a wide range of topics that are too small to fill their own episode, clarify any confusion from previous installments, and present real world 'application notes' for any of the security technologies and issues we have previously discussed.



SHOW TEASE:  It's time for Security Now!.  This is a fun one.  We do this every other episode.  You get to ask questions.  Steve answers.  He'll explain all about the SSL security myth and more.  It's coming up next on Security Now!.



LEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 340, recorded February 15th, 2012:  Your questions, Steve's answers, #137.



It's time for Security Now!.  Get ready to fasten your seatbelts and protect yourself on the Information Superhighway with this man, our Explainer in Chief, Mr. Steven T. Gibson.



STEVE GIBSON:  Explainer in Chief.



LEO:  Explainer in Chief.  Steve's the man in charge at GRC.com, the creator of SpinRite, the world's finest hard drive maintenance utility, and many other free security utilities, and joins us every week to talk about all these issues.  It's a Q&A episode.  Is that right, Steve?



STEVE:  It's a Q&A episode and we have just a bunch, a flurry - a flurry of news has landed on us this last week, a bunch of it recently, some really interesting things.  A bunch of people have picked up on a report from a paper that was released in advance of the conference, which is not till August.  The paper was released because the researchers felt it was too important for them to sit on, which is an analysis of the public and private key system which we've spoken of many times, I mean, I don't know if there's an episode of Security Now! where we don't talk about SSL and this.  It turns out that the random number generators which have been used to generate these, and we depend upon their randomness, eh, they're not so random.



LEO:  It's pseudorandom.



STEVE:  It's not good.  So anyway, there's been actually a lot of misinformation about this, even from some well-known tech writers who have said that there are flaws with the SSL system.  Well, there have been some, but this is not one.  This is a particular implementation problem.  And we often discuss these fine points, like what does that actually mean relative to there being a problem with the system, to have a problem with its implementation.  Of course those are two very different things from a security standpoint.



So, lots of neat news.  We did have a second Tuesday just passed us.  Microsoft did their typical batch of updates.  These are important.  They did nine different updates which closed 21 security holes.  I noticed - I hesitated there because I had a typo in my own notes.  I said "Nice updates closing 21 security holes" instead of "Nine."  Four of them are remote code execution, critical rating.  So no effort required on the part of the user to get their systems compromised.  Oh, and Microsoft is thinking that they have that weird new term they use for - it's the "exploitability index."  And so they're saying that 12, about half of these, are going to be readily exploitable.  So this is not something you want to sit on.  Here we're recording this the day after these all came out, yesterday.  So this is an update your machines and reboot them, as will probably be required.  And you can feel at least a little bit safer.



Adobe did a critical Shockwave update.  We don't run across Shockwave that much, and that's good news because it's pretty much an obsolete technology.  I think every time I say that - oh, no, I guess I'm talking - I was going to say, every time I say something, Elaine reminds me that she's still stuck using it, but it's not Shockwave.  (Elaine our illustrious transcriber, who actually we'll be referring to at the very end of the show because we have a bonus unintended consequence of something that happened which I got a kick out of last week that I'll share with our audience.)  Anyway, but she's using that horrible, obsolete audio format - oh, RealMedia.  She uses RealMedia for some reason to do her podcast transcribing.  I think her player, maybe it, like, runs with footswitches or something that she needs to have.



But anyway, in this case Shockwave, if you don't need it, you want to get rid of it.  You can go to Adobe.com/shockwave/welcome, and it will tell you if it's installed.  And if it's not installed, that's good news.  Don't install it.  If it is, then you definitely want to update it because they fixed some problems.  And unfortunately this is the kind of thing where, if it's installed and not being blocked, for example, by NoScript on Firefox or ScriptNo over on Chrome - and blocking is good, of course.  If it's not blocked, then this is the kind of thing where drive-by websites are able to infect you, or targeted email, where you click the link, and that is able to load some funky Shockwave file that leverages a known exploitable problem in order to execute code on your computer.



And later in this podcast we talk about - we answer a question from someone who just can't seem to keep from getting his family infected all the time, or they're infecting themselves.  And he's like, what can I do about this?  So...



LEO:  I can't help myself.



STEVE:  Yeah, exactly.



LEO:  Tech news.



STEVE:  So, okay.  Top of the list here is, quote, many, many websites have mis-covered the story.  It's a complicated story, so I don't fault them.  But for our listeners, who are equally technical and able to understand these subtle differences, it's important that we not throw the baby out with the bathwater.  It has been claimed that flaws were found in SSL's public key encryption, which did not happen.  What happened, however, was really interesting, which is that, through an analysis of the actual keys, the public keys in use on the Internet, a bunch of researchers discovered that they were not as random as we all assumed they would be.



LEO:  Well, that's kind of interesting.



STEVE:  Oh, it's really, oh, no, this is really interesting because there are some consequences to this.  Okay.  So, and I love how we're always talking about things in the show that end up tying into things that happen afterwards because just last week, Leo, you and I were talking about the scarcity or lack thereof of prime numbers.



LEO:  Right.



STEVE:  And how, as we know, the whole public key technology, or at least the RSA style - because there are different kinds of public key.  There's Diffie-Hellman and DSA and Elliptic Curve and other ways of having asymmetric keys, where the keys are different, one you encrypt with and one you decrypt with, as opposed to symmetric keys, where you use one for both.



Okay.  So the RSA style, it relies on the fact that it is very difficult to factor numbers, that is, really, really, really big numbers.  They're just, no matter how much time has been spent and how much smartage has been aimed at it...



LEO:  Smartage?



STEVE:  Smartage, yeah.



LEO:  That's a good word.  I'm using that from now on.



STEVE:  I've been drinking coffee since 5:00 a.m., Leo.  No matter how much smartage is aimed at the problem, we've had no breakthroughs, no serious breakthroughs in factorization.  Now, we're getting better at it.  We're creeping forward.  For example, 512-bit numbers have been factored.  768-bit numbers have been factored.  And it's expected that we're probably not too far away from 1024-bit numbers, which is why, in general, there's some pressure moving the industry towards 2048-bit numbers, doubling again the size of these numbers, which we're going to be asked to factor.



But the point is that we take two large primes and multiply them together in order to get the product of those primes.  And that's the operation which is not easily reversible, by which I mean we don't know how to reverse that.  So we rely upon the unknowability of both of the primes in order for that to be the secret.  So the secret part is what were those two primes.  They're multiplied together, and that's what's used to produce the public key of our whole public key crypto system.  That's what any web server sends to us when it wants to establish an SSL connection.  It sends us its public key.  And we're able then to use that to verify that it was signed by someone we trust, so we trust the certificate, and we use the public key in order to encrypt something that we send back to the server.  And only the server that has the matching private keys, which are those two prime numbers, essentially, is able to decrypt what we sent.



And that's how we solve the problem of the man in the middle getting involved.  The man in the middle saw the public key go by, but has no way of intercepting what we're sending back, which is encrypted using that public key.  Only the private key can decrypt it.  So here's the problem.  If the original random primes are not very random, then the whole system sort of falls apart.  I mean, the technology, the concept, everything we're fundamentally relying on in terms of the mechanics are fine.  But the assumption that nobody could guess the primes, if that isn't valid, if they're not really good randomly chosen primes, then something, a requirement for security falters.



And what the researchers found by looking at many, many millions of public keys - remember, that's what the servers are sending.  So any time you're hooking up to a web server, part of that SSL negotiation is here's my public key.  Use this to send me stuff that nobody else can decrypt.  That's how it works.  So all the SSL connections, all the HTTPS connections everywhere are proudly broadcasting their public key.  And when you look in your web browser, if you have an HTTPS connection, when you check the security certificate, one of the things listed there proudly is the public key.  That's out there in the open.



LEO:  Well, I use, yeah, I use PGP to sign my email.  And the beauty of using PGP to sign your email is I literally can offer for download my public key.  Anybody can have it.  You want it, I'll give it to you.  It doesn't help you in any way in decrypting my email.  It only lets you encrypt to me.



STEVE:  Now, what they found was an unexpectedly large number of collisions.  Essentially, they found instances, and with no apparent common affiliations, that is, it wasn't like all the bad keys came from one particular certificate authority, one CA was issuing these.  Nor was there a correlation over time.  They looked at the issuing dates and the expiration dates.  So it's not like they were bad and they were getting better, or they were good and they got worse.  There just - there wasn't a correlation, a variation over time or source.  But there were collisions in the prime numbers that were used to generate the public keys.



And what this means is, the reason this is a problem is - take GRC.  Now it happens I've got a 2048 public key because I recently, as we all know, switched to an extended validation EV certificate when I moved from VeriSign over to DigiCert.  And so I'm in better shape.  Largely the collisions are occurring in the larger population of 1024-bit keys.  But so you take a website, a webmaster who knows what their public key is.  Well, it turns out that there is a much greater chance than we expected of being able to find another website out there somewhere with the same public key.  No one ever looked for them before.  It turns out there's collisions.  And so the problem is, if I were to find another website with the same public key as mine, I'd know their private key.



LEO:  Oh, that's not good.



STEVE:  No.



LEO:  That's not good.



STEVE:  No.  So that's what this means.



LEO:  I wonder if the same holds true for PGP, I mean, because...



STEVE:  Yes.





LEO:  And I'll you why this is an issue, because the PGP key servers hold millions of people's public keys.  What you do is you upload your public key to this directory.



STEVE:  Yes.



LEO:  So it would be trivial to download and search it.



STEVE:  Yes.  And their paper, I don't think I tweeted this recently...



LEO:  It's at eprint.iacr.org.



STEVE:  /2012/064.pdf.



LEO:  Oh, that's easy.



STEVE:  Yeah.



LEO:  Well, it's easier than a 16-bit prime.



STEVE:  Yeah, it actually is pretty easy.  Anyway, their paper, they address PGP explicitly because, as you say, Leo, there is such a huge database of existing keys.  And there were PGP collisions, as well.



LEO:  Oy.  Oy.



STEVE:  Yeah.  So, I mean, this isn't the end of the world.  What they found...



LEO:  [Sputtering]



STEVE:  Yeah.  What they found was...



LEO:  I'm scared.  But I think I use a passphrase to unlock my PGP.  Wouldn't they need the passphrase, even if they had the private key?



STEVE:  I haven't looked at it closely enough to say.



LEO:  Oh, boy.



STEVE:  What I can tell you is that two out of every thousand...



LEO:  Yikes.



STEVE:  I know.



LEO:  That's too high.



STEVE:  That's too high.  Two out of every thousand.  So that means it's 0.2 percent are insecure.



LEO:  That's way too high.  So all you'd have to find is a match in the PGP database.



STEVE:  Yup, and then you would know that person's private key and be able to spoof...



LEO:  Ah, but, you know - so you generate - okay.  So I'll generate a key.  I know the private, and I know the public.  Now I search for a match for that public key.  And let's say there's a million keys in the database, which there probably are, that means, what, I have several thousand private keys that I can - messages I...



STEVE:  No, no, no.



LEO:  No?



STEVE:  No.  This also - remember that we also had the birthday attack phenomenon going on.



LEO:  Yes.



STEVE:  Remember that the birthday attack is not my birthday collides with one other person's, but in a population, somebody's...



LEO:  Yes, got it.



STEVE:  ...two birthdays collide.



LEO:  So it isn't the case that, if I just generate a key, that 0.02 percent or whatever it is will match my key.



STEVE:  Right.



LEO:  Oh, then I'm not so worried.



STEVE:  Right.  It's that there is - but between...



LEO:  There'll be a collision, yeah.



STEVE:  ...all of these 7 million websites that they analyzed, or rather 7 million public keys, they found a statistical anomaly.  There should never have been that many collisions.  And what that told them was, and here we come back to it, what that told them was the random number generators which are being used to find the primes, are not being seeded correctly.  They're not being seeded with sufficient entropy.  So, I mean, looking at the technology, they don't think that the random number generators are bad.  But remember, we've talked about this extensively, it is very difficult to get really random data out of computers because they're all about not being random.  They're just math boxes.  Every time you put in the same stuff, you're going to get exactly the same stuff out.  And so lots of work has been done in trying to make these things random.



And I think what we're seeing is that certificate authorities ought to be one place where huge amounts of money is spent on generating much higher quality sources of randomness.  They shouldn't be relying on moving someone's mouse around in a circle for a while, which is what TrueCrypt tells us to do in order to get sufficient randomness for our hard drive key.  I mean, these guys ought to be listening to Geiger tube sparks and watching lava lamps move and put video cameras of mice in mazes, I mean, everything they could think of at the same time to suck in...



LEO:  Entropy.



STEVE:  ...as much entropy as they can find.  And then aim a camera at static on an old-style TV with its antenna disconnected and digitize that.  I mean, just everything you can think of.  This is where we want money spent on generating the highest quality random numbers possible.  So what happened is the researchers notified the sources of the archives, and they have been taken offline because they would be too useful for bad guys.  And where possible, they have notified the owners.  Where they were able to backtrack, they've notified the owners of the worst, the least secure keys, and because certificates can have things like email addresses in them.  They don't have to, but they can.  So they've tried to be responsible.  They've also not issued the more - I'm tempted to make up another word now.



LEO:  Smartage?  More smartage?



STEVE:  The more disclosable - they have two versions of their paper.  They've got a tamed-down one, which is the only one that's out today, where they explain this; but they also say, uh, there's more that we're not saying yet because we need to gently introduce this problem to the industry so that there's some opportunity for people to fix this problem.  And presumably they've got a more in-depth paper, we know they do, where they explain in more detail what they've done.  The problem is, for the really smart bad guys who just get off on reverse engineering these tidbits of information, they've really got all they need.



So anyway, this isn't the end of the world.  The sky's not falling.  I don't even really think that there's anything individual website operators need to do.  They say in their paper that they considered producing a service where website owners could submit their certificates and check them to see if they're vulnerable or not.  But the problem is there's no way to prevent that from being abused because then the bad guys would collect public keys, just harvest them from the 'Net and run them through and see whether they're vulnerable or not.



So I'm glad that I moved up to 2048-bit certificates recently.  2048-bit certs are not invulnerable, but there's vastly lower collision incidence because there aren't that many of them yet relative to the 1024-bit keys, which are more vulnerable just because of, like I said, the birthday attack problem.  There are just so many more opportunities for two of them to collide.



LEO:  I do have to reiterate what I said before, and I was really glad you clarified this.  And maybe it's difficult to understand if you're not a math wiz.  But there's a significant difference between me generating a number and two out of a thousand other keys matching, and two out of a random thousand matching.



STEVE:  Correct.



LEO:  Significant difference.  So much so that it's not probably a cause for concern.  It doesn't mean that a bad guy could then generate a PGP key or an SSL certificate and then look in the database for matches and find that many hits.  He won't. 



STEVE:  Right.



LEO:  I don't know what the actual number is, but it'd be significantly lower. 



STEVE:  Yeah, in fact it's much more likely that, if you took a key and checked it, there would be no collision.



LEO:  Right.



STEVE:  That is, no one given key will collide.  And that's what the birthday attack - that's the reason it's such a surprise to people.



LEO:  It confuses people, yes.



STEVE:  Yes.



LEO:  So it's an old - it's a great probability thing where you take, I think it's 36 people in a room.  The chances are that two of them, some two of them will have the same birthday.  You would think it would be 365.  But that's different than if you said how many people would have to be in a room to collide with my birthday.  Very different number.



STEVE:  Correct.



LEO:  Very different number.  So I don't know if that clarifies things or muddies them, but that's a significant difference.



STEVE:  Yes.  So we need not panic.



LEO:  23 people in a room.  Okay.



STEVE:  Yeah, 23.  And, yeah.  And so any two will have the same birthday.



LEO:  Right.



STEVE:  As opposed to the probability of how many people in the room to have the probability be at least even that your birthday would be shared with somebody else.



LEO:  My birthday, right.



STEVE:  Much larger number, yeah.  So anyway, so not the end of the world, not a cause for any great alarm.  We'll see how this evolves.  The EFF and their SSL Observatory have been working with these guys.  They generated a fresh restart of their observatory at the beginning of the year, so it's only four or five weeks old at this point, or I guess maybe six weeks old at this point.  And they've already seen that this problem exists in all the certificates they've collected since.



So, I mean, this is a problem.  The good news is it will end up being - it'll drain out of our currency in the same way that I'm glad that certificates expire, which is certainly the certificate authorities who are issuing these certs, this is a big deal for them.  They absolutely need to focus their attention somewhere they haven't before, which is on the entropy of the primes they're using to generate certificates.  That's where we need to have this fixed.  Then, within two or three years, the certificates, all the certificates in use now will have expired and have automatically been replaced with ones with ultra high entropy, fully high entropy prime numbers.  And then we'll be okay.



LEO:  It's not much of an attack.



STEVE:  No.



LEO:  All right.  Just checking.



STEVE:  So I meant to mention this last week, and it wasn't in my notes.  And of course if it's not written down, I'm not going to see it.



LEO:  Doesn't exist.



STEVE:  But we did get information from Symantec about the mistake that was made in pcAnywhere.  And it's so classic that our listeners, their eyes are going to roll back in their heads.  Okay.  Description.



LEO:  Yes.



STEVE:  "Symantec has released a patch to address a vulnerability in its pc" - and this is quoting Symantec - "address a vulnerability in its pcAnywhere product.  pcAnywhere consists of a server and a client that allow a user to connect to a computer and control it remotely.  The server component accepts requests for authentication on port 5631 and copies the user-controlled" - that is to say, the user-provided - "username in these requests to a fixed-length, 264-byte buffer.  By sending an overlong username, an attacker can exploit this buffer overflow in order to execute arbitrary code on the target's machine with system-level privileges."



LEO:  Wow.



STEVE:  It doesn't get any more cut-and-dried than that.  I mean, this is so brain dead.  This is so security programming 101.  So they allocate a short, 264-byte buffer.  Then they accept a username of any size and blindly copy it into the buffer.  And the buffer is probably allocated on the stack, which means that they - and in the past we did a podcast and, in excruciating detail, explained how, when the buffer overruns, it copies over the history of things like where you were called from, so that when this routine which is doing the checking attempts to return to its caller, it takes that information from the stack, which was stacked before the buffer, which means you're able to, if you cleverly design this data, you're able to cause the execution to return to your own data on the stack.  If the stack is protected from being executed, there are still ways you can cause the stack to return you to other code in the system which you reuse for your own purposes.



So it can be made more difficult.  Over time it has been made more difficult to exploit stack-based code.  But these are very powerful, very flexible computers; and pretty much where there's a will, there's a way.  And so this all starts with a system that accepts a response from the user without checking its length and just copies it into a buffer without making sure it doesn't overwrite.  And that's what's going on with pcAnywhere.  So anyone who's using it definitely wants to update to the latest version.



LEO:  Yes, yes.



STEVE:  And I should mention also, we talked about this long ago, but port 5631, this is a classic instance of where you absolutely don't want to use the default port because 5631 is something, for example, that I've checked at GRC for users to make sure they didn't have that open.  You definitely want to change the port number of your own instance of pcAnywhere to something else, anything else, because bad guys are out there scanning the 'Net now, looking for anything that answers on port 5631.  Chances are it's going to be pcAnywhere, and then they'll exploit this in order to run code on that system, that pcAnywhere server.  So you definitely don't want to leave that default port.



Also in the news, I'm sure you saw this, Leo, was all the kerfuffle that arose over Google's Wallet PIN.



LEO:  Yes.



STEVE:  What was disclosed was that there was a vulnerability in jailbroken versions of some smartphones that had the Google Wallet installed on them.  And I think there was another requirement such that it was actually only two of Google's phones where this was actually a vulnerability.  And the problem was that there's a four-digit PIN which protects the privacy of the data stored in the wallet, things like your credit card number, which you'd like to have privacy protected.  And what Google does is they do an SHA-256.  Now, that's a hash, as we know.  That's a very, very good hash.



The problem is they store it in the phone.  That is, they don't take the PIN and go check in with some central authority somewhere.  They wanted to avoid the need to do that.  They wanted to allow you to unlock your wallet locally, without checking in.  Well, all of our crypto-savvy listeners understand the problem of that.  It's like, okay, that can't be secure.  It can't be infinitely secure.  You enter a four-digit PIN, which you hash into a 256-bit token.  But then you've got to check it against the token which is stored in the phone.  So if it's jailbroken, and the bad guys have access to the database, then they've got your SHA-256 hash of your PIN.  And here's the problem:  It's only four digits.  Which means it's easy to brute force.  I'm sure there are tables of all, what are there, like, 10,000 only.



I mean, we talked about the problem of four digits not long ago with the whole WPS problem.  So what this means is that anybody who, if there's malware in a jailbroken phone, it has access to your Google Wallet's SHA 256-bit hash.  It can get it and instantly, or quickly, figure out what the matching four digit PIN is. Then they've got the four-digit PIN for your wallet.  And that's not good.



LEO:  Not good.  Very not good.



STEVE:  Yeah.  So the problem is that it's being stored local.  And Google says, well, we told you jailbreaking is not safe.  And they're right.  So I don't really hold Google at fault for this.  There's really nothing they can do if they want to allow you to unlock your wallet without sending off your authentication somewhere else.  Now, they could use something much more sophisticated, much more complex than four digits.  One of the weaknesses here is that it's just a four-digit PIN, so it's easy to brute force all 10,000, 0000 to 9999.  There's just not that many.  You do the SHA-256 of that, and so you have a lookup table that converts that back to the PIN.  And so that's the problem.  So if users used much more complex, were allowed to use much more complex passwords for their wallets, then that would secure them against this particular attack.  But it's still going to be a problem.  So I would say don't jailbreak.



LEO:  Okay.  Huh.  But Google turned off the NFC capability in the wallet until they fixed this.  So there will be a fix; right?  Or is this not possible?  Is this in the design of it?



STEVE:  I don't see how it's possible.  If malware has access to that database, which jailbreaking it affords, then you've got a problem.



LEO:  Too bad.



STEVE:  I would hope maybe what they'll do is give you the option of better protection than four digits.  Four digits is just not enough.



LEO:  Longer PIN.  And five digits would be a lot better.  Six digits, I mean, couple more digits...



STEVE:  Well, I would get away from digits.



LEO:  Digits is a bad choice, yeah.



STEVE:  Yeah, because it restricts your alphabet to a 10-character alphabet.  You'd like to just be able to use, for your wallet, what we all know as a strong password.  Use the Haystack technology, the idea being that you want to, I mean, first of all, if you've got malware in a jailbroken phone, I don't think I would...



LEO:  Well, you're screwed for so many other reasons, anyway.



STEVE:  Yes.  So I don't think anyone should be using any sort of local - and no one should be relying on local encryption on a jailbroken device because it does allow malware access to much more of your device than is safe.  So if you want to play with a jailbroken phone, fine, just don't store anything important there on that same phone.  Get another toy to play with.



LEO:  I need a clarification.  "Jailbreaking" is a term used on the iPhone.  We're talking about Android phones.  We call it "rooting."  And, now, there's two things.  On an iPhone, jailbreaking means you can get apps from third-party sources.  You do not need to do that on Android.  It's just a checkbox.  Is that sufficient?  In other words, just downloading malware, is that sufficient?  Or does the malware have to have additional permissions?



STEVE:  Now I'm confused.  So I hope I haven't given everybody a bum steer.



LEO:  Well, it's just it's unclear from the terminology they use, not you.



STEVE:  Yeah, okay, because I was sure that what I was seeing was that people were doing something to their Android devices, so I guess rooting them is...



LEO:  It must be that rooting because, once you root your phone, an application then can ask for superuser permissions.  And I would guess that it would be the combination of downloading from a third-party source some malware and then allowing that malware to have root permissions.  I should tell you that you are notified when an application requests and is given root permissions.  I don't believe they can do that silently.



STEVE:  So it could just be - it could be an application which you don't suspect is malicious, that you voluntarily give permission to because you want whatever happy service it's going to give you which needs root.  And then in fact behind the scenes it's able to access things.  And so that's just a dangerous thing to do.



LEO:  And there is a log, there's a program that you get when you root a phone called Superuser that gives a log of all apps that have requested permissions and what permissions they've requested and so forth.



STEVE:  As long as one of the permissions is not rewriting the log.



LEO:  Well, that's true, too.  There may be an issue there, yeah.  So it sounds like the advice, then, is do not root your Android phone.  Or, if you do so, be very careful about what apps you put on there.



STEVE:  Exactly.  If you're going to root your phone, then you really don't want to rely on encryption of sensitive data on that phone.



LEO:  I routinely use - root almost all my Android phones because there are apps, backup apps chiefly, that you need root access for backing up, Titanium being one.



STEVE:  Right.



LEO:  Okay.  That's good.  This is all good information.  Sounds like it's not fixable.



STEVE:  I just don't think it is.  It's exactly like the problem of the movie industry trying to encrypt DVDs.  We've got to decrypt them.



LEO:  Right, the keys have to live, yeah.



STEVE:  Yes, the keys have to be there.  And so...



LEO:  In the clear.



STEVE:  ...I just don't see how it's solvable except what you really should have is a much stronger password than just the four-digit PIN.  I'm surprised that's all they have, actually.



LEO:  Yeah.  On the phone itself, Android gives you many choices of both alphanumeric - and they have a gesture-based password which I use.  That would be, I presume, stronger than numeric.



STEVE:  Anything would be better than four digits.



LEO:  Okay.  So this might be a fix that Google could implement or somebody could implement with the Superuser app.  You know, the Superuser app can be set to block access.  You have to explicitly give permission each and every time an app requests it.  You might then ask for a gesture, for instance, to unlock it.  Which I think would then certainly increase security significantly.  I would think, but I don't know.  All right.  Sorry, I didn't mean to slow you down.  I just wanted to get some clarification on that because I routinely turn on root.



STEVE:  Are you a Google Wallet user?



LEO:  I am not because I don't have NFC.  There's only a couple of phones that have NFC currently.  I guess you could use Wallet without NFC.  So anyway, but I don't, no, I don't Google Wallet.  I use a similar thing, though, that might be similarly crackable, from Square.  It's called Card Case.  It's wonderful.  I walk into my local coffee shop, I make an order, and then I say put it on my tab, and they have an iPad with my name and picture on it, and they say, good, we'll add it to your tab because I've been sensed by geofencing to have come into the store.



STEVE:  Wow.  That's cool.



LEO:  It's really cool.



STEVE:  Yeah.



LEO:  However, it probably is even more susceptible to these kinds of attacks.



STEVE:  Okay.  So I tweeted something that I thought was interesting, just because it caught my eye, which was someone did an analysis of the speed of browsing with and without web tracking.  And they used standard tools like NoScript on Firefox.  And in fact, after this, somebody told me they were playing with ScriptNo on Chrome and verified for themselves the same thing, which is not protecting yourself from web tracking, not blocking trackers, slows your browser load time often by as much as a factor of two.  So popular websites, which are just loading down your browser with all kinds of junk, are really, I mean, they're not only causing a privacy threat, but a serious performance bottleneck, I mean measurable, and as much as a factor of two, sometimes even more.



So Patrick Dubois tweeted the note to me, and so I wanted to thank him.  And I tweeted it out, and it generated some attention in my Twitter stream.  So I wanted to make sure our listeners knew that, not only is all this blocking we talk about doing good for you from a privacy standpoint, but it really does accelerate your use of the 'Net.



Moxie Marlinspike, our wonderfully pseudonymed hacker, introduced just a day or two ago a new password-cracking service called CloudCracker.com.  Maybe you can bring it up before everybody who's listening to this does that, Leo.



LEO:  Good point.  I'm hurrying.  Not right now.  CloudCracker.com.



STEVE:  CloudCracker.com.



LEO:  Can I type faster than a TWiT listener?  Apparently I can.



STEVE:  Maybe he's got a lot of horsepower there.  It's a very nice-looking site.  And it's just about as disturbing as anything could be.



LEO:  Oh, lord.



STEVE:  It's not free.  But I think it's $17 an hour?  For some reason that number sticks in my mind.



LEO:  Yeah.



STEVE:  I don't have it in front of me.



LEO:  It's "Run your network handshake against 300 million words in 20 minutes for $17."



STEVE:  Yeah.  So you capture somebody else's traffic out of the air, which is to say the network handshake, into a file, a capture file.  You upload it to Moxie's new cloud-based...



LEO:  Holy cow.



STEVE:  Uh-huh, supercomputer.



LEO:  It's quite nicely done.  It's a very Web 2.0 site.



STEVE:  Very attractive, yup.



LEO:  Wow.



STEVE:  So this is cloud-based password cracking.  And for not much money he will crank, he'll turn loose, I don't know if it's using EC3, Elastic Cloud Computing from Amazon, or what service, or how many...



LEO:  Probably, yeah.



STEVE:  But he fires up a bunch of technology to work on cracking the password by doing brute force dictionary attack against it and lets you know what the password is, if you...



LEO:  Awesome.



STEVE:  Yeah.



LEO:  In case you forget.



STEVE:  Just FYI, yeah.  CloudCracker.com.



LEO:  Yay.  Thank you, Moxie.



STEVE:  And then Twitter stepped their protection up another notch.  We covered some months ago when they had offered SSL optionally.  They just announced in a blog posting a couple days ago that HTTPS connections are now the default for Twitter when you're on their website.



LEO:  Right on, daddio.



STEVE:  So yay and bravo.



LEO:  Yeah.



STEVE:  Another real, I mean, we need to see that universally.  And as soon as I get some time, I'm going to do that myself.



Okay.  Now, I tweeted the URL for this video.  And it's not easy to say it live, so I won't try to.  It's a YouTube video - so just go to Twitter.com/SGgrc, and it's only a tweet or two back, so you should find it easily - about an amazing-looking spray-on antenna system.



LEO:  This is a Solve for X series that Google does.  I think it's Google that does this, WeSolveforX.com.



STEVE:  Very professional.



LEO:  Lot of great stuff on there.



STEVE:  Yes.  And...



LEO:  So this is a fascinating - and by the way, don't be put off by his presentation because he's a little shy and stumbling, but...



STEVE:  Yeah, well, he's apparently the engineer...



LEO:  Yeah, he's a geek.



STEVE:  ...who was involved in this.  He's a geek.  And so in my tweet I said something about the guy's not the greatest presenter, but at about five minutes into this video your mouth will fall open, and it will stay open for the rest of the video.



LEO:  Now, I know Solve for X is legitimate, and they have great people like Nick Negroponte and Neal Stephenson and just wonderful - it's kind of like TEDx, in a way; right?



STEVE:  Yeah.  It's very TEDx-like.  And they had the Google guys on and, I mean, so it's clearly - this is not a hoax.



LEO:  Right.  But I've got to ask this - it doesn't seem possible.



STEVE:  So what he's got is a spray-on material with nano capacitors.  And there's a close-up microphotograph of it.  And it is true that capacitors conduct AC and block DC, and radio frequency is AC.  So this would be a conductive surface under the influence of radiofrequency.  And...



LEO:  So what they're doing is they're painting this stuff on trees, buildings, all sorts of stuff.  And it turns it into an antenna.



STEVE:  Well, and I've got to say, Leo, the picture of the wires connected to the tree trunk...



LEO:  That's a funny one.  Yeah.



STEVE:  Oh.  Now, but the guy is very deadpan.  If we're to believe the video - and we all have to have some healthy skepticism here.  But, I mean, if it's a hoax, it's the most beautifully perpetrated hoax I've seen in a long time.  I don't think...



LEO:  He claims that this tree thing was an army, a U.S. Army test.  They're doing this for the military.



STEVE:  And he talks about 20dB of gain.  That's a factor of a hundred.  I mean, 20dB is nothing to shake a stick at.  And they talk about having duplicated their measurements, and the army was involved, and used the army's antenna, and then they sprayed a tree.



LEO:  Here's the - somebody said, well, gee, Apple should hire this guy for the iPhone.  In fact, they did test it with an iPhone.



STEVE:  Yes, and they sprayed an RFID tag, and it went from something like five inches to 700 feet or something.  I mean, watch the video.  I know this seems wacky.  But as I said to you in some email, I hope this isn't another cold fusion sort of thing.  But it seems just barely tantalizing enough.



LEO:  It really feels like a hoax.  But so what we did is we passed this along to George and Bob and Gordo at Ham Nation because, if there are any antenna experts in the world, it's them.  And we're going to find out what they say.  And they're going to try to get the guy on the show.  Now, is he selling this stuff?



STEVE:  Well, okay, there is a picture of a spray can.  And that was definitely just meant to be sort of...



LEO:  A joke.



STEVE:  Like what it could look like.  I'm sure they're not at the spray can stage yet because it looks sort of retail.  But if you could spray on nano capacitors, I mean, it is so convincing looking.  If nothing else, enjoy it as a spoof because, if so, it's beautiful done.  If not, and if the claims are true...



LEO:  Well, it's revolutionary.



STEVE:  We have a revolution in antenna technology.



LEO:  I mean, his point, in the speech he says what if, instead of cell towers being these ugly boxes on  buildings, you just sprayed the side of the building, and that's the cell tower, and it worked better?



STEVE:  Well, and he even mentions that the efficiencies are so high that you can get power out of the air, from just all the RF floating around.  And so you might be able to create self-powered...



LEO:  Oh, wait a minute.



STEVE:  ...towers.



LEO:  Now, wait a - hold on there one cotton-pickin' minute.  That sounds like the Robert Heinlein story where they had these antennas waving in the air, collecting energy from the outside world.



STEVE:  Well, remember that Tesla did transmit power across the globe.  He created lightning on the other side of the Earth from his big tower in Colorado by resonating the Earth's electromagnetic something or other.  So, I mean, that was something Tesla was known to have done back then.  So who knows.



LEO:  I can't wait to find out more.  I'm really - I'm fascinated by the whole thing, and we're going to try to kind of narrow it down and track it down.  The problem with military, he has a good excuse for why he can't talk anymore about it.  And remember supercapacitors, which are real, we talked about them a lot, but there was...



STEVE:  Well, it was nano capacitors.



LEO:  No, but yes, I know, but remember we also talked about supercapacitors and how they exist.  They're not real.  They're not a hoax.  But there sometimes is a bit of a gulf between concept and implementation.



STEVE:  Yes.  There's a new supercapacitor-powered mouse also, by the way.  And we know that there's supercapacitor out...



LEO:  I have a screwdriver.



STEVE:  Yup, screwdriver, flashlight.  And so we're beginning to see these things happen.  It does take materials breakthroughs, typically, in order to make this go.  This would be neat if this were true.  And lord knows we could use a revolution in antennas because, I mean, so could Apple with the iPhone after that fiasco with the antenna on the outer edge that we talked about extensively  back then.



So, okay.  And last week follow-up, I had here.  Someone sent me a note that I ran across in the mailbag saying that was an awesome episode.  "What had mostly prevented me from switching permanently" - oh, I know why I wrote this, or why I picked this up.  "What had mostly prevented me from switching permanently from the memory/GDI object-leaking Firefox to Chrome for a long time was the lack of a NoScript extension for Chrome.  Now if only there were a decent tree-style tab-like extension for Chrome, I would be totally set."



LEO:  Are you sure you didn't write this?



STEVE:  I have, for the most part now, switched to Chrome.  And so the reason I - if there's anybody listening.  Now, the problem is I don't think that's possible.  I'm the same way.  As we know, I'm a tabaholic.  I mean, I'm a confessed tabaholic.  I've got, looks like about 30 open right now because they're over on the side, and they're small, and they're nice.  Now, you can, on Windows, move Chrome's tabs to the side, but they're still big.  They take up much more space than they should, so you can't have as many of them.  So anyway, I'm hoping that Chrome will evolve over time.  I know Google loves the way it looks, and they're very proud of how clean it is.  But there are people who just live on tabs, and I'm one of them.  So we need - I agree with this guy completely.



LEO:  Wait a minute.  Wait a minute.



STEVE:  If they could do small tabs on the side, that would be wonderful.



LEO:  Is this - okay.  Get ready for this one.  This comes from the chatroom.  The guy who was talking about spray-on antennas was from a company called ChamTech or ShamTech.  Right?  They're selling this.  Spray-on antenna kit.  Call for pricing.  This is - all right.  Somebody order that and tell us how it works.  That's got to be a joke.  ShamTech; right?



STEVE:  Careful where you spray it, though.



LEO:  You know what, this is a joke because I don't see a phone number next to the call for pricing.  Is this him?  Is this the same guy?  Yeah, they have self-spray-on kits.  There is a phone number.  I don't know.  Somebody order that.



STEVE:  I wonder if...



LEO:  ShamTech?



STEVE:  I wonder if, yeah, that does sound a - okay.  But if you were going to be a spoof, why would you call yourself ShamTech?



LEO:  Right.  Well, and Solve for X was fooled if - I don't know.  Somebody order this.



STEVE:  Or maybe the Solve for X video is a spoof.



LEO:  No, no, no.



STEVE:  That this is not...



LEO:  No.  I don't think so.



STEVE:  I wonder if it's actually on the Solve for X website.



LEO:  It is.  It's on the Solve for X - it is, I think.



STEVE:  Well, I looked at Solve for X and saw a lot of other cool things.  And it's under YouTube.



LEO:  Oh, maybe it's somebody else.  Let's see.  Let's see if we can find this guy.  Now, there it is, it is on the Solve for X website.  This is fascinating.  It doesn't feel right, and yet I've got to call them and order - you can order it.



STEVE:  So I guess the spray can is real.



LEO:  It's real.



STEVE:  Anyway, everybody look at the video.  Is there an easy way to find it in Google, Leo, like "spray-on antenna," if you Google or go to...



LEO:  You can go to their website, ChamTechOps.com, or SolveforX.com.  Either way, you will be able to find this video of Anthony Sutera, who is their CEO and an entrepreneur in communications.



STEVE:  Well, he sure is.



LEO:  Wow.



STEVE:  He definitely, whether it's RF communications or spoofing communications...



LEO:  I don't know what to say.



STEVE:  It's so tantalizing.



LEO:  I want to get it.  Omri, who is also a speaker at Solve for X, is going to come on one of our shows.  He's a fan, and he's been to the studio.  So it's real.  It's a legitimate Google event.



STEVE:  Solve for X is real, yes, yes.



LEO:  So I don't know.



STEVE:  Wow.  Anyway, we will follow up and keep our listeners informed.



LEO:  We've got - HiWEB in our chatroom is ordering it right now.  Let me know the price, HiWEB, will you?  All right.  Moving right along.



STEVE:  So we're actually on a very related topic.  I just wanted to give our listeners an update on the LightSquared/Global Positioning System band spread collision.  The fight continues.  We'll remember that LightSquared, that's a commercial company wanting to build a next-generation 4G wireless network in the so-called "L-band" spectrum, which unfortunately, inconveniently, lies adjacent to the frequencies used by the Global Positioning System.  Due to L-band's close proximity to the frequencies used by GPS, about half of the frequencies that they plan to use, that LightSquared plan to use in their network, have been shown to cause interference on some GPS receivers.



Now, as we mentioned last time, this is partly the fault of the fact that the GPS receivers aren't very narrowly tuned, that is, their own reception isn't tightly tuned and constrained to the GPS frequencies because there wasn't anybody nearby.  And so in terms of the frequency response, they were able to use less expensive, less narrowly tuned receivers to save money.  And what's called the "skirts" of their response curve falls out into this L-band, which had previously been unallocated and unused.  Anyway, today, which may have been yesterday, the NTIA, the National Telecommunications Information Administration, sent a letter to the FCC which declared the interference to be unavoidable.



Quote:  "Based on NTIA's independent evaluation of the testing and analysis performed over the last several months, we conclude that LightSquared's proposed mobile broadband network will impact GPS services, and that there is no practical way to mitigate the potential interference at this time."



Well, you can imagine that LightSquared Corporation promptly replied.  They said, quote:  "LightSquared profoundly disagrees."  This is sort of how...



LEO:  Of course they do.



STEVE:  This is like what's his name, Mitt Romney is a "severe conservative."  "LightSquared profoundly disagrees with both the NTIA's and the PNT's" - I don't know what the PNT is, anyway, somebody else's - "the PNT's recommendations, which disregard more than a decade of regulatory orders and, in doing so, jeopardize private enterprise, jobs, and investment in America's future."  Do we have any music you can play in the background, Leo?



LEO:  [Humming "America the Beautiful"]



STEVE:  "NTIA relies on interference standards that have never been used in this context and were forced by the GPS community in order to reach the conclusions presented today.  This, together with a severely flawed testing process that relied on obsolete and niche devices, shows that the FCC should take the NTIA's recommendation with a generous helping of salt."  Actually, I don't think them using this kind of humor in their communications is useful to them, but, you know.



"Despite LightSquared's success in finding technical solutions and the acknowledgment by a senior government official that GPS receivers are specifically designed to rely on spectrum licensed to LightSquared" - which that refers to the sloppiness of the GPS receiver design - "it is extremely disappointing that this recommendation was made today."



So I don't know what's going to happen.  I mean, we have a situation where band that should be usable, can't be, due to the fact that an existing install base of GPS receivers are caused pain when this band is used.  So there you go.  I think LightSquared's going to end up having a problem.



LEO:  Too bad, because of course the idea of ubiquitous wireless Internet is fantastic.



STEVE:  It is.



LEO:  And we're all for that.  And I had hoped they had come up with a good solution.



STEVE:  Yeah.  Speaking of a good solution, Nick Bowen dropped me a note which I saw as he wrote it on Sunday, February 5th, so just a couple days ago.  From Walnut Creek, California, he said, "A short time ago a friend brought me his computer for me to run DBAN" - which we've spoken of, Darik's Boot And Nuke - "on prior to him getting rid of it.  It was an old Win98 machine, and DBAN would not run because the hard drive would just grind.  He had purchased SpinRite" - oh, I, says Nick, "I had purchased SpinRite a couple of years ago and had not used it yet.  But I thought this would be a great opportunity.  I ran it on Level 2, and it fixed the drive.  This, then, allowed me to securely wipe the data before it was given away.  Thanks for the podcast and great product.  Nick."  So yet another use for SpinRite.  You run it before you wipe your drive.  And in fact, at some point, SpinRite will do that for you, but not quite yet.



LEO:  Oh.  We're looking for SpinRite 7?



STEVE:  I think it's going to be 7.  Maybe 6.1.  But 7 for sure.  I did trademark "Beyond Recall," which I just love.  And for a while I was going to do a separate thing.  But I thought, eh, that's dumb.  It's just so, I mean, it's everything SpinRite's doing except just use good source of pseudorandom data to wipe the drive, and in the process fix any other problems, and there are actually some tricky things that SpinRite can do also.



LEO:  So at the same time, kind of.



STEVE:  Can do at the same time.  So to do a better job than Boot And Nuke, do a much faster job, leverage all the same technology, and make it very clear to people that, if they proceed, their data will not be there.



LEO:  It's gone.



STEVE:  It's beyond...



LEO:  Beyond recall.



STEVE:  Gone for sure, beyond recall, exactly.



LEO:  We have 10 questions plus, as you say, the Bonus Unintended Consequence of the Day.  Let's start with Gareth in Germany.  He actually asked this on Twitter, hence its brevity.  @gazz2010 says:  @SGgrc Steve, love Security Now!.  Wondering if a NAT router without SPI is any less secure, would you say?  Many thanks.  What is that?  I don't know what SPI is.



STEVE:  Stateful Packet Inspection.



LEO:  Oh, of course.



STEVE:  And my sense is, Gareth, no.  Now, I ought to mention that I wanted to respond to Gareth, and I tried to.  But he's not following me on Twitter.  So he got the message to me by mentioning SGgrc, and that I saw.  But the only way for me to respond to him would be if I mentioned him.  And the problem is, with 20, I don't remember now how many, 27,000 or something followers, I would be cluttering up my stream if I...



LEO:  Ah.  I can give you a solution on that.



STEVE:  Oh, really.



LEO:  Yeah.  And this is complicated.  But Twitter, if you just reply to an @...



STEVE:  Reply to a single posting, huh?



LEO:  Yeah.  If the very first thing in your reply is @hisname, it will only be seen by him and those who follow you both, the intersection of your followers and his followers.



STEVE:  Oh.



LEO:  Which, yeah, which presumes that those - and I think it makes sense, if you think about it, because those people saw his question to you because they're his followers.  So in effect you're having a conversation with people who are already in on the conversation.



STEVE:  It does make sense.  And in fact I have wondered, I've seen dialogues occurring in my Twitter stream through @ mentions.  And I've thought, how are these people all seeing each other?  I figured they must be looking at my stream, but in fact they're just following the people who are sending...



LEO:  It's the intersection, right.



STEVE:  Ah, nice.



LEO:  Now, to get around that, people sometimes will put ".@" and then...



STEVE:  And I've seen that, too.



LEO:  Yeah, and the reason they do that is now this is visible to everybody in your stream, whether they follow the original poster or not.  Or, and sometimes I'll do that, too, I'll put a sentence fragment ahead of the @.  I'll say "Good question, @.  The answer is..." if I want everybody to see it.  And usually I do that because most of the time what I'm talking about is of general interest.  But if you were just having a conversation, just begin it with the @ and that person's name, and it will only be visible to the intersection of your followers and his or hers.



STEVE:  Ah, perfect.  I love that.



LEO:  It was a clever thing Twitter figured out.  And it's not well documented.  And I think you just have to learn it.



STEVE:  It's brilliant.



LEO:  Yeah.  And you're right.  You can't DM somebody unless they are already following you, another way that they protect you a little bit from spam DMs.



STEVE:  From being spammed.



LEO:  Right.



STEVE:  Absolutely.  So to answer Gareth's question, now that we've all learned something new about Twitter - thank you, Leo - my sense is paying for SPI buys you nothing worth the money.  A NAT router is stateful packet inspection.  I mean, that's what it does.  The reason you don't get Internet background radiation flooding into your network is that only packets that are expected are allowed back in.  So, and that is state.  That is the router holding state.  So if you send a SYN packet out to a remote server to open a TCP connection, the SYN/ACK packet responding to that is allowed in because your router remembers that pending outgoing SYN.  It interprets the packet and statefully remembers what's coming back.



Now, it's true that there are abuses of protocols which additional stateful packet inspection could theoretically help prevent.  But we've all now also got firewalls on our personal computers.  Not only are we protected out at the boundary of the Internet and our network, but every individual computer within our network has protection.  So my sense is, if it's there, and they use it as a marketing term mostly, then it doesn't hurt you.  My sense is, though, any NAT router is providing you with stateful packet inspection, effectively, and it's never been clear to me what more you actually get.



LEO:  Well, doesn't SPI look into the content of the packet?



STEVE:  Yes.  So does NAT.



LEO:  NAT actually looks at more than just the port and the routing?



STEVE:  Well, it can, for example, in order to NAT FTP.  FTP protocol requires that your server respond, that you understand that it's an FTP connection being established because FTP uses two ports, and the server will be coming in over a different port for your data than over your control channel, your command channel.  So there is more going on than just IP and port number.



LEO:  All right.



STEVE:  Anyway, I mean, if they would ever say what it is they do...



LEO:  They don't, of course.



STEVE:  ...then it's like, okay, I would believe them.  But all they do is say SPI and expect you to pay more for it.  It's like, well, unless you tell me what it is, I'm not buying it, literally.



LEO:  Right.  Question 2, a deliberately anonymous user somewhere near Yakima, Washington says:  A few years ago I was a treasurer for a martial arts club.  All treasurers were given a website login that changed every year.  However, I noticed, if I memorized the URL path after logging in, something like martialartswebsitename.com/treasureradmin, I could simply bookmark that and always access the administrative materials without having to first use a username and password.  This is somewhat akin to the problem you described with the TRENDnet cameras and the CGI script.  My question is, how do websites protect against people bypassing login pages in this fashion?  Could attackers simply bypass the whole username and password attempt by simply brute-force guessing the URL post login?  Thank you.



STEVE:  Well, in theory.  It worked for the TRENDnet cameras.  It clearly worked for this martial arts website. 



LEO:  But that's because it was poorly implemented.  If you use .htaccess, your web server protects you against that kind of stuff.



STEVE:  Well, and the way that is done is, I mean, the right way to do it we've talked about often, and that is with session cookies, the idea being that, if you ever tried - every query from the browser is accompanied by whatever cookies your browser has for that site.  And the site should, if it's a protected area, verify that you have an unexpired valid cookie, which is essentially what gives you roaming permissions within that protected area.  So that's the way logins expire.  That's the way, when you log out, that cookie is deleted or it's disavowed at the server so the server will no longer accept that cookie from you.  You need to log in again in order for it to give you essentially a permission cookie, and then all subsequent queries from the browser carry that and permit you to go on.  It's certainly possible, as you said, Leo, that really cheesy websites would do nothing but present you with a login request on the front page, then just send you to a permission page.  But it's horribly insecure for exactly this reason.



LEO:  Just poorly implemented.



STEVE:  Yeah.



LEO:  So, I mean, I always used .htaccess, which is a web server control file on the server side that says this particular page is not accessible unless a person provides - so the server is doing it server side.  But of course the transaction, once opened, has to continue without continuously asking for a password.  So that's when it's going to start using cookies, at that point.



STEVE:  Exactly.  You give it a valid username and password in response to the challenge of this area's protected by a password, please provide username and password to log on.  When you do so and hit Send, that query goes back to the server.  It looks up your credentials, verifies they're correct and, in its response to you, where it says thank you for logging on, Joe - or I guess we did have his name.  No, no, he was anonymous.  Thank you for logging on, unknown martial arts administrator.



LEO:  John Doe.



STEVE:  You now have permission on the site.  With that response is a set cookie header in the response which could have an expiration.  It could be a session cookie where it will automatic - it will never be stored on disk, and it will just disappear when you close your browser session.  Or it could be valid - we've seen checkboxes, like keep me logged in for 24 hours.  And so it could have a 24-hour expiration, where it will self-expire.  Or even, to make sure that's honored, the server could keep its matching credential for that cookie and make sure that it's not honored after 24 hours.  So there are good, solid ways to do this.



And of course, without saying, all this is over SSL because the problem with not doing it over SSL is exactly what Firesheep was finding.  It was catching those cookies over non-SSL, and that was the credential that then allowed people to impersonate others.  They were then able to just go to them, open their Facebook page as them, impersonating them using that cookie as their credential.



LEO:  All right.  Just...



STEVE:  Neat stuff.



LEO:  Yeah.  And .htaccess, which is a server-side file, is supported by Apache.  But I bet other servers like IIS or nginx have similar server-side techniques.



STEVE:  Actually, there's just a billion ways to do that.  If you, any time you went to a page that was protected, you could have the server using server-side stuff, see if the query for that page is carrying a valid cookie.  If not, rather than delivering that page, you deliver the password challenge and make them authenticate themselves, then you give them the cookie, then they're good to go.



LEO:  Question 3, Craig in Nashville, Tennessee.  He wonders about the need for 2048-bit certificates:  Recently went to renew a website cert for my company through Thawte.  I noticed - which is owned by VeriSign now, I think.



STEVE:  Yup.



LEO:  I noticed they're going to start requiring 2048-bit certs in about a year.  Soon you won't even be able to get a 1024-bit cert from them.  I would think 1024 bits is more than enough.  Are they being overly paranoid?  Or is there some legitimate reason behind changing from 1024 to 2048?  Thanks for a great podcast.  Keep up the good work.  I drive three hours each week to work.  Holy cow.  It gives me something to look forward to while I'm sitting in the car.



STEVE:  Well, I referred to this question at the top of the show.  And I was glad to see that there is this kind of planning happening because, as was mentioned in that paper about the collisions of SSL certificates, it is the case that academicians have factored 512-bit composites of primes.  They have also factored 768, which is that next step.  That's 512 plus 256.  They've factored that size key.  And we can assume that at some point in the future they're going to go to the next step at 1024.  This problem gets exponentially harder, that is, even though 1024 is only another equal-sized step from 768 as 512 was from 768, it's still way harder.  So there is no expectation that this is going to be happening soon.  But we want to always keep our security several steps ahead of where the technology is for cracking that security.  And so going to 2048-bit certs really makes sense.



Right now, if you have an extended validation cert, you have no choice.  EV certs must be 2048.  That's just part of the package.  So that's where I went with mine.  And I wouldn't be surprised if we start seeing 4096 before long.  It takes them longer to generate and longer to handle.  But machines are getting faster, too.  So, and boy, at that point, we're talking serious security.



LEO:  Yeah, we kind of keep parity because even though it takes more to generate these, the reason we want longer ones is because computers are getting faster, so there's kind of this kind of parity there.



STEVE:  Exactly, exactly.



LEO:  And the good news is desktop generation of keys is faster, much faster, and growing at a much faster rate than is the decombobulation, the factoring.



STEVE:  Yeah.  And, although, remember that it is desktop generation of keys where we're depending upon the random number generators, the pseudorandom number generators in the desktop.



LEO:  We've got to improve that.  We really do.



STEVE:  Yes, it really is a reason why it's much better to get your keys from somebody with a huge obligation and commitment to entropy, like somebody who's issuing public keys for their livelihood.



LEO:  When I created my key, my new PGP key, because mine had expired, so it was time, I made it 2048 bits.  And it generates it on the desktop, but it asks you to mouse around, open windows, do a lot of stuff.  So it collects entropy, I'm gathering, from the activity going on in the computer, which is somewhat pseudo.  It's pseudorandom, but somewhat randomized.



STEVE:  Yes.  Although I did see in the mailbag, actually, just this morning, somebody complaining that whatever they were - they were trying to generate a certificate, and they kept getting the message that the system had insufficient entropy because apparently some other processes that were also running in the same system were draining the entropy more quickly than the system was able to generate it.



And so that's the other thing happens, is that there's this notion of an entropy pool.  And the system is, from whatever sources it can, from the timing of arriving packets, from keystrokes, from mouse movements, from any sources of true randomness, it's trying to collect this.  But then there are things that, like setting up - every time you initiate an SSL connection.  You're not generating a public key, but you are using up entropy to choose a private key, which is the session key under SSL.  So systems which are negotiating SSL connections at a high rate have a constant demand for entropy.  And the idea is that the pseudorandom number generators should only run for so long before they're reseeded with fresh entropy.  And that needs to come from somewhere.  So there is a lot more going on behind the scenes than a lot of us realize, yeah.



LEO:  Yeah, it's interesting.  Jim Dwyer, Tipperary, Ireland is seeing SSL certificate errors at work, but not due to the usual causes, at least so he thinks:  Great show with Leo, listen every week here in damp old Ireland and envy the Southern California weather you two guys occasionally mention.  My question is how does one exactly track down the cause of a certificate error?  I ask because lately my employers' - which is a bank with very strong security policies and practices - Internet browser IE8 has been throwing up warnings about certificate errors to sites that I know have good certs.  I don't get this warning when I access these sites in my home laptop or computer.  I use Firefox at home, while IE8 is the bank's browser of choice, unfortunately.



For example, he gives a TD Ameritrade address.  He says it generates a certificate error on IE8 at work, with the warning "The security cert presented was not issued by a trusted certificate authority."  IE8 says close this page down.  But when I check the certificate, it all seems normal.  I don't see my employer as the certificate authority.  He thought that they were doing a man-in-the-middle, I guess, as we'd talked about before.



STEVE:  Yep.



LEO:  It shows *.tdameritrade.com, issued by VeriSign, valid from 09/09/2011 to 08/09/2012, so that all looks good; right?  So what the heck's going on?  Do you think my employer is intercepting SSL websites, or is there another factor at play here?  There are two tabs about the certificate details and a certification path that's too long to write about here.  Thanks for the great shows.  I recently got an Apple TV, which is very handy for watching the show, and other TWiT shows, too, on our 46-inch screen, although my kids get annoyed when Daddy watches TV for an hour or more after school, and they can't watch "Garfield."  So I think you're helping me be a better parent, too.  Kind regards from Ireland, Jim.  P.S.:  I bought SpinRite years ago when the show came out, just as a means of payment and thank you for the great show.  And I'm sure one day soon it will save my bacon.  It's ready and waiting, just in case.  Thank you, Jim.  What a nice email.



STEVE:  Well, a great email and a really interesting question.  So he's got IE8 complaining, saying the cert presented was not issued by a trusted certificate authority.  We've never talked about this before.  But my hunch, from everything he said, is that he has on that particular system a corrupted certificate authority store, S-T-O-R-E, as in storage.  And that can happen.  So, for example, I would go to any other machine and see if it can open a link that his machine can't, that is, within the corporate facility, in his bank.  My guess is that nobody else is having this trouble, just him on this one machine; and that some corruption did occur, specifically in this case, on VeriSign's Class 3 Secure Server CA cert.  And so in fact there isn't a valid certificate.  Even though its wants to be valid, there's something wrong with his store.  And I have seen this kind of thing happen before.  So my guess is it's just localized corruption, and that it's probably possible to fix that.



LEO:  Yeah.  VeriSign should certainly be recognized as a certificate authority.  They're probably the No. 1 certificate authority in the world, I would guess.



STEVE:  Yeah.  Yeah, exactly.



LEO:  Of course I went to the same site on my browser, on my computer in front of me, and it says the certificate's valid, and I get all the extra little doohickeys and doodahs.  So, yeah, it sounds like it's something wrong with his particular system.



STEVE:  I think just one machine is having a problem.



LEO:  There wouldn't be a way for his company to be causing this problem and the certificate still to look good, would there?



STEVE:  No.  And that's the problem.  If his company were doing a man in the middle, then it would be impersonating TD Ameritrade in his example.  And the certificate would show as being something other than VeriSign.  And then he would be getting exactly the same error, that it's signed by somebody non-trusted, if his computer also did not have his bank's own public certificate that was used to sign the man-in-the-middle certificate.  So you could get that error, but then you would see that it was not signed by VeriSign.  The fact that it was signed by a valid CA says that your computer is not recognizing the validity of VeriSign, and there's no reason for it not to except corruption in the certificate authority database.



LEO:  Right.



STEVE:  That explains it.



LEO:  Question 5, Kevin Gunn in Denver, Colorado wonders about Perfect Posthumous - Posthumous? - Passwords:  Steve, how do handle or suggest handling giving passwords to loved ones after you die?  Sorry for the direct, morbid question, but this is one I've been wrestling with lately.  I think we all are, Kevin.  I think we've talked about this before, and it's a great question.  I'm a LastPass user.  My password is a complex, 10-plus character password - numbers, letters, lower and upper, as well as special characters.  All of my accounts have complex passwords I've created using LastPass or some other complex password generation tool.  Occasionally those passwords change, including my LastPass.



The issue, then, is when I do, I realize my wife won't be able to log into any of my accounts.  Not even I know my own passwords.  I just know the LastPass one.  That's how many of us do it.  You trust LastPass, but you don't have to remember all those complex passwords.  I've heard about some sites that require you to check in periodically and, if not, they presume you're dead and send out a message to whomever you define.  But I'm concerned about security.  I obviously don't want to hand out my LastPass password to some site that would give unwarranted access to all of my accounts.  Others have suggested writing passwords on paper, storing it in a safe deposit box at the bank or something, but that last one would have to remember to update the list, or at least the password, on password changes.  I'm just curious, as I begin a quest for a solution, if you have any suggestions.  What do you do yourself?  Thanks for your work.



STEVE:  So I think it's a great question.  One of the things that any of us who are being responsible need to think about is what happens if...



LEO:  Right.  If the worst happens.



STEVE:  ...something happens to us, yeah, if the worst happens, and people we would wish could get access to our accounts of all kinds are unable to.  The beauty of LastPass is that it aggregates - or any similar password manager.  It aggregates this mass of disparate logon credentials under a single authority.  So there's one point of permission, of authentication, that then expands to all. So that's really good from that standpoint because one could imagine listeners to this podcast may have gone to extremes for security that would be hard, you'd be hard pressed to expect wives, siblings, whomever, to deal with.



Okay.  So I had a couple thoughts.  One would be you could generate a list of passwords.  For example, say that you decided every six months you wanted to change your LastPass password.  You generate, you pre-generate a list.  And say that you've got, you imagine, 50 years left of your life.  So every six months, that means you need a hundred of them.  You could go to somewhere like GRC's Perfect Passwords, which will give you gibberish to your heart's content, and just copy them down, make them whatever length you want, and create a little spreadsheet of January 2012, July 2012, January 2013, July 2013, and so forth, and show the matching password.  It's then up to you to keep your own list private yourself, and to follow that to change your master LastPass password every six months on that schedule, knowing that locked up safely, maybe it's in your attorney's file for you, or in a safety deposit box which will be unlocked upon your demise, or whatever.  So that would be one way.



Another way that doesn't require any kind of, like, list pre-generation, I had the thought of, well, there are websites that offer web-based hashing, like MD5 or SHA-1.  I just put into Google when I was posting this question, "web-based SHA-1," and up came some.  So what you could do there is there would be instructions which you leave which say, if anything happens to me, put in this phrase, dash, and the year, and into this site.  You hash that into - through an SHA-1 hash..



LEO:  Clever.



STEVE:  And that's your key.  So...



LEO:  So all you have to put in the safe deposit box was this one piece of paper with a date next to each one saying this is - in this time range, this is the password; this time range, this is the password; this time.



STEVE:  You could do that.



LEO:  Or - you could do that, or do what I like is use this - I use SuperGenPass, which does this.  Your master password would be the year and day.  And it would change according to those days.  I think that's a good idea.  Very clever.  And then you wouldn't have to worry about it.  You just remember to change your master password on a regular basis.



STEVE:  Or one final solution is - this is a nice reason.  So using all of that requires technology.  We have a non-technology solution called Off The Grid.



LEO:  Yes.



STEVE:  And that's exactly what this is for.  So you could leave instructions to use an Off The Grid grid where you simply put in the year, 2013, you do the Off The Grid approach using the Latin square.  And then from wherever you land, you just, for example, do 12 characters to the left, for example, or whatever your instructions are.



LEO:  Ah, yes.



STEVE:  And that way you have a changing password, no technology.  It goes forever.  You don't have to do it in advance any number of years or months or whatever.  And you can make it as complex or as simple as you choose.  And as you say, Leo, then your obligation is to make sure you stay current with the instructions you've left behind.  Oh, and by the way, if you didn't, that's not a problem, either, because you could say, and if it doesn't work...



LEO:  Go back.



STEVE:  ...try the - exactly.



LEO:  I forgot.



STEVE:  I forgot.



LEO:  Right.



STEVE:  And so go back in time until it does.  And you'll find the master one that works.



LEO:  That's clever.  Now, somebody in the chatroom does point out that there is a LastPass sharing feature.  You can share your LastPass with somebody else.  Of course the reason that he doesn't want to do that ahead of time is he doesn't want to hasten his demise by inadvertently giving his passwords to his wife before he's passed on.



STEVE:  Right.



LEO:  Right.  Just a little joke there.  Very little.  Samy, Pasadena, California wonders how secure are anonymizers.  Steve and Leo, I'm fairly new to Security Now!, but you've got me hooked.  Your explanation of the WPS protocol was amazing.  Thank you for all the work you do.  I'm curious what your thoughts are on anonymizers like TOR or Ipredator.  Are they truly anonymous?  Or is it possible to decrypt and trace the hops back to the true source?  Secondly, in the case of TOR, do you think the risk of a peer node injecting malicious code into returned results makes TOR too dangerous for use?  Thanks again.  We have covered this.  But I agree, it's probably worth talking again.



STEVE:  Well, yeah, I thought, quickly, just saying that I guess my take is that you're trading off one thing for another.  So if you don't use a system like that, then your traffic sprays out from you all over the Internet, point to point.  If you run through a VPN or TOR, and Ipredator is just a VPN offered by the Pirate Bay people, then your traffic is going through that system.  And at some known point it is then emerging, unprotected and unencrypted - unless you've got other encryption in the connection, but not encryption provided by this service - onto the Internet.



Because those are high-value emission points, that is, the powers that be with initials in their names could figure, well, these TOR endpoints are worth watching, or the Pirate Bay's VPN server is worth keeping an eye on.  So now your traffic is emitted from the Internet at a high-value location, much easier for organizations to watch, if they wanted to, than if it was just you at home, sort of lost among the millions.  So there's a tradeoff, I think.



LEO:  Yeah.



STEVE:  It does provide you with anonymity, but it also brings your traffic, I think, more to the notice, potentially, of organizations that would care.



LEO:  Furthermore, you can't count on Pirate Bay or other organizations to not respond to government subpoenas.



STEVE:  Yes.



LEO:  We've learned that with HushMail, for instance, which is an email encryption service that just handed over keys when asked.  And that's, in most cases, what any of these services are going to do unless they want to be outside the law.



Keenin, Moses Lake, wherever that is [Washington], offers some fun math:  I had a discussion with a classmate about encryption and how he thought the government could break anything.  I knew better than to argue with him, so instead I did some math for the fun of it.  I know you already know this, but I had to vent.  I took 256-bit encryption and assumed that the only way to crack it was, as we currently believe, a brute-force attack against the 256-bit key.  After all, we're talking 128-bit this and 256-bit that.  It's the bit length we're focusing on.



So let's say the tricksy government has a secret algorithm that somehow allows them to weaken the strength to one trillionth of the original.  That's a good number, one trillionth.  And let's say they had a computer that can try 100 trillion guesses per second.  And let's say this computer was one cubic millimeter in size, and let's say they build a cracking complex the size of the entire Earth made out of these one cubic millimeter crypto cracking computers.  If I did my math right, it would still take 34 trillion years to crack.  I like that.



STEVE:  I like that, too.



LEO:  Did you check his math?



STEVE:  I did not.  But it sounds right.  And I liked - I wanted to include this just because we're so glib about saying, oh, we went from a 128-bit key to 256-bit.  It is so easy to sort of get this sense of, well, that's twice as strong.  Oh, honey.  No, 129 bits is twice as strong.  130 bits is twice as strong as that.  And so on for another 126 times.  So, I mean, it is so ridiculously stronger.  So anyway, I loved Keenin's math.



LEO:  People have trouble with orders of magnitude, exponential, things like that.  And so that just brings it home.



STEVE:  Yup. It's not intuitive.



LEO:  It's not intuitive, exactly.  Nile Davis in Mesa, Arizona has some questions and some thoughts about assembly language, SpinRite, and the Navy SEALs:  I've been an avid listener of Security Now! since the beginning, listening on the ski slopes, the airplane, road trips, while mowing my lawn and so on.  I can't get enough.  Although I've been intending to reply for a while now, after listening to Episode 332 I wanted to ask you a favor.  I have dabbled with assembly language programming since I taught myself how to use the 6502 chip in an Apple II a long time ago.  You mentioned you're writing assembly language, but it's really pretty.  Pretty is in the eye of the beholder, I just want to point that out.



Could you write a simple "Hello World" type program in assembler and let us see what it looks like?  I'm sure it would help those of us who would like to program in assembly, but would like to see how pretty yours is.  I've been a user of SpinRite since v3.1, I don't remember the exact version number, and it's helped me with multiple hard drives, floppy disks, iPods, TiVos, even an old Xbox.  I'm looking forward to v6.1 since I have a couple of motherboards with BIOS issues.  Got any idea on its release date?  And finally, my wife's first cousin is a Navy SEAL.  And after sharing with him the story about SpinRite saving the SEALs, he said, "Yeah, that could have happened."  So, well, I believe the story.  Thanks, and keep up the great work.  Nile Davis, Mesa, Arizona, an orthodontist who's crazy about technology, but I usually work with "bites" of a different order.



STEVE:  Okay.  So it has come up from time to time that people wonder what my assembly code looks like because I talk about how it's possible to write...



LEO:  Pretty.



STEVE:  ...high-visibility assembly language.  Assembly code which is ultra efficient, executing individual instructions of the raw chip, insanely fast, incredibly small, yet doesn't just look like gobbledy-gook.  So I just posted in my Twitter feed links to two GIF images of my editor.  This is what I see when I look at my assembly code.  I did it as a GIF image because I use a colorizing system and a text box.  So just giving you a text file, you'd lose the line drawing characters and a sense for what I actually see, which is what makes it pretty.  So, Leo, if you go to Twitter.com/SGgrc, you'll see right there at the top of the feed a couple links.  I did little bit.ly shortcuts of SG Assembly and SG Assembly 2, or you could just put those into bit.ly/SGassembly or SGassembly2.  And you'll see...



LEO:  Look at how nice the comments are with boxes and everything.  Do you have a macro that does those boxes?  Or you don't type those, yeah.



STEVE:  I do.  I do.  No, I've got to just press one button that creates the whole framework for me.  But that's - and that's what it looks like.  Even though it's structured, you've got if, then, else constructs, you've got looping constructs.  Those all are, before I even considered using them, I looked at what Microsoft's Macro Assembler did with those, and they all resolve to a single instruction.  So it's got zero overhead.



LEO:  So when I see - so I'm looking at a "repeat until" loop that has an "if elsif end if" inside it.  Those commands begin with a dot.  They're not actually assembler commands, they're macro commands.



STEVE:  Correct.



LEO:  So they expand out as predefined by Microsoft's MASM into assembler, but invoke...



STEVE:  Yeah, and I can't just - they invoke one instruction.  So, for example, I'm not able to just put any random phrases in the "if" statement.



LEO:  Right, right.



STEVE:  I'm, like, putting register descriptions or variable names.  I mean, it's exactly - I know exactly what code is being created, and so I use that because it's so much easier to read.  I mean, it doesn't look like - I see weenies who write assembler, and it's just like a byte of opcodes down the left-hand margin of the page.  And I think, well, good luck with that.



LEO:  So this whole block that we're looking at has, as far as I can tell, no actual assembler in it.  If we go to the next block, you'll see some move commands, which is assembly language.  But invoke is not - is that an assembler command, or is that a macro?



STEVE:  Well, it's a macro which is used to invoke Win32, the API.  So those are API calls.



LEO:  I see.  I see.  So these are API calls - read, application, DWORD is an API.



STEVE:  Actually, that's my own.  So I'm also able to define, so those are actually subroutine calls or API calls.  So I have subroutines that I've defined that look just like that, that you give parameters to.  You'll notice it's all spelled out.  I'm not using cryptic language for anything.  And the reason is, when I come back to it a couple years later...



LEO:  You want to be able to read it, yeah.



STEVE:  I can read it.



LEO:  Well, and so if anybody's programming in a high-level code, this really looks somewhat similar to high-level code.  There's a few things.  There's things like "check eax," you have to know that that's a register and things like that.  But it does look like high-level code for the most part.  It does not look like gobbledy-gook.  You can - but you're still working in assembler.  You're still doing a "mov eax, reply" length, which is moving a value into a register.  That's pretty low-level.



STEVE:  Oh, it is, it's low-level.



LEO:  That's down there.



STEVE:  The other thing is that the subroutine names, the variable names are long and meaningful. So it's not XR2Z or something, which has no meaning at all.  It's much more useful variable names.



LEO:  This really is beautiful code.  Actually I've never seen your code before, so it is kind of fun for we...



STEVE:  That's what it all looks like.



LEO:  ...we who are geeks to take a look.



STEVE:  And SpinRite 6.1 timing, I have no idea.  It is, however, the next major thing I'm going to do.  It will be a free upgrade for everyone who has 6.0, oh these many years.  And the target is to catch it up with things that have happened since, like the big 4K sectors that WD drives have.  Even though SpinRite works on them now, there are things I can do to make it better.  Deeper awareness of SATA drives.  Better awareness of hybrid drives that use both flash and magnetic storage, and other stuff.  So it's going to be not tons of new features, but performance improvements and sort of a catch-up.  And then we'll see where we are.  I would love to move on to 7.0 and add a bunch of new features, as well.  And I'm glad to know that the Navy SEAL adventure could have happened.  We haven't ever repeated that, Leo.



LEO:  It's a great story.



STEVE:  We're going to have to repeat that one of these days.



LEO:  Yeah, it's a really great story.  Question 9 from Doug in Illinois, having trouble staying ahead of his family and friends' PC infections.  Oh, Doug, you have my both sympathy and understanding.



I do more than what I would like at times in cleaning family and friends' PCs, or at least hearing about them.  I've noticed what seems to be a rash of infections from fake antiviruses.  My parents' PC just became the latest casualty.  I've done what I can to educate my family on protecting their PC.  I've made sure their "real" antivirus and Windows are both kept up to date.  My mom uses Firefox, I don't what version, most of the time, and jumps to Chrome and IE when all else fails.  I have a feeling the source of infection on my mom's PC, believe it or not, are Christian websites whose administrators don't know what they're doing or haven't updated the site or server in years.  The gist of my question is, is there any way a user can know if a site is trying to install software on the PC?



STEVE:  I just wanted to say, if there were a solution to it, we'd all be using it.



LEO:  I love the fact that, and we've been bitten by this, but that Google now will give you an alert if it sees - and that's one of the reasons I like Chrome.  If it sees that - because as it's - see, Google has an advantage.  They're spidering these sites all the time.  So if they see known code on there, known bad code, malicious code, they'll add you to a database.  And when you go there on Chrome, it'll say [alarm sound].  And for the most part that's very accurate.  And Explorer does that now, too.



STEVE:  And of course the problem is that, if it's something where you do something, that is, it's user action, user permission, that's still the way this stuff gets in.  And so we're back to training users.



LEO:  Yeah, true.



STEVE:  And the other thing I would say is this is a case where you really want to run as a limited user.  If you can lock down the system, like Mom's PC, she really doesn't probably need to be installing anything, ever.  And so this is a place where you definitely do not want to run as an admin.  And maybe you even want to go further and do something like prevent Mom from even being able to give UAC permission.  I mean, really lock the system down tighter so she just can't go clicking away at things, thinking that she's doing something.  Because if it's things like fake AV, remember that one of my favorite things of all, I think it was our friend Brian Krebs who I quoted, he said, "Never install anything you didn't go looking for.



LEO:  Right.



STEVE:  I love that advice.  If something offers you software, just say no.  Unless you initiated the search, don't install it, period. 



LEO:  Right.  I, for a long time, when my mom was still using Windows - she uses a Mac now.  But when she was using Windows, I put her on Windows 2000, a limited account, and I never had a problem for years.  She could do anything she wanted.  I explained to her how to do antivirus updates, how she had to log in as administrator.  I gave her the tool to do that, but she was smart.  She only did that when she wanted to update her antivirus.  And any other time she was running as a limited user, and it was absolutely secure.  She never had a problem.



Question 10 from Mike Norin in North Bend, Washington.  He says:  ScriptNo - is it needed?  This is that Chrome extension that we talked about last week.  But he says:  Given Chrome's built-in sandboxing capability, do you really need protection from malware on Chrome?  And given Chrome's performance at Pwn2Own, and with its regular automatic updates from Google, it seems Chrome is pretty well locked down out of the box.  Do I have a false sense of security?  Thanks.



STEVE:  The only thing I would note - first of all, I agree with all that.  I hope that Chrome's sandboxing is good and getting better.  But we'll also notice that Chrome is being updated all the time.



LEO:  Yeah, there's always something.



STEVE:  And it's not only to increment their version number faster than Mozilla.



LEO:  I found ScriptNo such a pain in the butt.



STEVE:  Yeah?



LEO:  Because I kept going to sites, and it wouldn't work, and I'd think it was me.  And then I'd remember, oh, I have ScriptNo installed.  And I would have to give permission.  I just gave up.



STEVE:  I know.  It is a different mode of operating, one I'm willing to do.



LEO:  You're used to it.



STEVE:  Yeah, I'm used to it.  And again, Chrome is being updated, but they're being updated because of problems being found.  So I love that it's secure by design rather than by hope.  But they're still only human.



LEO:  And finally, our Unintended Consequence of the Week Report from Bob in Littleton, Colorado:  Steve and Leo, I found that the web and PDF transcripts of 339 were cut short at the point right after Steve says, "By default, he blocks the blank."  I brought up the simple text transcript for 339.  It appears to be complete.  By this time you've probably been notified of this.  I enjoy every podcast every week.  Thanks, Bob.  What happened, Steve?



STEVE:  Oh, this is where Elaine is so fantastic.



LEO:  She wasn't fooled.



STEVE:  I said - and no other transcriber on the planet would have done this correctly.  I said, "By default" - we're talking about the ScriptNo add-on.  I said, "By default he blocks the [ahem] NOSCRIPT [ahem] tag."  Elaine knows that HTML tags are in angle brackets:  less than, NOSCRIPT, greater than.  So in her transcript she has it correct.  And when that loads into the browser...



LEO:  It stops.



STEVE:  It stops because it says NOSCRIPT.



LEO:  You have to tell her about HTML entity encoding from now on.



STEVE:  Isn't that fantastic?



LEO:  That is pretty funny.



STEVE:  I got a report quickly after the transcripts went up, and I thought, what the heck?



LEO:  What could have possibly happened?



STEVE:  Because I've had no trouble at all in all these years.  And sure enough, I looked at it, and I just thought, oh, my goodness, the scripting was enabled for my local site because I'm using it on my own browser.  So as soon as the HTML hit the NOSCRIPT tag, it dropped everything from there on.  And the transcript just stopped.  And so all I had to do was I just turned those into &gt; and &lt;, and it was just fine then.  And so it showed them in the transcript without it chopping it off.  So, oh, I just loved it.  What a wonderful little bug.



LEO:  And if Steve ever says "drop table" in a podcast, please do not execute.  That's pretty funny.  That is really funny.  Yeah, so use HTML entity encoding by doing ampersand lt (for less than) semicolon and ampersand gt (for greater than) semicolon.  And then you'll be okay.



STEVE:  And Elaine, you're forgiven because it is that level of technical transcribing accuracy...



LEO:  Oh, it's fantastic.



STEVE:  ...that makes it all worthwhile.



LEO:  Not her fault.



STEVE:  So, yeah.



LEO:  Steve, thanks so much.  We do this show every Wednesday at 11:00 a.m. Pacific, 2:00 p.m. Eastern, 1800, I guess 1900 UTC because we're not in summertime anymore, on TWiT.tv.  You can watch live, always fun.  But if you don't get to, or it's a bad time for you, please download the podcast.  We have audio and video available at TWiT.tv.  You can even subscribe on iTunes or any podcast catcher, downcast on the iPod or iPhone, or the iPad, I should say.  I use Listen from Google on the Android side, and just subscribe, and you'll get them automatically, and you can listen to them, which is wonderful.  Steve does have a version that's a little unusual.  He has a 16Kb audio version.  That's the smallest audio we make available, for those of you who are bandwidth impaired or throttled or whatever.  And there's also those great transcripts from Elaine, all available at GRC.com.  That's where you should go if you want to give Steve any feedback.  He's got a form, GRC.com/feedback.  You'll also find SpinRite there, the world's finest hard drive utility.



STEVE:  Yay.



LEO:  As well as a lot of freebies because Steve is really good on just making stuff available for free.  And, finally, follow him on Twitter so that he can DM you.  He's @SGgrc, if you want to follow him on Twitter.  Steve, thank you so much.  We'll see you next week.



STEVE:  Talk to you then, Leo.



Copyright (c) 2012 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details: http://creativecommons.org/licenses/by-nc-sa/2.5/.




